language: d
name: HumanEval_93_encode
results:
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string vowels = \"aeiouAEIOU\";\n    string alphabet = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(vowels.canFind(c))\n\
    \        {\n            int pos = c == 'Z' || c == 'z' ? 0 : vowels.indexOf(c)\
    \ + 2;\n            result ~= alphabet[pos];\n        }\n        else\n      \
    \  {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7av9i6wo.d(24): Error: no property `canFind` for type `string`

    /tmp/tmp7av9i6wo.d(26): Error: no property `indexOf` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7av9i6wo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n    char[] output = toLowerArray(message);\n\
    \    for (int i = 0; i < output.length; i++)\n    {\n        if (isUpper(output[i]))\n\
    \        {\n            output[i] = toLower(output[i]);\n        }\n        else\
    \ if (isLower(output[i]))\n        {\n            output[i] = toUpper(output[i]);\n\
    \        }\n        for (int j = 0; j < vowels.length; j++)\n        {\n     \
    \       if (output[i] == vowels[j])\n            {\n                output[i]\
    \ = vowels[(j + 2) % vowels.length];\n            }\n        }\n    }\n    return\
    \ output.idup;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpopknxfk3.d(19): Error: a struct is not a valid initializer for
    a `char[]`

    /tmp/tmpopknxfk3.d(20): Error: undefined identifier `toLowerArray`

    /tmp/tmpopknxfk3.d(23): Error: undefined identifier `isUpper`

    /tmp/tmpopknxfk3.d(25): Error: undefined identifier `toLower`

    /tmp/tmpopknxfk3.d(27): Error: undefined identifier `isLower`

    /tmp/tmpopknxfk3.d(29): Error: undefined identifier `toUpper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpopknxfk3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n  immutable string alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\
    ;\n  immutable string vowels = \"AEIOUaeiou\";\n  immutable int shift = 2;\n \
    \ immutable int start = 0;\n  immutable int end = message.length;\n  string encoded\
    \ = \"\";\n  for (int i = start; i < end; i++)\n  {\n    if (vowels.canFind(message[i]))\n\
    \    {\n      int newPos = alphabet.indexOf(message[i]) + shift;\n      if (newPos\
    \ >= alphabet.length)\n      {\n        newPos -= alphabet.length;\n      }\n\
    \      encoded ~= alphabet[newPos];\n    }\n    else if (message[i].isUpper)\n\
    \    {\n      encoded ~= message[i].toLower;\n    }\n    else if (message[i].isLower)\n\
    \    {\n      encoded ~= message[i].toUpper;\n    }\n    else\n    {\n      encoded\
    \ ~= message[i];\n    }\n  }\n  return encoded;\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmuf6db97.d(23): Error: cannot implicitly convert expression `message.length`
    of type `ulong` to `immutable(int)`

    /tmp/tmpmuf6db97.d(27): Error: no property `canFind` for type `immutable(string)`

    /tmp/tmpmuf6db97.d(29): Error: no property `indexOf` for type `immutable(string)`

    /tmp/tmpmuf6db97.d(36): Error: no property `isUpper` for type `immutable(char)`

    /tmp/tmpmuf6db97.d(38): Error: no property `toLower` for type `immutable(char)`

    /tmp/tmpmuf6db97.d(40): Error: no property `isLower` for type `immutable(char)`

    /tmp/tmpmuf6db97.d(42): Error: no property `toUpper` for type `immutable(char)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmuf6db97.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    /* Your Code Here */\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp162fi2cp.d(17): Error: function `tmp162fi2cp.encode` has no `return`
    statement, but is expected to return a value of type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp162fi2cp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    enum vowels = ['a', 'e', 'i', 'o', 'u'];\n    char[] encoded = message.dup;\n\
    \    foreach(i, ch; encoded)\n    {\n        if(isUpper(ch))\n            ch =\
    \ toLower(ch);\n        else if(isLower(ch))\n            ch = toUpper(ch);\n\
    \        if(vowels.canFind(ch))\n            ch = vowels[vowels.indexOf(ch) +\
    \ 2];\n        encoded[i] = ch;\n    }\n    return encoded.join;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmvhmmqox.d(23): Error: undefined identifier `isUpper`

    /tmp/tmpmvhmmqox.d(24): Error: undefined identifier `toLower`

    /tmp/tmpmvhmmqox.d(25): Error: undefined identifier `isLower`

    /tmp/tmpmvhmmqox.d(26): Error: undefined identifier `toUpper`

    /tmp/tmpmvhmmqox.d(27): Error: no property `canFind` for type `char[]`

    /tmp/tmpmvhmmqox.d(28): Error: no property `indexOf` for type `char[]`

    /tmp/tmpmvhmmqox.d(31): Error: no property `join` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmvhmmqox.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    string const vowels = \"AEIOU\";\n    foreach(ch;\
    \ message) {\n        auto u = toupper(ch);\n        if (ch == u) {\n        \
    \    result ~= tolower(ch);\n        } else {\n            result ~= u;\n    \
    \    }\n        if (vowels.indexOf(u) >= 0) {\n            result.back = toupper(vowels[(vowels.indexOf(u)\
    \ + 2) % 5]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpax_ptok0.d(20): Error: found `const` when expecting `;` following
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpax_ptok0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message) \n    {\n     \
    \   if(isalpha(c)) \n        {\n            char encoded_char = (isupper(c) ?\
    \ 'A' : 'a') + \n                (((tolower(c) - 'a' + 2) % 26));\n          \
    \  if(isalpha(encoded_char)) \n            {\n                result ~= (isupper(c)\
    \ ? toupper(encoded_char) : tolower(encoded_char));\n            } \n        \
    \    else \n            {\n                result ~= c;\n            }\n     \
    \   } \n        else \n        {\n            result ~= c;\n        }\n    }\n\
    \    return result;\n}\n// TESTS\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp91w520rq.d(22): Error: undefined identifier `isalpha`

    /tmp/tmp91w520rq.d(24): Error: undefined identifier `isupper`

    /tmp/tmp91w520rq.d(25): Error: undefined identifier `tolower`

    /tmp/tmp91w520rq.d(26): Error: undefined identifier `isalpha`

    /tmp/tmp91w520rq.d(28): Error: undefined identifier `isupper`

    /tmp/tmp91w520rq.d(28): Error: undefined identifier `toupper`

    /tmp/tmp91w520rq.d(28): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp91w520rq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    int str_len = message.length;\n    int i;\n    int vowels_loc[str_len];\n\
    \    int num_vowels = 0;\n    int temp_vowels[str_len];\n    int j = 0;\n    int\
    \ k = 0;\n    for (i = 0; i < str_len; i++)\n    {\n        \n        if (message[i]\
    \ == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i]\
    \ == 'u')\n        {\n            vowels_loc[num_vowels] = i;\n            num_vowels++;\n\
    \        }\n    }\n    //writeln(num_vowels);\n    //writeln(vowels_loc);\n  \
    \  //int *temp_vowels = new int[num_vowels];\n    for (i = 0; i < num_vowels;\
    \ i++)\n    {\n        temp_vowels[i] = message[vowels_loc[i]];\n    }\n    //writeln(temp_vowels);\n\
    \    for (i = 0; i < num_vowels; i++)\n    {\n        if (temp_vowels[i] == 'u')\n\
    \        {\n            temp_vowels[i] = 'a';\n        }\n        else if (temp_vowels[i]\
    \ == 'a')\n        {\n            temp_vowels[i] = 'e';\n        }\n        else\
    \ if (temp_vowels[i] == 'e')\n        {\n            temp_vowels[i] = 'i';\n \
    \       }\n        else if (temp_vowels[i] == 'i')\n        {\n            temp_vowels[i]\
    \ = 'o';\n        }\n        else if (temp_vowels[i] == 'o')\n        {\n    \
    \        temp_vowels[i] = 'u';\n        }\n    }\n    //writeln(temp_vowels);\n\
    \    for (i = 0; i < str_len; i++)\n    {\n\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvrs9y13x.d(21): Deprecation: instead of C-style syntax, use D-style
    syntax `int[str_len] vowels_loc`

    /tmp/tmpvrs9y13x.d(23): Deprecation: instead of C-style syntax, use D-style syntax
    `int[str_len] temp_vowels`

    /tmp/tmpvrs9y13x.d(70): Error: found `unittest` instead of statement

    /tmp/tmpvrs9y13x.d(80): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvrs9y13x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    int size = message.length;\n    char[] encoded = new char[size];\n\
    \    string vowels = \"AEIOUaeiou\";\n    foreach(int i, char letter; message)\n\
    \    {\n        if(vowels.find(letter) != -1)\n        {\n            encoded[i]\
    \ = vowels[(vowels.find(letter) + 2) % 10];\n        }\n        else\n       \
    \ {\n            if(isUpper(letter))\n            {\n                encoded[i]\
    \ = toLower(letter);\n            }\n            else\n            {\n       \
    \         encoded[i] = toUpper(letter);\n            }\n        }\n    }\n   \
    \ return encoded.dup.idup;\n}\nunittest\n{\n    alias candidate = encode;\n\n\
    \    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo9uyouje.d(19): Error: cannot implicitly convert expression `message.length`
    of type `ulong` to `int`

    /tmp/tmpo9uyouje.d(24): Error: no property `find` for type `string`

    /tmp/tmpo9uyouje.d(26): Error: no property `find` for type `string`

    /tmp/tmpo9uyouje.d(30): Error: undefined identifier `isUpper`

    /tmp/tmpo9uyouje.d(32): Error: undefined identifier `toLower`

    /tmp/tmpo9uyouje.d(36): Error: undefined identifier `toUpper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo9uyouje.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    bool shouldChange = true;\n    bool isVowel = false;\n    char newVowel;\n\
    \    string newMessage = \"\";\n    for (int i = 0; i < message.length; i++) {\n\
    \        newVowel = message[i];\n        shouldChange = isEven(i);\n        isVowel\
    \ = isAVowel(message[i]);\n        newMessage += ((isVowel && shouldChange) ?\
    \ getNextVowel(message[i]) : message[i]);\n        newMessage += ((isVowel &&\
    \ !shouldChange) ? getPrevVowel(message[i]) : message[i]);\n        newMessage\
    \ += ((isVowel && !shouldChange) ? getPrevVowel(message[i]) : message[i]);\n \
    \       newMessage += ((isVowel && !shouldChange) ? getPrevVowel(message[i]) :\
    \ message[i]);\n        newMessage += ((isVowel && !shouldChange) ? getPrevVowel(message[i])\
    \ : message[i]);\n        newMessage += ((isVowel && !shouldChange) ? getPrevVowel(message[i])\
    \ : message[i]);\n        newMessage += ((isVowel && !shouldChange) ? getPrevVowel(message[i])\
    \ : message[i]);\n        newMessage += ((isVowel && !shouldChange) ? getPrevVowel(message[i])\
    \ : message[i]);\n        newMessage += ((isVowel && !shouldChange) ? getPrevVowel(message[i])\
    \ : message[i]);\n        newMessage += ((isVowel && !shouldChange) ? getPrevVowel(message[i])\
    \ : message[i]);\n        newMessage += ((isVowel && !shouldChange) ? getPrevVowel(message[i])\
    \ : message[i]);\n        newMessage += ((isVowel && !shouldChange) ? getPrevVowel(message[i])\
    \ : message[i]);\n        newMessage += ((isVowel && !shouldChange) ? getPrevVowel(message[i])\
    \ : message[i]);\n        newMessage += ((isVowel && !shouldChange) ? getPrevV\n\
    unittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") ==\
    \ \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprawlotgm.d(41): Error: found `unittest` when expecting `:`

    /tmp/tmprawlotgm.d(40): Error: found `void` when expecting `)`

    /tmp/tmprawlotgm.d(51): Error: found `main` when expecting `;` following statement

    /tmp/tmprawlotgm.d(51): Error: found `End of File` when expecting `;` following
    statement

    /tmp/tmprawlotgm.d(51): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmprawlotgm.d(51): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprawlotgm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string encoded = \"\";\n    char vowels[6] = {'a', 'e', 'i', 'o', 'u',\
    \ 'y'};\n    foreach(ch; message)\n    {\n        if(ch >= 'a' && ch <= 'z')\n\
    \        {\n            if(ch >= 'a' && ch <= 'z')\n            {\n          \
    \      encoded ~= to!char(ch + ('A' - 'a'));\n            }\n            else\n\
    \            {\n                encoded ~= to!char(ch + ('a' - 'A'));\n      \
    \      }\n            continue;\n        }\n        else\n        {\n        \
    \    encoded ~= ch;\n        }\n    }\n    return encoded;\n}\nunittest\n{\n \
    \   alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo7nv10g2.d(20): Deprecation: instead of C-style syntax, use D-style
    syntax `char[6] vowels`

    /tmp/tmpo7nv10g2.d(20): Error: a struct is not a valid initializer for a `char[6]`

    /tmp/tmpo7nv10g2.d(27): Error: template instance `to!char` template `to` is not
    defined

    /tmp/tmpo7nv10g2.d(31): Error: template instance `to!char` template `to` is not
    defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo7nv10g2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    int len = message.length;\n    char [] newstring = new char[len];\n\
    \    char newchar;\n    for (int i = 0; i < len; i++)\n    {\n        newchar\
    \ = message[i];\n        if (newchar == 'e')\n        {\n            newchar =\
    \ 'g';\n        }\n        else if (newchar == 'i')\n        {\n            newchar\
    \ = 'k';\n        }\n        else if (newchar == 'o')\n        {\n           \
    \ newchar = 'q';\n        }\n        else if (newchar == 'u')\n        {\n   \
    \         newchar = 'y';\n        }\n        else if (newchar == 'E')\n      \
    \  {\n            newchar = 'G';\n        }\n        else if (newchar == 'I')\n\
    \        {\n            newchar = 'K';\n        }\n        else if (newchar ==\
    \ 'O')\n        {\n            newchar = 'Q';\n        }\n        else if (newchar\
    \ == 'U')\n        {\n            newchar = 'Y';\n        }\n        else if (newchar.isUpper\
    \ == true)\n        {\n            newchar = newchar.toLower;\n        }\n   \
    \     else if (newchar.isLower == true)\n        {\n            newchar = newchar.toUpper;\n\
    \        }\n        newstring[i] = newchar;\n    }\n    return newstring.dup;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsece11_f.d(19): Error: cannot implicitly convert expression `message.length`
    of type `ulong` to `int`

    /tmp/tmpsece11_f.d(57): Error: no property `isUpper` for type `char`

    /tmp/tmpsece11_f.d(59): Error: no property `toLower` for type `char`

    /tmp/tmpsece11_f.d(61): Error: no property `isLower` for type `char`

    /tmp/tmpsece11_f.d(63): Error: no property `toUpper` for type `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsece11_f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string new_message = \"\";\n    string all_letters = \"aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ\"\
    ;\n    string vowels = \"aAeEiIoOuU\";\n    for (int i = 0; i < message.length;\
    \ i++) {\n        for (int j = 0; j < all_letters.length; j++) {\n           \
    \ if (message[i] == all_letters[j]) {\n                int indx = j;\n       \
    \         if (indx + 1 == all_letters.length) {\n                    indx = 0;\n\
    \                }\n                new_message += all_letters[indx + 1];\n  \
    \          }\n        }\n    }\n    return new_message;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_xyp68dl.d(29): Error: slice `new_message` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_xyp68dl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    // function will convert message to lowercase\n    message = toLower(message);\n\
    unittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") ==\
    \ \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1v6kv9tq.d(21): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1v6kv9tq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n  string alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  string vowels =\
    \ \"AEIOU\";\n  string output = \"\";\n  for (size_t i = 0; i < message.length();\
    \ i++) {\n    char c = message[i];\n    size_t index = alphabet.find(c);\n   \
    \ if (index != string::npos) {\n      size_t index_vowel = vowels.find(c);\n \
    \     if (index_vowel != string::npos) {\n        c = vowels[(index_vowel + 2)\
    \ % vowels.length()];\n      }\n      output += c;\n    } else {\n      output\
    \ += c;\n    }\n  }\n  return output;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxv7yiryw.d(25): Error: found `:` when expecting `)`

    /tmp/tmpxv7yiryw.d(25): Error: found `:` instead of statement

    /tmp/tmpxv7yiryw.d(27): Error: found `:` when expecting `)`

    /tmp/tmpxv7yiryw.d(27): Error: found `:` instead of statement

    /tmp/tmpxv7yiryw.d(31): Error: declaration expected, not `else`

    /tmp/tmpxv7yiryw.d(33): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxv7yiryw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(c; message) \n    {\n        char c2 =\
    \ toLower(c);\n        if (c2 >= 'a' && c2 <= 'z') \n        {\n            if\
    \ (c2 == 'z')\n                c2 = 'a';\n            else if (c2 == 'y')\n  \
    \              c2 = 'b';\n            else\n                c2 += 2;\n       \
    \     if (c >= 'A' && c <= 'Z')\n                c2 = toupper(c2);\n        }\n\
    \        else if (c2 == 'a' || c2 == 'e' || c2 == 'i' || c2 == 'o' || c2 == 'u')\
    \ \n        {\n            if (c2 == 'u')\n                c2 = 'a';\n       \
    \     else if (c2 == 'o')\n                c2 = 'e';\n            else\n     \
    \           c2 += 2;\n            if (c >= 'A' && c <= 'Z')\n                c2\
    \ = toupper(c2);\n        }\n        result ~= c2;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxtmm7nl0.d(22): Error: undefined identifier `toLower`

    /tmp/tmpxtmm7nl0.d(32): Error: undefined identifier `toupper`

    /tmp/tmpxtmm7nl0.d(43): Error: undefined identifier `toupper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxtmm7nl0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    char temp;\n    for (int i = 0; i < message.length;\
    \ i++)\n    {\n        temp = tolower(message[i]);\n        if (temp == 'a')\n\
    \        {\n            result ~= 'c';\n        }\n        else if (temp == 'e')\n\
    \        {\n            result ~= 'g';\n        }\n        else if (temp == 'i')\n\
    \        {\n            result ~= 'k';\n        }\n        else if (temp == 'o')\n\
    \        {\n            result ~= 'q';\n        }\n        else if (temp == 'u')\n\
    \        {\n            result ~= 's';\n        }\n        else if (temp == 'y')\n\
    \        {\n            result ~= 'a';\n        }\n        else if (temp == 'b')\n\
    \        {\n            result ~= 'd';\n        }\n        else if (temp == 'f')\n\
    \        {\n            result ~= 'h';\n        }\n        else if (temp == 'j')\n\
    \        {\n            result ~= 'l';\n        }\n        else if (temp == 'p')\n\
    \        {\n            result ~= 'r';\n        }\n        else if (temp == 'v')\n\
    \        {\n            result ~= 't';\n        }\n        else if (temp == 'z')\n\
    \        {\n            result ~= 'b';\n        }\n        else if (temp == 'c')\n\
    \        {\n            result ~= 'e';\n        }\n        else if (temp == 'g')\n\
    \        {\n            result ~= 'i';\n        }\n        else if (temp == 'k')\n\
    \        {\n            result ~= 'm';\n        }\n        else if (temp == 'q')\n\
    \        {\n            result ~= 'u';\n        }\n        else if (temp == 'w')\n\
    \        {\n            result ~= 'y';\n        }\n        else if (temp == 'd')\n\
    \        {\n            result ~= 'f';\n        }\n        else if (temp == 'h')\n\
    \        {\n            result ~= 'j';\n        }\n        else if (temp == 'l')\n\
    \        {\n\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqmxz6p91.d(103): Error: found `unittest` instead of statement

    /tmp/tmpqmxz6p91.d(113): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpqmxz6p91.d(113): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqmxz6p91.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string encoded_message = \"\";\n    foreach(char c; message)\n    {\n\
    \        if(c >= 'a' && c <= 'z')\n        {\n            c -= ('a' - 'A');\n\
    \        }\n        if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\
    \        {\n            if(c == 'U')\n            {\n                c = 'A';\n\
    \            }\n            else\n            {\n                c++;\n      \
    \          c++;\n            }\n        }\n        encoded_message ~= c;\n   \
    \ }\n    return encoded_message;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp94ylxoja.d(46): unittest failure

    ----------------

    ??:? _d_unittestp [0x427fe5]

    ??:? void tmp94ylxoja.__unittest_L42_C1() [0x427b86]

    ??:? void tmp94ylxoja.__modtest() [0x427d64]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c67b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b58a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ff61]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430410]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42feed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b561]

    ??:? runModuleUnitTests [0x42c451]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428434]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n\
    \        {\n            if(isupper(c))\n            {\n                result\
    \ ~= tolower(c);\n            }\n            else if(islower(c))\n           \
    \ {\n                result ~= toupper(c);\n            }\n        }\n       \
    \ else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgy10_7s1.d(22): Error: undefined identifier `isalpha`

    /tmp/tmpgy10_7s1.d(24): Error: undefined identifier `isupper`

    /tmp/tmpgy10_7s1.d(26): Error: undefined identifier `tolower`

    /tmp/tmpgy10_7s1.d(28): Error: undefined identifier `islower`

    /tmp/tmpgy10_7s1.d(30): Error: undefined identifier `toupper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgy10_7s1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    int length = message.length;\n    for (int i = 0; i < length; i++)\n\
    \    {\n        char c = message[i];\n        if (c >= 'a' && c <= 'z')\n    \
    \    {\n            message[i] = 'A' + (c - 'a');\n        }\n        else if\
    \ (c >= 'A' && c <= 'Z')\n        {\n            message[i] = 'a' + (c - 'A');\n\
    \        }\n        else\n        {\n            continue;\n        }\n    }\n\
    \    return message;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_2oqznkh.d(19): Error: cannot implicitly convert expression `message.length`
    of type `ulong` to `int`

    /tmp/tmp_2oqznkh.d(25): Error: cannot modify `immutable` expression `message[cast(ulong)i]`

    /tmp/tmp_2oqznkh.d(29): Error: cannot modify `immutable` expression `message[cast(ulong)i]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_2oqznkh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    string vowels = \"aeiouAEIOU\";\n    foreach(char\
    \ c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n            result ~=\
    \ toUpper(c);\n        else if(c >= 'A' && c <= 'Z')\n            result ~= toLower(c);\n\
    \        else\n            result ~= c;\n        if(c in vowels)\n        {\n\
    \            int index = indexOf(vowels, c);\n            result = replace(result,\
    \ c, vowels[(index + 2) % 5]);\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcl68grc8.d(24): Error: undefined identifier `toUpper`

    /tmp/tmpcl68grc8.d(26): Error: undefined identifier `toLower`

    /tmp/tmpcl68grc8.d(29): Error: incompatible types for `(c) in (vowels)`: `char`
    and `string`

    /tmp/tmpcl68grc8.d(31): Error: undefined identifier `indexOf`

    /tmp/tmpcl68grc8.d(32): Error: undefined identifier `replace`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcl68grc8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    //  add code here\n    return \"\";\n}\n \nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpyleb_6bz.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f0d]

    ??:? void tmpyleb_6bz.__unittest_L23_C1() [0x427ab2]

    ??:? void tmpyleb_6bz.__modtest() [0x427c90]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aac6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbdd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43008c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb69]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa9d]

    ??:? runModuleUnitTests [0x42b98d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42835c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string encoded = \"\";\n    for (int i = 0; i < message.length; i++)\n\
    \    {\n        char c = message[i];\n        char shifted = c;\n        if (isalpha(c))\n\
    \        {\n            if (isupper(c))\n            {\n                shifted\
    \ = tolower(c);\n            }\n            else\n            {\n            \
    \    shifted = toupper(c);\n            }\n        }\n        if (c == 'a' ||\
    \ c == 'A')\n        {\n            shifted = 'c';\n        }\n        else if\
    \ (c == 'e' || c == 'E')\n        {\n            shifted = 'g';\n        }\n \
    \       else if (c == 'i' || c == 'I')\n        {\n            shifted = 'k';\n\
    \        }\n        else if (c == 'o' || c == 'O')\n        {\n            shifted\
    \ = 'q';\n        }\n        else if (c == 'u' || c == 'U')\n        {\n     \
    \       shifted = 'y';\n        }\n        encoded += shifted;\n    }\n    return\
    \ encoded;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxb_07rdv.d(24): Error: undefined identifier `isalpha`

    /tmp/tmpxb_07rdv.d(26): Error: undefined identifier `isupper`

    /tmp/tmpxb_07rdv.d(28): Error: undefined identifier `tolower`

    /tmp/tmpxb_07rdv.d(32): Error: undefined identifier `toupper`

    /tmp/tmpxb_07rdv.d(55): Error: slice `encoded` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxb_07rdv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        int pos\
    \ = c - (c < 'a' ? 'A' : 'a');\n        int new_pos = (pos + 2) % 26;\n      \
    \  if(c == 'e' || c == 'i' || c == 'o' || c == 'u')\n            new_pos += 3;\n\
    \        c = (c < 'a' ? 'A' : 'a') + new_pos;\n        result ~= c;\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprw_4vhkw.d(26): Error: cannot implicitly convert expression `(cast(int)c
    < 97 ? 65 : 97) + new_pos` of type `int` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprw_4vhkw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string msgEncode = \"\";\n    foreach(char c; message)\n    {\n   \
    \     switch(c)\n        {\n            case 'a':\n                msgEncode ~=\
    \ 'c';\n                break;\n            case 'e':\n                msgEncode\
    \ ~= 'g';\n                break;\n            case 'i':\n                msgEncode\
    \ ~= 'k';\n                break;\n            case 'o':\n                msgEncode\
    \ ~= 'q';\n                break;\n            case 'u':\n                msgEncode\
    \ ~= 'y';\n                break;\n            case 'A':\n                msgEncode\
    \ ~= 'C';\n                break;\n            case 'E':\n                msgEncode\
    \ ~= 'G';\n                break;\n            case 'I':\n                msgEncode\
    \ ~= 'K';\n                break;\n            case 'O':\n                msgEncode\
    \ ~= 'Q';\n                break;\n            case 'U':\n                msgEncode\
    \ ~= 'Y';\n                break;\n            default:\n                msgEncode\
    \ ~= c;\n                break;\n        }\n    }\n    return msgEncode;\n}\n\
    unittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") ==\
    \ \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpalh7xr8p.d(65): unittest failure

    ----------------

    ??:? _d_unittestp [0x428235]

    ??:? void tmpalh7xr8p.__unittest_L61_C1() [0x427dd6]

    ??:? void tmpalh7xr8p.__modtest() [0x427fb4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c8cb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7da]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4301b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430660]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43013d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7b1]

    ??:? runModuleUnitTests [0x42c6a1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428684]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string newmessage = \"\";\n    char c = 0;\n    int i = 0;\n    foreach(char;\
    \ message)\n    {\n        c = message[i];\n        i++;\n        if (isUpper(c))\n\
    \        {\n            c = toLower(c);\n        }\n        else if (isLower(c))\n\
    \        {\n            c = toUpper(c);\n        }\n        if (c == 'a')\n  \
    \      {\n            c = 'c';\n        }\n        else if (c == 'e')\n      \
    \  {\n            c = 'g';\n        }\n        else if (c == 'i')\n        {\n\
    \            c = 'k';\n        }\n        else if (c == 'o')\n        {\n    \
    \        c = 'q';\n        }\n        else if (c == 'u')\n        {\n        \
    \    c = 'y';\n        }\n        newmessage ~= c;\n    }\n    return newmessage;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdebws69w.d(22): Error: no identifier for declarator `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdebws69w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    char a = 'a';\n    char A = 'A';\n    char[] vowels = [ 'a', 'e', 'i',\
    \ 'o', 'u' ];\n    char[] result = message.dup;\n    for (int i = 0; i < message.length;\
    \ i++) {\n        if ('a' <= message[i] && message[i] <= 'z') {\n            if\
    \ (message[i] == 'z') {\n                result[i] = 'A';\n            } else\
    \ {\n                result[i] = A + (message[i] - a + 1);\n            }\n  \
    \      } else if ('A' <= message[i] && message[i] <= 'Z') {\n            if (message[i]\
    \ == 'Z') {\n                result[i] = 'a';\n            } else {\n        \
    \        result[i] = a + (message[i] - A + 1);\n            }\n        }\n   \
    \     foreach (v; vowels) {\n            if (message[i] == v) {\n            \
    \    if (v == 'u') {\n                    result[i] = 'a';\n                }\
    \ else {\n                    result[i] = v + 2;\n                }\n        \
    \    }\n        }\n    }\n    return result.idup;\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo4dynhdc.d(28): Error: cannot implicitly convert expression `cast(int)A
    + (cast(int)message[cast(ulong)i] - cast(int)a + 1)` of type `int` to `char`

    /tmp/tmpo4dynhdc.d(34): Error: cannot implicitly convert expression `cast(int)a
    + (cast(int)message[cast(ulong)i] - cast(int)A + 1)` of type `int` to `char`

    /tmp/tmpo4dynhdc.d(42): Error: cannot implicitly convert expression `cast(int)v
    + 2` of type `int` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo4dynhdc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    int len = message.length;\n    string newMessage = \"\";\n    string\
    \ vowels = \"aeiou\";\n    string vowels_2 = \"cdfghjklmnpqrstvwxyz\";\n    for\
    \ (int i = 0; i < len; i++)\n    {\n        char c = message[i];\n        if (vowels.findFirstOf(c)\
    \ != -1)\n        {\n            newMessage += vowels_2[vowels.findFirstOf(c)];\n\
    \        }\n        else if (vowels_2.findFirstOf(c) != -1)\n        {\n     \
    \       newMessage += vowels[vowels_2.findFirstOf(c)];\n        }\n        else\
    \ if (message[i] >= 'A' && message[i] <= 'Z')\n        {\n            newMessage\
    \ += char(message[i] + 32);\n        }\n        else if (message[i] >= 'a' &&\
    \ message[i] <= 'z')\n        {\n            newMessage += char(message[i] - 32);\n\
    \        }\n        else\n        {\n            newMessage += message[i];\n \
    \       }\n    }\n    return newMessage;\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqj5srxic.d(19): Error: cannot implicitly convert expression `message.length`
    of type `ulong` to `int`

    /tmp/tmpqj5srxic.d(26): Error: no property `findFirstOf` for type `string`

    /tmp/tmpqj5srxic.d(28): Error: no property `findFirstOf` for type `string`

    /tmp/tmpqj5srxic.d(30): Error: no property `findFirstOf` for type `string`

    /tmp/tmpqj5srxic.d(32): Error: no property `findFirstOf` for type `string`

    /tmp/tmpqj5srxic.d(36): Error: cannot implicitly convert expression `cast(int)message[cast(ulong)i]
    + 32` of type `int` to `char`

    /tmp/tmpqj5srxic.d(40): Error: cannot implicitly convert expression `cast(int)message[cast(ulong)i]
    - 32` of type `int` to `char`

    /tmp/tmpqj5srxic.d(44): Error: slice `newMessage` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqj5srxic.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    import std.string;\n    message = message.toUpper();\n    string encode;\n\
    \    int up = 'Z' - 'A';\n    foreach(x; message)\n    {\n        if(isAlpha(x))\n\
    \        {\n            encode ~= cast(char)(cast(int)(x) + (isUpper(x) ?  1 :\
    \ -1));\n            switch(cast(char)(cast(int)(x) + (isUpper(x) ?  1 : -1)))\n\
    \            {\n                case 'A':\n                case 'E':\n       \
    \         case 'I':\n                case 'O':\n                case 'U':\n  \
    \                  encode[$-1] = cast(char)(cast(int)(x) + (isUpper(x) ?  2 :\
    \ -2));\n                    break;\n            }\n        }\n        else encode\
    \ ~= x;\n    }\n    return encode;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp72bb5ntl.d(25): Error: undefined identifier `isAlpha`

    /tmp/tmp72bb5ntl.d(27): Error: undefined identifier `isUpper`, did you mean alias
    `toUpper`?

    /tmp/tmp72bb5ntl.d(28): Error: undefined identifier `isUpper`, did you mean alias
    `toUpper`?

    /tmp/tmp72bb5ntl.d(35): Error: undefined identifier `isUpper`, did you mean alias
    `toUpper`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp72bb5ntl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    \n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8g9dekat.d(17): Error: function `tmp8g9dekat.encode` has no `return`
    statement, but is expected to return a value of type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8g9dekat.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string encodedMessage = \"\";\n    string vowels = \"aeiou\";\n   \
    \ foreach(char c; message) \n    {\n        if(c >= 'a' && c <= 'z') \n      \
    \  {\n            c = c.toUpper;\n        }\n        else if(c >= 'A' && c <=\
    \ 'Z') \n        {\n            c = c.toLower;\n        }\n        else \n   \
    \     {\n            encodedMessage ~= c;\n            continue;\n        }\n\
    \        if(vowels.indexOf(c) != -1) \n        {\n            int index = vowels.indexOf(c);\n\
    \            index = (index + 2) % 5;\n            c = vowels[index];\n      \
    \  }\n        encodedMessage ~= c;\n    }\n    return encodedMessage;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm839iuww.d(25): Error: no property `toUpper` for type `char`

    /tmp/tmpm839iuww.d(29): Error: no property `toLower` for type `char`

    /tmp/tmpm839iuww.d(36): Error: no property `indexOf` for type `string`

    /tmp/tmpm839iuww.d(38): Error: no property `indexOf` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm839iuww.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    //TODO: implement this function\n    string temp = message;\n    //\
    \ std.algorithm.transform(message.begin(), message.end(), temp.begin(), &encode_char);\n\
    \    for (int i = 0; i < message.length; i++)\n    {\n        temp[i] = encode_char(message[i]);\n\
    \    }\n    return temp;\n}\nunittest\n{\n    alias candidate = encode;\n\n  \
    \  assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptj4tmvrw.d(24): Error: undefined identifier `encode_char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptj4tmvrw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    // Iterate through each character in the message\n    // and check\
    \ whether it is a letter\n    foreach(char c; message)\n    {\n        // Check\
    \ whether character is a letter\n        if (isalpha(c))\n        {\n        \
    \    // convert to lower case\n            c = tolower(c);\n            // Check\
    \ whether character is a vowel\n            if (c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u')\n            {\n                // If so, find the\
    \ next two characters and replace with that\n                switch (c)\n    \
    \            {\n                    case 'a': c = 'c'; break;\n              \
    \      case 'e': c = 'g'; break;\n                    case 'i': c = 'k'; break;\n\
    \                    case 'o': c = 'q'; break;\n                    case 'u':\
    \ c = 'y'; break;\n                }\n            }\n            else\n      \
    \      {\n                // Not a vowel\n                // Convert the character\
    \ to upper case\n                c = toupper(c);\n            }\n        }\n \
    \   }\n    return message;\n}\nunittest\n{\n    alias candidate = encode;\n\n\
    \    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk2l2rf80.d(24): Error: undefined identifier `isalpha`

    /tmp/tmpk2l2rf80.d(27): Error: undefined identifier `tolower`

    /tmp/tmpk2l2rf80.d(32): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    /tmp/tmpk2l2rf80.d(45): Error: undefined identifier `toupper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk2l2rf80.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    auto encodeMessage = message;\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfiwzxkxl.d(20): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfiwzxkxl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    \n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8g9dekat.d(17): Error: function `tmp8g9dekat.encode` has no `return`
    statement, but is expected to return a value of type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8g9dekat.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    char vowels[] = \"aeiou\";\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb6qzn9tz.d(19): Deprecation: instead of C-style syntax, use D-style
    syntax `char[] vowels`

    /tmp/tmpb6qzn9tz.d(20): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb6qzn9tz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message) \n    {\n        // Change\
    \ case of character\n        c = isalpha(c) ? c ^ ' ' : c;\n        // Encode\
    \ vowel\n        if (c == 'a') c = 'c';\n        else if (c == 'e') c = 'g';\n\
    \        else if (c == 'i') c = 'k';\n        else if (c == 'o') c = 'q';\n  \
    \      else if (c == 'u') c = 's';\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp21k87kpm.d(23): Error: undefined identifier `isalpha`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp21k87kpm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(isalpha(c))\n        {\n            result ~= isupper(c) ? tolower(c) :\
    \ c;\n            if(isVowel(result[$-1]))\n            {\n                char\
    \ cc = result[$-1];\n                cc = (cc-'a'+2)%26 + 'a';\n             \
    \   result[$-1] = cc;\n            }\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") ==\
    \ \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdpxdko7y.d(22): Error: undefined identifier `isalpha`

    /tmp/tmpdpxdko7y.d(24): Error: undefined identifier `isupper`

    /tmp/tmpdpxdko7y.d(24): Error: undefined identifier `tolower`

    /tmp/tmpdpxdko7y.d(25): Error: undefined identifier `isVowel`

    /tmp/tmpdpxdko7y.d(29): Error: cannot modify `immutable` expression `result[__dollar
    - 1LU]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdpxdko7y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    return \"YOUR CODE HERE\";\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqeacm_j7.d(25): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f15]

    ??:? void tmpqeacm_j7.__unittest_L21_C1() [0x427ab6]

    ??:? void tmpqeacm_j7.__modtest() [0x427c94]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbbf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aace]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbe5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430094]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb71]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aaa5]

    ??:? runModuleUnitTests [0x42b995]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428364]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n  string msg;\n  foreach(char c; message) {\n    if(isAlpha(c)) {\n   \
    \   if(isLower(c)) {\n        msg ~= toupper(c);\n      } else {\n        msg\
    \ ~= tolower(c);\n      }\n    } else {\n      msg ~= c;\n    }\n  }\n  string\
    \ msg2;\n  foreach(char c; msg) {\n    switch(c) {\n      case 'a': msg2 ~= 'c';\
    \ break;\n      case 'e': msg2 ~= 'g'; break;\n      case 'i': msg2 ~= 'k'; break;\n\
    \      case 'o': msg2 ~= 'q'; break;\n      case 'u': msg2 ~= 'y'; break;\n  \
    \    default: msg2 ~= c;\n    }\n  }\n  return msg2;\n}\n/*\n    Write a function\
    \ that, given a message that has been encoded \n    with the above algorithm,\
    \ can decode it back to the original \n    message.\n    \n    Examples:\n   \
    \ >>> decode(\"TGST\")\n    \"test\"\n    >>> decode(\"tHKS KS C MGSSCGG\")\n\
    \    \"This is a message\"\n*/\nstring decode(string message) \n{\n  string msg;\n\
    \  foreach(char c; message) {\n    switch(c) {\n      case 'C': msg ~= 'a'; break;\n\
    \      case 'G': msg ~= 'e'; break;\n      case 'K': msg ~= 'i'; break;\n    \
    \  case 'Q': msg ~= 'o'; break;\n      case 'Y': msg ~= 'u'; break;\n      default:\
    \ msg ~= c;\n    }\n  }\n  string msg2;\n  foreach(char c; msg) {\n    if(isAlpha(c))\
    \ {\n      if(isLower(c)) {\n        msg2 ~= toupper(c);\n      } else {\n   \
    \     msg2 ~= tolower(c);\n      }\n    } else {\n      msg2 ~= c;\n    }\n  }\n\
    \  return msg2;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptdv31uro.d(21): Error: undefined identifier `isAlpha`

    /tmp/tmptdv31uro.d(22): Error: undefined identifier `isLower`

    /tmp/tmptdv31uro.d(23): Error: undefined identifier `toupper`

    /tmp/tmptdv31uro.d(25): Error: undefined identifier `tolower`

    /tmp/tmptdv31uro.d(70): Error: undefined identifier `isAlpha`

    /tmp/tmptdv31uro.d(71): Error: undefined identifier `isLower`

    /tmp/tmptdv31uro.d(72): Error: undefined identifier `toupper`

    /tmp/tmptdv31uro.d(74): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptdv31uro.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    int n = message.length;\n    string result;\n    for (int i = 0; i\
    \ < n; i++) {\n        if (message[i] == 'a') {\n            result += 'c';\n\
    \        } else if (message[i] == 'e') {\n            result += 'g';\n       \
    \ } else if (message[i] == 'i') {\n            result += 'k';\n        } else\
    \ if (message[i] == 'o') {\n            result += 'q';\n        } else if (message[i]\
    \ == 'u') {\n            result += 'y';\n        } else if (message[i] == 'A')\
    \ {\n            result += 'C';\n        } else if (message[i] == 'E') {\n   \
    \         result += 'G';\n        } else if (message[i] == 'I') {\n          \
    \  result += 'K';\n        } else if (message[i] == 'O') {\n            result\
    \ += 'Q';\n        } else if (message[i] == 'U') {\n            result += 'Y';\n\
    \        } else if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += message[i] + 2;\n        } else if (message[i] >= 'A' && message[i] <= 'Z')\
    \ {\n            result += message[i] + 2;\n        } else {\n            result\
    \ += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx8mue44n.d(19): Error: cannot implicitly convert expression `message.length`
    of type `ulong` to `int`

    /tmp/tmpx8mue44n.d(23): Error: slice `result` is not mutable

    /tmp/tmpx8mue44n.d(25): Error: slice `result` is not mutable

    /tmp/tmpx8mue44n.d(27): Error: slice `result` is not mutable

    /tmp/tmpx8mue44n.d(29): Error: slice `result` is not mutable

    /tmp/tmpx8mue44n.d(31): Error: slice `result` is not mutable

    /tmp/tmpx8mue44n.d(33): Error: slice `result` is not mutable

    /tmp/tmpx8mue44n.d(35): Error: slice `result` is not mutable

    /tmp/tmpx8mue44n.d(37): Error: slice `result` is not mutable

    /tmp/tmpx8mue44n.d(39): Error: slice `result` is not mutable

    /tmp/tmpx8mue44n.d(41): Error: slice `result` is not mutable

    /tmp/tmpx8mue44n.d(43): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i]
    + 2)`: `string` and `int`

    /tmp/tmpx8mue44n.d(45): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i]
    + 2)`: `string` and `int`

    /tmp/tmpx8mue44n.d(47): Error: slice `result` is not m'
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    return message;\n}\nunittest\n{\n    alias candidate = encode;\n\n\
    \    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8hw38i6p.d(25): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f1d]

    ??:? void tmp8hw38i6p.__unittest_L21_C1() [0x427abe]

    ??:? void tmp8hw38i6p.__modtest() [0x427c9c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbc7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aad6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbed]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43009c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb79]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aaad]

    ??:? runModuleUnitTests [0x42b99d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42836c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    int size = message.length;\n    foreach(i; 0 .. size)\n    {\n    \
    \    // Replace all vowels with letter 2 place ahead\n        if(message[i] ==\
    \ 'a') message[i] = 'c';\n        else if(message[i] == 'e') message[i] = 'g';\n\
    \        else if(message[i] == 'i') message[i] = 'k';\n        else if(message[i]\
    \ == 'o') message[i] = 'q';\n        else if(message[i] == 'u') message[i] = 'y';\n\
    \        else if(message[i] == 'A') message[i] = 'C';\n        else if(message[i]\
    \ == 'E') message[i] = 'G';\n        else if(message[i] == 'I') message[i] = 'K';\n\
    \        else if(message[i] == 'O') message[i] = 'Q';\n        else if(message[i]\
    \ == 'U') message[i] = 'Y';\n        \n        // Swap letters case\n        if(message[i]\
    \ >= 65 && message[i] <= 90) message[i] += 32;\n        else if(message[i] >=\
    \ 97 && message[i] <= 122) message[i] -= 32;\n    }\n    return message;\n}\n\
    unittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") ==\
    \ \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6ndw6kgv.d(19): Error: cannot implicitly convert expression `message.length`
    of type `ulong` to `int`

    /tmp/tmp6ndw6kgv.d(23): Error: cannot modify `immutable` expression `message[cast(ulong)i]`

    /tmp/tmp6ndw6kgv.d(24): Error: cannot modify `immutable` expression `message[cast(ulong)i]`

    /tmp/tmp6ndw6kgv.d(25): Error: cannot modify `immutable` expression `message[cast(ulong)i]`

    /tmp/tmp6ndw6kgv.d(26): Error: cannot modify `immutable` expression `message[cast(ulong)i]`

    /tmp/tmp6ndw6kgv.d(27): Error: cannot modify `immutable` expression `message[cast(ulong)i]`

    /tmp/tmp6ndw6kgv.d(28): Error: cannot modify `immutable` expression `message[cast(ulong)i]`

    /tmp/tmp6ndw6kgv.d(29): Error: cannot modify `immutable` expression `message[cast(ulong)i]`

    /tmp/tmp6ndw6kgv.d(30): Error: cannot modify `immutable` expression `message[cast(ulong)i]`

    /tmp/tmp6ndw6kgv.d(31): Error: cannot modify `immutable` expression `message[cast(ulong)i]`

    /tmp/tmp6ndw6kgv.d(32): Error: cannot modify `immutable` expression `message[cast(ulon'
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string encoded = \"\";\n    foreach(char c; message) {\n        if\
    \ (isalpha(c)) {\n            char offset = tolower(c) > 'z' - 2 ? 2 - ('z' -\
    \ tolower(c)) : 2;\n            c = isupper(c) ? toupper(c + offset) : tolower(c\
    \ + offset);\n        }\n        encoded ~= c;\n    }\n    return encoded;\n}\n\
    unittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") ==\
    \ \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbpfvaioj.d(21): Error: undefined identifier `isalpha`

    /tmp/tmpbpfvaioj.d(22): Error: undefined identifier `tolower`

    /tmp/tmpbpfvaioj.d(22): Error: undefined identifier `tolower`

    /tmp/tmpbpfvaioj.d(23): Error: undefined identifier `isupper`

    /tmp/tmpbpfvaioj.d(23): Error: undefined identifier `toupper`

    /tmp/tmpbpfvaioj.d(23): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbpfvaioj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    // TODO: Implement\n    string out;\n    foreach(immutable w; message)\n\
    \    {\n        if(w >= 'a' && w <= 'z')\n        {\n            out ~= (char)(w\
    \ - 'a' + 'A');\n        }\n        else if(w >= 'A' && w <= 'Z')\n        {\n\
    \            out ~= (char)(w - 'A' + 'a');\n        }\n        else\n        {\n\
    \            out ~= w;\n        }\n    }\n    foreach(immutable w; out)\n    {\n\
    \        if(w == 'a' || w == 'e' || w == 'i' || w == 'o' || w == 'u')\n      \
    \  {\n            out ~= 'A';\n        }\n        else if(w == 'A' || w == 'E'\
    \ || w == 'I' || w == 'O' || w == 'U')\n        {\n            out ~= 'i';\n \
    \       }\n        else\n        {\n            out ~= w;\n        }\n    }\n\
    \    string res;\n    foreach(immutable w; out)\n    {\n        res ~= (char)((w\
    \ - 'a' + 2) % 26 + 'a');\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0i55hfea.d(20): Error: found `out` when expecting `;` following
    statement

    /tmp/tmp0i55hfea.d(20): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmp0i55hfea.d(25): Error: found `out` instead of statement

    /tmp/tmp0i55hfea.d(29): Error: found `out` instead of statement

    /tmp/tmp0i55hfea.d(33): Error: found `out` instead of statement

    /tmp/tmp0i55hfea.d(36): Error: expression expected, not `out`

    /tmp/tmp0i55hfea.d(40): Error: found `out` instead of statement

    /tmp/tmp0i55hfea.d(44): Error: found `out` instead of statement

    /tmp/tmp0i55hfea.d(48): Error: found `out` instead of statement

    /tmp/tmp0i55hfea.d(52): Error: expression expected, not `out`

    /tmp/tmp0i55hfea.d(54): Error: C style cast illegal, use `cast(char)((w - ''a''
    + 2) % 26 + ''a'')`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0i55hfea.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n\t// Two strings to store alphabet and vowels\n\tstring alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n\tstring vowels = \"aeiou\";\n\t// String array to store the swapped message\n\
    \tstring swapMessage[];\n\t\n\t// Loop through each character of the message\n\
    \tforeach(c; message)\n\t{\n\t\t// Lower case the character if it is not a vowel\n\
    \t\tif(vowels.find(c) == -1)\n\t\t{\n\t\t\tswapMessage ~= toLower(c);\n\t\t}\n\
    \t\t// Swap the character with the 2nd letter ahead if it is a vowel\n\t\telse\n\
    \t\t{\n\t\t\tint swapIndex = alphabet.find(c) + 2;\n\t\t\t// Check if the index\
    \ is over the alphabet size and do the modulo\n\t\t\tif(swapIndex > alphabet.length)\n\
    \t\t\t{\n\t\t\t\tswapIndex = mod(swapIndex, alphabet.length);\n\t\t\t}\n\t\t\t\
    swapMessage ~= alphabet[swapIndex];\n\t\t}\n\t}\n\t// Concatenate the message\
    \ and return it\n\treturn swapMessage.join;\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw4_6y3un.d(23): Deprecation: instead of C-style syntax, use D-style
    syntax `string[] swapMessage`

    /tmp/tmpw4_6y3un.d(29): Error: no property `find` for type `string`

    /tmp/tmpw4_6y3un.d(31): Error: undefined identifier `toLower`

    /tmp/tmpw4_6y3un.d(36): Error: no property `find` for type `string`

    /tmp/tmpw4_6y3un.d(40): Error: undefined identifier `mod`, did you mean function
    `fmod`?

    /tmp/tmpw4_6y3un.d(42): Error: cannot append type `immutable(char)` to type `string[]`

    /tmp/tmpw4_6y3un.d(46): Error: no property `join` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw4_6y3un.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n\tstring buffer = \"\";\n\tstring capital_vowels = \"AEIOU\";\n\tstring\
    \ small_vowels = \"aeiou\";\n\tchar index;\n\tchar c;\n\tbool is_letter;\n\tforeach(c;\
    \ message) {\n\t\tis_letter = false;\n\t\tforeach(index; capital_vowels) {\n\t\
    \t\tif(c == index) {\n\t\t\t\tis_letter = true;\n\t\t\t\tif(c != 'U') {\n\t\t\t\
    \t\tbuffer ~= (char)(capital_vowels[capital_vowels.length - (capital_vowels.length\
    \ - 1) + 2]);\n\t\t\t\t} else {\n\t\t\t\t\tbuffer ~= capital_vowels[0];\n\t\t\t\
    \t}\n\t\t\t}\n\t\t}\n\t\tif(!is_letter) {\n\t\t\tforeach(index; small_vowels)\
    \ {\n\t\t\t\tif(c == index) {\n\t\t\t\t\tis_letter = true;\n\t\t\t\t\tif(c !=\
    \ 'u') {\n\t\t\t\t\t\tbuffer ~= (char)(small_vowels[small_vowels.length - (small_vowels.length\
    \ - 1) + 2]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbuffer ~= small_vowels[0];\n\t\t\
    \t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(!is_letter) {\n\t\t\tif(isLower(c))\
    \ {\n\t\t\t\tbuffer ~= (char)(c + 'A' - 'a');\n\t\t\t} else {\n\t\t\t\tbuffer\
    \ ~= (char)(c + 'a' - 'A');\n\t\t\t}\n\t\t}\n\t}\n\treturn buffer;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphra3gxla.d(31): Error: C style cast illegal, use `cast(char)capital_vowels[capital_vowels.length
    - (capital_vowels.length - 1) + 2]`

    /tmp/tmphra3gxla.d(42): Error: C style cast illegal, use `cast(char)small_vowels[small_vowels.length
    - (small_vowels.length - 1) + 2]`

    /tmp/tmphra3gxla.d(51): Error: C style cast illegal, use `cast(char)(c + ''A''
    - ''a'')`

    /tmp/tmphra3gxla.d(53): Error: C style cast illegal, use `cast(char)(c + ''a''
    - ''A'')`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphra3gxla.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    int i = 0;\n    while (i < message.length)\
    \ {\n        if (islower(message[i])) {\n            result += toupper(message[i]);\n\
    \        } else if (isupper(message[i])) {\n            result += tolower(message[i]);\n\
    \        } else {\n            result += message[i];\n        }\n        i++;\n\
    \    }\n    string vowels = \"aeiou\";\n    for (int i = 0; i < result.length;\
    \ i++) {\n        for (int j = 0; j < vowels.length; j++) {\n            if (result[i]\
    \ == vowels[j]) {\n                if (j + 2 < vowels.length) {\n            \
    \        result[i] = vowels[j + 2];\n                } else {\n              \
    \      result[i] = vowels[j + 2 - vowels.length];\n                }\n       \
    \     }\n        }\n    }\n    return result;\n}\n/*\n    Write a function that\
    \ takes an encoded message and returns \n    the appropriate decoded message.\
    \ \n    Assume only letters. \n    \n    Examples:\n    >>> decode(\"TGST\")\n\
    \    \"test\"\n    >>> decode(\"tHKS KS C MGSSCGG\")\n    \"This is a message\"\
    \n    \n*/\nstring decode(string message) \n{\n    string result = \"\";\n   \
    \ int i = 0;\n    while (i < message.length) {\n        if (islower(message[i]))\
    \ {\n            result += toupper(message[i]);\n        } else if (isupper(message[i]))\
    \ {\n            result += tolower(message[i]);\n        } else {\n          \
    \  result += message[i];\n        }\n        i++;\n    }\n    string vowels =\
    \ \"aeiou\";\n    for (int i = 0; i < result.length; i++) {\n        for (int\
    \ j = 0; j < vowels.length; j++) {\n            if (result[i] == vowels[j]) {\n\
    \                if (j - 2 >= 0) {\n                    result[i] = vowels[j -\
    \ 2];\n                } else\nunittest\n{\n    alias candidate = encode;\n\n\
    \    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_hb3isw9.d(78): Error: found `unittest` instead of statement

    /tmp/tmp_hb3isw9.d(88): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp_hb3isw9.d(88): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp_hb3isw9.d(88): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_hb3isw9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    char[] alpha = [ 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',\
    \ 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'\
    \ ];\n    char[] result = message.dup;\n    char[] vowels = ['a', 'e', 'i', 'o',\
    \ 'u'];\n    for (int i = 0; i < message.length; i++)\n    {\n        result[i]\
    \ = message[i];\n        int x = message[i] - 'a';\n        if (x > -1 && x <\
    \ alpha.length)\n        {\n            result[i] = message[i] - 32;\n       \
    \ }\n        foreach (v; vowels)\n        {\n            if (result[i] == v)\n\
    \            {\n                result[i] = (((v - 'a') + 2) % alpha.length) +\
    \ 'a';\n            }\n        }\n    }\n    return result.idup;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx6uvvu1o.d(28): Error: cannot implicitly convert expression `cast(int)message[cast(ulong)i]
    - 32` of type `int` to `char`

    /tmp/tmpx6uvvu1o.d(34): Error: cannot implicitly convert expression `cast(ulong)(cast(int)v
    - 97 + 2) % alpha.length + 97LU` of type `ulong` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx6uvvu1o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string vowels = \"aeiou\";\n    string res = \"\";\n    for (int i\
    \ = 0; i < message.length; i++)\n    {\n        if (vowels.find(message[i]) !=\
    \ -1)\n        {\n            res += (char)('a' + (message[i] - 'a' + 2) % 26);\n\
    \        }\n        else if (message[i] >= 'a' && message[i] <= 'z')\n       \
    \ {\n            res += (char)('A' + (message[i] - 'a'));\n        }\n       \
    \ else if (message[i] >= 'A' && message[i] <= 'Z')\n        {\n            res\
    \ += (char)('a' + (message[i] - 'A'));\n        }\n        else\n        {\n \
    \           res += message[i];\n        }\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphwrzbhla.d(25): Error: C style cast illegal, use `cast(char)(''a''
    + (message[i] - ''a'' + 2) % 26)`

    /tmp/tmphwrzbhla.d(29): Error: C style cast illegal, use `cast(char)(''A'' + (message[i]
    - ''a''))`

    /tmp/tmphwrzbhla.d(33): Error: C style cast illegal, use `cast(char)(''a'' + (message[i]
    - ''A''))`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphwrzbhla.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    int msgSize = message.length;\n    string encodedMessage = message;\n\
    \    int msgIndex;\n    int encodedIndex;\n    int asciiValue;\n    int asciiValueEncoded;\n\
    \    string vowels = \"AEIOU\";\n    int vowelIndex;\n    bool isVowel;\n    bool\
    \ isUpper;\n    for (msgIndex = 0; msgIndex < msgSize; msgIndex++)\n    {\n  \
    \      asciiValue = message[msgIndex];\n        isUpper = asciiValue >= 65 &&\
    \ asciiValue <= 90;\n        isVowel = false;\n        for (vowelIndex = 0; vowelIndex\
    \ < 5; vowelIndex++)\n        {\n            if (vowels[vowelIndex] == message[msgIndex])\n\
    \            {\n                isVowel = true;\n                break;\n    \
    \        }\n        }\n        if (isVowel)\n        {\n            asciiValue\
    \ += 2;\n            if (asciiValue > 90)\n            {\n                asciiValue\
    \ -= 26;\n            }\n        }\n        else\n        {\n            asciiValue\
    \ += isUpper ? 32 : -32;\n        }\n        encodedMessage[msgIndex] = asciiValue;\n\
    \    }\n    return encodedMessage;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphk0f5c7p.d(19): Error: cannot implicitly convert expression `message.length`
    of type `ulong` to `int`

    /tmp/tmphk0f5c7p.d(54): Error: cannot modify `immutable` expression `encodedMessage[cast(ulong)msgIndex]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphk0f5c7p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n\tchar[] vowels = \"AEIOUaeiou\";\n\tforeach(c; message)\n\t{\n\t\tif(c.isUpper)\n\
    \t\t\tc.toLower;\n\t\telse\n\t\t\tc.toUpper;\n\t\tif(c in vowels)\n\t\t{\n\t\t\
    \tif(c == 'u' || c == 'U')\n\t\t\t\tc = 'a';\n\t\t\telse if(c == 'o' || c == 'O')\n\
    \t\t\t\tc = 'e';\n\t\t\telse if(c == 'i' || c == 'I')\n\t\t\t\tc = 'o';\n\t\t\t\
    else if(c == 'e' || c == 'E')\n\t\t\t\tc = 'i';\n\t\t\telse if(c == 'a' || c ==\
    \ 'A')\n\t\t\t\tc = 'u';\n\t\t}\n\t}\n\treturn message;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9wkylgwf.d(19): Error: cannot implicitly convert expression `"AEIOUaeiou"`
    of type `string` to `char[]`

    /tmp/tmp9wkylgwf.d(22): Error: no property `isUpper` for type `immutable(char)`

    /tmp/tmp9wkylgwf.d(23): Error: no property `toLower` for type `immutable(char)`

    /tmp/tmp9wkylgwf.d(25): Error: no property `toUpper` for type `immutable(char)`

    /tmp/tmp9wkylgwf.d(26): Error: incompatible types for `(c) in (vowels)`: `immutable(char)`
    and `char[]`

    /tmp/tmp9wkylgwf.d(29): Error: cannot modify `immutable` expression `c`

    /tmp/tmp9wkylgwf.d(31): Error: cannot modify `immutable` expression `c`

    /tmp/tmp9wkylgwf.d(33): Error: cannot modify `immutable` expression `c`

    /tmp/tmp9wkylgwf.d(35): Error: cannot modify `immutable` expression `c`

    /tmp/tmp9wkylgwf.d(37): Error: cannot modify `immutable` expression `c`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9wkylgwf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string encoded;\n    for (int i = 0; i < message.length; i++)\n   \
    \ {\n        char letter = message[i];\n        if (isupper(letter))\n       \
    \ {\n            encoded += tolower(letter);\n        }\n        else if (islower(letter))\n\
    \        {\n            encoded += toupper(letter);\n        }\n        else\n\
    \        {\n            encoded += letter;\n        }\n    }\n    return encoded;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1nr6rw1k.d(23): Error: undefined identifier `isupper`

    /tmp/tmp1nr6rw1k.d(25): Error: undefined identifier `tolower`

    /tmp/tmp1nr6rw1k.d(27): Error: undefined identifier `islower`

    /tmp/tmp1nr6rw1k.d(29): Error: undefined identifier `toupper`

    /tmp/tmp1nr6rw1k.d(33): Error: slice `encoded` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1nr6rw1k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n\tstring result;\n\tint length = message.length;\n\tint i = 0;\n\tforeach(char\
    \ c; message)\n\t{\n\t\tint charv = cast(int)c;\n\t\tif(charv >= 97 && charv <=\
    \ 122)\n\t\t{\n\t\t\tcharv -= 32;\n\t\t}\n\t\telse if(charv >= 65 && charv <=\
    \ 90)\n\t\t{\n\t\t\tcharv += 32;\n\t\t}\n\t\telse if(charv == 97 || charv == 101\
    \ || charv == 105 || charv == 111 || charv == 117)\n\t\t{\n\t\t\tcharv += 2;\n\
    \t\t}\n\t\telse if(charv == 65 || charv == 69 || charv == 73 || charv == 79 ||\
    \ charv == 85)\n\t\t{\n\t\t\tcharv += 2;\n\t\t}\n\t\tif(i >= length)\n\t\t{\n\t\
    \t\tbreak;\n\t\t}\n\t\ti++;\n\t\tresult ~= cast(char)charv;\n\t}\n\treturn result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe8wyauxb.d(20): Error: cannot implicitly convert expression `message.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe8wyauxb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    // Change case of all characters.\n    message = toUpper(message);\n\
    \    \n    // Loop over all characters in the message.\n    foreach (char; message)\n\
    \    {\n        char character = char;\n        \n        // Check if the character\
    \ is a vowel.\n        if (character == 'A' || character == 'E' || character ==\
    \ 'I' || character == 'O' || character == 'U')\n        {\n            // Replace\
    \ vowel with character after in the alphabet.\n            if (character == 'U')\n\
    \            {\n                character = 'A';\n            }\n            else\
    \ if (character == 'A')\n            {\n                character = 'C';\n   \
    \         }\n            else if (character == 'E')\n            {\n         \
    \       character = 'G';\n            }\n            else if (character == 'I')\n\
    \            {\n                character = 'K';\n            }\n            else\
    \ if (character == 'O')\n            {\n                character = 'M';\n   \
    \         }\n        }\n        else\n        {\n            // Replace the character\
    \ with the character after in the alphabet.\n            if (character == 'T')\n\
    \            {\n                character = 'V';\n            }\n            else\
    \ if (character == 'S')\n            {\n                character = 'U';\n   \
    \         }\n            else if (character == 'R')\n            {\n         \
    \       character = 'T';\n            }\n            else if (character == 'Q')\n\
    \            {\n                character = 'S';\n            }\n            else\
    \ if (character == 'P')\n            {\n                character = 'R';\n   \
    \         }\n            else if (character == 'O')\n            {\n         \
    \       character = 'Q';\n            }\n            else if (character == 'N')\n\
    \            {\n                character = 'P';\n            }\n            else\
    \ if (character == 'M')\n            {\n                character = 'O';\n   \
    \         }\n            else if (character == 'L')\n            {\n         \
    \       character = 'N';\n            }\n            else if (character == 'K')\n\
    \            {\n                character = 'M';\n            }\n            else\
    \ if (character == 'J')\n            {\n                character = 'L';\n   \
    \         }\n            else if (character == 'I\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp19lv6y1n.d(23): Error: no identifier for declarator `char`

    /tmp/tmp19lv6y1n.d(25): Error: found `;` when expecting `.` following char

    /tmp/tmp19lv6y1n.d(28): Error: found `if` when expecting identifier following
    `char`.

    /tmp/tmp19lv6y1n.d(29): Error: semicolon expected, not `{`

    /tmp/tmp19lv6y1n.d(52): Error: found `else` without a corresponding `if`, `version`
    or `debug` statement

    /tmp/tmp19lv6y1n.d(59): Error: found `else` without a corresponding `if`, `version`
    or `debug` statement

    /tmp/tmp19lv6y1n.d(63): Error: declaration expected, not `else`

    /tmp/tmp19lv6y1n.d(66): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp19lv6y1n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    char[] e = message.dup;\n    foreach(int i, ref char c; e)\n    {\n\
    \        if (c >= 'a' && c <= 'z')\n        {\n            c = cast(char)('A'\
    \ + (c - 'a'));\n        }\n        else if (c >= 'A' && c <= 'Z')\n        {\n\
    \            c = cast(char)('a' + (c - 'A'));\n        }\n        else if (c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n        {\n          \
    \  c = cast(char)(c + 2);\n        }\n        else if (c == 'A' || c == 'E' ||\
    \ c == 'I' || c == 'O' || c == 'U')\n        {\n            c = cast(char)(c +\
    \ 2);\n        }\n    }\n    return e.idup;\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_0hktla3.d(45): unittest failure

    ----------------

    ??:? _d_unittestp [0x428f71]

    ??:? void tmp_0hktla3.__unittest_L41_C1() [0x427ec6]

    ??:? void tmp_0hktla3.__modtest() [0x428374]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d783]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428df6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a641]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42a6d0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a5cd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428dcd]

    ??:? runModuleUnitTests [0x42d559]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429414]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(ch; message)\n    {\n        if(isAlpha(ch))\n\
    \        {\n            if(isUpper(ch))\n            {\n                //lower\
    \ case it\n                ch = toLower(ch);\n            }\n            else\n\
    \            {\n                //upper case it\n                ch = toUpper(ch);\n\
    \            }\n            if(ch == 'a')\n            {\n                ch =\
    \ 'c';\n            }\n            else if(ch == 'e')\n            {\n       \
    \         ch = 'g';\n            }\n            else if(ch == 'i')\n         \
    \   {\n                ch = 'k';\n            }\n            else if(ch == 'o')\n\
    \            {\n                ch = 'q';\n            }\n            else if(ch\
    \ == 'u')\n            {\n                ch = 'y';\n            }\n         \
    \   else if(ch == 'c')\n            {\n                ch = 'e';\n           \
    \ }\n            else if(ch == 'g')\n            {\n                ch = 'i';\n\
    \            }\n            else if(ch == 'k')\n            {\n              \
    \  ch = 'm';\n            }\n            else if(ch == 'q')\n            {\n \
    \               ch = 's';\n            }\n            else if(ch == 'y')\n   \
    \         {\n                ch = 'a';\n            }\n            else if(ch\
    \ == 'b')\n            {\n                ch = 'd';\n            }\n         \
    \   else if(ch == 'f')\n            {\n                ch = 'h';\n           \
    \ }\n            else if(ch == 'j')\n            {\n                ch = 'l';\n\
    \            }\n            else if(ch == 'n')\n            {\n              \
    \  ch = 'p';\n            }\n            else if(ch == 'r')\n            {\n \
    \               ch = 't';\n            }\n            else if(ch == 'v')\n   \
    \         {\n                ch = 'x';\n            }\n            else if(ch\
    \ == 'z')\n            {\n                ch = 'b';\n            }\n         \
    \   else if(ch == 'd')\n            {\n                ch = 'f';\n           \
    \ }\n            else if(ch == 'h')\n           \nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdjtf_jhm.d(108): Error: found `unittest` instead of statement

    /tmp/tmpdjtf_jhm.d(118): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpdjtf_jhm.d(118): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdjtf_jhm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string letters = \"abcdefghijklmnopqrstuvwxyz\";\n    string output\
    \ = \"\";\n    foreach(c; message) {\n        int pos = letters.indexOf(c);\n\
    \        if(pos == -1) {\n            output ~= c;\n        } else {\n       \
    \     if(isUpperCase(c)) {\n                output ~= letters[(pos + 2) % 26].toUpper;\n\
    \            } else {\n                output ~= letters[(pos + 2) % 26];\n  \
    \          }\n        }\n    }\n    return output;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1hycqz0o.d(22): Error: no property `indexOf` for type `string`

    /tmp/tmp1hycqz0o.d(26): Error: undefined identifier `isUpperCase`

    /tmp/tmp1hycqz0o.d(27): Error: no property `toUpper` for type `immutable(char)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1hycqz0o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string newMessage = \"\";\n    foreach(char c; message)\n    {\n  \
    \      c = tolower(c);\n        if(isalpha(c))\n        {\n            newMessage\
    \ ~= islower(c) ? toupper(c) : tolower(c);\n            if(c == 'a')\n       \
    \         newMessage ~= 'c';\n            else if(c == 'e')\n                newMessage\
    \ ~= 'g';\n            else if(c == 'i')\n                newMessage ~= 'k';\n\
    \            else if(c == 'o')\n                newMessage ~= 'q';\n         \
    \   else if(c == 'u')\n                newMessage ~= 'y';\n        }\n       \
    \ else\n            newMessage ~= c;\n    }\n    return newMessage;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp29hotxu1.d(22): Error: undefined identifier `tolower`

    /tmp/tmp29hotxu1.d(23): Error: undefined identifier `isalpha`

    /tmp/tmp29hotxu1.d(25): Error: undefined identifier `islower`

    /tmp/tmp29hotxu1.d(25): Error: undefined identifier `toupper`

    /tmp/tmp29hotxu1.d(25): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp29hotxu1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string encodedMsg = \"\";\n    foreach(int i, char c; message)\n  \
    \  {\n        //swap case of all letters\n        if(isalpha(c))\n        {\n\
    \            c = (char)tolower(c);\n            if(islower(c))\n             \
    \   c = (char)toupper(c);\n            else\n                c = (char)tolower(c);\n\
    \        }\n        //replace all vowels in the message with the letter that appears\
    \ 2 places ahead of that vowel in the english alphabet\n        if(c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u')\n        {\n            switch(c)\n\
    \            {\n                case 'a':\n                    c = 'c';\n    \
    \                break;\n                case 'e':\n                    c = 'g';\n\
    \                    break;\n                case 'i':\n                    c\
    \ = 'k';\n                    break;\n                case 'o':\n            \
    \        c = 'q';\n                    break;\n                case 'u':\n   \
    \                 c = 'y';\n                    break;\n            }\n      \
    \  }\n        encodedMsg ~= c;\n    }\n    return encodedMsg;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfxcmravb.d(25): Error: C style cast illegal, use `cast(char)tolower(c)`

    /tmp/tmpfxcmravb.d(27): Error: C style cast illegal, use `cast(char)toupper(c)`

    /tmp/tmpfxcmravb.d(29): Error: C style cast illegal, use `cast(char)tolower(c)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfxcmravb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    \n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8g9dekat.d(17): Error: function `tmp8g9dekat.encode` has no `return`
    statement, but is expected to return a value of type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8g9dekat.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    // Code Here\n}\nunittest\n{\n    alias candidate = encode;\n\n   \
    \ assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\")\
    \ == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc750tmon.d(17): Error: function `tmpc750tmon.encode` has no `return`
    statement, but is expected to return a value of type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc750tmon.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n\tstring ret;\n\t\n\tforeach(char c; message) {\n\t\tif(c >= 'a' && c <=\
    \ 'z')\n\t\t\tret ~= (char)('A' + c - 'a');\n\t\telse if(c >= 'A' && c <= 'Z')\n\
    \t\t\tret ~= (char)('a' + c - 'A');\n\t\telse\n\t\t\tret ~= c;\n\t}\n\t\n\tint\
    \ pos = 0;\n\twhile((pos = ret.find('a', pos)) != -1) {\n\t\tret[pos] = 'C';\n\
    \t\tpos++;\n\t}\n\t\n\tpos = 0;\n\twhile((pos = ret.find('e', pos)) != -1) {\n\
    \t\tret[pos] = 'G';\n\t\tpos++;\n\t}\n\t\n\tpos = 0;\n\twhile((pos = ret.find('i',\
    \ pos)) != -1) {\n\t\tret[pos] = 'K';\n\t\tpos++;\n\t}\n\t\n\tpos = 0;\n\twhile((pos\
    \ = ret.find('o', pos)) != -1) {\n\t\tret[pos] = 'S';\n\t\tpos++;\n\t}\n\t\n\t\
    pos = 0;\n\twhile((pos = ret.find('u', pos)) != -1) {\n\t\tret[pos] = 'Y';\n\t\
    \tpos++;\n\t}\n\t\n\treturn ret;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwoq6z0mt.d(23): Error: C style cast illegal, use `cast(char)(''A''
    + c - ''a'')`

    /tmp/tmpwoq6z0mt.d(25): Error: C style cast illegal, use `cast(char)(''a'' + c
    - ''A'')`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwoq6z0mt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    message = toLower(message);\n    const char[] vowels = ['a', 'e', 'i',\
    \ 'o', 'u'];\n    string result = \"\";\n    foreach(c; message) {\n        if(c\
    \ == 'z')\n            result ~= 'b';\n        else if(c == 'y')\n           \
    \ result ~= 'a';\n        else if(vowels.canFind(c))\n            result ~= c+2;\n\
    \        else\n            result ~= c;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr1j_3m1j.d(19): Error: undefined identifier `toLower`

    /tmp/tmpr1j_3m1j.d(27): Error: no property `canFind` for type `const(char[])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr1j_3m1j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n\tstring alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n\tstring vowels =\
    \ \"aeiou\";\n\tint i, j;\n\tbool isVowel;\n\tstring result = \"\";\n\tfor (i\
    \ = 0; i < message.length; i++)\n\t{\n\t\tisVowel = false;\n\t\tif (message[i]\
    \ >= 'a' && message[i] <= 'z')\n\t\t{\n\t\t\tfor (j = 0; j < vowels.length; j++)\n\
    \t\t\t{\n\t\t\t\tif (message[i] == vowels[j])\n\t\t\t\t{\n\t\t\t\t\tif (j + 2\
    \ < vowels.length)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult += vowels[j + 2];\n\t\t\t\t\
    \t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tresult += vowels[j + 2 - vowels.length];\n\
    \t\t\t\t\t}\n\t\t\t\t\tisVowel = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\
    \t\t\tif (!isVowel)\n\t\t\t{\n\t\t\t\tresult += message[i];\n\t\t\t}\n\t\t}\n\t\
    \telse if (message[i] >= 'A' && message[i] <= 'Z')\n\t\t{\n\t\t\tfor (j = 0; j\
    \ < vowels.length; j++)\n\t\t\t{\n\t\t\t\tif (message[i] == vowels[j] - 32)\n\t\
    \t\t\t{\n\t\t\t\t\tif (j + 2 < vowels.length)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult\
    \ += vowels[j + 2] - 32;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\
    \tresult += vowels[j + 2 - vowels.length] - 32;\n\t\t\t\t\t}\n\t\t\t\t\tisVowel\
    \ = true;\n\t\t\t\t\tbreak;\n\t\t\t\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsd6p7vom.d(67): Error: found `unittest` instead of statement

    /tmp/tmpsd6p7vom.d(77): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpsd6p7vom.d(77): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpsd6p7vom.d(77): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpsd6p7vom.d(77): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsd6p7vom.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    // Complete this function \n    // Replace the letter at index i with\
    \ the letter at index i+2\n    // Convert the string to all lowercase\n    //\
    \ Swap all cases using the swapcase function in string.d\n    message = message.toLower().swapcase();\n\
    \    // Use a for loop and range to go through each letter of the string\n   \
    \ for (int i = 0; i < message.length; i++)\n    {\n        // If the letter is\
    \ a vowel, replace it with the letter at index 2\n        // + i, and then add\
    \ 2 to i to skip the next letter\n        if (message[i] == 'a' || message[i]\
    \ == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u')\n   \
    \     {\n            message[i] = message[i+2];\n            i += 2;\n       \
    \ }\n    }\n    return message;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp59qlxtuy.d(23): Error: no property `toLower` for type `string`

    /tmp/tmp59qlxtuy.d(31): Error: cannot modify `immutable` expression `message[cast(ulong)i]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp59qlxtuy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string final = \"\";\n    foreach(char ch; message) {\n        if(isVowel(ch))\
    \ {\n            if(ch == 'z')\n                final ~= 'b';\n            else\
    \ if(ch == 'Z')\n                final ~= 'B';\n            else if(ch == 'y')\n\
    \                final ~= 'a';\n            else if(ch == 'Y')\n             \
    \   final ~= 'A';\n            else\n                final ~= ch + 2;\n      \
    \  }\n        else\n            final ~= ch;\n    }\n    return final;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1ksvp0zo.d(19): Error: found `final` when expecting `;` following
    statement

    /tmp/tmp1ksvp0zo.d(19): Error: found `=` instead of statement

    /tmp/tmp1ksvp0zo.d(23): Error: basic type expected, not `~=`

    /tmp/tmp1ksvp0zo.d(23): Error: no identifier for declarator `_error_`

    /tmp/tmp1ksvp0zo.d(23): Error: found `~=` instead of statement

    /tmp/tmp1ksvp0zo.d(24): Error: found `else` without a corresponding `if`, `version`
    or `debug` statement

    /tmp/tmp1ksvp0zo.d(26): Error: found `else` without a corresponding `if`, `version`
    or `debug` statement

    /tmp/tmp1ksvp0zo.d(28): Error: found `else` without a corresponding `if`, `version`
    or `debug` statement

    /tmp/tmp1ksvp0zo.d(30): Error: found `else` without a corresponding `if`, `version`
    or `debug` statement

    /tmp/tmp1ksvp0zo.d(34): Error: basic type expected, not `~=`

    /tmp/tmp1ksvp0zo.d(34): Error: no identifier for declarator `_error_`

    /tmp/tmp1ksvp0zo.d(34): Error: found `~=` instead of statement

    /tmp/tmp1ksvp0zo.d(36): Error: expression expected, not `final`

    Failed'
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n\tchar[] alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n\tstring result =\
    \ \"\";\n\tforeach(c; message)\n\t{\n\t\tif (isUpper(c))\n\t\t{\n\t\t\tc = toLower(c);\n\
    \t\t\tif (c == 'u')\n\t\t\t{\n\t\t\t\tc = 'a';\n\t\t\t}\n\t\t\telse if (c == 'o')\n\
    \t\t\t{\n\t\t\t\tc = 'e';\n\t\t\t}\n\t\t\telse if (c == 'i')\n\t\t\t{\n\t\t\t\t\
    c = 'c';\n\t\t\t}\n\t\t\telse if (c == 'e')\n\t\t\t{\n\t\t\t\tc = 'g';\n\t\t\t\
    }\n\t\t\telse if (c == 'a')\n\t\t\t{\n\t\t\t\tc = 'i';\n\t\t\t}\n\t\t\telse\n\t\
    \t\t{\n\t\t\t\tc = alphabet[cast(int)c+2];\n\t\t\t}\n\t\t\tresult ~= toUpper(c);\n\
    \t\t}\n\t\telse\n\t\t{\n\t\t\tif (c == 'u')\n\t\t\t{\n\t\t\t\tc = 'a';\n\t\t\t\
    }\n\t\t\telse if (c == 'o')\n\t\t\t{\n\t\t\t\tc = 'e';\n\t\t\t}\n\t\t\telse if\
    \ (c == 'i')\n\t\t\t{\n\t\t\t\tc = 'c';\n\t\t\t}\n\t\t\telse if (c == 'e')\n\t\
    \t\t{\n\t\t\t\tc = 'g';\n\t\t\t}\n\t\t\telse if (c == 'a')\n\t\t\t{\n\t\t\t\t\
    c = 'i';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tc = alphabet[cast(int)c+2];\n\t\
    \t\t}\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpftkkqd0k.d(19): Error: cannot implicitly convert expression `"abcdefghijklmnopqrstuvwxyz"`
    of type `string` to `char[]`

    /tmp/tmpftkkqd0k.d(23): Error: undefined identifier `isUpper`

    /tmp/tmpftkkqd0k.d(25): Error: undefined identifier `toLower`

    /tmp/tmpftkkqd0k.d(28): Error: cannot modify `immutable` expression `c`

    /tmp/tmpftkkqd0k.d(32): Error: cannot modify `immutable` expression `c`

    /tmp/tmpftkkqd0k.d(36): Error: cannot modify `immutable` expression `c`

    /tmp/tmpftkkqd0k.d(40): Error: cannot modify `immutable` expression `c`

    /tmp/tmpftkkqd0k.d(44): Error: cannot modify `immutable` expression `c`

    /tmp/tmpftkkqd0k.d(48): Error: cannot modify `immutable` expression `c`

    /tmp/tmpftkkqd0k.d(50): Error: undefined identifier `toUpper`

    /tmp/tmpftkkqd0k.d(56): Error: cannot modify `immutable` expression `c`

    /tmp/tmpftkkqd0k.d(60): Error: cannot modify `immutable` expression `c`

    /tmp/tmpftkkqd0k.d(64): Error: cannot modify `immutable` expression `c`

    /tmp/tmpftkkqd0k.d(68): Error: cannot modify `immutable` expre'
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    message = toUpper(message);\n    // loop over the message and perform\
    \ some operations\n    for (int i = 0; i < message.length; i++)\n    {\n     \
    \   char character = message[i];\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5rzgicd2.d(24): Error: found `unittest` instead of statement

    /tmp/tmp5rzgicd2.d(34): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5rzgicd2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    // Complete this method.\n    char[] vowels = {'a', 'e', 'i', 'o',\
    \ 'u'};\n    int count = 0;\n    string x = toLower(message);\n    char[] charray\
    \ = toStringz(x);\n    for(int i = 0; i < charray.length; i++)\n    {\n      \
    \  for(int j = 0; j < vowels.length; j++)\n        {\n            if(charray[i]\
    \ == vowels[j])\n            {\n                if(charray[i] == 'u')\n      \
    \          {\n                    charray[i] = 'a';\n                }\n     \
    \           else if(charray[i] == 'o')\n                {\n                  \
    \  charray[i] = 'e';\n                }\n                else if(charray[i] ==\
    \ 'i')\n                {\n                    charray[i] = 'o';\n           \
    \     }\n                else if(charray[i] == 'e')\n                {\n     \
    \               charray[i] = 'i';\n                }\n                else if(charray[i]\
    \ == 'a')\n                {\n                    charray[i] = 'u';\n        \
    \        }\n            }\n        }\n        if(charray[i] >= 97 && charray[i]\
    \ <= 122)\n        {\n            charray[i] = charray[i] - 32;\n        }\n \
    \       else if(charray[i] >= 65 && charray[i] <= 90)\n        {\n           \
    \ charray[i] = charray[i] + 32;\n        }\n    }\n    return toString(charray);\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4a4ma_eg.d(20): Error: a struct is not a valid initializer for
    a `char[]`

    /tmp/tmp4a4ma_eg.d(22): Error: undefined identifier `toLower`

    /tmp/tmp4a4ma_eg.d(23): Error: undefined identifier `toStringz`

    /tmp/tmp4a4ma_eg.d(54): Error: cannot implicitly convert expression `cast(int)charray[cast(ulong)i]
    - 32` of type `int` to `char`

    /tmp/tmp4a4ma_eg.d(58): Error: cannot implicitly convert expression `cast(int)charray[cast(ulong)i]
    + 32` of type `int` to `char`

    /tmp/tmp4a4ma_eg.d(61): Error: undefined identifier `toString`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4a4ma_eg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    int m = message.length;\n    char c;\n    foreach(i; 0..m)\n    {\n\
    \        if(message[i] >= 'a' && message[i] <= 'z')\n        {\n            if(message[i]\
    \ == 'z') c = 'A';\n            else c = message[i] + 'A' - 'a' + 1;\n       \
    \ }\n        else if(message[i] >= 'A' && message[i] <= 'Z')\n        {\n    \
    \        if(message[i] == 'Z') c = 'a';\n            else c = message[i] + 'a'\
    \ - 'A' + 1;\n        }\n        else c = message[i];\n        message[i] = c;\n\
    \    }\n    foreach(i; 0..m)\n    {\n        if(message[i] == 'a' || message[i]\
    \ == 'A')\n        {\n            if(message[i] == 'a') c = 'c';\n           \
    \ else c = 'C';\n        }\n        else if(message[i] == 'e' || message[i] ==\
    \ 'E')\n        {\n            if(message[i] == 'e') c = 'g';\n            else\
    \ c = 'G';\n        }\n        else if(message[i] == 'i' || message[i] == 'I')\n\
    \        {\n            if(message[i] == 'i') c = 'k';\n            else c = 'K';\n\
    \        }\n        else if(message[i] == 'o' || message[i] == 'O')\n        {\n\
    \            if(message[i] == 'o') c = 'q';\n            else c = 'Q';\n     \
    \   }\n        else if(message[i] == 'u' || message[i] == 'U')\n        {\n  \
    \          if(message[i] == 'u') c = 's';\n            else c = 'S';\n       \
    \ }\n        else c = message[i];\n        message[i] = c;\n    }\n    return\
    \ message;\n}\nstring encodeSimple(string message)\n{\n    string result;\n  \
    \  foreach(i; message)\n   \nunittest\n{\n    alias candidate = encode;\n\n  \
    \  assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn8vmjti8.d(73): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn8vmjti8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    // Your code here\n    return \"\";\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpszz52qyv.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f0d]

    ??:? void tmpszz52qyv.__unittest_L22_C1() [0x427ab2]

    ??:? void tmpszz52qyv.__modtest() [0x427c90]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aac6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbdd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43008c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb69]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa9d]

    ??:? runModuleUnitTests [0x42b98d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42835c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string encodeMessage = \"\";\n    string vowels = \"aeiou\";\n    foreach(char\
    \ letter; message)\n    {\n        if(isLetter(letter))\n        {\n         \
    \   bool isLower = toLower(letter) == letter;\n            if(isLower)\n     \
    \       {\n                letter = toUpper(letter);\n            }\n        \
    \    int index = indexOf(vowels, letter);\n            if(index == -1)\n     \
    \       {\n                encodeMessage ~= letter;\n            }\n         \
    \   else\n            {\n                char newLetter = vowels[(index + 2) %\
    \ 5];\n                if(isLower)\n                {\n                    newLetter\
    \ = toLower(newLetter);\n                }\n                encodeMessage ~= newLetter;\n\
    \            }\n        }\n        else\n        {\n            encodeMessage\
    \ ~= letter;\n        }\n    }\n    return encodeMessage;\n}\nunittest\n{\n  \
    \  alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmplrtm3p.d(23): Error: undefined identifier `isLetter`

    /tmp/tmpmplrtm3p.d(25): Error: undefined identifier `toLower`

    /tmp/tmpmplrtm3p.d(28): Error: undefined identifier `toUpper`

    /tmp/tmpmplrtm3p.d(30): Error: undefined identifier `indexOf`

    /tmp/tmpmplrtm3p.d(40): Error: undefined identifier `toLower`, did you mean variable
    `isLower`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmplrtm3p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    char[] output = new char[message.length];\n    for (int i = 0; i <\
    \ message.length; i++)\n    {\n        if (message[i] >= 'a' && message[i] <=\
    \ 'z')\n        {\n            output[i] = 'A' + (message[i] - 'a');\n       \
    \ }\n        else if (message[i] >= 'A' && message[i] <= 'Z')\n        {\n   \
    \         output[i] = 'a' + (message[i] - 'A');\n        }\n        else\n   \
    \     {\n            output[i] = message[i];\n        }\n    }\n    return to!string(output);\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2lcra0wg.d(24): Error: cannot implicitly convert expression `65
    + (cast(int)message[cast(ulong)i] - 97)` of type `int` to `char`

    /tmp/tmp2lcra0wg.d(28): Error: cannot implicitly convert expression `97 + (cast(int)message[cast(ulong)i]
    - 65)` of type `int` to `char`

    /tmp/tmp2lcra0wg.d(35): Error: template instance `to!string` template `to` is
    not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2lcra0wg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    auto result = message.toLower();\n    for (size_t i = 0; i < result.length;\
    \ i++)\n    {\n        auto ch = result[i];\n        if ('a' <= ch && ch <= 'z')\n\
    \        {\n            if ('a' <= ch && ch <= 'c')\n                result[i]\
    \ = 'x' + ch - 'a';\n            else if ('d' <= ch && ch <= 'f')\n          \
    \      result[i] = 'y' + ch - 'd';\n            else if ('g' <= ch && ch <= 'i')\n\
    \                result[i] = 'z' + ch - 'g';\n            else if ('j' <= ch &&\
    \ ch <= 'l')\n                result[i] = 'a' + ch - 'j';\n            else if\
    \ ('m' <= ch && ch <= 'o')\n                result[i] = 'b' + ch - 'm';\n    \
    \        else if ('p' <= ch && ch <= 's')\n                result[i] = 'c' + ch\
    \ - 'p';\n            else if ('t' <= ch && ch <= 'v')\n                result[i]\
    \ = 'd' + ch - 't';\n            else if ('w' <= ch && ch <= 'z')\n          \
    \      result[i] = 'e' + ch - 'w';\n        }\n    }\n    return result;\n}\n\
    /*\n    And now a function that takes the encoded string and decodes it\n    such\
    \ that it is back to the original message\n    \n    Examples:\n    >>> decode(\"\
    TGST\")\n    \"test\"\n    >>> decode(\"tHKS KS C MGSSCGG\")\n    \"This is a\
    \ message\"\n*/\nstring decode(string message) \n{\n    auto result = message.toLower();\n\
    \    for (size_t i = 0; i < result.length; i++)\n    {\n        auto ch = result[i];\n\
    \        if ('a' <= ch && ch <= 'z')\n        {\n            if ('a' <= ch &&\
    \ ch <= 'c')\n                result[i] = 'g' + ch - 'a';\n            else if\
    \ ('d' <= ch && ch <= 'f')\n                result[i] =\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1yngph74.d(67): Error: expression expected, not `unittest`

    /tmp/tmp1yngph74.d(68): Error: found `{` when expecting `;` following statement

    /tmp/tmp1yngph74.d(77): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp1yngph74.d(77): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1yngph74.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    // YOUR CODE HERE\n    string ret;\n    foreach(char c; message)\n\
    \    {\n        if(isLetter(c))\n        {\n            if(isUpper(c))\n     \
    \       {\n                ret ~= toLower(c);\n            }\n            else\n\
    \            {\n                ret ~= toUpper(c);\n            }\n        }\n\
    \        else\n        {\n            ret ~= c;\n        }\n    }\n    string\
    \ vowels = \"aeiou\";\n    foreach(char c; ret)\n    {\n        size_t index =\
    \ 0;\n        if(isUpper(c))\n        {\n            index = vowels.indexOf(toLower(c));\n\
    \        }\n        else\n        {\n            index = vowels.indexOf(c);\n\
    \        }\n        if(index != -1)\n        {\n            c = vowels[(index\
    \ + 2) % 5];\n            ret[$ - 1] = c;\n        }\n    }\n    return ret;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph89prkko.d(23): Error: undefined identifier `isLetter`

    /tmp/tmph89prkko.d(25): Error: undefined identifier `isUpper`

    /tmp/tmph89prkko.d(27): Error: undefined identifier `toLower`

    /tmp/tmph89prkko.d(31): Error: undefined identifier `toUpper`

    /tmp/tmph89prkko.d(43): Error: undefined identifier `isUpper`

    /tmp/tmph89prkko.d(45): Error: no property `indexOf` for type `string`

    /tmp/tmph89prkko.d(49): Error: no property `indexOf` for type `string`

    /tmp/tmph89prkko.d(54): Error: cannot modify `immutable` expression `ret[__dollar
    - 1LU]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph89prkko.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    message = toLower(message);\n    string result;\n    foreach(char c;\
    \ message) {\n        if(c == 'a') {\n            result ~= 'c';\n        } else\
    \ if(c == 'e') {\n            result ~= 'g';\n        } else if(c == 'i') {\n\
    \            result ~= 'k';\n        } else if(c == 'o') {\n            result\
    \ ~= 'q';\n        } else if(c == 'u') {\n            result ~= 'y';\n       \
    \ } else {\n            result ~= toupper(c);\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpptbhrq_h.d(19): Error: undefined identifier `toLower`

    /tmp/tmpptbhrq_h.d(33): Error: undefined identifier `toupper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpptbhrq_h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string ret;\n    foreach(i, c; message)\n    {\n        if(c >= 'a'\
    \ && c <= 'z') \n        {\n            c = (c - 'a' + 13) % 26 + 'a';\n     \
    \   } \n        else if(c >= 'A' && c <= 'Z') \n        {\n            c = (c\
    \ - 'A' + 13) % 26 + 'A';\n        }\n        ret ~= c;\n    }\n    return ret;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg93v60x7.d(24): Error: cannot modify `immutable` expression `c`

    /tmp/tmpg93v60x7.d(28): Error: cannot modify `immutable` expression `c`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg93v60x7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{ \n    string vowels = \"aeiou\";\n    string encrypted = \"\";\n    int\
    \ messageLength = message.length;\n    for (int i = 0; i < messageLength; i++)\n\
    \    {\n        char c = message[i];\n        int ascii = c;\n        if(c >=\
    \ 'a' && c <= 'z')\n        {\n            ascii = ascii - 32;\n        }\n  \
    \      int indexOfVowel = vowels.findFirstOf(c);\n        if(indexOfVowel >= 0)\n\
    \        {\n            indexOfVowel = (indexOfVowel + 2) % 5;\n            ascii\
    \ = vowels[indexOfVowel];\n        }\n        encrypted += ascii;\n    }\n   \
    \ return encrypted;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9kfr5ofk.d(21): Error: cannot implicitly convert expression `message.length`
    of type `ulong` to `int`

    /tmp/tmp9kfr5ofk.d(30): Error: no property `findFirstOf` for type `string`

    /tmp/tmp9kfr5ofk.d(36): Error: incompatible types for `(encrypted) += (ascii)`:
    `string` and `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9kfr5ofk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string cipher;\n    char current;\n    bool isLower;\n    for (int\
    \ i = 0; i < message.length; i++) {\n        isLower = islower(message[i]);\n\
    \        current = toupper(message[i]);\n        switch (current) {\n        \
    \    case 'A':\n                current = 'C';\n                break;\n     \
    \       case 'E':\n                current = 'G';\n                break;\n  \
    \          case 'I':\n                current = 'K';\n                break;\n\
    \            case 'O':\n                current = 'Q';\n                break;\n\
    \            case 'U':\n                current = 'S';\n                break;\n\
    \            default:\n                current = isLower ? tolower(current + 2)\
    \ : (current + 2);\n                break;\n        }\n        cipher ~= current;\n\
    \    }\n    return cipher;\n}\nunittest\n{\n    alias candidate = encode;\n\n\
    \    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpulqslpet.d(23): Error: undefined identifier `islower`, did you
    mean variable `isLower`?

    /tmp/tmpulqslpet.d(24): Error: undefined identifier `toupper`

    /tmp/tmpulqslpet.d(42): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpulqslpet.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    char[] a = message.dup;\n    for (uint i = 0; i < a.length; i++) {\n\
    \        if (a[i] >= 'a' && a[i] <= 'z') a[i] -= 'a' - 'A';\n        else if (a[i]\
    \ >= 'A' && a[i] <= 'Z') a[i] += 'a' - 'A';\n        else continue;\n        switch\
    \ (a[i]) {\n            case 'A': a[i] = 'C'; break;\n            case 'E': a[i]\
    \ = 'G'; break;\n            case 'I': a[i] = 'K'; break;\n            case 'O':\
    \ a[i] = 'Q'; break;\n            case 'U': a[i] = 'S'; break;\n            case\
    \ 'Y': a[i] = 'A'; break;\n            case 'C': a[i] = 'E'; break;\n        \
    \    case 'G': a[i] = 'I'; break;\n            case 'K': a[i] = 'O'; break;\n\
    \            case 'Q': a[i] = 'U'; break;\n            case 'S': a[i] = 'Y'; break;\n\
    \        }\n    }\n    return cast(string)a;\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi14ay9b9.d(24): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi14ay9b9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    for (uint i = 0; i < message.length; i++)\n   \
    \ {\n        if (message[i] >= 'a' && message[i] <= 'z')\n        {\n        \
    \    result ~= toUpper(message[i]);\n        }\n        else if (message[i] >=\
    \ 'A' && message[i] <= 'Z')\n        {\n            result ~= toLower(message[i]);\n\
    \        }\n        else if (message[i] == 'a')\n        {\n            result\
    \ ~= 'c';\n        }\n        else if (message[i] == 'e')\n        {\n       \
    \     result ~= 'g';\n        }\n        else if (message[i] == 'i')\n       \
    \ {\n            result ~= 'k';\n        }\n        else if (message[i] == 'o')\n\
    \        {\n            result ~= 'q';\n        }\n        else if (message[i]\
    \ == 'u')\n        {\n            result ~= 'y';\n        }\n        else if (message[i]\
    \ == 'A')\n        {\n            result ~= 'C';\n        }\n        else if (message[i]\
    \ == 'E')\n        {\n            result ~= 'G';\n        }\n        else if (message[i]\
    \ == 'I')\n        {\n            result ~= 'K';\n        }\n        else if (message[i]\
    \ == 'O')\n        {\n            result ~= 'Q';\n        }\n        else if (message[i]\
    \ == 'U')\n        {\n            result ~= 'Y';\n        }\n        else\n  \
    \      {\n            result ~= message[i];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwxx84goe.d(24): Error: undefined identifier `toUpper`

    /tmp/tmpwxx84goe.d(28): Error: undefined identifier `toLower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwxx84goe.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{ \n    char key[26]={'C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','A','B'};\n\
    \    foreach(char elem; message)\n    {\n        char c=toupper(elem);\n     \
    \   char result=c;\n        if((c>=65)&&(c<=90))\n        {\n            if(c!='A'&&c!='E'&&c!='I'&&c!='O'&&c!='U')\n\
    \            {\n                if(islower(elem))\n                {\n       \
    \             result=tolower(key[c-65]);\n                }\n                else\n\
    \                {\n                    result=key[c-65];\n                }\n\
    \            }\n        }\n        writeln(result);\n    }\n    return message;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd9fqvkkz.d(19): Deprecation: instead of C-style syntax, use D-style
    syntax `char[26] key`

    /tmp/tmpd9fqvkkz.d(19): Error: a struct is not a valid initializer for a `char[26]`

    /tmp/tmpd9fqvkkz.d(22): Error: undefined identifier `toupper`

    /tmp/tmpd9fqvkkz.d(28): Error: undefined identifier `islower`

    /tmp/tmpd9fqvkkz.d(30): Error: undefined identifier `tolower`

    /tmp/tmpd9fqvkkz.d(38): Error: `writeln` is not defined, perhaps `import std.stdio;`
    is needed?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd9fqvkkz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(c; message)\n    {\n        if(isAlpha(c))\n\
    \        {\n            if(c.isUpper())\n            {\n                result\
    \ ~= c.toLower();\n            }\n            else if(c.isLower())\n         \
    \   {\n                result ~= c.toUpper();\n            }\n        }\n    \
    \    else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp89nj6zb4.d(22): Error: undefined identifier `isAlpha`

    /tmp/tmp89nj6zb4.d(24): Error: no property `isUpper` for type `immutable(char)`

    /tmp/tmp89nj6zb4.d(26): Error: no property `toLower` for type `immutable(char)`

    /tmp/tmp89nj6zb4.d(28): Error: no property `isLower` for type `immutable(char)`

    /tmp/tmp89nj6zb4.d(30): Error: no property `toUpper` for type `immutable(char)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp89nj6zb4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    string coded_message\
    \ = \"\";\n    int index;\n    char letter;\n    foreach(letter; message)\n  \
    \  {\n        index = alphabet.find(letter);\n        if(index == -1)\n      \
    \  {\n            index = alphabet.find(tolower(letter));\n            if(index\
    \ == -1)\n            {\n                coded_message ~= letter;\n          \
    \  }\n            else\n            {\n                coded_message ~= tolower(alphabet[index\
    \ + 2]);\n            }\n        }\n        else\n        {\n            coded_message\
    \ ~= alphabet[index + 2];\n        }\n    }\n    return coded_message;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmlq13arc.d(23): Error: variable `letter` is shadowing variable
    `tmpmlq13arc.encode.letter`

    /tmp/tmpmlq13arc.d(25): Error: no property `find` for type `string`

    /tmp/tmpmlq13arc.d(28): Error: no property `find` for type `string`

    /tmp/tmpmlq13arc.d(35): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmlq13arc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    // To store the data in \n    string output = \"\"; \n    \n    //\
    \ Check if the letter is lowercase \n    if (message[i] >= 'a' && message[i] <=\
    \ 'z') \n    { \n        output += char(toupper(message[i])); \n    } \n  \n \
    \   // Check if the letter is uppercase \n    else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') \n    { \n        output += char(tolower(message[i])); \n    } \n  \
    \  \n    // If the character is a vowel \n    if (message[i] == 'a' || message[i]\
    \ == 'e' || message[i] == 'i' || \n        message[i] == 'o' || message[i] ==\
    \ 'u') \n    { \n        // Add 2 with the ASCII value of the vowels \n      \
    \  output += char(int(message[i]) + 2); \n    } \n    else\n    { \n        output\
    \ += message[i]; \n    } \n  \n    return output; \n} \n/*\n    Write a function\
    \ that takes in an integer and returns the nth \n    root of that integer. Only\
    \ take in positive integers. \n    The nth root of a number can be found by raising\
    \ that number \n    to the power of 1/n. \n    \n    Examples:\n    >>> integer_root(27,\
    \ 3)\n    3\n    >>> integer_root(16, 2)\n    4\n    >>> integer_root(6, 2)\n\
    \    2.449489742783178\n*/\nunittest\n{\n    alias candidate = encode;\n\n   \
    \ assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\")\
    \ == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplxckwkdb.d(23): Error: undefined identifier `i`

    /tmp/tmplxckwkdb.d(23): Error: undefined identifier `i`

    /tmp/tmplxckwkdb.d(25): Error: undefined identifier `toupper`

    /tmp/tmplxckwkdb.d(29): Error: undefined identifier `i`

    /tmp/tmplxckwkdb.d(29): Error: undefined identifier `i`

    /tmp/tmplxckwkdb.d(31): Error: undefined identifier `tolower`

    /tmp/tmplxckwkdb.d(35): Error: undefined identifier `i`

    /tmp/tmplxckwkdb.d(35): Error: undefined identifier `i`

    /tmp/tmplxckwkdb.d(35): Error: undefined identifier `i`

    /tmp/tmplxckwkdb.d(36): Error: undefined identifier `i`

    /tmp/tmplxckwkdb.d(36): Error: undefined identifier `i`

    /tmp/tmplxckwkdb.d(39): Error: undefined identifier `i`

    /tmp/tmplxckwkdb.d(43): Error: undefined identifier `i`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplxckwkdb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string vowels = \"aeiou\";\n    foreach(int i, char c; message) {\n\
    \        if (vowels.indexOf(tolower(c)) != -1) {\n            message[i] = move(vowels[(vowels.indexOf(tolower(c))\
    \ + 2) % vowels.length]);\n        } else {\n            message[i] = islower(c)\
    \ ? toupper(c) : tolower(c);\n        }\n    }\n    return message;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmeuhczh7.d(21): Error: no property `indexOf` for type `string`

    /tmp/tmpmeuhczh7.d(22): Error: undefined identifier `move`, did you mean function
    `modf`?

    /tmp/tmpmeuhczh7.d(24): Error: undefined identifier `islower`

    /tmp/tmpmeuhczh7.d(24): Error: undefined identifier `toupper`

    /tmp/tmpmeuhczh7.d(24): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmeuhczh7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    if (message.length == 0) return \"\";\n    string code = \"\";\n  \
    \  char [] vowels = ['a', 'e', 'i', 'o', 'u'];\n    for (int i = 0; i < message.length;\
    \ i++) {\n        if (is_lower_case(message[i])) {\n            code ~= to_upper_case(message[i]);\n\
    \        } else if (is_upper_case(message[i])) {\n            code ~= to_lower_case(message[i]);\n\
    \        } else {\n            code ~= message[i];\n        }\n    }\n    for\
    \ (int i = 0; i < code.length; i++) {\n        char c = code[i];\n        foreach\
    \ (char vowel; vowels) {\n            if (c == vowel) {\n                int index\
    \ = is_lower_case(vowel) ? vowels.find('a') : vowels.find('A');\n            \
    \    index = (index + 2) % vowels.length;\n                code[i] = vowels[index];\n\
    \            }\n        }\n    }\n    return code;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppusa7hm9.d(23): Error: undefined identifier `is_lower_case`

    /tmp/tmppusa7hm9.d(24): Error: undefined identifier `to_upper_case`

    /tmp/tmppusa7hm9.d(25): Error: undefined identifier `is_upper_case`

    /tmp/tmppusa7hm9.d(26): Error: undefined identifier `to_lower_case`

    /tmp/tmppusa7hm9.d(35): Error: undefined identifier `is_lower_case`

    /tmp/tmppusa7hm9.d(35): Error: no property `find` for type `char[]`

    /tmp/tmppusa7hm9.d(35): Error: no property `find` for type `char[]`

    /tmp/tmppusa7hm9.d(36): Error: cannot implicitly convert expression `cast(ulong)(index
    + 2) % vowels.length` of type `ulong` to `int`

    /tmp/tmppusa7hm9.d(37): Error: cannot modify `immutable` expression `code[cast(ulong)i]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppusa7hm9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string ret = message;\n    char[] vowels = [ 'a', 'e', 'i', 'o', 'u'\
    \ ];\n    ret = toUpper(ret);\n    ret = toLower(ret);\n    foreach(char c; message)\n\
    \    {\n        if(c in vowels)\n        {\n            ret[c] = (c + 2 > 'z')\
    \ ? ((c + 2) - 26) : (c + 2);\n        }\n    }\n    return ret;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwqzn9e2o.d(21): Error: undefined identifier `toUpper`

    /tmp/tmpwqzn9e2o.d(22): Error: undefined identifier `toLower`

    /tmp/tmpwqzn9e2o.d(25): Error: incompatible types for `(c) in (vowels)`: `char`
    and `char[]`

    /tmp/tmpwqzn9e2o.d(27): Error: cannot modify `immutable` expression `ret[cast(ulong)c]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwqzn9e2o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string encodedMessage = \"\";\n    char letter;\n    char encodedLetter;\n\
    \    foreach(i, letter; message)\n    {\n        if (isLetter(letter))\n     \
    \   {\n            encodedLetter = letter;\n            encodedLetter = swapCase(encodedLetter);\n\
    \            encodedLetter = shiftVowel(encodedLetter);\n            encodedMessage\
    \ ~= encodedLetter;\n        }\n    }\n    return encodedMessage;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2sivq4di.d(22): Error: variable `letter` is shadowing variable
    `tmp2sivq4di.encode.letter`

    /tmp/tmp2sivq4di.d(24): Error: undefined identifier `isLetter`

    /tmp/tmp2sivq4di.d(27): Error: undefined identifier `swapCase`

    /tmp/tmp2sivq4di.d(28): Error: undefined identifier `shiftVowel`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2sivq4di.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string  alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    string  messageEncoded\
    \ = \"\";\n    int     index = 0;\n    int     indexVowel = 0;\n    char    character;\n\
    \    char    characterUpper;\n    char    characterEncoded;\n    \n    foreach(character;\
    \ message)\n    {\n        characterUpper = toUpper(character);\n        index\
    \ = indexOf(alphabet, characterUpper);\n        if (index >= 0)\n        {\n \
    \           if (isLetter(character))\n            {\n                characterEncoded\
    \ = characterUpper == character ?\n                    toLower(characterUpper)\
    \ : toUpper(characterUpper);\n            }\n            else\n            {\n\
    \                characterEncoded = characterUpper;\n            }\n         \
    \   if (indexOf(\"AEIOU\", characterUpper) >= 0)\n            {\n            \
    \    indexVowel = (index + 2) % 26;\n                characterEncoded = toLower(alphabet[indexVowel]);\n\
    \            }\n        }\n        else\n        {\n            characterEncoded\
    \ = character;\n        }\n        messageEncoded ~= characterEncoded;\n    }\n\
    \    return messageEncoded;\n}\nunittest\n{\n    alias candidate = encode;\n\n\
    \    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmgv86jpc.d(27): Error: variable `character` is shadowing variable
    `tmpmgv86jpc.encode.character`

    /tmp/tmpmgv86jpc.d(29): Error: undefined identifier `toUpper`

    /tmp/tmpmgv86jpc.d(30): Error: undefined identifier `indexOf`, did you mean variable
    `index`?

    /tmp/tmpmgv86jpc.d(33): Error: undefined identifier `isLetter`

    /tmp/tmpmgv86jpc.d(36): Error: undefined identifier `toLower`

    /tmp/tmpmgv86jpc.d(36): Error: undefined identifier `toUpper`

    /tmp/tmpmgv86jpc.d(42): Error: undefined identifier `indexOf`, did you mean variable
    `index`?

    /tmp/tmpmgv86jpc.d(45): Error: undefined identifier `toLower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmgv86jpc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string encoded = \"\";\n    string lowerVowels = \"aeiou\";\n    string\
    \ upperVowels = \"AEIOU\";\n    foreach(char c; message) {\n        if(c > 96\
    \ && c < 123) {\n            //lowercase letter\n            if(int(c) + 2 > 122)\
    \ {\n                int overflow = (int(c) + 2) - 122;\n                c = char(overflow\
    \ + 96);\n            } else {\n                c += 2;\n            }\n     \
    \       //c = char(int(c) + 2);\n        } else if(c > 64 && c < 91) {\n     \
    \       //uppercase letter\n            if(int(c) + 2 > 90) {\n              \
    \  int overflow = (int(c) + 2) - 90;\n                c = char(overflow + 64);\n\
    \            } else {\n                c += 2;\n            }\n            //c\
    \ = char(int(c) + 2);\n        } else {\n            //not a letter\n        \
    \    c = c;\n        }\n        encoded ~= c;\n    }\n    return encoded;\n}\n\
    unittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") ==\
    \ \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplnz6bras.d(27): Error: cannot implicitly convert expression `overflow
    + 96` of type `int` to `char`

    /tmp/tmplnz6bras.d(36): Error: cannot implicitly convert expression `overflow
    + 64` of type `int` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplnz6bras.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    message = toUpperCase(message);\n    string alpha = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n    string newMessage = \"\";\n    for (int i = 0; i < message.length; i++)\
    \ {\n        if (message[i] == 'A' || message[i] == 'E' || message[i] == 'I' ||\
    \ message[i] == 'O' || message[i] == 'U') {\n            newMessage += alpha[cast(int)\
    \ message[i] + 2];\n        } else {\n            newMessage += message[i];\n\
    \        }\n    }\n    return newMessage;\n}\n/*\n    Write a function that takes\
    \ in a message and returns the decoded \n    message. Do the reverse of what the\
    \ encode function does.\n    \n    Examples:\n    >>> decode(\"TGST\")\n    \"\
    test\"\n    >>> decode(\"tHKS KS C MGSSCGG\")\n    \"THIS IS A MESSAGE\"\n   \
    \ \n*/\nstring decode(string message) \n{\n    message = toUpperCase(message);\n\
    \    string alpha = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    string newMessage = \"\
    \";\n    for (int i = 0; i < message.length; i++) {\n        if (message[i] ==\
    \ 'C' || message[i] == 'F' || message[i] == 'I' || message[i] == 'L' || message[i]\
    \ == 'O') {\n            newMessage += alpha[cast(int) message[i] - 2];\n    \
    \    } else {\n            newMessage += message[i];\n        }\n    }\n    return\
    \ newMessage;\n}\n/*\n    Write a program that takes in a command line argument\
    \ which is \n    a string. You can assume that the user will only pass in one\
    \ \n    word as an argument. \n    Using the encode and decode functions, check\
    \ to see if the word \n    is already encoded or not. \n    If it's encoded, print\
    \ the word decoded. \n    If it's not encoded, print the word encoded.\n    \n\
    \    Example:\n    $ test\n    TGST\n    $\nunittest\n{\n    alias candidate =\
    \ encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqkkyupk_.d(56): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqkkyupk_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n\tchar[] vowels = {'a', 'e', 'i', 'o', 'u'};\n\tstring output = \"\";\n\
    \tforeach(x; message)\n\t{\n\t\tbool isVowel = false;\n\t\tforeach(v; vowels)\n\
    \t\t{\n\t\t\tif(v == toLower(x))\n\t\t\t{\n\t\t\t\tisVowel = true;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif(isVowel)\n\t\t{\n\t\t\toutput ~= toUpper(vowels[(toLower(x)\
    \ - 97 + 2) % 5]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\toutput ~= toUpper(x);\n\t\t\
    }\n\t}\n\treturn output;\n}\nunittest\n{\n    alias candidate = encode;\n\n  \
    \  assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuuh1b4_k.d(19): Error: a struct is not a valid initializer for
    a `char[]`

    /tmp/tmpuuh1b4_k.d(26): Error: undefined identifier `toLower`

    /tmp/tmpuuh1b4_k.d(34): Error: undefined identifier `toUpper`

    /tmp/tmpuuh1b4_k.d(38): Error: undefined identifier `toUpper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuuh1b4_k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    // make sure that message is not empty\n    if (message.length == 0)\
    \ \n    {\n        return message;\n    }\nunittest\n{\n    alias candidate =\
    \ encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwqfwv6by.d(24): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwqfwv6by.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string output = \"\";\n    for (int i = 0; i < message.length; i++)\
    \ {\n        if (isalpha(message[i])) {\n            switch (tolower(message[i]))\
    \ {\n                case 'a': output += 'c'; break;\n                case 'e':\
    \ output += 'g'; break;\n                case 'i': output += 'k'; break;\n   \
    \             case 'o': output += 'q'; break;\n                case 'u': output\
    \ += 'y'; break;\n                default: output += isupper(message[i]) ? toupper(message[i]\
    \ + 2) : message[i] + 2; break;\n            }\n        } else {\n           \
    \ output += message[i];\n        }\n    }\n    return output;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmyedy2pm.d(21): Error: undefined identifier `isalpha`

    /tmp/tmpmyedy2pm.d(22): Error: undefined identifier `tolower`

    /tmp/tmpmyedy2pm.d(23): Error: slice `output` is not mutable

    /tmp/tmpmyedy2pm.d(24): Error: slice `output` is not mutable

    /tmp/tmpmyedy2pm.d(25): Error: slice `output` is not mutable

    /tmp/tmpmyedy2pm.d(26): Error: slice `output` is not mutable

    /tmp/tmpmyedy2pm.d(27): Error: slice `output` is not mutable

    /tmp/tmpmyedy2pm.d(28): Error: undefined identifier `isupper`

    /tmp/tmpmyedy2pm.d(28): Error: undefined identifier `toupper`

    /tmp/tmpmyedy2pm.d(31): Error: slice `output` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmyedy2pm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string str = \"\";\n    int len = message.length;\n    for (int i =\
    \ 0; i < len; i++)\n    {\n        int c = message[i];\n        // check if its\
    \ a lowercase letter\n        if (c >= 'a' && c <= 'z')\n        {\n         \
    \   c = 'A' + (c - 'a');\n        }\n        // check if its a uppercase letter\n\
    \        else if (c >= 'A' && c <= 'Z')\n        {\n            // check if its\
    \ a vowel\n            if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c ==\
    \ 'U')\n            {\n                // rotate the letter \n               \
    \ c = c + 3;\n                if (c > 'Z')\n                {\n              \
    \      c = c - 26;\n                }\n            }\n            c = 'a' + (c\
    \ - 'A');\n        }\n        str += c;\n    }\n    return str;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn2_ptadj.d(20): Error: cannot implicitly convert expression `message.length`
    of type `ulong` to `int`

    /tmp/tmpn2_ptadj.d(44): Error: incompatible types for `(str) += (c)`: `string`
    and `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn2_ptadj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    // TODO: Make me proper\n    return message;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjv_uz6gj.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f1d]

    ??:? void tmpjv_uz6gj.__unittest_L22_C1() [0x427abe]

    ??:? void tmpjv_uz6gj.__modtest() [0x427c9c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbc7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aad6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbed]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43009c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb79]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aaad]

    ??:? runModuleUnitTests [0x42b99d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42836c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    // TODO\n    return \"\";\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp1fppnzf9.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f0d]

    ??:? void tmp1fppnzf9.__unittest_L22_C1() [0x427ab2]

    ??:? void tmp1fppnzf9.__modtest() [0x427c90]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aac6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbdd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43008c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb69]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa9d]

    ??:? runModuleUnitTests [0x42b98d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42835c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    char output[256];\n    foreach(inout char c; message)\n    {\n    \
    \    if(isLetter(c))\n        {\n            if(isUpper(c))\n            {\n \
    \               if(c == 'Z')\n                    c = 'a';\n                else\n\
    \                    c = toLower(c);\n            }\n            else if(isLower(c))\n\
    \            {\n                if(c == 'z')\n                    c = 'A';\n \
    \               else\n                    c = toUpper(c);\n            }\n   \
    \     }\n        output ~= c;\n    }\n    return output;\n}\nunittest\n{\n   \
    \ alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_ejs3yt1.d(19): Deprecation: instead of C-style syntax, use D-style
    syntax `char[256] output`

    /tmp/tmp_ejs3yt1.d(20): Error: variable `tmp_ejs3yt1.encode.c` `inout` variables
    can only be declared inside `inout` functions

    /tmp/tmp_ejs3yt1.d(22): Error: undefined identifier `isLetter`

    /tmp/tmp_ejs3yt1.d(24): Error: undefined identifier `isUpper`

    /tmp/tmp_ejs3yt1.d(27): Error: cannot modify `inout` expression `c`

    /tmp/tmp_ejs3yt1.d(29): Error: undefined identifier `toLower`

    /tmp/tmp_ejs3yt1.d(31): Error: undefined identifier `isLower`

    /tmp/tmp_ejs3yt1.d(34): Error: cannot modify `inout` expression `c`

    /tmp/tmp_ejs3yt1.d(36): Error: undefined identifier `toUpper`

    /tmp/tmp_ejs3yt1.d(39): Error: cannot append type `inout(char)` to type `char[256]`

    /tmp/tmp_ejs3yt1.d(41): Error: returning `cast(string)output` escapes a reference
    to local variable `output`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_ejs3yt1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    char[] vowels = ['a', 'e', 'i', 'o', 'u'];\n    foreach(dchar letter;\
    \ message)\n    {\n        //if the current letter is a vowel, replace it\n  \
    \      //with the next next letter in the alphabet\n        //otherwise, just\
    \ toggle the case.\n        if(in(letter, vowels))\n        {\n            if(letter\
    \ == 'u')\n                message[$-1] = 'a';\n            else\n           \
    \     message[$-1] = ++letter;\n        }\n        else\n            message[$-1]\
    \ = tolower(letter);\n    }\n    return message;\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyc48gtlu.d(25): Error: expression expected, not `in`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyc48gtlu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string encoded = \"\";\n    foreach(immutable char c; message)\n  \
    \  {\n        switch(c)\n        {\n            case 'A':\n            case 'a':\
    \ encoded ~= 'C'; break;\n            case 'E':\n            case 'e': encoded\
    \ ~= 'G'; break;\n            case 'I':\n            case 'i': encoded ~= 'K';\
    \ break;\n            case 'O':\n            case 'o': encoded ~= 'Q'; break;\n\
    \            case 'U':\n            case 'u': encoded ~= 'S'; break;\n       \
    \     case 'Y':\n            case 'y': encoded ~= 'U'; break;\n            default:\n\
    \                encoded ~= isUpper(c) ? toLower(c) : toUpper(c);\n        }\n\
    \    }\n    return encoded;\n}\nunittest\n{\n    alias candidate = encode;\n\n\
    \    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0f0vgy6c.d(37): Error: undefined identifier `isUpper`

    /tmp/tmp0f0vgy6c.d(37): Error: undefined identifier `toLower`

    /tmp/tmp0f0vgy6c.d(37): Error: undefined identifier `toUpper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0f0vgy6c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string retStr = \"\";\n    for (int i = 0; i < message.length; i++)\n\
    \    {\n        if(message[i] >= 'a' && message[i] <= 'z')\n        {\n      \
    \      retStr += (char)('A' + (message[i] - 'a'));\n        }\n        else if(message[i]\
    \ >= 'A' && message[i] <= 'Z')\n        {\n            retStr += (char)('a' +\
    \ (message[i] - 'A'));\n        }\n        else\n        {\n            retStr\
    \ += message[i];\n        }\n    }\n    //swap case\n    //replace vowels\n  \
    \  retStr = retStr.replace('a', 'c');\n    retStr = retStr.replace('e', 'g');\n\
    \    retStr = retStr.replace('i', 'k');\n    retStr = retStr.replace('o', 'q');\n\
    \    retStr = retStr.replace('u', 'w');\n    retStr = retStr.replace('A', 'C');\n\
    \    retStr = retStr.replace('E', 'G');\n    retStr = retStr.replace('I', 'K');\n\
    \    retStr = retStr.replace('O', 'Q');\n    retStr = retStr.replace('U', 'W');\n\
    \    return retStr;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1rmr1tkg.d(24): Error: C style cast illegal, use `cast(char)(''A''
    + (message[i] - ''a''))`

    /tmp/tmp1rmr1tkg.d(28): Error: C style cast illegal, use `cast(char)(''a'' + (message[i]
    - ''A''))`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1rmr1tkg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string vowels = \"aeiou\";\n    string encoded;\n    foreach(char c;\
    \ message) {\n        if(isLetter(c)) {\n            c = toUpper(c);\n       \
    \     if(c in vowels) {\n                c = vowels[(vowels.indexOf(c) + 2) %\
    \ 5];\n            }\n        }\n        encoded ~= c;\n    }\n    return encoded;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv9b293t8.d(22): Error: undefined identifier `isLetter`

    /tmp/tmpv9b293t8.d(23): Error: undefined identifier `toUpper`

    /tmp/tmpv9b293t8.d(24): Error: incompatible types for `(c) in (vowels)`: `char`
    and `string`

    /tmp/tmpv9b293t8.d(25): Error: no property `indexOf` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv9b293t8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    char[] vowels = \"aeiou\".dup;\n    foreach(char c; vowels)\n    {\n\
    \        for(int i = 0; i < message.length; i++)\n        {\n            if(message[i]\
    \ == c)\n            {\n                message[i] = char(vowels[((cast(int)c)-97+2)%vowels.length]+32);\n\
    \            }\n        }\n    }\n    return message;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu15jtb4e.d(26): Error: cannot implicitly convert expression `cast(int)vowels[cast(ulong)(cast(int)c
    - 97 + 2) % vowels.length] + 32` of type `int` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu15jtb4e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    char[] vowels = ['a', 'e', 'i', 'o', 'u'];\n    string result = \"\"\
    ;\n    foreach(c; message)\n    {\n        if(std.algorithm.find(vowels, c) !=\
    \ null)\n        {\n            // Find the index of the character \n        \
    \    auto index = std.algorithm.find(vowels, c) - vowels.ptr;\n            auto\
    \ newIndex = index + 2;\n            if(newIndex >= 5)\n            {\n      \
    \          newIndex -= 5;\n            }\n            result ~= vowels[newIndex];\n\
    \        }\n        else\n        {\n            if(isUpper(c))\n            {\n\
    \                result ~= c.toLower;\n            }\n            else\n     \
    \       {\n                result ~= c.toUpper;\n            }\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n  \
    \  assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3z7q_71b.d(23): Error: undefined identifier `algorithm` in package
    `std`

    /tmp/tmp3z7q_71b.d(26): Error: undefined identifier `algorithm` in package `std`

    /tmp/tmp3z7q_71b.d(36): Error: undefined identifier `isUpper`

    /tmp/tmp3z7q_71b.d(38): Error: no property `toLower` for type `immutable(char)`

    /tmp/tmp3z7q_71b.d(42): Error: no property `toUpper` for type `immutable(char)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3z7q_71b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    return \"\";\n}\nunittest\n{\n    alias candidate = encode;\n\n   \
    \ assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\")\
    \ == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6ybvupn0.d(25): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f0d]

    ??:? void tmp6ybvupn0.__unittest_L21_C1() [0x427ab2]

    ??:? void tmp6ybvupn0.__modtest() [0x427c90]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aac6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbdd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43008c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb69]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa9d]

    ??:? runModuleUnitTests [0x42b98d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42835c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string vowels = \"AEIOUaeiou\";\n    string new_string = \"\";\n  \
    \  foreach(c; message) {\n        string current_letter = c;\n        if(c in\
    \ vowels)\n            new_string ~= (char)((int)c + 2);\n        else\n     \
    \       new_string ~= (char)((int)c ^ (int)' ');\n    }\n    return new_string;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8jbsiagh.d(24): Error: C style cast illegal, use `cast(int)c`

    /tmp/tmp8jbsiagh.d(24): Error: C style cast illegal, use `cast(char)(cast(int)c
    + 2)`

    /tmp/tmp8jbsiagh.d(26): Error: C style cast illegal, use `cast(int)c`

    /tmp/tmp8jbsiagh.d(26): Error: C style cast illegal, use `cast(int)'' ''`

    /tmp/tmp8jbsiagh.d(26): Error: C style cast illegal, use `cast(char)(cast(int)c
    ^ cast(int)'' '')`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8jbsiagh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n  string msg = message;\n  foreach(int i, char ch; msg) {\n    if(isAlpha(ch))\
    \ {\n      if(ch >= 'a' && ch <= 'z') {\n        msg[i] = ch - 32;\n      } else\
    \ {\n        msg[i] = ch + 32;\n      }\n      if(ch == 'a' || ch == 'A') {\n\
    \        msg[i] = 'C';\n      } else if(ch == 'e' || ch == 'E') {\n        msg[i]\
    \ = 'G';\n      } else if(ch == 'i' || ch == 'I') {\n        msg[i] = 'K';\n \
    \     } else if(ch == 'o' || ch == 'O') {\n        msg[i] = 'M';\n      } else\
    \ if(ch == 'u' || ch == 'U') {\n        msg[i] = 'Q';\n      }\n    }\n  }\n \
    \ return msg;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5fgt36dw.d(21): Error: undefined identifier `isAlpha`

    /tmp/tmp5fgt36dw.d(23): Error: cannot modify `immutable` expression `msg[cast(ulong)i]`

    /tmp/tmp5fgt36dw.d(25): Error: cannot modify `immutable` expression `msg[cast(ulong)i]`

    /tmp/tmp5fgt36dw.d(28): Error: cannot modify `immutable` expression `msg[cast(ulong)i]`

    /tmp/tmp5fgt36dw.d(30): Error: cannot modify `immutable` expression `msg[cast(ulong)i]`

    /tmp/tmp5fgt36dw.d(32): Error: cannot modify `immutable` expression `msg[cast(ulong)i]`

    /tmp/tmp5fgt36dw.d(34): Error: cannot modify `immutable` expression `msg[cast(ulong)i]`

    /tmp/tmp5fgt36dw.d(36): Error: cannot modify `immutable` expression `msg[cast(ulong)i]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5fgt36dw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string encoded = \"\";\n    char c;\n    int i;\n    for (i = 0; i\
    \ < message.length; i++)\n    {\n        c = message[i];\n        if (c == 'A'\
    \ || c == 'a')\n            encoded += 'C';\n        else if (c == 'E' || c ==\
    \ 'e')\n            encoded += 'G';\n        else if (c == 'I' || c == 'i')\n\
    \            encoded += 'K';\n        else if (c == 'O' || c == 'o')\n       \
    \     encoded += 'M';\n        else if (c == 'U' || c == 'u')\n            encoded\
    \ += 'O';\n        else if (c == 'Y' || c == 'y')\n            encoded += 'a';\n\
    \        else if (c >= 'a' && c <= 'z')\n            encoded += char(c+2);\n \
    \       else if (c >= 'A' && c <= 'Z')\n            encoded += char(c+2);\n  \
    \      else\n            encoded += c;\n    }\n    return encoded;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1bjmubvf.d(26): Error: slice `encoded` is not mutable

    /tmp/tmp1bjmubvf.d(28): Error: slice `encoded` is not mutable

    /tmp/tmp1bjmubvf.d(30): Error: slice `encoded` is not mutable

    /tmp/tmp1bjmubvf.d(32): Error: slice `encoded` is not mutable

    /tmp/tmp1bjmubvf.d(34): Error: slice `encoded` is not mutable

    /tmp/tmp1bjmubvf.d(36): Error: slice `encoded` is not mutable

    /tmp/tmp1bjmubvf.d(38): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    /tmp/tmp1bjmubvf.d(40): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    /tmp/tmp1bjmubvf.d(42): Error: slice `encoded` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1bjmubvf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string res;\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n\
    \        {\n            char t = tolower(c);\n            bool isupper = isupper(c);\n\
    \            if(t == 'a')\n                t = 'c';\n            else if(t ==\
    \ 'e')\n                t = 'g';\n            else if(t == 'i')\n            \
    \    t = 'k';\n            else if(t == 'o')\n                t = 'q';\n     \
    \       else if(t == 'u')\n                t = 'y';\n            else\n      \
    \          t = c + 2;\n            if(isupper)\n                t = toupper(t);\n\
    \            res ~= t;\n        }\n        else\n            res ~= c;\n    }\n\
    \    return res;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp8nle97x.d(22): Error: undefined identifier `isalpha`

    /tmp/tmpp8nle97x.d(24): Error: undefined identifier `tolower`

    /tmp/tmpp8nle97x.d(25): Error: undefined identifier `isupper`

    /tmp/tmpp8nle97x.d(37): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    /tmp/tmpp8nle97x.d(39): Error: undefined identifier `toupper`, did you mean variable
    `isupper`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp8nle97x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    message = toLower(message);\n    string newMsg = \"\";\n    foreach(char\
    \ c; message)\n    {\n        if(c=='z')\n            newMsg ~= 'b';\n       \
    \ else if(c=='y')\n            newMsg ~= 'a';\n        else if(c=='x')\n     \
    \       newMsg ~= 'Z';\n        else if(c=='w')\n            newMsg ~= 'Y';\n\
    \        else if(c=='v')\n            newMsg ~= 'X';\n        else if(c=='u')\n\
    \            newMsg ~= 'W';\n        else if(c=='t')\n            newMsg ~= 'V';\n\
    \        else if(c=='s')\n            newMsg ~= 'U';\n        else if(c=='r')\n\
    \            newMsg ~= 'T';\n        else if(c=='q')\n            newMsg ~= 'S';\n\
    \        else if(c=='p')\n            newMsg ~= 'R';\n        else if(c=='o')\n\
    \            newMsg ~= 'Q';\n        else if(c=='n')\n            newMsg ~= 'P';\n\
    \        else if(c=='m')\n            newMsg ~= 'O';\n        else if(c=='l')\n\
    \            newMsg ~= 'N';\n        else if(c=='k')\n            newMsg ~= 'M';\n\
    \        else if(c=='j')\n            newMsg ~= 'L';\n        else if(c=='i')\n\
    \            newMsg ~= 'K';\n        else if(c=='h')\n            newMsg ~= 'J';\n\
    \        else if(c=='g')\n            newMsg ~= 'I';\n        else if(c=='f')\n\
    \            newMsg ~= 'H';\n        else if(c=='e')\n            newMsg ~= 'G';\n\
    \        else if(c=='d')\n            newMsg ~= 'F';\n        else if(c=='c')\n\
    \            newMsg ~= 'E';\n        else if(c=='b')\n            newMsg ~= 'D';\n\
    \        else if(c\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa4ok9wrc.d(74): Error: found `unittest` when expecting `)`

    /tmp/tmpa4ok9wrc.d(84): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpa4ok9wrc.d(84): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa4ok9wrc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string encodedMessage = \"\";\n    for (in i = 0; i < message.length;\
    \ i++)\n    {\n        int asciiCode = message[i];\n        if (asciiCode >= 65\
    \ && asciiCode <= 90)\n        {\n            encodedMessage += chr(asciiCode\
    \ + 32);\n        }\n        else if (asciiCode >= 97 && asciiCode <= 122)\n \
    \       {\n            encodedMessage += chr(asciiCode - 32);\n        }\n   \
    \     else\n        {\n            encodedMessage += message[i];\n        }\n\
    \    }\n    return encodedMessage;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzcd1eh9e.d(20): Error: found `in` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzcd1eh9e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{ \n    string res = \"\";\n    foreach(char c; message) {\n        if (isAlpha(c))\
    \ {\n            if (islower(c))\n                c = c + 13;\n            else\n\
    \                c = c - 13;\n            switch(c) {\n                case 'a':\n\
    \                case 'e':\n                case 'i':\n                case 'o':\n\
    \                case 'u':\n                    c = c + 2;\n            }\n  \
    \      }\n        res ~= c;\n    }\n    return res;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphu5xzk8u.d(21): Error: undefined identifier `isAlpha`

    /tmp/tmphu5xzk8u.d(22): Error: undefined identifier `islower`

    /tmp/tmphu5xzk8u.d(23): Error: cannot implicitly convert expression `cast(int)c
    + 13` of type `int` to `char`

    /tmp/tmphu5xzk8u.d(25): Error: cannot implicitly convert expression `cast(int)c
    - 13` of type `int` to `char`

    /tmp/tmphu5xzk8u.d(32): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphu5xzk8u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n\tstring result = \"\";\n\tforeach(char c; message)\n\t{\n\t\tif(c.isLetter)\n\
    \t\t{\n\t\t\tresult ~= to!string(c ^ ' ');\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult\
    \ ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkbq6r3vq.d(22): Error: no property `isLetter` for type `char`

    /tmp/tmpkbq6r3vq.d(24): Error: template instance `to!string` template `to` is
    not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkbq6r3vq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char letter; message)\n    {\n \
    \       // do the swap\n        if(isAlpha(letter))\n        {\n            letter\
    \ = isLower(letter) ? toupper(letter) : tolower(letter);\n        }\n        //\
    \ replace the vowel\n        // A-Z 65 - 90  a-z  97 - 122\n        switch(letter)\n\
    \        {\n            case 'A':\n            case 'a':\n                result\
    \ ~= 'C';\n                break;\n            case 'E':\n            case 'e':\n\
    \                result ~= 'G';\n                break;\n            case 'I':\n\
    \            case 'i':\n                result ~= 'K';\n                break;\n\
    \            case 'O':\n            case 'o':\n                result ~= 'Q';\n\
    \                break;\n            case 'U':\n            case 'u':\n      \
    \          result ~= 'S';\n                break;\n            default:\n    \
    \            result ~= letter;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcos53350.d(23): Error: undefined identifier `isAlpha`

    /tmp/tmpcos53350.d(25): Error: undefined identifier `isLower`

    /tmp/tmpcos53350.d(25): Error: undefined identifier `toupper`

    /tmp/tmpcos53350.d(25): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcos53350.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    int letter = 0;\n    int new_letter = 0;\n    int special = 0;\n  \
    \  string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string new_message =\
    \ \"\";\n    for (int i = 0; i < message.length; i++)\n    {\n        if (message[i]\
    \ == ' ')\n        {\n            new_message += message[i];\n        }\n    \
    \    else\n        {\n            letter = alphabet.find(message[i], 0);\n   \
    \         if (letter < 0)\n            {\n                letter = alphabet.find(message[i],\
    \ 0) - 32;\n            }\n            if (letter < 0)\n            {\n      \
    \          new_message += message[i];\n            }\n            else\n     \
    \       {\n                new_letter = (letter + 2) % 26;\n                if\
    \ (new_letter < 0)\n                {\n                    new_letter += 26;\n\
    \                }\n                new_message += alphabet[new_letter];\n   \
    \         }\n        }\n    }\n    return new_message;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0vc1gus_.d(28): Error: slice `new_message` is not mutable

    /tmp/tmp0vc1gus_.d(32): Error: no property `find` for type `string`

    /tmp/tmp0vc1gus_.d(35): Error: no property `find` for type `string`

    /tmp/tmp0vc1gus_.d(39): Error: slice `new_message` is not mutable

    /tmp/tmp0vc1gus_.d(48): Error: slice `new_message` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0vc1gus_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string str = \"\";\n    // ASCII code of english alphabet\n    string\
    \ code = \"abcdefghijklmnopqrstuvwxyz\";\n    int code_size = code.length;\n \
    \   foreach(char character; message)\n    {\n        if (character >= 'a' && character\
    \ <= 'z')\n        {\n            // upper case\n            str ~= toupper(character);\n\
    \        }\n        else if (character >= 'A' && character <= 'Z')\n        {\n\
    \            // lower case\n            str ~= tolower(character);\n        }\n\
    \        else\n        {\n            // not a letter\n            str ~= character;\n\
    \        }\n        // move to next character\n    }\n    int str_size = str.length;\n\
    \    for (int i = 0; i < str_size; i++)\n    {\n        char character = str[i];\n\
    \        if (character == 'a' || character == 'e' || character == 'i' || character\
    \ == 'o' || character == 'u')\n        {\n            // replace a vowel by a\
    \ next letter\n            int index = code.indexOf(character);\n            if\
    \ (index != -1)\n            {\n                // replace the vowel by a letter\n\
    \                int i = ((index + 2) % code_size);\n                str[i] =\
    \ code[i];\n            }\n        }\n    }\n    return str;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprl4svbgc.d(22): Error: cannot implicitly convert expression `code.length`
    of type `ulong` to `int`

    /tmp/tmprl4svbgc.d(28): Error: undefined identifier `toupper`

    /tmp/tmprl4svbgc.d(33): Error: undefined identifier `tolower`

    /tmp/tmprl4svbgc.d(42): Error: cannot implicitly convert expression `str.length`
    of type `ulong` to `int`

    /tmp/tmprl4svbgc.d(49): Error: no property `indexOf` for type `string`

    /tmp/tmprl4svbgc.d(53): Error: variable `i` is shadowing variable `tmprl4svbgc.encode.i`

    /tmp/tmprl4svbgc.d(54): Error: cannot modify `immutable` expression `str[cast(ulong)i]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprl4svbgc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string newMessage = \"\";\n    foreach(char letter; message)\n    {\n\
    \        switch(letter)\n        {\n            case 'A':\n            case 'a':\n\
    \                newMessage ~= 'C';\n                break;\n            case\
    \ 'E':\n            case 'e':\n                newMessage ~= 'G';\n          \
    \      break;\n            case 'I':\n            case 'i':\n                newMessage\
    \ ~= 'K';\n                break;\n            case 'O':\n            case 'o':\n\
    \                newMessage ~= 'Q';\n                break;\n            case\
    \ 'U':\n            case 'u':\n                newMessage ~= 'S';\n          \
    \      break;\n            case 'Y':\n            case 'y':\n                newMessage\
    \ ~= 'A';\n                break;\n            default:\n                newMessage\
    \ ~= toupper(letter);\n                break;\n        }\n    }\n    return newMessage;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvehox2j2.d(49): Error: undefined identifier `toupper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvehox2j2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string encoded = \"\";\n    for (int i = 0; i < message.length; i++)\
    \ {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            if (message[i]\
    \ == 'y') {\n                encoded += 'A';\n            } else if (message[i]\
    \ == 'z') {\n                encoded += 'B';\n            } else {\n         \
    \       encoded += message[i] + 2;\n            }\n        } else if (message[i]\
    \ >= 'A' && message[i] <= 'Z') {\n            if (message[i] == 'Y') {\n     \
    \           encoded += 'a';\n            } else if (message[i] == 'Z') {\n   \
    \             encoded += 'b';\n            } else {\n                encoded +=\
    \ message[i] + 2;\n            }\n        } else {\n            encoded += message[i];\n\
    \        }\n    }\n    return encoded;\n}\nunittest\n{\n    alias candidate =\
    \ encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpro1uev_3.d(23): Error: slice `encoded` is not mutable

    /tmp/tmpro1uev_3.d(25): Error: slice `encoded` is not mutable

    /tmp/tmpro1uev_3.d(27): Error: incompatible types for `(encoded) += (cast(int)message[cast(ulong)i]
    + 2)`: `string` and `int`

    /tmp/tmpro1uev_3.d(31): Error: slice `encoded` is not mutable

    /tmp/tmpro1uev_3.d(33): Error: slice `encoded` is not mutable

    /tmp/tmpro1uev_3.d(35): Error: incompatible types for `(encoded) += (cast(int)message[cast(ulong)i]
    + 2)`: `string` and `int`

    /tmp/tmpro1uev_3.d(38): Error: slice `encoded` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpro1uev_3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(ch; message) \n    {\n        //\
    \ isalpha\n        if(ch >= 'a' && ch <= 'z')\n        {\n            // tolower\n\
    \            if(ch >= 'A' && ch <= 'Z')\n            {\n                ch = ch\
    \ + 32;\n            }\n            ch = ch + 2;\n            if(ch > 'z')\n \
    \           {\n                ch = ch - 26;\n            }\n            ch =\
    \ ch - 32;\n        }\n        result ~= ch;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5rreage2.d(28): Error: cannot modify `immutable` expression `ch`

    /tmp/tmp5rreage2.d(30): Error: cannot modify `immutable` expression `ch`

    /tmp/tmp5rreage2.d(33): Error: cannot modify `immutable` expression `ch`

    /tmp/tmp5rreage2.d(35): Error: cannot modify `immutable` expression `ch`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5rreage2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    return message;\n}\nunittest\n{\n    alias candidate = encode;\n\n\
    \    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8hw38i6p.d(25): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f1d]

    ??:? void tmp8hw38i6p.__unittest_L21_C1() [0x427abe]

    ??:? void tmp8hw38i6p.__modtest() [0x427c9c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbc7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aad6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbed]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43009c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb79]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aaad]

    ??:? runModuleUnitTests [0x42b99d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42836c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    auto result = message;\n    auto i = 0;\n    while (i < result.length)\n\
    \    {\n        char c = result[i];\n        if (isAlpha(c))\n        {\n    \
    \        auto lower = toLower(c);\n            if (lower == 'a' || lower == 'e'\
    \ || lower == 'i' || lower == 'o' || lower == 'u')\n            {\n          \
    \      lower = (lower + 2) % 26;\n                result[i] = toUpper(lower);\n\
    \            }\n            else\n            {\n                result[i] = toUpper(c);\n\
    \            }\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg9050d4h.d(24): Error: undefined identifier `isAlpha`

    /tmp/tmpg9050d4h.d(26): Error: undefined identifier `toLower`

    /tmp/tmpg9050d4h.d(30): Error: undefined identifier `toUpper`

    /tmp/tmpg9050d4h.d(34): Error: undefined identifier `toUpper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9050d4h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string encoded = \"\";\n    foreach(char c; message)\n    {\n     \
    \   if(isAlpha(c))\n        {\n            if(isLower(c))\n            {\n   \
    \             switch(c)\n                {\n                    case 'a':\n  \
    \                      encoded ~= \"c\";\n                        break;\n   \
    \                 case 'e':\n                        encoded ~= \"g\";\n     \
    \                   break;\n                    case 'i':\n                  \
    \      encoded ~= \"k\";\n                        break;\n                   \
    \ case 'o':\n                        encoded ~= \"q\";\n                     \
    \   break;\n                    case 'u':\n                        encoded ~=\
    \ \"y\";\n                        break;\n                    default:\n     \
    \                   encoded ~= c;\n                        break;\n          \
    \      }\n            }\n            else\n            {\n                switch(c)\n\
    \                {\n                    case 'A':\n                        encoded\
    \ ~= \"C\";\n                        break;\n                    case 'E':\n \
    \                       encoded ~= \"G\";\n                        break;\n  \
    \                  case 'I':\n                        encoded ~= \"K\";\n    \
    \                    break;\n                    case 'O':\n                 \
    \       encoded ~= \"Q\";\n                        break;\n                  \
    \  case 'U':\n                        encoded ~= \"Y\";\n                    \
    \    break;\n                    default:\n                        encoded ~=\
    \ c;\n                        break;\n                }\n            }\n     \
    \   }\n        else\n        {\n            encoded ~= c;\n        }\n    }\n\
    \    return encoded;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps957m6_c.d(22): Error: undefined identifier `isAlpha`

    /tmp/tmps957m6_c.d(24): Error: undefined identifier `isLower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps957m6_c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{ \n    string encoded = \"\";\n    foreach(char c; message) {\n        if(c\
    \ >= 'a' && c <= 'z') {\n            if(c == 'a')\n                encoded ~=\
    \ 'c';\n            else if(c == 'e')\n                encoded ~= 'g';\n     \
    \       else if(c == 'i')\n                encoded ~= 'k';\n            else if(c\
    \ == 'o')\n                encoded ~= 'q';\n            else if(c == 'u')\n  \
    \              encoded ~= 'y';\n            else\n                encoded ~= chr(c-2);\n\
    \        }\n        else if(c >= 'A' && c <= 'Z') {\n            if(c == 'A')\n\
    \                encoded ~= 'C';\n            else if(c == 'E')\n            \
    \    encoded ~= 'G';\n            else if(c == 'I')\n                encoded ~=\
    \ 'K';\n            else if(c == 'O')\n                encoded ~= 'Q';\n     \
    \       else if(c == 'U')\n                encoded ~= 'Y';\n            else\n\
    \                encoded ~= chr(c-2);\n        }\n        else {\n           \
    \ encoded ~= c;\n        }\n    }\n    return encoded;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwsvo7_6_.d(33): Error: undefined identifier `chr`

    /tmp/tmpwsvo7_6_.d(47): Error: undefined identifier `chr`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwsvo7_6_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string r = \"\";\n    foreach(char c; message) {\n        if(c >= 'a'\
    \ && c <= 'z') {\n            r ~= (c == 'z' ? 'A' : c + 1);\n        } else if(c\
    \ >= 'A' && c <= 'Z') {\n            r ~= (c == 'Z' ? 'a' : c + 1);\n        }\
    \ else {\n            r ~= c;\n        }\n    }\n    return r;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp007qr7qh.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x4280c5]

    ??:? void tmp007qr7qh.__unittest_L31_C1() [0x427c6a]

    ??:? void tmp007qr7qh.__modtest() [0x427e48]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ca4f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b95e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430335]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4307e4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302c1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b935]

    ??:? runModuleUnitTests [0x42c825]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428514]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    for (int i = 0; i < message.length; i++) {\n  \
    \      // get lowercase versions of the character\n        char lowercase = tolower(message[i]);\n\
    \        char lowercase_encoded = tolower(message[i]);\n        // check for a\
    \ vowel\n        if (lowercase == 'a' || lowercase == 'e' || lowercase == 'i'\
    \ || lowercase == 'o' || lowercase == 'u') {\n            // if the encoded character\
    \ goes past 'u', start over at 'a'\n            if (lowercase == 'u') {\n    \
    \            lowercase_encoded = 'a';\n            } else {\n                lowercase_encoded\
    \ = lowercase + 2;\n            }\n        } else {\n            // get the upper/lower\
    \ version of the character\n            if (lowercase != message[i]) {\n     \
    \           lowercase_encoded = toupper(lowercase_encoded);\n            }\n \
    \       }\n        // append the encoded character to the result\n        result\
    \ += lowercase_encoded;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyd5vub8i.d(22): Error: undefined identifier `tolower`

    /tmp/tmpyd5vub8i.d(23): Error: undefined identifier `tolower`

    /tmp/tmpyd5vub8i.d(30): Error: cannot implicitly convert expression `cast(int)lowercase
    + 2` of type `int` to `char`

    /tmp/tmpyd5vub8i.d(35): Error: undefined identifier `toupper`

    /tmp/tmpyd5vub8i.d(39): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyd5vub8i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{ \n    message = message.toUpper();\n    string result;\n    int vowels[5]\
    \ = {'A', 'E', 'I', 'O', 'U'};\n    int counts[5] = {0, 0, 0, 0, 0};\n    int\
    \ counts2[5] = {0, 0, 0, 0, 0};\n    int y = 0;\n    foreach(i; message)\n   \
    \ {\n        int x = 0;\n        foreach(v; vowels)\n        {\n            if(i\
    \ == v)\n            {\n                counts[x]++;\n            }\n        \
    \    x++;\n        }\n    }\n    foreach(i; message)\n    {\n        int x = 0;\n\
    \        foreach(v; vowels)\n        {\n            if(i == v)\n            {\n\
    \                if(counts[x] == 1)\n                {\n                    if(y\
    \ < 4)\n                    {\n                        result ~= vowels[y+1];\n\
    \                        y++;\n                    }\n                    else\n\
    \                    {\n                        result ~= vowels[0];\n       \
    \                 y++;\n                    }\n                }\n           \
    \     else\n                {\n                    counts2[x]++;\n           \
    \         if(counts2[x] == 1)\n                    {\n                       \
    \ if(y < 4)\n                        {\n                            result ~=\
    \ vowels[y+1];\n                            y++;\n                        }\n\
    \                        else\n                        {\n                   \
    \         result ~= vowels[0];\n                            y++;\n           \
    \             }\n                    }\n                    else\n           \
    \         {\n                        if(y < 4)\n                        {\n  \
    \                          result ~= vowels[y+2];\n                          \
    \  y++;\n                        }\n                        else\n           \
    \             {\n                            result ~= vowels[1];\n          \
    \                  y++;\n                        }\n                    }\n  \
    \              }\n            }\n            x++;\n        }\n        if(i !=\
    \ 'A' && i != 'E' && i != 'I' && i != 'O' && i != 'U')\n        {\n          \
    \  result ~= i;\n        }\n    }\n    return result;\n}\n// void main() \n//\
    \ {\n//     import std.stdio;\n//\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc023df75.d(21): Deprecation: instead of C-style syntax, use D-style
    syntax `int[5] vowels`

    /tmp/tmpc023df75.d(22): Deprecation: instead of C-style syntax, use D-style syntax
    `int[5] counts`

    /tmp/tmpc023df75.d(23): Deprecation: instead of C-style syntax, use D-style syntax
    `int[5] counts2`

    /tmp/tmpc023df75.d(19): Error: no property `toUpper` for type `string`

    /tmp/tmpc023df75.d(21): Error: a struct is not a valid initializer for a `int[5]`

    /tmp/tmpc023df75.d(22): Error: a struct is not a valid initializer for a `int[5]`

    /tmp/tmpc023df75.d(23): Error: a struct is not a valid initializer for a `int[5]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc023df75.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string out = \"\";\n    char tmp;\n    foreach(char c; message)\n \
    \   {\n        if(isLetter(c)) {\n            tmp = c;\n            c = toLower(c);\n\
    \            if(c == 'a') c = 'c';\n            else if(c == 'e') c = 'g';\n \
    \           else if(c == 'i') c = 'k';\n            else if(c == 'o') c = 'q';\n\
    \            else if(c == 'u') c = 'y';\n            else c += 2;\n          \
    \  out ~= isUpper(tmp) ? toUpper(c) : c;\n        }\n        else out ~= c;\n\
    \    }\n    return out;\n}\nunittest\n{\n    alias candidate = encode;\n\n   \
    \ assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\")\
    \ == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3p9nwx5s.d(19): Error: found `out` when expecting `;` following
    statement

    /tmp/tmp3p9nwx5s.d(19): Error: found `=` instead of statement

    /tmp/tmp3p9nwx5s.d(32): Error: found `out` instead of statement

    /tmp/tmp3p9nwx5s.d(34): Error: found `out` instead of statement

    /tmp/tmp3p9nwx5s.d(36): Error: expression expected, not `out`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3p9nwx5s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    // YOUR CODE HERE\n    string ret = \"\";\n    for(int i = 0; i < message.length;\
    \ i++)\n    {\n        ret ~= message[i].toLowerCase;\n    }\n    for(int i =\
    \ 0; i < ret.length; i++)\n    {\n        if(ret[i] == ' ')\n        {\n     \
    \       ret[i] = ' ';\n        }\n        else if(ret[i] == 'a')\n        {\n\
    \            ret[i] = 'c';\n        }\n        else if(ret[i] == 'e')\n      \
    \  {\n            ret[i] = 'g';\n        }\n        else if(ret[i] == 'i')\n \
    \       {\n            ret[i] = 'k';\n        }\n        else if(ret[i] == 'o')\n\
    \        {\n            ret[i] = 'q';\n        }\n        else if(ret[i] == 'u')\n\
    \        {\n            ret[i] = 's';\n        }\n        else if(ret[i] >= 'b'\
    \ && ret[i] <= 'z')\n        {\n            ret[i] = ret[i] + 2;\n        }\n\
    \    }\n    for(int i = 0; i < message.length; i++)\n    {\n        if(message[i]\
    \ >= 'a' && message[i] <= 'z')\n        {\n            ret[i] = ret[i].toUpperCase;\n\
    \        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfph9aet4.d(23): Error: no property `toLowerCase` for type `immutable(char)`

    /tmp/tmpfph9aet4.d(29): Error: cannot modify `immutable` expression `ret[cast(ulong)i]`

    /tmp/tmpfph9aet4.d(33): Error: cannot modify `immutable` expression `ret[cast(ulong)i]`

    /tmp/tmpfph9aet4.d(37): Error: cannot modify `immutable` expression `ret[cast(ulong)i]`

    /tmp/tmpfph9aet4.d(41): Error: cannot modify `immutable` expression `ret[cast(ulong)i]`

    /tmp/tmpfph9aet4.d(45): Error: cannot modify `immutable` expression `ret[cast(ulong)i]`

    /tmp/tmpfph9aet4.d(49): Error: cannot modify `immutable` expression `ret[cast(ulong)i]`

    /tmp/tmpfph9aet4.d(53): Error: cannot modify `immutable` expression `ret[cast(ulong)i]`

    /tmp/tmpfph9aet4.d(60): Error: no property `toUpperCase` for type `immutable(char)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfph9aet4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    // Initilize the output\n    string output = \"\";\n    // Iterate\
    \ through each character in the message\n    foreach(i, char c; message)\n   \
    \ {\n        // Get the letter at the current position\n        char letter =\
    \ toLower(c);\n        // Check if it is a letter\n        if(isLetter(letter))\n\
    \        {\n            // Check if it is a vowel\n            if(letter == 'a'\
    \ || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u')\n     \
    \       {\n                // Increment the letter forward 2 letters\n       \
    \         letter = (toLower(c) + 2) % 'z';\n                // Check if we have\
    \ reached the end of the alphabet\n                if(letter < 'a')\n        \
    \        {\n                    // Set the letter to the beginning of the alphabet\n\
    \                    letter = 'a';\n                }\n            }\n       \
    \     // Check if the current letter is upper case\n            if(isUpper(c))\n\
    \            {\n                // Set the letter to upper case\n            \
    \    letter = toUpper(letter);\n            }\n        }\n        // Add the current\
    \ letter to the output\n        output ~= letter;\n    }\n    // Return the encoded\
    \ message\n    return output;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw8rlt6c1.d(25): Error: undefined identifier `toLower`

    /tmp/tmpw8rlt6c1.d(27): Error: undefined identifier `isLetter`

    /tmp/tmpw8rlt6c1.d(33): Error: undefined identifier `toLower`

    /tmp/tmpw8rlt6c1.d(42): Error: undefined identifier `isUpper`

    /tmp/tmpw8rlt6c1.d(45): Error: undefined identifier `toUpper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw8rlt6c1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    // YOUR CODE HERE\n    return \"\";\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpturc7n_1.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f0d]

    ??:? void tmpturc7n_1.__unittest_L22_C1() [0x427ab2]

    ??:? void tmpturc7n_1.__modtest() [0x427c90]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aac6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbdd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43008c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb69]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa9d]

    ??:? runModuleUnitTests [0x42b98d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42835c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    string vowels = \"aeiouAEIOU\";\n    foreach(ch;\
    \ message)\n    {\n        if(isLetter(ch))\n        {\n            result ~=\
    \ toLower(ch);\n            if(ch == toUpper(ch))\n            {\n           \
    \     result[$-1] = toUpper(result[$-1]);\n            }\n        }\n        else\n\
    \        {\n            result ~= ch;\n        }\n        if(ch in vowels)\n \
    \       {\n            if(ch == 'u' || ch == 'U')\n            {\n           \
    \     result[$-1] = 'a';\n            }\n            else\n            {\n   \
    \             result[$-1] = ch + 2;\n            }\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9on3rt_s.d(23): Error: undefined identifier `isLetter`

    /tmp/tmp9on3rt_s.d(25): Error: undefined identifier `toLower`

    /tmp/tmp9on3rt_s.d(26): Error: undefined identifier `toUpper`

    /tmp/tmp9on3rt_s.d(28): Error: undefined identifier `toUpper`

    /tmp/tmp9on3rt_s.d(35): Error: incompatible types for `(ch) in (vowels)`: `immutable(char)`
    and `string`

    /tmp/tmp9on3rt_s.d(39): Error: cannot modify `immutable` expression `result[__dollar
    - 1LU]`

    /tmp/tmp9on3rt_s.d(43): Error: cannot modify `immutable` expression `result[__dollar
    - 1LU]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9on3rt_s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string lower = \"abcdefghijklmnopqrstuvwxyz\";\n    string upper =\
    \ \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    string vowels = \"aeiou\";\n    string\
    \ encoded = \"\";\n    for (int i = 0; i < message.length; i++)\n    {\n     \
    \   int index = lower.find(message[i]);\n        if (index != -1) \n        {\n\
    \            encoded += upper[index];\n        }\n        else \n        {\n \
    \           index = upper.find(message[i]);\n            if (index != -1) \n \
    \           {\n                encoded += lower[index];\n            }\n     \
    \       else \n            {\n                index = vowels.find(message[i]);\n\
    \                if (index != -1) \n                {\n                    encoded\
    \ += vowels[(index + 2) % 5];\n                }\n                else \n    \
    \            {\n                    encoded += message[i];\n                }\n\
    \            }\n        }\n    }\n    return encoded;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnzr8b9th.d(25): Error: no property `find` for type `string`

    /tmp/tmpnzr8b9th.d(28): Error: slice `encoded` is not mutable

    /tmp/tmpnzr8b9th.d(32): Error: no property `find` for type `string`

    /tmp/tmpnzr8b9th.d(35): Error: slice `encoded` is not mutable

    /tmp/tmpnzr8b9th.d(39): Error: no property `find` for type `string`

    /tmp/tmpnzr8b9th.d(42): Error: slice `encoded` is not mutable

    /tmp/tmpnzr8b9th.d(46): Error: slice `encoded` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnzr8b9th.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string encodedMessage = \"\";\n    int distance = 2;\n    char lowercaseLetter;\n\
    \    for (int i = 0; i < message.length; i++) {\n        if (message[i] != \"\
    \ \") {\n            lowercaseLetter = tolower(message[i]);\n            if (lowercaseLetter\
    \ == 'a') {\n                encodedMessage += 'c';\n            } else if (lowercaseLetter\
    \ == 'e') {\n                encodedMessage += 'g';\n            } else if (lowercaseLetter\
    \ == 'i') {\n                encodedMessage += 'k';\n            } else if (lowercaseLetter\
    \ == 'o') {\n                encodedMessage += 'q';\n            } else if (lowercaseLetter\
    \ == 'u') {\n                encodedMessage += 'y';\n            } else if (lowercaseLetter\
    \ == 'y') {\n                encodedMessage += 'a';\n            } else {\n  \
    \              encodedMessage += lowercaseLetter + distance;\n            }\n\
    \        } else {\n            encodedMessage += \" \";\n        }\n    }\n  \
    \  return encodedMessage;\n}\nunittest\n{\n    alias candidate = encode;\n\n \
    \   assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdfgorhgo.d(23): Error: incompatible types for `(message[cast(ulong)i])
    != (" ")`: `immutable(char)` and `string`

    /tmp/tmpdfgorhgo.d(24): Error: undefined identifier `tolower`

    /tmp/tmpdfgorhgo.d(26): Error: slice `encodedMessage` is not mutable

    /tmp/tmpdfgorhgo.d(28): Error: slice `encodedMessage` is not mutable

    /tmp/tmpdfgorhgo.d(30): Error: slice `encodedMessage` is not mutable

    /tmp/tmpdfgorhgo.d(32): Error: slice `encodedMessage` is not mutable

    /tmp/tmpdfgorhgo.d(34): Error: slice `encodedMessage` is not mutable

    /tmp/tmpdfgorhgo.d(36): Error: slice `encodedMessage` is not mutable

    /tmp/tmpdfgorhgo.d(38): Error: incompatible types for `(encodedMessage) += (cast(int)lowercaseLetter
    + distance)`: `string` and `int`

    /tmp/tmpdfgorhgo.d(41): Error: slice `encodedMessage` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdfgorhgo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    char c;\n    foreach(c; message)\n    {\n     \
    \   if(c.isUpper)\n            result ~= c.toLower;\n        else if(c.isLower)\n\
    \            result ~= c.toUpper;\n        else\n            result ~= c;\n  \
    \  }\n    enum vowels = ['a', 'e', 'i', 'o', 'u'];\n    int index;\n    foreach(c;\
    \ result)\n    {\n        if((index = vowels.find(c)) >= 0)\n        {\n     \
    \       index = (index + 2) % vowels.length;\n            result = result.replace(c,\
    \ vowels[index]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpour3ndxz.d(21): Error: variable `c` is shadowing variable `tmpour3ndxz.encode.c`

    /tmp/tmpour3ndxz.d(23): Error: no property `isUpper` for type `immutable(char)`

    /tmp/tmpour3ndxz.d(24): Error: no property `toLower` for type `immutable(char)`

    /tmp/tmpour3ndxz.d(25): Error: no property `isLower` for type `immutable(char)`

    /tmp/tmpour3ndxz.d(26): Error: no property `toUpper` for type `immutable(char)`

    /tmp/tmpour3ndxz.d(32): Error: variable `c` is shadowing variable `tmpour3ndxz.encode.c`

    /tmp/tmpour3ndxz.d(34): Error: no property `find` for type `char[]`

    /tmp/tmpour3ndxz.d(37): Error: no property `replace` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpour3ndxz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{ \n    string a = \"abcdefghijklmnopqrstuvwxyz\";\n    string b = \"cdefghijklmnopqrstuvwxyzab\"\
    ;\n    string A = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    string B = \"CDEFGHIJKLMNOPQRSTUVWXYZAB\"\
    ;\n    string temp;\n    string result;\n    int len = message.length;\n    for\
    \ (int i = 0; i < len; i++)\n    {\n        if (message[i] >= 97 && message[i]\
    \ <= 122)\n        {\n            temp = message[i..i+1];\n            result\
    \ ~= A[a.find(temp)..A.length];\n        }\n        else if (message[i] >= 65\
    \ && message[i] <= 90)\n        {\n            temp = message[i..i+1];\n     \
    \       result ~= B[A.find(temp)..B.length];\n        }\n        else\n      \
    \  {\n            result ~= message[i..i+1];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy3_7i0pm.d(25): Error: cannot implicitly convert expression `message.length`
    of type `ulong` to `int`

    /tmp/tmpy3_7i0pm.d(31): Error: no property `find` for type `string`

    /tmp/tmpy3_7i0pm.d(36): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy3_7i0pm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    for (int i = 0; i < message.length; i++)\n\
    \    {\n        if (isUpperCase(message[i]))\n        {\n            if (message[i]\
    \ >= 'A' && message[i] <= 'E')\n            {\n                if (message[i]\
    \ == 'A')\n                {\n                    result += 'C';\n           \
    \     }\n                else if (message[i] == 'B')\n                {\n    \
    \                result += 'D';\n                }\n                else if (message[i]\
    \ == 'C')\n                {\n                    result += 'E';\n           \
    \     }\n                else if (message[i] == 'D')\n                {\n    \
    \                result += 'F';\n                }\n                else if (message[i]\
    \ == 'E')\n                {\n                    result += 'G';\n           \
    \     }\n            }\n            else if (message[i] >= 'F' && message[i] <=\
    \ 'J')\n            {\n                if (message[i] == 'F')\n              \
    \  {\n                    result += 'H';\n                }\n                else\
    \ if (message[i] == 'G')\n                {\n                    result += 'I';\n\
    \                }\n                else if (message[i] == 'H')\n            \
    \    {\n                    result += 'J';\n                }\n              \
    \  else if (message[i] == 'I')\n                {\n                    result\
    \ += 'K';\n                }\n                else if (message[i] == 'J')\n  \
    \              {\n                    result += 'L';\n                }\n    \
    \        }\n            else if (message[i] >= 'K' && message[i] <= 'O')\n   \
    \         {\n                if (message[i] == 'K')\n                {\n     \
    \               result += 'M';\n                }\n                else if (message[i]\
    \ == 'L')\n                {\n                    result += 'N';\n           \
    \     }\n                else if (message[i] == 'M')\n                {\n    \
    \                result += 'O';\n                }\n                else if (message[i]\
    \ == 'N')\n                {\n                    result += 'P';\n           \
    \     }\n                else if (message[i] == 'O')\n                {\n    \
    \                result += 'Q';\n               \nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr4qxreyz.d(92): Error: found `unittest` instead of statement

    /tmp/tmpr4qxreyz.d(102): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpr4qxreyz.d(102): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpr4qxreyz.d(102): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpr4qxreyz.d(102): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr4qxreyz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n\tint shift = 2;\n\tmessage = toUpper(message);\n\tint len = message.length;\n\
    \tstring encoded = \"\";\n\tfor (int i = 0; i < len; i++)\n\t{\n\t\tencoded ~=\
    \ (char) (message[i] + shift);\n\t\tif (message[i] == 'U')\n\t\t{\n\t\t\tencoded[i]\
    \ = 'W';\n\t\t}\n\t\telse if (message[i] == 'Z')\n\t\t{\n\t\t\tencoded[i] = 'B';\n\
    \t\t}\n\t}\n\treturn encoded;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcp1s6xjn.d(25): Error: C style cast illegal, use `cast(char)(message[i]
    + shift)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcp1s6xjn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string str = \"\";\n    foreach(char ch; message) {\n        if (ch\
    \ >= 'a' && ch <= 'z') {\n            if (ch == 'a') str ~= 'c';\n           \
    \ else if (ch == 'e') str ~= 'g';\n            else if (ch == 'i') str ~= 'k';\n\
    \            else if (ch == 'o') str ~= 'q';\n            else if (ch == 'u')\
    \ str ~= 'y';\n            else str ~= ch+2;\n        }\n        else if (ch >=\
    \ 'A' && ch <= 'Z') {\n            if (ch == 'A') str ~= 'C';\n            else\
    \ if (ch == 'E') str ~= 'G';\n            else if (ch == 'I') str ~= 'K';\n  \
    \          else if (ch == 'O') str ~= 'Q';\n            else if (ch == 'U') str\
    \ ~= 'Y';\n            else str ~= ch+2;\n        }\n        else str ~= ch;\n\
    \    }\n    return str;\n}\nunittest\n{\n    alias candidate = encode;\n\n   \
    \ assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\")\
    \ == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpoqpg5tvd.d(45): unittest failure

    ----------------

    ??:? _d_unittestp [0x42836d]

    ??:? void tmpoqpg5tvd.__unittest_L41_C1() [0x427f0e]

    ??:? void tmpoqpg5tvd.__modtest() [0x4280ec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ccf7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bc06]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4305dd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430a8c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430569]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bbdd]

    ??:? runModuleUnitTests [0x42cacd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string ret = \"\";\n    foreach(char c; message)\n    {\n        if(c\
    \ >= 'a' && c <= 'z')\n        {\n            ret ~= (c - 32);\n        }\n  \
    \      else if(c >= 'A' && c <= 'Z')\n        {\n            ret ~= (c + 32);\n\
    \        }\n        else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c\
    \ == 'U')\n        {\n            ret ~= (c + 2);\n        }\n        else if(c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n        {\n       \
    \     ret ~= (c - 22);\n        }\n        else\n        {\n            ret ~=\
    \ c;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate =\
    \ encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu2f7z8dv.d(49): unittest failure

    ----------------

    ??:? _d_unittestp [0x42810d]

    ??:? void tmpu2f7z8dv.__unittest_L45_C1() [0x427cb2]

    ??:? void tmpu2f7z8dv.__modtest() [0x427e90]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ca97]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b9a6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43037d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43082c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430309]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b97d]

    ??:? runModuleUnitTests [0x42c86d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42855c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string retStr;\n    foreach(ch; message)\n    {\n        if(isAlpha(ch))\n\
    \        {\n            if(ch >= 'a' && ch <= 'z')\n            {\n          \
    \      ch = ch + ('A' - 'a');\n            }\n            else if(ch >= 'A' &&\
    \ ch <= 'Z')\n            {\n                ch = ch + ('a' - 'A');\n        \
    \    }\n            switch(ch)\n            {\n                case 'a':\n   \
    \                 ch = 'c';\n                    break;\n                case\
    \ 'e':\n                    ch = 'g';\n                    break;\n          \
    \      case 'i':\n                    ch = 'k';\n                    break;\n\
    \                case 'o':\n                    ch = 'q';\n                  \
    \  break;\n                case 'u':\n                    ch = 's';\n        \
    \            break;\n                case 'A':\n                    ch = 'C';\n\
    \                    break;\n                case 'E':\n                    ch\
    \ = 'G';\n                    break;\n                case 'I':\n            \
    \        ch = 'K';\n                    break;\n                case 'O':\n  \
    \                  ch = 'Q';\n                    break;\n                case\
    \ 'U':\n                    ch = 'S';\n                    break;\n          \
    \  }\n        }\n        retStr ~= ch;\n    }\n    return retStr;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzbciqwq4.d(22): Error: undefined identifier `isAlpha`

    /tmp/tmpzbciqwq4.d(26): Error: cannot modify `immutable` expression `ch`

    /tmp/tmpzbciqwq4.d(30): Error: cannot modify `immutable` expression `ch`

    /tmp/tmpzbciqwq4.d(35): Error: cannot modify `immutable` expression `ch`

    /tmp/tmpzbciqwq4.d(38): Error: cannot modify `immutable` expression `ch`

    /tmp/tmpzbciqwq4.d(41): Error: cannot modify `immutable` expression `ch`

    /tmp/tmpzbciqwq4.d(44): Error: cannot modify `immutable` expression `ch`

    /tmp/tmpzbciqwq4.d(47): Error: cannot modify `immutable` expression `ch`

    /tmp/tmpzbciqwq4.d(50): Error: cannot modify `immutable` expression `ch`

    /tmp/tmpzbciqwq4.d(53): Error: cannot modify `immutable` expression `ch`

    /tmp/tmpzbciqwq4.d(56): Error: cannot modify `immutable` expression `ch`

    /tmp/tmpzbciqwq4.d(59): Error: cannot modify `immutable` expression `ch`

    /tmp/tmpzbciqwq4.d(62): Error: cannot modify `immutable` expression `ch`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzbciqwq4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    // TODO: implement the function\n    import std.string;\n    import\
    \ std.range;\n    auto letters = message.map!((c) {\n        if (c >= 'a' && c\
    \ <= 'z')\n            return cast(dchar)((c - 'a' + 2) % 26 + 'a');\n       \
    \ else if (c >= 'A' && c <= 'Z')\n            return cast(dchar)((c - 'A' + 2)\
    \ % 26 + 'A');\n        else\n            return c;\n    });\n    return letters.format(\"\
    %s\");\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0qaijqu5.d(22): Error: no property `map` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0qaijqu5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n    char[] letters = toLowerArray(message);\n\
    \    int len = letters.length;\n    foreach(int i, char c; letters) {\n      \
    \  if(i < len) {\n            if(c.isUpper) {\n                letters[i] = toLower(c);\n\
    \            } else if(c.isLower) {\n                if(c == 'z') {\n        \
    \            letters[i] = 'b';\n                } else if(c == 'x') {\n      \
    \              letters[i] = 'a';\n                } else {\n                 \
    \   letters[i] = toUpper(c);\n                }\n            } else if(c.isAlpha)\
    \ {\n                if(vowels.canFind(c)) {\n                    int idx = vowels.indexOf(c);\n\
    \                    if(idx + 2 == vowels.length) {\n                        letters[i]\
    \ = vowels[0];\n                    } else {\n                        letters[i]\
    \ = vowels[idx + 2];\n                    }\n                }\n            }\n\
    \        }\n    }\n    return letters.join();\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpknuw7c5u.d(19): Error: a struct is not a valid initializer for
    a `char[]`

    /tmp/tmpknuw7c5u.d(20): Error: undefined identifier `toLowerArray`

    /tmp/tmpknuw7c5u.d(21): Error: cannot implicitly convert expression `letters.length`
    of type `ulong` to `int`

    /tmp/tmpknuw7c5u.d(24): Error: no property `isUpper` for type `char`

    /tmp/tmpknuw7c5u.d(25): Error: undefined identifier `toLower`

    /tmp/tmpknuw7c5u.d(26): Error: no property `isLower` for type `char`

    /tmp/tmpknuw7c5u.d(32): Error: undefined identifier `toUpper`

    /tmp/tmpknuw7c5u.d(34): Error: no property `isAlpha` for type `char`

    /tmp/tmpknuw7c5u.d(35): Error: no property `canFind` for type `char[]`

    /tmp/tmpknuw7c5u.d(36): Error: no property `indexOf` for type `char[]`

    /tmp/tmpknuw7c5u.d(46): Error: no property `join` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpknuw7c5u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    auto result = message.dup;\n    foreach(int i, immutable c; result)\n\
    \    {\n        if(isAlpha(c))\n        {\n            if(isLower(c))\n      \
    \      {\n                result[i] = toUpper(c);\n            }\n           \
    \ else\n            {\n                result[i] = toLower(c);\n            }\n\
    \        }\n    }\n    foreach(int i, immutable c; result)\n    {\n        if(c\
    \ == 'a' || c == 'A')\n        {\n            result[i] = 'C';\n        }\n  \
    \      else if(c == 'e' || c == 'E')\n        {\n            result[i] = 'G';\n\
    \        }\n        else if(c == 'i' || c == 'I')\n        {\n            result[i]\
    \ = 'K';\n        }\n        else if(c == 'o' || c == 'O')\n        {\n      \
    \      result[i] = 'M';\n        }\n        else if(c == 'u' || c == 'U')\n  \
    \      {\n            result[i] = 'S';\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    assert(encode(\"test\") == \"TGST\");\n    assert(encode(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp43rvj0bf.d(22): Error: undefined identifier `isAlpha`

    /tmp/tmp43rvj0bf.d(24): Error: undefined identifier `isLower`

    /tmp/tmp43rvj0bf.d(26): Error: undefined identifier `toUpper`

    /tmp/tmp43rvj0bf.d(30): Error: undefined identifier `toLower`

    /tmp/tmp43rvj0bf.d(57): Error: cannot implicitly convert expression `result` of
    type `char[]` to `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp43rvj0bf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    \n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8g9dekat.d(17): Error: function `tmp8g9dekat.encode` has no `return`
    statement, but is expected to return a value of type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8g9dekat.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163111
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string ret;\n    char c;\n    ret.reserve(message.length);\n    for\
    \ (size_t i = 0; i < message.length; i++)\n    {\n        c = message[i];\n  \
    \      if (c >= 'a' && c <= 'z')\n        {\n            c = 'A' + (c - 'a');\n\
    \        }\n        else if (c >= 'A' && c <= 'Z')\n        {\n            c =\
    \ 'a' + (c - 'A');\n        }\n        if (c == 'A' || c == 'E' || c == 'I' ||\
    \ c == 'O' || c == 'U')\n        {\n            c = 'A' + ((c - 'A' + 2) % 5);\n\
    \        }\n        else if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u')\n        {\n            c = 'a' + ((c - 'a' + 2) % 5);\n        }\n\
    \        ret ~= c;\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgz1xc2b1.d(27): Error: cannot implicitly convert expression `65
    + (cast(int)c - 97)` of type `int` to `char`

    /tmp/tmpgz1xc2b1.d(31): Error: cannot implicitly convert expression `97 + (cast(int)c
    - 65)` of type `int` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgz1xc2b1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    // Use a string literal for alphabet to\
    \ make it \n    // easier to add letters\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    foreach(char c; message) {\n        if (isalpha(c)) {\n            int\
    \ offset = isupper(c) ? 'A' : 'a';\n            char d = cast(char)(c + (isupper(c)\
    \ ? 32 : -32));\n            int pos = 0;\n            while (d != alphabet[pos])\
    \ {\n                pos++;\n            }\n            if (c == 'A' || c == 'E'\
    \ || c == 'I' || c == 'O' || c == 'U') {\n                pos += 2;\n        \
    \    }\n            if (pos >= alphabet.length) {\n                pos -= alphabet.length;\n\
    \            }\n            result ~= cast(char)(offset + pos);\n        } else\
    \ {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpilyf012z.d(24): Error: undefined identifier `isalpha`

    /tmp/tmpilyf012z.d(25): Error: undefined identifier `isupper`

    /tmp/tmpilyf012z.d(26): Error: undefined identifier `isupper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpilyf012z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    message = toLower(message);\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3a8jnlea.d(20): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3a8jnlea.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    enum vowel : char { a, e, i, o, u };\n    string to_return = \"\";\n\
    \    foreach(ch; message)\n    {\n        ch = tolower(ch);\n        if (isalpha(ch))\n\
    \        {\n            switch(cast(vowel)ch)\n            {\n               \
    \ case vowel.a: to_return ~= toupper('c'); break;\n                case vowel.e:\
    \ to_return ~= toupper('f'); break;\n                case vowel.i: to_return ~=\
    \ toupper('j'); break;\n                case vowel.o: to_return ~= toupper('s');\
    \ break;\n                case vowel.u: to_return ~= toupper('x'); break;\n  \
    \              default: to_return ~= toupper(ch); break;\n            }\n    \
    \    }\n        else\n        {\n            to_return ~= toupper(ch);\n     \
    \   }\n    }\n    return to_return;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpepkgj8e2.d(19): Deprecation: use `{ }` for an empty statement,
    not `;`

    /tmp/tmpepkgj8e2.d(23): Error: undefined identifier `tolower`

    /tmp/tmpepkgj8e2.d(24): Error: undefined identifier `isalpha`

    /tmp/tmpepkgj8e2.d(28): Error: undefined identifier `toupper`

    /tmp/tmpepkgj8e2.d(29): Error: undefined identifier `toupper`

    /tmp/tmpepkgj8e2.d(30): Error: undefined identifier `toupper`

    /tmp/tmpepkgj8e2.d(31): Error: undefined identifier `toupper`

    /tmp/tmpepkgj8e2.d(32): Error: undefined identifier `toupper`

    /tmp/tmpepkgj8e2.d(33): Error: undefined identifier `toupper`

    /tmp/tmpepkgj8e2.d(38): Error: undefined identifier `toupper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpepkgj8e2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    char[] message_array = message.toUpperArray();\n    string result =\
    \ \"\";\n    char[] vowels = ['A', 'E', 'I', 'O', 'U'];\n    foreach(char i; message_array)\n\
    \    {\n        foreach(char j; vowels)\n        {\n            if(i == j)\n \
    \           {\n                if(j == 'U')\n                {\n             \
    \       result ~= 'A';\n                }\n                else\n            \
    \    {\n                    result ~= char.init(i+2);\n                }\n   \
    \         }\n        }\n        if(!result.canFind(i))\n        {\n          \
    \  result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpedzou5j_.d(19): Error: no property `toUpperArray` for type `string`

    /tmp/tmpedzou5j_.d(34): Error: cannot pass type `char` as a function argument

    /tmp/tmpedzou5j_.d(38): Error: no property `canFind` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpedzou5j_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message)\n    {\n      \
    \  if(c.isUpper)\n            result ~= toLower(c);\n        else if(c.isLower)\n\
    \            result ~= toUpper(c);\n        else\n            result ~= c;\n \
    \   }\n    foreach(char c; result)\n    {\n        int i = toLower(c);\n     \
    \   if(i == 'a')\n            result[$-1] = 'c';\n        else if(i == 'e')\n\
    \            result[$-1] = 'g';\n        else if(i == 'i')\n            result[$-1]\
    \ = 'k';\n        else if(i == 'o')\n            result[$-1] = 'm';\n        else\
    \ if(i == 'u')\n            result[$-1] = 'o';\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") ==\
    \ \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy1dmkvns.d(22): Error: no property `isUpper` for type `char`

    /tmp/tmpy1dmkvns.d(23): Error: undefined identifier `toLower`

    /tmp/tmpy1dmkvns.d(24): Error: no property `isLower` for type `char`

    /tmp/tmpy1dmkvns.d(25): Error: undefined identifier `toUpper`

    /tmp/tmpy1dmkvns.d(31): Error: undefined identifier `toLower`

    /tmp/tmpy1dmkvns.d(33): Error: cannot modify `immutable` expression `result[__dollar
    - 1LU]`

    /tmp/tmpy1dmkvns.d(35): Error: cannot modify `immutable` expression `result[__dollar
    - 1LU]`

    /tmp/tmpy1dmkvns.d(37): Error: cannot modify `immutable` expression `result[__dollar
    - 1LU]`

    /tmp/tmpy1dmkvns.d(39): Error: cannot modify `immutable` expression `result[__dollar
    - 1LU]`

    /tmp/tmpy1dmkvns.d(41): Error: cannot modify `immutable` expression `result[__dollar
    - 1LU]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy1dmkvns.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string decode = \"\";\n    foreach(char ch; message)\n    {\n     \
    \   switch(tolower(ch))\n        {\n            case 'a': \n                decode\
    \ ~= 'c';\n                break;\n            case 'e': \n                decode\
    \ ~= 'g';\n                break;\n            case 'i': \n                decode\
    \ ~= 'k';\n                break;\n            case 'o': \n                decode\
    \ ~= 's';\n                break;\n            case 'u': \n                decode\
    \ ~= 'y';\n                break;\n            default:\n                if (isalpha(ch))\n\
    \                    decode ~= (isupper(ch) ? tolower(ch) : toupper(ch));\n  \
    \              else\n                    decode ~= ch;\n        }\n    }\n   \
    \ return decode;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2en8dcvh.d(22): Error: undefined identifier `tolower`

    /tmp/tmp2en8dcvh.d(40): Error: undefined identifier `isalpha`

    /tmp/tmp2en8dcvh.d(41): Error: undefined identifier `isupper`

    /tmp/tmp2en8dcvh.d(41): Error: undefined identifier `tolower`

    /tmp/tmp2en8dcvh.d(41): Error: undefined identifier `toupper`

    '
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    message = toUpper(message);\n    return message;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4npw69yk.d(19): Error: undefined identifier `toUpper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4npw69yk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        switch(c)\n\
    \        {\n            case 'a':\n            case 'A':\n                result\
    \ ~= 'C';\n                break;\n            case 'e':\n            case 'E':\n\
    \                result ~= 'G';\n                break;\n            case 'i':\n\
    \            case 'I':\n                result ~= 'K';\n                break;\n\
    \            case 'o':\n            case 'O':\n                result ~= 'M';\n\
    \                break;\n            case 'u':\n            case 'U':\n      \
    \          result ~= 'Q';\n                break;\n            default:\n    \
    \            result ~= toLower(c) == c ? toUpper(c) : toLower(c);\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n\
    \    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkmp36zbg.d(45): Error: undefined identifier `toLower`

    /tmp/tmpkmp36zbg.d(45): Error: undefined identifier `toUpper`

    /tmp/tmpkmp36zbg.d(45): Error: undefined identifier `toLower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkmp36zbg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    for (size_t i = 0; i < message.length();\
    \ i++)\n    {\n        result += message[i];\n        if (isalpha(message[i]))\n\
    \        {\n            result[i] = islower(message[i]) ? 'a' : 'A';\n       \
    \     result[i] += (char)mod(((message[i] - result[i]) + 2), 26);\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n\
    \    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp01tnstgv.d(26): Error: C style cast illegal, use `cast(char)mod(message[i]
    - result[i] + 2, 26)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp01tnstgv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string encoded;\n    foreach(char c; message)\n    {\n        auto\
    \ a = tolower(c);\n        if (a == 'a')\n            encoded ~= 'c';\n      \
    \  else if (a == 'e')\n            encoded ~= 'g';\n        else if (a == 'i')\n\
    \            encoded ~= 'k';\n        else if (a == 'o')\n            encoded\
    \ ~= 'q';\n        else if (a == 'u')\n            encoded ~= 's';\n        else\
    \ if (a == 'y')\n            encoded ~= 'a';\n        else if (isalpha(a))\n \
    \           encoded ~= (char)toupper(a);\n        else\n            encoded ~=\
    \ a;\n    }\n    return encoded;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpariexqhp.d(36): Error: C style cast illegal, use `cast(char)toupper(a)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpariexqhp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{ \n    string vowels = \"aeiou\"; \n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ; \n    string output = \"\"; \n    int i = 0; \n    while (i < message.length)\
    \ \n    { \n        if (message[i] >= 'a' && message[i] <= 'z') \n        { \n\
    \            output += toupper(message[i]); \n        } \n        else if (message[i]\
    \ >= 'A' && message[i] <= 'Z') \n        { \n            output += tolower(message[i]);\
    \ \n        } \n        else \n        { \n            output += message[i]; \n\
    \        } \n        i++; \n    } \n    string encoded = \"\"; \n    i = 0; \n\
    \    while (i < output.length) \n    { \n        char c = output[i]; \n      \
    \  int j = 0; \n        while (j < alphabet.length) \n        { \n           \
    \ if (c == alphabet[j]) \n            { \n                int k = 0; \n      \
    \          while (k < vowels.length) \n                { \n                  \
    \  if (c == vowels[k]) \n                    { \n                        encoded\
    \ += toupper(alphabet[mod(j + 2, alphabet.length)]); \n                      \
    \  break; \n                    } \n                    k++; \n              \
    \  } \n                if (k == vowels.length) \n                { \n        \
    \            encoded += output[i]; \n                } \n                break;\
    \ \n            } \n            j++; \n        } \n        i++; \n    } \n   \
    \ return encoded; \n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm7xmb4oe.d(27): Error: undefined identifier `toupper`

    /tmp/tmpm7xmb4oe.d(31): Error: undefined identifier `tolower`

    /tmp/tmpm7xmb4oe.d(35): Error: slice `output` is not mutable

    /tmp/tmpm7xmb4oe.d(54): Error: undefined identifier `toupper`

    /tmp/tmpm7xmb4oe.d(61): Error: slice `encoded` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm7xmb4oe.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    message = toLower(message);\n\
    \    string result = \"\";\n    foreach(immutable ch; message)\n    {\n      \
    \  if (ch == 'a')\n            result ~= 'c';\n        else if (ch == 'e')\n \
    \           result ~= 'g';\n        else if (ch == 'i')\n            result ~=\
    \ 'k';\n        else if (ch == 'o')\n            result ~= 'q';\n        else\
    \ if (ch == 'u')\n            result ~= 'y';\n        else\n            result\
    \ ~= ch;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2_lcgv8y.d(20): Error: undefined identifier `toLower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2_lcgv8y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string encodedMessage = \"\";\n    const string vowels = \"aeiouAEIOU\"\
    ;\n    const string alphabet = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n    foreach(character; message)\n    {\n        int posInVowels = vowels.indexOf(character);\n\
    \        int posInAlphabet = alphabet.indexOf(character);\n        if(posInVowels\
    \ >= 0)\n        {\n            int changedIndex = posInVowels + 2;\n        \
    \    if(changedIndex >= vowels.length) changedIndex = mod(changedIndex, vowels.length);\n\
    \            encodedMessage ~= vowels[changedIndex];\n        }\n        else\
    \ if(posInAlphabet >= 0)\n        {\n            int changedIndex = posInAlphabet\
    \ + 2;\n            if(changedIndex >= alphabet.length) changedIndex = mod(changedIndex,\
    \ alphabet.length);\n            encodedMessage ~= to!string(alphabet[changedIndex]);\n\
    \        }\n        else encodedMessage ~= character;\n    }\n    return encodedMessage;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp7xde48v.d(24): Error: no property `indexOf` for type `const(string)`

    /tmp/tmpp7xde48v.d(25): Error: no property `indexOf` for type `const(string)`

    /tmp/tmpp7xde48v.d(29): Error: undefined identifier `mod`, did you mean function
    `fmod`?

    /tmp/tmpp7xde48v.d(35): Error: undefined identifier `mod`, did you mean function
    `fmod`?

    /tmp/tmpp7xde48v.d(36): Error: template instance `to!string` template `to` is
    not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp7xde48v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string encoded = \"\";\n    string vowels = \"aeiou\";\n    string\
    \ capVowels = \"AEIOU\";\n    int v = 0;\n    foreach(char c; message)\n    {\n\
    \        v = indexOf(capVowels, c);\n        if(v >= 0)\n        {\n         \
    \   if(v == 4)\n                encoded ~= capVowels[0];\n            else\n \
    \               encoded ~= capVowels[v+2];\n        }\n        else\n        {\n\
    \            v = indexOf(vowels, c);\n            if(v >= 0)\n            {\n\
    \                if(v == 4)\n                    encoded ~= vowels[0];\n     \
    \           else\n                    encoded ~= vowels[v+2];\n            }\n\
    \            else\n            {\n                if(isupper(c))\n           \
    \         encoded ~= tolower(c);\n                else\n                    encoded\
    \ ~= toupper(c);\n            }\n        }\n    }\n    return encoded;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplnmave8m.d(25): Error: undefined identifier `indexOf`

    /tmp/tmplnmave8m.d(35): Error: undefined identifier `indexOf`

    /tmp/tmplnmave8m.d(45): Error: undefined identifier `isupper`

    /tmp/tmplnmave8m.d(46): Error: undefined identifier `tolower`

    /tmp/tmplnmave8m.d(48): Error: undefined identifier `toupper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplnmave8m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    auto decoded = message;\n    auto i = 0;\n    foreach(c; decoded)\n\
    \    {\n        if(c >= 'a' && c <= 'z')\n        {\n            decoded[i] =\
    \ 'A' + (c - 'a');\n        }\n        else if(c >= 'A' && c <= 'Z')\n       \
    \ {\n            decoded[i] = 'a' + (c - 'A');\n        }\n        else if(c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n        {\n          \
    \  decoded[i] = char((c + 2) % (char.max - 'a') + 'a');\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n  \
    \          decoded[i] = char((c + 2) % (char.max - 'A') + 'A');\n        }\n \
    \       ++i;\n    }\n    return decoded;\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqrxzy7zx.d(25): Error: cannot modify `immutable` expression `decoded[cast(ulong)i]`

    /tmp/tmpqrxzy7zx.d(29): Error: cannot modify `immutable` expression `decoded[cast(ulong)i]`

    /tmp/tmpqrxzy7zx.d(33): Error: cannot modify `immutable` expression `decoded[cast(ulong)i]`

    /tmp/tmpqrxzy7zx.d(37): Error: cannot modify `immutable` expression `decoded[cast(ulong)i]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqrxzy7zx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n\tstring result;\n\tforeach(i, letter; message) {\n\t\tif (islower(letter))\n\
    \t\t\tresult ~= toupper(letter);\n\t\telse if (isupper(letter))\n\t\t\tresult\
    \ ~= tolower(letter);\n\t\telse\n\t\t\tresult ~= letter;\n\t\t\n\t\tif (letter\
    \ == 'a')\n\t\t\tresult ~= 'c';\n\t\telse if (letter == 'e')\n\t\t\tresult ~=\
    \ 'g';\n\t\telse if (letter == 'i')\n\t\t\tresult ~= 'k';\n\t\telse if (letter\
    \ == 'o')\n\t\t\tresult ~= 'q';\n\t\telse if (letter == 'u')\n\t\t\tresult ~=\
    \ 'y';\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvmu2a7sy.d(21): Error: undefined identifier `islower`

    /tmp/tmpvmu2a7sy.d(22): Error: undefined identifier `toupper`

    /tmp/tmpvmu2a7sy.d(23): Error: undefined identifier `isupper`

    /tmp/tmpvmu2a7sy.d(24): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvmu2a7sy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    auto cmp = [](char x) { return tolower(x);\
    \ };\n    for (char ch : message)\n    {\n        if (cmp(ch) == 'a') result ~=\
    \ 'c';\n        else if (cmp(ch) == 'e') result ~= 'g';\n        else if (cmp(ch)\
    \ == 'i') result ~= 'k';\n        else if (cmp(ch) == 'o') result ~= 'q';\n  \
    \      else if (cmp(ch) == 'u') result ~= 's';\n        else if (cmp(ch) == 'y')\
    \ result ~= 'a';\n        else result ~= islower(ch) ? toupper(ch) : tolower(ch);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n\
    \    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7lf52vcz.d(20): Error: found `x` when expecting `.` following char

    /tmp/tmp7lf52vcz.d(20): Error: found `)` when expecting identifier following `char`.

    /tmp/tmp7lf52vcz.d(20): Error: found `{` when expecting `,`

    /tmp/tmp7lf52vcz.d(20): Error: expression expected, not `return`

    /tmp/tmp7lf52vcz.d(20): Error: found `tolower` when expecting `,`

    /tmp/tmp7lf52vcz.d(20): Error: found `;` when expecting `,`

    /tmp/tmp7lf52vcz.d(20): Error: expression expected, not `}`

    /tmp/tmp7lf52vcz.d(20): Error: found `;` when expecting `,`

    /tmp/tmp7lf52vcz.d(21): Error: expression expected, not `for`

    /tmp/tmp7lf52vcz.d(21): Error: found `ch` when expecting `.` following char

    /tmp/tmp7lf52vcz.d(21): Error: found `:` when expecting identifier following `char`.

    /tmp/tmp7lf52vcz.d(21): Error: found `message` when expecting `,`

    /tmp/tmp7lf52vcz.d(22): Error: found `{` when expecting `,`

    /tmp/tmp7lf52vcz.d(23): Error: expression expected, not `if`

    /tmp/tmp7lf52vcz.d(23): Error: found `result` when expecting `,`

    /tmp/tmp7lf52vcz.d'
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    char vowels[10] = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n\
    \    char shift = '0';\n    foreach(char letter; message)\n    {\n        foreach(char\
    \ vowel; vowels)\n        {\n            if(vowel == letter)\n            {\n\
    \                shift = vowel + 2;\n                if(shift > 'Z' && vowel <=\
    \ 'Z')\n                {\n                    shift = 'A' + (shift - 'Z' - 1);\n\
    \                }\n                else if(shift > 'z')\n                {\n\
    \                    shift = 'a' + (shift - 'z' - 1);\n                }\n   \
    \             letter = shift;\n            }\n        }\n        if((letter >=\
    \ 'a' && letter <= 'z') || (letter >= 'A' && letter <= 'Z'))\n        {\n    \
    \        letter = tolower(letter);\n            letter = (letter - 'a' + 13) %\
    \ 26 + 'a';\n            if(letter < 'a')\n            {\n                letter\
    \ = 'z' - ('a' - letter - 1);\n            }\n        }\n    }\n    return message;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkkinkisq.d(19): Deprecation: instead of C-style syntax, use D-style
    syntax `char[10] vowels`

    /tmp/tmpkkinkisq.d(19): Error: a struct is not a valid initializer for a `char[10]`

    /tmp/tmpkkinkisq.d(27): Error: cannot implicitly convert expression `cast(int)vowel
    + 2` of type `int` to `char`

    /tmp/tmpkkinkisq.d(30): Error: cannot implicitly convert expression `65 + (cast(int)shift
    - 90 - 1)` of type `int` to `char`

    /tmp/tmpkkinkisq.d(34): Error: cannot implicitly convert expression `97 + (cast(int)shift
    - 122 - 1)` of type `int` to `char`

    /tmp/tmpkkinkisq.d(41): Error: undefined identifier `tolower`

    /tmp/tmpkkinkisq.d(45): Error: cannot implicitly convert expression `122 - (97
    - cast(int)letter - 1)` of type `int` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkkinkisq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    string vowels\
    \ = \"AEIOU\";\n    string encoded = \"\";\n    foreach(char c; message)\n   \
    \ {\n        if(c in alphabet)\n        {\n            int index = indexOf(alphabet,\
    \ c);\n            if(index < 0)\n                index = alphabet.length + index;\n\
    \            if(c in vowels)\n            {\n                char d = '!';\n \
    \               int vowelIndex = indexOf(vowels, c);\n                if(vowelIndex\
    \ < vowels.length - 2)\n                    d = vowels[vowelIndex + 2];\n    \
    \            else\n                    d = vowels[vowelIndex - index];\n     \
    \           encoded ~= d;\n            }\n            else if(isUpper(c))\n  \
    \              encoded ~= toLower(alphabet[index]);\n            else\n      \
    \          encoded ~= toUpper(alphabet[index]);\n        }\n        else\n   \
    \         encoded ~= c;\n    }\n    return encoded;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx424cfp2.d(24): Error: incompatible types for `(c) in (alphabet)`:
    `char` and `string`

    /tmp/tmpx424cfp2.d(26): Error: undefined identifier `indexOf`

    /tmp/tmpx424cfp2.d(28): Error: cannot implicitly convert expression `alphabet.length
    + cast(ulong)index` of type `ulong` to `int`

    /tmp/tmpx424cfp2.d(29): Error: incompatible types for `(c) in (vowels)`: `char`
    and `string`

    /tmp/tmpx424cfp2.d(32): Error: undefined identifier `indexOf`, did you mean variable
    `index`?

    /tmp/tmpx424cfp2.d(39): Error: undefined identifier `isUpper`

    /tmp/tmpx424cfp2.d(40): Error: undefined identifier `toLower`

    /tmp/tmpx424cfp2.d(42): Error: undefined identifier `toUpper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx424cfp2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string encode;\n    for (int i = 0; i < message.length; i++)\n    {\n\
    \        int c = message[i];\n        if (c >= 65 && c <= 90)\n        {\n   \
    \         encode += (char)((c - 65 + 2) % 26 + 97);\n        }\n        else if\
    \ (c >= 97 && c <= 122)\n        {\n            encode += (char)((c - 97 + 2)\
    \ % 26 + 65);\n        }\n        else\n        {\n            encode += message[i];\n\
    \        }\n    }\n    return encode;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9etapw8v.d(25): Error: C style cast illegal, use `cast(char)((c
    - 65 + 2) % 26 + 97)`

    /tmp/tmp9etapw8v.d(29): Error: C style cast illegal, use `cast(char)((c - 97 +
    2) % 26 + 65)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9etapw8v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    // ...\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9e5lbp0a.d(17): Error: function `tmp9e5lbp0a.encode` has no `return`
    statement, but is expected to return a value of type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9e5lbp0a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(immutable c; message) \n    {\n\
    \        if (c.isUpperCase) \n        {\n            c = c.toLower;\n        }\n\
    \        else if (c.isLowerCase) \n        {\n            c = c.toUpper;\n   \
    \     }\n        else \n        {\n            c = c;\n        }\n        result\
    \ ~= c;\n    }\n    message = result;\n    result = \"\";\n    foreach(immutable\
    \ c; message) \n    {\n        if (c == 'a') \n        {\n            c = 'c';\n\
    \        }\n        else if (c == 'e') \n        {\n            c = 'g';\n   \
    \     }\n        else if (c == 'i') \n        {\n            c = 'k';\n      \
    \  }\n        else if (c == 'o') \n        {\n            c = 'q';\n        }\n\
    \        else if (c == 'u') \n        {\n            c = 'y';\n        }\n   \
    \     else \n        {\n            c = c;\n        }\n        result ~= c;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n\
    \    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5zaiygpr.d(22): Error: no property `isUpperCase` for type `immutable(char)`

    /tmp/tmp5zaiygpr.d(24): Error: no property `toLower` for type `immutable(char)`

    /tmp/tmp5zaiygpr.d(26): Error: no property `isLowerCase` for type `immutable(char)`

    /tmp/tmp5zaiygpr.d(28): Error: no property `toUpper` for type `immutable(char)`

    /tmp/tmp5zaiygpr.d(32): Error: cannot modify `immutable` expression `c`

    /tmp/tmp5zaiygpr.d(42): Error: cannot modify `immutable` expression `c`

    /tmp/tmp5zaiygpr.d(46): Error: cannot modify `immutable` expression `c`

    /tmp/tmp5zaiygpr.d(50): Error: cannot modify `immutable` expression `c`

    /tmp/tmp5zaiygpr.d(54): Error: cannot modify `immutable` expression `c`

    /tmp/tmp5zaiygpr.d(58): Error: cannot modify `immutable` expression `c`

    /tmp/tmp5zaiygpr.d(62): Error: cannot modify `immutable` expression `c`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5zaiygpr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    message = toLower(message);\n    string new_message = \"\";\n    foreach(ch;\
    \ message) {\n        if(ch == 'a') {\n            new_message ~= 'c';\n     \
    \   } else if(ch == 'e') {\n            new_message ~= 'g';\n        } else if(ch\
    \ == 'i') {\n            new_message ~= 'k';\n        } else if(ch == 'o') {\n\
    \            new_message ~= 'q';\n        } else if(ch == 'u') {\n           \
    \ new_message ~= 's';\n        } else {\n            new_message ~= toUpper(ch);\n\
    \        }\n    }\n    return new_message;\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp78bpqq31.d(19): Error: undefined identifier `toLower`

    /tmp/tmp78bpqq31.d(33): Error: undefined identifier `toUpper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp78bpqq31.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string str = \"\";\n    foreach(char c; message)\n    {\n        if\
    \ (isAlpha(c))\n        {\n            switch(c)\n            {\n            \
    \    case 'E':\n                case 'e':\n                    str ~= 'g';\n \
    \                   break;\n                case 'I':\n                case 'i':\n\
    \                    str ~= 'k';\n                    break;\n               \
    \ case 'O':\n                case 'o':\n                    str ~= 'q';\n    \
    \                break;\n                case 'U':\n                case 'u':\n\
    \                    str ~= 'y';\n                    break;\n               \
    \ case 'A':\n                case 'a':\n                    str ~= 'c';\n    \
    \                break;\n                default:\n                    if (isUpper(c))\n\
    \                        str ~= toLower(c);\n                    else\n      \
    \                  str ~= toUpper(c);\n                    break;\n          \
    \  }\n        }\n        else\n            str ~= c;\n    }\n    return str;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_t2lzkhb.d(22): Error: undefined identifier `isAlpha`

    /tmp/tmp_t2lzkhb.d(47): Error: undefined identifier `isUpper`

    /tmp/tmp_t2lzkhb.d(48): Error: undefined identifier `toLower`

    /tmp/tmp_t2lzkhb.d(50): Error: undefined identifier `toUpper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_t2lzkhb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string new_string = \"\";\n    for (int i = 0; i < message.length;\
    \ i++) {\n        char c = message[i];\n        if (c >= 'a' && c <= 'z') {\n\
    \            if (c == 'a') {\n                new_string += 'c';\n           \
    \ } else if (c == 'e') {\n                new_string += 'g';\n            } else\
    \ if (c == 'i') {\n                new_string += 'k';\n            } else if (c\
    \ == 'o') {\n                new_string += 'q';\n            } else if (c == 'u')\
    \ {\n                new_string += 'y';\n            } else {\n              \
    \  new_string += c + 2;\n            }\n        } else if (c >= 'A' && c <= 'Z')\
    \ {\n            if (c == 'A') {\n                new_string += 'C';\n       \
    \     } else if (c == 'E') {\n                new_string += 'G';\n           \
    \ } else if (c == 'I') {\n                new_string += 'K';\n            } else\
    \ if (c == 'O') {\n                new_string += 'Q';\n            } else if (c\
    \ == 'U') {\n                new_string += 'Y';\n            } else {\n      \
    \          new_string += c + 2;\n            }\n        } else {\n           \
    \ new_string += c;\n        }\n    }\n    return new_string;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw7_ckbmv.d(24): Error: slice `new_string` is not mutable

    /tmp/tmpw7_ckbmv.d(26): Error: slice `new_string` is not mutable

    /tmp/tmpw7_ckbmv.d(28): Error: slice `new_string` is not mutable

    /tmp/tmpw7_ckbmv.d(30): Error: slice `new_string` is not mutable

    /tmp/tmpw7_ckbmv.d(32): Error: slice `new_string` is not mutable

    /tmp/tmpw7_ckbmv.d(34): Error: incompatible types for `(new_string) += (cast(int)c
    + 2)`: `string` and `int`

    /tmp/tmpw7_ckbmv.d(38): Error: slice `new_string` is not mutable

    /tmp/tmpw7_ckbmv.d(40): Error: slice `new_string` is not mutable

    /tmp/tmpw7_ckbmv.d(42): Error: slice `new_string` is not mutable

    /tmp/tmpw7_ckbmv.d(44): Error: slice `new_string` is not mutable

    /tmp/tmpw7_ckbmv.d(46): Error: slice `new_string` is not mutable

    /tmp/tmpw7_ckbmv.d(48): Error: incompatible types for `(new_string) += (cast(int)c
    + 2)`: `string` and `int`

    /tmp/tmpw7_ckbmv.d(51): Error: slice `new_string` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw7_ckbmv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    message = toLower(message);\n    foreach(i, char c; message) {\n  \
    \      switch(c) {\n            case 'a': c = 'c'; break;\n            case 'e':\
    \ c = 'g'; break;\n            case 'i': c = 'k'; break;\n            case 'o':\
    \ c = 'q'; break;\n            case 'u': c = 'y'; break;\n            default:\
    \ c = toUpper(c);\n        }\n        message[i] = c;\n    }\n    return message;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprtpcq2o7.d(19): Error: undefined identifier `toLower`

    /tmp/tmprtpcq2o7.d(27): Error: undefined identifier `toUpper`

    /tmp/tmprtpcq2o7.d(29): Error: cannot modify `immutable` expression `message[i]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprtpcq2o7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n\treturn message;\n}\nunittest\n{\n    alias candidate = encode;\n\n  \
    \  assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpc_l18eeg.d(25): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f1d]

    ??:? void tmpc_l18eeg.__unittest_L21_C1() [0x427abe]

    ??:? void tmpc_l18eeg.__modtest() [0x427c9c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbc7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aad6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbed]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43009c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb79]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aaad]

    ??:? runModuleUnitTests [0x42b99d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42836c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    // TODO: Write this function\n    return \"\";\n}\nunittest\n{\n  \
    \  alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpashd7kkx.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f0d]

    ??:? void tmpashd7kkx.__unittest_L22_C1() [0x427ab2]

    ??:? void tmpashd7kkx.__modtest() [0x427c90]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aac6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbdd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43008c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb69]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa9d]

    ??:? runModuleUnitTests [0x42b98d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42835c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    char[] result = new char[message.length];\n    foreach(int i, char\
    \ c; message) {\n        if(isUpper(c)) {\n            result[i] = c + 32;\n \
    \       } else if(isLower(c)) {\n            result[i] = c - 32;\n        } else\
    \ {\n            result[i] = c;\n        }\n    }\n    return to!string(result);\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprsq1928z.d(21): Error: undefined identifier `isUpper`

    /tmp/tmprsq1928z.d(22): Error: cannot implicitly convert expression `cast(int)c
    + 32` of type `int` to `char`

    /tmp/tmprsq1928z.d(23): Error: undefined identifier `isLower`

    /tmp/tmprsq1928z.d(24): Error: cannot implicitly convert expression `cast(int)c
    - 32` of type `int` to `char`

    /tmp/tmprsq1928z.d(29): Error: template instance `to!string` template `to` is
    not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprsq1928z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n  char[] out = new char[message.length];\n  char[] vowels = {'a', 'e',\
    \ 'i', 'o', 'u'};\n  for (int i = 0; i < message.length; i++)\n  {\n    out[i]\
    \ = message[i];\n    for (int j = 0; j < 5; j++)\n    {\n      if (out[i] == vowels[j])\n\
    \      {\n        out[i] = vowels[(j + 2) % 5];\n        break;\n      }\n   \
    \ }\n    if (out[i] >= 'a' && out[i] <= 'z')\n    {\n      out[i] = toUpper(out[i]);\n\
    \    }\n    else if (out[i] >= 'A' && out[i] <= 'Z')\n    {\n      out[i] = toLower(out[i]);\n\
    \    }\n  }\n  return out.dup;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqy52ys5a.d(19): Error: no identifier for declarator `char[]`

    /tmp/tmpqy52ys5a.d(19): Error: found `out` instead of statement

    /tmp/tmpqy52ys5a.d(23): Error: found `out` instead of statement

    /tmp/tmpqy52ys5a.d(26): Error: expression expected, not `out`

    /tmp/tmpqy52ys5a.d(28): Error: found `out` instead of statement

    /tmp/tmpqy52ys5a.d(32): Error: expression expected, not `out`

    /tmp/tmpqy52ys5a.d(32): Error: expression expected, not `out`

    /tmp/tmpqy52ys5a.d(34): Error: found `out` instead of statement

    /tmp/tmpqy52ys5a.d(36): Error: expression expected, not `out`

    /tmp/tmpqy52ys5a.d(36): Error: expression expected, not `out`

    /tmp/tmpqy52ys5a.d(38): Error: found `out` instead of statement

    /tmp/tmpqy52ys5a.d(41): Error: expression expected, not `out`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqy52ys5a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(i, c; message)\n    {\n        char letter\
    \ = c;\n        if (c >= 'a' && c <= 'z') \n        {\n            char letter\
    \ = toupper(c);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u')\n            {\n                letter = toupper(c + 2);\n    \
    \        }\n        }\n        else if (c >= 'A' && c <= 'Z') \n        {\n  \
    \          letter = tolower(c);\n            if (c == 'A' || c == 'E' || c ==\
    \ 'I' || c == 'O' || c == 'U')\n            {\n                letter = tolower(c\
    \ + 2);\n            }\n        }\n        result ~= letter;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfdt5wsgg.d(25): Error: undefined identifier `toupper`

    /tmp/tmpfdt5wsgg.d(25): Error: variable `letter` is shadowing variable `tmpfdt5wsgg.encode.letter`

    /tmp/tmpfdt5wsgg.d(28): Error: undefined identifier `toupper`

    /tmp/tmpfdt5wsgg.d(33): Error: undefined identifier `tolower`

    /tmp/tmpfdt5wsgg.d(36): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfdt5wsgg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = message;\n    foreach(i, letter; result)\n    {\n \
    \       // check if letter is uppercase\n        if (isUpper(letter))\n      \
    \  {\n            // make it lowercase\n            result[i] = toLower(letter);\n\
    \        }\n        else if (isLower(letter))\n        {\n            // make\
    \ it uppercase\n            result[i] = toUpper(letter);\n        }\n        //\
    \ check if letter is a vowel\n        if(letter == 'a' || letter == 'e' || letter\
    \ == 'i' || letter == 'o' || letter == 'u')\n        {\n            result[i]\
    \ = toLower(toUpper(letter) + 2);\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplwlvu_81.d(23): Error: undefined identifier `isUpper`

    /tmp/tmplwlvu_81.d(26): Error: undefined identifier `toLower`

    /tmp/tmplwlvu_81.d(28): Error: undefined identifier `isLower`

    /tmp/tmplwlvu_81.d(31): Error: undefined identifier `toUpper`

    /tmp/tmplwlvu_81.d(36): Error: undefined identifier `toLower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplwlvu_81.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string res;\n    foreach(char c; message) {\n        if (c >= 'a' &&\
    \ c <= 'z') {\n            if (c == 'y') {\n                res ~= 'A';\n    \
    \        } else if (c == 'z') {\n                res ~= 'B';\n            } else\
    \ {\n                res ~= c + 2;\n            }\n        } else if (c >= 'A'\
    \ && c <= 'Z') {\n            if (c == 'Y') {\n                res ~= 'a';\n \
    \           } else if (c == 'Z') {\n                res ~= 'b';\n            }\
    \ else {\n                res ~= c + 2;\n            }\n        } else {\n   \
    \         res ~= c;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpa8jchu_r.d(47): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281b5]

    ??:? void tmpa8jchu_r.__unittest_L43_C1() [0x427d5a]

    ??:? void tmpa8jchu_r.__modtest() [0x427f38]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cb3f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ba4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430425]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308d4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303b1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ba25]

    ??:? runModuleUnitTests [0x42c915]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428604]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    for (int i = 0; i < message.length; i++) {\n  \
    \      int c = message[i];\n        if ('a' <= c && c <= 'z') {\n            c\
    \ = c - ('a' - 'A');\n        }\n        else if ('A' <= c && c <= 'Z') {\n  \
    \          c = c + ('a' - 'A');\n        }\n        switch (c) {\n           \
    \ case 'A':\n            case 'E':\n            case 'I':\n            case 'O':\n\
    \            case 'U':\n                c = c + 2;\n                break;\n \
    \           case 'B':\n            case 'F':\n            case 'J':\n        \
    \    case 'N':\n            case 'R':\n            case 'V':\n            case\
    \ 'Z':\n                c = c - 1;\n                break;\n            case 'C':\n\
    \            case 'G':\n            case 'K':\n            case 'P':\n       \
    \     case 'S':\n            case 'W':\n                c = c - 2;\n         \
    \       break;\n            case 'D':\n            case 'H':\n            case\
    \ 'L':\n            case 'Q':\n            case 'T':\n            case 'X':\n\
    \                c = c - 3;\n                break;\n            case 'M':\n \
    \           case 'Y':\n                c = c - 4;\n                break;\n  \
    \      }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqbb482ps.d(28): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqbb482ps.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n  string alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  string vowels =\
    \ \"AEIOU\";\n  string encoded = \"\";\n  // Iterate through message\n  foreach(char\
    \ c; message) {\n    // Find the lowercase index of each character in the alphabet\n\
    \    size_t index = lowercase(c) - 'a';\n    // If the index is less than 0 or\
    \ greater than or equal to the length of the alphabet,\n    // then just concatenate\
    \ the character\n    if(index < 0 || index >= alphabet.length)\n    {\n      encoded\
    \ ~= c;\n      continue;\n    }\n    // Check if the character is uppercase, then\
    \ convert to lowercase\n    if(isupper(c))\n    {\n      c = lowercase(c);\n \
    \   }\n    // If the character is a vowel, and it is the last character of the\
    \ alphabet, concatenate the character\n    // with the remainder of the shift.\n\
    \    if(vowels.canFind(c) && index == (alphabet.length - 1))\n    {\n      encoded\
    \ ~= (alphabet[(index + 2) % alphabet.length] - 32);\n      continue;\n    }\n\
    \    // If the character is a vowel, and it is the second to last character of\
    \ the alphabet, concatenate the character\n    // with the remainder of the shift.\n\
    \    if(vowels.canFind(c) && index == (alphabet.length - 2))\n    {\n      encoded\
    \ ~= (alphabet[(index + 2) % alphabet.length] - 32);\n      continue;\n    }\n\
    \    // If the character is a vowel, shift and encode normally.\n    if(vowels.canFind(c))\n\
    \    {\n      encoded ~= (alphabet[(index + 2) % alphabet.length] - 32);\n   \
    \   continue;\n    }\n    // Concatenate the character with the remainder of the\
    \ shift.\n    encoded ~= (alphabet[(index + 13) % alphabet.length] - 32);\n  }\n\
    \  return encoded;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqd354q5b.d(25): Error: undefined identifier `lowercase`

    /tmp/tmpqd354q5b.d(34): Error: undefined identifier `isupper`

    /tmp/tmpqd354q5b.d(36): Error: undefined identifier `lowercase`

    /tmp/tmpqd354q5b.d(40): Error: no property `canFind` for type `string`

    /tmp/tmpqd354q5b.d(47): Error: no property `canFind` for type `string`

    /tmp/tmpqd354q5b.d(53): Error: no property `canFind` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqd354q5b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n  string vowels = \"aeiou\";\n  string result = \"\";\n  string::iterator\
    \ it;\n  for (it = message.begin(); it != message.end(); it++) {\n    char c =\
    \ *it;\n    int index = vowels.find(tolower(c));\n    int shift = 1;\n    if (isupper(c))\
    \ {\n      shift = 0;\n    }\n    if (index != -1) {\n      result += vowels[(index\
    \ + 2) % 5 + shift];\n    } else {\n      result += (islower(c) ? toupper(c) :\
    \ tolower(c));\n    }\n  }\n  return result;\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbniolx3u.d(21): Error: use `.` for member lookup, not `::`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbniolx3u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    int length = message.length;\n    int i = 0;\n    char temp;\n    for(i\
    \ = 0; i < length; i++)\n    {\n        temp = message[i];\n        if(temp >=\
    \ 'a' && temp <= 'z')\n        {\n            temp = toUpper(temp);\n        }\n\
    \        else if(temp >= 'A' && temp <= 'Z')\n        {\n            temp = toLower(temp);\n\
    \        }\n        else\n        {\n            continue;\n        }\n      \
    \  if(temp == 'A' || temp == 'E' || temp == 'I' || temp == 'O' || temp == 'U')\n\
    \        {\n            message[i] = 'E';\n        }\n        else if(temp ==\
    \ 'a' || temp == 'e' || temp == 'i' || temp == 'o' || temp == 'u')\n        {\n\
    \            message[i] = 'e';\n        }\n        else\n        {\n         \
    \   message[i] = temp;\n        }\n    }\n    return message;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzbn9w0gr.d(19): Error: cannot implicitly convert expression `message.length`
    of type `ulong` to `int`

    /tmp/tmpzbn9w0gr.d(27): Error: undefined identifier `toUpper`

    /tmp/tmpzbn9w0gr.d(31): Error: undefined identifier `toLower`

    /tmp/tmpzbn9w0gr.d(39): Error: cannot modify `immutable` expression `message[cast(ulong)i]`

    /tmp/tmpzbn9w0gr.d(43): Error: cannot modify `immutable` expression `message[cast(ulong)i]`

    /tmp/tmpzbn9w0gr.d(47): Error: cannot modify `immutable` expression `message[cast(ulong)i]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzbn9w0gr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    char c;\n    bool uppercase;\n    foreach(c;\
    \ message)\n    {\n        uppercase = isupper(c);\n        if(uppercase) c =\
    \ tolower(c);\n        if(c == 'a') c = 'c';\n        else if(c == 'e') c = 'g';\n\
    \        else if(c == 'i') c = 'k';\n        else if(c == 'o') c = 'q';\n    \
    \    else if(c == 'u') c = 'y';\n        else if(c == 'z') c = 'b';\n        else\
    \ c++;\n        if(uppercase) c = toupper(c);\n        result ~= c;\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptrajnjrr.d(22): Error: variable `c` is shadowing variable `tmptrajnjrr.encode.c`

    /tmp/tmptrajnjrr.d(24): Error: undefined identifier `isupper`

    /tmp/tmptrajnjrr.d(25): Error: undefined identifier `tolower`

    /tmp/tmptrajnjrr.d(26): Error: cannot modify `immutable` expression `c`

    /tmp/tmptrajnjrr.d(27): Error: cannot modify `immutable` expression `c`

    /tmp/tmptrajnjrr.d(28): Error: cannot modify `immutable` expression `c`

    /tmp/tmptrajnjrr.d(29): Error: cannot modify `immutable` expression `c`

    /tmp/tmptrajnjrr.d(30): Error: cannot modify `immutable` expression `c`

    /tmp/tmptrajnjrr.d(31): Error: cannot modify `immutable` expression `c`

    /tmp/tmptrajnjrr.d(32): Error: cannot modify `immutable` expression `c`

    /tmp/tmptrajnjrr.d(33): Error: undefined identifier `toupper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptrajnjrr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string vowels\
    \ = \"aeiou\";\n    string result = \"\";\n    int pos;\n    foreach(ch; message)\n\
    \    {\n        pos = alphabet.indexOf(ch);\n        if(pos != -1)\n        {\n\
    \            if(vowels.indexOf(ch) != -1)\n            {\n                result\
    \ ~= alphabet[(pos + 2) % 26];\n            }\n            else\n            {\n\
    \                result ~= ch.isUpper() ? alphabet[pos].toUpper() : alphabet[pos];\n\
    \            }\n        }\n        else\n        {\n            result ~= ch;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptll4iqge.d(25): Error: no property `indexOf` for type `string`

    /tmp/tmptll4iqge.d(28): Error: no property `indexOf` for type `string`

    /tmp/tmptll4iqge.d(34): Error: no property `isUpper` for type `immutable(char)`

    /tmp/tmptll4iqge.d(34): Error: no property `toUpper` for type `immutable(char)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptll4iqge.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    int length = message.length;\n    string encoded = \"\";\n    int temp;\n\
    \    for (int i = 0; i < length; i++)\n    {\n        if (message[i] == ' ')\n\
    \        {\n            encoded += \" \";\n        }\n        else if (message[i]\
    \ == 'e')\n        {\n            temp = (int)message[i] + 2;\n            if\
    \ (temp > 122)\n            {\n                temp = temp - 26;\n           \
    \ }\n            encoded += (char)temp;\n        }\n        else if (message[i]\
    \ == 'i')\n        {\n            temp = (int)message[i] + 2;\n            if\
    \ (temp > 122)\n            {\n                temp = temp - 26;\n           \
    \ }\n            encoded += (char)temp;\n        }\n        else if (message[i]\
    \ == 'o')\n        {\n            temp = (int)message[i] + 2;\n            if\
    \ (temp > 122)\n            {\n                temp = temp - 26;\n           \
    \ }\n            encoded += (char)temp;\n        }\n        else if (message[i]\
    \ == 'u')\n        {\n            temp = (int)message[i] + 2;\n            if\
    \ (temp > 122)\n            {\n                temp = temp - 26;\n           \
    \ }\n            encoded += (char)temp;\n        }\n        else if (message[i]\
    \ == 'a')\n        {\n            temp = (int)message[i] + 2;\n            if\
    \ (temp > 122)\n            {\n                temp = temp - 26;\n           \
    \ }\n            encoded += (char)temp;\n        }\n        else if (isupper(message[i]))\n\
    \        {\n            temp = (int)message[i] + 32;\n            encoded += (char)temp;\n\
    \        }\n        else if (islower(message[i]))\n        {\n            temp\
    \ = (int)message[i] - 32;\n            encoded += (char)temp;\n        }\n   \
    \ }\n    return encoded;\n}\n/*\n    Write a function that takes a message, and\
    \ decodes in such a \n    way that it reverses the encodings done in\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf557se9h.d(30): Error: C style cast illegal, use `cast(int)message[i]`

    /tmp/tmpf557se9h.d(35): Error: C style cast illegal, use `cast(char)temp`

    /tmp/tmpf557se9h.d(39): Error: C style cast illegal, use `cast(int)message[i]`

    /tmp/tmpf557se9h.d(44): Error: C style cast illegal, use `cast(char)temp`

    /tmp/tmpf557se9h.d(48): Error: C style cast illegal, use `cast(int)message[i]`

    /tmp/tmpf557se9h.d(53): Error: C style cast illegal, use `cast(char)temp`

    /tmp/tmpf557se9h.d(57): Error: C style cast illegal, use `cast(int)message[i]`

    /tmp/tmpf557se9h.d(62): Error: C style cast illegal, use `cast(char)temp`

    /tmp/tmpf557se9h.d(66): Error: C style cast illegal, use `cast(int)message[i]`

    /tmp/tmpf557se9h.d(71): Error: C style cast illegal, use `cast(char)temp`

    /tmp/tmpf557se9h.d(75): Error: C style cast illegal, use `cast(int)message[i]`

    /tmp/tmpf557se9h.d(76): Error: C style cast illegal, use `cast(char)temp`

    /tmp/tmpf557se9h.d(80): Error: C style cast illegal, use `cast(int)message[i]`

    /tmp/tmpf557se9h.d(81): Err'
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message) \n    {\n        if (tolower(c)\
    \ in ['a', 'e', 'i', 'o', 'u'])\n        {\n            char temp = c;\n     \
    \       c = c + 2;\n            c = toupper(c);\n            result ~= c;\n  \
    \          c = temp;\n        }\n        else if (tolower(c) in ['b', 'c', 'd',\
    \ 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x',\
    \ 'y', 'z'])\n        {\n            char temp = c;\n            c = c + 2;\n\
    \            c = tolower(c);\n            result ~= c;\n            c = temp;\n\
    \        }\n        else\n        {\n            result ~= c;\n        }\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n   \
    \ assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\")\
    \ == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbkfkqo73.d(22): Error: undefined identifier `tolower`

    /tmp/tmpbkfkqo73.d(25): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    /tmp/tmpbkfkqo73.d(26): Error: undefined identifier `toupper`

    /tmp/tmpbkfkqo73.d(30): Error: undefined identifier `tolower`

    /tmp/tmpbkfkqo73.d(33): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    /tmp/tmpbkfkqo73.d(34): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbkfkqo73.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n  string chars = \"abcdefghijklmnopqrstuvwxyz\";\n  string output = \"\"\
    ;\n  foreach(char c; message)\n  {\n    char current = c;\n    if(chars.indexOf(current.toLower)\
    \ != -1)\n    {\n      size_t index = chars.indexOf(current.toLower);\n      if(current.isUpper)\n\
    \      {\n        current = (index + 2) >= chars.length ? chars[(index + 2) -\
    \ chars.length].toUpper : chars[index + 2].toUpper;\n      }\n      else\n   \
    \   {\n        current = (index + 2) >= chars.length ? chars[(index + 2) - chars.length]\
    \ : chars[index + 2];\n      }\n    }\n    output ~= current;\n  }\n  return output;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpryb56wev.d(24): Error: no property `indexOf` for type `string`

    /tmp/tmpryb56wev.d(26): Error: no property `indexOf` for type `string`

    /tmp/tmpryb56wev.d(27): Error: no property `isUpper` for type `char`

    /tmp/tmpryb56wev.d(29): Error: no property `toUpper` for type `immutable(char)`

    /tmp/tmpryb56wev.d(29): Error: no property `toUpper` for type `immutable(char)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpryb56wev.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    // your code here\n    return \"\";\n}\n/*\n    This function decodes\
    \ your message.\n    >>> decode(\"TgSt\")\n    \"test\"\n    >>> decode(\"tHKS\
    \ KS C MGSSCGG\")\n    \"This is a message\"\n*/\nstring decode(string message)\
    \ \n{\n    // your code here\n    return \"\";\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp858qhdet.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f5d]

    ??:? void tmp858qhdet.__unittest_L34_C1() [0x427b02]

    ??:? void tmp858qhdet.__modtest() [0x427ce0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc07]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab16]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc2d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300dc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbb9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aaed]

    ??:? runModuleUnitTests [0x42b9dd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4283ac]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    int len;\n    int i;\n    int _char;\n    string encoded = \"\";\n\
    \    len = message.length;\n    foreach(char c; message)\n    {\n        if(c\
    \ >= 'a' && c <= 'z')\n        {\n            _char = c - 97;\n            if(c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n            {\n   \
    \             _char = (_char + 2) % 26;\n            }\n            _char = _char\
    \ + 65;\n            encoded = encoded ~ cast(char)_char;\n        }\n       \
    \ else if(c >= 'A' && c <= 'Z')\n        {\n            _char = c - 65;\n    \
    \        if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n      \
    \      {\n                _char = (_char + 2) % 26;\n            }\n         \
    \   _char = _char + 97;\n            encoded = encoded ~ cast(char)_char;\n  \
    \      }\n        else\n        {\n            encoded = encoded ~ c;\n      \
    \  }\n    }\n    return encoded;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxudq62f9.d(23): Error: cannot implicitly convert expression `message.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxudq62f9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    \nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp06odx38i.d(20): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp06odx38i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    char[] encoded = new char[message.length];\n    foreach(i, c; message)\
    \ {\n        char letter = toLower(c);\n        bool isVowel = iota(letter, 'a',\
    \ 'z').any !(j => j == letter);\n        if (isVowel) {\n            char[] v\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n            int vowelIndex = v.indexOf(letter);\n\
    \            int newVowelIndex = (vowelIndex + 2) % v.length;\n            encoded[i]\
    \ = v[newVowelIndex];\n        } else {\n            encoded[i] = letter;\n  \
    \      }\n    }\n    return cast(string)encoded;\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdu03ygoo.d(21): Error: undefined identifier `toLower`

    /tmp/tmpdu03ygoo.d(22): Error: undefined identifier `iota`

    /tmp/tmpdu03ygoo.d(24): Error: cannot implicitly convert expression `"abcdefghijklmnopqrstuvwxyz"`
    of type `string` to `char[]`

    /tmp/tmpdu03ygoo.d(25): Error: no property `indexOf` for type `char[]`

    /tmp/tmpdu03ygoo.d(26): Error: cannot implicitly convert expression `cast(ulong)(vowelIndex
    + 2) % v.length` of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdu03ygoo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    /* TODO: Write code here */\n    return \"\";\n}\nunittest\n{\n   \
    \ alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpivtgm0tt.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f0d]

    ??:? void tmpivtgm0tt.__unittest_L22_C1() [0x427ab2]

    ??:? void tmpivtgm0tt.__modtest() [0x427c90]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aac6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbdd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43008c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb69]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa9d]

    ??:? runModuleUnitTests [0x42b98d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42835c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163113
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string converted = message;\n    string source = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string target = \"cdefghijklmnopqrstuvwxyzab\";\n    foreach(i, char c;\
    \ converted)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n           \
    \ size_t pos = source.find(c);\n            if(pos != string.npos)\n         \
    \   {\n                converted[i] = target[pos];\n            }\n        }\n\
    \        else if(c >= 'A' && c <= 'Z')\n        {\n            size_t pos = source.find(toLower(c));\n\
    \            if(pos != string.npos)\n            {\n                converted[i]\
    \ = toupper(target[pos]);\n            }\n        }\n    }\n    return converted;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm8b03xr1.d(26): Error: no property `find` for type `string`

    /tmp/tmpm8b03xr1.d(27): Error: no property `npos` for type `string`

    /tmp/tmpm8b03xr1.d(29): Error: cannot modify `immutable` expression `converted[i]`

    /tmp/tmpm8b03xr1.d(34): Error: no property `find` for type `string`

    /tmp/tmpm8b03xr1.d(35): Error: no property `npos` for type `string`

    /tmp/tmpm8b03xr1.d(37): Error: undefined identifier `toupper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm8b03xr1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    for (int i = 0; i < message.length; i++)\n\
    \    {\n        int ch = message[i];\n        if (ch >= 'a' && ch <= 'z')\n  \
    \      {\n            ch -= 'a';\n            ch = (ch + 2) % 26;\n          \
    \  ch += 'A';\n        }\n        else if (ch >= 'A' && ch <= 'Z')\n        {\n\
    \            ch -= 'A';\n            ch = (ch + 2) % 26;\n            ch += 'a';\n\
    \        }\n        result += ch;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnw_x2lid.d(35): Error: incompatible types for `(result) += (ch)`:
    `string` and `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnw_x2lid.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    // TODO\n    return \"\";\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp1fppnzf9.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f0d]

    ??:? void tmp1fppnzf9.__unittest_L22_C1() [0x427ab2]

    ??:? void tmp1fppnzf9.__modtest() [0x427c90]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aac6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbdd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43008c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb69]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa9d]

    ??:? runModuleUnitTests [0x42b98d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42835c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string vowels = \"aeiou\";\n    string res = \"\";\n    for (int i\
    \ = 0; i < message.length; i++)\n    {\n        if (tolower(message[i]) in vowels)\n\
    \        {\n            res += message[i];\n            int index = vowels.find(tolower(message[i]));\n\
    \            res[i] = vowels[(index + 2) % 5];\n        }\n        else\n    \
    \    {\n            res += message[i];\n        }\n    }\n    return res;\n}\n\
    unittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") ==\
    \ \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi_gu0x4a.d(23): Error: undefined identifier `tolower`

    /tmp/tmpi_gu0x4a.d(25): Error: slice `res` is not mutable

    /tmp/tmpi_gu0x4a.d(26): Error: no property `find` for type `string`

    /tmp/tmpi_gu0x4a.d(27): Error: cannot modify `immutable` expression `res[cast(ulong)i]`

    /tmp/tmpi_gu0x4a.d(31): Error: slice `res` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi_gu0x4a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    // create a string to hold the encoded message\n    string encoded\
    \ = \"\";\n    // Create a string to hold the alphabet\n    string alphabet =\
    \ \"abcdefghijklmnopqrstuvwxyz\";\n    // loop through each character in the message\n\
    \    foreach(c; message)\n    {\n        // create a var to hold the location\
    \ of the current char in the alphabet\n        int a;\n        // if the current\
    \ char is uppercase, find its location in the alphabet and store it in a\n   \
    \     if (c >= 'A' && c <= 'Z')\n            a = alphabet.indexOf(c.toLower());\n\
    \        // otherwise, if it is lowercase, find its location in the alphabet and\
    \ store it in a\n        else if (c >= 'a' && c <= 'z')\n            a = alphabet.indexOf(c);\n\
    \        // if the current char is a vowel and is lowercase, \n        // find\
    \ the char 2 places ahead of it in the alphabet\n        // and convert it to\
    \ upper case and add it to the encoded message\n        if ((c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u') && (c >= 'a' && c <= 'z'))\n      \
    \      encoded ~= alphabet[(a + 2) % 26].toUpper();\n        // if the current\
    \ char is a vowel and is uppercase, \n        // find the char 2 places ahead\
    \ of it in the alphabet\n        // and convert it to lower case and add it to\
    \ the encoded message\n        else if ((c == 'A' || c == 'E' || c == 'I' || c\
    \ == 'O' || c == 'U') && (c >= 'A' && c <= 'Z'))\n            encoded ~= alphabet[(a\
    \ + 2) % 26].toLower();\n        // if the current char is a consonant, add it\
    \ to the encoded message\n        else\n            encoded ~= c;\n    }\n   \
    \ // return the encoded message\n    return encoded;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9by4vb98.d(30): Error: no property `indexOf` for type `string`

    /tmp/tmp9by4vb98.d(33): Error: no property `indexOf` for type `string`

    /tmp/tmp9by4vb98.d(38): Error: no property `toUpper` for type `immutable(char)`

    /tmp/tmp9by4vb98.d(43): Error: no property `toLower` for type `immutable(char)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9by4vb98.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163112
- exit_code: 1
  program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    message = toLower(message);\n    string result = \"\";\n    foreach(c;\
    \ message) {\n        char newC;\n        switch(c) {\n            case 'a':\n\
    \                newC = 'c';\n                break;\n            case 'e':\n\
    \                newC = 'g';\n                break;\n            case 'i':\n\
    \                newC = 'k';\n                break;\n            case 'o':\n\
    \                newC = 'q';\n                break;\n            case 'u':\n\
    \                newC = 'y';\n                break;\n            default:\n \
    \               newC = c;\n        }\n        result ~= newC;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp6xjs88j.d(19): Error: undefined identifier `toLower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp6xjs88j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163112
