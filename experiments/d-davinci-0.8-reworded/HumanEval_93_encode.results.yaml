name: HumanEval_93_encode
language: d
results:
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string vowels = \"aeiouAEIOU\";\n    string alphabet = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n    string result = \"\";\n    foreach(char c; message)\n    {\n        if(vowels.canFind(c))\n\
    \        {\n            int pos = c == 'Z' || c == 'z' ? 0 : vowels.indexOf(c)\
    \ + 2;\n            result ~= alphabet[pos];\n        }\n        else\n      \
    \  {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppd2uarpx.d(24): Error: no property `canFind` for type `string`\\\
    n/tmp/tmppd2uarpx.d(26): Error: no property `indexOf` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppd2uarpx.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n    char[] output = toLowerArray(message);\n\
    \    for (int i = 0; i < output.length; i++)\n    {\n        if (isUpper(output[i]))\n\
    \        {\n            output[i] = toLower(output[i]);\n        }\n        else\
    \ if (isLower(output[i]))\n        {\n            output[i] = toUpper(output[i]);\n\
    \        }\n        for (int j = 0; j < vowels.length; j++)\n        {\n     \
    \       if (output[i] == vowels[j])\n            {\n                output[i]\
    \ = vowels[(j + 2) % vowels.length];\n            }\n        }\n    }\n    return\
    \ output.idup;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_7i1of4d.d(19): Error: a struct is not a valid initializer for\
    \ a `char[]`\\n/tmp/tmp_7i1of4d.d(20): Error: undefined identifier `toLowerArray`\\\
    n/tmp/tmp_7i1of4d.d(23): Error: undefined identifier `isUpper`\\n/tmp/tmp_7i1of4d.d(25):\
    \ Error: undefined identifier `toLower`\\n/tmp/tmp_7i1of4d.d(27): Error: undefined\
    \ identifier `isLower`\\n/tmp/tmp_7i1of4d.d(29): Error: undefined identifier `toUpper`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_7i1of4d.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n  immutable string alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\
    ;\n  immutable string vowels = \"AEIOUaeiou\";\n  immutable int shift = 2;\n \
    \ immutable int start = 0;\n  immutable int end = message.length;\n  string encoded\
    \ = \"\";\n  for (int i = start; i < end; i++)\n  {\n    if (vowels.canFind(message[i]))\n\
    \    {\n      int newPos = alphabet.indexOf(message[i]) + shift;\n      if (newPos\
    \ >= alphabet.length)\n      {\n        newPos -= alphabet.length;\n      }\n\
    \      encoded ~= alphabet[newPos];\n    }\n    else if (message[i].isUpper)\n\
    \    {\n      encoded ~= message[i].toLower;\n    }\n    else if (message[i].isLower)\n\
    \    {\n      encoded ~= message[i].toUpper;\n    }\n    else\n    {\n      encoded\
    \ ~= message[i];\n    }\n  }\n  return encoded;\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzcqgxoz5.d(23): Error: cannot implicitly convert expression `message.length`\
    \ of type `ulong` to `immutable(int)`\\n/tmp/tmpzcqgxoz5.d(27): Error: no property\
    \ `canFind` for type `immutable(string)`\\n/tmp/tmpzcqgxoz5.d(29): Error: no property\
    \ `indexOf` for type `immutable(string)`\\n/tmp/tmpzcqgxoz5.d(36): Error: no property\
    \ `isUpper` for type `immutable(char)`\\n/tmp/tmpzcqgxoz5.d(38): Error: no property\
    \ `toLower` for type `immutable(char)`\\n/tmp/tmpzcqgxoz5.d(40): Error: no property\
    \ `isLower` for type `immutable(char)`\\n/tmp/tmpzcqgxoz5.d(42): Error: no property\
    \ `toUpper` for type `immutable(char)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpzcqgxoz5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    /* Your Code Here */\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprr5di4l5.d(17): Error: function `tmprr5di4l5.encode` has no `return`\
    \ statement, but is expected to return a value of type `string`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprr5di4l5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    enum vowels = ['a', 'e', 'i', 'o', 'u'];\n    char[] encoded = message.dup;\n\
    \    foreach(i, ch; encoded)\n    {\n        if(isUpper(ch))\n            ch =\
    \ toLower(ch);\n        else if(isLower(ch))\n            ch = toUpper(ch);\n\
    \        if(vowels.canFind(ch))\n            ch = vowels[vowels.indexOf(ch) +\
    \ 2];\n        encoded[i] = ch;\n    }\n    return encoded.join;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo9zrum_j.d(23): Error: undefined identifier `isUpper`\\n/tmp/tmpo9zrum_j.d(24):\
    \ Error: undefined identifier `toLower`\\n/tmp/tmpo9zrum_j.d(25): Error: undefined\
    \ identifier `isLower`\\n/tmp/tmpo9zrum_j.d(26): Error: undefined identifier `toUpper`\\\
    n/tmp/tmpo9zrum_j.d(27): Error: no property `canFind` for type `char[]`\\n/tmp/tmpo9zrum_j.d(28):\
    \ Error: no property `indexOf` for type `char[]`\\n/tmp/tmpo9zrum_j.d(31): Error:\
    \ no property `join` for type `char[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpo9zrum_j.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    string const vowels = \"AEIOU\";\n    foreach(ch;\
    \ message) {\n        auto u = toupper(ch);\n        if (ch == u) {\n        \
    \    result ~= tolower(ch);\n        } else {\n            result ~= u;\n    \
    \    }\n        if (vowels.indexOf(u) >= 0) {\n            result.back = toupper(vowels[(vowels.indexOf(u)\
    \ + 2) % 5]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptjseb14q.d(20): Error: found `const` when expecting `;` following\
    \ statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptjseb14q.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result = \"\";\n    foreach(char c; message) \n    {\n     \
    \   if(isalpha(c)) \n        {\n            char encoded_char = (isupper(c) ?\
    \ 'A' : 'a') + \n                (((tolower(c) - 'a' + 2) % 26));\n          \
    \  if(isalpha(encoded_char)) \n            {\n                result ~= (isupper(c)\
    \ ? toupper(encoded_char) : tolower(encoded_char));\n            } \n        \
    \    else \n            {\n                result ~= c;\n            }\n     \
    \   } \n        else \n        {\n            result ~= c;\n        }\n    }\n\
    \    return result;\n}\n// TESTS\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmzlo2_ko.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmpmzlo2_ko.d(24):\
    \ Error: undefined identifier `isupper`\\n/tmp/tmpmzlo2_ko.d(25): Error: undefined\
    \ identifier `tolower`\\n/tmp/tmpmzlo2_ko.d(26): Error: undefined identifier `isalpha`\\\
    n/tmp/tmpmzlo2_ko.d(28): Error: undefined identifier `isupper`\\n/tmp/tmpmzlo2_ko.d(28):\
    \ Error: undefined identifier `toupper`\\n/tmp/tmpmzlo2_ko.d(28): Error: undefined\
    \ identifier `tolower`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"\
    /tmp/tmpmzlo2_ko.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    int str_len = message.length;\n    int i;\n    int vowels_loc[str_len];\n\
    \    int num_vowels = 0;\n    int temp_vowels[str_len];\n    int j = 0;\n    int\
    \ k = 0;\n    for (i = 0; i < str_len; i++)\n    {\n        \n        if (message[i]\
    \ == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i]\
    \ == 'u')\n        {\n            vowels_loc[num_vowels] = i;\n            num_vowels++;\n\
    \        }\n    }\n    //writeln(num_vowels);\n    //writeln(vowels_loc);\n  \
    \  //int *temp_vowels = new int[num_vowels];\n    for (i = 0; i < num_vowels;\
    \ i++)\n    {\n        temp_vowels[i] = message[vowels_loc[i]];\n    }\n    //writeln(temp_vowels);\n\
    \    for (i = 0; i < num_vowels; i++)\n    {\n        if (temp_vowels[i] == 'u')\n\
    \        {\n            temp_vowels[i] = 'a';\n        }\n        else if (temp_vowels[i]\
    \ == 'a')\n        {\n            temp_vowels[i] = 'e';\n        }\n        else\
    \ if (temp_vowels[i] == 'e')\n        {\n            temp_vowels[i] = 'i';\n \
    \       }\n        else if (temp_vowels[i] == 'i')\n        {\n            temp_vowels[i]\
    \ = 'o';\n        }\n        else if (temp_vowels[i] == 'o')\n        {\n    \
    \        temp_vowels[i] = 'u';\n        }\n    }\n    //writeln(temp_vowels);\n\
    \    for (i = 0; i < str_len; i++)\n    {\n\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpov_9orgn.d(21): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `int[str_len] vowels_loc`\\n/tmp/tmpov_9orgn.d(23): Deprecation: instead\
    \ of C-style syntax, use D-style syntax `int[str_len] temp_vowels`\\n/tmp/tmpov_9orgn.d(70):\
    \ Error: found `unittest` instead of statement\\n/tmp/tmpov_9orgn.d(80): Error:\
    \ found `End of File` when expecting `}` following compound statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpov_9orgn.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    int size = message.length;\n    char[] encoded = new char[size];\n\
    \    string vowels = \"AEIOUaeiou\";\n    foreach(int i, char letter; message)\n\
    \    {\n        if(vowels.find(letter) != -1)\n        {\n            encoded[i]\
    \ = vowels[(vowels.find(letter) + 2) % 10];\n        }\n        else\n       \
    \ {\n            if(isUpper(letter))\n            {\n                encoded[i]\
    \ = toLower(letter);\n            }\n            else\n            {\n       \
    \         encoded[i] = toUpper(letter);\n            }\n        }\n    }\n   \
    \ return encoded.dup.idup;\n}\nunittest\n{\n    alias candidate = encode;\n\n\
    \    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppalh_sjw.d(19): Error: cannot implicitly convert expression `message.length`\
    \ of type `ulong` to `int`\\n/tmp/tmppalh_sjw.d(24): Error: no property `find`\
    \ for type `string`\\n/tmp/tmppalh_sjw.d(26): Error: no property `find` for type\
    \ `string`\\n/tmp/tmppalh_sjw.d(30): Error: undefined identifier `isUpper`\\n/tmp/tmppalh_sjw.d(32):\
    \ Error: undefined identifier `toLower`\\n/tmp/tmppalh_sjw.d(36): Error: undefined\
    \ identifier `toUpper`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"\
    /tmp/tmppalh_sjw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    bool shouldChange = true;\n    bool isVowel = false;\n    char newVowel;\n\
    \    string newMessage = \"\";\n    for (int i = 0; i < message.length; i++) {\n\
    \        newVowel = message[i];\n        shouldChange = isEven(i);\n        isVowel\
    \ = isAVowel(message[i]);\n        newMessage += ((isVowel && shouldChange) ?\
    \ getNextVowel(message[i]) : message[i]);\n        newMessage += ((isVowel &&\
    \ !shouldChange) ? getPrevVowel(message[i]) : message[i]);\n        newMessage\
    \ += ((isVowel && !shouldChange) ? getPrevVowel(message[i]) : message[i]);\n \
    \       newMessage += ((isVowel && !shouldChange) ? getPrevVowel(message[i]) :\
    \ message[i]);\n        newMessage += ((isVowel && !shouldChange) ? getPrevVowel(message[i])\
    \ : message[i]);\n        newMessage += ((isVowel && !shouldChange) ? getPrevVowel(message[i])\
    \ : message[i]);\n        newMessage += ((isVowel && !shouldChange) ? getPrevVowel(message[i])\
    \ : message[i]);\n        newMessage += ((isVowel && !shouldChange) ? getPrevVowel(message[i])\
    \ : message[i]);\n        newMessage += ((isVowel && !shouldChange) ? getPrevVowel(message[i])\
    \ : message[i]);\n        newMessage += ((isVowel && !shouldChange) ? getPrevVowel(message[i])\
    \ : message[i]);\n        newMessage += ((isVowel && !shouldChange) ? getPrevVowel(message[i])\
    \ : message[i]);\n        newMessage += ((isVowel && !shouldChange) ? getPrevVowel(message[i])\
    \ : message[i]);\n        newMessage += ((isVowel && !shouldChange) ? getPrevVowel(message[i])\
    \ : message[i]);\n        newMessage += ((isVowel && !shouldChange) ? getPrevV\n\
    unittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") ==\
    \ \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp085v3hfr.d(41): Error: found `unittest` when expecting `:`\\\
    n/tmp/tmp085v3hfr.d(40): Error: found `void` when expecting `)`\\n/tmp/tmp085v3hfr.d(51):\
    \ Error: found `main` when expecting `;` following statement\\n/tmp/tmp085v3hfr.d(51):\
    \ Error: found `End of File` when expecting `;` following statement\\n/tmp/tmp085v3hfr.d(51):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmp085v3hfr.d(51): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp085v3hfr.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string encoded = \"\";\n    char vowels[6] = {'a', 'e', 'i', 'o', 'u',\
    \ 'y'};\n    foreach(ch; message)\n    {\n        if(ch >= 'a' && ch <= 'z')\n\
    \        {\n            if(ch >= 'a' && ch <= 'z')\n            {\n          \
    \      encoded ~= to!char(ch + ('A' - 'a'));\n            }\n            else\n\
    \            {\n                encoded ~= to!char(ch + ('a' - 'A'));\n      \
    \      }\n            continue;\n        }\n        else\n        {\n        \
    \    encoded ~= ch;\n        }\n    }\n    return encoded;\n}\nunittest\n{\n \
    \   alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzgq2i51s.d(20): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `char[6] vowels`\\n/tmp/tmpzgq2i51s.d(20): Error: a struct is not a valid\
    \ initializer for a `char[6]`\\n/tmp/tmpzgq2i51s.d(27): Error: template instance\
    \ `to!char` template `to` is not defined\\n/tmp/tmpzgq2i51s.d(31): Error: template\
    \ instance `to!char` template `to` is not defined\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpzgq2i51s.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    int len = message.length;\n    char [] newstring = new char[len];\n\
    \    char newchar;\n    for (int i = 0; i < len; i++)\n    {\n        newchar\
    \ = message[i];\n        if (newchar == 'e')\n        {\n            newchar =\
    \ 'g';\n        }\n        else if (newchar == 'i')\n        {\n            newchar\
    \ = 'k';\n        }\n        else if (newchar == 'o')\n        {\n           \
    \ newchar = 'q';\n        }\n        else if (newchar == 'u')\n        {\n   \
    \         newchar = 'y';\n        }\n        else if (newchar == 'E')\n      \
    \  {\n            newchar = 'G';\n        }\n        else if (newchar == 'I')\n\
    \        {\n            newchar = 'K';\n        }\n        else if (newchar ==\
    \ 'O')\n        {\n            newchar = 'Q';\n        }\n        else if (newchar\
    \ == 'U')\n        {\n            newchar = 'Y';\n        }\n        else if (newchar.isUpper\
    \ == true)\n        {\n            newchar = newchar.toLower;\n        }\n   \
    \     else if (newchar.isLower == true)\n        {\n            newchar = newchar.toUpper;\n\
    \        }\n        newstring[i] = newchar;\n    }\n    return newstring.dup;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpom31_9cz.d(19): Error: cannot implicitly convert expression `message.length`\
    \ of type `ulong` to `int`\\n/tmp/tmpom31_9cz.d(57): Error: no property `isUpper`\
    \ for type `char`\\n/tmp/tmpom31_9cz.d(59): Error: no property `toLower` for type\
    \ `char`\\n/tmp/tmpom31_9cz.d(61): Error: no property `isLower` for type `char`\\\
    n/tmp/tmpom31_9cz.d(63): Error: no property `toUpper` for type `char`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpom31_9cz.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string new_message = \"\";\n    string all_letters = \"aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ\"\
    ;\n    string vowels = \"aAeEiIoOuU\";\n    for (int i = 0; i < message.length;\
    \ i++) {\n        for (int j = 0; j < all_letters.length; j++) {\n           \
    \ if (message[i] == all_letters[j]) {\n                int indx = j;\n       \
    \         if (indx + 1 == all_letters.length) {\n                    indx = 0;\n\
    \                }\n                new_message += all_letters[indx + 1];\n  \
    \          }\n        }\n    }\n    return new_message;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5aogr5pp.d(29): Error: slice `new_message` is not mutable\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5aogr5pp.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    // function will convert message to lowercase\n    message = toLower(message);\n\
    unittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") ==\
    \ \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4zkhbfd9.d(21): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4zkhbfd9.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n  string alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  string vowels =\
    \ \"AEIOU\";\n  string output = \"\";\n  for (size_t i = 0; i < message.length();\
    \ i++) {\n    char c = message[i];\n    size_t index = alphabet.find(c);\n   \
    \ if (index != string::npos) {\n      size_t index_vowel = vowels.find(c);\n \
    \     if (index_vowel != string::npos) {\n        c = vowels[(index_vowel + 2)\
    \ % vowels.length()];\n      }\n      output += c;\n    } else {\n      output\
    \ += c;\n    }\n  }\n  return output;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpno8a7_sf.d(25): Error: found `:` when expecting `)`\\n/tmp/tmpno8a7_sf.d(25):\
    \ Error: found `:` instead of statement\\n/tmp/tmpno8a7_sf.d(27): Error: found\
    \ `:` when expecting `)`\\n/tmp/tmpno8a7_sf.d(27): Error: found `:` instead of\
    \ statement\\n/tmp/tmpno8a7_sf.d(31): Error: declaration expected, not `else`\\\
    n/tmp/tmpno8a7_sf.d(33): Error: unrecognized declaration\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpno8a7_sf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(c; message) \n    {\n        char c2 =\
    \ toLower(c);\n        if (c2 >= 'a' && c2 <= 'z') \n        {\n            if\
    \ (c2 == 'z')\n                c2 = 'a';\n            else if (c2 == 'y')\n  \
    \              c2 = 'b';\n            else\n                c2 += 2;\n       \
    \     if (c >= 'A' && c <= 'Z')\n                c2 = toupper(c2);\n        }\n\
    \        else if (c2 == 'a' || c2 == 'e' || c2 == 'i' || c2 == 'o' || c2 == 'u')\
    \ \n        {\n            if (c2 == 'u')\n                c2 = 'a';\n       \
    \     else if (c2 == 'o')\n                c2 = 'e';\n            else\n     \
    \           c2 += 2;\n            if (c >= 'A' && c <= 'Z')\n                c2\
    \ = toupper(c2);\n        }\n        result ~= c2;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbs0nvnjy.d(22): Error: undefined identifier `toLower`\\n/tmp/tmpbs0nvnjy.d(32):\
    \ Error: undefined identifier `toupper`\\n/tmp/tmpbs0nvnjy.d(43): Error: undefined\
    \ identifier `toupper`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"\
    /tmp/tmpbs0nvnjy.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    char temp;\n    for (int i = 0; i < message.length;\
    \ i++)\n    {\n        temp = tolower(message[i]);\n        if (temp == 'a')\n\
    \        {\n            result ~= 'c';\n        }\n        else if (temp == 'e')\n\
    \        {\n            result ~= 'g';\n        }\n        else if (temp == 'i')\n\
    \        {\n            result ~= 'k';\n        }\n        else if (temp == 'o')\n\
    \        {\n            result ~= 'q';\n        }\n        else if (temp == 'u')\n\
    \        {\n            result ~= 's';\n        }\n        else if (temp == 'y')\n\
    \        {\n            result ~= 'a';\n        }\n        else if (temp == 'b')\n\
    \        {\n            result ~= 'd';\n        }\n        else if (temp == 'f')\n\
    \        {\n            result ~= 'h';\n        }\n        else if (temp == 'j')\n\
    \        {\n            result ~= 'l';\n        }\n        else if (temp == 'p')\n\
    \        {\n            result ~= 'r';\n        }\n        else if (temp == 'v')\n\
    \        {\n            result ~= 't';\n        }\n        else if (temp == 'z')\n\
    \        {\n            result ~= 'b';\n        }\n        else if (temp == 'c')\n\
    \        {\n            result ~= 'e';\n        }\n        else if (temp == 'g')\n\
    \        {\n            result ~= 'i';\n        }\n        else if (temp == 'k')\n\
    \        {\n            result ~= 'm';\n        }\n        else if (temp == 'q')\n\
    \        {\n            result ~= 'u';\n        }\n        else if (temp == 'w')\n\
    \        {\n            result ~= 'y';\n        }\n        else if (temp == 'd')\n\
    \        {\n            result ~= 'f';\n        }\n        else if (temp == 'h')\n\
    \        {\n            result ~= 'j';\n        }\n        else if (temp == 'l')\n\
    \        {\n\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx7zf62lj.d(103): Error: found `unittest` instead of statement\\\
    n/tmp/tmpx7zf62lj.d(113): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmpx7zf62lj.d(113): Error: found `End of File` when\
    \ expecting `}` following compound statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpx7zf62lj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string encoded_message = \"\";\n    foreach(char c; message)\n    {\n\
    \        if(c >= 'a' && c <= 'z')\n        {\n            c -= ('a' - 'A');\n\
    \        }\n        if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\
    \        {\n            if(c == 'U')\n            {\n                c = 'A';\n\
    \            }\n            else\n            {\n                c++;\n      \
    \          c++;\n            }\n        }\n        encoded_message ~= c;\n   \
    \ }\n    return encoded_message;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpsbob8_ot.d(46): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427fe5]\\n??:? void tmpsbob8_ot.__unittest_L42_C1()\
    \ [0x427b86]\\n??:? void tmpsbob8_ot.__modtest() [0x427d64]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c67b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b58a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ff61]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430410]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42feed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b561]\\n??:? runModuleUnitTests [0x42c451]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428434]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4283bb]\\n??:? _d_run_main [0x428326]\\n??:? main [0x427d77]\\\
    n??:? __libc_start_main [0x139a3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    string result;\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n\
    \        {\n            if(isupper(c))\n            {\n                result\
    \ ~= tolower(c);\n            }\n            else if(islower(c))\n           \
    \ {\n                result ~= toupper(c);\n            }\n        }\n       \
    \ else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcc77obhv.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmpcc77obhv.d(24):\
    \ Error: undefined identifier `isupper`\\n/tmp/tmpcc77obhv.d(26): Error: undefined\
    \ identifier `tolower`\\n/tmp/tmpcc77obhv.d(28): Error: undefined identifier `islower`\\\
    n/tmp/tmpcc77obhv.d(30): Error: undefined identifier `toupper`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcc77obhv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is\
    \ a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message)\
    \ \n{\n    int length = message.length;\n    for (int i = 0; i < length; i++)\n\
    \    {\n        char c = message[i];\n        if (c >= 'a' && c <= 'z')\n    \
    \    {\n            message[i] = 'A' + (c - 'a');\n        }\n        else if\
    \ (c >= 'A' && c <= 'Z')\n        {\n            message[i] = 'a' + (c - 'A');\n\
    \        }\n        else\n        {\n            continue;\n        }\n    }\n\
    \    return message;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkr74flcf.d(19): Error: cannot implicitly convert expression `message.length`\
    \ of type `ulong` to `int`\\n/tmp/tmpkr74flcf.d(25): Error: cannot modify `immutable`\
    \ expression `message[cast(ulong)i]`\\n/tmp/tmpkr74flcf.d(29): Error: cannot modify\
    \ `immutable` expression `message[cast(ulong)i]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpkr74flcf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
