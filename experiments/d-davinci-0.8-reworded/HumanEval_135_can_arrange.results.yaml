language: d
name: HumanEval_135_can_arrange
results:
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long highest_index = -1L;\n    for (long\
    \ i = 1L; i < arr.length; i++)\n    {\n        if (arr[i] <= arr[i - 1L])\n  \
    \      {\n            highest_index = i - 1L;\n        }\n    }\n    return highest_index;\n\
    }\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpo5ky4v27.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281dd]

    ??:? void tmpo5ky4v27.__unittest_L27_C1() [0x427deb]

    ??:? void tmpo5ky4v27.__modtest() [0x427f60]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c23b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430261]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430710]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]

    ??:? runModuleUnitTests [0x42c011]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160769
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n  long l = arr.length;\n  foreach(long i,\
    \ long j; arr[i..l])\n  {\n    //printf(\" %d %d %d %d\\n\", i, j, arr[i], arr[j]);\n\
    \    if(arr[i] > arr[j])\n      return j;\n  }\n  return -1;\n}\nunittest\n{\n\
    \    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L])\
    \ == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmp1ojxpr.d(18): Error: undefined identifier `i`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmp1ojxpr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160769
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long position = -1L;\n    for (int i\
    \ = 0; i < arr.length; i++)\n    {\n        if (arr[i] <= arr[i-1])\n        {\n\
    \            position = i;\n            break;\n        }\n    }\n    return position;\n\
    }\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmp1d9vg4dt.d(20): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42828e]

    ??:? long tmp1d9vg4dt.can_arrange(long[]) [0x427d58]

    ??:? void tmp1d9vg4dt.__unittest_L28_C1() [0x427dcc]

    ??:? void tmp1d9vg4dt.__modtest() [0x427f5c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c23b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430261]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430710]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]

    ??:? runModuleUnitTests [0x42c011]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch'
  stdout: ''
  timestamp: 1660160769
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n  long last = ~arr[0];\n  foreach(i, e;\
    \ arr)\n  {\n    if (last < e)\n    {\n      return i - 1;\n    }\n    last =\
    \ e;\n  }\n  return -1;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n\
    \    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6tw388l5.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281dd]

    ??:? void tmp6tw388l5.__unittest_L28_C1() [0x427deb]

    ??:? void tmp6tw388l5.__modtest() [0x427f60]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c23b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430261]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430710]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]

    ??:? runModuleUnitTests [0x42c011]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160769
- exit_code: 0
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long total = 0;\n    foreach(long x;\
    \ arr)\n    {\n        if(x <= total)\n        {\n            return total;\n\
    \        }\n        total++;\n    }\n    return -1;\n}\nunittest\n{\n    alias\
    \ candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n\
    \    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L,\
    \ 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L,\
    \ 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160769
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = 0L;\n    foreach(idx, x;\
    \ arr)\n    {\n        if(idx == 0)\n        {\n            max = x;\n       \
    \ }\n        else\n        {\n            if(x < max)\n            {\n       \
    \         return idx - 1;\n            }\n            else\n            {\n  \
    \              max = x;\n            }\n        }\n    }\n    return -1L;\n}\n\
    unittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L,\
    \ 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpbtd4thxc.d(42): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281d5]

    ??:? void tmpbtd4thxc.__unittest_L38_C1() [0x427de3]

    ??:? void tmpbtd4thxc.__modtest() [0x427f58]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c1bf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b052]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4301e5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430694]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430171]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b029]

    ??:? runModuleUnitTests [0x42bf95]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428624]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160769
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    if (arr.length == 0)\n        return\
    \ -1L;\n    if (arr.length == 1)\n        return 0L;\n    if (arr.length == 2)\n\
    \        return arr[0] <= arr[1] ? 0L : -1L;\n    long[] smalls = new long[arr.length];\n\
    \    smalls[0] = -1L;\n    smalls[1] = arr[0] <= arr[1] ? 0L : -1L;\n    for (long\
    \ i = 2L; i < arr.length; i++)\n    {\n        if (arr[i - 1L] < arr[i])\n   \
    \         smalls[i] = smalls[i - 1L];\n        else if (arr[i - 1L] == arr[i])\n\
    \            smalls[i] = i - 1L;\n        else\n        {\n            auto index\
    \ = smalls[i - 1L];\n            if (index == -1L)\n                smalls[i]\
    \ = -1L;\n            else\n            {\n                while (index >= 0L\
    \ && arr[i] <= arr[index])\n                    index = smalls[index];\n     \
    \           smalls[i] = index;\n            }\n        }\n    }\n    return smalls[arr.length\
    \ - 1L];\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpev9lnbkg.d(51): unittest failure

    ----------------

    ??:? _d_unittestp [0x42851d]

    ??:? void tmpev9lnbkg.__unittest_L47_C1() [0x428127]

    ??:? void tmpev9lnbkg.__modtest() [0x42829c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5d7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b46a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306f5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430ba4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430681]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b441]

    ??:? runModuleUnitTests [0x42c3ad]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4289e0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160769
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long last = 0;\n    long result = -1;\n\
    \    foreach(e; arr)\n    {\n        if(e < last)\n        {\n            if(result\
    \ == -1)\n            {\n                result = last;\n            }\n     \
    \       else\n            {\n                result = max(result, e);\n      \
    \      }\n        }\n        last = e;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkpjdlvvf.d(29): Error: undefined identifier `max`, did you mean
    function `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkpjdlvvf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160769
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long result = 0L;\n    foreach(item;\
    \ arr) \n    {\n        result = max(result, item - 1L);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv_0fj01_.d(20): Error: undefined identifier `max`, did you mean
    function `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv_0fj01_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160769
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long[] new_arr;\n    new_arr[] = arr[0\
    \ .. $];\n    new_arr[] = sort(new_arr[]);\n    foreach(i, v; arr)\n    {\n  \
    \      if(v != new_arr[i])\n        {\n            return i - 1;\n        }\n\
    \    }\n    return -1;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n\
    \    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp22_ruzax.d(19): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp22_ruzax.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160769
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long result = -1L;\n    for (long i\
    \ = 1L; i < arr.length; i++) \n    {\n        if (arr[i] <= arr[i - 1L]) \n  \
    \      {\n            if (result < i - 1L) \n            {\n                result\
    \ = i - 1L;\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpckalzcpv.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281f5]

    ??:? void tmpckalzcpv.__unittest_L30_C1() [0x427dff]

    ??:? void tmpckalzcpv.__modtest() [0x427f74]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c253]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0e6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430279]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430728]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430205]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0bd]

    ??:? runModuleUnitTests [0x42c029]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286b8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160769
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = 0L;\n    long max_i = -1L;\n\
    \    foreach(i, x; arr)\n    {\n        if(x < max)\n        {\n            if(i\
    \ - 1 > max_i)\n            {\n                max_i = i - 1;\n            }\n\
    \        }\n        else\n        {\n            max = x;\n        }\n    }\n\
    \    return max_i;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n   \
    \ assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L,\
    \ 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L])\
    \ == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6tsxq6uz.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281dd]

    ??:? void tmp6tsxq6uz.__unittest_L35_C1() [0x427de7]

    ??:? void tmp6tsxq6uz.__modtest() [0x427f5c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c1c7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b05a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4301ed]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43069c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430179]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b031]

    ??:? runModuleUnitTests [0x42bf9d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42862c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160769
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    if (arr.length < 2) return -1L;\n  \
    \  foreach (i, ref x; arr)\n    {\n        long nx = -1L;\n        if (i+1 !=\
    \ arr.length) nx = arr[i+1];\n        if (x <= nx) return i;\n    }\n    return\
    \ -1L;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp77w23hmg.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x428215]

    ??:? void tmp77w23hmg.__unittest_L26_C1() [0x427e23]

    ??:? void tmp77w23hmg.__modtest() [0x427f98]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c273]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b106]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430299]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430748]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430225]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0dd]

    ??:? runModuleUnitTests [0x42c049]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286d8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160769
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long result = -1L;\n    long currIndex\
    \ = arr.length - 1L;\n    while (currIndex >= 0L) {\n        if (currIndex ==\
    \ 0L) {\n            result = -1L;\n            break;\n        }\n        if\
    \ (arr[currIndex] < arr[currIndex - 1L]) {\n            result = currIndex - 1L;\n\
    \            break;\n        }\n        currIndex -= 1L;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3w5s8s0t.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281fd]

    ??:? void tmp3w5s8s0t.__unittest_L32_C1() [0x427e0b]

    ??:? void tmp3w5s8s0t.__modtest() [0x427f80]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c25b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0ee]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430281]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430730]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43020d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0c5]

    ??:? runModuleUnitTests [0x42c031]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286c0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160769
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long idx = -1L;\n    int arr_size =\
    \ arr.length;\n    for (int i = 0; i < arr_size; i++) {\n        if (arr[i] <=\
    \ arr[i - 1]) {\n            idx = i;\n            break;\n        }\n    }\n\
    \    return idx;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9mso78pq.d(18): Error: cannot implicitly convert expression `arr.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9mso78pq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160769
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    foreach(idx, value; arr)\n    {\n  \
    \      if(idx!=0 && arr[idx-1]<=value)\n            return idx-1;\n    }\n   \
    \ return -1;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvv5bt1wc.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281dd]

    ??:? void tmpvv5bt1wc.__unittest_L24_C1() [0x427deb]

    ??:? void tmpvv5bt1wc.__modtest() [0x427f60]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c23b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430261]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430710]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]

    ??:? runModuleUnitTests [0x42c011]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160769
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long last = arr[0];\n    long lastIndex\
    \ = 0;\n    long current = 0;\n    long maxIndex = 0;\n    foreach(i; 1..arr.length)\n\
    \    {\n        current = arr[i];\n        if(current > last)\n        {\n   \
    \         maxIndex = i;\n        }\n        else\n        {\n            maxIndex\
    \ = lastIndex;\n        }\n        last = current;\n        lastIndex = i;\n \
    \   }\n    return maxIndex;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7wn_8mv1.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x42820d]

    ??:? void tmp7wn_8mv1.__unittest_L37_C1() [0x427e17]

    ??:? void tmp7wn_8mv1.__modtest() [0x427f8c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c26b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0fe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430291]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430740]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43021d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d5]

    ??:? runModuleUnitTests [0x42c041]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286d0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160769
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    if (arr.length <= 1)\n        return\
    \ -1L;\n    \n    long i = 0L;\n    long max_index = 0L;\n    for (i = 1L; i <\
    \ arr.length; i++)\n    {\n        if (arr[max_index] < arr[i])\n            max_index\
    \ = i;\n        else if (arr[max_index] > arr[i])\n            return max_index;\n\
    \    }\n    return -1L;\n}\n/*\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9n6ifegi.d(31): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9n6ifegi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160768
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    if (arr.length == 0) return -1;\n  \
    \  if (arr.length == 1) return 0;\n    long max = arr[0];\n    long index = 0;\n\
    \    for (size_t i = 1; i < arr.length; i++)\n    {\n        if (arr[i] <= max)\n\
    \        {\n            max = max(max, arr[i]);\n            index = i;\n    \
    \    }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjtp7fsdc.d(25): Error: function expected before `()`, not `max`
    of type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjtp7fsdc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160768
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long res = -1L;\n    for (int i = arr.length\
    \ - 1; i > 0; i--)\n    {\n        if (arr[i] < arr[i - 1])\n        {\n     \
    \       res = cast(long)i;\n            break;\n        }\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfc8dbpup.d(18): Error: cannot implicitly convert expression `arr.length
    - 1LU` of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfc8dbpup.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160769
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    if (arr.length == 0)\n        return\
    \ -1L;\n    long len = arr.length;\n    long index = -1L;\n    for (long i = len\
    \ - 1; i > 0; i--)\n    {\n        if (arr[i] <= arr[i - 1])\n            continue;\n\
    \        else\n        {\n            index = i;\n            break;\n       \
    \ }\n    }\n    return index;\n}\n/*\nCreate a function which validates whether\
    \ a given string is a valid\n    IPv4 address. IPv4 addresses are composed of\
    \ four octets, with each\n    octet containing a value between 0 and 255 inclusive.\n\
    unittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L,\
    \ 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl40lkr2_.d(33): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl40lkr2_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160768
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = -1L;\n    long temp = 0L;\n\
    \    foreach(i;0 .. arr.length)\n    {\n        temp = arr[i];\n        temp =\
    \ temp - (i - 1L);\n        if(temp > arr[i-1])\n        {\n            temp =\
    \ -1L;\n        }\n        if(temp > max)\n        {\n            max = temp;\n\
    \        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmp1wgjwo6r.d(23): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x4282be]

    ??:? long tmp1wgjwo6r.can_arrange(long[]) [0x427d76]

    ??:? void tmp1wgjwo6r.__unittest_L34_C1() [0x427e00]

    ??:? void tmp1wgjwo6r.__modtest() [0x427f90]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c26b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0fe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430291]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430740]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43021d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d5]

    ??:? runModuleUnitTests [0x42c041]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch'
  stdout: ''
  timestamp: 1660160769
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long maxIndex\
    \ = 0;\n    for (long i = 1; i < arr.length; i++) {\n        if (arr[i] > max)\
    \ {\n            max = arr[i];\n            maxIndex = i;\n        }\n    }\n\
    \    return maxIndex;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n\
    \    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7_e58cc7.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428205]

    ??:? void tmp7_e58cc7.__unittest_L27_C1() [0x427e13]

    ??:? void tmp7_e58cc7.__modtest() [0x427f88]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c263]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0f6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430289]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430738]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430215]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0cd]

    ??:? runModuleUnitTests [0x42c039]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    if (arr.length < 2) return -1L;\n  \
    \  long idx = -1L;\n    long mx = arr[0];\n    foreach (i, v; arr[1..$]) {\n \
    \       if (v < mx) {\n            idx = max(idx, i);\n        } else {\n    \
    \        mx = v;\n        }\n    }\n    return idx;\n}\nunittest\n{\n    alias\
    \ candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n\
    \    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L,\
    \ 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L,\
    \ 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp86zq9beb.d(22): Error: undefined identifier `max`, did you mean
    variable `mx`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp86zq9beb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160769
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n  long res = -1L;\n  for (long i = 0L; i\
    \ < arr.length; i++)\n  {\n      if (i > 0L && arr[i] < arr[i - 1L])\n      {\n\
    \          res = i - 1L;\n          break;\n      }\n  }\n  return res;\n}\n//\n\
    unittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L,\
    \ 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpeotxtqvt.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281ed]

    ??:? void tmpeotxtqvt.__unittest_L29_C1() [0x427df7]

    ??:? void tmpeotxtqvt.__modtest() [0x427f6c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c24b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430271]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430720]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0b5]

    ??:? runModuleUnitTests [0x42c021]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160769
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long i = 0L;\n    foreach(a; arr) \n\
    \    {\n        if(a > arr[i])\n            i = a;\n    }\n    return i;\n}\n\
    /*\n    In a given array, find the most frequent element. For example,\n    given\
    \ the array [3, 1, 1, 3, 2, 1, 3, 3, 3, 3], the most frequent\n    element is\
    \ 3 with 4 occurrences. If there are multiple such\n    elements, just return\
    \ one.\n*/\nlong most_frequent(long[] a) \n{\n    long[] counts = new long[max(a)\
    \ + 1];\n    long max = 0L;\n    long maxCount = 0L;\n    foreach(x; a)\n    {\n\
    \        counts[x]++;\n        if(counts[x] > maxCount)\n        {\n         \
    \   maxCount = counts[x];\n            max = x;\n        }\n    }\n    return\
    \ max;\n}\n// (a + b + c)2 = a2 + b2 + c2 + 2(ab + bc + ca)\nlong sum_of_squares(long\
    \ a, long b, long c) \n{\n    return (a * a) + (b * b) + (c * c) + 2L * (a * b\
    \ + b * c + c * a);\n}\n// form of a function that returns the sum of squares:\n\
    long sum_of_squares_func(long[] x) \n{\n    long sum = 0L;\n    foreach(i; x)\
    \ \n    {\n        sum += i * i;\n    }\n    long sum2 = 0L;\n    foreach(i; x)\
    \ \n    {\n        foreach(j; x) \n        {\n            sum2 += i * j;\n   \
    \     }\n    }\n    return sum + 2L * sum2;\n}\nlong repeat_length(long n) \n\
    {\n    long remainders = 0L;\n    long m = 1L;\n    long[] remainders_array =\
    \ new long[n + 1];\n    remainders_array[0] = 0L;\n    while(1) \nunittest\n{\n\
    \    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L])\
    \ == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqk5gzdmz.d(77): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqk5gzdmz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160769
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    if (arr.length == 0)\n        return\
    \ -1L;\n    long max_index = -1L;\n    long max_num = arr[0];\n    long max_index_\
    \ = 0L;\n    for (long i = 1L; i < arr.length; i++)\n    {\n        if (arr[i]\
    \ > max_num)\n        {\n            max_num = arr[i];\n            max_index_\
    \ = i;\n        }\n        if (arr[i] <= arr[i - 1L])\n        {\n           \
    \ max_index = max_index_;\n            max_num = arr[i];\n            max_index_\
    \ = i;\n        }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate\
    \ = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpk8mus741.d(42): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282b5]

    ??:? void tmpk8mus741.__unittest_L38_C1() [0x427ec3]

    ??:? void tmpk8mus741.__modtest() [0x428038]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c313]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1a6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430339]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4307e8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302c5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b17d]

    ??:? runModuleUnitTests [0x42c0e9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428778]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160769
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n\tlong index = arr.length;\n\tforeach(i,\
    \ el; arr)\n\t{\n\t\tif(el <= arr[i - 1])\n\t\t{\n\t\t\tindex = i - 1;\n\t\t\t\
    break;\n\t\t}\n\t}\n\treturn index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmptjxx3ovj.d(20): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42828e]

    ??:? long tmptjxx3ovj.can_arrange(long[]) [0x427d4b]

    ??:? void tmptjxx3ovj.__unittest_L28_C1() [0x427dcc]

    ??:? void tmptjxx3ovj.__modtest() [0x427f5c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c23b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430261]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430710]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]

    ??:? runModuleUnitTests [0x42c011]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch'
  stdout: ''
  timestamp: 1660160769
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long largest_index = -1L;\n    foreach(element;\
    \ arr)\n    {\n        if(element >= arr[largest_index])\n        {\n        \
    \    largest_index = cast(long)element;\n        }\n    }\n    return largest_index;\n\
    }\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpwfaruzr8.d(20): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42828e]

    ??:? long tmpwfaruzr8.can_arrange(long[]) [0x427d4f]

    ??:? void tmpwfaruzr8.__unittest_L27_C1() [0x427dcc]

    ??:? void tmpwfaruzr8.__modtest() [0x427f5c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c23b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430261]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430710]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]

    ??:? runModuleUnitTests [0x42c011]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch'
  stdout: ''
  timestamp: 1660160769
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long res = -1;\n\
    \    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] > max)\n\
    \        {\n            max = arr[i];\n            res = i;\n        }\n    }\n\
    \    return res;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_0_kz_jg.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x428205]

    ??:? void tmp_0_kz_jg.__unittest_L29_C1() [0x427e13]

    ??:? void tmp_0_kz_jg.__modtest() [0x427f88]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c263]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0f6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430289]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430738]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430215]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0cd]

    ??:? runModuleUnitTests [0x42c039]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160769
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    long idx =\
    \ 0L;\n    for (;idx < arr.length - 1L; idx += 1L)\n    {\n        if (arr[idx]\
    \ > arr[idx + 1L])\n        {\n            break;\n        }\n    }\n    return\
    \ idx == arr.length - 1L ? -1L : idx;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp344x1tpe.d(48): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281e5]

    ??:? void tmp344x1tpe.__unittest_L44_C1() [0x427df3]

    ??:? void tmp344x1tpe.__modtest() [0x427f68]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c243]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0d6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430269]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430718]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301f5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]

    ??:? runModuleUnitTests [0x42c019]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286a8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160769
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long n = arr.length;\n    if (n == 1)\
    \ return -1;\n    long right_max = arr[n - 1];\n    long cnt = 0;\n    for (long\
    \ i = n - 2; i >= 0; i--)\n    {\n        if (arr[i] <= right_max) \n        {\n\
    \            cnt++;\n            right_max = max(right_max, arr[i]);\n       \
    \ }\n    }\n    return (cnt == n - 1) ? -1 : cnt;\n}\nunittest\n{\n    alias candidate\
    \ = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk3wssd8b.d(26): Error: undefined identifier `max`, did you mean
    function `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk3wssd8b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160769
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long index = -1L;\n    for (int i =\
    \ 0; i < arr.length - 1; i++)\n    {\n        if (arr[i] >= arr[i + 1])\n    \
    \    {\n            continue;\n        }\n        else if (arr[i] < arr[i + 1])\n\
    \        {\n            index = i + 1;\n        }\n    }\n    return index;\n\
    }\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5ffz_yvz.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x428235]

    ??:? void tmp5ffz_yvz.__unittest_L31_C1() [0x427e3f]

    ??:? void tmp5ffz_yvz.__modtest() [0x427fb4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c293]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b126]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302b9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430768]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430245]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0fd]

    ??:? runModuleUnitTests [0x42c069]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286f8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160769
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    if (arr.length == 0)\n        return\
    \ -1L;\n    if (arr.length == 1)\n        return 0L;\n    if (arr.length == 2)\n\
    \        return 1L;\n    long[] temp = arr.dup;\n    sort(temp);\n    long count\
    \ = 0L;\n    long max = 0L;\n    long index = 0L;\n    for (int i = 0; i < arr.length;\
    \ i++) \n    {\n        if (i == 0)\n            continue;\n        if (arr[i]\
    \ <= arr[i - 1])\n            continue;\n        if (temp[i] == arr[i])\n    \
    \        count++;\n        if (count > max) \n        {\n            max = count;\n\
    \            index = i;\n        }\n    }\n    return index;\n}\nunittest\n{\n\
    \    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L])\
    \ == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkhseofrm.d(24): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkhseofrm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160769
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long prev = arr[0L];\n    long largestIndex\
    \ = -1L;\n    for (long i = 1L; i < arr.length; i++) \n    {\n        if (arr[i]\
    \ <= prev) \n        {\n            largestIndex = i;\n        }\n        prev\
    \ = arr[i];\n    }\n    return largestIndex;\n}\nunittest\n{\n    alias candidate\
    \ = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpw3e2p9jl.d(17): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x4282b6]

    ??:? long tmpw3e2p9jl.can_arrange(long[]) [0x427d0b]

    ??:? void tmpw3e2p9jl.__unittest_L29_C1() [0x427f5a]

    ??:? void tmpw3e2p9jl.__modtest() [0x427f88]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c263]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0f6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430289]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430738]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430215]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0cd]

    ??:? runModuleUnitTests [0x42c039]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch'
  stdout: ''
  timestamp: 1660160769
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n\tauto tmp = arr[$-1];\n\t\n\tfor(long i\
    \ = arr.length-1; i >= 0; i--)\n\t{\n\t\tif(arr[i] <= tmp)\n\t\t{\n\t\t\treturn\
    \ i;\n\t\t}\n\t\ttmp = arr[i];\n\t}\n\treturn -1;\n}\n/*\n    Create a function\
    \ which returns the first character of a string. The given\n    string will not\
    \ be empty.\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnhi829a_.d(29): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhi829a_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160769
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    auto a = arr.dup;\n    a.sort();\n \
    \   auto i = a.length - 1;\n    while (i > 0)\n    {\n        if (a[i] > a[i -\
    \ 1])\n            return arr.indexOf(a[i]);\n        i--;\n    }\n    return\
    \ -1L;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqyr3y2ez.d(18): Error: no property `sort` for type `long[]`

    /tmp/tmpqyr3y2ez.d(23): Error: no property `indexOf` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqyr3y2ez.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160769
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long ret = -1L;\n    foreach(i, v; arr)\n\
    \    {\n        if(v < arr[i - 1])\n        {\n            ret = i - 1;\n    \
    \        break;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias\
    \ candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n\
    \    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L,\
    \ 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L,\
    \ 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpn7hu0fih.d(20): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428296]

    ??:? long tmpn7hu0fih.can_arrange(long[]) [0x427d52]

    ??:? void tmpn7hu0fih.__unittest_L28_C1() [0x427dd4]

    ??:? void tmpn7hu0fih.__modtest() [0x427f64]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c243]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0d6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430269]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430718]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301f5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]

    ??:? runModuleUnitTests [0x42c019]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch'
  stdout: ''
  timestamp: 1660160769
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    if (arr.length < 2) \n        return\
    \ -1L;\n    long max = -1L;\n    for (long i = arr.length - 1; i >= 0; i--) \n\
    \    {\n        if (arr[i] < arr[i - 1]) \n            max = i;\n    }\n    return\
    \ max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpnp5ile25.d(22): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42829e]

    ??:? long tmpnp5ile25.can_arrange(long[]) [0x427d67]

    ??:? void tmpnp5ile25.__unittest_L27_C1() [0x427ddc]

    ??:? void tmpnp5ile25.__modtest() [0x427f6c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c24b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430271]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430720]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0b5]

    ??:? runModuleUnitTests [0x42c021]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch'
  stdout: ''
  timestamp: 1660160769
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    bool found = false;\n    long index\
    \ = 0L;\n    for (long i = 0L; i < arr.length; i++)\n    {\n        if (arr[i]\
    \ > arr[i-1])\n        {\n            found = true;\n            index = i;\n\
    \        }\n    }\n    if (found)\n    {\n        return index;\n    }\n    else\n\
    \    {\n        return -1L;\n    }\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpasr_8lwe.d(21): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42829e]

    ??:? long tmpasr_8lwe.can_arrange(long[]) [0x427d53]

    ??:? void tmpasr_8lwe.__unittest_L36_C1() [0x427de0]

    ??:? void tmpasr_8lwe.__modtest() [0x427f70]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c24b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430271]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430720]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0b5]

    ??:? runModuleUnitTests [0x42c021]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch'
  stdout: ''
  timestamp: 1660160769
- exit_code: 0
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long answer = 0L;\n    long possibleAnswer\
    \ = 0L;\n    long i = 1L;\n    while (i < arr.length) {\n        if (arr[i] <\
    \ arr[i - 1L]) {\n            possibleAnswer = i;\n        }\n        else {\n\
    \            if (answer < possibleAnswer) {\n                answer = possibleAnswer;\n\
    \            }\n            possibleAnswer = 0L;\n        }\n        i++;\n  \
    \  }\n    if (answer < possibleAnswer) {\n        answer = possibleAnswer;\n \
    \   }\n    if (answer == 0L) {\n        answer = -1L;\n    }\n    return answer;\n\
    }\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160770
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long i;\n    long len = arr.length;\n\
    \    long ret = -1L;\n    for (i = 1L; i < len; i++)\n    {\n        if (arr[i]\
    \ <= arr[i - 1L])\n        {\n            ret = i - 1L;\n            break;\n\
    \        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3yljzdjh.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281ed]

    ??:? void tmp3yljzdjh.__unittest_L30_C1() [0x427df7]

    ??:? void tmp3yljzdjh.__modtest() [0x427f6c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c24b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430271]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430720]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0b5]

    ??:? runModuleUnitTests [0x42c021]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160769
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long maximum, index;\n    long start\
    \ = arr.length;\n    long[] incr = new long[arr.length];\n    long[] ind = new\
    \ long[arr.length];\n    ind[0] = 0;\n    incr[0] = arr[0];\n    for (long i =\
    \ 1; i < arr.length; i++)\n    {\n        maximum = arr[i];\n        index = 0;\n\
    \        for (long j = 0; j < i; j++)\n        {\n            if (arr[i] >= incr[j])\n\
    \            {\n                if (maximum < incr[j])\n                {\n  \
    \                  maximum = incr[j];\n                    index = j;\n      \
    \          }\n            }\n        }\n        incr[i] = maximum;\n        ind[i]\
    \ = index;\n        if (maximum == arr[i])\n        {\n            start = min(start,\
    \ i);\n        }\n    }\n    if (start == arr.length)\n    {\n        return -1;\n\
    \    }\n    return start;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiz7wcdcx.d(42): Error: undefined identifier `min`, did you mean
    function `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiz7wcdcx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160769
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    if (arr.length < 2) return -1L;\n  \
    \  long[] arr_rev = arr.dup.reverse;\n    long[] diff = new long[arr.length];\n\
    \    foreach (index, item; arr_rev)\n    {\n        diff[index] = arr_rev[index]-arr_rev[index+1];\n\
    \    }\n    diff.length = arr.length-1;\n    long[] result = new long[diff.length];\n\
    \    foreach (index, item; diff)\n    {\n        if (item<0) result[index] = -1L;\n\
    \        else result[index] = index;\n    }\n    long largest_index = max(result);\n\
    \    return largest_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp31ifj35d.d(18): Error: no property `reverse` for type `long[]`

    /tmp/tmp31ifj35d.d(31): Error: undefined identifier `max`, did you mean function
    `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp31ifj35d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160769
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long maximum = 0L;\n    long i = 0L;\n\
    \    for (; i < arr.length; i++) \n    {\n        if (arr[i] > maximum) \n   \
    \     {\n            maximum = arr[i];\n        } \n        else \n        {\n\
    \            break;\n        }\n    }\n    return i == arr.length ? -1L : i;\n\
    }\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6nglfwq2.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281e5]

    ??:? void tmp6nglfwq2.__unittest_L32_C1() [0x427f1b]

    ??:? void tmp6nglfwq2.__modtest() [0x427f64]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c243]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0d6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430269]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430718]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301f5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]

    ??:? runModuleUnitTests [0x42c019]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286a8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160769
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long result = -1L;\n    int i = 1;\n\
    \    for (; i < arr.length; i++) {\n        if (arr[i] <= arr[i - 1]) {\n    \
    \        result = i - 1;\n            break;\n        }\n    }\n    if (i == arr.length)\
    \ result = i - 1;\n    return result;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp1fzh8hsc.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281f5]

    ??:? void tmp1fzh8hsc.__unittest_L28_C1() [0x427dff]

    ??:? void tmp1fzh8hsc.__modtest() [0x427f74]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c253]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0e6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430279]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430728]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430205]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0bd]

    ??:? runModuleUnitTests [0x42c029]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286b8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160770
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long ret = -1L;\n    int len = arr.length;\n\
    \    for (int i = len - 1; i > 0; i--) {\n        if (arr[i] <= arr[i - 1]) {\n\
    \            ret = cast(long)i;\n        }\n    }\n    return ret;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8tmu4d7_.d(18): Error: cannot implicitly convert expression `arr.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8tmu4d7_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160769
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long i = 0L;\n    foreach(e; arr)\n\
    \    {\n        if(e < arr[i]) return i;\n        i++;\n    }\n    return -1L;\n\
    }\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpq7mw1qj_.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281dd]

    ??:? void tmpq7mw1qj_.__unittest_L25_C1() [0x427de7]

    ??:? void tmpq7mw1qj_.__modtest() [0x427f5c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c23b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430261]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430710]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]

    ??:? runModuleUnitTests [0x42c011]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160770
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    for (int i = arr.length - 1; i > 0;\
    \ i--) \n    {\n        if (arr[i] <= arr[i - 1]) \n        {\n            return\
    \ i - 1;\n        }\n    }\n    return -1;\n}\nunittest\n{\n    alias candidate\
    \ = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprep8frjd.d(17): Error: cannot implicitly convert expression `arr.length
    - 1LU` of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprep8frjd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160769
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    \n    \n    foreach(long i;0..arr.length)\n\
    \    {\n        if(arr[i]<arr[i-1]) return i-1;\n    }\n    return -1;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmp3kb2vqwh.d(21): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428296]

    ??:? long tmp3kb2vqwh.can_arrange(long[]) [0x427d5a]

    ??:? void tmp3kb2vqwh.__unittest_L25_C1() [0x427dd4]

    ??:? void tmp3kb2vqwh.__modtest() [0x427f64]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c243]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0d6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430269]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430718]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301f5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]

    ??:? runModuleUnitTests [0x42c019]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch'
  stdout: ''
  timestamp: 1660160770
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    int len = arr.length;\n    long next;\n\
    \    for (int i = 0; i < len - 1; i++)\n    {\n        next = arr[i + 1];\n  \
    \      if (arr[i] >= next) return i;\n    }\n    return -1L;\n}\nunittest\n{\n\
    \    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L])\
    \ == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp32gr2g9q.d(17): Error: cannot implicitly convert expression `arr.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp32gr2g9q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160769
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n  long res = -1L;\n  long i = 1L;\n  foreach(elem;\
    \ arr[1L..$])\n  {\n    if(elem < arr[i-1L])\n    {\n      res = i-1L;\n     \
    \ break;\n    }\n    i++;\n  }\n  return res;\n}\nunittest\n{\n    alias candidate\
    \ = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6lnc158g.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x42820d]

    ??:? void tmp6lnc158g.__unittest_L30_C1() [0x427e17]

    ??:? void tmp6lnc158g.__modtest() [0x427f8c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c26b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0fe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430291]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430740]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43021d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d5]

    ??:? runModuleUnitTests [0x42c041]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286d0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160770
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long largest_index = -1L;\n    for (size_t\
    \ i = 1L; i < arr.length; i++)\n    {\n        if (arr[i] <= arr[i - 1L])\n  \
    \      {\n            largest_index = max(largest_index, i - 1L);\n        }\n\
    \    }\n    return largest_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl_isqk89.d(22): Error: undefined identifier `max`, did you mean
    function `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl_isqk89.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160769
- exit_code: 0
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long index = -1L;\n    for (long i =\
    \ 0; i < arr.length; i++)\n    {\n        if (i > 0)\n        {\n            if\
    \ (arr[i - 1L] >= arr[i])\n            {\n                index = i;\n       \
    \     }\n        }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate\
    \ = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160770
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long prev = arr[0];\n    long res =\
    \ 0;\n    long idx = 1;\n    long[] res_arr = new long[arr.length];\n    while\
    \ (idx < arr.length)\n    {\n        if (arr[idx] <= prev)\n        {\n      \
    \      res = idx;\n            res_arr[idx] = idx;\n        }\n        else\n\
    \        {\n            res_arr[idx] = res;\n        }\n        prev = arr[idx];\n\
    \        idx++;\n    }\n    return res_arr[arr.length - 1];\n}\nunittest\n{\n\
    \    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L])\
    \ == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmlxolo6j.d(42): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282a5]

    ??:? void tmpmlxolo6j.__unittest_L37_C1() [0x427f04]

    ??:? void tmpmlxolo6j.__modtest() [0x428024]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c35f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1f2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43047d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43092c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430409]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1c9]

    ??:? runModuleUnitTests [0x42c135]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428768]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160770
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long output = -1L;\n    foreach(i, number;\
    \ arr)\n    {\n        if(number <= arr[i - 1])\n        {\n            output\
    \ = i - 1;\n            break;\n        }\n    }\n    return output;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpuu4_3l1_.d(20): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428296]

    ??:? long tmpuu4_3l1_.can_arrange(long[]) [0x427d52]

    ??:? void tmpuu4_3l1_.__unittest_L28_C1() [0x427dd4]

    ??:? void tmpuu4_3l1_.__modtest() [0x427f64]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c243]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0d6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430269]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430718]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301f5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]

    ??:? runModuleUnitTests [0x42c019]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch'
  stdout: ''
  timestamp: 1660160770
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long prev = arr[0L];\n    long idx =\
    \ 0L;\n    foreach(el; arr[1L..$]) {\n        if (el >= prev) {\n            prev\
    \ = el;\n            idx++;\n        } else {\n            break;\n        }\n\
    \    }\n    return (idx == $-1L) ? -1L : idx;\n}\nunittest\n{\n    alias candidate\
    \ = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0uex8z6p.d(27): Error: `$` is valid only inside [] of index or
    slice

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0uex8z6p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160769
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n  int l = arr.length;\n  int a = arr[0];\n\
    \  int b = arr[1];\n  int c = arr[2];\n  int d = arr[3];\n  int e = arr[4];\n\
    \  if (l < 5)\n  {\n    return -1L;\n  }\n  else\n  {\n    if (a >= b)\n    {\n\
    \      return -1L;\n    }\n    else if (b >= c)\n    {\n      return -1L;\n  \
    \  }\n    else if (c >= d)\n    {\n      return -1L;\n    }\n    else if (d >=\
    \ e)\n    {\n      return -1L;\n    }\n    else\n    {\n      return 3L;\n   \
    \ }\n  }\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn4rej758.d(17): Error: cannot implicitly convert expression `arr.length`
    of type `ulong` to `int`

    /tmp/tmpn4rej758.d(18): Error: cannot implicitly convert expression `arr[0]` of
    type `long` to `int`

    /tmp/tmpn4rej758.d(19): Error: cannot implicitly convert expression `arr[1]` of
    type `long` to `int`

    /tmp/tmpn4rej758.d(20): Error: cannot implicitly convert expression `arr[2]` of
    type `long` to `int`

    /tmp/tmpn4rej758.d(21): Error: cannot implicitly convert expression `arr[3]` of
    type `long` to `int`

    /tmp/tmpn4rej758.d(22): Error: cannot implicitly convert expression `arr[4]` of
    type `long` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn4rej758.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160769
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long n = arr.length;\n    for (long\
    \ i = 1L; i < n; i++)\n    {\n        if (arr[i] < arr[i - 1L]) \n        {\n\
    \            return i - 1L;\n        }\n    }\n    return -1L;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7wuqdibs.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281dd]

    ??:? void tmp7wuqdibs.__unittest_L27_C1() [0x427de7]

    ??:? void tmp7wuqdibs.__modtest() [0x427f5c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c23b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430261]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430710]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]

    ??:? runModuleUnitTests [0x42c011]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160770
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    if (arr.length == 0) return -1;\n  \
    \  if (arr.length == 1) return 0;\n    long largestIdx = -1;\n    long largest\
    \ = arr[0];\n    foreach (i, long val; arr[1..$])\n    {\n        if (val >= largest)\n\
    \        {\n            largest = val;\n            largestIdx = i + 1;\n    \
    \    }\n    }\n    return largestIdx;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpi0sjw08r.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x42822d]

    ??:? void tmpi0sjw08r.__unittest_L31_C1() [0x427e37]

    ??:? void tmpi0sjw08r.__modtest() [0x427fac]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c28b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b11e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430760]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43023d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f5]

    ??:? runModuleUnitTests [0x42c061]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286f0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160770
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long[] max = new long[arr.length];\n\
    \    max[0] = arr[0];\n    long biggest = arr[0];\n    foreach(i, n; arr)\n  \
    \  {\n        if(n > biggest)\n        {\n            biggest = n;\n        }\n\
    \        max[i] = biggest;\n    }\n    long final = -1L;\n    for(long i = arr.length-1;\
    \ i >= 1; i--)\n    {\n        if(arr[i] < max[i-1])\n        {\n            final\
    \ = i;\n        }\n    }\n    return final;\n}\nunittest\n{\n    alias candidate\
    \ = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprxsyp9td.d(28): Error: no identifier for declarator `long`

    /tmp/tmprxsyp9td.d(28): Error: basic type expected, not `=`

    /tmp/tmprxsyp9td.d(28): Error: no identifier for declarator `_error_`

    /tmp/tmprxsyp9td.d(28): Error: found `=` instead of statement

    /tmp/tmprxsyp9td.d(33): Error: basic type expected, not `=`

    /tmp/tmprxsyp9td.d(33): Error: no identifier for declarator `_error_`

    /tmp/tmprxsyp9td.d(33): Error: found `=` instead of statement

    /tmp/tmprxsyp9td.d(36): Error: expression expected, not `final`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprxsyp9td.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160769
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    int n = arr.length;\n    int i;\n  \
    \  long max=arr[0];\n    for(i=1;i<n;i++)\n    {\n        if(arr[i]>max)\n   \
    \     {\n            max=arr[i];\n        }\n        else\n        {\n       \
    \     break;\n        }\n    }\n    return i-1;\n}\nunittest\n{\n    alias candidate\
    \ = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpccwh0kmk.d(17): Error: cannot implicitly convert expression `arr.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpccwh0kmk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160769
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long maxIndex = -1L;\n    foreach(i,e;\
    \ arr)\n    {\n        if(e <= arr[maxIndex]) maxIndex = i;\n    }\n    return\
    \ maxIndex;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpnydazbnm.d(20): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42828e]

    ??:? long tmpnydazbnm.can_arrange(long[]) [0x427d4f]

    ??:? void tmpnydazbnm.__unittest_L24_C1() [0x427dcc]

    ??:? void tmpnydazbnm.__modtest() [0x427f5c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c23b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430261]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430710]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]

    ??:? runModuleUnitTests [0x42c011]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch'
  stdout: ''
  timestamp: 1660160770
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    if (arr.length == 0) \n        return\
    \ -1L;\n    long max_index = arr.length - 1;\n    long max_value = arr[arr.length\
    \ - 1];\n    for (long i = arr.length - 2; i >= 0; i--) \n    {\n        if (arr[i]\
    \ <= max_value) \n        {\n            max_index = i;\n            max_value\
    \ = arr[i];\n        }\n    }\n    return max_index;\n}\nunittest\n{\n    alias\
    \ candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n\
    \    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L,\
    \ 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L,\
    \ 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7fdilnk3.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x428225]

    ??:? void tmp7fdilnk3.__unittest_L31_C1() [0x427e33]

    ??:? void tmp7fdilnk3.__modtest() [0x427fa8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c283]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b116]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302a9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430758]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430235]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ed]

    ??:? runModuleUnitTests [0x42c059]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286e8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160770
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long min = arr[arr.length - 1];\n  \
    \  long max_index = -1L;\n    for (long i = arr.length - 2; i >= 0; i--) \n  \
    \  {\n        if (arr[i] <= min) \n        {\n            max_index = i;\n   \
    \         min = arr[i];\n        }\n    }\n    return max_index;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmppibgxsh4.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x42820d]

    ??:? void tmppibgxsh4.__unittest_L29_C1() [0x427e1b]

    ??:? void tmppibgxsh4.__modtest() [0x427f90]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c26b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0fe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430291]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430740]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43021d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d5]

    ??:? runModuleUnitTests [0x42c041]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286d0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160770
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long size = arr.length;\n    for (long\
    \ i = 0; i < size - 1; i++) \n    {\n        if (arr[i] < arr[i + 1]) \n     \
    \   {\n            return i;\n        }\n    }\n    return -1;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpiswkpxv8.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281dd]

    ??:? void tmpiswkpxv8.__unittest_L27_C1() [0x427de7]

    ??:? void tmpiswkpxv8.__modtest() [0x427f5c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c23b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430261]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430710]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]

    ??:? runModuleUnitTests [0x42c011]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160770
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    foreach(i,v; arr)\n    {\n        if(i\
    \ > 0)\n        {\n            if(arr[i-1] >= v)\n            {\n            \
    \    return i-1;\n            }\n        }\n    }\n    return -1;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpf4cy5nvw.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281e5]

    ??:? void tmpf4cy5nvw.__unittest_L29_C1() [0x427def]

    ??:? void tmpf4cy5nvw.__modtest() [0x427f64]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c243]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0d6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430269]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430718]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301f5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]

    ??:? runModuleUnitTests [0x42c019]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286a8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160770
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long index = -1L;\n    for (long i =\
    \ 1L; i < arr.length; i++)\n    {\n        if (arr[i] <= arr[i - 1L])\n      \
    \  {\n            index = i - 1L;\n            break;\n        }\n    }\n    return\
    \ index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpex61cf_r.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281dd]

    ??:? void tmpex61cf_r.__unittest_L28_C1() [0x427deb]

    ??:? void tmpex61cf_r.__modtest() [0x427f60]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c23b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430261]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430710]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]

    ??:? runModuleUnitTests [0x42c011]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160770
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long curr = arr[0];\n    foreach(ref\
    \ e; arr[1..$])\n    {\n        if(e < curr)\n            return e.index - 1;\n\
    \        else\n            curr = e;\n    }\n    return -1;\n}\n/*\nCreate a function\
    \ which returns the number of integers which are equal to\n    the sum of their\
    \ digits. For example, the result for the array\n    [44, 12, 5] would be 2, as\
    \ are the integers 44 and 12. The result for\n    the array [44, 1, 2, 3, 6, 8,\
    \ 2, 3, 9, 19, 45, 45, 45, 45, 45, 45, 45,\n    45, 45, 45, 45, 45, 45, 45, 45,\
    \ 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,\n    45, 45, 45, 45, 45, 45, 45, 45,\
    \ 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,\n    45, 45, 45, 45, 45, 45, 45, 45,\
    \ 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,\n    45, 45, 45, 45, 45, 45, 45, 45,\
    \ 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,\n    45, 45, 45, 45, 45, 45, 45, 45,\
    \ 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,\n    45, 45, 45, 45, 45, 45, 45, 45,\
    \ 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,\n    45, 45, 45, 45, 45, 45, 45, 45,\
    \ 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,\n    45, 45, 45, 45, 45, 45, 45, 45,\
    \ 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,\n    45, 45, 45, 45, 45, 45, 45, 45,\
    \ 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,\n    45, 45, 45\nunittest\n{\n    alias\
    \ candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n\
    \    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L,\
    \ 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L,\
    \ 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp550zszw_.d(27): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp550zszw_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160769
- exit_code: 0
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n  bool flag = false;\n  long Max = -1;\n\
    \  long length = arr.length;\n  for (int i = 1; i < length; i++)\n  {\n    if\
    \ (arr[i - 1] > arr[i])\n    {\n      Max = i;\n      flag = true;\n    }\n  }\n\
    \  if (flag) return Max;\n  else return -1;\n}\nunittest\n{\n    alias candidate\
    \ = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160770
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long n = arr.length;\n    if (n == 1)\n\
    \        return 0;\n    long[] dp = new long[n + 1];\n    dp[0] = 0;\n    dp[1]\
    \ = 1;\n    foreach (a; arr)\n    {\n        long cnt = 0;\n        foreach (i;\
    \ 2 .. n + 1)\n        {\n            if (a >= arr[dp[i - 1] - 1])\n         \
    \       cnt++;\n            dp[i] = dp[i - 1] + cnt;\n        }\n    }\n    return\
    \ arr.length - dp[n];\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n\
    \    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmplw3176_u.d(28): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x4283de]

    ??:? long tmplw3176_u.can_arrange(long[]) [0x427e1c]

    ??:? void tmplw3176_u.__unittest_L35_C1() [0x427f1c]

    ??:? void tmplw3176_u.__modtest() [0x4280ac]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3e7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430505]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4309b4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430491]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b251]

    ??:? runModuleUnitTests [0x42c1bd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch'
  stdout: ''
  timestamp: 1660160770
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long[] res = new long[arr.length];\n\
    \    for (long i = 0; i < arr.length; i++)\n    {\n        res[i] = arr[i];\n\
    \    }\n    sort(res);\n    return lower_bound(res, arr[arr.length - 1L]);\n}\n\
    unittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L,\
    \ 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpieantkkd.d(22): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpieantkkd.d(23): Error: undefined identifier `lower_bound`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpieantkkd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160770
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    foreach(i, e; arr)\n    {\n        if(e\
    \ < arr[i+1])\n            return i;\n    }\n    return -1;\n}\nunittest\n{\n\
    \    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L])\
    \ == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmphwa21gb6.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281d5]

    ??:? void tmphwa21gb6.__unittest_L24_C1() [0x427ddf]

    ??:? void tmphwa21gb6.__modtest() [0x427f54]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c233]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0c6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430259]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430708]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301e5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b09d]

    ??:? runModuleUnitTests [0x42c009]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428698]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160770
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n\tlong len = arr.length;\n\tlong max_value\
    \ = -1L;\n\tlong max_index = -1L;\n\tfor (long i = 0L; i < len; i++)\n\t{\n\t\t\
    if (arr[i] >= max_value)\n\t\t{\n\t\t\tmax_value = arr[i];\n\t\t\tmax_index =\
    \ i;\n\t\t}\n\t}\n\treturn max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8gth7u3w.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281ed]

    ??:? void tmp8gth7u3w.__unittest_L30_C1() [0x427df7]

    ??:? void tmp8gth7u3w.__modtest() [0x427f6c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c24b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430271]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430720]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0b5]

    ??:? runModuleUnitTests [0x42c021]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160770
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long res = -1L;\n    foreach(i, x; arr)\n\
    \    {\n        if(x <= arr[i - 1])\n        {\n            res = i - 1;\n   \
    \         break;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias\
    \ candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n\
    \    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L,\
    \ 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L,\
    \ 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpwxeae52u.d(20): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428296]

    ??:? long tmpwxeae52u.can_arrange(long[]) [0x427d52]

    ??:? void tmpwxeae52u.__unittest_L28_C1() [0x427dd4]

    ??:? void tmpwxeae52u.__modtest() [0x427f64]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c243]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0d6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430269]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430718]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301f5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]

    ??:? runModuleUnitTests [0x42c019]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch'
  stdout: ''
  timestamp: 1660160770
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long index=arr.length-1;\n    for(int\
    \ i=arr.length-1;i>0;i--)\n    {\n        if(arr[i]<arr[i-1])\n        {\n   \
    \         index=i-1;\n        }\n    }\n    return index;\n}\nunittest\n{\n  \
    \  alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L])\
    \ == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp06_4q6d_.d(18): Error: cannot implicitly convert expression `arr.length
    - 1LU` of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp06_4q6d_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160770
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n\tint n = arr.length;\n\tif (n == 1)\n\t\
    \treturn -1;\n\tlong i = n - 1;\n\tfor (; i >= 0; i--)\n\t{\n\t\tif (arr[i] <\
    \ arr[i - 1])\n\t\t\tbreak;\n\t}\n\treturn i;\n}\nunittest\n{\n    alias candidate\
    \ = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf5o5xn73.d(17): Error: cannot implicitly convert expression `arr.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf5o5xn73.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160770
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long sz = arr.length;\n    if (sz <\
    \ 2)\n        return -1L;\n    else if (arr[$-1] <= arr[$-2])\n        return\
    \ -1L;\n    else {\n        long m = arr[$-1];\n        long ret = sz - 1;\n \
    \       foreach (i, e; arr[0 .. $-1])\n            if (e > m) {\n            \
    \    ret = i;\n                break;\n            }\n        return ret;\n  \
    \  }\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpd9ws59sv.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x42827d]

    ??:? void tmpd9ws59sv.__unittest_L33_C1() [0x427e8b]

    ??:? void tmpd9ws59sv.__modtest() [0x428000]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c2db]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b16e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430301]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4307b0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43028d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b145]

    ??:? runModuleUnitTests [0x42c0b1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428740]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160770
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    auto min = arr[$-1];\n    auto index\
    \ = -1L;\n    for (long i = $ - 2; i >= 0; i--) \n    {\n        if (arr[i] <=\
    \ min) \n        {\n            min = arr[i];\n            index = i;\n      \
    \  }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbnzczygq.d(19): Error: `$` is valid only inside [] of index or
    slice

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbnzczygq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160770
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long result = 0L;\n    for (long i =\
    \ 0L; i < arr.length; i++) \n    {\n        if (arr[i] > arr[i + 1L]) \n     \
    \   {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpt13j6gqv.d(20): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428286]

    ??:? long tmpt13j6gqv.can_arrange(long[]) [0x427d4f]

    ??:? void tmpt13j6gqv.__unittest_L27_C1() [0x427dc4]

    ??:? void tmpt13j6gqv.__modtest() [0x427f54]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c233]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0c6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430259]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430708]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301e5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b09d]

    ??:? runModuleUnitTests [0x42c009]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch'
  stdout: ''
  timestamp: 1660160770
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long index = -1L;\n    long max = arr[0];\n\
    \    for (int i = 1; i < arr.length; i++)\n    {\n        if (arr[i] <= max)\n\
    \        {\n            max = max(max, arr[i]);\n            index = i;\n    \
    \    }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvc0mgwgy.d(23): Error: function expected before `()`, not `max`
    of type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvc0mgwgy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160770
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long len = arr.length;\n    if (len\
    \ == 1) \n    {\n        return -1L;\n    }\n    long max = -1L;\n    foreach\
    \ (i, element; arr) \n    {\n        if (i == 0) \n        {\n            continue;\n\
    \        }\n        if (element <= arr[i - 1]) \n        {\n            continue;\n\
    \        }\n        if (element > arr[i - 1]) \n        {\n            max = max(max,\
    \ i);\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpne5zbg8n.d(35): Error: function expected before `()`, not `max`
    of type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpne5zbg8n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160770
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = -1L;\n    foreach(i, value;\
    \ arr)\n    {\n        if(value <= max)\n            return i - 1;\n        max\
    \ = max(max, value);\n    }\n    return -1L;\n}\nunittest\n{\n    alias candidate\
    \ = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmbt_c086.d(22): Error: function expected before `()`, not `max`
    of type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmbt_c086.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160770
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n  long max = -1L;\n  foreach(i, e; arr)\n\
    \  {\n    if(i == 0) continue;\n    if(e < arr[i - 1]) continue;\n    if(max <\
    \ e) max = e;\n  }\n  if(max == -1L) return -1L;\n  long index = -1L;\n  foreach(i,\
    \ e; arr)\n  {\n    if(e == max) index = i;\n  }\n  return index;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpx2bqwq2i.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x428255]

    ??:? void tmpx2bqwq2i.__unittest_L32_C1() [0x427e5f]

    ??:? void tmpx2bqwq2i.__modtest() [0x427fd4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c2b3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b146]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302d9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430788]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430265]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b11d]

    ??:? runModuleUnitTests [0x42c089]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428718]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160770
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long i = arr.length - 1L;\n    while\
    \ (i > 0L && arr[i] >= arr[i - 1L])\n    {\n        i--;\n    }\n    return i\
    \ - 1L;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpxj5ni46o.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281cd]

    ??:? void tmpxj5ni46o.__unittest_L24_C1() [0x427dd7]

    ??:? void tmpxj5ni46o.__modtest() [0x427f4c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c22b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430251]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430700]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301dd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b095]

    ??:? runModuleUnitTests [0x42c001]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428690]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160770
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max_idx = -1L;\n    long max_idx_so_far\
    \ = -1L;\n    foreach(value; arr)\n    {\n        if(value <= max_idx_so_far)\n\
    \        {\n            max_idx = max(max_idx, max_idx_so_far);\n        }\n \
    \       max_idx_so_far = max(max_idx_so_far, value);\n    }\n    return max_idx;\n\
    }\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgj5243kw.d(23): Error: undefined identifier `max`, did you mean
    function `fmax`?

    /tmp/tmpgj5243kw.d(25): Error: undefined identifier `max`, did you mean function
    `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgj5243kw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160770
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n  long ret = -1L;\n  for (long i = 1L; i\
    \ < arr.length; i++) \n  {\n    if (arr[i] < arr[i - 1L]) \n    {\n      ret =\
    \ i - 1L;\n      break;\n    }\n  }\n  return ret;\n}\n/*\nCreate a function which\
    \ returns the last index of an element which\n    is not greater than or equal\
    \ to the element immediately following it. If\n    no such element exists then\
    \ return -1. The given array will not contain\n    duplicate values.\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz9m_yooe.d(28): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz9m_yooe.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160770
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long res = -1L;\n    for (long i = 1L;\
    \ i < arr.length; i++) \n    {\n        if (arr[i] <= arr[i - 1L]) \n        {\n\
    \            res = max(res, i - 1L);\n        }\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprlfblj91.d(22): Error: undefined identifier `max`, did you mean
    function `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprlfblj91.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160770
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    static if(is(typeof(arr) == long[]))\n\
    \    {\n        auto temp = 0L;\n        foreach(i, j; arr)\n        {\n     \
    \       if(j < arr[i - 1])\n            {\n                temp = i;\n       \
    \     }\n        }\n        return temp;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpb21j2k4x.d(22): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42828e]

    ??:? long tmpb21j2k4x.can_arrange(long[]) [0x427d4f]

    ??:? void tmpb21j2k4x.__unittest_L30_C1() [0x427dcc]

    ??:? void tmpb21j2k4x.__modtest() [0x427f5c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c23b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430261]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430710]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]

    ??:? runModuleUnitTests [0x42c011]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch'
  stdout: ''
  timestamp: 1660160770
- exit_code: 0
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long i;\n    i = arr.length - 1;\n \
    \   while (i > 0)\n    {\n        if (arr[i] >= arr[i - 1]) \n        {\n    \
    \        i--;\n        } \n        else \n        {\n            return i;\n \
    \       }\n    }\n    return -1;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160770
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long i = 1L;\n    while(i <= arr.length\
    \ && arr[i] < arr[i - 1L])\n    {\n        i++;\n    }\n    return (i >= arr.length)\
    \ ? -1L : i;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp38ze813y.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281d5]

    ??:? void tmp38ze813y.__unittest_L24_C1() [0x427ddf]

    ??:? void tmp38ze813y.__modtest() [0x427f54]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c233]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0c6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430259]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430708]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301e5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b09d]

    ??:? runModuleUnitTests [0x42c009]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428698]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160770
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long currentMaxIndex = 0L;\n    for\
    \ (long i = 1L; i < arr.length; i++) \n    {\n        if (arr[i] < arr[currentMaxIndex])\
    \ \n        {\n            return currentMaxIndex;\n        }\n        currentMaxIndex\
    \ = i;\n    }\n    return -1L;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpev6qx8mo.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281e5]

    ??:? void tmpev6qx8mo.__unittest_L28_C1() [0x427def]

    ??:? void tmpev6qx8mo.__modtest() [0x427f64]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c243]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0d6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430269]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430718]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301f5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]

    ??:? runModuleUnitTests [0x42c019]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286a8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160770
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n  int n = arr.length;\n  for (int i = n\
    \ - 1; i > 0; i--) \n  {\n    if (arr[i] <= arr[i - 1]) continue;\n    else return\
    \ i;\n  }\n  return -1L;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo4i8jdn5.d(17): Error: cannot implicitly convert expression `arr.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo4i8jdn5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160770
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long _return = 0L;\n    _return = -1L;\n\
    \    for (long i = 0L; i < (arr.length - 1L); i++) \n    {\n        if ((arr[i\
    \ + 1L] < arr[i])) \n        {\n            _return = i;\n        }\n    }\n \
    \   return _return;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n  \
    \  assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L,\
    \ 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L])\
    \ == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpxbekolsg.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281dd]

    ??:? void tmpxbekolsg.__unittest_L28_C1() [0x427de7]

    ??:? void tmpxbekolsg.__modtest() [0x427f5c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c23b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430261]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430710]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]

    ??:? runModuleUnitTests [0x42c011]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160770
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    int leng = arr.length;\n    if (leng\
    \ <= 1) \n    {\n        return -1L;\n    }\n    int ret = -1L;\n    long prev_elem\
    \ = arr[0];\n    foreach (long elem; arr[1 .. leng]) \n    {\n        if (elem\
    \ <= prev_elem) \n        {\n            ret = max(ret, (elem - prev_elem));\n\
    \        }\n        prev_elem = elem;\n    }\n    return ret;\n}\nunittest\n{\n\
    \    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L])\
    \ == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp68acxn7a.d(17): Error: cannot implicitly convert expression `arr.length`
    of type `ulong` to `int`

    /tmp/tmp68acxn7a.d(28): Error: undefined identifier `max`, did you mean function
    `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp68acxn7a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160770
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    if (arr.length == 0)\n        return\
    \ -1L;\n    \n    long index = -1L;\n    long max = arr[0];\n    foreach (num;\
    \ arr)\n    {\n        if (num < max)\n            index = maxind(arr, num..max);\n\
    \        max = max(max, num);\n    }\n    return index;\n}\nunittest\n{\n    alias\
    \ candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n\
    \    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L,\
    \ 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L,\
    \ 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa7gz4kr1.d(25): Error: found `..` when expecting `,`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa7gz4kr1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160770
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long result = -1L;\n    long i = arr.length\
    \ - 1L;\n    while (i > 0L) \n    {\n        if (arr[i] <= arr[i - 1L]) \n   \
    \     {\n            result = i;\n            i -= 1L;\n        } \n        else\
    \ \n        {\n            break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpikv2vc9a.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281dd]

    ??:? void tmpikv2vc9a.__unittest_L33_C1() [0x427deb]

    ??:? void tmpikv2vc9a.__modtest() [0x427f60]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c23b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430261]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430710]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]

    ??:? runModuleUnitTests [0x42c011]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160770
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    foreach(idx,e;arr)\n    {\n        if(idx>0\
    \ && e <= arr[idx-1])\n            return idx;\n    }\n    return -1;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp15vtejfn.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281dd]

    ??:? void tmp15vtejfn.__unittest_L24_C1() [0x427f13]

    ??:? void tmp15vtejfn.__modtest() [0x427f5c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c23b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430261]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430710]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]

    ??:? runModuleUnitTests [0x42c011]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160770
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    int res = -1;\n    for (int i = arr.length\
    \ - 1; i > 0; i--)\n    {\n        if (arr[i] >= arr[i - 1]) \n        {\n   \
    \         res = i - 1;\n        }\n        else \n        {\n            break;\n\
    \        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnu2vbdui.d(18): Error: cannot implicitly convert expression `arr.length
    - 1LU` of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnu2vbdui.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160770
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long result;\n    auto sarr = arr.sort();\n\
    \    if (sarr == arr)\n    {\n        result = -1L;\n    }\n    else\n    {\n\
    \        auto s = sarr.length;\n        result = sarr.findIndexOf(arr[s]);\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnlvhv8il.d(18): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnlvhv8il.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160770
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    auto prev = arr[0];\n    foreach(i,\
    \ item; arr[1..$]) \n    {\n        if (item <= prev) \n        {\n          \
    \  return i - 1;\n        }\n        prev = item;\n    }\n    return -1;\n}\n\
    unittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L,\
    \ 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpc3rpzei4.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x428205]

    ??:? void tmpc3rpzei4.__unittest_L28_C1() [0x427e0f]

    ??:? void tmpc3rpzei4.__modtest() [0x427f84]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c263]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0f6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430289]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430738]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430215]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0cd]

    ??:? runModuleUnitTests [0x42c039]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160770
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    int length = arr.length;\n    long max_not_equal_previous\
    \ = 0;\n    for (int i = 1; i < length; i++)\n    {\n        long diff = arr[i]\
    \ - arr[i - 1];\n        if (diff > 0) max_not_equal_previous = max(max_not_equal_previous,\
    \ i);\n    }\n    return max_not_equal_previous;\n}\nunittest\n{\n    alias candidate\
    \ = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptnmztc4t.d(17): Error: cannot implicitly convert expression `arr.length`
    of type `ulong` to `int`

    /tmp/tmptnmztc4t.d(22): Error: undefined identifier `max`, did you mean function
    `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnmztc4t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160770
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n\tlong idx = arr.length;\n\tforeach(long\
    \ i, long elem; arr)\n\t{\n\t\tif(elem > arr[i-1])\n\t\t{\n\t\t\tidx = i;\n\t\t\
    \tbreak;\n\t\t}\n\t}\n\treturn idx == arr.length ? -1L : idx;\n}\nunittest\n{\n\
    \    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L])\
    \ == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpc4iu1b2e.d(20): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42829e]

    ??:? long tmpc4iu1b2e.can_arrange(long[]) [0x427d4f]

    ??:? void tmpc4iu1b2e.__unittest_L28_C1() [0x427ddc]

    ??:? void tmpc4iu1b2e.__modtest() [0x427f6c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c24b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430271]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430720]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0b5]

    ??:? runModuleUnitTests [0x42c021]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch'
  stdout: ''
  timestamp: 1660160770
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n\tif (arr.length <= 1) return -1;\n\tint\
    \ rv = -1;\n\tfor (int i = 1; i < arr.length; i++) {\n\t\tif (arr[i] < arr[i-1])\
    \ {\n\t\t\trv = i-1;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn rv;\n}\n//\n//\n//\n\
    unittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L,\
    \ 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4_0kn0hm.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281ed]

    ??:? void tmp4_0kn0hm.__unittest_L30_C1() [0x427df7]

    ??:? void tmp4_0kn0hm.__modtest() [0x427f6c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c24b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430271]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430720]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0b5]

    ??:? runModuleUnitTests [0x42c021]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160771
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n\tint i = arr.length - 1;\n\twhile ( i >\
    \ 0) {\n\t\tif (arr[i] < arr[i-1])\n\t\t\tbreak;\n\t\ti--;\n\t}\n\treturn i-1;\n\
    }\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmocpzp5z.d(17): Error: cannot implicitly convert expression `arr.length
    - 1LU` of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmocpzp5z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160770
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    for (long i = 1L; i < arr.length; i++)\
    \ \n    {\n        if (arr[i] < arr[i - 1L]) \n        {\n            return i\
    \ - 1L;\n        }\n    }\n    return -1L;\n}\nunittest\n{\n    alias candidate\
    \ = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvvh0dihv.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281d5]

    ??:? void tmpvvh0dihv.__unittest_L26_C1() [0x427de3]

    ??:? void tmpvvh0dihv.__modtest() [0x427f58]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c233]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0c6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430259]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430708]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301e5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b09d]

    ??:? runModuleUnitTests [0x42c009]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428698]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160771
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    int i = 0;\n    long max = 0;\n    long\
    \ max_index = -1;\n    for (int j = 1; j < arr.length; j++)\n    {\n        if\
    \ (arr[j] < arr[j - 1])\n        {\n            if (max_index == -1 || arr[max_index]\
    \ > arr[j - 1])\n            {\n                max_index = j - 1;\n         \
    \   }\n        }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate\
    \ = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqvz2ac2i.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x42823d]

    ??:? void tmpqvz2ac2i.__unittest_L32_C1() [0x427e47]

    ??:? void tmpqvz2ac2i.__modtest() [0x427fbc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c29b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b12e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302c1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430770]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43024d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b105]

    ??:? runModuleUnitTests [0x42c071]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428700]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160770
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n\tlong i = 0L;\n\twhile(i < arr.length -\
    \ 1L)\n\t{\n\t\tif(arr[i + 1L] < arr[i])\n\t\t{\n\t\t\treturn i;\n\t\t}\n\t\t\
    ++i;\n\t}\n\treturn -1L;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9rm0jari.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281dd]

    ??:? void tmp9rm0jari.__unittest_L28_C1() [0x427deb]

    ??:? void tmp9rm0jari.__modtest() [0x427f60]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c23b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430261]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430710]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]

    ??:? runModuleUnitTests [0x42c011]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160771
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n  long[] reversed = std.reverse(arr);\n\
    \  foreach(long i, long element; reversed) \n  {\n    // The first element will\
    \ always be true since the previous one doesn't exist\n    if(i == 0 || element\
    \ >= reversed[i - 1]) \n    {\n      return arr.length - i - 1;\n    }\n  }\n\
    \  return -1L;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg1cz4unl.d(17): Error: undefined identifier `reverse` in package
    `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg1cz4unl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160770
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long imax = 0L;\n    foreach(num; arr)\n\
    \    {\n        if(num > arr[imax])\n            imax = i;\n    }\n    if(imax\
    \ > 0L)\n        return imax - 1L;\n    else\n        return -1L;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9i0dpiat.d(21): Error: undefined identifier `i`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9i0dpiat.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160770
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n\tlong n = arr.length;\n\tif (n == 1) return\
    \ 0;\n\tlong[] f = new long[n];\n\tf[0] = 0;\n\tfor (long i = 1; i < n; i++)\n\
    \t{\n\t\tif (arr[i] < arr[i - 1])\n\t\t{\n\t\t\tf[i] = f[i - 1];\n\t\t}\n\t\t\
    else\n\t\t{\n\t\t\tlong l = -1, r = i - 1;\n\t\t\twhile (l < r)\n\t\t\t{\n\t\t\
    \t\tlong m = (l + r + 1) / 2;\n\t\t\t\tif (arr[m] <= arr[i])\n\t\t\t\t{\n\t\t\t\
    \t\tl = m;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tr = m - 1;\n\t\t\t\t\
    }\n\t\t\t}\n\t\t\tf[i] = f[l] + 1;\n\t\t}\n\t}\n\tlong ans = n - 1;\n\tfor (long\
    \ i = 0; i < n; i++)\n\t{\n\t\tif (f[i] == i)\n\t\t{\n\t\t\tans = i;\n\t\t\tbreak;\n\
    \t\t}\n\t}\n\treturn ans;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpa80oyd1_.d(60): unittest failure

    ----------------

    ??:? _d_unittestp [0x4283c5]

    ??:? void tmpa80oyd1_.__unittest_L56_C1() [0x427fcf]

    ??:? void tmpa80oyd1_.__modtest() [0x428144]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c47f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b312]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43059d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430a4c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430529]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2e9]

    ??:? runModuleUnitTests [0x42c255]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428888]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160771
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    if (arr.length <= 1)\n        return\
    \ -1L;\n    \n    long index = arr.length - 1;\n    while (arr[index] >= arr[index\
    \ - 1] && index >= 1)\n        index--;\n    \n    return index;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmp76ll3j8c.d(21): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42828e]

    ??:? long tmp76ll3j8c.can_arrange(long[]) [0x427d5a]

    ??:? void tmp76ll3j8c.__unittest_L26_C1() [0x427e1f]

    ??:? void tmp76ll3j8c.__modtest() [0x427f5c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c23b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430261]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430710]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]

    ??:? runModuleUnitTests [0x42c011]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch'
  stdout: ''
  timestamp: 1660160771
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    foreach(elem, i; arr)\n    {\n     \
    \   if(arr[i] < arr[i-1])\n            return i-1;\n    }\n    return -1;\n}\n\
    unittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L,\
    \ 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpw_pr_h8y.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x428205]

    ??:? void tmpw_pr_h8y.__unittest_L24_C1() [0x427e0f]

    ??:? void tmpw_pr_h8y.__modtest() [0x427f84]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c263]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0f6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430289]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430738]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430215]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0cd]

    ??:? runModuleUnitTests [0x42c039]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160771
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    if (arr.length == 0) return -1;\n  \
    \  long max = arr[0];\n    long result = -1;\n    for (long i = 1; i < arr.length;\
    \ i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n           \
    \ result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n\
    \    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L,\
    \ 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L,\
    \ 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu00lo4rr.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x42821d]

    ??:? void tmpu00lo4rr.__unittest_L28_C1() [0x427e27]

    ??:? void tmpu00lo4rr.__modtest() [0x427f9c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c27b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b10e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302a1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430750]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43022d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0e5]

    ??:? runModuleUnitTests [0x42c051]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286e0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160771
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long pre_idx = arr.length - 1;\n   \
    \ long return_num = -1;\n    for (long i = arr.length - 2; i >= 0; i--)\n    {\n\
    \        if (arr[i] <= arr[pre_idx])\n        {\n            return_num = pre_idx;\n\
    \            pre_idx = i;\n        }\n    }\n    return return_num;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpxhfl2qjf.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281ed]

    ??:? void tmpxhfl2qjf.__unittest_L29_C1() [0x427df7]

    ??:? void tmpxhfl2qjf.__modtest() [0x427f6c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c24b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430271]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430720]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0b5]

    ??:? runModuleUnitTests [0x42c021]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160771
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n\tlong l = arr.length;\n\tlong num;\n\t\
    long best = -1L;\n\t\n\tif (l <= 1) return -1L;\n\t\n\tfor (long i = 1; i < l;\
    \ i++)\n\t{\n\t\tnum = arr[i];\n\t\tif (num < arr[i-1])\n\t\t{\n\t\t\tbest = max(best,\
    \ i-1);\n\t\t}\n\t}\n\t\n\treturn best;\n}\nunittest\n{\n    alias candidate =\
    \ can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnd8d0zg9.d(28): Error: undefined identifier `max`, did you mean
    function `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnd8d0zg9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160770
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long i = arr.length;\n    while (arr[--i]\
    \ < arr[i - 1])\n        ;\n    return i;\n}\nunittest\n{\n    alias candidate\
    \ = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjo0_a4oc.d(19): Error: use `{ }` for an empty statement, not `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjo0_a4oc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160770
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    for (int i =\
    \ 1; i < arr.length; i++)\n    {\n        if (arr[i] < max)\n            return\
    \ i - 1;\n        else\n            max = max(max, arr[i]);\n    }\n    return\
    \ -1;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwudm81pt.d(23): Error: function expected before `()`, not `max`
    of type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwudm81pt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160770
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long result = -1L;\n    for (long i\
    \ = 0L; i < arr.length - 1L; i++) \n    {\n        if (arr[i] > arr[i + 1L]) \n\
    \        {\n            result = i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L,\
    \ 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpq1_is4o0.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281dd]

    ??:? void tmpq1_is4o0.__unittest_L27_C1() [0x427deb]

    ??:? void tmpq1_is4o0.__modtest() [0x427f60]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c23b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430261]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430710]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]

    ??:? runModuleUnitTests [0x42c011]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160771
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long length = arr.length;\n    if (length\
    \ == 1)\n        return 0;\n    foreach (i, e; arr)\n    {\n        long index\
    \ = i;\n        if (index == 0)\n            continue;\n        if (e < arr[index\
    \ - 1])\n            return index - 1;\n    }\n    return -1;\n}\nunittest\n{\n\
    \    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L])\
    \ == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpe7_9ddrt.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281f5]

    ??:? void tmpe7_9ddrt.__unittest_L30_C1() [0x427dff]

    ??:? void tmpe7_9ddrt.__modtest() [0x427f74]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c253]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0e6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430279]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430728]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430205]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0bd]

    ??:? runModuleUnitTests [0x42c029]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286b8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160771
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long sz = arr.length;\n    if (sz ==\
    \ 0)\n        return -1L;\n    if (sz == 1)\n        return 0L;\n    long mx =\
    \ -1L;\n    long mxInd = -1L;\n    for (long i = sz - 1; i >= 0; i--)\n    {\n\
    \        if (arr[i] < mx)\n            return i;\n        if (arr[i] > mx)\n \
    \       {\n            mx = arr[i];\n            mxInd = i;\n        }\n    }\n\
    \    return mxInd;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n   \
    \ assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L,\
    \ 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L])\
    \ == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp74q5d0gq.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x428245]

    ??:? void tmp74q5d0gq.__unittest_L36_C1() [0x427ea8]

    ??:? void tmp74q5d0gq.__modtest() [0x427fc8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c2a3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b136]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302c9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430778]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430255]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b10d]

    ??:? runModuleUnitTests [0x42c079]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428708]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160771
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    foreach(i,v;arr)\n    {\n        if(i+1<arr.length)\n\
    \        {\n            if(v>=arr[i+1])\n            {\n                return\
    \ i;\n            }\n        }\n    }\n    return -1;\n}\nunittest\n{\n    alias\
    \ candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n\
    \    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L,\
    \ 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L,\
    \ 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp775bdk0m.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281e5]

    ??:? void tmp775bdk0m.__unittest_L29_C1() [0x427df3]

    ??:? void tmp775bdk0m.__modtest() [0x427f68]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c243]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0d6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430269]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430718]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301f5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]

    ??:? runModuleUnitTests [0x42c019]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286a8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160771
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long index = -1L;\n    for (long i =\
    \ 1L; i < arr.length; i++) \n    {\n        if (arr[i] <= arr[i - 1L]) \n    \
    \    {\n            index = i;\n            break;\n        }\n    }\n    return\
    \ index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpz8b5io4o.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281dd]

    ??:? void tmpz8b5io4o.__unittest_L28_C1() [0x427f13]

    ??:? void tmpz8b5io4o.__modtest() [0x427f5c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c23b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430261]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430710]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]

    ??:? runModuleUnitTests [0x42c011]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160771
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    int n = arr.length;\n    if (n < 2)\n\
    \        return -1L;\n    if (arr[n - 1] > arr[n - 2])\n        return n - 1L;\n\
    \    else\n        return can_arrange(arr[0..n - 1]);\n}\nstatic int __ = [] {\n\
    \    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr);\n    std::cout.tie(nullptr);\n\
    \    return 0;\n}();\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppad0l65r.d(25): Error: semicolon expected, not `{`

    /tmp/tmppad0l65r.d(25): Error: declaration expected, not `{`

    /tmp/tmppad0l65r.d(27): Error: no identifier for declarator `std`

    /tmp/tmppad0l65r.d(27): Error: declaration expected, not `:`

    /tmp/tmppad0l65r.d(28): Error: no identifier for declarator `std`

    /tmp/tmppad0l65r.d(28): Error: declaration expected, not `:`

    /tmp/tmppad0l65r.d(29): Error: declaration expected, not `return`

    /tmp/tmppad0l65r.d(30): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppad0l65r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160770
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    foreach(i, v; arr) {\n        if (i\
    \ > 0 && v < arr[i - 1]) return i - 1;\n    }\n    return -1;\n}\n/*\ndef can_arrange(arr):\n\
    \    for i, v in enumerate(arr):\n        if i > 0 and v < arr[i - 1]:\n     \
    \       return i - 1\n    return -1\n*/\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqmsjtqkg.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281dd]

    ??:? void tmpqmsjtqkg.__unittest_L29_C1() [0x427deb]

    ??:? void tmpqmsjtqkg.__modtest() [0x427f60]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c23b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430261]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430710]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]

    ??:? runModuleUnitTests [0x42c011]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160771
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    if (arr.length < 2) \n        return\
    \ -1L;\n    size_t l = 0, r = arr.length - 1;\n    long possible = -1L;\n    //\
    \ -1L because arr[0] < arr[1] is only interesting if arr[0] = 0 and arr[1] = 1\n\
    \    // no need to check possible > -1L because if it is, we know arr[l] = l-1\n\
    \    // no need to check possible < l-1 because arr[l] < arr[l-1] if possible\
    \ < l-1\n    while (l + 1 < r) \n    {\n        size_t m = (l + r) / 2;\n    \
    \    if (arr[m] >= arr[m - 1]) \n            l = m;\n        else \n         \
    \   r = m;\n    }\n    return l;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpe6vn79y8.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x42820d]

    ??:? void tmpe6vn79y8.__unittest_L34_C1() [0x427e17]

    ??:? void tmpe6vn79y8.__modtest() [0x427f8c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c26b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0fe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430291]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430740]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43021d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d5]

    ??:? runModuleUnitTests [0x42c041]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286d0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160771
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long[] res = new long[arr.length];\n\
    \    long max = arr[0];\n    res[0] = -1;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] < max)\n        {\n            res[i] = max;\n\
    \        }\n        else\n        {\n            res[i] = -1;\n            max\
    \ = arr[i];\n        }\n    }\n    long max_index = 0;\n    long max_value = res[0];\n\
    \    for (long i = 1; i < res.length; i++)\n    {\n        if (res[i] > max_value)\n\
    \        {\n            max_value = res[i];\n            max_index = i;\n    \
    \    }\n    }\n    return max_index;\n}\n/*\nCreate a function which returns the\
    \ largest index of an element which\n    is not greater than or equal to the element\
    \ immediately preceding it. If\n    no such element exists then return -1. The\
    \ given array will not contain\n    duplicate values.\nunittest\n{\n    alias\
    \ candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n\
    \    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L,\
    \ 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L,\
    \ 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3vbgzsko.d(44): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3vbgzsko.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160770
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long i = 0;\n    while (i < arr.length\
    \ - 1 && arr[i] >= arr[i + 1]) \n    {\n        i += 1;\n    }\n    return (i\
    \ == arr.length - 1) ? -1 : i;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmptq_euh2c.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281e5]

    ??:? void tmptq_euh2c.__unittest_L24_C1() [0x427df3]

    ??:? void tmptq_euh2c.__modtest() [0x427f68]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c243]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0d6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430269]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430718]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301f5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]

    ??:? runModuleUnitTests [0x42c019]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286a8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160771
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    if (arr.length == 0)\n        return\
    \ -1L;\n    if (arr.length == 1)\n        return 0L;\n    if (arr.length == 2)\n\
    \        return arr[0] < arr[1] ? 0L : -1L;\n    \n    long[] s_arr = new long[arr.length];\n\
    \    s_arr[arr.length - 1] = arr[arr.length - 1];\n    for (long i = arr.length\
    \ - 2; i >= 0; i--)\n    {\n        if (arr[i] < s_arr[i + 1])\n            s_arr[i]\
    \ = arr[i];\n        else\n            s_arr[i] = s_arr[i + 1];\n    }\n    \n\
    \    for (long i = 0; i < arr.length - 1; i++)\n    {\n        if (arr[i] <= s_arr[i\
    \ + 1])\n            return i;\n    }\n    return -1L;\n}\nunittest\n{\n    alias\
    \ candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n\
    \    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L,\
    \ 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L,\
    \ 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvcqw8af8.d(45): unittest failure

    ----------------

    ??:? _d_unittestp [0x4283ed]

    ??:? void tmpvcqw8af8.__unittest_L41_C1() [0x427ffb]

    ??:? void tmpvcqw8af8.__modtest() [0x428170]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c4a7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b33a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4305c5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430a74]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430551]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b311]

    ??:? runModuleUnitTests [0x42c27d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160771
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long n = arr.length;\n    for (long\
    \ i = n - 1; i > 0; i--)\n    {\n        if (arr[i] < arr[i - 1])\n        {\n\
    \            return i - 1;\n        }\n    }\n    return -1;\n}\nunittest\n{\n\
    \    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L])\
    \ == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5b2qlzpf.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281d5]

    ??:? void tmp5b2qlzpf.__unittest_L27_C1() [0x427de3]

    ??:? void tmp5b2qlzpf.__modtest() [0x427f58]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c233]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0c6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430259]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430708]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301e5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b09d]

    ??:? runModuleUnitTests [0x42c009]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428698]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160771
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long ind = -1L;\n    foreach(el; arr)\
    \ \n    {\n        if(!ind) \n        {\n            ind = 0L;\n            continue;\n\
    \        }\n        if(el < arr[ind - 1L]) \n        {\n            break;\n \
    \       }\n        ind++;\n    }\n    return ind;\n}\n/*\nThis is a semi-standard\
    \ boilerplate for D programs.\nIt's OK to include it at the end of your D source.\n\
    */\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpa9y9h3wj.d(25): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42829e]

    ??:? long tmpa9y9h3wj.can_arrange(long[]) [0x427d63]

    ??:? void tmpa9y9h3wj.__unittest_L37_C1() [0x427ddc]

    ??:? void tmpa9y9h3wj.__modtest() [0x427f6c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c24b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430271]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430720]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0b5]

    ??:? runModuleUnitTests [0x42c021]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch'
  stdout: ''
  timestamp: 1660160771
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long[] arr1 = arr[0 .. $ - 1];\n   \
    \ arr1.sort;\n    long index=arr.length-1;\n    while(index>=0 && arr[index]>=arr1[index])\
    \ index--;\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcm2fd7al.d(18): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcm2fd7al.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160771
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    if (arr.length <= 1) return -1L;\n \
    \   long pos = 0L;\n    for (long i = 1L; i < arr.length; i++)\n    {\n      \
    \  if (arr[i] < arr[i - 1L])\n        {\n            pos = i;\n            break;\n\
    \        }\n    }\n    long min = min(arr[pos], arr[pos - 1L]);\n    for (long\
    \ i = pos; i < arr.length; i++)\n    {\n        if (arr[i] >= min) return i -\
    \ 1L;\n    }\n    return -1L;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr2lcag21.d(27): Error: undefined identifier `min`, did you mean
    function `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr2lcag21.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160771
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long size = arr.length;\n    if (size\
    \ > 1)\n    {\n        for (long i = size - 1; i > 0; i--)\n        {\n      \
    \      if (arr[i] <= arr[i - 1])\n            {\n                return i - 1;\n\
    \            }\n        }\n    }\n    return -1;\n}\nunittest\n{\n    alias candidate\
    \ = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpj_gpj49h.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281e5]

    ??:? void tmpj_gpj49h.__unittest_L30_C1() [0x427df3]

    ??:? void tmpj_gpj49h.__modtest() [0x427f68]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c243]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0d6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430269]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430718]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301f5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]

    ??:? runModuleUnitTests [0x42c019]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286a8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160771
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long x = arr.length - 1;\n    for (;\
    \ x > 0; x--)\n    {\n        if (arr[x - 1] <= arr[x])\n            break;\n\
    \    }\n    return x;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n\
    \    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprlibfd59.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281bd]

    ??:? void tmprlibfd59.__unittest_L25_C1() [0x427dcb]

    ??:? void tmprlibfd59.__modtest() [0x427f40]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c21b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0ae]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430241]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4306f0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301cd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b085]

    ??:? runModuleUnitTests [0x42bff1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428680]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160771
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    if (arr.length <= 1) \n        return\
    \ -1L;\n    return arr.length - 1 - max!((a, b) => a > b)(arr[0..$-1] >= arr[1..$]);\n\
    }\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2oi7hifo.d(19): Error: template instance `max!((a, b) => a > b)`
    template `max` is not defined, did you mean fmax?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2oi7hifo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160771
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long d = arr.length;\n    for (long\
    \ i = 0; i < d - 1; i++)\n    {\n        if (arr[i] >= arr[i + 1])\n        {\n\
    \            if (i < d - 2)\n            {\n                if (arr[i] >= arr[i\
    \ + 2])\n                {\n                    return -1L;\n                }\n\
    \            }\n            return i;\n        }\n    }\n    return -1L;\n}\n\
    unittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L,\
    \ 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7vn693u7.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x428255]

    ??:? void tmp7vn693u7.__unittest_L34_C1() [0x427e5f]

    ??:? void tmp7vn693u7.__modtest() [0x427fd4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c2b3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b146]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302d9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430788]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430265]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b11d]

    ??:? runModuleUnitTests [0x42c089]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428718]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160771
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = -1L;\n    for (long i = 1L;\
    \ i < arr.length; i++)\n    {\n        if (arr[i] < arr[i - 1L])\n        {\n\
    \            max = max(max, i - 1L);\n        }\n    }\n    return max;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_xiv2hoq.d(22): Error: function expected before `()`, not `max`
    of type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_xiv2hoq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160771
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long result = -1L;\n    foreach(index,\
    \ element; arr) \n    {\n        if(index != 0L && arr[index] <= arr[index - 1L])\
    \ \n        {\n            result = max(result, index - 1L);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n  \
    \  assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L,\
    \ 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L])\
    \ == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6buoegzu.d(22): Error: undefined identifier `max`, did you mean
    function `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6buoegzu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160771
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long index = -1L;\n    for (int i =\
    \ 1; i < arr.length; i++)\n    {\n        if (arr[i] <= arr[i - 1])\n        {\n\
    \            index = i;\n            break;\n        }\n    }\n    return index;\n\
    }\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp28lzeys0.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281dd]

    ??:? void tmp28lzeys0.__unittest_L28_C1() [0x427f13]

    ??:? void tmp28lzeys0.__modtest() [0x427f5c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c23b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430261]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430710]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]

    ??:? runModuleUnitTests [0x42c011]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160771
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long size = arr.length;\n    foreach(i,\
    \ item; arr)\n    {\n        if(i > 0)\n        {\n            if(item <= arr[i-1])\n\
    \            {\n                size = i;\n                break;\n          \
    \  }\n        }\n    }\n    return size - 1;\n}\nunittest\n{\n    alias candidate\
    \ = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpbcpl90s2.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281e5]

    ??:? void tmpbcpl90s2.__unittest_L31_C1() [0x427def]

    ??:? void tmpbcpl90s2.__modtest() [0x427f64]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c243]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0d6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430269]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430718]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301f5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]

    ??:? runModuleUnitTests [0x42c019]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286a8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160771
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long largest_index = -1L;\n    for (long\
    \ i = 0L; i < arr.length; i++)\n    {\n        if (arr[i] >= arr[i-1L])\n    \
    \    {\n            continue;\n        }\n        else\n        {\n          \
    \  largest_index = i;\n        }\n    }\n    return largest_index;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpjztv4sm4.d(20): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42828e]

    ??:? long tmpjztv4sm4.can_arrange(long[]) [0x427d5c]

    ??:? void tmpjztv4sm4.__unittest_L31_C1() [0x427dcc]

    ??:? void tmpjztv4sm4.__modtest() [0x427f5c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c23b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430261]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430710]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]

    ??:? runModuleUnitTests [0x42c011]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch'
  stdout: ''
  timestamp: 1660160771
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max_index = -1L;\n    for (long\
    \ i = 1L; i < arr.length; i++) \n    {\n        if (arr[i] < arr[i - 1L]) \n \
    \       {\n            max_index = max(max_index, i - 1L);\n        }\n    }\n\
    \    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n\
    \    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbefgry0j.d(22): Error: undefined identifier `max`, did you mean
    function `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbefgry0j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160771
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long idx = -1;\n\
    \    foreach(i, el; arr)\n    {\n        if(el <= max)\n        {\n          \
    \  max = el;\n            idx = i;\n        }\n    }\n    return idx;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7_nbmdvi.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281dd]

    ??:? void tmp7_nbmdvi.__unittest_L29_C1() [0x427deb]

    ??:? void tmp7_nbmdvi.__modtest() [0x427f60]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c23b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430261]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430710]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]

    ??:? runModuleUnitTests [0x42c011]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160771
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = 0L;\n    long ind = -1L;\n\
    \    for (long i = 0L; i < arr.length; i++)\n    {\n        if (arr[i] > max)\n\
    \        {\n            max = arr[i];\n            ind = i;\n        }\n    }\n\
    \    return ind;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp1j3afsn3.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281e5]

    ??:? void tmp1j3afsn3.__unittest_L29_C1() [0x427def]

    ??:? void tmp1j3afsn3.__modtest() [0x427f64]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c243]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0d6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430269]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430718]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301f5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]

    ??:? runModuleUnitTests [0x42c019]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286a8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160771
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long result = -1L;\n    long maxValue\
    \ = long.min;\n    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i]\
    \ > maxValue)\n        {\n            result = i;\n            maxValue = arr[i];\n\
    \        }\n    }\n    return result;\n}\nlong can_arrange(long[] arr) \n{\n \
    \   long result = -1L;\n    long maxValue = long.min;\n    for (int i = 0; i <\
    \ arr.length; i++)\n    {\n        if (arr[i] > maxValue)\n        {\n       \
    \     result = i;\n            maxValue = arr[i];\n        }\n    }\n    return\
    \ result;\n}\nlong can_arrange(long[] arr) \n{\n    long result = -1L;\n    long\
    \ maxValue = long.min;\n    for (int i = 0; i < arr.length; i++)\n    {\n    \
    \    if (arr[i] > maxValue)\n        {\n            result = i;\n            maxValue\
    \ = arr[i];\n        }\n    }\n    return result;\n}\nlong can_arrange(long[]\
    \ arr) \n{\n    long result = -1L;\n    long maxValue = long.min;\n    for (int\
    \ i = 0; i < arr.length; i++)\n    {\n        if (arr[i] > maxValue)\n       \
    \ {\n            result = i;\n            maxValue = arr[i];\n        }\n    }\n\
    \    return result;\n}\nlong can_arrange(long[] arr) \n{\n    long result = -1L;\n\
    \    long maxValue = long.min;\n    for (int i = 0; i < arr.length; i++)\n   \
    \ {\n        if (arr[i] > maxValue)\n        {\n            result = i;\n    \
    \        maxValue = arr[i];\n        }\n    }\n    return result;\n}\nlong can_arrange(long[]\
    \ arr) \n{\n    long result = -1L;\n    long maxValue = long.min;\n    for (int\
    \ i = 0; i <\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprqn4hmso.d(90): Error: expression expected, not `unittest`

    /tmp/tmprqn4hmso.d(91): Error: found `{` when expecting `;` following `for` condition

    /tmp/tmprqn4hmso.d(92): Error: expression expected, not `alias`

    /tmp/tmprqn4hmso.d(92): Error: found `candidate` when expecting `)`

    /tmp/tmprqn4hmso.d(92): Error: found `=` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprqn4hmso.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160771
- exit_code: 0
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    auto res = -1L;\n    for (size_t i =\
    \ 0; i < arr.length; i++)\n    {\n        for (size_t j = i + 1; j < arr.length;\
    \ j++)\n        {\n            if (arr[j] < arr[i])\n            {\n         \
    \       res = cast(long)j;\n                break;\n            }\n        }\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n\
    \    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160771
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long res = -1L;\n    for (long i = 0L;\
    \ i < arr.length; i++)\n    {\n        if (arr[i] <= arr[i - 1L]) continue;\n\
    \        res = i;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpd35nllin.d(20): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42828e]

    ??:? long tmpd35nllin.can_arrange(long[]) [0x427d5c]

    ??:? void tmpd35nllin.__unittest_L25_C1() [0x427dcc]

    ??:? void tmpd35nllin.__modtest() [0x427f5c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c23b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430261]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430710]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]

    ??:? runModuleUnitTests [0x42c011]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch'
  stdout: ''
  timestamp: 1660160771
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    int i = arr.length - 1;\n    for (;\
    \ i >= 0; i--)\n    {\n        if (arr[i] <= arr[i-1])\n            break;\n \
    \   }\n    return i-1;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n\
    \    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpme49ghj4.d(17): Error: cannot implicitly convert expression `arr.length
    - 1LU` of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpme49ghj4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160771
- exit_code: 0
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long result = -1L;\n    long max = 0L;\n\
    \    long cur = 0L;\n    foreach(i; arr)\n    {\n        if(i < max)\n       \
    \ {\n            max = i;\n            result = cur;\n        }\n        else\n\
    \        {\n            max = i;\n        }\n        cur++;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160771
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long result = -1L;\n    for (int i =\
    \ arr.length - 1; i >= 0; i--)\n    {\n        if (arr[i] < arr[i-1])\n      \
    \  {\n            result = i;\n            break;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvxqwizcs.d(18): Error: cannot implicitly convert expression `arr.length
    - 1LU` of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvxqwizcs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160771
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max_index = -1L;\n    long max_element\
    \ = arr[0];\n    foreach(long i, long a; arr)\n    {\n        if(a <= max_element)\
    \ continue;\n        if(max_element < a)\n        {\n            max_element =\
    \ a;\n            max_index = i;\n        }\n    }\n    return max_index;\n}\n\
    /*\nGiven a list of sorted words, determine if there is a single word that is\
    \ a prefix of all the words.\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8l2rw7b0.d(30): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8l2rw7b0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160771
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long largestindex = -1L;\n    for (int\
    \ i = 1; i < arr.length; i++) \n    {\n        if (arr[i] < arr[i - 1]) \n   \
    \     {\n            largestindex = max(largestindex, i);\n        }\n    }\n\
    \    return largestindex;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9m0wiu_7.d(22): Error: undefined identifier `max`, did you mean
    function `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9m0wiu_7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160771
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    if (arr.length <= 1)\n        return\
    \ -1L;\n    \n    long prev = arr[0];\n    long index = -1L;\n    foreach (long\
    \ i, long curr; arr[1..$])\n    {\n        if (curr <= prev)\n        {\n    \
    \        index = i;\n            prev = curr;\n        }\n        else\n     \
    \       break;\n    }\n    return index;\n}\nunittest\n{\n    alias candidate\
    \ = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpzn720xwr.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x42821d]

    ??:? void tmpzn720xwr.__unittest_L34_C1() [0x427e27]

    ??:? void tmpzn720xwr.__modtest() [0x427f9c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c27b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b10e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302a1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430750]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43022d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0e5]

    ??:? runModuleUnitTests [0x42c051]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286e0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160771
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = 0L;\n    long index = 0L;\n\
    \    foreach(value; arr) \n    {\n        if(max < value) \n        {\n      \
    \      max = value;\n            index = i;\n        }\n    }\n    return index;\n\
    }\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1iout_tl.d(24): Error: undefined identifier `i`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1iout_tl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160771
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n\tfor (long i = arr.length - 1; i > 0; i--)\
    \ \n\t{\n\t\tif (arr[i] < arr[i - 1]) \n\t\t{\n\t\t\treturn i - 1;\n\t\t}\n\t\
    }\n\treturn -1;\n}\n// @exclude\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp03rwysx4.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281d5]

    ??:? void tmp03rwysx4.__unittest_L27_C1() [0x427ddf]

    ??:? void tmp03rwysx4.__modtest() [0x427f54]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c233]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0c6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430259]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430708]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301e5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b09d]

    ??:? runModuleUnitTests [0x42c009]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428698]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160771
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    \n    long ret = -1L;\n    long temp\
    \ = 0L;\n    long i = 0L;\n    long j = 0L;\n    long k = 0L;\n    long size =\
    \ arr.length;\n    long[] subArr;\n    long newSize = 0L;\n    long indexArr =\
    \ 0L;\n    long tempIndex = 0L;\n    long tempIndex2 = 0L;\n    bool flag = false;\n\
    \    long arrIndex = 0L;\n    bool flag2 = false;\n    bool isSorted = false;\n\
    \    bool isArranged = false;\n    long tempSize = 0L;\n    long tempSize2 = 0L;\n\
    \    long tempSize3 = 0L;\n    long tempSize4 = 0L;\n    long tempIndex3 = 0L;\n\
    \    long tempIndex4 = 0L;\n    long tempIndex5 = 0L;\n    long tempIndex6 = 0L;\n\
    \    long tempIndex7 = 0L;\n    long tempIndex8 = 0L;\n    long tempIndex9 = 0L;\n\
    \    long tempIndex10 = 0L;\n    long tempIndex11 = 0L;\n    long tempIndex12\
    \ = 0L;\n    long tempIndex13 = 0L;\n    long tempIndex14 = 0L;\n    long tempIndex15\
    \ = 0L;\n    long tempIndex16 = 0L;\n    long tempIndex17 = 0L;\n    long tempIndex18\
    \ = 0L;\n    long tempIndex19 = 0L;\n    long tempIndex20 = 0L;\n    long tempIndex21\
    \ = 0L;\n    long tempIndex22 = 0L;\n    long tempIndex23 = 0L;\n    long tempIndex24\
    \ = 0L;\n    long tempIndex25 = 0L;\n    long tempIndex26 = 0L;\n    long tempIndex27\
    \ = 0L;\n    long tempIndex28 = 0L;\n    long tempIndex29 = 0L;\n    long tempIndex30\
    \ = 0L;\n    long tempIndex31 = 0L;\n    long tempIndex32 = 0L;\n    long tempIndex33\
    \ = 0L;\n    long tempIndex34 = 0L;\n    long tempIndex35 = 0L;\n\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp69dsq_qs.d(72): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp69dsq_qs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160771
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    //int len = arr.length;\n    //for (int\
    \ i = 1; i < len; i++)\n    //{\n    //    if (arr[i] < arr[i - 1])\n    //  \
    \  {\n    //        return i - 1;\n    //    }\n    //}\n    //return -1;\n  \
    \  long i = 0;\n    foreach (e; arr)\n    {\n        if (e < i)\n        {\n \
    \           return i - 1;\n        }\n        i = e;\n    }\n    return -1;\n\
    }\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvb1mihy5.d(43): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281bd]

    ??:? void tmpvb1mihy5.__unittest_L37_C1() [0x427e9d]

    ??:? void tmpvb1mihy5.__modtest() [0x427f40]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c1a7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b03a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4301cd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43067c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430159]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b011]

    ??:? runModuleUnitTests [0x42bf7d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42860c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160771
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long l = arr.length;\n    long max =\
    \ arr[0];\n    long ind = 0;\n    for (long i = 1; i < l; i++) {\n        if (arr[i]\
    \ > max) {\n            max = arr[i];\n            ind = i;\n        }\n    }\n\
    \    return ind;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp1rkiay6y.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x42820d]

    ??:? void tmp1rkiay6y.__unittest_L28_C1() [0x427e17]

    ??:? void tmp1rkiay6y.__modtest() [0x427f8c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c26b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0fe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430291]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430740]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43021d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d5]

    ??:? runModuleUnitTests [0x42c041]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286d0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160771
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    for (int i = arr.length - 1; i > 0;\
    \ i--) \n    {\n        if (arr[i] < arr[i - 1]) \n        {\n            long\
    \ largest = 0;\n            for (int j = i - 1; j >= 0; j--) \n            {\n\
    \                if (arr[j] < arr[i]) \n                {\n                  \
    \  if (largest < arr[j]) \n                    {\n                        largest\
    \ = arr[j];\n                    }\n                }\n            }\n       \
    \     return i - 1;\n        }\n    }\n    return -1;\n}\nunittest\n{\n    alias\
    \ candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n\
    \    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L,\
    \ 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L,\
    \ 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp253jszdo.d(17): Error: cannot implicitly convert expression `arr.length
    - 1LU` of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp253jszdo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160771
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long idx = 0L;\n    auto item = arr[0];\n\
    \    foreach(item; arr)\n    {\n        if(item <= idx)\n            return idx;\n\
    \        idx++;\n    }\n    return -1L;\n}\nunittest\n{\n    alias candidate =\
    \ can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb3xdg7ph.d(19): Error: variable `item` is shadowing variable `tmpb3xdg7ph.can_arrange.item`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb3xdg7ph.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160771
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long n = arr.length;\n    long i = 0;\n\
    \    while (i < n - 1 && arr[i] >= arr[i + 1])\n        i++;\n    return i;\n\
    }\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_dxjm2rr.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281cd]

    ??:? void tmp_dxjm2rr.__unittest_L23_C1() [0x427ddb]

    ??:? void tmp_dxjm2rr.__modtest() [0x427f50]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c22b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430251]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430700]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301dd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b095]

    ??:? runModuleUnitTests [0x42c001]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428690]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160771
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long count = -1L;\n    foreach(long\
    \ elem; arr)\n    {\n        if(elem <= arr[0])\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2kmdgz63.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281cd]

    ??:? void tmp2kmdgz63.__unittest_L27_C1() [0x427ddb]

    ??:? void tmp2kmdgz63.__modtest() [0x427f50]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c22b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430251]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430700]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301dd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b095]

    ??:? runModuleUnitTests [0x42c001]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428690]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160772
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = -1L;\n    for (int i = 0;\
    \ i < arr.length - 1; i++)\n    {\n        long num = arr[i];\n        long num2\
    \ = arr[i + 1];\n        if (num2 <= num)\n        {\n            if (max == -1L)\n\
    \            {\n                max = i;\n            }\n            else\n  \
    \          {\n                if (num > arr[max])\n                {\n       \
    \             max = i;\n                }\n            }\n        }\n    }\n \
    \   return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpeu9pl58z.d(43): unittest failure

    ----------------

    ??:? _d_unittestp [0x428225]

    ??:? void tmpeu9pl58z.__unittest_L39_C1() [0x427e33]

    ??:? void tmpeu9pl58z.__modtest() [0x427fa8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c283]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b116]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302a9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430758]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430235]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ed]

    ??:? runModuleUnitTests [0x42c059]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286e8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160772
- exit_code: 0
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n\tif (arr.length == 0)\n\t\treturn -1L;\n\
    \tif (arr.length == 1)\n\t\treturn 0L;\n\tlong index = 0L;\n\tlong max = arr[0];\n\
    \tfor (long i = 1L; i < arr.length; i++)\n\t{\n\t\tif (arr[i] < max)\n\t\t{\n\t\
    \t\tif (i > index)\n\t\t\t\tindex = i;\n\t\t}\n\t\telse\n\t\t\tmax = arr[i];\n\
    \t}\n\tif (index != 0L)\n\t\treturn index;\n\treturn -1L;\n}\nunittest\n{\n  \
    \  alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L])\
    \ == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160771
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    auto n = arr.length;\n    foreach (i,\
    \ long e; arr)\n    {\n        if (i == 0) continue;\n        if (arr[i] <= arr[i\
    \ - 1])\n            return i - 1;\n    }\n    return -1;\n}\n/*\nWrite a function\
    \ that accepts integer pairs representing\n    the start and end points of a series\
    \ of rectangles. The function should\n    output the pair of input numbers that\
    \ represent the rectangle with the\n    largest area. The first number in the\
    \ pair should be the input that\n    represents the left side of the rectangle\
    \ and the second number in the\n    pair should be the input that represents the\
    \ right side of the rectangle.\n    The input will not contain duplicate pairs.\n\
    unittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L,\
    \ 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf2ot9lq4.d(26): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf2ot9lq4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160771
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    foreach(i, e; arr)\n    {\n        if(i\
    \ > 0)\n        {\n            if(arr[i] < arr[i-1])\n            {\n        \
    \        return i-1;\n            }\n        }\n    }\n    return -1;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmphpign3qe.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x428205]

    ??:? void tmphpign3qe.__unittest_L29_C1() [0x427e13]

    ??:? void tmphpign3qe.__modtest() [0x427f88]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c263]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0f6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430289]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430738]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430215]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0cd]

    ??:? runModuleUnitTests [0x42c039]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160772
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long[] sortedArr = arr.dup;\n    sortedArr.sort;\n\
    \    foreach(elem; 0..sortedArr.length)\n    {\n        if(arr[elem] < arr[elem\
    \ + 1])\n        {\n            return elem;\n        }\n    }\n    return -1L;\n\
    }\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpade7zhdw.d(18): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpade7zhdw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160771
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    auto sz = arr.length;\n    foreach (i,\
    \ elem; arr) \n    {\n        if (i > 0 && arr[i - 1] >= elem) \n        {\n \
    \           auto index = i;\n            while (index < sz && arr[index] < arr[i\
    \ - 1])\n                index++;\n            if (index == sz)\n            \
    \    return -1L;\n            else\n                return cast(long)index;\n\
    \        }\n    }\n    return -1L;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjay9xip4.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x42826d]

    ??:? void tmpjay9xip4.__unittest_L33_C1() [0x427e77]

    ??:? void tmpjay9xip4.__modtest() [0x427fec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c2cb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b15e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4307a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43027d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b135]

    ??:? runModuleUnitTests [0x42c0a1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428730]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160772
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long myMax = 0L;\n    long result =\
    \ -1L;\n    foreach(long i, ref in arr)\n    {\n        if(i > myMax)\n      \
    \  {\n            myMax = i;\n            result = i;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6e73vuy_.d(19): Error: basic type expected, not `in`

    /tmp/tmp6e73vuy_.d(19): Error: no identifier for declarator `_error_`

    /tmp/tmp6e73vuy_.d(19): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6e73vuy_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160771
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long[] a = arr[1..$-1];\n    long s\
    \ = arr[0];\n    int i = 0;\n    long x = 0;\n    foreach(long e; a)\n    {\n\
    \        x = max(x, e);\n        if(x <= s)\n        {\n            i++;\n   \
    \         s = x;\n        }\n    }\n    return i;\n}\nunittest\n{\n    alias candidate\
    \ = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpicr3r13w.d(23): Error: undefined identifier `max`, did you mean
    function `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpicr3r13w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160771
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long idx=0L;\n    long max_val=arr[0L];\n\
    \    foreach(long i;0L..arr.length)\n    {\n        if(arr[i]<=max_val)\n    \
    \    {\n            idx=i;\n            max_val=arr[i];\n        }\n    }\n  \
    \  if(idx==arr.length-1L)\n    {\n        return -1L;\n    }\n    return idx;\n\
    }\n/*\nWrite a function that takes an array of integers and returns the number\
    \ of\n    times that two 6's are next to each other in the array.\n    \n*/\n\
    long array667(long[] nums) \n{\n    long ctr=0L;\n    foreach(long i;0L..nums.length-1L)\n\
    \    {\n        if(nums[i]==6L&&nums[i+1L]==6L)\n        {\n            ctr++;\n\
    \        }\n    }\n    return ctr;\n}\n/*\nGiven an array of ints, we'll say that\
    \ a triple is a value appearing 3 times\n    in a row in the array. Return true\
    \ if the array does not contain any triples.\n    \n*/\nunittest\n{\n    alias\
    \ candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n\
    \    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L,\
    \ 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L,\
    \ 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmppvt2j4a6.d(59): unittest failure

    ----------------

    ??:? _d_unittestp [0x42830d]

    ??:? void tmppvt2j4a6.__unittest_L55_C1() [0x427f1b]

    ??:? void tmppvt2j4a6.__modtest() [0x428090]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c36b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1fe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430391]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430840]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43031d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]

    ??:? runModuleUnitTests [0x42c141]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287d0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160772
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long length = arr.length;\n    if (length\
    \ <= 1)\n        return -1L;\n    else if (arr[length - 1] > arr[length - 2])\n\
    \        return length - 1;\n    else if (arr[0] >= arr[1])\n        return -1L;\n\
    \    else\n    {\n        for (int i = 1; i < length - 1; i++)\n        {\n  \
    \          if (arr[i] < arr[i - 1] && arr[i] >= arr[i + 1])\n                return\
    \ i;\n        }\n    }\n    return -1L;\n}\nunittest\n{\n    alias candidate =\
    \ can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpk2_oxt1y.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282fd]

    ??:? void tmpk2_oxt1y.__unittest_L34_C1() [0x427f0b]

    ??:? void tmpk2_oxt1y.__modtest() [0x428080]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c35b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1ee]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430381]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430830]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43030d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1c5]

    ??:? runModuleUnitTests [0x42c131]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287c0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160772
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = 0L;\n    long j = 0L;\n \
    \   for (int i = 1; i < arr.length; i++)\n    {\n        if (arr[i] > arr[i -\
    \ 1])\n        {\n            if (arr[i] > max)\n            {\n             \
    \   max = arr[i];\n                j = i;\n            }\n        }\n    }\n \
    \   return (j == 0) ? -1L : j;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprtqq67d1.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x428245]

    ??:? void tmprtqq67d1.__unittest_L32_C1() [0x427e4f]

    ??:? void tmprtqq67d1.__modtest() [0x427fc4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c2a3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b136]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302c9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430778]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430255]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b10d]

    ??:? runModuleUnitTests [0x42c079]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428708]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160772
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long index = -1L;\n    for (size_t i\
    \ = 1L; i < arr.length; i++) \n    {\n        if (arr[i] < arr[i - 1L]) \n   \
    \     {\n            index = max(index, i - 1L);\n        }\n    }\n    return\
    \ index;\n}\n/*\nCreate a function which reverses the order of a tuple.\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaauchszl.d(27): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaauchszl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160771
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = 0L;\n    foreach(i; 0..arr.length)\n\
    \    {\n        if(i < arr.length - 1)\n        {\n            if(arr[i] <= arr[i\
    \ + 1])\n            {\n                max = i;\n            }\n        }\n \
    \   }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n\
    \    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpcj5re8ea.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281f5]

    ??:? void tmpcj5re8ea.__unittest_L30_C1() [0x427e54]

    ??:? void tmpcj5re8ea.__modtest() [0x427f74]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c253]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0e6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430279]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430728]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430205]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0bd]

    ??:? runModuleUnitTests [0x42c029]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286b8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160772
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    for (long i = arr.length - 1; i > 0;\
    \ i--)\n    {\n        if (arr[i - 1] >= arr[i])\n        {\n            return\
    \ i - 1;\n        }\n    }\n    return -1;\n}\nunittest\n{\n    alias candidate\
    \ = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7zv0lef6.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281cd]

    ??:? void tmp7zv0lef6.__unittest_L26_C1() [0x427ddb]

    ??:? void tmp7zv0lef6.__modtest() [0x427f50]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c22b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430251]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430700]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301dd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b095]

    ??:? runModuleUnitTests [0x42c001]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428690]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160772
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = -1L;\n    for (int i = arr.length-1;\
    \ i >= 0; i--) {\n        long v = arr[i];\n        if (v < max) return i;\n \
    \       max = v;\n    }\n    return -1L;\n}\nunittest\n{\n    alias candidate\
    \ = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptp3vnvft.d(18): Error: cannot implicitly convert expression `arr.length
    - 1LU` of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptp3vnvft.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160771
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    if (arr.length < 2)\n        return\
    \ -1L;\n    if (arr[$-1] > arr[$-2])\n        return -1L;\n    if (arr[0] < arr[1])\n\
    \        return 0L;\n    foreach (i, _; arr)\n    {\n        if (i > 0 && i <\
    \ arr.length - 1)\n        {\n            if (arr[i-1] >= arr[i] && arr[i] <=\
    \ arr[i+1])\n                return i;\n        }\n    }\n    return -1L;\n}\n\
    unittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L,\
    \ 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpycoc6edh.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x42831d]

    ??:? void tmpycoc6edh.__unittest_L33_C1() [0x427f2b]

    ??:? void tmpycoc6edh.__modtest() [0x4280a0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c37b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b20e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303a1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430850]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43032d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1e5]

    ??:? runModuleUnitTests [0x42c151]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160772
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    auto max = 0L;\n    auto len = arr.length;\n\
    \    if (len < 2)\n        return -1L;\n    auto max_index = 0L;\n    for (long\
    \ i = 1; i < len; i++)\n    {\n        if (arr[i] <= arr[i - 1])\n           \
    \ continue;\n        if (arr[i] > max)\n        {\n            max = arr[i];\n\
    \            max_index = i;\n        }\n    }\n    return max_index;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpm8zc4ha3.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x42824d]

    ??:? void tmpm8zc4ha3.__unittest_L34_C1() [0x427e5b]

    ??:? void tmpm8zc4ha3.__modtest() [0x427fd0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c2ab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b13e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302d1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430780]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43025d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b115]

    ??:? runModuleUnitTests [0x42c081]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428710]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160772
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long len = arr.length;\n    int j =\
    \ 0;\n    if (len == 1)\n        return -1;\n    else if (len == 2)\n    {\n \
    \       if (arr[1] < arr[0])\n            return 0;\n        else\n          \
    \  return -1;\n    }\n    else\n    {\n        for (int i = len - 1; i > 0; i--)\n\
    \        {\n            if (arr[i] < arr[i - 1])\n            {\n            \
    \    j = i;\n                break;\n            }\n        }\n        if (j ==\
    \ 0)\n            return -1;\n        else\n            return j;\n    }\n}\n\
    unittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L,\
    \ 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0ghpju04.d(30): Error: cannot implicitly convert expression `len
    - 1L` of type `long` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0ghpju04.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160771
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long prev=arr[0];\n    long ind=0;\n\
    \    foreach(long i; arr[1..$])\n    {\n        if(i<=prev)\n        {\n     \
    \       prev=i;\n            ind++;\n        }\n        else break;\n    }\n \
    \   if(ind==arr.length-1) return -1L;\n    else return ind;\n}\nunittest\n{\n\
    \    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L])\
    \ == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpbkxlqv2c.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x428215]

    ??:? void tmpbkxlqv2c.__unittest_L31_C1() [0x427e1f]

    ??:? void tmpbkxlqv2c.__modtest() [0x427f94]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c273]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b106]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430299]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430748]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430225]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0dd]

    ??:? runModuleUnitTests [0x42c049]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286d8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160772
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    if (arr.length == 0L)\n        return\
    \ -1L;\n    long max = arr[0L];\n    long index = 0L;\n    for (long i = 1L; i\
    \ < arr.length; i++) \n    {\n        if (arr[i] > max) \n        {\n        \
    \    max = arr[i];\n            index = i;\n        }\n    }\n    return index;\n\
    }\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpo6y_hfr9.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x42821d]

    ??:? void tmpo6y_hfr9.__unittest_L31_C1() [0x427e27]

    ??:? void tmpo6y_hfr9.__modtest() [0x427f9c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c27b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b10e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302a1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430750]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43022d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0e5]

    ??:? runModuleUnitTests [0x42c051]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286e0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160772
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    if (arr.length == 0) \n        return\
    \ -1L;\n    \n    long max_index = -1L;\n    long max_value = arr[0];\n    \n\
    \    foreach (i, value; arr[1 .. $]) \n    {\n        if (value < max_value) \n\
    \        {\n            max_index = i;\n            max_value = max(max_value,\
    \ value);\n        }\n    }\n    \n    return max_index;\n}\nunittest\n{\n   \
    \ alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L])\
    \ == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpybgeplw_.d(28): Error: undefined identifier `max`, did you mean
    function `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpybgeplw_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160771
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[arr.length - 1];\n  \
    \  for (int i = arr.length - 2; i >= 0; i--) \n    {\n        if (arr[i] > max)\
    \ \n        {\n            max = arr[i];\n        } \n        else \n        {\n\
    \            return i;\n        }\n    }\n    return -1;\n}\nunittest\n{\n   \
    \ alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L])\
    \ == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn0fmog7j.d(18): Error: cannot implicitly convert expression `arr.length
    - 2LU` of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn0fmog7j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160771
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n  long j = -1;\n  for (long i = 1; i < arr.length;\
    \ i++) \n  {\n      if (arr[i] <= arr[i - 1])\n      {\n          j = max(j, i\
    \ - 1);\n      }\n  }\n  return j;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpml59km4a.d(22): Error: undefined identifier `max`, did you mean
    function `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpml59km4a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160771
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long ret = -1L;\n    for (long i = 0L;\
    \ i < arr.length - 1L; i++)\n    {\n        if (arr[i] >= arr[i + 1L])\n     \
    \   {\n            ret = i;\n        }\n    }\n    return ret;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjzfmk4dy.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281dd]

    ??:? void tmpjzfmk4dy.__unittest_L27_C1() [0x427deb]

    ??:? void tmpjzfmk4dy.__modtest() [0x427f60]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c23b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430261]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430710]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]

    ??:? runModuleUnitTests [0x42c011]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160772
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long res = -1L;\n    foreach(elem; arr)\n\
    \    {\n        if(elem > arr[$-1])\n        {\n            res = max(res, $-1);\n\
    \        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0pd5er81.d(22): Error: `$` is valid only inside [] of index or
    slice

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0pd5er81.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160771
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long len=arr.length;\n    if(len==1)\n\
    \        return -1;\n    for(long i=len-1;i>0;i--)\n    {\n        if(arr[i]<arr[i-1])\n\
    \            return i-1;\n    }\n    return -1;\n}\nunittest\n{\n    alias candidate\
    \ = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2nnt_d6y.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281ed]

    ??:? void tmp2nnt_d6y.__unittest_L27_C1() [0x427dfb]

    ??:? void tmp2nnt_d6y.__modtest() [0x427f70]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c24b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430271]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430720]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0b5]

    ??:? runModuleUnitTests [0x42c021]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160772
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long index =\
    \ -1;\n    foreach(i, el; arr)\n    {\n        if(el >= max)\n        {\n    \
    \        max = el;\n            index = i;\n        }\n    }\n    return index;\n\
    }\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpizwalb3o.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281dd]

    ??:? void tmpizwalb3o.__unittest_L29_C1() [0x427deb]

    ??:? void tmpizwalb3o.__modtest() [0x427f60]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c23b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430261]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430710]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]

    ??:? runModuleUnitTests [0x42c011]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160772
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    auto result = -1L;\n    if(arr.length\
    \ == 1)\n        return 0;\n    auto biggest = arr[0];\n    foreach(i, val; arr)\n\
    \    {\n        if(val > biggest)\n        {\n            biggest = val;\n   \
    \         result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L])\
    \ == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpibfrtzq2.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281ed]

    ??:? void tmpibfrtzq2.__unittest_L31_C1() [0x427df7]

    ??:? void tmpibfrtzq2.__modtest() [0x427f6c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c24b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430271]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430720]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0b5]

    ??:? runModuleUnitTests [0x42c021]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160772
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    if (arr.length < 2) \n        return\
    \ -1L;\n    long res = -1L;\n    for (int i = 1; i < arr.length; i++)\n    {\n\
    \        if (arr[i] <= arr[i - 1])\n            res = max(res, i - 1);\n    }\n\
    \    return res;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr59fkw45.d(23): Error: undefined identifier `max`, did you mean
    function `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr59fkw45.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160772
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long largest = -1L;\n    for (long i\
    \ = 0; i < arr.length - 1; i++) \n    {\n        if (arr[i] <= arr[i + 1]) \n\
    \        {\n            largest = max(largest, i);\n        }\n    }\n    return\
    \ largest;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp19__oiem.d(22): Error: undefined identifier `max`, did you mean
    function `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp19__oiem.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160772
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    if (arr.length == 0)\n        return\
    \ -1L;\n    if (arr.length == 1)\n        return 0L;\n    if (arr.length == 2)\n\
    \        return -1L;\n    long i=1;\n    for (; i < arr.length; i++)\n    {\n\
    \        if (arr[i] < arr[i-1])\n            return i-1;\n    }\n    return i-1;\n\
    }\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjowmpyq6.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x42820d]

    ??:? void tmpjowmpyq6.__unittest_L31_C1() [0x427e1b]

    ??:? void tmpjowmpyq6.__modtest() [0x427f90]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c26b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0fe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430291]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430740]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43021d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d5]

    ??:? runModuleUnitTests [0x42c041]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286d0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160772
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long first = arr[0];\n    long second\
    \ = arr[1];\n    foreach(i, element; arr) \n    {\n        if(first >= element)\
    \ \n        {\n            return i - 1;\n        }\n        first = element;\n\
    \    }\n    return -1;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n\
    \    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpgsr26u_o.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281fd]

    ??:? void tmpgsr26u_o.__unittest_L29_C1() [0x427e0b]

    ??:? void tmpgsr26u_o.__modtest() [0x427f80]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c25b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0ee]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430281]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430730]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43020d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0c5]

    ??:? runModuleUnitTests [0x42c031]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286c0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160772
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n\tlong index = -1L;\n\tfor (long i = 1L;\
    \ i < arr.length; i++)\n\t{\n\t\tif (arr[i] <= arr[i - 1L])\n\t\t{\n\t\t\tindex\
    \ = i - 1L;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn index;\n}\nunittest\n{\n    alias\
    \ candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n\
    \    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L,\
    \ 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L,\
    \ 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpi8dfzatc.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281dd]

    ??:? void tmpi8dfzatc.__unittest_L28_C1() [0x427deb]

    ??:? void tmpi8dfzatc.__modtest() [0x427f60]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c23b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430261]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430710]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]

    ??:? runModuleUnitTests [0x42c011]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160772
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    int elements = arr.length;\n    int\
    \ i;\n    if (elements <= 1)\n        return -1;\n    for (i = 1; i < elements;\
    \ i++)\n    {\n        if (arr[i] < arr[i - 1])\n            return i - 1;\n \
    \   }\n    return -1;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n\
    \    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3wjum38t.d(17): Error: cannot implicitly convert expression `arr.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3wjum38t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160772
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    int i;\n    long minValue = arr[0];\n\
    \    for (i = 1; i < arr.length; i++)\n    {\n        if (arr[i] > minValue)\n\
    \        {\n            return i;\n        }\n        else\n        {\n      \
    \      minValue = arr[i];\n        }\n    }\n    return -1;\n}\nunittest\n{\n\
    \    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L])\
    \ == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp1lt2a1hd.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x428205]

    ??:? void tmp1lt2a1hd.__unittest_L32_C1() [0x427e13]

    ??:? void tmp1lt2a1hd.__modtest() [0x427f88]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c263]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0f6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430289]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430738]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430215]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0cd]

    ??:? runModuleUnitTests [0x42c039]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160772
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n\tlong largestIndex = -1L;\n\tlong lowestValue\
    \ = arr[0];\n\tforeach(index, value; arr)\n\t{\n\t\tif(index != 0)\n\t\t{\n\t\t\
    \tif(value < lowestValue)\n\t\t\t{\n\t\t\t\tlargestIndex = index - 1;\n\t\t\t\t\
    lowestValue = value;\n\t\t\t}\n\t\t}\n\t}\n\treturn largestIndex;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8i991v5.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281ed]

    ??:? void tmpy8i991v5.__unittest_L32_C1() [0x427df7]

    ??:? void tmpy8i991v5.__modtest() [0x427f6c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c24b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430271]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430720]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0b5]

    ??:? runModuleUnitTests [0x42c021]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160772
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    if (arr.length < 2) \n        return\
    \ -1L;\n    long largest_index = -1L;\n    for (long i = 1L; i < arr.length; i++)\
    \ \n    {\n        long current = arr[cast(int)i];\n        long previous = arr[cast(int)(i\
    \ - 1L)];\n        if (current <= previous) \n            continue;\n        largest_index\
    \ = cast(long)i;\n        for (long j = i + 1L; j < arr.length; j++) \n      \
    \  {\n            if (arr[cast(int)j] <= current) \n                break;\n \
    \           largest_index = cast(long)j;\n        }\n        break;\n    }\n \
    \   return largest_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwobzw8qv.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x428245]

    ??:? void tmpwobzw8qv.__unittest_L37_C1() [0x427e53]

    ??:? void tmpwobzw8qv.__modtest() [0x427fc8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c2a3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b136]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302c9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430778]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430255]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b10d]

    ??:? runModuleUnitTests [0x42c079]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428708]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160772
