name: HumanEval_136_largest_smallest_integers
language: d
results:
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in an array.\n    If there\
    \ is no negative or positive integers, return them as null.\n\n    Examples:\n\
    \    >>> largest_smallest_integers([2L, 4L, 1L, 3L, 5L, 7L])\n    tuple(None,\
    \ 1L)\n    >>> largest_smallest_integers([])\n    tuple(None, None)\n    >>> largest_smallest_integers([0L])\n\
    \    tuple(None, None)\n    \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    if(lst.length == 0)\n        return tuple(null, null);\n    else\n\
    \    {\n        long max_neg = -2147483648L;\n        long min_pos = 2147483647L;\n\
    \        foreach(x; lst)\n        {\n            if(x<0)\n                max_neg\
    \ = max(max_neg, x);\n            else if(x>0)\n                min_pos = min(min_pos,\
    \ x);\n        }\n        return tuple(max_neg == -2147483648L ? null : max_neg,\
    \ min_pos == 2147483647L ? null : min_pos);\n    }\n}\nunittest\n{\n    alias\
    \ candidate = largest_smallest_integers;\n\n{\n        auto result = candidate([2L,\
    \ 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n{\n        auto result = candidate([2L, 4L, 1L,\
    \ 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n{\n        auto result = candidate([1L, 3L, 2L,\
    \ 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull && result[0].get == -2L);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -7L);\n        assert(!result[1].isNull && result[1].get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L, 4L, 9L, 2L, 5L,\
    \ -9L]);\n        assert(!result[0].isNull && result[0].get == -9L);\n       \
    \ assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result[0].isNull);\n        assert(result[1].isNull);\n\
    }\n\n{\n        auto result = candidate([0L]);\n        assert(result[0].isNull);\n\
    \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-1L,\
    \ -3L, -5L, -6L]);\n        assert(!result[0].isNull && result[0].get == -1L);\n\
    \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-1L,\
    \ -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull && result[0].get == -1L);\n\
    \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-6L,\
    \ -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([-6L, -4L, -4L, -3L, -100L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsp6wbyho.d(30): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpsp6wbyho.d(32): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpsp6wbyho.d(34): Error: incompatible\
    \ types for `(null) : (max_neg)`: `typeof(null)` and `long`\\n/tmp/tmpsp6wbyho.d(34):\
    \ Error: incompatible types for `(null) : (min_pos)`: `typeof(null)` and `long`\\\
    n/tmp/tmpsp6wbyho.d(22): Error: cannot implicitly convert expression `tuple(null,\
    \ null)` of type `Tuple!(typeof(null), typeof(null))` to `Tuple!(Nullable!long,\
    \ Nullable!long)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsp6wbyho.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in an array.\n    If there\
    \ is no negative or positive integers, return them as null.\n\n    Examples:\n\
    \    >>> largest_smallest_integers([2L, 4L, 1L, 3L, 5L, 7L])\n    tuple(None,\
    \ 1L)\n    >>> largest_smallest_integers([])\n    tuple(None, None)\n    >>> largest_smallest_integers([0L])\n\
    \    tuple(None, None)\n    \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) a = Nullable!(long).init;\n    Nullable!(long)\
    \ b = Nullable!(long).init;\n    foreach(x; lst)\n    {\n        if(x < 0L)\n\
    \        {\n            if(!a.isNull || a < x)\n            {\n              \
    \  a = x;\n            }\n        }\n        else if(x > 0L)\n        {\n    \
    \        if(!b.isNull || b > x)\n            {\n                b = x;\n     \
    \       }\n        }\n    }\n    return tuple(a, b);\n}\nunittest\n{\n    alias\
    \ candidate = largest_smallest_integers;\n\n{\n        auto result = candidate([2L,\
    \ 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n{\n        auto result = candidate([2L, 4L, 1L,\
    \ 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n{\n        auto result = candidate([1L, 3L, 2L,\
    \ 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull && result[0].get == -2L);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -7L);\n        assert(!result[1].isNull && result[1].get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L, 4L, 9L, 2L, 5L,\
    \ -9L]);\n        assert(!result[0].isNull && result[0].get == -9L);\n       \
    \ assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result[0].isNull);\n        assert(result[1].isNull);\n\
    }\n\n{\n        auto result = candidate([0L]);\n        assert(result[0].isNull);\n\
    \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-1L,\
    \ -3L, -5L, -6L]);\n        assert(!result[0].isNull && result[0].get == -1L);\n\
    \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-1L,\
    \ -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull && result[0].get == -1L);\n\
    \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-6L,\
    \ -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([-6L, -4L, -4L, -3L, -100L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b\"core.exception.AssertError@/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(2845):\
    \ Called `get' on null Nullable!long.\\n----------------\\n??:? _d_assert_msg\
    \ [0x456892]\\n??:? inout pure nothrow ref @property @nogc @safe inout(long) std.typecons.Nullable!(long).Nullable.get()\
    \ [0x442d0d]\\n??:? std.typecons.Tuple!(std.typecons.Nullable!(long).Nullable,\
    \ std.typecons.Nullable!(long).Nullable).Tuple tmpe660zvc_.largest_smallest_integers(long[])\
    \ [0x441e0f]\\n??:? void tmpe660zvc_.__unittest_L42_C1() [0x441ebe]\\n??:? void\
    \ tmpe660zvc_.__modtest() [0x454488]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45f97b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x455fa6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x45b1bd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x45b24c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x45b149]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x455f7d]\\n??:? runModuleUnitTests [0x45f751]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x457904]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x45788b]\\n??:? _d_run_main [0x4577f6]\\n??:? main [0x45455b]\\\
    n??:? __libc_start_main [0x9e3c7554]\\n1/1 unittests FAILED\\n\""
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in an array.\n    If there\
    \ is no negative or positive integers, return them as null.\n\n    Examples:\n\
    \    >>> largest_smallest_integers([2L, 4L, 1L, 3L, 5L, 7L])\n    tuple(None,\
    \ 1L)\n    >>> largest_smallest_integers([])\n    tuple(None, None)\n    >>> largest_smallest_integers([0L])\n\
    \    tuple(None, None)\n    \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) max_neg;\n    Nullable!(long) min_pos;\n    foreach(idx,\
    \ item; lst) \n    {\n        if (item < 0) \n        {\n            if (!max_neg.isNull)\
    \ \n            {\n                if (max_neg.get < item) \n                {\n\
    \                    max_neg = item;\n                }\n            }\n     \
    \       else \n            {\n                max_neg = item;\n            }\n\
    \        }\n        else if (item > 0) \n        {\n            if (!min_pos.isNull)\
    \ \n            {\n                if (min_pos.get > item) \n                {\n\
    \                    min_pos = item;\n                }\n            }\n     \
    \       else \n            {\n                min_pos = item;\n            }\n\
    \        }\n    }\n    return tuple(max_neg, min_pos);\n}\nunittest\n{\n    alias\
    \ candidate = largest_smallest_integers;\n\n{\n        auto result = candidate([2L,\
    \ 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n{\n        auto result = candidate([2L, 4L, 1L,\
    \ 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n{\n        auto result = candidate([1L, 3L, 2L,\
    \ 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull && result[0].get == -2L);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -7L);\n        assert(!result[1].isNull && result[1].get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L, 4L, 9L, 2L, 5L,\
    \ -9L]);\n        assert(!result[0].isNull && result[0].get == -9L);\n       \
    \ assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result[0].isNull);\n        assert(result[1].isNull);\n\
    }\n\n{\n        auto result = candidate([0L]);\n        assert(result[0].isNull);\n\
    \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-1L,\
    \ -3L, -5L, -6L]);\n        assert(!result[0].isNull && result[0].get == -1L);\n\
    \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-1L,\
    \ -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull && result[0].get == -1L);\n\
    \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-6L,\
    \ -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([-6L, -4L, -4L, -3L, -100L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in an array.\n    If there\
    \ is no negative or positive integers, return them as null.\n\n    Examples:\n\
    \    >>> largest_smallest_integers([2L, 4L, 1L, 3L, 5L, 7L])\n    tuple(None,\
    \ 1L)\n    >>> largest_smallest_integers([])\n    tuple(None, None)\n    >>> largest_smallest_integers([0L])\n\
    \    tuple(None, None)\n    \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) small = Nullable!(long)();\n    Nullable!(long)\
    \ large = Nullable!(long)();\n    foreach(i; lst)\n    {\n        if(i < 0)\n\
    \        {\n            if(i < small.getOrDefault)\n            {\n          \
    \      small = Nullable!(long)(i);\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(i > large.getOrDefault)\n            {\n   \
    \             large = Nullable!(long)(i);\n            }\n        }\n    }\n \
    \   return tuple(large, small);\n}\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\
    \n{\n        auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3n82me4q.d(27): Error: no property `getOrDefault` for type `Nullable!long`\\\
    n/tmp/tmp3n82me4q.d(34): Error: no property `getOrDefault` for type `Nullable!long`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3n82me4q.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in an array.\n    If there\
    \ is no negative or positive integers, return them as null.\n\n    Examples:\n\
    \    >>> largest_smallest_integers([2L, 4L, 1L, 3L, 5L, 7L])\n    tuple(None,\
    \ 1L)\n    >>> largest_smallest_integers([])\n    tuple(None, None)\n    >>> largest_smallest_integers([0L])\n\
    \    tuple(None, None)\n    \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n\tNullable!(long) maxNeg = null;\n\tNullable!(long) minPos = null;\n\
    \tforeach(num; lst)\n\t{\n\t\tif(num > 0)\n\t\t{\n\t\t\tif(minPos is null || num\
    \ < minPos)\n\t\t\t\tminPos = num;\n\t\t}\n\t\telse if(num < 0)\n\t\t{\n\t\t\t\
    if(maxNeg is null || num > maxNeg)\n\t\t\t\tmaxNeg = num;\n\t\t}\n\t}\n\treturn\
    \ tuple(maxNeg, minPos);\n}\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\
    \n{\n        auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph_kq2ke3.d(21): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`\
    \ is not callable using a mutable object\\n/tmp/tmph_kq2ke3.d(22): Error: `inout`\
    \ method `std.typecons.Nullable!long.Nullable.this` is not callable using a mutable\
    \ object\\n/tmp/tmph_kq2ke3.d(27): Error: incompatible types for `(minPos) is\
    \ (null)`: `Nullable!long` and `typeof(null)`\\n/tmp/tmph_kq2ke3.d(32): Error:\
    \ incompatible types for `(maxNeg) is (null)`: `Nullable!long` and `typeof(null)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph_kq2ke3.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in an array.\n    If there\
    \ is no negative or positive integers, return them as null.\n\n    Examples:\n\
    \    >>> largest_smallest_integers([2L, 4L, 1L, 3L, 5L, 7L])\n    tuple(None,\
    \ 1L)\n    >>> largest_smallest_integers([])\n    tuple(None, None)\n    >>> largest_smallest_integers([0L])\n\
    \    tuple(None, None)\n    \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) neg = null;\n    Nullable!(long) pos = null;\n\
    \    foreach(n; lst)\n    {\n        if(n < 0)\n        {\n            if(neg\
    \ is null || neg < n)\n                neg = n;\n        }\n        else if(n\
    \ > 0)\n        {\n            if(pos is null || pos > n)\n                pos\
    \ = n;\n        }\n    }\n    return tuple(neg, pos);\n}\nunittest\n{\n    alias\
    \ candidate = largest_smallest_integers;\n\n{\n        auto result = candidate([2L,\
    \ 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n{\n        auto result = candidate([2L, 4L, 1L,\
    \ 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n{\n        auto result = candidate([1L, 3L, 2L,\
    \ 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull && result[0].get == -2L);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -7L);\n        assert(!result[1].isNull && result[1].get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L, 4L, 9L, 2L, 5L,\
    \ -9L]);\n        assert(!result[0].isNull && result[0].get == -9L);\n       \
    \ assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result[0].isNull);\n        assert(result[1].isNull);\n\
    }\n\n{\n        auto result = candidate([0L]);\n        assert(result[0].isNull);\n\
    \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-1L,\
    \ -3L, -5L, -6L]);\n        assert(!result[0].isNull && result[0].get == -1L);\n\
    \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-1L,\
    \ -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull && result[0].get == -1L);\n\
    \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-6L,\
    \ -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([-6L, -4L, -4L, -3L, -100L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxu81lcst.d(21): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`\
    \ is not callable using a mutable object\\n/tmp/tmpxu81lcst.d(22): Error: `inout`\
    \ method `std.typecons.Nullable!long.Nullable.this` is not callable using a mutable\
    \ object\\n/tmp/tmpxu81lcst.d(27): Error: incompatible types for `(neg) is (null)`:\
    \ `Nullable!long` and `typeof(null)`\\n/tmp/tmpxu81lcst.d(32): Error: incompatible\
    \ types for `(pos) is (null)`: `Nullable!long` and `typeof(null)`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxu81lcst.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in an array.\n    If there\
    \ is no negative or positive integers, return them as null.\n\n    Examples:\n\
    \    >>> largest_smallest_integers([2L, 4L, 1L, 3L, 5L, 7L])\n    tuple(None,\
    \ 1L)\n    >>> largest_smallest_integers([])\n    tuple(None, None)\n    >>> largest_smallest_integers([0L])\n\
    \    tuple(None, None)\n    \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_neg;\n    Nullable!(long) smallest_pos;\n\
    \    foreach(x; lst) \n    {\n        if(x < 0)\n        {\n            if(!largest_neg.isNull)\n\
    \            {\n                if(largest_neg.get < x)\n                {\n \
    \                   largest_neg = x;\n                }\n            }\n     \
    \       else\n            {\n                largest_neg = x;\n            }\n\
    \        }\n        else if(x > 0)\n        {\n            if(!smallest_pos.isNull)\n\
    \            {\n                if(smallest_pos.get > x)\n                {\n\
    \                    smallest_pos = x;\n                }\n            }\n   \
    \         else\n            {\n                smallest_pos = x;\n           \
    \ }\n        }\n    }\n    return tuple(largest_neg, smallest_pos);\n}\nunittest\n\
    {\n    alias candidate = largest_smallest_integers;\n\n{\n        auto result\
    \ = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in an array.\n    If there\
    \ is no negative or positive integers, return them as null.\n\n    Examples:\n\
    \    >>> largest_smallest_integers([2L, 4L, 1L, 3L, 5L, 7L])\n    tuple(None,\
    \ 1L)\n    >>> largest_smallest_integers([])\n    tuple(None, None)\n    >>> largest_smallest_integers([0L])\n\
    \    tuple(None, None)\n    \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    auto biggest = lst.filter!(x => x < 0).sort.front;\n    auto smallest\
    \ = lst.filter!(x => x > 0).sort.front;\n    return tuple(biggest, smallest);\n\
    }\n \n/*\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n\
    \        auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp17ceodsm.d(26): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp17ceodsm.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in an array.\n    If there\
    \ is no negative or positive integers, return them as null.\n\n    Examples:\n\
    \    >>> largest_smallest_integers([2L, 4L, 1L, 3L, 5L, 7L])\n    tuple(None,\
    \ 1L)\n    >>> largest_smallest_integers([])\n    tuple(None, None)\n    >>> largest_smallest_integers([0L])\n\
    \    tuple(None, None)\n    \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    return tuple(null, null);\n}\nunittest\n{\n    alias candidate\
    \ = largest_smallest_integers;\n\n{\n        auto result = candidate([2L, 4L,\
    \ 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n{\n        auto result = candidate([2L, 4L, 1L,\
    \ 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n{\n        auto result = candidate([1L, 3L, 2L,\
    \ 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull && result[0].get == -2L);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -7L);\n        assert(!result[1].isNull && result[1].get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L, 4L, 9L, 2L, 5L,\
    \ -9L]);\n        assert(!result[0].isNull && result[0].get == -9L);\n       \
    \ assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result[0].isNull);\n        assert(result[1].isNull);\n\
    }\n\n{\n        auto result = candidate([0L]);\n        assert(result[0].isNull);\n\
    \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-1L,\
    \ -3L, -5L, -6L]);\n        assert(!result[0].isNull && result[0].get == -1L);\n\
    \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-1L,\
    \ -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull && result[0].get == -1L);\n\
    \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-6L,\
    \ -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([-6L, -4L, -4L, -3L, -100L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9zz8objo.d(21): Error: cannot implicitly convert expression `tuple(null,\
    \ null)` of type `Tuple!(typeof(null), typeof(null))` to `Tuple!(Nullable!long,\
    \ Nullable!long)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9zz8objo.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in an array.\n    If there\
    \ is no negative or positive integers, return them as null.\n\n    Examples:\n\
    \    >>> largest_smallest_integers([2L, 4L, 1L, 3L, 5L, 7L])\n    tuple(None,\
    \ 1L)\n    >>> largest_smallest_integers([])\n    tuple(None, None)\n    >>> largest_smallest_integers([0L])\n\
    \    tuple(None, None)\n    \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) a = null;\n    Nullable!(long) b = null;\n   \
    \ foreach(item; lst) \n    {\n        if(item > 0)\n        {\n            if(b\
    \ is null)\n            {\n                b = item;\n            }\n        \
    \    else\n            {\n                b = min(b, item);\n            }\n \
    \       }\n        else if(item < 0)\n        {\n            if(a is null)\n \
    \           {\n                a = item;\n            }\n            else\n  \
    \          {\n                a = max(a, item);\n            }\n        }\n  \
    \  }\n    return tuple(a, b);\n}\nassert(largest_smallest_integers([2L, 4L, 1L,\
    \ 3L, 5L, 7L]) == tuple(null, 1L));\nassert(largest_smallest_integers([]) == tuple(null,\
    \ null));\nassert(largest_smallest_integers([0L]) == tuple(null, null));\nunittest\n\
    {\n    alias candidate = largest_smallest_integers;\n\n{\n        auto result\
    \ = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpze3eme_7.d(50): Error: declaration expected, not `assert`\\n/tmp/tmpze3eme_7.d(51):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpze3eme_7.d(52): Error: declaration\
    \ expected, not `assert`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"\
    /tmp/tmpze3eme_7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in an array.\n    If there\
    \ is no negative or positive integers, return them as null.\n\n    Examples:\n\
    \    >>> largest_smallest_integers([2L, 4L, 1L, 3L, 5L, 7L])\n    tuple(None,\
    \ 1L)\n    >>> largest_smallest_integers([])\n    tuple(None, None)\n    >>> largest_smallest_integers([0L])\n\
    \    tuple(None, None)\n    \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largeNegative = null;\n    Nullable!(long) smallPositive\
    \ = null;\n    foreach(element; lst) \n    {\n        if(element > 0) \n     \
    \   {\n            if(smallPositive is null) \n            {\n               \
    \ smallPositive = element;\n            }\n            else if(element < smallPositive)\
    \ \n            {\n                smallPositive = element;\n            }\n \
    \       }\n        else if(element < 0) \n        {\n            if(largeNegative\
    \ is null) \n            {\n                largeNegative = element;\n       \
    \     }\n            else if(element > largeNegative) \n            {\n      \
    \          largeNegative = element;\n            }\n        }\n    }\n    return\
    \ tuple(largeNegative, smallPositive);\n}\nunittest\n{\n    alias candidate =\
    \ largest_smallest_integers;\n\n{\n        auto result = candidate([2L, 4L, 1L,\
    \ 3L, 5L, 7L]);\n        assert(result[0].isNull);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n{\n        auto result = candidate([2L, 4L, 1L,\
    \ 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n{\n        auto result = candidate([1L, 3L, 2L,\
    \ 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull && result[0].get == -2L);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -7L);\n        assert(!result[1].isNull && result[1].get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L, 4L, 9L, 2L, 5L,\
    \ -9L]);\n        assert(!result[0].isNull && result[0].get == -9L);\n       \
    \ assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result[0].isNull);\n        assert(result[1].isNull);\n\
    }\n\n{\n        auto result = candidate([0L]);\n        assert(result[0].isNull);\n\
    \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-1L,\
    \ -3L, -5L, -6L]);\n        assert(!result[0].isNull && result[0].get == -1L);\n\
    \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-1L,\
    \ -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull && result[0].get == -1L);\n\
    \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-6L,\
    \ -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([-6L, -4L, -4L, -3L, -100L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpplj3p0wv.d(21): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`\
    \ is not callable using a mutable object\\n/tmp/tmpplj3p0wv.d(22): Error: `inout`\
    \ method `std.typecons.Nullable!long.Nullable.this` is not callable using a mutable\
    \ object\\n/tmp/tmpplj3p0wv.d(27): Error: incompatible types for `(smallPositive)\
    \ is (null)`: `Nullable!long` and `typeof(null)`\\n/tmp/tmpplj3p0wv.d(38): Error:\
    \ incompatible types for `(largeNegative) is (null)`: `Nullable!long` and `typeof(null)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpplj3p0wv.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in an array.\n    If there\
    \ is no negative or positive integers, return them as null.\n\n    Examples:\n\
    \    >>> largest_smallest_integers([2L, 4L, 1L, 3L, 5L, 7L])\n    tuple(None,\
    \ 1L)\n    >>> largest_smallest_integers([])\n    tuple(None, None)\n    >>> largest_smallest_integers([0L])\n\
    \    tuple(None, None)\n    \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    import std.typecons;\n    Nullable!(long) largestNegative = null;\n\
    \    Nullable!(long) smallestPositive = null;\n    foreach(x; lst) \n    {\n \
    \       if(x < 0) \n        {\n            if(largestNegative.isNull || x > largestNegative.get)\n\
    \                largestNegative = x;\n        }\n        else if(x > 0) \n  \
    \      {\n            if(smallestPositive.isNull || x < smallestPositive.get)\n\
    \                smallestPositive = x;\n        }\n    }\n    return tuple(largestNegative,\
    \ smallestPositive);\n}\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\
    \n{\n        auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3kcn8qw_.d(22): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`\
    \ is not callable using a mutable object\\n/tmp/tmp3kcn8qw_.d(23): Error: `inout`\
    \ method `std.typecons.Nullable!long.Nullable.this` is not callable using a mutable\
    \ object\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3kcn8qw_.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in an array.\n    If there\
    \ is no negative or positive integers, return them as null.\n\n    Examples:\n\
    \    >>> largest_smallest_integers([2L, 4L, 1L, 3L, 5L, 7L])\n    tuple(None,\
    \ 1L)\n    >>> largest_smallest_integers([])\n    tuple(None, None)\n    >>> largest_smallest_integers([0L])\n\
    \    tuple(None, None)\n    \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    auto a = null;\n    auto b = null;\n    foreach(l; lst)\n    {\n\
    \        if(l > 0)\n        {\n            if(b is null)\n            {\n    \
    \            b = l;\n            }\n            else\n            {\n        \
    \        b = min(b, l);\n            }\n        }\n        else if(l < 0)\n  \
    \      {\n            if(a is null)\n            {\n                a = l;\n \
    \           }\n            else\n            {\n                a = max(a, l);\n\
    \            }\n        }\n    }\n    return tuple(a, b);\n}\nunittest\n{\n  \
    \  alias candidate = largest_smallest_integers;\n\n{\n        auto result = candidate([2L,\
    \ 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n{\n        auto result = candidate([2L, 4L, 1L,\
    \ 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n{\n        auto result = candidate([1L, 3L, 2L,\
    \ 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull && result[0].get == -2L);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -7L);\n        assert(!result[1].isNull && result[1].get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L, 4L, 9L, 2L, 5L,\
    \ -9L]);\n        assert(!result[0].isNull && result[0].get == -9L);\n       \
    \ assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result[0].isNull);\n        assert(result[1].isNull);\n\
    }\n\n{\n        auto result = candidate([0L]);\n        assert(result[0].isNull);\n\
    \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-1L,\
    \ -3L, -5L, -6L]);\n        assert(!result[0].isNull && result[0].get == -1L);\n\
    \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-1L,\
    \ -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull && result[0].get == -1L);\n\
    \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-6L,\
    \ -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([-6L, -4L, -4L, -3L, -100L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9tdu1y7p.d(29): Error: cannot implicitly convert expression `l`\
    \ of type `long` to `typeof(null)`\\n/tmp/tmp9tdu1y7p.d(33): Error: undefined\
    \ identifier `min`, did you mean function `main`?\\n/tmp/tmp9tdu1y7p.d(40): Error:\
    \ cannot implicitly convert expression `l` of type `long` to `typeof(null)`\\\
    n/tmp/tmp9tdu1y7p.d(44): Error: undefined identifier `max`, did you mean function\
    \ `fmax`?\\n/tmp/tmp9tdu1y7p.d(48): Error: cannot implicitly convert expression\
    \ `tuple(a, b)` of type `Tuple!(typeof(null), typeof(null))` to `Tuple!(Nullable!long,\
    \ Nullable!long)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9tdu1y7p.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in an array.\n    If there\
    \ is no negative or positive integers, return them as null.\n\n    Examples:\n\
    \    >>> largest_smallest_integers([2L, 4L, 1L, 3L, 5L, 7L])\n    tuple(None,\
    \ 1L)\n    >>> largest_smallest_integers([])\n    tuple(None, None)\n    >>> largest_smallest_integers([0L])\n\
    \    tuple(None, None)\n    \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    auto maxNeg = lst.filter!((e) => e < 0L).max();\n    auto minPos\
    \ = lst.filter!((e) => e > 0L).min();\n    return tuple(maxNeg, minPos);\n}\n\
    unittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt2xwv5kf.d(21): Error: no property `filter` for type `long[]`\\\
    n/tmp/tmpt2xwv5kf.d(22): Error: no property `filter` for type `long[]`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt2xwv5kf.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in an array.\n    If there\
    \ is no negative or positive integers, return them as null.\n\n    Examples:\n\
    \    >>> largest_smallest_integers([2L, 4L, 1L, 3L, 5L, 7L])\n    tuple(None,\
    \ 1L)\n    >>> largest_smallest_integers([])\n    tuple(None, None)\n    >>> largest_smallest_integers([0L])\n\
    \    tuple(None, None)\n    \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    return tuple(null, 1L);\n}\n \nunittest\n{\n    alias candidate\
    \ = largest_smallest_integers;\n\n{\n        auto result = candidate([2L, 4L,\
    \ 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n{\n        auto result = candidate([2L, 4L, 1L,\
    \ 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n{\n        auto result = candidate([1L, 3L, 2L,\
    \ 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull && result[0].get == -2L);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -7L);\n        assert(!result[1].isNull && result[1].get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L, 4L, 9L, 2L, 5L,\
    \ -9L]);\n        assert(!result[0].isNull && result[0].get == -9L);\n       \
    \ assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result[0].isNull);\n        assert(result[1].isNull);\n\
    }\n\n{\n        auto result = candidate([0L]);\n        assert(result[0].isNull);\n\
    \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-1L,\
    \ -3L, -5L, -6L]);\n        assert(!result[0].isNull && result[0].get == -1L);\n\
    \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-1L,\
    \ -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull && result[0].get == -1L);\n\
    \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-6L,\
    \ -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([-6L, -4L, -4L, -3L, -100L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmlbq152y.d(21): Error: cannot implicitly convert expression `tuple(null,\
    \ 1L)` of type `Tuple!(typeof(null), long)` to `Tuple!(Nullable!long, Nullable!long)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmlbq152y.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in an array.\n    If there\
    \ is no negative or positive integers, return them as null.\n\n    Examples:\n\
    \    >>> largest_smallest_integers([2L, 4L, 1L, 3L, 5L, 7L])\n    tuple(None,\
    \ 1L)\n    >>> largest_smallest_integers([])\n    tuple(None, None)\n    >>> largest_smallest_integers([0L])\n\
    \    tuple(None, None)\n    \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = Nullable!(long)();\n    Nullable!(long)\
    \ smallestPositive = Nullable!(long)();\n    foreach(index, i; lst)\n    {\n \
    \       if(i < 0)\n        {\n            if(largestNegative.isNull || largestNegative.get\
    \ > i)\n            {\n                largestNegative = Nullable!(long)(i);\n\
    \            }\n        }\n        else if(i > 0)\n        {\n            if(smallestPositive.isNull\
    \ || smallestPositive.get > i)\n            {\n                smallestPositive\
    \ = Nullable!(long)(i);\n            }\n        }\n    }\n    return tuple(largestNegative,\
    \ smallestPositive);\n}\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\
    \n{\n        auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpi91ovue0.d(90): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x456961]\\n??:? void tmpi91ovue0.__unittest_L42_C1()\
    \ [0x44234f]\\n??:? void tmpi91ovue0.__modtest() [0x45446c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45f963]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x455f8e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x45b1a5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x45b234]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x45b131]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x455f65]\\n??:? runModuleUnitTests [0x45f739]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4578ec]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x457873]\\n??:? _d_run_main [0x4577de]\\n??:? main [0x45453f]\\\
    n??:? __libc_start_main [0xfebdf554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in an array.\n    If there\
    \ is no negative or positive integers, return them as null.\n\n    Examples:\n\
    \    >>> largest_smallest_integers([2L, 4L, 1L, 3L, 5L, 7L])\n    tuple(None,\
    \ 1L)\n    >>> largest_smallest_integers([])\n    tuple(None, None)\n    >>> largest_smallest_integers([0L])\n\
    \    tuple(None, None)\n    \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative;\n    Nullable!(long) smallest_positive;\n\
    \    foreach(long n; lst)\n    {\n        if(n < 0)\n        {\n            if(largest_negative.isNull)\n\
    \            {\n                largest_negative = n;\n            }\n       \
    \     else\n            {\n                largest_negative = max(largest_negative,\
    \ n);\n            }\n        }\n        else if(n > 0)\n        {\n         \
    \   if(smallest_positive.isNull)\n            {\n                smallest_positive\
    \ = n;\n            }\n            else\n            {\n                smallest_positive\
    \ = min(smallest_positive, n);\n            }\n        }\n    }\n    return tuple(largest_negative,\
    \ smallest_positive);\n}\n/*\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\
    \n{\n        auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpweaze2kh.d(50): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpweaze2kh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in an array.\n    If there\
    \ is no negative or positive integers, return them as null.\n\n    Examples:\n\
    \    >>> largest_smallest_integers([2L, 4L, 1L, 3L, 5L, 7L])\n    tuple(None,\
    \ 1L)\n    >>> largest_smallest_integers([])\n    tuple(None, None)\n    >>> largest_smallest_integers([0L])\n\
    \    tuple(None, None)\n    \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest = Nullable!(long)();\n    Nullable!(long)\
    \ smallest = Nullable!(long)();\n    foreach(l; lst)\n    {\n        if(l < 0L)\n\
    \        {\n            if(!largest || l > largest.get)\n            {\n     \
    \           largest = Nullable!(long)(l);\n            }\n        }\n        else\
    \ if(l > 0L)\n        {\n            if(!smallest || l < smallest.get)\n     \
    \       {\n                smallest = Nullable!(long)(l);\n            }\n   \
    \     }\n    }\n    return tuple(largest, smallest);\n}\nunittest\n{\n    alias\
    \ candidate = largest_smallest_integers;\n\n{\n        auto result = candidate([2L,\
    \ 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n{\n        auto result = candidate([2L, 4L, 1L,\
    \ 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n{\n        auto result = candidate([1L, 3L, 2L,\
    \ 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull && result[0].get == -2L);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -7L);\n        assert(!result[1].isNull && result[1].get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L, 4L, 9L, 2L, 5L,\
    \ -9L]);\n        assert(!result[0].isNull && result[0].get == -9L);\n       \
    \ assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result[0].isNull);\n        assert(result[1].isNull);\n\
    }\n\n{\n        auto result = candidate([0L]);\n        assert(result[0].isNull);\n\
    \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-1L,\
    \ -3L, -5L, -6L]);\n        assert(!result[0].isNull && result[0].get == -1L);\n\
    \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-1L,\
    \ -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull && result[0].get == -1L);\n\
    \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-6L,\
    \ -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([-6L, -4L, -4L, -3L, -100L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b\"core.exception.AssertError@/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(2845):\
    \ Called `get' on null Nullable!long.\\n----------------\\n??:? _d_assert_msg\
    \ [0x45687a]\\n??:? inout pure nothrow ref @property @nogc @safe inout(long) std.typecons.Nullable!(long).Nullable.get()\
    \ [0x442d05]\\n??:? std.typecons.Tuple!(std.typecons.Nullable!(long).Nullable,\
    \ std.typecons.Nullable!(long).Nullable).Tuple tmp_vr_rhta.largest_smallest_integers(long[])\
    \ [0x441dd0]\\n??:? void tmp_vr_rhta.__unittest_L42_C1() [0x441eb6]\\n??:? void\
    \ tmp_vr_rhta.__modtest() [0x454470]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45f963]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x455f8e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x45b1a5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x45b234]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x45b131]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x455f65]\\n??:? runModuleUnitTests [0x45f739]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4578ec]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x457873]\\n??:? _d_run_main [0x4577de]\\n??:? main [0x454543]\\\
    n??:? __libc_start_main [0x15d554]\\n1/1 unittests FAILED\\n\""
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in an array.\n    If there\
    \ is no negative or positive integers, return them as null.\n\n    Examples:\n\
    \    >>> largest_smallest_integers([2L, 4L, 1L, 3L, 5L, 7L])\n    tuple(None,\
    \ 1L)\n    >>> largest_smallest_integers([])\n    tuple(None, None)\n    >>> largest_smallest_integers([0L])\n\
    \    tuple(None, None)\n    \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    long maxNum = long.min;\n    long minNum = long.max;\n    foreach(num;\
    \ lst) \n    {\n        if(num > 0L) \n        {\n            minNum = min(minNum,\
    \ num);\n        }\n        else \n        {\n            maxNum = max(maxNum,\
    \ num);\n        }\n    }\n    Nullable!(long) a = Nullable!(long)(maxNum);\n\
    \    Nullable!(long) b = Nullable!(long)(minNum);\n    if(maxNum == long.min)\
    \ a = null;\n    if(minNum == long.max) b = null;\n    return tuple(a, b);\n}\n\
    \ \nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n     \
    \   auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1vybofi1.d(27): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmp1vybofi1.d(31): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\n/tmp/tmp1vybofi1.d(36): Error: template `std.typecons.Nullable!long.Nullable.opAssign`\
    \ cannot deduce function from argument types `!()(typeof(null))`, candidates are:\\\
    n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(2804):\
    \        `std.typecons.Nullable!long.Nullable.opAssign()(T value)`\\n/tmp/tmp1vybofi1.d(37):\
    \ Error: template `std.typecons.Nullable!long.Nullable.opAssign` cannot deduce\
    \ function from argument types `!()(typeof(null))`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(2804):\
    \        `std.typecons.Nullable!long.Nullable.opAssign()(T value)`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1vybofi1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in an array.\n    If there\
    \ is no negative or positive integers, return them as null.\n\n    Examples:\n\
    \    >>> largest_smallest_integers([2L, 4L, 1L, 3L, 5L, 7L])\n    tuple(None,\
    \ 1L)\n    >>> largest_smallest_integers([])\n    tuple(None, None)\n    >>> largest_smallest_integers([0L])\n\
    \    tuple(None, None)\n    \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) maxNeg = Nullable!(long)();\n    Nullable!(long)\
    \ minPos = Nullable!(long)();\n    foreach(e; lst) \n    {\n        if(e < 0L)\
    \ \n        {\n            if(maxNeg.isNull)\n                maxNeg = Nullable!(long)(e);\n\
    \            else\n                maxNeg = max(maxNeg.get, e);\n        }\n \
    \       else if(e > 0L) \n        {\n            if(minPos.isNull)\n         \
    \       minPos = Nullable!(long)(e);\n            else\n                minPos\
    \ = min(minPos.get, e);\n        }\n    }\n    return tuple(maxNeg, minPos);\n\
    }\n/*\n    Create a function that returns an array of prime numbers that are not\
    \ greater than the \n    given number. The array should be sorted in increasing\
    \ order, and the number of prime \n    numbers should be equal to the given number.\n\
    \    Examples:\n    >>> prime_numbers(3)\n    [2L, 3L]\n    >>> prime_numbers(7)\n\
    \    [2L, 3L, 5L, 7L]\n    >>> prime_numbers(1)\n    [2L]\n    >>> prime_numbers(4)\n\
    \    [2L, 3L, 5L]\n*/\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\
    \n{\n        auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0x88kx6m.d(30): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmp0x88kx6m.d(37): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp0x88kx6m.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
