language: d
name: HumanEval_15_string_sequence
results:
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s;\n    if (n>=0)\n        s = \"0\";\n    else\n       \
    \ s = \"-0\";\n    foreach (int i; 1..n+1)\n        s ~= \" \" ~ to!string(i);\n\
    \    return s;\n}\n/*\n Return a list of numbers starting from 0 upto n inclusive.\n\
    \    >>> sequence(0L)\n    [0]\n    >>> sequence(5L)\n    [0, 1, 2, 3, 4, 5]\n\
    \    \n*/\nstring[] sequence(long n) \n{\n    string[] s;\n    if (n>=0)\n   \
    \     s ~= \"0\";\n    else\n        s ~= \"-0\";\n    foreach (int i; 1..n+1)\n\
    \        s ~= to!string(i);\n    return s;\n}\nunittest\n{\n    alias candidate\
    \ = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy75371kw.d(17): Error: cannot implicitly convert expression `n
    + 1L` of type `long` to `int`

    /tmp/tmpy75371kw.d(36): Error: cannot implicitly convert expression `n + 1L` of
    type `long` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy75371kw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\t\n\t\n\tstring result;\n\tresult.reserve(1024);\n\t\n\t\n\twhile(n\
    \ >= 0)\n\t{\n\t\tresult += to!string(n);\n\t\tif(n == 0)\n\t\t\tbreak;\n\t\t\
    result += \" \";\n\t\t--n;\n\t}\n\t\n\treturn result;\n}\n/*\nunittest\n{\n  \
    \  alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n\
    \    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1\
    \ 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0pxveo20.d(29): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0pxveo20.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string res;\n    long i;\n    for (i = 0; i <= n; i += 1)\n    {\n\
    \        res ~= cast(string)i;\n        if (i != n)\n            res ~= \" \"\
    ;\n    }\n    return res;\n}\n/*\n    count_number_of_divisors\n    Count the\
    \ number of divisors of a positive integer n. The divisors include 1 and n.\n\
    unittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeiiovnun.d(22): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeiiovnun.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string result = \"\";\n    for (int i = 0; i <= n; i++)\n    {\n\
    \        result += to!string(i) + \" \";\n    }\n    return result;\n}\n/*\n Return\
    \ n! (n factorial).\n    >>> factorial(1L)\n    1L\n    >>> factorial(5L)\n  \
    \  120L\n*/\nlong factorial(long n) \n{\n    if (n <= 1)\n    {\n        return\
    \ 1;\n    }\n    else\n    {\n        return n * factorial(n - 1);\n    }\n}\n\
    /*\n Return a list of n random integers between 0 and n.\n    >>> lst = random_list(4L)\n\
    \    >>> len(lst) == 4\n    True\n    >>> all(0 <= x < 4 for x in lst)\n    True\n\
    */\nlong[] random_list(long n) \n{\n    // TODO: implement this function\n   \
    \ long[] lst = new long[n];\n    for (int i = 0; i < n; i++)\n    {\n        lst[i]\
    \ = uniform(0, n);\n    }\n    return lst;\n}\n/*\n Return a list of n tuples,\
    \ where each tuple is a pair of elements\n of the input list.\n    >>> tpls =\
    \ pair_list([1, 2, 3, 4])\n    >>> len(tpls) == 6\n    True\n    >>> set(tpls)\
    \ == set([(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)])\n    True\n*/\ntuple!(long,\
    \ long)[] pair_list(long[] lst) \n{\n    // TODO: implement this function\n  \
    \  tuple!(long, long)[] tpls = new tuple!(long, long)[(lst.length * (lst.length\
    \ - 1)) / 2];\n    int i = 0;\n    foreach (l1; lst)\n    {\n        foreach (l2;\
    \ lst)\n        {\n            if (l1 > l2)\n            {\n                tpls[\n\
    unittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbq9_rwh0.d(76): Error: expression expected, not `unittest`

    /tmp/tmpbq9_rwh0.d(77): Error: found `{` when expecting `,`

    /tmp/tmpbq9_rwh0.d(78): Error: expression expected, not `alias`

    /tmp/tmpbq9_rwh0.d(78): Error: found `candidate` when expecting `,`

    /tmp/tmpbq9_rwh0.d(78): Error: expression expected, not `=`

    /tmp/tmpbq9_rwh0.d(78): Error: found `string_sequence` when expecting `,`

    /tmp/tmpbq9_rwh0.d(78): Error: expression expected, not `;`

    /tmp/tmpbq9_rwh0.d(80): Error: found `assert` when expecting `,`

    /tmp/tmpbq9_rwh0.d(80): Error: found `;` when expecting `,`

    /tmp/tmpbq9_rwh0.d(81): Error: found `;` when expecting `,`

    /tmp/tmpbq9_rwh0.d(82): Error: found `;` when expecting `,`

    /tmp/tmpbq9_rwh0.d(83): Error: expression expected, not `}`

    /tmp/tmpbq9_rwh0.d(84): Error: found `void` when expecting `,`

    /tmp/tmpbq9_rwh0.d(84): Error: found `{` when expecting `,`

    /tmp/tmpbq9_rwh0.d(84): Error: expression expected, not `}`

    /tmp/tmpbq9_rwh0.d(84): Error: found `End of File` when expecting `,`

    /tmp/tmpbq9_r'
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    return n == 0 ? \"0\" : string_sequence(n - 1) ~ \" \" ~ n;\n}\n\
    unittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps906jv8t.d(12): Error: incompatible types for `(string_sequence(n
    - 1L) ~ " ") ~ (n)`: `string` and `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps906jv8t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string result = \"\";\n    for (int i = 0; i <= n; i++)\n    {\n\
    \        result += std.toString(i);\n        if (i < n)\n            result +=\
    \ \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp36e37a79.d(15): Error: undefined identifier `toString` in package
    `std`

    /tmp/tmp36e37a79.d(17): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp36e37a79.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string result = \"\";\n    long i = 0L;\n    while (i <= n) \n \
    \   {\n        result ~= i ~ \" \";\n        i++;\n    }\n    return result;\n\
    }\n/*\n Return a string containing space-delimited numbers starting from n down\
    \ to 0 inclusive.\n    >>> string_sequence_down(0L)\n    \"0\"\n    >>> string_sequence_down(5L)\n\
    \    \"5 4 3 2 1 0\"\n    \n*/\nstring string_sequence_down(long n) \n{\n    string\
    \ result = \"\";\n    long i = n;\n    while (i >= 0L) \n    {\n        result\
    \ ~= i ~ \" \";\n        i--;\n    }\n    return result;\n}\n/*\n Return a string\
    \ containing space-delimited numbers starting from min up to max inclusive.\n\
    \    >>> string_sequence_range(0L, 0L)\n    \"0\"\n    >>> string_sequence_range(5L,\
    \ 10L)\n    \"5 6 7 8 9 10\"\n    \n*/\nstring string_sequence_range(long min,\
    \ long max) \n{\n    string result = \"\";\n    long i = min;\n    while (i <=\
    \ max) \n    {\n        result ~= i ~ \" \";\n        i++;\n    }\n    return\
    \ result;\n}\n/*\n Return a string containing space-delimited numbers starting\
    \ from max down to min inclusive.\n    >>> string_sequence_range_down(0L, 0L)\n\
    \    \"0\"\n    >>> string_sequence_range_down(10L, 5L)\n    \"10 9 8 7 6 5\"\n\
    \    \n*/\nstring string_sequence_range_down(long min, long max) \n{\n    string\
    \ result = \"\";\n    long i = max;\n    while (i >= min) \n    {\n        result\
    \ ~= i ~ \" \";\n        i--;\n    }\n    return result;\n}\n/*\n Return a string\
    \ containing space-delimited numbers starting from n down to 1 inclusive.\n  \
    \  >>> string_sequence_down_from(0L)\n    \"\"\n    >>> string_sequence_down_from\n\
    unittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr_s2qk2r.d(78): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr_s2qk2r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    if (n == 0L) return \"0\";\n    string s = \"\";\n    for (long\
    \ i = 0L; i <= n; i++) {\n        s += to!string(i);\n        if (i != n) s +=\
    \ \" \";\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqjkirsb6.d(15): Error: template instance `to!string` template `to`
    is not defined

    /tmp/tmpqjkirsb6.d(16): Error: slice `s` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqjkirsb6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    foreach (i; 0L .. n+1L)\n        s ~= (i ~\
    \ \" \");\n    return s[0 .. $-1];\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk4dqh0gl.d(14): Error: incompatible types for `(i) ~ (" ")`: `long`
    and `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk4dqh0gl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n   string result;\n   foreach (int i; 0 .. n + 1)\n   {\n      result\
    \ ~= to!string(i) ~ \" \";\n   }\n   return result;\n}\n/*\nReturn a string containing\
    \ space-delimited numbers starting from n downto 0 inclusive.\n    >>> string_sequence_backwards(0L)\n\
    \    \"0\"\n    >>> string_sequence_backwards(5L)\n    \"5 4 3 2 1 0\"\n    \n\
    */\nstring string_sequence_backwards(long n) \n{\n   string result;\n   foreach\
    \ (int i; n .. -1)\n   {\n      result ~= to!string(i) ~ \" \";\n   }\n   return\
    \ result;\n}\n/*\nReturn a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    >>> string_sequence_2(0L)\n    \"0\"\n    >>>\
    \ string_sequence_2(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence_2(long\
    \ n) \n{\n   string result;\n   foreach (int i; 0 .. n + 1)\n   {\n      result\
    \ ~= to!string(i) ~ \" \";\n   }\n   return result;\n}\n/*\nReturn a string containing\
    \ space-delimited numbers starting from n downto 0 inclusive.\n    >>> string_sequence_backwards_2(0L)\n\
    \    \"0\"\n    >>> string_sequence_backwards_2(5L)\n    \"5 4 3 2 1 0\"\n   \
    \ \n*/\nstring string_sequence_backwards_2(long n) \n{\n   string result;\n  \
    \ foreach (int i; n .. -1)\n   {\n      result ~= to!string(i) ~ \" \";\n   }\n\
    \   return result;\n}\n/*\nReturn a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence_3(0L)\n    \"0\"\n\
    \    >>> string_sequence_3(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence_3(long\
    \ n) \n{\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv_54lue3.d(80): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv_54lue3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string result;\n    foreach (long i; 0..n+1)\n    {\n        result\
    \ ~= to!string(i) ~ \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp19_f9ghv.d(15): Error: template instance `to!string` template `to`
    is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp19_f9ghv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i <= n; i++) \n\t{\n\t\ts = s\
    \ ~ std.to!string(i) ~ \" \";\n\t}\n\treturn trim(s);\n}\n/*\n Return a string\
    \ containing comma-delimited numbers starting from 0 upto n inclusive.\n    >>>\
    \ string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0,1,2,3,4,5\"\
    \n*/\nstring string_sequence_comma(long n) \n{\n\tstring s = \"\";\n\tfor (long\
    \ i = 0; i <= n; i++) \n\t{\n\t\ts = s ~ std.to!string(i) ~ \",\";\n\t}\n\treturn\
    \ trim(s, \"\\'\");\n}\n/*\n Return a string containing a range of numbers from\
    \ start to end inclusive.\n    >>> string_sequence(0L, 5L)\n    \"0..5\"\n*/\n\
    string string_sequence_range(long start, long end) \n{\n\treturn to!string(start)\
    \ ~ \"..\" ~ to!string(end);\n}\n/*\n Return a string containing comma-delimited\
    \ numbers with range(s) included.\n    >>> string_sequence_combined(0L, 5L)\n\
    \    \"0..5\"\n    >>> string_sequence_combined(0L, 7L)\n    \"0..5,6,7\"\n  \
    \  >>> string_sequence_combined(0L, 6L)\n    \"0..5,6\"\n    >>> string_sequence_combined(0L,\
    \ 2L)\n    \"0,1,2\"\n    >>> string_sequence_combined(0L, 1L)\n    \"0,1\"\n\
    \    >>> string_sequence_combined(0L, 0L)\n    \"0\"\n*/\nstring string_sequence_combined(long\
    \ start, long end) \n{\n\tint count = end - start;\n\tint rem = count % 5;\n\t\
    if (count == 0) \n\t{\n\t\treturn to!string(start);\n\t}\n\telse if (count ==\
    \ 1) \nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6r6f5q0t.d(68): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6r6f5q0t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string result = \"\";\n    long i = 0L;\n    while (i <= n) \n \
    \   {\n        result += to!string(i) + \" \";\n        i++;\n    }\n    return\
    \ result.stripRight();\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiwy9wuhu.d(16): Error: template instance `to!string` template `to`
    is not defined

    /tmp/tmpiwy9wuhu.d(19): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiwy9wuhu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    return string_sequence(n, \" \");\n}\nunittest\n{\n    alias candidate\
    \ = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp808n_c6h.d(12): Error: function `tmp808n_c6h.string_sequence(long
    n)` is not callable using argument types `(long, string)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp808n_c6h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n  int i = 0;\n  string res = \"\";\n  while (i <= n) {\n    res = res\
    \ ~ to!string(i) ~ \" \";\n    i++;\n  }\n  return res;\n}\nunittest\n{\n    alias\
    \ candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnfkbbho7.d(15): Error: template instance `to!string` template `to`
    is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnfkbbho7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    assert(n >= 0);\n    string str = format(\"%s\", n);\n    for (long\
    \ k = 0; k < n; k++)\n        str = format(\"%s %s\", str, k);\n    return str;\n\
    }\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp56uqo18s.d(13): Error: undefined identifier `format`

    /tmp/tmp56uqo18s.d(15): Error: undefined identifier `format`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp56uqo18s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    auto a = make!string[];\n    for (size_t i = 0; i <= n; i++) \n\
    \    {\n        a ~= to!string(i);\n    }\n    return join(a, \" \");\n}\nunittest\n\
    {\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\"\
    );\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"\
    0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkh1td2mb.d(12): Error: template instance `make!string` template
    `make` is not defined, did you mean main?

    /tmp/tmpkh1td2mb.d(15): Error: template instance `to!string` template `to` is
    not defined

    /tmp/tmpkh1td2mb.d(17): Error: undefined identifier `join`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkh1td2mb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring r = \"\" + n;\n\tforeach (int i; 0 .. n)\n\t\tr = r ~ \" \"\
    \ ~ i;\n\treturn r[1 ..];\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1hgj20f6.d(15): Error: expression expected, not `]`

    /tmp/tmp1hgj20f6.d(15): Error: found `;` when expecting `,`

    /tmp/tmp1hgj20f6.d(16): Error: expression expected, not `}`

    /tmp/tmp1hgj20f6.d(17): Error: found `unittest` when expecting `,`

    /tmp/tmp1hgj20f6.d(25): Error: found `void` when expecting `,`

    /tmp/tmp1hgj20f6.d(25): Error: found `{` when expecting `,`

    /tmp/tmp1hgj20f6.d(25): Error: expression expected, not `}`

    /tmp/tmp1hgj20f6.d(25): Error: found `End of File` when expecting `,`

    /tmp/tmp1hgj20f6.d(25): Error: found `End of File` when expecting `]`

    /tmp/tmp1hgj20f6.d(25): Error: found `End of File` when expecting `;` following
    `return` statement

    /tmp/tmp1hgj20f6.d(25): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1hgj20f6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    return format(\"%s\", join(iota(n+1L), \" \"));\n}\nunittest\n{\n\
    \    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n\
    \    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1\
    \ 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiu6ucng8.d(12): Error: undefined identifier `format`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiu6ucng8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n  string retval;\n  for (long i = 0; i <= n; i++) \n  {\n    retval\
    \ ~= to!string(i);\n    if (i < n)\n      retval ~= \" \";\n  }\n  return retval;\n\
    }\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0iqxblfm.d(15): Error: template instance `to!string` template `to`
    is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0iqxblfm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring ret;\n\tfor (int i = 0; i <= n; i++) \n\t{\n\t\tret ~= i;\n\
    \t\tif (i != n)\n\t\t\tret ~= \" \";\n\t}\n\treturn ret;\n}\n/*\n Check if a string\
    \ starts with the given prefix, returns true if it does.\n*/\nunittest\n{\n  \
    \  alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n\
    \    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1\
    \ 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp0nji2nb2.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f9d]

    ??:? void tmp0nji2nb2.__unittest_L24_C1() [0x427be9]

    ??:? void tmp0nji2nb2.__modtest() [0x427d1c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c9d7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b8e6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43020d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4306bc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430199]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b8bd]

    ??:? runModuleUnitTests [0x42c7ad]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4283ec]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    int i;\n    string result;\n    result = \"\";\n    for (i = 0;\
    \ i <= n; i++)\n    {\n\tresult += format(\"%d \", i);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkdgeilu_.d(17): Error: undefined identifier `format`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkdgeilu_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n    return n < 0L ? \"\" : string_sequence(n - 1L) ~ n.stringof ~ \" \"\
    ;\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuoekt2rz.d(11): Error: semicolon expected following function declaration

    /tmp/tmpuoekt2rz.d(11): Error: no identifier for declarator `n`

    /tmp/tmpuoekt2rz.d(11): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuoekt2rz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string result = \"\";\n    for (; n >= 0; n--) \n    {\n       \
    \ result = result ~ to!string(n) ~ \" \";\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\"\
    );\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"\
    0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph0fn29ff.d(15): Error: template instance `to!string` template `to`
    is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph0fn29ff.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    //foreach (immutable long i; 0L .. n + 1L)\n    foreach (immutable\
    \ long i; 0L .. n + 1L)\n    {\n        writeln(i);\n    }\n    return \"\";\n\
    }\n \n/*\n Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(int n) \n{\n    //foreach\
    \ (immutable int i; 0 .. n + 1)\n    foreach (immutable int i; 0 .. n + 1)\n \
    \   {\n        writeln(i);\n    }\n    return \"\";\n}\n \n/*\n Return a string\
    \ containing space-delimited numbers starting from 0 upto n inclusive.\n    >>>\
    \ string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n    \"0 1 2 3 4 5\"\
    \n    \n*/\nstring string_sequence(short n) \n{\n    //foreach (immutable short\
    \ i; 0 .. n + 1)\n    foreach (immutable short i; 0 .. n + 1)\n    {\n       \
    \ writeln(i);\n    }\n    return \"\";\n}\n \n/*\n Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    \"0\"\n    >>> string_sequence(5)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring\
    \ string_sequence(char n) \n{\n    //foreach (immutable char i; 0 .. n + 1)\n\
    \    foreach (immutable char i; 0 .. n + 1)\n    {\n        writeln(i);\n    }\n\
    \    return \"\";\n}\n \n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n \
    \   >>> string_sequence(5)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(byte\
    \ n) \n{\n    //foreach (\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxptur0bf.d(85): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxptur0bf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n   string result;\n   foreach (i; 0 .. n + 1) \n   {\n      result ~=\
    \ std.conv.to!string(i) ~ \" \";\n   }\n   return result;\n}\nunittest\n{\n  \
    \  alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n\
    \    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1\
    \ 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprip03l2d.d(15): Error: undefined identifier `conv` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprip03l2d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    if (n == 0L)\n    {\n        return to!string(0L);\n    }\n    else\n\
    \    {\n        auto result = \"\";\n        foreach (i; 0L .. n + 1L)\n     \
    \   {\n            result ~= to!string(i) ~ \" \";\n        }\n        return\
    \ result;\n    }\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n \
    \   assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n\
    \    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp36srn6mp.d(14): Error: template instance `to!string` template `to`
    is not defined

    /tmp/tmp36srn6mp.d(21): Error: template instance `to!string` template `to` is
    not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp36srn6mp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    assert(n >= 0L);\n    if (n == 0L)\n        return \"0\";\n    return\
    \ string_sequence(n - 1L) ~ \" \" ~ to!string(n);\n}\nunittest\n{\n    alias candidate\
    \ = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmk7b2uh5.d(15): Error: template instance `to!string` template `to`
    is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmk7b2uh5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s;\n    foreach (i; 0 .. n+1) {\n        if(i != 0) s ~=\
    \ \" \";\n        s ~= std.conv.to!string(i);\n    }\n    return s;\n}\nunittest\n\
    {\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\"\
    );\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"\
    0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi1qkh6rm.d(15): Error: undefined identifier `conv` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi1qkh6rm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    auto result = \"\";\n    long i = 0;\n    while (i <= n) \n    {\n\
    \        result ~= i.to!string;\n        i++;\n        if (i <= n) \n        {\n\
    \            result ~= \" \";\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\"\
    );\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"\
    0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcb4ye8yw.d(16): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcb4ye8yw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    if (n == 0L) \n    {\n        return \"0\";\n    }\n    return string_sequence(n\
    \ - 1L) ~ \" \" ~ to!string(n);\n}\n/*\nReturn a string containing space-delimited\
    \ numbers starting from n downto 0 inclusive.\n    >>> string_sequence_r(0L)\n\
    \    \"0\"\n    >>> string_sequence_r(5L)\n    \"5 4 3 2 1 0\"\n*/\nstring string_sequence_r(long\
    \ n) \n{\n    if (n == 0L) \n    {\n        return \"0\";\n    }\n    return to!string(n)\
    \ ~ \" \" ~ string_sequence_r(n - 1L);\n}\n/*\nunittest\n{\n    alias candidate\
    \ = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6mrhuy5z.d(33): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6mrhuy5z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    if (n == 0L)\n        return \"0\";\n    \n    string s = to!string(n);\n\
    \    while (n > 0L)\n    {\n        s = to!string(n--) ~ \" \" ~ s;\n    }\n \
    \   return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9bbtrntx.d(15): Error: template instance `to!string` template `to`
    is not defined

    /tmp/tmp9bbtrntx.d(18): Error: template instance `to!string` template `to` is
    not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9bbtrntx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s;\n    for (long i = 0; i <= n; i++) \n    {\n        s\
    \ ~= to!string(i);\n        if (i < n)\n            s ~= \" \";\n    }\n    return\
    \ s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpby3ra6oj.d(15): Error: template instance `to!string` template `to`
    is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpby3ra6oj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n    pure nothrow @nogc\n{\n    string result;\n    foreach (i; 0L .. n\
    \ + 1L)\n    {\n        result ~= i;\n        if (i < n)\n            result ~=\
    \ \" \";\n    }\n    return result;\n}\n/*\n Return the amount of memory that\
    \ is occupied by the string.\n    >>> string_size(\"hello world\")\n    12\n \
    \   >>> string_size(\"xx\")\n    2\n    \n*/\nlong string_size(string s) \n  \
    \  pure nothrow @nogc\n{\n    return s.sizeof;\n}\nunittest\n{\n    alias candidate\
    \ = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf09mh4gc.d(16): Error: cannot append type `long` to type `string`

    /tmp/tmpf09mh4gc.d(18): Error: cannot use operator `~=` in `@nogc` function `tmpf09mh4gc.string_sequence`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf09mh4gc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    return string(n).iota.text;\n}\nunittest\n{\n    alias candidate\
    \ = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpur8vv9pe.d(12): Error: function expected before `()`, not `string`
    of type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpur8vv9pe.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string ret = to!string(0L);\n    for (int i = 1; i <= n; i++) \n\
    \    {\n        ret ~= \" \" ~ to!string(i);\n    }\n    return ret;\n}\nunittest\n\
    {\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\"\
    );\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"\
    0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7y5apxvg.d(12): Error: template instance `to!string` template `to`
    is not defined

    /tmp/tmp7y5apxvg.d(15): Error: template instance `to!string` template `to` is
    not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7y5apxvg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s;\n    for (long i = 0; i <= n; i++)\n    {\n        s +=\
    \ to!string(i);\n        s += \" \";\n    }\n    return s;\n}\nunittest\n{\n \
    \   alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n\
    \    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1\
    \ 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnkg05vud.d(15): Error: template instance `to!string` template `to`
    is not defined

    /tmp/tmpnkg05vud.d(16): Error: slice `s` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnkg05vud.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\treturn string_sequence(n, 0L);\n}\n/*\n Return a string containing\
    \ space-delimited numbers starting from the given number upto n inclusive.\n \
    \   >>> string_sequence(5L, 5L)\n    \"5\"\n    >>> string_sequence(10L, 5L)\n\
    \    \"5 6 7 8 9 10\"\n    \n*/\nstring string_sequence(long n, long start) \n\
    {\n\tstring s = to!string(start);\n\tfor (long i = start + 1; i <= n; i++) \n\t\
    {\n\t\ts ~= \" \" ~ to!string(i);\n\t}\n\treturn s;\n}\n/*\n Return a string containing\
    \ space-delimited numbers starting from the given number upto n inclusive.\n \
    \   >>> string_sequence(5L, 5L)\n    \"5\"\n    >>> string_sequence(10L, 5L)\n\
    \    \"5 6 7 8 9 10\"\n    \n*/\nstring string_sequence(long n, long start) \n\
    {\n\tstring s = to!string(start);\n\tfor (long i = start + 1; i <= n; i++) \n\t\
    {\n\t\ts ~= \" \" ~ to!string(i);\n\t}\n\treturn s;\n}\n/**\n Return a string\
    \ containing space-delimited numbers starting from the given number upto n inclusive.\n\
    \    >>> string_sequence(5L, 5L)\n    \"5\"\n    >>> string_sequence(10L, 5L)\n\
    \    \"5 6 7 8 9 10\"\n    \n*/\nstring string_sequence(long n, long start) \n\
    {\n\tstring s = to!string(start);\n\tfor (long i = start + 1; i <= n; i++) \n\t\
    {\n\t\ts ~= \" \" ~ to!string(i);\n\t}\n\treturn s;\n}\n/*\n Return a string containing\
    \ space-delimited numbers starting from the given number upto n inclusive.\n \
    \   >>> string_sequence(5L, 5L)\n    \"5\"\n    >>> string_sequence(10L, 5L)\n\
    \    \"5 6 7 8 9 10\"\n    \n*/\nstring string_sequence(long n\nunittest\n{\n\
    \    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n\
    \    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1\
    \ 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm1y07j6t.d(74): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm1y07j6t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    // return n.iota.map!(to!string).join(\" \");\n    return n.iota.map!(to!string).join(\"\
    \ \");\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1wq4zd1q.d(13): Error: no property `iota` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1wq4zd1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s;\n    if (n == 0L) \n    {\n        s = \"0\";\n    } \n\
    \    else \n    {\n        s = \"\";\n        foreach (i; 0 .. n + 1) \n     \
    \   {\n            s ~= format(i);\n            if (i != n) \n            {\n\
    \                s ~= \" \";\n            }\n        }\n    }\n    return s;\n\
    }\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpso97dbt6.d(22): Error: undefined identifier `format`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpso97dbt6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n    { \n    if (n < 0L) \n        return \"\";\n    string s;\n    for\
    \ (long l = 0L; l <= n; l++) \n        s += l + \" \";\n    return s;\n    }\n\
    unittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_zw_b_h_.d(16): Error: incompatible types for `(l) + (" ")`: `long`
    and `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_zw_b_h_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    if (n == 0L) \n    {\n        return \"0\";\n    }\n    string[]\
    \ result = new string[(int)n + 1];\n    foreach (int i, ref string s; result)\
    \ \n    {\n        s = to!string(i);\n    }\n    return join(result, \" \");\n\
    }\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpip8hvhd9.d(16): Error: C style cast illegal, use `cast(int)n`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpip8hvhd9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string result;\n    foreach (i; 0L .. n+1L) \n    {\n        writefln(\"\
    i: %d, result: %s\", i, result);\n        result ~= to!string(i) ~ \" \";\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_393b7u1.d(15): Error: `writefln` is not defined, perhaps `import
    std.stdio;` is needed?

    /tmp/tmp_393b7u1.d(16): Error: template instance `to!string` template `to` is
    not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_393b7u1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string result;\n    foreach (long i; 0..n + 1)\n    {\n        result\
    \ ~= to!string(i) ~ \" \";\n    }\n    return result.idup;\n}\nunittest\n{\n \
    \   alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n\
    \    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1\
    \ 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpehltuekd.d(15): Error: template instance `to!string` template `to`
    is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpehltuekd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string sequence = to!string(0L);\n    for (long i = 1L; i <= n;\
    \ i++)\n    {\n        sequence ~= \" \" ~ to!string(i);\n    }\n    return sequence;\n\
    }\n/*\nReturn a string containing space-delimited numbers in descending order\
    \ starting from n down to 0.\n    >>> string_sequence_descending(0L)\n    \"0\"\
    \n    >>> string_sequence_descending(5L)\n    \"5 4 3 2 1 0\"\n*/\nstring string_sequence_descending(long\
    \ n) \n{\n    string sequence = to!string(n);\n    for (long i = n - 1L; i >=\
    \ 0L; i--)\n    {\n        sequence ~= \" \" ~ to!string(i);\n    }\n    return\
    \ sequence;\n}\n/*\nReturn a string containing comma-delimited numbers starting\
    \ from 0 upto n inclusive.\n    >>> string_sequence_csv(0L)\n    \"0\"\n    >>>\
    \ string_sequence_csv(5L)\n    \"0,1,2,3,4,5\"\n*/\nstring string_sequence_csv(long\
    \ n) \n{\n    string sequence = to!string(0L);\n    for (long i = 1L; i <= n;\
    \ i++)\n    {\n        sequence ~= \",\" ~ to!string(i);\n    }\n    return sequence;\n\
    }\n/*\nReturn a string containing comma-delimited numbers in descending order\
    \ starting from n down to 0.\n    >>> string_sequence_descending_csv(0L)\n   \
    \ \"0\"\n    >>> string_sequence_descending_csv(5L)\n    \"5,4,3,2,1,0\"\n*/\n\
    string string_sequence_descending_csv(long n) \n{\n    string sequence = to!string(n);\n\
    \    for (long i = n - 1L; i >= 0L; i--)\n    {\n        sequence ~= \",\" ~ to!string(i);\n\
    \    }\n    return sequence;\n}\n/*\nReturn a string containing comma-delimited\
    \ numbers starting from 0 upto n inclusive,\nexcept for the number k.\n   \nunittest\n\
    {\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\"\
    );\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"\
    0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqc0eq_i3.d(67): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqc0eq_i3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for (int i = 0; i <= n; i++) \n    {\n   \
    \     s = s ~ to!string(i) ~ \" \";\n    }\n    return s;\n}\n/*\n  Return the\
    \ number of rotations necessary to make list1 equal to list2\n    >>> rotations_needed([1,\
    \ 2, 3, 4, 5], [3, 4, 5, 1, 2])\n    2\n    >>> rotations_needed([2, 3, 1, 5,\
    \ 4], [3, 1, 5, 4, 2])\n    1\n*/\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp01zuhz2c.d(15): Error: template instance `to!string` template `to`
    is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp01zuhz2c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string result = \"\";\n    for (long i = 0; i <= n; i++) \n    {\n\
    \        result += to!string(i);\n        if (i < n) \n        {\n           \
    \ result += \" \";\n        }\n    }\n    return result;\n}\n/*\nReturn the index\
    \ of the number in the string.\n    >>> find_index(\"0\", \"0 1 2 3 4 5\")\n \
    \   0\n    >>> find_index(\"3\", \"0 1 2 3 4 5\")\n    3\n    >>> find_index(\"\
    7\", \"0 1 2 3 4 5\")\n    -1\n*/\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo70g7937.d(15): Error: template instance `to!string` template `to`
    is not defined

    /tmp/tmpo70g7937.d(18): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo70g7937.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s;\n\tforeach(i; 0L .. n+1L)\n\t{\n\t\ts ~= i.to!string ~ \"\
    \ \";\n\t}\n\treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgpzsaqtt.d(15): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgpzsaqtt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    import std.stdio;\n    string result = \"\";\n    foreach(i;0..n)\
    \ \n    {\n        result ~= to!string(i);\n        if(i < n)\n            result\
    \ ~= \" \";\n    }\n    return result;\n}\n/*\n  Returns the sum of the first\
    \ n positive integers.\n    >>> sum_to(3L)\n    6\n    >>> sum_to(5L)\n    15\n\
    */\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_li3cnnq.d(16): Error: template instance `to!string` template `to`
    is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_li3cnnq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    if (n == 0L) return \"0\";\n    string s = \"\";\n    long i = 0L;\n\
    \    while (i < n) \n    {\n        if (i != 0L) s += \" \";\n        s += to!string(i);\n\
    \        i++;\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8jaliozi.d(17): Error: slice `s` is not mutable

    /tmp/tmp8jaliozi.d(18): Error: template instance `to!string` template `to` is
    not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8jaliozi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string result = \"\";\n    for (long i = 0; i <= n; i++) \n    {\n\
    \        result += to!string(i);\n        if (i < n) \n        {\n           \
    \ result += \" \";\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n\
    \    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1\
    \ 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpceyoq0kn.d(15): Error: template instance `to!string` template `to`
    is not defined

    /tmp/tmpceyoq0kn.d(18): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpceyoq0kn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string result = \"\";\n    auto temp = new string[];\n    for (long\
    \ i = 0; i <= n; i++)\n    {\n        result ~= temp.length;\n        temp ~=\
    \ to!string(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphnb8x_6r.d(13): Error: new can only create structs, dynamic arrays
    or class objects, not `string[]`''s

    /tmp/tmphnb8x_6r.d(17): Error: template instance `to!string` template `to` is
    not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphnb8x_6r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    return 0L .. n + 1L\n        .map!(to!string)\n        .join(\"\
    \ \");\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp64s3e31w.d(12): Error: found `..` when expecting `;` following
    `return` statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp64s3e31w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s;\n    for (long i = 0; i <= n; i++)\n    {\n        s ~=\
    \ i;\n        if (i != n)\n            s ~= \" \";\n    }\n    return s;\n}\n\
    unittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc9kcl732.d(15): Error: cannot append type `long` to type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc9kcl732.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    auto result = \"\";\n    for (auto i = 0L; i <= n; i++)\n    {\n\
    \        result ~= to!string(i) ~ \" \";\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\"\
    );\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"\
    0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk9vktxm1.d(15): Error: template instance `to!string` template `to`
    is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk9vktxm1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s;\n    for (long i = 0; i <= n; i++)\n    {\n        if\
    \ (i == 0)\n            s = to!string(i);\n        else\n            s ~= \" \"\
    \ ~ to!string(i);\n    }\n    return s;\n}\nunittest\n{\n    alias candidate =\
    \ string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyjat4nf4.d(16): Error: template instance `to!string` template `to`
    is not defined

    /tmp/tmpyjat4nf4.d(18): Error: template instance `to!string` template `to` is
    not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyjat4nf4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tauto a = new string[n+1];\n\tforeach(i; 0..n+1)\n\t{\n\t\ta[i] = to!string(i);\n\
    \t}\n\treturn join(a);\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmperw8a5lq.d(15): Error: template instance `to!string` template `to`
    is not defined

    /tmp/tmperw8a5lq.d(17): Error: undefined identifier `join`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmperw8a5lq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for (long i = 0; i <= n; i += 1)\n    {\n\t\
    s = s ~ i;\n\tif (i < n) s = s ~ \" \";\n    }\n    return s;\n}\n/*\n Return\
    \ the number of characters in string s\n    >>> string_length(\"\")\n    0\n \
    \   >>> string_length(\"hello\")\n    5\n    >>> string_length(\"world\")\n  \
    \  5\n*/\nlong string_length(string s) \n{\n    return strlen(s);\n}\n/*\n Return\
    \ a string containing the characters of s reversed.\n    >>> string_reverse(\"\
    \")\n    \"\"\n    >>> string_reverse(\"hello\")\n    \"olleh\"\n    >>> string_reverse(\"\
    world\")\n    \"dlrow\"\n*/\nstring string_reverse(string s) \n{\n    string s2\
    \ = \"\";\n    for (long i = strlen(s) - 1; i >= 0; i -= 1)\n    {\n\ts2 = s2\
    \ ~ s[i];\n    }\n    return s2;\n}\n/*\n Return a string containing the initial\
    \ characters of s.\n    >>> string_initial(\"12345\")\n    \"123\"\n    >>> string_initial(\"\
    1234567890\")\n    \"1234567\"\n*/\nstring string_initial(string s) \n{\n    string\
    \ s2 = \"\";\n    for (long i = 0; i < min(strlen(s), 7); i += 1)\n    {\n\ts2\
    \ = s2 ~ s[i];\n    }\n    return s2;\n}\n/*\n Return a string containing the\
    \ characters of s in upper case.\n    >>> string_upper(\"abCDe\")\n    \"ABCDE\"\
    \n    >>> string_upper(\"hello\")\n    \"HELLO\"\n*/\nstring string_upper(string\
    \ s) \n{\n    string s2 = \"\";\n    for (long i = 0; i < strlen(s); i += 1)\n\
    \    {\n\ts2 = s2 ~ toupper(s[i]);\n    }\n    return s2;\n}\n/*\n Return a string\
    \ containing the characters of s in lower case.\n\nunittest\n{\n    alias candidate\
    \ = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaqeaj3t2.d(83): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaqeaj3t2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string result;\n    for (long i = 0; i <= n; i++) \n    {\n    \
    \    result ~= to!string(i);\n        if (i < n)\n            result ~= \" \"\
    ;\n    }\n    return result;\n}\n/*\n    Return a string containing space-delimited\
    \ factorials starting from 0! upto n!.\n    >>> string_factorials(0L)\n    \"\
    1\"\n    >>> string_factorials(5L)\n    \"1 1 2 6 24 120\"\n    \n*/\nstring string_factorials(long\
    \ n) \n{\n    string result;\n    for (long i = 0; i <= n; i++) \n    {\n    \
    \    result ~= to!string(factorial(i));\n        if (i < n)\n            result\
    \ ~= \" \";\n    }\n    return result;\n}\n/*\n    Return a string containing\
    \ space-delimited Fibonacci numbers starting from 0 upto n inclusive.\n    >>>\
    \ string_fibonacci(0L)\n    \"0\"\n    >>> string_fibonacci(5L)\n    \"0 1 1 2\
    \ 3 5\"\n    \n*/\nstring string_fibonacci(long n) \n{\n    string result;\n \
    \   for (long i = 0; i <= n; i++) \n    {\n        result ~= to!string(fibonacci(i));\n\
    \        if (i < n)\n            result ~= \" \";\n    }\n    return result;\n\
    }\n/*\nReturn a string containing space-delimited prime numbers starting from\
    \ 2 upto n inclusive.\n    >>> string_primes(0L)\n    \"\"\n    >>> string_primes(5L)\n\
    \    \"2 3 5\"\n    \n*/\nstring string_primes(long n) \n{\n    string result;\n\
    \    for (long i = 2; i <= n; i++) \n    {\n        if (is_prime(i)) \n      \
    \  {\n            result ~= to!string(i);\n            if (i < n)\n          \
    \      result ~= \" \";\n        }\n    }\n    return result;\n}\n/*\nunittest\n\
    {\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\"\
    );\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"\
    0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj4ak011x.d(81): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj4ak011x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string[] result = new string[n + 1];\n    result[0] = to!string(0);\n\
    \    for (long i = 1; i <= n; i++) \n    {\n        result[i] = to!string(i);\n\
    \    }\n    return join(result, \" \");\n}\n/*\n Return a tuple containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\n    >>> tuple_sequence(0L)\n    ()\n\
    \    >>> tuple_sequence(5L)\n    (0, 1, 2, 3, 4, 5)\n*/\ntuple tuple_sequence(long\
    \ n) \n{\n    return iota(n + 1);\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnz94djpu.d(27): Error: undefined identifier `tuple`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnz94djpu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 0
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    import std.conv;\n    string result;\n    foreach (i;0..n+1) {\n\
    \        if (i==0) {\n            result = to!string(i);\n        }\n        else\
    \ {\n            result ~= \" \" ~ to!string(i);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string result = \"\";\n    for (long i = 0; i <= n; i++)\n    {\n\
    \        result += to!string(i) + \" \";\n    }\n    return result;\n}\n/*\n \
    \    Return the first n characters of a string, or the string itself if it is\
    \ shorter than n.\n    >>> string_head(\"\", 3L)\n    \"\"\n    >>> string_head(\"\
    hello\", 3L)\n    \"hel\"\n    >>> string_head(\"hello\", 10L)\n    \"hello\"\n\
    */\nstring string_head(string s, long n) \n{\n    if (n >= s.length)\n    {\n\
    \        return s;\n    }\n    else\n    {\n        return s[0..n];\n    }\n}\n\
    /*\n    Return the last n characters of a string, or the string itself if it is\
    \ shorter than n.\n    >>> string_tail(\"\", 3L)\n    \"\"\n    >>> string_tail(\"\
    hello\", 3L)\n    \"llo\"\n    >>> string_tail(\"hello\", 10L)\n    \"hello\"\n\
    \    \n*/\nstring string_tail(string s, long n) \n{\n    if (n >= s.length)\n\
    \    {\n        return s;\n    }\n    else\n    {\n        return s[$-n..$];\n\
    \    }\n}\n/*\n    Return the last `n` characters of a string `s`.\n    >>> string_last(\"\
    hello\", 3L)\n    \"llo\"\n    >>> string_last(\"hello\", 10L)\n    \"hello\"\n\
    */\nstring string_last(string s, long n) \n{\n    return string_tail(s, n);\n\
    }\n/*\n    Return the first `n` characters of a string `s`.\n    >>> string_first(\"\
    hello\", 3L)\n    \"hel\"\n    >>> string_first(\"hello\", 10L)\n    \"hello\"\
    \n*/\nstring string_first(string s, long n) \n{\n    return string_head(s, n);\n\
    }\n/*\n    Return `true` iff `s` is a palindrome.\n    >>> is_palindrome(\"abba\"\
    )\n    true\n   \nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo0eo9xrr.d(82): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo0eo9xrr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string result = \"\";\n    for (int i = 0; i <= n; i++) \n    {\n\
    \        result += to!string(i) + \" \";\n    }\n    return result.trimRight();\n\
    }\n/*\n    Return a string containing space-delimited numbers starting from n\
    \ down to 0 inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    \    \"5 4 3 2 1 0\"\n*/\nstring reverse_string_sequence(long n) \n{\n    string\
    \ result = \"\";\n    for (int i = n; i >= 0; i--) \n    {\n        result +=\
    \ to!string(i) + \" \";\n    }\n    return result.trimRight();\n}\n//The following\
    \ two functions are for a different exercise\nstring natural_string_sequence(long\
    \ n) \n{\n    string result = \"\";\n    for (int i = 1; i <= n; i++) \n    {\n\
    \        result += to!string(i) + \" \";\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprtnzu7kb.d(15): Error: template instance `to!string` template `to`
    is not defined

    /tmp/tmprtnzu7kb.d(17): Error: no property `trimRight` for type `string`

    /tmp/tmprtnzu7kb.d(29): Error: cannot implicitly convert expression `n` of type
    `long` to `int`

    /tmp/tmprtnzu7kb.d(31): Error: template instance `to!string` template `to` is
    not defined

    /tmp/tmprtnzu7kb.d(33): Error: no property `trimRight` for type `string`

    /tmp/tmprtnzu7kb.d(41): Error: template instance `to!string` template `to` is
    not defined

    /tmp/tmprtnzu7kb.d(43): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprtnzu7kb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string result = \"\";\n    foreach (i; 0L .. n + 1L) \n    {\n \
    \       result ~= \" \" ~ to!string(i);\n    }\n    return result[1 .. $];\n}\n\
    unittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprj2mdx8c.d(15): Error: template instance `to!string` template `to`
    is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprj2mdx8c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    /*\n    initializes a string with length n+1 and fills the string\
    \ with spaces.\n    */\n    string s(n+1,' ');\n    /*\n    loops through each\
    \ element in the string, assigns the element to the string with \n    the ascii\
    \ value of the element in s minus 48, and increases the ascii value by 1.\n  \
    \  */\n    foreach(int i, char &c; s) \n    {\n        c = i + '0';\n        ++i;\n\
    \    }\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1jw_7tso.d(15): Error: found `s` when expecting `;` following statement

    /tmp/tmp1jw_7tso.d(20): Error: no identifier for declarator `char`

    /tmp/tmp1jw_7tso.d(20): Error: found `&` when expecting `;`

    /tmp/tmp1jw_7tso.d(20): Error: found `;` when expecting `)`

    /tmp/tmp1jw_7tso.d(20): Error: found `)` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1jw_7tso.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string res;\n    for (long i = 0; i <= n; i++) \n    {\n       \
    \ res += i;\n        if (i < n) \n        {\n            res += \" \";\n     \
    \   }\n    }\n    return res;\n}\n/*\nReturn the sum of the numbers in the array,\
    \ returning 0 for an empty array.\n        Except the number 13 is very unlucky,\
    \ so it does not count and numbers that come immediately after a 13 also do not\
    \ count.\n    >>> sum13([1, 2, 2, 1])\n    6\n    >>> sum13([1, 1])\n    2\n \
    \   >>> sum13([1, 2, 2, 1, 13])\n    6\n    >>> sum13([1, 2, 13, 2, 1, 13])\n\
    \    4\n    >>> sum13([13, 1, 2, 13, 2, 1, 13])\n    3\n    >>> sum13([])\n  \
    \  0\n    >>> sum13([13])\n    0\n    >>> sum13([13, 13])\n    0\n    >>> sum13([13,\
    \ 0, 13])\n    0\n    >>> sum13([13, 1, 13])\n    0\n    >>> sum13([5, 7, 2])\n\
    \    14\n    >>> sum13([5, 13, 2])\n    5\n    >>> sum13([0])\n    0\n    >>>\
    \ sum13([13, 0])\n    0\n*/\nlong sum13(array<long> nums) \n{\n    long res =\
    \ 0;\n    long pos = 0;\n    for (; pos < nums.length && nums[pos] != 13; pos++)\
    \ \n    {\n        res += nums[pos];\n    }\n    if (pos < nums.length - 1) \n\
    \    {\n        for (pos += 1; pos < nums.length && nums[pos] != 13; pos++) \n\
    \        {\n            res += nums[pos];\n        }\n    }\n    return res;\n\
    }\n/*\nReturn the number of even ints in the given array. Note: the % \"mod\"\
    \ operator computes the remainder, e.g. 5 % 2 is 1.\n    >>> count_evens([2, 1,\
    \ 2,\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4shoe55m.d(55): Error: found `<` when expecting `)`

    /tmp/tmp4shoe55m.d(55): Error: semicolon expected following function declaration

    /tmp/tmp4shoe55m.d(55): Error: no identifier for declarator `long`

    /tmp/tmp4shoe55m.d(55): Error: declaration expected, not `>`

    /tmp/tmp4shoe55m.d(59): Error: declaration expected, not `for`

    /tmp/tmp4shoe55m.d(59): Error: no identifier for declarator `pos`

    /tmp/tmp4shoe55m.d(59): Error: declaration expected, not `<`

    /tmp/tmp4shoe55m.d(59): Error: no identifier for declarator `pos`

    /tmp/tmp4shoe55m.d(59): Error: declaration expected, not `++`

    /tmp/tmp4shoe55m.d(62): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4shoe55m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for (int i = 0; i <= n; i++)\n    {\n    \
    \    s = s ~ i ~ \" \";\n    }\n    return s;\n}\nunittest\n{\n    alias candidate\
    \ = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp04l53rnv.d(15): Error: incompatible types for `(s) ~ (i)`: `string`
    and `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp04l53rnv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    assert(n >= 0);\n    string[] sequence = new string[n + 1];\n  \
    \  foreach (i; 0..n + 1)\n    {\n        sequence[i] = format(\"%s\", i);\n  \
    \  }\n    return join(sequence, \" \");\n}\n/*\n Return a string containing space-delimited\
    \ squares starting from 0 upto n inclusive.\n    >>> string_squares(0L)\n    \"\
    0\"\n    >>> string_squares(5L)\n    \"0 1 4 9 16 25\"\n    \n*/\nstring string_squares(long\
    \ n) \n{\n    assert(n >= 0);\n    string[] sequence = new string[n + 1];\n  \
    \  foreach (i; 0..n + 1)\n    {\n        sequence[i] = format(\"%s\", pow(i, 2));\n\
    \    }\n    return join(sequence, \" \");\n}\n//\n@safe unittest \n{\n    assert(string_sequence(0L)\
    \ == \"0\");\n    assert(string_sequence(5L) == \"0 1 2 3 4 5\");\n    assert(string_squares(0L)\
    \ == \"0\");\n    assert(string_squares(5L) == \"0 1 4 9 16 25\");\n}\n \n/*\n\
    \   This program is free software: you can redistribute it and/or modify\n   \
    \ it under the terms of the GNU General Public License as published by\n    the\
    \ Free Software Foundation, either version 3 of the License, or\n    (at your\
    \ option) any later version.\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp21zo60bt.d(47): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp21zo60bt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    /*\n    if (n <= 0L)\n        return \"0\";\n    else\n        return\
    \ string_sequence(n - 1L) ~ (\" \" ~ to!string(n));\n    */\n    string result\
    \ = \"\";\n    for (long i = 0L; i <= n; i++)\n    {\n        result ~= to!string(i)\
    \ ~ \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprkjv2u4q.d(21): Error: template instance `to!string` template `to`
    is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprkjv2u4q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    long i;\n    string result;\n    for (i = 0; i <= n; i++)\n    \
    \    result ~= i.stringof;\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8oy9ugi3.d(22): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ead]

    ??:? void tmp8oy9ugi3.__unittest_L18_C1() [0x427afd]

    ??:? void tmp8oy9ugi3.__modtest() [0x427c30]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5f3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b502]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fe29]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4302d8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fdb5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d9]

    ??:? runModuleUnitTests [0x42c3c9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282fc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    if (n == 0L) \n    {\n        return \"0\";\n    }\n    return \"\
    \ \".join([\"%d\" % x for x in to(n)]);\n}\nunittest\n{\n    alias candidate =\
    \ string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_9nke3sz.d(16): Error: found `for` when expecting `,`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_9nke3sz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    // Note! We use string(long x) and to!string(long x) interchangeably.\
    \ \n    // They behave identically and the choice should be driven by what sounds\n\
    \    // more natural in the particular place.\n    import std.conv : to;\n   \
    \ string result = \"\";\n    foreach (i; 0 .. n + 1)\n        result ~= i ~ \"\
    \ \";\n    return result[0 .. $ - 1];\n}\n/*\n    Extract the last element of\
    \ a non-empty sequence.\n    >>> last(\"\")\n    Exception: last<char>(\"\")\n\
    \    >>> last(\"hello\")\n    'o'\n*/\nT last(T)(T[] s) \n{\n    return s[$ -\
    \ 1];\n}\n/*\n    Extract the last two elements of a non-empty sequence.\n   \
    \ >>> last2(\"\")\n    Exception: last2<char>(\"\")\n    >>> last2(\"hello\")\n\
    \    ['l', 'o']\n*/\nT[] last2(T)(T[] s) \n{\n    return s[$ - 2 .. $];\n}\n/*\n\
    \    Extract the last element of a non-empty sequence.\n    >>> last(\"\")\n \
    \   Exception: last<char>(\"\")\n    >>> last(\"hello\")\n    'o'\n*/\nT last(T)(T[]\
    \ s) \n{\n    return s[$ - 1];\n}\n/*\n    Extract the last two elements of a\
    \ non-empty sequence.\n    >>> last2(\"\")\n    Exception: last2<char>(\"\")\n\
    \    >>> last2(\"hello\")\n    ['l', 'o']\n*/\nT[] last2(T)(T[] s) \n{\n    return\
    \ s[$ - 2 .. $];\n}\n/*\n    Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    // Note! We use string(long x) and to!string(long x) interchangeably.\
    \ \n    // They behave identically and the choice should be driven\nunittest\n\
    {\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\"\
    );\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"\
    0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy1jnuq3g.d(77): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy1jnuq3g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string result = to!string(n);\n    for (long i = n - 1; i >= 0;\
    \ i--) \n    {\n        result ~= \" \" ~ to!string(i);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpupt29xdk.d(12): Error: template instance `to!string` template `to`
    is not defined

    /tmp/tmpupt29xdk.d(15): Error: template instance `to!string` template `to` is
    not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpupt29xdk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring result = \"\";\n\tint i;\n\tfor (i = 0; i <= n; i++)\n\t{\n\
    \t\tresult += to!string(i);\n\t\tif (i < n)\n\t\t\tresult += \" \";\n\t}\n\treturn\
    \ result;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpma3t5_t0.d(16): Error: template instance `to!string` template `to`
    is not defined

    /tmp/tmpma3t5_t0.d(18): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpma3t5_t0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s;\n    foreach (i; 0 .. n + 1) \n    {\n        s ~= i.to!string\
    \ ~ \" \";\n    }\n    return s.idup;\n}\n/*\n Return a string containing space-delimited\
    \ numbers starting from first_number upto n inclusive.\n    >>> string_sequence(0L,\
    \ 0L)\n    \"0\"\n    >>> string_sequence(0L, 5L)\n    \"0 1 2 3 4 5\"\n*/\nstring\
    \ string_sequence(long first_number, long n) \n{\n    string s;\n    foreach (i;\
    \ first_number .. n + 1) \n    {\n        s ~= i.to!string ~ \" \";\n    }\n \
    \   return s.idup;\n}\n/*\n Return a string containing space-delimited numbers\
    \ starting from first_number upto n inclusive, skipping numbers in step.\n   \
    \ >>> string_sequence(0L, 5L, 0L)\n    \"0 1 2 3 4 5\"\n    >>> string_sequence(0L,\
    \ 5L, 2L)\n    \"0 2 4\"\n*/\nstring string_sequence(long first_number, long n,\
    \ long step) \n{\n    string s;\n    foreach (i; first_number .. n + 1) \n   \
    \ {\n        if (i % step == 0)\n        {\n            s ~= i.to!string ~ \"\
    \ \";\n        }\n    }\n    return s.idup;\n}\n/*\n Return a string containing\
    \ space-delimited numbers starting from first_number upto n inclusive, skipping\
    \ numbers in step.\n    >>> string_sequence(0L, 5L, 0L)\n    \"0 1 2 3 4 5\"\n\
    \    >>> string_sequence(0L, 5L, 2L)\n    \"0 2 4\"\n*/\nstring string_sequence(long\
    \ first_number, long n, long step, string delimiter) \n{\n    string s;\n    foreach\
    \ (i; first_number .. n + 1) \n    {\n        if (i % step == 0)\n        {\n\
    \            s ~= i.to!string ~ delimiter;\n        }\n    }\n\nunittest\n{\n\
    \    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n\
    \    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1\
    \ 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnk1zbyjd.d(72): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnk1zbyjd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    static if (__traits(compiles, {\n        import std.format;\n  \
    \      return format(\"%(0 .. %)\", n);\n    })) {\n        import std.format;\n\
    \        return format(\"%(0 .. %)\", n);\n    } else {\n        import std.algorithm\
    \ : iota;\n        import std.range : map;\n        import std.conv : to;\n  \
    \      return iota(0L, n + 1L).map!(i => to!string(i)).join(\" \");\n    }\n}\n\
    unittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'std.format.FormatException@/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/format.d(2249):
    incompatible format character for integral argument: %(

    ----------------

    ??:? pure @safe void std.exception.bailOut!(std.format.FormatException).bailOut(immutable(char)[],
    ulong, scope const(char)[]) [0x43e0b2]

    ??:? pure @safe bool std.exception.enforce!(std.format.FormatException).enforce!(bool).enforce(bool,
    lazy const(char)[], immutable(char)[], ulong) [0x43e02c]

    ??:? pure @safe void std.format.formatValueImpl!(std.array.Appender!(immutable(char)[]).Appender,
    long, char).formatValueImpl(ref std.array.Appender!(immutable(char)[]).Appender,
    long, ref const(std.format.FormatSpec!(char).FormatSpec)) [0x440dfb]

    ??:? pure @safe void std.format.formatValue!(std.array.Appender!(immutable(char)[]).Appender,
    long, char).formatValue(ref std.array.Appender!(immutable(char)[]).Appender, ref
    long, ref const(std.format.FormatSpec!(char)'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string result = \"\";\n    for (long i = 0; i <= n; i++) \n    {\n\
    \        result = result ~ std.string.to!string(i) ~ \" \";\n    }\n    return\
    \ result.trim();\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n \
    \   assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n\
    \    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplhplrqjn.d(15): Error: undefined identifier `string` in package
    `std`

    /tmp/tmplhplrqjn.d(17): Error: no property `trim` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplhplrqjn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string r = \"\";\n    for (int i = 0; i <= n; i++)\n        r +=\
    \ std.to!string(i) + \" \";\n    return r;\n}\nunittest\n{\n    alias candidate\
    \ = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa64s5sgd.d(14): Error: undefined identifier `to` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa64s5sgd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string r = \"\";\n    while (n >= 0) {\n        r = d_format(\"\
    %s%s\", r, n);\n        n--;\n    }\n    return r;\n}\nunittest\n{\n    alias\
    \ candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxnmbrvux.d(14): Error: undefined identifier `d_format`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxnmbrvux.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string result;\n    for (size_t i = 0; i <= n; i++)\n    {\n   \
    \     result ~= to!string(i);\n        if (i < n)\n            result ~= \" \"\
    ;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpum4knq90.d(15): Error: template instance `to!string` template `to`
    is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpum4knq90.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n    pure nothrow @safe @nogc{\n    import std.array;\n    import std.conv;\n\
    \    import std.algorithm;\n    import std.range;\n    import std.string;\n  \
    \  return iota(0L, n+1L).map!(to!string).joiner(\" \").str;\n}\nunittest\n{\n\
    \    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n\
    \    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1\
    \ 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp10oeolur.d(17): Error: `@nogc` function `tmp10oeolur.string_sequence`
    cannot call non-@nogc function `std.algorithm.iteration.joiner!(MapResult!(to,
    Result), string).joiner`

    /tmp/tmp10oeolur.d(17): Error: no property `str` for type `Result`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp10oeolur.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    long i;\n    string s;\n    s = \"\";\n    i = 0L;\n    while (i\
    \ <= n) {\n        s += to!string(i);\n        if (i < n) {\n            s +=\
    \ \" \";\n        }\n        i++;\n    }\n    return s;\n}\nunittest\n{\n    alias\
    \ candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7ut44_89.d(17): Error: template instance `to!string` template `to`
    is not defined

    /tmp/tmp7ut44_89.d(19): Error: slice `s` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7ut44_89.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string str;\n    for (long i = 0; i <= n; i++)\n    {\n        str\
    \ ~= format(\"%s\", to!string(i));\n        if (i != n)\n            str ~= \"\
    \ \";\n    }\n    return str;\n}\n/*\n Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"\
    0\"\n    >>> string_sequence(5)\n    \"0 1 2 3 4 5\"\n*/\nstring string_sequence(int\
    \ n) \n{\n    return string_sequence(to!long(n));\n}\n/*\n Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0UL)\n\
    \    \"0\"\n    >>> string_sequence(5UL)\n    \"0 1 2 3 4 5\"\n*/\nstring string_sequence(ulong\
    \ n) \n{\n    return string_sequence(to!long(n));\n}\n/*\n Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0u)\n\
    \    \"0\"\n    >>> string_sequence(5u)\n    \"0 1 2 3 4 5\"\n*/\nstring string_sequence(uint\
    \ n) \n{\n    return string_sequence(to!long(n));\n}\n/*\n Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0.0)\n\
    \    \"0\"\n    >>> string_sequence(5.0)\n    \"0 1 2 3 4 5\"\n*/\nstring string_sequence(double\
    \ n) \n{\n    return string_sequence(to!long(n));\n}\n/*\n Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0.0f)\n\
    \    \"0\"\n    >>> string_sequence(5.0f)\n    \"0 1 2 3 4 5\"\n*/\nstring string_sequence(float\
    \ n) \n{\n    return string_sequence(to!long(n));\n}\n/*\n Return a string containing\
    \ space-delimited numbers starting from\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmj3muw6y.d(76): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmj3muw6y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string r=\"\";\n    foreach(i; 0L..n+1L)\n        r ~= (i~\" \"\
    );\n    return r;\n}\n/*\n Input: a string containing space-delimited words.\n\
    \    Output: a string containing each word reversed and space-delimited.\n   \
    \     >>> string_reverse(\"hi there\")\n        \"ih ereht\"\n*/\nstring string_reverse(string\
    \ s) \n{\n    string r=\"\";\n    foreach(w; s.split())\n        r ~= w.reverse~\"\
    \ \";\n    return r;\n}\n/*\n Return True if the given string contains duplicate\
    \ words.\n    >>> is_string_duplicate(\"I love love programming\")\n    True\n\
    */\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcpsbcv8d.d(14): Error: incompatible types for `(i) ~ (" ")`: `long`
    and `string`

    /tmp/tmpcpsbcv8d.d(26): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcpsbcv8d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s;\n    foreach (i; 0L .. n + 1L) \n    {\n        s ~= to!string(i)\
    \ ~ \" \";\n    }\n    return chomp(s);\n}\nunittest\n{\n    alias candidate =\
    \ string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7li279q9.d(15): Error: template instance `to!string` template `to`
    is not defined

    /tmp/tmp7li279q9.d(17): Error: undefined identifier `chomp`, did you mean template
    `cmp(T)(const(T) x, const(T) y) if (isFloatingPoint!T)`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7li279q9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = to!string(0L);\n    for (long i = 1L; i <= n; i++)\n\
    \    {\n        s ~= \" \" ~ to!string(i);\n    }\n    return s;\n}\n/*\nOutput:\n\
    \    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0\
    \ 1 2 3 4 5\"\n*/\nunittest\n{\n    alias candidate = string_sequence;\n\n   \
    \ assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n\
    \    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1py_ohet.d(12): Error: template instance `to!string` template `to`
    is not defined

    /tmp/tmp1py_ohet.d(15): Error: template instance `to!string` template `to` is
    not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1py_ohet.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    auto s = format(\"%s\", n);\n    foreach (i; 1..n)\n    {\n    \
    \    s ~= \" \" ~ format(\"%s\", i);\n    }\n    return s;\n}\n/*\n Return a string\
    \ containing space-delimited numbers starting from 0 upto n inclusive.\n    >>>\
    \ string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4\
    \ 5\"\n    \n*/\nstring string_sequence2(long n) \n{\n    if (n == 0)\n    {\n\
    \        return \"0\";\n    }\n    auto s = format(\"%s\", n);\n    foreach (i;\
    \ n-1..0)\n    {\n        s ~= \" \" ~ format(\"%s\", i);\n    }\n    return s;\n\
    }\n/*\n Return a tuple containing numbers starting from 0 upto n inclusive.\n\
    \    >>> tuple_sequence(0L)\n    ()\n    >>> tuple_sequence(5L)\n    (0, 1, 2,\
    \ 3, 4, 5)\n    \n*/\nauto tuple_sequence(long n) \n{\n    return tuple(n);\n\
    }\n/*\n Return a list containing numbers starting from 0 upto n inclusive.\n \
    \   >>> list_sequence(0L)\n    []\n    >>> list_sequence(5L)\n    [0, 1, 2, 3,\
    \ 4, 5]\n    \n*/\nauto list_sequence(long n) \n{\n    return list(n);\n}\n/*\n\
    \ Return a list containing numbers starting from 0 upto n inclusive.\n    >>>\
    \ list_sequence(0L)\n    []\n    >>> list_sequence(5L)\n    [0, 1, 2, 3, 4, 5]\n\
    \    \n*/\nauto list_sequence2(long n) \n{\n    if (n == 0)\n    {\n        return\
    \ [n];\n    }\n    return [n] ~= list_sequence2(n-1);\n}\n/*\n Return a list containing\
    \ numbers starting from 0 upto n inclusive.\n    >>> list_sequence(0L)\n    []\n\
    \    >>> list_sequence(5L)\n    [0, 1\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpst_f8xdp.d(80): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpst_f8xdp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string result = to!string(n);\n    if (n < 0)\n        return result;\n\
    \    foreach (long i; 0..n) \n    {\n        result = to!string(i) ~ \" \" ~ result;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxyxknocj.d(12): Error: template instance `to!string` template `to`
    is not defined

    /tmp/tmpxyxknocj.d(17): Error: template instance `to!string` template `to` is
    not defined

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string result;\n    foreach (i; 0L .. n+1L)\n    {\n        result\
    \ ~= std.conv.to!string(i) ~ \" \";\n    }\n    return result;\n}\n \n/*\n Given\
    \ a string of space-delimited numbers, convert them to a list of numbers.\n \n\
    \    >>> to_numbers(\"0\")\n    [0]\n    >>> to_numbers(\"0 1 2 3 4 5\")\n   \
    \ [0, 1, 2, 3, 4, 5]\n*/\nstring[] to_numbers(string s) \n{\n    return std.conv.to!(int[])(split(s,\
    \ \" \"));\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb10n0iky.d(15): Error: undefined identifier `conv` in package `std`

    /tmp/tmpb10n0iky.d(30): Error: undefined identifier `conv` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb10n0iky.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string result;\n    foreach (i; 0L .. n+1L)\n    {\n        result\
    \ ~= std.conv.to!string(i) ~ \" \";\n    }\n    return result.idup;\n}\n/*\n Given\
    \ a sequence, return a sequence containing all values in the first sequence\n\
    \ that are not in the second sequence.\n    >>> std.algorithm.filter!(n => n <\
    \ 5)([1, 2, 3, 4, 5, 6, 7, 8, 9])\n    [1, 2, 3, 4]\n    >>> std.algorithm.filter!(n\
    \ => n < 5)([1, 2, 3, 5, 6, 7, 8, 9])\n    [1, 2, 3]\n    >>> std.algorithm.filter!(n\
    \ => n < 5)([1, 2, 3, 6, 7, 8, 9])\n    [1, 2, 3]\n    >>> std.algorithm.filter!(n\
    \ => n < 5)([1, 2, 3, 4, 5, 6, 7, 8, 9])\n    [1, 2, 3, 4]\n*/\nstring filter_func(string\
    \ input)\n{\n    import std.array;\n    import std.algorithm;\n    import std.conv;\n\
    \    string[] array = split(input, \" \");\n    auto result = filter!(n => n <\
    \ 5)(array);\n    auto result_str = result.join(\" \");\n    return result_str;\n\
    }\n/*\n Return a new string with the same contents as the argument, but with all\n\
    \ vowels removed.\n    >>> filter_chars(\"foobar\")\n    \"fbr\"\n    >>> filter_chars(\"\
    aeiou\")\n    \"\"\n*/\nstring filter_chars(string input)\n{\n    return std.algorithm.filter!(n\
    \ => n != 'a' && n != 'e' && n != 'i' && n != 'o' && n != 'u')(input);\n}\n/*\n\
    \ Return a new string with the first letter uppercased, the rest lowercased.\n\
    \    >>> string_format(\"foo\")\n    \"Foo\"\n    >>> string_format(\"FOO\")\n\
    \    \"\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuo9rqgk7.d(53): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuo9rqgk7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string result;\n    for (long i = 0; i <= n; i++)\n    {\n     \
    \   if (i != 0)\n            result += \" \";\n        result += to!string(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd8dmqv0r.d(16): Error: slice `result` is not mutable

    /tmp/tmpd8dmqv0r.d(17): Error: template instance `to!string` template `to` is
    not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd8dmqv0r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s;\n    foreach (i; 0 .. n + 1)\n    {\n        s ~= to!string(i)\
    \ ~ \" \";\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0ybpdxy5.d(15): Error: template instance `to!string` template `to`
    is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0ybpdxy5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    long i = 0L;\n    string str = \"\";\n    while (i <= n) {\n   \
    \     str ~= to!string(i);\n        str ~= \" \";\n        i++;\n    }\n    return\
    \ str.idup;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpicpv2v_o.d(15): Error: template instance `to!string` template `to`
    is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpicpv2v_o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    if (n == 0L)\n        return \"0\";\n    else\n        return string_sequence(n\
    \ - 1L) ~ \" \" ~ to!string(n);\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_kt_hki6.d(15): Error: template instance `to!string` template `to`
    is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_kt_hki6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string result = null;\n    long i = 0L;\n    while (i <= n) {\n\
    \        if (result !is null) result ~= \" \";\n        result ~= to!string(i);\n\
    \        i += 1L;\n    }\n    return result;\n}\nstring string_sequence(long n)\
    \ \n{\n    string result = null;\n    foreach (int i; 0..=n) {\n        if (result\
    \ !is null) result ~= \" \";\n        result ~= to!string(i);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyktk9uqy.d(24): Error: expression expected, not `=`

    /tmp/tmpyktk9uqy.d(24): Error: found `n` when expecting `)`

    /tmp/tmpyktk9uqy.d(24): Error: found `)` instead of statement

    /tmp/tmpyktk9uqy.d(28): Error: declaration expected, not `return`

    /tmp/tmpyktk9uqy.d(29): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyktk9uqy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string result;\n    foreach (i; 0L .. n + 1L)\n    {\n        result\
    \ ~= format(\"%s \", i);\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeyrh5a55.d(15): Error: undefined identifier `format`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeyrh5a55.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    //Hint: Look at the definition of sequence(n) above.\n    return\
    \ sequence(n).map!(to!string).array.join(\" \");\n}\nunittest\n{\n    alias candidate\
    \ = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2if8kc4u.d(13): Error: undefined identifier `sequence`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2if8kc4u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n    pure nothrow \n{\n    // n+1, because range stops at n inclusive\n\
    \    return reduce!\"a ~ \\\" \\\" ~ to!string(b)\"( iota(n+1) );\n}\n/*\n Return\
    \ a list of integers containing the numbers 0 through n inclusive.\n    >>> list_sequence(0L)\n\
    \    [0]\n    >>> list_sequence(5L)\n    [0, 1, 2, 3, 4, 5]\n*/\nauto list_sequence(long\
    \ n) \n    pure nothrow \n{\n    return iota(n+1);\n}\n/*\n Return a list of the\
    \ prime numbers below n.\n    >>> list_primes(10L)\n    [2, 3, 5, 7]\n*/\nauto\
    \ list_primes(long n) \n    pure nothrow \n{\n    if (n < 2) \n        return\
    \ [];\n    auto nums = iota(n);\n    nums[0] = 0;\n    foreach (num; nums) \n\
    \    {\n        if (num < 2) \n            continue;\n        // nums[num*2::num]\
    \ = 0;\n        foreach (i; 2*num..n) \n            nums[i] = 0;\n    }\n    return\
    \ filter!\"a != 0\"(nums);\n}\n/*\n Return a list of prime numbers using the Sieve\
    \ of Eratosthenes\n algorithm. n is an integer.\n    >>> list_primes_eratosthenes(10L)\n\
    \    [2, 3, 5, 7]\n*/\nauto list_primes_eratosthenes(long n) \n    pure nothrow\
    \ \n{\n    if (n < 2) \n        return [];\n    auto nums = iota(n);\n    nums[0]\
    \ = 0;\n    auto p = 2;\n    foreach (num; nums) \n    {\n        if (num < 2)\
    \ \n            continue;\n        // nums[num*2::num] = 0;\n        foreach (i;\
    \ 2*num..n) \n            nums[i] = 0;\n        p = num+1;\n   \nunittest\n{\n\
    \    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n\
    \    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1\
    \ 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeja0nq9c.d(73): Error: found `unittest` instead of statement

    /tmp/tmpeja0nq9c.d(81): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeja0nq9c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string res;\n    for (long i = 0; i <= n; i++) \n    {\n       \
    \ res ~= to!string(i);\n        if (i < n)\n            res ~= \" \";\n    }\n\
    \    return res;\n}\n/*\n    Return a string containing space-delimited numbers\
    \ starting from start upto n inclusive.\n    >>> string_sequence(10L, 0L)\n  \
    \  \"0 1 2 3 4 5 6 7 8 9 10\"\n    >>> string_sequence(10L, 5L)\n    \"5 6 7 8\
    \ 9 10\"\n    >>> string_sequence(5L, 5L)\n    \"5\"\n    \n*/\nstring string_sequence(long\
    \ n, long start) \n{\n    string res;\n    for (long i = start; i <= n; i++) \n\
    \    {\n        res ~= to!string(i);\n        if (i < n)\n            res ~= \"\
    \ \";\n    }\n    return res;\n}\n/*\n    Return a string containing space-delimited\
    \ numbers starting from start upto n inclusive,\n    with a step size of step.\n\
    \    >>> string_sequence(0L, 5L, 1L)\n    \"0 1 2 3 4 5\"\n    >>> string_sequence(10L,\
    \ 0L, 2L)\n    \"10 8 6 4 2 0\"\n    >>> string_sequence(5L, 5L, 2L)\n    \"5\"\
    \n    \n*/\nstring string_sequence(long n, long start, long step) \n{\n    string\
    \ res;\n    for (long i = start; i <= n; i += step) \n    {\n        res ~= to!string(i);\n\
    \        if (i < n)\n            res ~= \" \";\n    }\n    return res;\n}\n/*\n\
    \    Return a string containing space-delimited numbers starting from n downto\
    \ 0.\n    >>> string_sequence(0L, 5L, 1L)\n    \"0 1 2 3 4 5\"\n    >>> string_sequence(0L,\
    \ 5L, 2L)\n    \"0 2 4\"\n    >>> string_sequence(0L, 5L, 3L)\n    \"\nunittest\n\
    {\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\"\
    );\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"\
    0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppiuh2i4w.d(64): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppiuh2i4w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    if (n < 0L) {\n        return \"\";\n    }\n    return string_sequence(n\
    \ - 1L) ~ n;\n}\n/*\n Given a list of non-negative integers, return a string listing\
    \ the integers in ascending order\n    >>> \"\".join(int_sequence([2, 4, 6, 8]))\n\
    \    \"24680\"\n    >>> \"\".join(int_sequence([5, 3, 1]))\n    \"1350\"\n*/\n\
    unittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpubeh4hz3.d(15): Error: incompatible types for `(string_sequence(n
    - 1L)) ~ (n)`: `string` and `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpubeh4hz3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string[] nums = new string[n+1];\n    foreach (i; 0..n)\n    {\n\
    \        nums[i] = format(\"%d\", i);\n    }\n    return join(nums, \" \");\n\
    }\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr6zgemfr.d(15): Error: undefined identifier `format`

    /tmp/tmpr6zgemfr.d(17): Error: undefined identifier `join`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr6zgemfr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for (int i = 0; i <= n; i++) \n    {\n   \
    \     s = s ~ i ~ \" \";\n    }\n    return s;\n}\nunittest\n{\n    alias candidate\
    \ = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprg5bub1h.d(15): Error: incompatible types for `(s) ~ (i)`: `string`
    and `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprg5bub1h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string str = \"\";\n    for (long i = 0; i <= n; i++)\n    {\n \
    \       str ~= to!string(i) ~ \" \";\n    }\n    return str;\n}\n/*\n Return a\
    \ string containing n lines, each ending with a newline, with the line number\
    \ right justified in a field of width 5.\n    >>> numbered_lines(0L)\n    '  \
    \   0\\n'\n    >>> numbered_lines(3L)\n    '     0\\n     1\\n     2\\n     3\\\
    n'\n*/\nstring numbered_lines(long n) \n{\n    string str = \"\";\n    for (long\
    \ i = 0; i <= n; i++)\n    {\n        str ~= format(\"%5s\\n\", to!string(i));\n\
    \    }\n    return str;\n}\n/*\n Return a string containing n lines, each ending\
    \ with a newline, with the line number right justified in a field of width 5 and\
    \ padded with zeros.\n    >>> numbered_lines_2(0L)\n    '00000\\n'\n    >>> numbered_lines_2(3L)\n\
    \    '00000\\n00001\\n00002\\n00003\\n'\n*/\nstring numbered_lines_2(long n) \n\
    {\n    string str = \"\";\n    for (long i = 0; i <= n; i++)\n    {\n        str\
    \ ~= format(\"%05s\\n\", to!string(i));\n    }\n    return str;\n}\n/*\n Return\
    \ a string containing n lines, each ending with a newline, with the line number\
    \ right justified in a field of width 5 with leading zeros.\n    >>> numbered_lines_3(0L)\n\
    \    '0000\\n'\n    >>> numbered_lines_3(3L)\n    '0000\\n0001\\n0002\\n0003\\\
    n'\n*/\nstring numbered_lines_3(long n) \n{\n    string str = \"\";\n    for (long\
    \ i = 0; i <= n; i++)\n    {\n        str ~= format(\"%04s\\n\", to!string(i));\n\
    \    }\n    return str;\n}\n/*\n Return a string containing\nunittest\n{\n   \
    \ alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n\
    \    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1\
    \ 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfgv3j2jb.d(67): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfgv3j2jb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string str;\n    foreach (i; 0L .. n+1L)\n        str ~= to!string(i)\
    \ ~ \" \";\n    return str;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvc_cz121.d(14): Error: template instance `to!string` template `to`
    is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvc_cz121.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    import std.algorithm : map;\n    string[] arr = new string[n + 1];\n\
    \    foreach (index, ref i; arr) {\n        i = to!string(index);\n    }\n   \
    \ return arr.map!(a => a).join(\" \");\n}\n/*\n  Returns the number of occurences\
    \ of x within a given array, using an unrolled loop\n  and returning -1 if x does\
    \ not exist.\n    >>> number_of_occurences(0L, [0L, 0L, 0L, 0L, 0L])\n    5\n\
    \    >>> number_of_occurences(5L, [0L, 0L, 0L, 0L, 0L])\n    -1\n*/\nlong number_of_occurences(long\
    \ x, long[] arr) \n{\n    long res = 0;\n    switch (arr.length) {\n        case\
    \ 8: res += (arr[7] == x);\n        case 7: res += (arr[6] == x);\n        case\
    \ 6: res += (arr[5] == x);\n        case 5: res += (arr[4] == x);\n        case\
    \ 4: res += (arr[3] == x);\n        case 3: res += (arr[2] == x);\n        case\
    \ 2: res += (arr[1] == x);\n        case 1: res += (arr[0] == x);\n        case\
    \ 0: break;\n        default: {\n            for (size_t i = 0; i < arr.length;\
    \ i++) {\n                res += (arr[i] == x);\n            }\n        }\n  \
    \  }\n    return res == 0 ? -1 : res;\n}\n/*\n  Returns the smallest integer in\
    \ a given array, or -1 if the array is empty.\n    >>> smallest_integer([])\n\
    \    -1\n    >>> smallest_integer([5L, 4L, 3L, 2L, 1L])\n    1\n*/\nlong smallest_integer(long[]\
    \ arr) \n{\n    if (arr.length == 0) {\n        return -1;\n    }\n    long min\
    \ = arr[0];\n    foreach (item; arr) {\n        if\nunittest\n{\n    alias candidate\
    \ = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpihu8u8ug.d(63): Error: found `unittest` when expecting `(`

    /tmp/tmpihu8u8ug.d(71): Error: found `void` when expecting `)`

    /tmp/tmpihu8u8ug.d(71): Error: found `{` when expecting `;` following statement

    /tmp/tmpihu8u8ug.d(71): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpihu8u8ug.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n  return sequence_string(0L,n);\n}\nunittest\n{\n    alias candidate\
    \ = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2tyefjuj.d(12): Error: undefined identifier `sequence_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2tyefjuj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    import std.conv;\n    string ret = \"\";\n    foreach (i; 0L ..\
    \ n + 1L) \n    {\n        ret ~= i;\n        if (i < n)\n            ret ~= \"\
    \ \";\n    }\n    return ret;\n}\n/*\n Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n   \
    \ \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    import std.conv;\n    string ret = \"\";\n    foreach (i; 0L ..\
    \ n + 1L) \n    {\n        ret ~= i;\n        if (i < n)\n            ret ~= \"\
    \ \";\n    }\n    return ret;\n}\n/*\n    Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n   \
    \ \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    import std.conv;\n    string ret = \"\";\n    foreach (i; 0L ..\
    \ n + 1L) \n    {\n        ret ~= i;\n        if (i < n)\n            ret ~= \"\
    \ \";\n    }\n    return ret;\n}\n/*\n    Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n   \
    \ \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    import std.conv;\n    string ret = \"\";\n    foreach (i; 0L ..\
    \ n + 1L) \n    {\n        ret ~= i;\n        if (i < n)\n            ret ~= \"\
    \ \";\n    }\n    return ret;\n}\n/*\n    Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\n    >>> string_sequence\nunittest\n\
    {\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\"\
    );\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"\
    0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmtbxflxn.d(82): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmtbxflxn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string sequence = \"\";\n    while (n >= 0) \n    {\n        sequence\
    \ += to!string(n);\n        sequence += \" \";\n        n--;\n    }\n    return\
    \ sequence;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp30wh6tm1.d(15): Error: template instance `to!string` template `to`
    is not defined

    /tmp/tmp30wh6tm1.d(16): Error: slice `sequence` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp30wh6tm1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string result;\n    foreach (i; 0L .. n + 1L)\n    {\n        if\
    \ (result != \"\")\n            result ~= \" \";\n        result ~= to!string(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprtszls0c.d(17): Error: template instance `to!string` template `to`
    is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprtszls0c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string result = \"\";\n    for (long i = 0; i <= n; i++) \n    {\n\
    \        result += (string)i;\n        if (i < n) \n        {\n            result\
    \ += \" \";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9pz1q033.d(15): Error: C style cast illegal, use `cast(string)i`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9pz1q033.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    enum{maxline = 1024};\n    char[maxline] buf;\n    auto p = buf.ptr;\n\
    \    auto lim = buf.ptr + maxline;\n    for (int i = 0; i <= n; i++)\n    {\n\
    \        p += sprintf(p, \"%d \", i);\n        if (p + 16 > lim) \n        {\n\
    \            buf ~= \"\\n\";\n            p = buf.ptr + buf.length;\n        }\n\
    \    }\n    return buf[0..$-1];\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5web__58.d(12): Deprecation: use `{ }` for an empty statement,
    not `;`

    /tmp/tmp5web__58.d(18): Error: undefined identifier `sprintf`

    /tmp/tmp5web__58.d(21): Error: cannot append type `string` to type `char[1024]`

    /tmp/tmp5web__58.d(25): Error: cannot implicitly convert expression `buf[0..1023]`
    of type `char[]` to `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5web__58.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i <= n; i++) \n\t{\n\t\ts +=\
    \ i;\n\t\tif (i < n)\n\t\t\ts += \" \";\n\t}\n\treturn s;\n}\nunittest\n{\n  \
    \  alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n\
    \    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1\
    \ 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa_wnzqfw.d(15): Error: incompatible types for `(s) += (i)`: `string`
    and `long`

    /tmp/tmpa_wnzqfw.d(17): Error: slice `s` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa_wnzqfw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring result = \"\";\n\tforeach(i; 0L .. n + 1L) \n\t{\n\t\tresult\
    \ ~= to!string(i) ~ \" \";\n\t}\n\treturn result.idup;\n}\nunittest\n{\n    alias\
    \ candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbbip1z09.d(15): Error: template instance `to!string` template `to`
    is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbbip1z09.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    return iota(n+1).map!(to!string).joiner(\" \").array;\n}\nunittest\n\
    {\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\"\
    );\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"\
    0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg89m0es5.d(12): Error: undefined identifier `iota`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg89m0es5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = format(\"%d\",n);\n    for (int i = n - 1; i >= 0; i--)\n\
    \        s += format(\" %d\",i);\n    return s;\n}\n// enable std.math.parse\n\
    alias parse = std.math.parse;\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsxqsborx.d(18): Error: undefined identifier `parse` in module `std.math`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsxqsborx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    if (n == 0L)\n    {\n        return \"0\";\n    }\n    int size\
    \ = (int) (log10(n) + 1);\n    string result = \"\";\n    for (long i = 0L; i\
    \ <= n; i++)\n    {\n        result += to!string(i, size);\n        result +=\
    \ \" \";\n    }\n    return result[0..$-1];\n}\nunittest\n{\n    alias candidate\
    \ = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0ccdmc0v.d(16): Error: C style cast illegal, use `cast(int)(log10(n)
    + 1)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0ccdmc0v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    if (n == 0L) return \"0\";\n    string s = \"\";\n    foreach (k;\
    \ 0L .. n + 1L) {\n        s ~= to!string(k) ~ \" \";\n    }\n    return s[0 ..\
    \ $ - 1];\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuby2fm8x.d(15): Error: template instance `to!string` template `to`
    is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuby2fm8x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string result = \"\";\n    foreach (int i; 0..n + 1)\n        result\
    \ ~= i ~ \" \";\n    return result;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6zeav7gb.d(13): Error: cannot implicitly convert expression `n
    + 1L` of type `long` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6zeav7gb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for (int i = 0; i <= n; i++) \n    {\n   \
    \     s += to!string(i);\n        if (i < n) \n        {\n            s += \"\
    \ \";\n        }\n    }\n    return s;\n}\n/*\n Return a string containing n copies\
    \ of the string s.\n    >>> string_repeater(\"hi\", 2L)\n    \"hihi\"\n    >>>\
    \ string_repeater(\"hi\", 0L)\n    \"\"\n    >>> string_repeater(\"\", 3L)\n \
    \   \"\"\n    \n*/\nstring string_repeater(string s, long n) \n{\n    string result\
    \ = \"\";\n    for (int i = 0; i < n; i++) \n    {\n        result += s;\n   \
    \ }\n    return result;\n}\n/*\n Return a string containing the first n numbers\
    \ of the Fibonacci sequence.\n    >>> fibonacci_sequence(0L)\n    \"\"\n    >>>\
    \ fibonacci_sequence(1L)\n    \"0\"\n    >>> fibonacci_sequence(10L)\n    \"0\
    \ 1 1 2 3 5 8 13 21 34\"\n    \n*/\nstring fibonacci_sequence(long n) \n{\n  \
    \  int a = 0;\n    int b = 1;\n    string s = \"\";\n    for (int i = 0; i < n;\
    \ i++) \n    {\n        s += to!string(a);\n        int temp = a;\n        a =\
    \ b;\n        b = temp + b;\n        if (i < n - 1) \n        {\n            s\
    \ += \" \";\n        }\n    }\n    return s;\n}\n/*\n Return the sum of two numbers\
    \ a and b.\n    >>> sum(2L, 3L)\n    5L\n    >>> sum(0L, 1L)\n    1L\n    >>>\
    \ sum(-1L, 5L)\n    4L\n    \n*/\nlong sum(long a, long b) \n{\n    return a +\
    \ b;\n}\n/*\n Return the quotient of two numbers a and b.\n    >>> quotient(10L,\
    \ 5L)\n    2L\n   \nunittest\n{\n    alias candidate = string_sequence;\n\n  \
    \  assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n\
    \    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9zi6aihf.d(84): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9zi6aihf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string sequence = \"\";\n    foreach (i; 0L .. n + 1L)\n    {\n\
    \        sequence ~= i;\n        if (i < n)\n        {\n            sequence ~=\
    \ \" \";\n        }\n    }\n    return sequence;\n}\nunittest\n{\n    alias candidate\
    \ = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzb66blq8.d(15): Error: cannot append type `long` to type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzb66blq8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string str = \"\";\n    foreach (i; 0..n+1)\n        str ~= std.conv.to!string(i)\
    \ ~ \" \";\n    return str;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp23cfv41z.d(14): Error: undefined identifier `conv` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp23cfv41z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string res = \"\";\n    for (long i = 0; i <= n; i++)\n    {\n \
    \       res += to!string(i);\n        if (i < n)\n            res += \" \";\n\
    \    }\n    return res;\n}\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence_range(long\
    \ n) \n{\n    string res = \"\";\n    foreach (i; 0 .. n + 1)\n    {\n       \
    \ res += to!string(i);\n        if (i < n)\n            res += \" \";\n    }\n\
    \    return res;\n}\n/*\n Return a list of numbers starting from 0 upto n inclusive.\n\
    \    >>> list_sequence(0L)\n    [0]\n    >>> list_sequence(5L)\n    [0, 1, 2,\
    \ 3, 4, 5]\n    \n*/\nunittest\n{\n    alias candidate = string_sequence;\n\n\
    \    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0woj2v4x.d(15): Error: template instance `to!string` template `to`
    is not defined

    /tmp/tmp0woj2v4x.d(17): Error: slice `res` is not mutable

    /tmp/tmp0woj2v4x.d(34): Error: template instance `to!string` template `to` is
    not defined

    /tmp/tmp0woj2v4x.d(36): Error: slice `res` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0woj2v4x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s;\n    foreach (i; 0 .. n+1)\n        s ~= format(\"%s \"\
    , i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpls3d3r53.d(14): Error: undefined identifier `format`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpls3d3r53.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string res = \"\";\n    foreach (i; 0..n+1) {\n        res ~= to!string(i)\
    \ ~ \" \";\n    }\n    return res.idup;\n}\nunittest\n{\n    alias candidate =\
    \ string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc8djbies.d(14): Error: template instance `to!string` template `to`
    is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc8djbies.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (int i = 0; i <= n; i++)\n\t{\n\t\ts += to!string(i)\
    \ + \" \";\n\t}\n\ts = s[0..$-1];\n\treturn s;\n}\nunittest\n{\n    alias candidate\
    \ = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm5410fqj.d(15): Error: template instance `to!string` template `to`
    is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm5410fqj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s;\n    auto i = 0L;\n    for (; i < n; i++)\n    {\n   \
    \     s ~= i;\n        s ~= \" \";\n    }\n    s ~= i;\n    return s;\n}\nunittest\n\
    {\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\"\
    );\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"\
    0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd4qk24ut.d(16): Error: cannot append type `long` to type `string`

    /tmp/tmpd4qk24ut.d(19): Error: cannot append type `long` to type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd4qk24ut.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    if (n <= 0L) return \"0\";\n    string s = \"\";\n    for (long\
    \ i = 0L; i <= n; i++)\n    {\n        s = s ~ \" \" ~ to!string(i);\n    }\n\
    \    return s[1..$];\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc28snim6.d(16): Error: template instance `to!string` template `to`
    is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc28snim6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s;\n    for (int i = 0; i <= n; i++)\n    {\n        s +=\
    \ \" \" + to!string(i);\n    }\n    return s;\n}\n/*\n Return all the Fibonacci\
    \ numbers upto and including the nth term.\n    >>> fibonacci(1L)\n    [0, 1]\n\
    \    >>> fibonacci(3L)\n    [0, 1, 1, 2]\n*/\nunittest\n{\n    alias candidate\
    \ = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1e47vp9o.d(15): Error: template instance `to!string` template `to`
    is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1e47vp9o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\t\n\tstring result;\n\t\n\twhile(n>=0)\n\t{\n\t\tresult = result ~\
    \ integerToString(n);\n\t\tn=n-1;\n\t\tif(n>=0) result = result ~ \" \";\n\t}\n\
    \treturn result;\n\t\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgk8wfl6r.d(17): Error: undefined identifier `integerToString`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgk8wfl6r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    import std.array;\n    return iota(n + 1L).map!(to!string).join;\n\
    }\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2qkzo9v0.d(13): Error: undefined identifier `iota`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2qkzo9v0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string res = \"\";\n    for (int i = 0; i <= n; i++)\n    {\n  \
    \      res = res ~ i ~ \" \";\n    }\n    return res;\n}\nunittest\n{\n    alias\
    \ candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9w34tv8w.d(15): Error: incompatible types for `(res) ~ (i)`: `string`
    and `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9w34tv8w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string res = \"\";\n    foreach (i; 0..n) {\n        res ~= to!string(i)\
    \ ~ \" \";\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnuae5v4x.d(14): Error: template instance `to!string` template `to`
    is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnuae5v4x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s;\n    foreach (i; 0L .. n + 1L) \n    {\n        s ~= i;\n\
    \        if (i < n) \n        {\n            s ~= \" \";\n        }\n    }\n \
    \   return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb6r2h8_l.d(15): Error: cannot append type `long` to type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb6r2h8_l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    foreach (long i; 0..n+1) \n    {\n       \
    \ s ~= (i).stringof ~ \" \";\n    }\n    return s;\n}\n/*\n    Return n-th Fibonacci\
    \ number.\n    >>> fib(0L)\n    0\n    >>> fib(10L)\n    55\n*/\nlong fib(long\
    \ n) \n{\n    if (n == 0L) \n    {\n        return 0L;\n    }\n    else if (n\
    \ == 1L) \n    {\n        return 1L;\n    }\n    else \n    {\n        return\
    \ fib(n-1L) + fib(n-2L);\n    }\n}\n/*\n    Return the first n primes.\n    >>>\
    \ primes(0L)\n    []\n    >>> primes(1L)\n    [2]\n    >>> primes(5L)\n    [2,\
    \ 3, 5, 7, 11]\n*/\nlong[] primes(long n) \n{\n    long[] p = new long[];\n  \
    \  long j;\n    for (long i = 2L; i < n; i++) \n    {\n        for (j = 2L; j\
    \ <= i; j++) \n        {\n            if (i % j == 0L) \n            {\n     \
    \           break;\n            }\n        }\n        if (j == i) \n        {\n\
    \            p ~= i;\n        }\n    }\n    return p;\n}\n/*\n    Return true\
    \ if \"s\" is a palindrome.\n    >>> is_palindrome(\"otto\")\n    true\n    >>>\
    \ is_palindrome(\"ottt\")\n    false\n*/\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpss_j_15g.d(52): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpss_j_15g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s;\n    int i;\n    foreach(i; 0..n+1)\n    {\n        s\
    \ ~= to!string(i) ~ \" \";\n    }\n    return s;\n}\nunittest\n{\n    alias candidate\
    \ = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7y2rx2h5.d(14): Error: variable `i` is shadowing variable `tmp7y2rx2h5.string_sequence.i`

    /tmp/tmp7y2rx2h5.d(16): Error: template instance `to!string` template `to` is
    not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7y2rx2h5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string result;\n    foreach (i; 0 .. n + 1) \n    {\n        result\
    \ ~= to!string(i) ~ \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpttbzb1w0.d(15): Error: template instance `to!string` template `to`
    is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpttbzb1w0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string result = \"\";\n    long i = 0L;\n    for (; i <= n; ++i)\
    \ \n    {\n        result += to!string(i);\n        if (i < n) \n        {\n \
    \           result += \" \";\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\"\
    );\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"\
    0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcny9j6dn.d(16): Error: template instance `to!string` template `to`
    is not defined

    /tmp/tmpcny9j6dn.d(19): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcny9j6dn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s;\n    for (size_t i = 0; i <= n; i++) \n    {\n       \
    \ s ~= i.to!string ~ \" \";\n    }\n    return s.trimRight();\n}\nunittest\n{\n\
    \    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n\
    \    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1\
    \ 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgddf9bto.d(15): Error: no property `to` for type `ulong`

    /tmp/tmpgddf9bto.d(17): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgddf9bto.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    char[] s;\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfgy1o8ln.d(13): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfgy1o8ln.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string ret = \"\";\n    long i = 0;\n    foreach(i;i<=n) {\n   \
    \     ret ~= ret.length ? \" \" : \"\";\n        ret ~= to!string(i);\n    }\n\
    \    return ret;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n \
    \   assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n\
    \    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw2st26tb.d(14): Error: invalid `foreach` aggregate `i <= n`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw2st26tb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string ret;\n    for (long i = 0; i <= n; i++)\n    {\n        ret\
    \ ~= to!string(i) ~ \" \";\n    }\n    return ret;\n}\n/*\n Return a string containing\
    \ numbers starting from 0 upto n inclusive\n joined with the given separator string.\
    \ \n \n    >>> string_sequence_sep(0L, \",\")\n    \"0\"\n    >>> string_sequence_sep(5L,\
    \ \",\")\n    \"0,1,2,3,4,5\"\n*/\nstring string_sequence_sep(long n, string sep)\
    \ \n{\n    string ret;\n    for (long i = 0; i <= n; i++)\n    {\n        ret\
    \ ~= to!string(i) ~ sep;\n    }\n    return ret;\n}\n/*\n Return a string containing\
    \ space-delimited numbers starting from first to last inclusive.\n If first is\
    \ greater than last an empty string is returned.\n    >>> string_sequence_full(0L,\
    \ 0L)\n    \"0\"\n    >>> string_sequence_full(5L, 7L)\n    \"5 6 7\"\n    >>>\
    \ string_sequence_full(5L, 4L)\n    \"\"\n*/\nstring string_sequence_full(long\
    \ first, long last) \n{\n    string ret;\n    if (first <= last)\n    {\n    \
    \    for (long i = first; i <= last; i++)\n        {\n            ret ~= to!string(i)\
    \ ~ \" \";\n        }\n    }\n    return ret;\n}\n/*\n Return a string containing\
    \ numbers starting from first to last inclusive\n joined with the given separator\
    \ string. \n If first is greater than last an empty string is returned.\n    >>>\
    \ string_sequence_full_sep(0L, 0L, \",\")\n    \"0\"\n    >>> string_sequence_full_sep(5L,\
    \ 7L, \",\")\n    \"5,6,7\"\n    >>> string_sequence_full_sep(5L, 4L, \",\")\n\
    \    \"\"\n*/\nstring string_sequence_full_sep(long first, long last, string sep)\
    \ \n{\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp5e_kmax.d(72): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp5e_kmax.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n  string str = \"\";\n  foreach(long i; 0L..n+1L)\n    str = str ~ to!string(i)\
    \ ~ \" \";\n  return str;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdb04wcm6.d(14): Error: template instance `to!string` template `to`
    is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdb04wcm6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string result;\n    result~=to!string(n);\n    for(int i=n-1;i>=0;i--)\n\
    \    {\n        result~=\" \"~to!string(i);\n    }\n    return result;\n}\n/*\n\
    \ Return a n-by-n matrix of integers starting from 0 upto n*n-1 inclusive.\n \
    \   >>> string_matrix(0L)\n    \"0\"\n    >>> string_matrix(1L)\n    \"0\"\n \
    \   >>> string_matrix(2L)\n    \"0 1\\n2 3\"\n    >>> string_matrix(3L)\n    \"\
    0 1 2\\n3 4 5\\n6 7 8\"\n    >>> string_matrix(4L)\n    \"0 1 2 3\\n4 5 6 7\\\
    n8 9 10 11\\n12 13 14 15\"\n    \n*/\nstring string_matrix(long n)\n{\n    if(n==0)\n\
    \    {\n        return \"0\";\n    }\n    else if(n==1)\n    {\n        return\
    \ \"0\";\n    }\n    else\n    {\n        string result;\n        int max=n*n;\n\
    \        int k=0;\n        for(int i=0;i<n;i++)\n        {\n            for(int\
    \ j=0;j<n;j++)\n            {\n                result~=to!string(k);\n       \
    \         if(j!=n-1)\n                {\n                    result~=\" \";\n\
    \                }\n                k++;\n            }\n            if(i!=n-1)\n\
    \            {\n                result~=\"\\n\";\n            }\n        }\n \
    \       return result;\n    }\n}\n/*\n Return a string representing the primes\
    \ upto n.\n    >>> string_primes(0L)\n    \"\"\n    >>> string_primes(1L)\n  \
    \  \"\"\n    >>> string_primes(2L)\n    \"2\"\n    >>> string_primes(3L)\n   \
    \ \"2 3\"\n    >>> string_primes(4L)\n    \"2 3\"\n    >>> string_primes(5L)\n\
    \    \"\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb0rgwta8.d(68): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb0rgwta8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s;\n    foreach (i; 0 .. n+1)\n        s ~= i.to!string;\n\
    \    return s;\n}\n/*\nReturn a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    >>> string_sequence_b(0L)\n    \"0\"\n    >>>\
    \ string_sequence_b(5L)\n    \"0 1 2 3 4 5\"\n*/\nstring string_sequence_b(long\
    \ n) \n{\n    string s;\n    foreach (i; 0 .. n+1)\n        s ~= i.to!string;\n\
    \    return s;\n}\n/*\nDetermine whether a positive integer is even.\n    >>>\
    \ is_even(0L)\n    true\n    >>> is_even(1L)\n    false\n    >>> is_even(2L)\n\
    \    true\n    >>> is_even(3L)\n    false\n*/\nunittest\n{\n    alias candidate\
    \ = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphznpwuvn.d(14): Error: no property `to` for type `long`

    /tmp/tmphznpwuvn.d(28): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphznpwuvn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string res = \"\";\n    foreach (i; 0L .. n + 1L) \n    {\n    \
    \    res ~= \" \" ~ i.to!string;\n    }\n    return res[1 .. $];\n}\nunittest\n\
    {\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\"\
    );\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"\
    0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptte0w80g.d(15): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptte0w80g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    return iota(n+1L).to!string;\n}\nunittest\n{\n    alias candidate\
    \ = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6mzzn0nd.d(12): Error: undefined identifier `iota`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6mzzn0nd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string result;\n    for (int i = 0; i <= n; i++) \n    {\n     \
    \   result ~= i;\n        if (i < n)\n            result ~= \" \";\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n\
    \    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpfq_4jy_u.d(25): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f9d]

    ??:? void tmpfq_4jy_u.__unittest_L21_C1() [0x427be9]

    ??:? void tmpfq_4jy_u.__modtest() [0x427d1c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c9d7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b8e6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43020d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4306bc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430199]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b8bd]

    ??:? runModuleUnitTests [0x42c7ad]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4283ec]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\treturn string_sequence(0L, n);\n}\nunittest\n{\n    alias candidate\
    \ = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0opboxsi.d(12): Error: function `tmp0opboxsi.string_sequence(long
    n)` is not callable using argument types `(long, long)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0opboxsi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string ret = \"\";\n    if (n >= 0) {\n        foreach (i; 0 ..\
    \ n + 1) {\n            ret ~= i.to!string ~ \" \";\n        }\n    }\n    else\
    \ {\n        foreach (i; 0 .. -n + 1) {\n            ret ~= (-i).to!string ~ \"\
    \ \";\n        }\n    }\n    return ret.trimRight();\n}\nunittest\n{\n    alias\
    \ candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3_7g8sua.d(15): Error: no property `to` for type `long`

    /tmp/tmp3_7g8sua.d(20): Error: no property `to` for type `long`

    /tmp/tmp3_7g8sua.d(23): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3_7g8sua.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s;\n    for (long i = 0; i <= n; i++) \n    {\n        s\
    \ += to!string(i);\n        if (i < n) \n        {\n            s += \" \";\n\
    \        }\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcf8f0_zw.d(15): Error: template instance `to!string` template `to`
    is not defined

    /tmp/tmpcf8f0_zw.d(18): Error: slice `s` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcf8f0_zw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    auto result = to!string(0L);\n    for (long i = 1L; i <= n; i++)\n\
    \    {\n        result ~= \" \" ~ to!string(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5xb_k5zk.d(12): Error: template instance `to!string` template `to`
    is not defined

    /tmp/tmp5xb_k5zk.d(15): Error: template instance `to!string` template `to` is
    not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5xb_k5zk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    static string result = \"\";\n    static long i = 0L;\n    static\
    \ bool first_call = true;\n    static long last_n = 0L;\n    if (first_call)\n\
    \    {\n        first_call = false;\n        result = \"\";\n        i = 0L;\n\
    \        last_n = n;\n    }\n    if (i <= n)\n    {\n        //result +=  to!string(i);\n\
    \        result = result ~ \" \" ~ to!string(i);\n        i++;\n        string_sequence(n);\n\
    \    }\n    if (i > n && last_n != n)\n    {\n        first_call = true;\n   \
    \     string_sequence(n);\n    }\n    return result;\n}\n/*\nCompute the sum of\
    \ squares of numbers from 0 up to n\n    >>> sum_squares(5L)\n    30L\n    >>>\
    \ sum_squares(0L)\n    0L\n    >>> sum_squares(1L)\n    1L\n*/\nlong sum_squares(long\
    \ n)\n{\n    static long result = 0L;\n    static long i = 0L;\n    static bool\
    \ first_call = true;\n    static long last_n = 0L;\n    if (first_call)\n    {\n\
    \        first_call = false;\n        result = 0L;\n        i = 0L;\n        last_n\
    \ = n;\n    }\n    if (i <= n)\n    {\n        result += i*i;\n        i++;\n\
    \        sum_squares(n);\n    }\n    if (i > n && last_n != n)\n    {\n      \
    \  first_call = true;\n        sum_squares(n);\n    }\n    return result;\n}\n\
    /*\nCompute the sum of 0 up to n\n    >>> sum_naturals(5L)\n    15L\n    >>> sum_naturals(0L)\n\
    \    0L\n    >>> sum_naturals(1L)\n    1L\n*/\nlong sum_naturals(long n)\n{\n\
    \    static long result = 0L;\n    static long i = 0L;\n    static\nunittest\n\
    {\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\"\
    );\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"\
    0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaqlaj1v3.d(86): Error: basic type expected, not `unittest`

    /tmp/tmpaqlaj1v3.d(86): Error: no identifier for declarator `_error_`

    /tmp/tmpaqlaj1v3.d(86): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaqlaj1v3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string result = \"\";\n    for (long i = 0; i <= n; i++)\n    {\n\
    \        result += i;\n        if (i < n)\n            result += \" \";\n    }\n\
    \    return result;\n}\n/*\n A simple 2-D vector class\n    >>> vector2 v1(1.2,\
    \ 3.4);\n    >>> v1\n    vector2(1.2, 3.4)\n    >>> v1.x\n    1.2\n    >>> v1.y\n\
    \    3.4\n    >>> v1 += vector2(2.3, 4.5);\n    >>> v1\n    vector2(3.5, 7.9)\n\
    \    >>> v1 - vector2(0.1, -0.2)\n    vector2(3.4, 8.1)\n    >>> v1 * 2.0\n  \
    \  vector2(7.0, 15.8)\n    >>> v1 / 2.0\n    vector2(1.75, 3.95)\n    >>> v1.magnitude\n\
    \    9.31961594466\n    >>> v1.normalized\n    vector2(0.384615384615, 0.923076923077)\n\
    \    >>> vector2.zero\n    vector2(0.0, 0.0)\n    >>> vector2.i\n    vector2(1.0,\
    \ 0.0)\n    >>> vector2.j\n    vector2(0.0, 1.0)\n*/\nclass vector2 \n{\n    double\
    \ x, y;\n    // Constructor\n    this(double x, double y) \n    {\n        this.x\
    \ = x;\n        this.y = y;\n    }\n    // Constructor\n    this(vector2 other)\
    \ \n    {\n        this.x = other.x;\n        this.y = other.y;\n    }\n    //\
    \ Operator overload\n    @disable this(this) {}\n    vector2 opAssign(vector2\
    \ other) \n    {\n        this.x = other.x;\n        this.y = other.y;\n     \
    \   return this;\n    }\n    vector2 opAddAssign(vector2 other) \n   \nunittest\n\
    {\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\"\
    );\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"\
    0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptxksni57.d(75): Error: semicolon expected following function declaration

    /tmp/tmptxksni57.d(83): Error: `}` expected following members in `class` declaration
    at /tmp/tmptxksni57.d(50)

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptxksni57.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n   string p = \"\";\n   while (n >= 0) \n   {\n      p = ( p ~ \" \"\
    \ ~ to!string(n));\n      n--;\n   }\n   return trim(p);\n}\n/*\n Write a function\
    \ to check if the `number` is prime or not.\n    >>> is_prime(1L)\n    false\n\
    \    >>> is_prime(2L)\n    true\n    >>> is_prime(3L)\n    true\n    >>> is_prime(4L)\n\
    \    false\n    >>> is_prime(5L)\n    true\n    >>> is_prime(6L)\n    false\n\
    \    >>> is_prime(101L)\n    true\n*/\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2vg974yh.d(15): Error: template instance `to!string` template `to`
    is not defined

    /tmp/tmp2vg974yh.d(18): Error: undefined identifier `trim`, did you mean function
    `fdim`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2vg974yh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    import std.string;\n    return from(iota(0L, n + 1L))\n        .map!(to!string)\n\
    \        .joiner(\" \")\n        .toString();\n}\nunittest\n{\n    alias candidate\
    \ = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcz8jez_o.d(13): Error: undefined identifier `from`, did you mean
    function `fdim`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcz8jez_o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s;\n    for (long i = 0; i <= n; i++)\n    {\n        s ~=\
    \ to!string(i) ~ \" \";\n    }\n    return s;\n}\n/*\n Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    \"0\"\n    >>> string_sequence(5)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring\
    \ string_sequence(int n) \n{\n    string s;\n    for (int i = 0; i <= n; i++)\n\
    \    {\n        s ~= to!string(i) ~ \" \";\n    }\n    return s;\n}\n/*\n Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    \    >>> string_sequence(0.0)\n    \"0\"\n    >>> string_sequence(5.0)\n    \"\
    0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(double n) \n{\n    string s;\n\
    \    for (int i = 0; i <= n; i++)\n    {\n        s ~= to!string(i) ~ \" \";\n\
    \    }\n    return s;\n}\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0.0f)\n    \"0\"\n\
    \    >>> string_sequence(5.0f)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(float\
    \ n) \n{\n    string s;\n    for (int i = 0; i <= n; i++)\n    {\n        s ~=\
    \ to!string(i) ~ \" \";\n    }\n    return s;\n}\nunittest\n{\n    alias candidate\
    \ = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9004p4dh.d(15): Error: template instance `to!string` template `to`
    is not defined

    /tmp/tmp9004p4dh.d(32): Error: template instance `to!string` template `to` is
    not defined

    /tmp/tmp9004p4dh.d(49): Error: template instance `to!string` template `to` is
    not defined

    /tmp/tmp9004p4dh.d(66): Error: template instance `to!string` template `to` is
    not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9004p4dh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    long i = 0L;\n    string s = \"\";\n    foreach (i; 0L..n+1L)\n\
    \    {\n        s = s ~ i.to!string ~ \" \";\n    }\n    return s;\n}\nunittest\n\
    {\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\"\
    );\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"\
    0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps0m18sj7.d(14): Error: variable `i` is shadowing variable `tmps0m18sj7.string_sequence.i`

    /tmp/tmps0m18sj7.d(16): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps0m18sj7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string ret_str;\n    ret_str = \"\";\n    foreach(int i; 0..n+1)\n\
    \    {\n        ret_str = ret_str ~ to!string(i) ~ \" \";\n    }\n    return ret_str;\n\
    }\n/*\n Return a string containing space-delimited numbers starting from 0 upto\
    \ n in reverse order.\n    >>> string_sequence_reversed(0L)\n    \"0\"\n    >>>\
    \ string_sequence_reversed(5L)\n    \"5 4 3 2 1 0\"\n    \n*/\nstring string_sequence_reversed(long\
    \ n) \n{\n    string ret_str;\n    ret_str = \"\";\n    foreach(int i; 0..n+1)\n\
    \    {\n        ret_str = ret_str ~ to!string(n-i) ~ \" \";\n    }\n    return\
    \ ret_str;\n}\n/*\n Return a string containing space-delimited numbers starting\
    \ from n downto 0.\n    >>> string_sequence_reversed(0L)\n    \"0\"\n    >>> string_sequence_reversed(5L)\n\
    \    \"5 4 3 2 1 0\"\n    \n*/\nstring string_sequence_from_n(long n) \n{\n  \
    \  string ret_str;\n    ret_str = \"\";\n    foreach(int i; 0..n+1)\n    {\n \
    \       ret_str = ret_str ~ to!string(n-i) ~ \" \";\n    }\n    return ret_str;\n\
    }\n/*\n Return a string containing space-delimited numbers starting from n downto\
    \ 0.\n    >>> string_sequence_reversed(0L)\n    \"0\"\n    >>> string_sequence_reversed(5L)\n\
    \    \"5 4 3 2 1 0\"\n    \n*/\nstring string_sequence_from_n_reversed(long n)\
    \ \n{\n    string ret_str;\n    ret_str = \"\";\n    foreach(int i; 0..n+1)\n\
    \    {\n        ret_str = ret_str ~ to!string(i) ~ \" \";\n    }\n    return\n\
    unittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpshiv072h.d(73): Error: expression expected, not `unittest`

    /tmp/tmpshiv072h.d(74): Error: found `{` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpshiv072h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s;\n    foreach (i; 0L .. n+1L) {\n        if (s.length)\
    \ s ~= \" \";\n        s ~= std.conv.to!string(i);\n    }\n    return s;\n}\n\
    /*\n Return the sum of the numbers from 0 upto n inclusive.\n    >>> sum_sequence(0L)\n\
    \    0\n    >>> sum_sequence(5L)\n    15\n*/\nlong sum_sequence(long n) \n{\n\
    \    long s = 0L;\n    foreach (i; 0L .. n+1L) {\n        s += i;\n    }\n   \
    \ return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppdftad4y.d(15): Error: undefined identifier `conv` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppdftad4y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    char[] sequence = new char[];\n    for (int i = 0; i <= n; i++)\n\
    \    {\n        sequence ~= to!string(i);\n        sequence ~= ' ';\n    }\n \
    \   return sequence[0..$-1];\n}\n/*\n Return a string containing space-delimited\
    \ odd numbers starting from 1 upto n inclusive.\n    >>> string_sequence_odd(5L)\n\
    \    \"1 3 5\"\n*/\nstring string_sequence_odd(long n) \n{\n    char[] sequence\
    \ = new char[];\n    for (int i = 1; i <= n; i += 2)\n    {\n        sequence\
    \ ~= to!string(i);\n        sequence ~= ' ';\n    }\n    return sequence[0..$-1];\n\
    }\n/*\n Return a string containing space-delimited even numbers starting from\
    \ 2 upto n inclusive.\n    >>> string_sequence_even(5L)\n    \"2 4\"\n*/\nstring\
    \ string_sequence_even(long n) \n{\n    char[] sequence = new char[];\n    for\
    \ (int i = 2; i <= n; i += 2)\n    {\n        sequence ~= to!string(i);\n    \
    \    sequence ~= ' ';\n    }\n    return sequence[0..$-1];\n}\n/*\n Return a string\
    \ containing space-delimited integers in the Fibonacci sequence starting from\
    \ 1 upto n inclusive.\n    >>> string_sequence_fibonacci(5L)\n    \"1 1 2 3 5\"\
    \n*/\nstring string_sequence_fibonacci(long n) \n{\n    int fibonacci(int n)\n\
    \    {\n        return (n <= 1) ? n : fibonacci(n - 1) + fibonacci(n - 2);\n \
    \   }\n    char[] sequence = new char[];\n    for (int i = 0; i <= n; i++)\n \
    \   {\n        sequence ~= to!string(fibonacci(i));\n        sequence ~= ' ';\n\
    \    }\n    return sequence[0..$-1];\n}\n/*\n Return a string containing space-delimited\
    \ positive integers in the factorial sequence starting from 1\nunittest\n{\n \
    \   alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n\
    \    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1\
    \ 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5jatto8c.d(69): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5jatto8c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string result = to!string(n);\nunittest\n{\n    alias candidate\
    \ = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjar3z5g0.d(13): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjar3z5g0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    auto result = \"\";\n    foreach (i; 0 .. n + 1) \n    {\n     \
    \   result ~= i.to!string;\n        if (i < n) \n        {\n            result\
    \ ~= \" \";\n        }\n    }\n    return result;\n}\n// Return the nth value\
    \ of the Fibonacci sequence, starting from 0.\nlong fibonacci(long n) \n{\n  \
    \  if (n == 0)\n    {\n        return 0;\n    }\n    else if (n == 1)\n    {\n\
    \        return 1;\n    }\n    else\n    {\n        return fibonacci(n - 1) +\
    \ fibonacci(n - 2);\n    }\n}\n/*\n Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive,\n where each number is the nth value\
    \ of the Fibonacci sequence.\n    >>> string_fibonacci(0L)\n    \"0\"\n    >>>\
    \ string_fibonacci(5L)\n    \"0 1 1 2 3 5\"\n    \n*/\nstring string_fibonacci(long\
    \ n) \n{\n    auto result = \"\";\n    foreach (i; 0 .. n + 1) \n    {\n     \
    \   result ~= fibonacci(i).to!string;\n        if (i < n) \n        {\n      \
    \      result ~= \" \";\n        }\n    }\n    return result;\n}\n// Return a\
    \ string containing n space-delimited random values in the range 0-n.\nstring\
    \ string_random(long n) \n{\n    auto result = \"\";\n    foreach (i; 0 .. n +\
    \ 1) \n    {\n        result ~= uniform(0L, n + 1).to!string;\n        if (i <\
    \ n) \n        {\n            result ~= \" \";\n        }\n    }\n    return result;\n\
    }\n// Return the median value of the list given.\nlong median(long[] list) \n\
    {\n    if (list.length < 1) \n    {\n        return -1;\n    }\n    else if (list.length\
    \ % 2 == 1) \n    {\n        return\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpji932kss.d(85): Error: expression expected, not `unittest`

    /tmp/tmpji932kss.d(86): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmpji932kss.d(93): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpji932kss.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string result = \"\";\n    for (long i = 0; i <= n; i++) \n    {\n\
    \        result += \" \" + to!string(i);\n    }\n    return trim(result);\n}\n\
    unittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6mzf0yck.d(15): Error: template instance `to!string` template `to`
    is not defined

    /tmp/tmp6mzf0yck.d(17): Error: undefined identifier `trim`, did you mean function
    `fdim`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6mzf0yck.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string result;\n    foreach (i; 0L .. n + 1L) \n    {\n        if\
    \ (result.length != 0) \n        {\n            result ~= \" \";\n        }\n\
    \        result ~= to!string(i);\n    }\n    return result;\n}\n/*\n Create a\
    \ string of space-delimited numbers starting from 0 upto n inclusive.\n \n */\n\
    string string_sequence_slice(long n) \n{\n    return string_sequence(n)[0L ..\
    \ $];\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz0gt5yjl.d(19): Error: template instance `to!string` template `to`
    is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz0gt5yjl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for (int i = 0; i <= n; i++) \n    {\n   \
    \     s += i + \" \";\n    }\n    return s;\n}\n/*\nGiven a string, return a string\
    \ where for every char in the original, there are two chars.\n    >>> double_char('The')\n\
    \    'TThhee'\n    >>> double_char('AAbb')\n    'AAAAbbbb'\n    >>> double_char('Hi-There')\n\
    \    'HHii--TThheerree'\n*/\nstring double_char(string str) \n{\n    string t\
    \ = \"\";\n    for (int i = 0; i < str.length; i++) \n    {\n        t += str[i]\
    \ + str[i];\n    }\n    return t;\n}\n/*\nReturn the number of times that the\
    \ string \"hi\" appears anywhere in the given string.\n    >>> count_hi('abc hi\
    \ ho')\n    1\n    >>> count_hi('ABChi hi')\n    2\n    >>> count_hi('hihi')\n\
    \    2\n*/\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa1pdox9w.d(15): Error: incompatible types for `(i) + (" ")`: `int`
    and `string`

    /tmp/tmpa1pdox9w.d(33): Error: incompatible types for `(t) += (cast(int)str[cast(ulong)i]
    + cast(int)str[cast(ulong)i])`: `string` and `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa1pdox9w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    if (n == 0L) return \"0\";\n    auto result = new string[n + 1L];\n\
    \    foreach (i; 0L .. n + 1L) \n    {\n        result[i] = to!string(i);\n  \
    \  }\n    return std.algorithm.join(result, \" \");\n}\nunittest\n{\n    alias\
    \ candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8ebvsfxk.d(16): Error: template instance `to!string` template `to`
    is not defined

    /tmp/tmp8ebvsfxk.d(18): Error: undefined identifier `algorithm` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8ebvsfxk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string sequence = new string[n+1];\n    foreach (i, ref s; sequence)\
    \ {\n        s = to!string(i);\n    }\n    return sequence.join(\" \");\n}\nunittest\n\
    {\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\"\
    );\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"\
    0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpncoc312e.d(12): Error: cannot implicitly convert expression `new
    string[](cast(ulong)(n + 1L))` of type `string[]` to `string`

    /tmp/tmpncoc312e.d(14): Error: template instance `to!string` template `to` is
    not defined

    /tmp/tmpncoc312e.d(16): Error: no property `join` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpncoc312e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring result = \"\";\n\tif (n == 0L) \n\t{\n\t\tresult = \"0\";\n\
    \t}\n\telse \n\t{\n\t\tforeach (i; 0L .. n + 1L) \n\t\t{\n\t\t\tresult ~= \" \"\
    \ ~ to!string(i);\n\t\t}\n\t}\n\treturn result;\n}\n/*\n  Return a string containing\
    \ comma-separated numbers starting from 0 upto n inclusive.\n    >>> comma_sequence(0L)\n\
    \    \"0\"\n    >>> comma_sequence(5L)\n    \"0, 1, 2, 3, 4, 5\"\n*/\nstring comma_sequence(long\
    \ n) \n{\n\tstring result = \"\";\n\tif (n == 0L) \n\t{\n\t\tresult = \"0\";\n\
    \t}\n\telse \n\t{\n\t\tforeach (i; 0L .. n + 1L) \n\t\t{\n\t\t\tresult ~= \",\
    \ \" ~ to!string(i);\n\t\t}\n\t}\n\treturn result;\n}\n/*\n  Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive\n  separated by the\
    \ provided string.\n    >>> mixed_sequence(0L, \";\")\n    \"0\"\n    >>> mixed_sequence(5L,\
    \ \", \")\n    \"0, 1, 2, 3, 4, 5\"\n*/\nstring mixed_sequence(long n, string\
    \ separator) \n{\n\tstring result = \"\";\n\tif (n == 0L) \n\t{\n\t\tresult =\
    \ \"0\";\n\t}\n\telse \n\t{\n\t\tforeach (i; 0L .. n + 1L) \n\t\t{\n\t\t\tresult\
    \ ~= separator ~ to!string(i);\n\t\t}\n\t}\n\treturn result;\n}\n/*\n  Return\
    \ a string containing whitespace-delimited numbers starting from 0 upto n inclusive\n\
    \  separated by the provided string.\n    >>> mixed_sequence(0L, \";\")\n    \"\
    0\"\n    >>> mixed_sequence(5L, \", \")\n    \"0, 1, 2, 3, 4, 5\nunittest\n{\n\
    \    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n\
    \    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1\
    \ 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi6my8gtm.d(73): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi6my8gtm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string result = \"\";\n    int i;\n    for (i = 0; i <= n; i++)\n\
    \    {\n        result += format(\"%d \", i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt6ojs8wu.d(16): Error: undefined identifier `format`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt6ojs8wu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string result = \"\";\n    foreach (idx; 0L .. n + 1L)\n    {\n\
    \        result ~= to!string(idx) ~ \" \";\n    }\n    return result.idup;\n}\n\
    unittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp69mv4qbz.d(15): Error: template instance `to!string` template `to`
    is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp69mv4qbz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s;\n    auto casted_n = cast(size_t)n;\n    for (size_t i\
    \ = 0L; i <= casted_n; i++)\n    {\n        s ~= to!string(i);\n        if (i\
    \ < casted_n)\n            s ~= \" \";\n    }\n    return s;\n}\nunittest\n{\n\
    \    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n\
    \    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1\
    \ 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxe1w6w59.d(16): Error: template instance `to!string` template `to`
    is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxe1w6w59.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    auto r = new string[];\n    foreach (i; 0 .. n + 1)\n        r ~=\
    \ to!string(i);\n    return join(r, \" \");\n}\nunittest\n{\n    alias candidate\
    \ = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv0u9hbar.d(12): Error: new can only create structs, dynamic arrays
    or class objects, not `string[]`''s

    /tmp/tmpv0u9hbar.d(14): Error: template instance `to!string` template `to` is
    not defined

    /tmp/tmpv0u9hbar.d(15): Error: undefined identifier `join`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv0u9hbar.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    if (n < 0L)\n        return \"\";\n    return string_sequence(n-1L)\
    \ ~ \" \" ~ to!string(n);\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprfgjzd5a.d(14): Error: template instance `to!string` template `to`
    is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprfgjzd5a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string result;\n    auto s = result ~ n;\n    for (int i = 0; i\
    \ < n; i++)\n        s ~ i;\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo_bzj5bz.d(13): Error: incompatible types for `(result) ~ (n)`:
    `string` and `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo_bzj5bz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string result;\n    result.clear();\n    foreach (i; 0L .. n + 1L)\n\
    \    {\n        result ~= $i;\n        if (i != n) result ~= \" \";\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n\
    \    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkmhuzt3y.d(16): Error: `$` is valid only inside [] of index or
    slice

    /tmp/tmpkmhuzt3y.d(16): Error: found `i` when expecting `;` following statement

    /tmp/tmpkmhuzt3y.d(16): Deprecation: use `{ }` for an empty statement, not `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkmhuzt3y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string result = \"\";\n    for (long i = 0; i <= n; i++) \n    {\n\
    \        result += to!string(i);\n        if (i < n) \n        {\n           \
    \ result += \" \";\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n\
    \    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1\
    \ 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpceyoq0kn.d(15): Error: template instance `to!string` template `to`
    is not defined

    /tmp/tmpceyoq0kn.d(18): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpceyoq0kn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    foreach (i; 0L .. n+1L) \n    {\n\ts ~= i.to!string\
    \ ~ \" \";\n    }\n    return s;\n}\n/*\n Return a string containing space-delimited\
    \ numbers starting from n upto 1 inclusive.\n    >>> string_sequence_reverse(0L)\n\
    \    \"0\"\n    >>> string_sequence_reverse(5L)\n    \"5 4 3 2 1 0\"\n*/\nstring\
    \ string_sequence_reverse(long n) \n{\n    string s = \"\";\n    foreach (i; n.countDown)\
    \ \n    {\n\ts ~= i.to!string ~ \" \";\n    }\n    return s;\n}\n/*\n Return a\
    \ string containing space-delimited numbers starting from 0 upto n inclusive\n\
    \ in descending order.\n    >>> string_sequence_descending(0L)\n    \"0\"\n  \
    \  >>> string_sequence_descending(5L)\n    \"5 4 3 2 1 0\"\n    \n*/\nstring string_sequence_descending(long\
    \ n) \n{\n    string s = \"\";\n    foreach (i; n.countDown) \n    {\n\ts ~= i.to!string\
    \ ~ \" \";\n    }\n    return s;\n}\n/*\n Return a string containing space-delimited\
    \ numbers starting from n upto 1 inclusive\n in descending order.\n    >>> string_sequence_descending_reverse(0L)\n\
    \    \"0\"\n    >>> string_sequence_descending_reverse(5L)\n    \"5 4 3 2 1 0\"\
    \n    \n*/\nstring string_sequence_descending_reverse(long n) \n{\n    string\
    \ s = \"\";\n    foreach (i; n.countDown) \n    {\n\ts ~= i.to!string ~ \" \"\
    ;\n    }\n    return s;\n}\n/*\n Return a string containing space-delimited numbers\
    \ with absolute value starting from 0 upto\n n inclusive.\n    >>> string_sequence_absolute(0L)\n\
    \    \"0\"\n    >>> string_sequence_absolute(5L)\n    \"0 1 2 3 4 5\"\n    \n\n\
    unittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyt7q_gco.d(71): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyt7q_gco.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    static import std.format;\n    return format(\"%.0s%(%d%)\", \"\
    \ \", iota(n + 1L));\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3x078g5a.d(13): Error: undefined identifier `format`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3x078g5a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring result = \"\";\n\tlong i = 0;\n\tfor (; i < n; ++i)\n\t{\n\t\
    \tresult += to!string(i) + \" \";\n\t}\n\tresult += to!string(i);\n\treturn result;\n\
    }\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0c9eya1f.d(16): Error: template instance `to!string` template `to`
    is not defined

    /tmp/tmp0c9eya1f.d(18): Error: template instance `to!string` template `to` is
    not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0c9eya1f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string result;\n    foreach (i; 0L .. n+1L) \n    {\n        result\
    \ ~= i.to!string ~ \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4azzlu1v.d(15): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4azzlu1v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i <= n; i++) \n\t{\n\t\ts +=\
    \ to!string(i);\n\t\tif (i < n)\n\t\t\ts += \" \";\n\t}\n\treturn s;\n}\n/*\n\
    \ Return a sequence of strings containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0L)\n    [\"0\"]\n    >>> string_sequence(5L)\n\
    \    [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\"]\n    \n*/\nstring[] string_sequence(long\
    \ n)\n{\n\tstring[] s = new string[n + 1];\n\tfor (long i = 0; i <= n; i++) \n\
    \t{\n\t\ts[i] = to!string(i);\n\t}\n\treturn s;\n}\n/*\n Return a sequence of\
    \ strings containing space-delimited numbers starting from from upto to inclusive.\n\
    \    >>> string_sequence(0L, 5L)\n    [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\"\
    ]\n    >>> string_sequence(5L, 0L)\n    [\"5\", \"4\", \"3\", \"2\", \"1\", \"\
    0\"]\n    \n*/\nstring[] string_sequence(long from, long to)\n{\n\tif (from >\
    \ to) \n\t{\n\t\treturn [toString(to + n) : n <- [0..abs(from - to)]];\n\t}\n\t\
    return [toString(from + n) : n <- [0..abs(from - to)]];\n}\n/*\n Return a sequence\
    \ of integers containing numbers starting from 0 upto n inclusive.\n    >>> int_sequence(0L)\n\
    \    [0]\n    >>> int_sequence(5L)\n    [0, 1, 2, 3, 4, 5]\n    \n*/\nlong[] int_sequence(long\
    \ n)\n{\n\tlong[] s = new long[n + 1];\n\tfor (long i = 0; i <= n; i++) \n\t{\n\
    \t\ts[i] = i;\n\t}\n\treturn s;\n}\n/*\n Return a\nunittest\n{\n    alias candidate\
    \ = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm1_qbm3n.d(50): Error: found `..` when expecting `,`

    /tmp/tmpm1_qbm3n.d(52): Error: found `..` when expecting `,`

    /tmp/tmpm1_qbm3n.d(71): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm1_qbm3n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i <= n; i++) \n\t{\n\t\ts +=\
    \ (i <= n-1) ? to!string(i) + \" \" : to!string(i);\n\t}\n\treturn s;\n}\n/*\n\
    \  Given a string sequence like '0 1 2 3 4 5', return the sum of the first n numbers.\n\
    \    >>> sum_of_string_sequence(\"0 1 3 3 6 10\", 3L)\n    6\n    >>> sum_of_string_sequence(\"\
    0 1 3 3 6 10\", 6L)\n    21\n    >>> sum_of_string_sequence(\"0 1 3 3 6 10\",\
    \ 10L)\n    55\n*/\nlong sum_of_string_sequence(string s, long n) \n{\n\tlong\
    \ sos = 0;\n\tforeach (i; 0 .. n) \n\t{\n\t\tlong start = 0;\n\t\tlong end = s.find(\"\
    \ \", start);\n\t\tsos += to!long(s[start .. end]);\n\t\tstart = end + 1;\n\t\
    }\n\treturn sos;\n}\n/*\n  Return n factorial.\n    >>> factorial(1L)\n    1\n\
    \    >>> factorial(3L)\n    6\n    >>> factorial(10L)\n    3628800\n*/\nlong factorial(long\
    \ n) \n{\n\tlong f = 1;\n\tforeach (i; 1 .. n+1) \n\t{\n\t\tf *= i;\n\t}\n\treturn\
    \ f;\n}\n/*\n  Return nth Fibonacci number.\n    >>> fibonacci(0L)\n    0\n  \
    \  >>> fibonacci(1L)\n    1\n    >>> fibonacci(2L)\n    1\n    >>> fibonacci(3L)\n\
    \    2\n    >>> fibonacci(4L)\n    3\n    >>> fibonacci(5L)\n    5\n    >>> fibonacci(6L)\n\
    \    8\n    >>> fibonacci(7L)\n    13\n*/\nlong fibonacci(long n) \n{\n\tif (n\
    \ == 0) \n\t{\n\t\nunittest\n{\n    alias candidate = string_sequence;\n\n   \
    \ assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n\
    \    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxo60xmkl.d(82): Error: found `unittest` instead of statement

    /tmp/tmpxo60xmkl.d(90): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxo60xmkl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string result = \"\";\n    foreach (immutable i; 0..=n)\n    {\n\
    \        result ~= i;\n        if (i < n)\n            result ~= \" \";\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n\
    \    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8y9o316q.d(13): Error: expression expected, not `=`

    /tmp/tmp8y9o316q.d(13): Error: found `n` when expecting `)`

    /tmp/tmp8y9o316q.d(13): Error: found `)` instead of statement

    /tmp/tmp8y9o316q.d(19): Error: declaration expected, not `return`

    /tmp/tmp8y9o316q.d(20): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8y9o316q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string ret = \"\";\n    for (long i = 0; i <= n; i++) \n    {\n\
    \        ret += i;\n        if (i != n)\n            ret += \" \";\n    }\n  \
    \  return ret;\n}\n/*\n Return the string containing numbers between m and n inclusive\
    \ and\n space-delimited.\n    >>> string_sequence(2L, 5L)\n    \"2 3 4 5\"\n \
    \   >>> string_sequence(3L, 3L)\n    \"3\"\n    >>> string_sequence(3L, 2L)\n\
    \    \"\"\n    \n*/\nstring string_sequence(long m, long n) \n{\n    if (m > n)\n\
    \        return \"\";\n    string ret = \"\";\n    for (long i = m; i <= n; i++)\
    \ \n    {\n        ret += i;\n        if (i != n)\n            ret += \" \";\n\
    \    }\n    return ret;\n}\n/*\n Return the string representation of this number,\
    \ base is a\n number base from 2 to 36.\n    >>> repr_int(0x10L, 16L)\n    \"\
    16\"\n    >>> repr_int(0xFFFFL, 16L)\n    \"ffff\"\n    >>> repr_int(0xFFFFFFFFL,\
    \ 16L)\n    \"ffffffff\"\n    >>> repr_int(0x7FFFFFFFL, 16L)\n    \"7fffffff\"\
    \n    >>> repr_int(0x7FFFFFFFL, 8L)\n    \"17777777777\"\n    >>> repr_int(0x7FFFFFFFL,\
    \ 2L)\n    \"1111111111111111111111111111111\"\n    >>> repr_int(127L, 10L)\n\
    \    \"127\"\n    >>> repr_int(127L, 2L)\n    \"1111111\"\n    >>> repr_int(0L,\
    \ 10L)\n    \"0\"\n    >>> repr_int(0L, 2L)\n    \"0\"\n    \n*/\nstring repr_int(long\
    \ n, long base) \n{\n    string result = \"\";\n    string digit = \"0123456789abcdefghijklmnopqrstuvwxy\n\
    unittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc00cu892.d(78): Error: semicolon expected, not `0`

    /tmp/tmpc00cu892.d(78): Error: found `");\x0a    assert(candidate(3L) == "` when
    expecting `;` following statement

    /tmp/tmpc00cu892.d(79): Error: found `1` when expecting `;` following statement

    /tmp/tmpc00cu892.d(79): Error: found `3` when expecting `;` following statement

    /tmp/tmpc00cu892.d(80): Error: found `0` when expecting `;` following statement

    /tmp/tmpc00cu892.d(80): Error: found `2` when expecting `;` following statement

    /tmp/tmpc00cu892.d(80): Error: found `4` when expecting `;` following statement

    /tmp/tmpc00cu892.d(80): Error: found `6` when expecting `;` following statement

    /tmp/tmpc00cu892.d(80): Error: found `8` when expecting `;` following statement

    /tmp/tmpc00cu892.d(80): Error: found `10` when expecting `;` following statement

    /tmp/tmpc00cu892.d(80): Error: unterminated string constant starting at /tmp/tmpc00cu892.d(80)

    /tmp/tmpc00cu892.d(82): Error: found `End of File` when expecting `;` following
    statement

    /tmp/tmpc00cu892.d(82): '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    return join(map!(to!string)(iota(0L, n + 1L))());\n}\nunittest\n\
    {\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\"\
    );\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"\
    0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvt046d81.d(12): Error: undefined identifier `join`, did you mean
    function `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvt046d81.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string ret = \"\";\n    for (long i = 0; i <= n; i++) \n    {\n\
    \        ret += to!string(i);\n        if (i != n) ret += \" \";\n    }\n    return\
    \ ret;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvqz6engu.d(15): Error: template instance `to!string` template `to`
    is not defined

    /tmp/tmpvqz6engu.d(16): Error: slice `ret` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvqz6engu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string result = \"\";\n    foreach (long i; 0..n + 1)\n        result\
    \ ~= \" \" ~ to!string(i);\n    return result[1..$];\n}\n/*\nReturn a string containing\
    \ comma-delimited numbers starting from n downto 0 inclusive.\n    >>> string_sequence_backwards(0L)\n\
    \    \"0\"\n    >>> string_sequence_backwards(5L)\n    \"5 4 3 2 1 0\"\n    \n\
    */\nstring string_sequence_backwards(long n) \n{\n    string result = \"\";\n\
    \    foreach (long i; n..-1)\n        result ~= \" \" ~ to!string(i);\n    return\
    \ result[1..$];\n}\n/*\nReturn a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive,\nand then comma-delimited numbers starting from n downto\
    \ 0 inclusive.\n    >>> string_sequence_and_backwards(0L)\n    \"0\"\n    >>>\
    \ string_sequence_and_backwards(5L)\n    \"0 1 2 3 4 5 5 4 3 2 1 0\"\n    \n*/\n\
    string string_sequence_and_backwards(long n) \n{\n    return string_sequence(n)\
    \ ~ \" \" ~ string_sequence_backwards(n);\n}\n/*\nReturn a string containing n\
    \ copies of the character ch.\n    >>> string_repeat('x',0L)\n    \"\"\n    >>>\
    \ string_repeat('x',3L)\n    \"xxx\"\n    \n*/\nstring string_repeat(string ch,\
    \ long n) \n{\n    return ch.replicate(n);\n}\n/*\nReturn a string containing\
    \ n copies of the string item.\n    >>> string_replicate(\"abc\",0L)\n    \"\"\
    \n    >>> string_replicate(\"abc\",3L)\n    \"abcabcabc\"\n    \n*/\nstring string_replicate(string\
    \ item, long n) \n{\n    return item.replicate(n);\n}\n/*\nReturn a string containing\
    \ the numbers 1 upto n inclusive.\n    >>> string_nums(0L)\n    \"\"\n    >>>\
    \ string_nums(3L)\n    \"123\"\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3xbddxrd.d(69): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3xbddxrd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string result = \"\";\n    foreach (long i; 0..n+1) \n    {\n  \
    \      result ~= to!string(i) ~ \" \";\n    }\n    return result;\n}\n/*\n Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    \    >>> string_sequence_iterator(0L)\n    \"0\"\n    >>> string_sequence_iterator(5L)\n\
    \    \"0 1 2 3 4 5\"\n*/\nstring string_sequence_iterator(long n) \n{\n    string\
    \ result = \"\";\n    for (long i = 0; i <= n; i++) \n    {\n        result ~=\
    \ to!string(i) ~ \" \";\n    }\n    return result;\n}\n/*\n Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence_while(0L)\n\
    \    \"0\"\n    >>> string_sequence_while(5L)\n    \"0 1 2 3 4 5\"\n*/\nstring\
    \ string_sequence_while(long n) \n{\n    string result = \"\";\n    while (n >=\
    \ 0) \n    {\n        result ~= to!string(n) ~ \" \";\n        n--;\n    }\n \
    \   return result;\n}\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence_do_while(0L)\n  \
    \  \"0\"\n    >>> string_sequence_do_while(5L)\n    \"0 1 2 3 4 5\"\n*/\nstring\
    \ string_sequence_do_while(long n) \n{\n    string result = \"\";\n    do\n  \
    \  {\n        result ~= to!string(n) ~ \" \";\n        n--;\n    } while (n >=\
    \ 0);\n    return result;\n}\n/*\n Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\n    >>> string_sequence_foreach(0L)\n\
    \    \"0\"\n    >>> string_sequence_foreach(5L)\n    \"0 1 2 3 4 5\"\n*/\nstring\
    \ string_sequence_foreach(long n) \nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5y3bm4oe.d(77): Error: semicolon expected following function declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5y3bm4oe.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string result = \"\";\n    foreach (i; 0L .. n + 1L)\n    {\n  \
    \      result ~= \" \" ~ to!string(i);\n    }\n    return result[1 .. $];\n}\n\
    \ \n/*\n Convert a number to a Roman numeral as string.\n    >>> to_roman(1L)\n\
    \    \"I\"\n    >>> to_roman(10L)\n    \"X\"\n    >>> to_roman(1000L)\n    \"\
    M\"\n    >>> to_roman(499L)\n    \"CDXCIX\"\n    >>> to_roman(3999L)\n    \"MMMCMXCIX\"\
    \n*/\nstring to_roman(long n)\n{\n    static const char[] ones = \" IVXLCDM\"\
    ,\n                       fives = \"VLD\";\n    static const int[] values = [\
    \ 1, 5, 10, 50, 100, 500, 1000 ];\n    string result = \"\";\n    long i = 6;\n\
    \    while (n > 0)\n    {\n        long digit = n % 10;\n        n /= 10;\n  \
    \      if (digit == 9)\n        {\n            result = ones[i] ~ ones[i+2] ~\
    \ result;\n        }\n        else if (digit >= 5)\n        {\n            digit\
    \ -= 5;\n            result = fives[i/2] ~ result;\n        }\n        else if\
    \ (digit == 4)\n        {\n            result = ones[i] ~ fives[i/2] ~ result;\n\
    \        }\n        else\n        {\n            result = repeat(ones[i], digit)\
    \ ~ result;\n        }\n        i -= 2;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\"\
    );\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"\
    0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnf0qw03j.d(15): Error: template instance `to!string` template `to`
    is not defined

    /tmp/tmpnf0qw03j.d(46): Error: incompatible types for `(cast(int)ones[cast(ulong)i])
    ~ (cast(int)ones[cast(ulong)(i + 2L)])`: both operands are of type `int`

    /tmp/tmpnf0qw03j.d(55): Error: incompatible types for `(cast(int)ones[cast(ulong)i])
    ~ (cast(int)fives[cast(ulong)(i / 2L)])`: both operands are of type `int`

    /tmp/tmpnf0qw03j.d(59): Error: undefined identifier `repeat`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnf0qw03j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string result = \"\";\n    for (long i = 0; i <= n; i++) \n    {\n\
    \        result += to!string(i);\n        if (i < n)\n            result += \"\
    \ \";\n    }\n    return result;\n}\n/*\n Return a one-line string containing\
    \ a CSV list of numbers starting from 0 upto n inclusive.\n    >>> string_sequence_csv(0L)\n\
    \    \"0\"\n    >>> string_sequence_csv(5L)\n    \"0, 1, 2, 3, 4, 5\"\n    \n\
    */\nstring string_sequence_csv(long n) \n{\n    string result = \"\";\n    for\
    \ (long i = 0; i <= n; i++) \n    {\n        result += to!string(i);\n       \
    \ if (i < n)\n            result += \", \";\n    }\n    return result;\n}\n/*\n\
    \ Return a one-line string containing a CSV list of numbers starting from 0 upto\
    \ n inclusive.\n    >>> string_sequence_csv_w(0L)\n    \"0\"\n    >>> string_sequence_csv_w(5L)\n\
    \    \"0, 1, 2, 3, 4, 5\"\n    \n*/\nstring string_sequence_csv_w(long n) \n{\n\
    \    return string_sequence_csv(n);\n}\n/*\n Return a one-line string containing\
    \ a CSV list of numbers starting from 0 upto n inclusive.\n    >>> string_sequence_csv_w(0L)\n\
    \    \"0\"\n    >>> string_sequence_csv_w(5L)\n    \"0, 1, 2, 3, 4, 5\"\n    \n\
    */\nstring string_sequence_csv_ww(long n) \n{\n    return string_sequence_csv(n);\n\
    }\n/*\n Return a one-line string containing a CSV list of numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence_csv_w(0L)\n    \"0\"\n    >>> string_sequence_csv_w(5L)\n\
    \    \"0, 1, 2, 3, 4, 5\"\n    \n*/\nstring string_sequence_csv_www(long n) \n\
    {\n    return string\nunittest\n{\n    alias candidate = string_sequence;\n\n\
    \    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa5350gny.d(75): Error: found `unittest` when expecting `;` following
    `return` statement

    /tmp/tmpa5350gny.d(83): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa5350gny.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s;\n    foreach (i; 0L .. n+1L)\n    {\n        s ~= i;\n\
    \        if (i!=n)\n            s ~= \" \";\n    }\n    return s;\n}\n/*\n Choose\
    \ the number of nearest neighbors to use for predicting\n    >>> knn(4L)\n   \
    \ 4\n*/\nlong knn(long n_samples) \n{\n    return max(3L, n_samples - 1L);\n}\n\
    unittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1jj8h4zr.d(15): Error: cannot append type `long` to type `string`

    /tmp/tmp1jj8h4zr.d(28): Error: undefined identifier `max`, did you mean function
    `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1jj8h4zr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    foreach (i; 0..n + 1)\n    {\n        s ~=\
    \ i.to!string;\n        s ~= \" \";\n    }\n    return s.idup;\n}\n/*\n List of\
    \ lists is a list of lists to process, which should be of the form:\n \n [\n \
    \  [\"AAAA\", \"BBBB\", \"CCCC\"],\n   [\"DDDD\", \"EEEE\", \"FFFF\"],\n   [\"\
    GGGG\", \"HHHH\", \"IIII\"]\n ]\n \n We want to combine each list into a single\
    \ string and return the resulting list:\n \n [\n   \"AAAABBBBCCCC\",\n   \"DDDDEEEEFFFF\"\
    ,\n   \"GGGGHHHHIIII\"\n ]\n \n*/\nstring[] list_of_lists(string[][] list_of_lists)\
    \ \n{\n    string[] result;\n    foreach (list; list_of_lists)\n    {\n      \
    \  result ~= join(list);\n    }\n    return result;\n}\n/*\n Given a string of\
    \ comma separated numbers, return a string containing each number in the format:\n\
    \ \n    \"AA\" -> \"A, A\"\n    \"ABC\" -> \"A, B, C\"\n    \"AABCC\" -> \"A,\
    \ A, B, C, C\"\n    \n*/\nstring string_to_comma_separated_string(string s) \n\
    {\n    string result = \"\";\n    foreach (c; s)\n    {\n        result ~= c.to!string;\n\
    \        result ~= \", \";\n    }\n    return result.idup;\n}\n/*\n Given a string\
    \ of comma separated numbers, return a string containing a range containing numbers\
    \ \n with the following format:\n \n \"1,2,3,4,5,6,7,8,9,10,11,12,14,15,16,17,18,19,20,21,22,23,24,25,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54\n\
    unittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4dyjj3h5.d(65): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4dyjj3h5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    if (n == 0L)\n    {\n        return \"0\";\n    }\n    else \n \
    \   {\n        string result = \"\";\n        for (long i = 0L; i <= n; i++)\n\
    \        {\n            result = result ~ to!string(i) ~ \" \";\n        }\n \
    \       return result;\n    }\n}\n/*\n Count the number of multiples of `base`\
    \ in the range `[start, stop)`.\n \n    >>> count_multiples(2L, 4L, 6L)\n    2\n\
    \    >>> count_multiples(3L, 6L, 12L)\n    4\n    \n*/\nlong count_multiples(long\
    \ base, long start, long stop) \n{\n    long count = 0L;\n    for (long i = start;\
    \ i < stop; i++)\n    {\n        if (i % base == 0L)\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n/*\nunittest\n{\n    alias candidate\
    \ = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp356b4lbn.d(47): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp356b4lbn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    if (n == 0L)\n        return \"0\";\n    string result = \"\";\n\
    \    foreach (i; 0 .. n + 1)\n        result ~= to!string(i) ~ \" \";\n    return\
    \ result[0 .. $ - 1];\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzpuljjow.d(16): Error: template instance `to!string` template `to`
    is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzpuljjow.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n    if (n >= 0L) {\n        string result = new string;\n        for (long\
    \ i = 0L; i <= n; i++)\n            result ~= i.to!string;\n        return result;\n\
    \    } else\n        throw new Exception(\"n must be non-negative\");\nunittest\n\
    {\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\"\
    );\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"\
    0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw7cj4kan.d(11): Error: cannot use function constraints for non-template
    functions. Use `static if` instead

    /tmp/tmpw7cj4kan.d(11): Error: declaration expected, not `if`

    /tmp/tmpw7cj4kan.d(13): Error: declaration expected, not `for`

    /tmp/tmpw7cj4kan.d(13): Error: no identifier for declarator `i`

    /tmp/tmpw7cj4kan.d(13): Error: declaration expected, not `<=`

    /tmp/tmpw7cj4kan.d(13): Error: no identifier for declarator `i`

    /tmp/tmpw7cj4kan.d(13): Error: declaration expected, not `++`

    /tmp/tmpw7cj4kan.d(15): Error: declaration expected, not `return`

    /tmp/tmpw7cj4kan.d(16): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw7cj4kan.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    return n < 1 ? \"0\" : format(\"%s %s\", string_sequence(n - 1),\
    \ n);\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp4hbx288.d(12): Error: undefined identifier `format`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp4hbx288.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string result;\n    auto e = n + 1;\n    for (long i = 0; i < e;\
    \ i++) \n    {\n        result ~= to!string(i);\n        if (i < e - 1) \n   \
    \     {\n            result ~= \" \";\n        }\n    }\n    return result;\n\
    }\n/*\n Return a string containing items from the iterable object using joiner\
    \ as the delimiter.\n    >>> string_from_iterable([\"1\", \"2\", \"3\"], \", \"\
    )\n    \"1, 2, 3\"\n    \n*/\nstring string_from_iterable(R)(R range) \n{\n  \
    \  return string_from_iterable(range, \"\");\n}\nstring string_from_iterable(R,\
    \ JoinType)(R range, JoinType joiner) \n{\n    string result;\n    auto e = range.length;\n\
    \    for (size_t i = 0; i < e; i++) \n    {\n        result ~= range[i];\n   \
    \     if (i < e - 1) \n        {\n            result ~= joiner;\n        }\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps_25og5u.d(16): Error: template instance `to!string` template `to`
    is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps_25og5u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring ret = \"\";\n\tfor (int i = 0; i <= n; i++) \n\t{\n\t\tret\
    \ += format(\"%d \", i);\n\t}\n\treturn ret;\n}\nunittest\n{\n    alias candidate\
    \ = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2_z8wr9y.d(15): Error: undefined identifier `format`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2_z8wr9y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string result = \"\";\n    foreach (i; 0L .. n + 1L)\n    {\n  \
    \      result ~= \" \" ~ to!string(i);\n    }\n    return result[1 .. $];\n}\n\
    /*\n Return a string containing a comma-delimited numbers starting from 0 upto\
    \ n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    \    \"0, 1, 2, 3, 4, 5\"\n*/\nstring string_sequence2(long n) \n{\n    string\
    \ result = \"\";\n    foreach (i; 0L .. n + 1L)\n    {\n        result ~= \" \"\
    \ ~ to!string(i);\n    }\n    return result[1 .. $];\n}\n/*\nReturn a string containing\
    \ an ordered sequence of three-digit numbers with commas separating them.\n  \
    \  >>> ordered_sequence(3L)\n    \"000, 001, 002, 003\"\n*/\nstring ordered_sequence(long\
    \ n) \n{\n    string result = \"\";\n    foreach (i; 0L .. n + 1L)\n    {\n  \
    \      auto v = format(\"%03d\", i);\n        result ~= v ~ \", \";\n    }\n \
    \   return result[0 .. $ - 2];\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp52bqbbzu.d(15): Error: template instance `to!string` template `to`
    is not defined

    /tmp/tmp52bqbbzu.d(31): Error: template instance `to!string` template `to` is
    not defined

    /tmp/tmp52bqbbzu.d(45): Error: undefined identifier `format`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp52bqbbzu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string result = \"\";\n    foreach (int i; 0 .. n+1) \n    {\n \
    \       result ~= i;\n        if (i != n) \n        {\n            result ~= \"\
    \ \";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpexh438u8.d(13): Error: cannot implicitly convert expression `n
    + 1L` of type `long` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpexh438u8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
