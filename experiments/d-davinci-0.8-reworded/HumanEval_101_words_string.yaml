name: HumanEval_101_words_string
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n\n    You will be given a string\
  \ of words separated by commas or spaces. Your task is\n    to split the string\
  \ into words and return an array of the words.\n    \n    For example:\n    >>>\
  \ words_string(\"Hi, my name is John\")\n    [\"Hi\", \"my\", \"name\", \"is\",\
  \ \"John\"]\n    >>> words_string(\"One, two, three, four, five, six\")\n    [\"\
  One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \n*/\nstring[] words_string(string\
  \ s) \n"
tests: "unittest\n{\n    alias candidate = words_string;\n\n    assert(candidate(\"\
  Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]);\n    assert(candidate(\"\
  One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"\
  five\", \"six\"]);\n    assert(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"\
  name\"]);\n    assert(candidate(\"One,, two, three, four, five, six,\") == [\"One\"\
  , \"two\", \"three\", \"four\", \"five\", \"six\"]);\n    assert(candidate(\"\"\
  ) == []);\n    assert(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"\
  ]);\n}\nvoid main(){}"
completions: ["{\n    return split(s, \", \");\n}", "{\n    return split(s, \" \"\
    );\n}", "{\n    import std.algorithm.comparison : equal;\n    import std.array\
    \ : array;\n    import std.conv : to;\n    import std.conv : toString;\n    import\
    \ std.functional : map;\n    import std.range : chain, filter, retry, takeWhile;\n\
    \    import std.typecons : null;\n    import std.uni : isAlpha;\n    return s.filter!(ch\
    \ => ch.isAlpha || ch == ' ').split(\" \").filter!(s => s != \"\").map!(s => s.to!string).array;\n\
    }\n/*\n    You will be given an array with objects. The objects should have a\
    \ property\n    named 'name' and value. Your task is to return an array with the\
    \ names of the\n    objects.\n    \n    For example:\n    >>> object_names([{name:\"\
    John\", value:42}, {name:\"Jack\", value:13}, {name:\"Jill\", value:5}])\n   \
    \ [\"John\", \"Jack\", \"Jill\"]\n    >>> object_names([{name:\"Jeoffrey\", value:1},\
    \ {name:\"Tommen\", value:2}, {name:\"Myrcella\", value:3}])\n    [\"Jeoffrey\"\
    , \"Tommen\", \"Myrcella\"]\n*/\nstring[] object_names(object[] arr) \n{\n   \
    \ import std.algorithm.comparison : equal;\n    import std.array : array;\n  \
    \  import std.conv : to;\n    import std.conv : toString;\n    import std.functional\
    \ : map;\n    import std.range : chain, filter, retry, takeWhile;\n    import\
    \ std.typecons : null;\n    import std.uni : isAlpha;\n    return arr.map!(o =>\
    \ o.name).array;\n}\n/*\n    You will be given a string of words separated by\
    \ commas or spaces. Your task is\n    to split the string into words and return\
    \ the number of words.\n    \n    For example:\n    >>> words_count(\"Hi, my name\
    \ is John\")\n    5\n    >>> words_count(\"One, two, three, four, five, six\"\
    )\n    6\n*/\nuint words_count(string s", "{\n    import std.array : array;\n\
    \    return split(s, \", \").array;\n}", "{\n    string[] tmp = s.split(\",\"\
    );\n    string[] ret;\n    foreach(a; tmp)\n    {\n        foreach(b; a.split)\n\
    \        {\n            ret ~= b;\n        }\n    }\n    return ret;\n}", "{\n\
    \    return split(s);\n}", "{\n    return split(s, \", \");\n}", "{\n    auto\
    \ result = new string[];\n    foreach(i, v; split(s))\n    {\n        result ~=\
    \ v;\n    }\n    return result;\n}\n/*", "{\n    string[] res;\n    foreach(e;\
    \ s.split())\n    {\n        res ~= e;\n    }\n    return res;\n}", "{\n    string[]\
    \ a;\n    string t;\n    t = s;\n    a = split(t);\n    return a;\n}\n/*", "{\n\
    \    auto words = split(s);\n    return words;\n}", "{\n    return split(s, \"\
    \ \");\n}\n/*", "{\n    return s.split(\"[, ]\");\n}\n \n \n/*", "{\n    return\
    \ split(s);\n}", "{\n    return split(s);\n}", "{\n    auto words = s.split();\n\
    \    return words;\n}", "{\n    return split(s,\", \");\n}\n/*", "{\n    return\
    \ split(s);\n}", "{\n    // Split on space or comma, then remove spaces and commas.\n\
    \    return split(s, \" ,;\").array.filter!(x => x.length > 0);\n}", "{\n    return\
    \ s.split;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
