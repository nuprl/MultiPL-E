name: HumanEval_60_sum_to_n
language: d
results:
- program: "import std.math;\n/*\nsum_to_n is a function that sums numbers from 1\
    \ to n.\n    >>> sum_to_n(30L)\n    465L\n    >>> sum_to_n(100L)\n    5050L\n\
    \    >>> sum_to_n(5L)\n    15L\n    >>> sum_to_n(10L)\n    55L\n    >>> sum_to_n(1L)\n\
    \    1L\n    \n*/\nlong sum_to_n(long n) \n{\n    long sum = 0;\n    if (n<=0)\n\
    \        return sum;\n    else\n        return n + sum_to_n(n-1);\n}\nunittest\n\
    {\n    alias candidate = sum_to_n;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(6L)\
    \ == 21L);\n    assert(candidate(11L) == 66L);\n    assert(candidate(30L) == 465L);\n\
    \    assert(candidate(100L) == 5050L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nsum_to_n is a function that sums numbers from 1\
    \ to n.\n    >>> sum_to_n(30L)\n    465L\n    >>> sum_to_n(100L)\n    5050L\n\
    \    >>> sum_to_n(5L)\n    15L\n    >>> sum_to_n(10L)\n    55L\n    >>> sum_to_n(1L)\n\
    \    1L\n    \n*/\nlong sum_to_n(long n) \n{\n\tlong sum = 0;\n\tfor (int i =\
    \ 1; i <= n; i++)\n\t{\n\t\tsum += i;\n\t}\n\treturn sum;\n}\nunittest\n{\n  \
    \  alias candidate = sum_to_n;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(6L)\
    \ == 21L);\n    assert(candidate(11L) == 66L);\n    assert(candidate(30L) == 465L);\n\
    \    assert(candidate(100L) == 5050L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nsum_to_n is a function that sums numbers from 1\
    \ to n.\n    >>> sum_to_n(30L)\n    465L\n    >>> sum_to_n(100L)\n    5050L\n\
    \    >>> sum_to_n(5L)\n    15L\n    >>> sum_to_n(10L)\n    55L\n    >>> sum_to_n(1L)\n\
    \    1L\n    \n*/\nlong sum_to_n(long n) \n{\n    return (n * (n + 1L)) / 2L;\n\
    }\n/*\nsum_of_squares is a function that sums the squares of numbers from 1 to\
    \ n.\n    >>> sum_of_squares(5L)\n    55L\n    >>> sum_of_squares(10L)\n    385L\n\
    \    >>> sum_of_squares(1L)\n    1L\n    >>> sum_of_squares(30L)\n    945L\n \
    \   >>> sum_of_squares(100L)\n    338350L\n    \n*/\nlong sum_of_squares(long\
    \ n) \n{\n    return (n * (n + 1L) * (2L * n + 1L)) / 6L;\n}\n/*\ndiff_sum_of_squares_and_sum_to_n\
    \ is a function that \nreturns the difference between the sum of the squares \n\
    of the first n natural numbers and the square of the sum.\n    >>> diff_sum_of_squares_and_sum_to_n(10L)\n\
    \    2640L\n    >>> diff_sum_of_squares_and_sum_to_n(1L)\n    0L\n    >>> diff_sum_of_squares_and_sum_to_n(30L)\n\
    \    -420L\n    >>> diff_sum_of_squares_and_sum_to_n(100L)\n    -25164150L\n \
    \   \n*/\nlong diff_sum_of_squares_and_sum_to_n(long n) \n{\n    return ((n *\
    \ (n + 1L)) / 2L) * ((n * (n + 1L)) / 2L) - ((n * (n + 1L) * (2L * n + 1L)) /\
    \ 6L);\n}\n/*\nsum_of_squares_of_odd_numbers is a function that returns the sum\
    \ of squares of odd numbers from 1 to n.\n    >>> sum_of_squares_of_odd_numbers(1L)\n\
    \    1L\n    >>> sum_of_squares_of_odd_numbers(10L)\n    385L\n    >>> sum_\n\
    unittest\n{\n    alias candidate = sum_to_n;\n\n    assert(candidate(1L) == 1L);\n\
    \    assert(candidate(6L) == 21L);\n    assert(candidate(11L) == 66L);\n    assert(candidate(30L)\
    \ == 465L);\n    assert(candidate(100L) == 5050L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6aj6ltye.d(56): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6aj6ltye.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nsum_to_n is a function that sums numbers from 1\
    \ to n.\n    >>> sum_to_n(30L)\n    465L\n    >>> sum_to_n(100L)\n    5050L\n\
    \    >>> sum_to_n(5L)\n    15L\n    >>> sum_to_n(10L)\n    55L\n    >>> sum_to_n(1L)\n\
    \    1L\n    \n*/\nlong sum_to_n(long n) \n{\n    long sum = 0;\n    long i =\
    \ 1;\n    for (i = 1; i <= n; i++)\n    {\n        sum += i;\n    }\n    return\
    \ sum;\n}\n/*\n    >>> sum_digits(456L)\n    15L\n    >>> sum_digits(1234567890L)\n\
    \    45L\n    >>> sum_digits(0L)\n    0L\n    >>> sum_digits(10L)\n    1L\n  \
    \  >>> sum_digits(123456L)\n    21L\n*/\nlong sum_digits(long n) \n{\n    long\
    \ digit_sum = 0;\n    long digit;\n    while (n > 0)\n    {\n        digit = n\
    \ % 10;\n        digit_sum += digit;\n        n = n / 10;\n    }\n    return digit_sum;\n\
    }\n/*\n    >>> factorial(1L)\n    1L\n    >>> factorial(3L)\n    6L\n    >>> factorial(5L)\n\
    \    120L\n    >>> factorial(10L)\n    3628800L\n    >>> factorial(30L)\n    265252859812191058636308480000000L\n\
    */\nlong factorial(long n) \n{\n    long factorial = 1;\n    long i = 1;\n   \
    \ for (i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n    return\
    \ factorial;\n}\n/*\n    >>> fibonacci(0L)\n    0L\n    >>> fibonacci(1L)\n  \
    \  1L\n    >>> fibonacci(2L)\n    1L\n    >>> fibonacci(3L)\n    2L\n    >>> fibonacci(10L)\n\
    \    55L\n    >>> fibonacci(20L)\n    6765L\n    >>> fibonacci(40L)\n    102334155L\n\
    */\nlong fibonacci(long n) \n{\n    long fib = 0;\n    long prev_fib = 0;\n  \
    \  long next_fib = 1;\n    long i = 1;\n    for (i = 1; i <=\nunittest\n{\n  \
    \  alias candidate = sum_to_n;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(6L)\
    \ == 21L);\n    assert(candidate(11L) == 66L);\n    assert(candidate(30L) == 465L);\n\
    \    assert(candidate(100L) == 5050L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1s_gaiuc.d(95): Error: expression expected, not `unittest`\\\
    n/tmp/tmp1s_gaiuc.d(96): Error: found `{` when expecting `;` following `for` condition\\\
    n/tmp/tmp1s_gaiuc.d(97): Error: expression expected, not `alias`\\n/tmp/tmp1s_gaiuc.d(97):\
    \ Error: found `candidate` when expecting `)`\\n/tmp/tmp1s_gaiuc.d(97): Error:\
    \ found `=` instead of statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp1s_gaiuc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nsum_to_n is a function that sums numbers from 1\
    \ to n.\n    >>> sum_to_n(30L)\n    465L\n    >>> sum_to_n(100L)\n    5050L\n\
    \    >>> sum_to_n(5L)\n    15L\n    >>> sum_to_n(10L)\n    55L\n    >>> sum_to_n(1L)\n\
    \    1L\n    \n*/\nlong sum_to_n(long n) \n{\n    //finds the sum from 1 to n\n\
    \    long sum = 0;\n    for (long i = 1; i <= n; i++)\n    {\n        sum += i;\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_to_n;\n\n \
    \   assert(candidate(1L) == 1L);\n    assert(candidate(6L) == 21L);\n    assert(candidate(11L)\
    \ == 66L);\n    assert(candidate(30L) == 465L);\n    assert(candidate(100L) ==\
    \ 5050L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nsum_to_n is a function that sums numbers from 1\
    \ to n.\n    >>> sum_to_n(30L)\n    465L\n    >>> sum_to_n(100L)\n    5050L\n\
    \    >>> sum_to_n(5L)\n    15L\n    >>> sum_to_n(10L)\n    55L\n    >>> sum_to_n(1L)\n\
    \    1L\n    \n*/\nlong sum_to_n(long n) \n{\n    if (n == 1L)\n    {\n      \
    \  return 1L;\n    }\n    return n + sum_to_n(n - 1L);\n}\nunittest\n{\n    alias\
    \ candidate = sum_to_n;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(6L)\
    \ == 21L);\n    assert(candidate(11L) == 66L);\n    assert(candidate(30L) == 465L);\n\
    \    assert(candidate(100L) == 5050L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nsum_to_n is a function that sums numbers from 1\
    \ to n.\n    >>> sum_to_n(30L)\n    465L\n    >>> sum_to_n(100L)\n    5050L\n\
    \    >>> sum_to_n(5L)\n    15L\n    >>> sum_to_n(10L)\n    55L\n    >>> sum_to_n(1L)\n\
    \    1L\n    \n*/\nlong sum_to_n(long n) \n{\n    return (n * (n + 1L)) / 2L;\n\
    }\nunittest\n{\n    alias candidate = sum_to_n;\n\n    assert(candidate(1L) ==\
    \ 1L);\n    assert(candidate(6L) == 21L);\n    assert(candidate(11L) == 66L);\n\
    \    assert(candidate(30L) == 465L);\n    assert(candidate(100L) == 5050L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nsum_to_n is a function that sums numbers from 1\
    \ to n.\n    >>> sum_to_n(30L)\n    465L\n    >>> sum_to_n(100L)\n    5050L\n\
    \    >>> sum_to_n(5L)\n    15L\n    >>> sum_to_n(10L)\n    55L\n    >>> sum_to_n(1L)\n\
    \    1L\n    \n*/\nlong sum_to_n(long n) \n{\n    if (n==1)\n    {\n        return\
    \ 1;\n    }\n    else\n    {\n        return sum_to_n(n-1)+n;\n    }\n}\nunittest\n\
    {\n    alias candidate = sum_to_n;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(6L)\
    \ == 21L);\n    assert(candidate(11L) == 66L);\n    assert(candidate(30L) == 465L);\n\
    \    assert(candidate(100L) == 5050L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nsum_to_n is a function that sums numbers from 1\
    \ to n.\n    >>> sum_to_n(30L)\n    465L\n    >>> sum_to_n(100L)\n    5050L\n\
    \    >>> sum_to_n(5L)\n    15L\n    >>> sum_to_n(10L)\n    55L\n    >>> sum_to_n(1L)\n\
    \    1L\n    \n*/\nlong sum_to_n(long n) \n{\n    long result = 0L;\n    long\
    \ i = 1L;\n    while (i <= n) \n    {\n        result = result + i;\n        i\
    \ = i + 1L;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ sum_to_n;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(6L) == 21L);\n\
    \    assert(candidate(11L) == 66L);\n    assert(candidate(30L) == 465L);\n   \
    \ assert(candidate(100L) == 5050L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nsum_to_n is a function that sums numbers from 1\
    \ to n.\n    >>> sum_to_n(30L)\n    465L\n    >>> sum_to_n(100L)\n    5050L\n\
    \    >>> sum_to_n(5L)\n    15L\n    >>> sum_to_n(10L)\n    55L\n    >>> sum_to_n(1L)\n\
    \    1L\n    \n*/\nlong sum_to_n(long n) \n{\n    long sum = 0;\n    long i =\
    \ 1;\n    while (i <= n) {\n        sum += i;\n        i += 1;\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = sum_to_n;\n\n    assert(candidate(1L)\
    \ == 1L);\n    assert(candidate(6L) == 21L);\n    assert(candidate(11L) == 66L);\n\
    \    assert(candidate(30L) == 465L);\n    assert(candidate(100L) == 5050L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nsum_to_n is a function that sums numbers from 1\
    \ to n.\n    >>> sum_to_n(30L)\n    465L\n    >>> sum_to_n(100L)\n    5050L\n\
    \    >>> sum_to_n(5L)\n    15L\n    >>> sum_to_n(10L)\n    55L\n    >>> sum_to_n(1L)\n\
    \    1L\n    \n*/\nlong sum_to_n(long n) \n{\n    long res = 0;\n    foreach (i;\
    \ 1..n+1)\n    {\n        res += i;\n    }\n    return res;\n}\nunittest\n{\n\
    \    alias candidate = sum_to_n;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(6L)\
    \ == 21L);\n    assert(candidate(11L) == 66L);\n    assert(candidate(30L) == 465L);\n\
    \    assert(candidate(100L) == 5050L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nsum_to_n is a function that sums numbers from 1\
    \ to n.\n    >>> sum_to_n(30L)\n    465L\n    >>> sum_to_n(100L)\n    5050L\n\
    \    >>> sum_to_n(5L)\n    15L\n    >>> sum_to_n(10L)\n    55L\n    >>> sum_to_n(1L)\n\
    \    1L\n    \n*/\nlong sum_to_n(long n) \n{\n\treturn (n * (n + 1L)) / 2L;\n\
    }\nunittest\n{\n    alias candidate = sum_to_n;\n\n    assert(candidate(1L) ==\
    \ 1L);\n    assert(candidate(6L) == 21L);\n    assert(candidate(11L) == 66L);\n\
    \    assert(candidate(30L) == 465L);\n    assert(candidate(100L) == 5050L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nsum_to_n is a function that sums numbers from 1\
    \ to n.\n    >>> sum_to_n(30L)\n    465L\n    >>> sum_to_n(100L)\n    5050L\n\
    \    >>> sum_to_n(5L)\n    15L\n    >>> sum_to_n(10L)\n    55L\n    >>> sum_to_n(1L)\n\
    \    1L\n    \n*/\nlong sum_to_n(long n) \n{\n    // your code goes here\n   \
    \ if (n == 1)\n        return 1;\n    else\n        return n + sum_to_n(n-1);\n\
    }\n/*\nfactorial is a function that calculates factorial of n.\n    >>> factorial(5L)\n\
    \    120L\n    >>> factorial(1L)\n    1L\n    >>> factorial(3L)\n    6L\n    >>>\
    \ factorial(4L)\n    24L\n    >>> factorial(2L)\n    2L\n    \n*/\nlong factorial(long\
    \ n) \n{\n    // your code goes here\n    if (n == 1)\n        return 1;\n   \
    \ else\n        return n * factorial(n-1);\n}\n/*\nfibonacci is a function that\
    \ returns the nth value in the fibonacci sequence.\n    >>> fibonacci(1L)\n  \
    \  1L\n    >>> fibonacci(2L)\n    1L\n    >>> fibonacci(3L)\n    2L\n    >>> fibonacci(4L)\n\
    \    3L\n    >>> fibonacci(5L)\n    5L\n    >>> fibonacci(6L)\n    8L\n    \n\
    */\nlong fibonacci(long n) \n{\n    // your code goes here\n    if (n == 1)\n\
    \        return 1;\n    else if (n == 2)\n        return 1;\n    else\n      \
    \  return fibonacci(n-1) + fibonacci(n-2);\n}\n/*\nsum_digits is a function that\
    \ calculates the sum of the digits of a number.\n    >>> sum_digits(123L)\n  \
    \  6L\n    >>> sum_digits(0L)\n    0L\n    >>> sum_digits(1L)\n    1L\n    >>>\
    \ sum_digits(45L)\n    9L\n    >>> sum_digits(8910L)\n    19L\n    \n*/\nlong\
    \ sum_digits(long n) \n{\n    // your code goes here\n    if (n == 0)\n      \
    \  return 0;\n    else if (n > 0)\n        return n % 10 + sum_digits(n\nunittest\n\
    {\n    alias candidate = sum_to_n;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(6L)\
    \ == 21L);\n    assert(candidate(11L) == 66L);\n    assert(candidate(30L) == 465L);\n\
    \    assert(candidate(100L) == 5050L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpeaj3pira.d(93): Error: found `unittest` when expecting `,`\\\
    n/tmp/tmpeaj3pira.d(103): Error: found `void` when expecting `,`\\n/tmp/tmpeaj3pira.d(103):\
    \ Error: found `{` when expecting `,`\\n/tmp/tmpeaj3pira.d(103): Error: expression\
    \ expected, not `}`\\n/tmp/tmpeaj3pira.d(103): Error: found `End of File` when\
    \ expecting `,`\\n/tmp/tmpeaj3pira.d(103): Error: found `End of File` when expecting\
    \ `)`\\n/tmp/tmpeaj3pira.d(103): Error: found `End of File` when expecting `;`\
    \ following `return` statement\\n/tmp/tmpeaj3pira.d(103): Error: found `End of\
    \ File` when expecting `}` following compound statement\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpeaj3pira.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nsum_to_n is a function that sums numbers from 1\
    \ to n.\n    >>> sum_to_n(30L)\n    465L\n    >>> sum_to_n(100L)\n    5050L\n\
    \    >>> sum_to_n(5L)\n    15L\n    >>> sum_to_n(10L)\n    55L\n    >>> sum_to_n(1L)\n\
    \    1L\n    \n*/\nlong sum_to_n(long n) \n{\n    return n * (n + 1L) / 2L;\n\
    }\n// ##sum_to_n\nunittest\n{\n    alias candidate = sum_to_n;\n\n    assert(candidate(1L)\
    \ == 1L);\n    assert(candidate(6L) == 21L);\n    assert(candidate(11L) == 66L);\n\
    \    assert(candidate(30L) == 465L);\n    assert(candidate(100L) == 5050L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nsum_to_n is a function that sums numbers from 1\
    \ to n.\n    >>> sum_to_n(30L)\n    465L\n    >>> sum_to_n(100L)\n    5050L\n\
    \    >>> sum_to_n(5L)\n    15L\n    >>> sum_to_n(10L)\n    55L\n    >>> sum_to_n(1L)\n\
    \    1L\n    \n*/\nlong sum_to_n(long n) \n{\n    long result = 0L;\n    long\
    \ i = 1L;\n    while (i <= n) \n    {\n        result = result + i;\n        i\
    \ = i + 1L;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ sum_to_n;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(6L) == 21L);\n\
    \    assert(candidate(11L) == 66L);\n    assert(candidate(30L) == 465L);\n   \
    \ assert(candidate(100L) == 5050L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nsum_to_n is a function that sums numbers from 1\
    \ to n.\n    >>> sum_to_n(30L)\n    465L\n    >>> sum_to_n(100L)\n    5050L\n\
    \    >>> sum_to_n(5L)\n    15L\n    >>> sum_to_n(10L)\n    55L\n    >>> sum_to_n(1L)\n\
    \    1L\n    \n*/\nlong sum_to_n(long n) \n{\n\treturn n*(n+1)/2;\n}\nunittest\n\
    {\n    alias candidate = sum_to_n;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(6L)\
    \ == 21L);\n    assert(candidate(11L) == 66L);\n    assert(candidate(30L) == 465L);\n\
    \    assert(candidate(100L) == 5050L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nsum_to_n is a function that sums numbers from 1\
    \ to n.\n    >>> sum_to_n(30L)\n    465L\n    >>> sum_to_n(100L)\n    5050L\n\
    \    >>> sum_to_n(5L)\n    15L\n    >>> sum_to_n(10L)\n    55L\n    >>> sum_to_n(1L)\n\
    \    1L\n    \n*/\nlong sum_to_n(long n) \n{\n    if (n <= 0)\n        return\
    \ 0;\n    else\n        return n + sum_to_n(n - 1);\n}\nunittest\n{\n    alias\
    \ candidate = sum_to_n;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(6L)\
    \ == 21L);\n    assert(candidate(11L) == 66L);\n    assert(candidate(30L) == 465L);\n\
    \    assert(candidate(100L) == 5050L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nsum_to_n is a function that sums numbers from 1\
    \ to n.\n    >>> sum_to_n(30L)\n    465L\n    >>> sum_to_n(100L)\n    5050L\n\
    \    >>> sum_to_n(5L)\n    15L\n    >>> sum_to_n(10L)\n    55L\n    >>> sum_to_n(1L)\n\
    \    1L\n    \n*/\nlong sum_to_n(long n) \n{\n    return n*(n+1)/2;\n}\n/*\nsum_triangular_numbers\
    \ is a function that sums triangular numbers.\nTriangular numbers are numbers\
    \ made by the following scheme:\n    1\n    1+2\n    1+2+3\n    1+2+3+4\n    1+2+3+4+5\n\
    \    1+2+3+4+5+6\n    1+2+3+4+5+6+7\n    etc.\n    >>> sum_triangular_numbers(4L)\n\
    \    10L\n    >>> sum_triangular_numbers(1L)\n    1L\n    >>> sum_triangular_numbers(5L)\n\
    \    15L\n    >>> sum_triangular_numbers(10L)\n    55L\n    >>> sum_triangular_numbers(100L)\n\
    \    5050L\n*/\nlong sum_triangular_numbers(long n) \n{\n    return sum_to_n(n)*(n+1)/2;\n\
    }\nunittest\n{\n    alias candidate = sum_to_n;\n\n    assert(candidate(1L) ==\
    \ 1L);\n    assert(candidate(6L) == 21L);\n    assert(candidate(11L) == 66L);\n\
    \    assert(candidate(30L) == 465L);\n    assert(candidate(100L) == 5050L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nsum_to_n is a function that sums numbers from 1\
    \ to n.\n    >>> sum_to_n(30L)\n    465L\n    >>> sum_to_n(100L)\n    5050L\n\
    \    >>> sum_to_n(5L)\n    15L\n    >>> sum_to_n(10L)\n    55L\n    >>> sum_to_n(1L)\n\
    \    1L\n    \n*/\nlong sum_to_n(long n) \n{\n    /*\n    n^2 + n - 2*sum_to_n(n-1)\n\
    \    */\n    if (n < 1)\n        return 0;\n    else\n        return n*n + n -\
    \ 2*sum_to_n(n-1);\n}\nunittest\n{\n    alias candidate = sum_to_n;\n\n    assert(candidate(1L)\
    \ == 1L);\n    assert(candidate(6L) == 21L);\n    assert(candidate(11L) == 66L);\n\
    \    assert(candidate(30L) == 465L);\n    assert(candidate(100L) == 5050L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpxjmu0zqb.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d6d]\\n??:? void tmpxjmu0zqb.__unittest_L26_C1()\
    \ [0x427a54]\\n??:? void tmpxjmu0zqb.__modtest() [0x427af0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ba93]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a926]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fab9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff68]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa45]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a8fd]\\n??:? runModuleUnitTests [0x42b869]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281bc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428143]\\n??:? _d_run_main [0x4280ae]\\n??:? main [0x427b03]\\\
    n??:? __libc_start_main [0x873cf554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nsum_to_n is a function that sums numbers from 1\
    \ to n.\n    >>> sum_to_n(30L)\n    465L\n    >>> sum_to_n(100L)\n    5050L\n\
    \    >>> sum_to_n(5L)\n    15L\n    >>> sum_to_n(10L)\n    55L\n    >>> sum_to_n(1L)\n\
    \    1L\n    \n*/\nlong sum_to_n(long n) \n{\n    return (n * (n + 1L)) / 2L;\n\
    }\n/*\nsum_to_n_cubes is a function that sums the cubes of integers from 1 to\
    \ n.\n    >>> sum_to_n_cubes(4L)\n    100L\n    >>> sum_to_n_cubes(5L)\n    225L\n\
    \    >>> sum_to_n_cubes(6L)\n    441L\n    >>> sum_to_n_cubes(2L)\n    9L\n  \
    \  >>> sum_to_n_cubes(3L)\n    36L\n*/\nlong sum_to_n_cubes(long n) \n{\n    return\
    \ (n * (n + 1L) * ((2L * n) + 1L)) / 6L;\n}\n/*\nsum_of_squares(n) is a function\
    \ that sums the squares of the integers from 1 to n.\n    >>> sum_of_squares(3L)\n\
    \    14L\n    >>> sum_of_squares(4L)\n    30L\n    >>> sum_of_squares(2L)\n  \
    \  5L\n    >>> sum_of_squares(5L)\n    55L\n    >>> sum_of_squares(6L)\n    91L\n\
    */\nlong sum_of_squares(long n) \n{\n    return (n * (n + 1L) * ((2L * n) + 1L))\
    \ / 6L;\n}\n/*\nsum_of_cubes(n) is a function that sums the cubes of the integers\
    \ from 1 to n.\n    >>> sum_of_cubes(1L)\n    1L\n    >>> sum_of_cubes(2L)\n \
    \   9L\n    >>> sum_of_cubes(3L)\n    36L\n    >>> sum_of_cubes(4L)\n    100L\n\
    \    >>> sum_of_cubes(5L)\n    225L\n*/\nlong sum_of_cubes(long n) \n{\n    return\
    \ (n * n * (n + 1L) * (n + 1L)) / 4L;\n}\n/*\nsum_of_nats\nunittest\n{\n    alias\
    \ candidate = sum_to_n;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(6L)\
    \ == 21L);\n    assert(candidate(11L) == 66L);\n    assert(candidate(30L) == 465L);\n\
    \    assert(candidate(100L) == 5050L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy2wdqp3r.d(71): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy2wdqp3r.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
