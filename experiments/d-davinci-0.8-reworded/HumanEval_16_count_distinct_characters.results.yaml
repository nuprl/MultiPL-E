language: d
name: HumanEval_16_count_distinct_characters
results:
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \tconst char[] array = string.chars;\n\tlong result = 0;\n\tforeach(unichar i;\
    \ array)\n\t{\n\t\tif(result == 0)\n\t\t{\n\t\t\tresult = result + 1;\n\t\t}\n\
    \t\tforeach(unichar j; array)\n\t\t{\n\t\t\tif(tolower(i) == tolower(j))\n\t\t\
    \t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(j == cast(unichar)array.length - 1)\n\t\
    \t\t{\n\t\t\t\tresult = result + 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n\
    unittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8p5cox0n.d(13): Error: no property `chars` for type `string`

    /tmp/tmp8p5cox0n.d(15): Error: undefined identifier `unichar`

    /tmp/tmp8p5cox0n.d(21): Error: undefined identifier `unichar`

    /tmp/tmp8p5cox0n.d(23): Error: undefined identifier `tolower`

    /tmp/tmp8p5cox0n.d(23): Error: undefined identifier `tolower`

    /tmp/tmp8p5cox0n.d(27): Error: undefined identifier `unichar`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8p5cox0n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    static bool[char] s;\n    foreach(c; string) \n    {\n        s[c] = true;\n\
    \    }\n    return s.length;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp93aj6wpk.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x4287f9]

    ??:? void tmp93aj6wpk.__unittest_L20_C1() [0x427c2c]

    ??:? void tmp93aj6wpk.__modtest() [0x427c98]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d67f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428656]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a5ad]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42a63c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a539]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42862d]

    ??:? runModuleUnitTests [0x42d455]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429258]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return set(map!(char.toLower)(string)).length;\n}\nunittest\n{\n    alias\
    \ candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n\
    \    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpedt639u8.d(13): Error: undefined identifier `set`, did you mean
    template `get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpedt639u8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    alias List(Tuple!(char, bool)) L;\n    L letters_and_count(string.length);\n\
    \    foreach(char letter; string)\n    {\n        bool letter_already_counted\
    \ = false;\n        int letter_index;\n        foreach(ref letter_and_count; letters_and_count)\n\
    \        {\n            ++letter_index;\n            if(letter_and_count[0] ==\
    \ letter)\n            {\n                letter_already_counted = true;\n   \
    \             break;\n            }\n        }\n        if(!letter_already_counted)\n\
    \        {\n            letters_and_count ~= tuple(letter, true);\n        }\n\
    \    }\n    return letters_and_count.length;\n}\n/*\n Given a sorted array, find\
    \ out how many different values does it contain\n    >>> count_distinct_values([-2,\
    \ 0, 1, 2, 3, 4, 6, 7, 9, 10])\n    9L\n    >>> count_distinct_values([-2, 0,\
    \ 1, 1, 2, 3, 4, 6, 7, 9, 10])\n    9L\n    >>> count_distinct_values([-2, 0,\
    \ 1, 1, 2, 3, 4, 6, 7, 9, 10, 10])\n    9L\n    >>> count_distinct_values([-2,\
    \ 0, 1, 1, 2, 3, 4, 6, 7, 9, 10, 10, 10])\n    9L\n    >>> count_distinct_values([])\n\
    \    0L\n*/\nlong count_distinct_values(T[])(T[] array) \n{\n    if(array.length\
    \ == 0)\n    {\n        return 0;\n    }\n    int distinct_values_count = 1;\n\
    \    foreach(i, j; array[1 .. $])\n    {\n        if(array[i] != array[j])\n \
    \       {\n            ++distinct_values_count;\n        }\n    }\n    return\
    \ distinct_values_count;\n}\n/*\n Given a string, find out whether it contains\
    \ a character appearing only once\n    >>> has_unique_character(\"xyzXYZ\")\n\
    \   \nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp24usupeg.d(13): Error: function declaration without return type.
    (Note that constructors are always named `this`)

    /tmp/tmp24usupeg.d(13): Error: no identifier for declarator `List(Tuple!(char,
    bool))`

    /tmp/tmp24usupeg.d(13): Error: semicolon expected to close `alias` declaration

    /tmp/tmp24usupeg.d(48): Error: identifier expected for template value parameter

    /tmp/tmp24usupeg.d(64): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp24usupeg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    auto lower_case_string = toLower(string);\n    return \n        lower_case_string\n\
    \        .length\n        .iota\n        .map!(ch => lower_case_string[ch])\n\
    \        .dedup\n        .length;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4b6o29x_.d(13): Error: undefined identifier `toLower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4b6o29x_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    string toUpperString=toUpper(string);\n    long[char] charLookup=new long[char];\n\
    \    foreach(char c;toUpperString)\n    {\n        if(charLookup.count(c)==0)\n\
    \        {\n            charLookup[c]=1;\n        }\n    }\n    return charLookup.length;\n\
    }\n/*\n \n Given a string, find out how many words it contains.\n    >>> count_words(\"\
    abc def\")\n    2L\n    >>> count_words(\"abc def ghi\")\n    3L\nunittest\n{\n\
    \    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\"\
    ) == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5nwmhmku.d(14): Error: need size of rightmost array, not type `char`

    /tmp/tmp5nwmhmku.d(24): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5nwmhmku.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return string.toLower().dup.retro.distinct.length;\n}\n/*\n Count of sequences\
    \ in string str of length k, where\n        k is an integer, k > 0\n        sequence\
    \ is defined as a range of consecutive characters from the string\n        if\
    \ there are characters c1, c2, ... ck, then the sequence (c1, c2, ... ck) is \n\
    \        valid iff c2 = c1 + 1, c3 = c2 + 1, ... ck = ck-1 + 1\n        input\
    \ string is nonempty\n        input string contains only digits from 0 to 9\n\
    \    >>> count_sequences(\"0212\", 2)\n    1L\n    >>> count_sequences(\"012345\"\
    , 2)\n    3L\n*/\nlong count_sequences(string str, int k) \n{\n    long count\
    \ = 0;\n    auto char_array = str.dup.to!(immutable(char)[])();\n    size_t n\
    \ = char_array.length;\n    foreach(i;0..n) \n    {\n        if (i + k <= n) \n\
    \        {\n            auto ok = true;\n            foreach(j;i..i+k-1) \n  \
    \          {\n                if (char_array[j+1] != char_array[j] + 1) \n   \
    \             {\n                    ok = false;\n                    break;\n\
    \                }\n            }\n            if (ok) \n            {\n     \
    \           count++;\n            }\n        }\n    }\n    return count;\n}\n\
    /*\n Given a string, return true iff it is a valid UTF-8 string\n    >>> is_valid_utf8(\"\
    \u0442\u0435\u0441\u0442\")\n    true\n    >>> is_valid_utf8(\"\u0442\u0435\u0441\
    \u0442. \u0435\u0449\u0435 \u0442\u0435\u0441\u0442\")\n    true\n    >>> is_valid_utf8(\"\
    \uC548\uB155 \uD558\uC138\uC694\")\n    true\n    >>> is_valid_utf8(\"invalid:\
    \ \\xd0\\x80\\xd0\\x80\")\n    false\n    >>> is_valid_utf8(\"invalid: \\xc0\\\
    x80\")\n    false\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbsramrq2.d(54): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbsramrq2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    auto set = std.container.set!(typeof(\"a\".toLower()));\n    foreach(char\
    \ c; string)\n    {\n        set.insert(c.toLower());\n    }\n    return set.length;\n\
    }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_88to_lr.d(13): Error: undefined identifier `container` in package
    `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_88to_lr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \tlong count = 0;\n\tforeach(c; to!string(std.array.array(string))) \n\t{\n\t\t\
    if(c.tolower() !in string)\n\t\t{\n\t\t\tstring ~= c.tolower();\n\t\t\tcount++;\n\
    \t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfrh8relb.d(14): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfrh8relb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    auto s = set!(char)(string);\n    return s.length;\n}\nunittest\n{\n    alias\
    \ candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n\
    \    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwhrnb03q.d(13): Error: template instance `set!char` template `set`
    is not defined, did you mean get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwhrnb03q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long result = 0;\n    foreach(char c; string) \n    {\n        if (c.isAlpha)\
    \ \n        {\n            ++result;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpglyyq_ca.d(16): Error: no property `isAlpha` for type `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpglyyq_ca.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    ulong[char] chardict;\n    foreach(c; string) {\n        if(c in chardict)\
    \ \n            chardict[c] += 1;\n        else \n            chardict[c] = 1;\n\
    \    }\n    return chardict.length;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmr2bbc7s.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x4287d9]

    ??:? void tmpmr2bbc7s.__unittest_L22_C1() [0x427c0c]

    ??:? void tmpmr2bbc7s.__modtest() [0x427c78]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d78b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428636]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a631]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42a6c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a5bd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42860d]

    ??:? runModuleUnitTests [0x42d561]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4292dc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    // Creates a set (collection of unique elements)\n    auto s = set!char();\n\
    unittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3fcgyelw.d(15): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3fcgyelw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    Set!char letters = set();\n    foreach(char ch; string)\n    {\n        letters.insert(ch);\n\
    \    }\n    return letters.length;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp84i6oowp.d(13): Error: template instance `Set!char` template `Set`
    is not defined, did you mean get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)?

    /tmp/tmp84i6oowp.d(13): Error: undefined identifier `set`, did you mean template
    `get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp84i6oowp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    auto first = string.front;\n    auto last = string.back;\n    static immutable\
    \ IntRange alphabet = 'a'..'z';\n    static immutable int alphabet_size = alphabet.length;\n\
    \    static immutable int ASCII_a = 'a';\n    immutable int char_to_index(char\
    \ c) {\n        immutable int ascii = cast(int)c;\n        if(ascii < ASCII_a)\
    \ return 0;\n        immutable int index = ascii - ASCII_a;\n        return index\
    \ < alphabet_size ? index : 0;\n    }\n    static immutable int[] distinct = new\
    \ int[alphabet_size];\n    static immutable int distinct_size = distinct.length;\n\
    \    //std.array.fill(distinct, 0);\n    foreach(char c; string) \n    {\n   \
    \     int index = char_to_index(c);\n        distinct[index] = 1;\n    }\n   \
    \ return std.array.sum(distinct[0..distinct_size]);\n}\nunittest\n{\n    alias\
    \ candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n\
    \    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqqdj443v.d(15): Error: semicolon expected, not `..`

    /tmp/tmpqqdj443v.d(15): Error: found `..` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqqdj443v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    // your code here\n    \n    // I will do it in 2 different ways:\n    //\
    \ 1) Convert to uppercase and then check the number of unique characters\n   \
    \ // 2) use hash table\n    \n    // version 1 \n    auto new_string = string.toUpper;\n\
    \    long length = new_string.length;\n    long count = 0;\n    foreach(char c;\
    \ new_string){\n        if(new_string.countOf(c) == 1){\n            count++;\n\
    \        }\n    }\n    return count;\n    \n    // version 2\n    auto hashTable\
    \ = HashTable!char(string.length);\n    foreach(char c; string){\n        hashTable[c]\
    \ = true;\n    }\n    return hashTable.length;\n}\n/*\nunittest\n{\n    alias\
    \ candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n\
    \    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkvuckk_b.d(37): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkvuckk_b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return to!long(std.algorithm.uniq(string.chars.map!(x => x.toLower()).array).length);\n\
    }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptwm63k8u.d(13): Error: template instance `to!long` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptwm63k8u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    auto d = typeof(return)();\n    foreach(c; string) {\n        if (c == '\\\
    0') continue;\n        d[tolower(c)] = c;\n    }\n    return d.length;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpofyxn2hu.d(16): Error: only one index allowed to index `long`

    /tmp/tmpofyxn2hu.d(18): Error: no property `length` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpofyxn2hu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \tstruct S {\n\t\tstring string;\n\t\tint[] result;\n\t\tthis(string string) {\n\
    \t\t\tthis.string = string;\n\t\t\tresult = new int[127];\n\t\t}\n\t\t\n\t\tvoid\
    \ some_function(string string) {\n\t\t\tint k = 0;\n\t\t\tforeach(char c; string)\
    \ {\n\t\t\t\tresult[cast(int)c] = 1;\n\t\t\t}\n\t\t}\n\t\t\n\t\tint result_length()\
    \ {\n\t\t\treturn result.length;\n\t\t}\n\t\t\n\t\t@property {\n\t\t\treturn result.length;\n\
    \t\t}\n\t}\n\t\n\tS s = new S(string);\n\ts.some_function(string);\n\tint result\
    \ = 0;\n\tforeach(e; s.result) {\n\t\tresult += e;\n\t}\n\treturn result;\n}\n\
    unittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfaxifzqc.d(33): Error: declaration expected, not `return`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfaxifzqc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return string.length() - string.toLower().length();\n}\nunittest\n{\n   \
    \ alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") ==\
    \ 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpndagb0le.d(13): Error: no property `length` for type `string`

    /tmp/tmpndagb0le.d(13): Error: no property `toLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpndagb0le.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \treturn set(cast(char[])string).length;\n}\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnsyiuckb.d(13): Error: undefined identifier `set`, did you mean
    template `get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnsyiuckb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long distinct_characters = 0;\n    auto character_counts = typeof(return)();\n\
    \    foreach(ch; string) \n    {\n        ch = toUpper(ch);\n        if(!character_counts.contains(ch))\
    \ \n        {\n            character_counts[ch] = 1;\n            distinct_characters++;\n\
    \        }\n    }\n    return distinct_characters;\n}\nunittest\n{\n    alias\
    \ candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n\
    \    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe71jgy5d.d(17): Error: undefined identifier `toUpper`

    /tmp/tmpe71jgy5d.d(18): Error: no property `contains` for type `long`

    /tmp/tmpe71jgy5d.d(20): Error: only one index allowed to index `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe71jgy5d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long result = 0;\n    dchar[] arr = to!dchar[](string);\n    auto alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n    foreach(dchar ch; alphabet) {\n     \
    \   if(ch in arr) {\n            result += 1;\n        }\n    }\n    return result;\n\
    }\n/*\n Given a long string, find out how many words does it contain\n    >>>\
    \ count_words(\"hello world!!!\")\n    2L\n    >>> count_words(\"Foo bar?\")\n\
    \    2L\n*/\nlong count_words(string string) \n{\n    long result = 0;\n    dchar[]\
    \ arr = to!dchar[](string);\n    result = count(arr, ' ');\n    return result\
    \ + 1;\n}\n/*\n Given a string, return a new string that is reversed\n    >>>\
    \ reverse_string(\"hello\")\n    \"olleh\"\n    >>> reverse_string(\"Foo bar\"\
    )\n    \"rab ooF\"\n*/\nstring reverse_string(string string) \n{\n    string result\
    \ = \"\";\n    dchar[] arr = to!dchar[](string);\n    while(!arr.empty) {\n  \
    \      result ~= arr.popFront();\n    }\n    return result;\n}\n/*\n Given a string,\
    \ return a new string that is reverse and all lower case\n    >>> reverse_string_lower(\"\
    HELLO\")\n    \"olleh\"\n    >>> reverse_string_lower(\"Foo BAR\")\n    \"rab\
    \ oof\"\n*/\nstring reverse_string_lower(string string) \n{\n    string result\
    \ = \"\";\n    dchar[] arr = to!dchar[](string);\n    while(!arr.empty) {\n  \
    \      result ~= toLower(arr.popFront());\n    }\n    return result;\n}\n/*\n\
    \ Given a long string, return a new string that is reversed and all upper case\n\
    \    >>> reverse_string_upper(\"hello world\")\n    \"DLROW OLLEH\"\n    >>> reverse_string_upper(\"\
    Foo BAR\")\n    \"RAB OOF\"\n*/\nstring reverse_string_upper(string string) \n\
    {\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjhmz_8r8.d(79): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjhmz_8r8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \tauto charArray = string.toUpperArray();\n\tauto allChar = array(char[]).init;\n\
    \tforeach(c; charArray)\n\t{\n\t\tif(allChar.find(c) == -1) allChar ~= c;\n\t\
    }\n\treturn allChar.length;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphq8zbvmv.d(14): Error: found `[` when expecting `.` following char

    /tmp/tmphq8zbvmv.d(14): Error: found `]` when expecting identifier following `char`.

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphq8zbvmv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    immutable length = string.length;\n    long count = 0;\n    foreach(character;\
    \ string) \n    {\n        if (character != \" \") \n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n/*\nGiven the String containing the digits\
    \ of a number, find the sum of those digits.\n    >>> sum_of_digits(\"1234\")\n\
    \    10L\n    >>> sum_of_digits(\"abc\")\n    0L\n*/\nlong sum_of_digits(string\
    \ string) \n{\n    immutable length = string.length;\n    long sum = 0;\n    foreach(character;\
    \ string) \n    {\n        if (character != \" \") \n        {\n            sum\
    \ += to!long(character);\n        }\n    }\n    return sum;\n}\n/*\nGiven a string\
    \ of a number, print out the individual digits of the number, one per line.\n\
    \    >>> print_digits(\"1234\")\n    1\n    2\n    3\n    4\n    >>> print_digits(\"\
    abc\")\n    0\n*/\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5jfguz_a.d(17): Error: incompatible types for `(character) != ("
    ")`: `immutable(char)` and `string`

    /tmp/tmp5jfguz_a.d(37): Error: incompatible types for `(character) != (" ")`:
    `immutable(char)` and `string`

    /tmp/tmp5jfguz_a.d(39): Error: template instance `to!long` template `to` is not
    defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5jfguz_a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return to!string(string.tolower()).length;\n}\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmbys_9h7.d(13): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmbys_9h7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return set(string.toLower).length;\n}\n/*\n Given a list of distinct integers,\
    \ return the number of elements that occur more than once\n    >>> count_duplicates([1,\
    \ 1, 2, 3, 4, 5, 6, 7, 7, 8, 9, 0])\n    2L\n*/\nlong count_duplicates(list of\
    \ long items)\n{\n    return count(items, (long item) => {\n        return items.count(item)\
    \ > 1;\n    });\n}\n/*\n Given a list of integers, return the number of consecutive\
    \ elements that form increasing sequences\n    >>> count_increasing_sequences([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    10L\n    >>> count_increasing_sequences([1,\
    \ 2, 3, 4, 5, 7, 8, 9, 10])\n    5L\n*/\nlong count_increasing_sequences(list\
    \ of long items)\n{\n    if (items.length < 2)\n    {\n        return items.length;\n\
    \    }\n    return count(zip(items, items[1..$]), (tuple of (long value, long\
    \ next_value) item) => {\n        return item[0] < item[1];\n    }) + 1;\n}\n\
    /*\n Given a list of integers, return the number of times that a number occurs\
    \ in the list (excluding first and last elements)\n    >>> count_occurences([1,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 4, 5])\n    0L\n    >>> count_occurences([1,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 4, 5, 2])\n    1L\n*/\nlong count_occurences(list\
    \ of long items)\n{\n    if (items.length < 3)\n    {\n        return 0;\n   \
    \ }\n    long center = items[items.length / 2];\n    return count(items[1..($\
    \ - 1)], (long item) => {\n        return item == center;\n    });\n}\n/*\n Given\
    \ a list of integers, return the\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphy8trny1.d(20): Error: found `long` when expecting `)`

    /tmp/tmphy8trny1.d(20): Error: semicolon expected following function declaration

    /tmp/tmphy8trny1.d(20): Error: no identifier for declarator `items`

    /tmp/tmphy8trny1.d(20): Error: declaration expected, not `)`

    /tmp/tmphy8trny1.d(24): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphy8trny1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long result = 0;\n    foreach(char c; string)\n    {\n        if(c != ' ')\n\
    \        {\n            result += 1;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpaof56zru.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ded]

    ??:? void tmpaof56zru.__unittest_L23_C1() [0x427b00]

    ??:? void tmpaof56zru.__modtest() [0x427b6c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb13]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9a6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb39]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fac5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a97d]

    ??:? runModuleUnitTests [0x42b8e9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42823c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \  auto result = typeof(result)();\n  foreach(c; string)\n    result[lower(c)]\
    \ = 1;\n  return result.length;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnp_s0l0q.d(13): Error: undefined identifier `result`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnp_s0l0q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    Set!char set;\n    foreach(char ch; string) \n    {\n        ch = toLower(ch);\n\
    \        set.insert(ch);\n    }\n    return set.length;\n}\n/*\n Given a string,\
    \ find out how many different characters (regardless of case) does it consist\
    \ of\n    >>> count_different_characters(\"abcabcabcabcabcabcabcabcabc\")\n  \
    \  3L\n    >>> count_different_characters(\"abcabcabcabcabcabcabcabcabca\")\n\
    \    4L\n    \n*/\nlong count_different_characters(string string) \n{\n    long\
    \ result = 0;\n    Set!char set;\n    foreach(char ch; string) \n    {\n     \
    \   ch = toLower(ch);\n        if(set.insert(ch))\n            result++;\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi5lob7pc.d(13): Error: template instance `Set!char` template `Set`
    is not defined, did you mean get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)?

    /tmp/tmpi5lob7pc.d(16): Error: undefined identifier `toLower`

    /tmp/tmpi5lob7pc.d(32): Error: template instance `Set!char` template `Set` is
    not defined, did you mean get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)?

    /tmp/tmpi5lob7pc.d(35): Error: undefined identifier `toLower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi5lob7pc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \     return uniq(string.translate_set!(\"a-zA-Z\")).length;\n}\nunittest\n{\n\
    \    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\"\
    ) == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdp1x9abd.d(13): Error: undefined identifier `uniq`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdp1x9abd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    auto distinctChars = to!string(set(map!(char[])(string)));\n    return distinctChars.length;\n\
    }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm1wc24n_.d(13): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm1wc24n_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return set(map!(\"tolower\")(string)).length;\n}\nunittest\n{\n    alias\
    \ candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n\
    \    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0ifme8id.d(13): Error: undefined identifier `set`, did you mean
    template `get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0ifme8id.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    Set!char set = new Set!char;\n    foreach(char c; string)\n    {\n      \
    \  set.insert(toLower(c));\n    }\n    return set.length;\n}\nunittest\n{\n  \
    \  alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\")\
    \ == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdxl__2af.d(13): Error: template instance `Set!char` template `Set`
    is not defined, did you mean get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)?

    /tmp/tmpdxl__2af.d(13): Error: template instance `Set!char` template `Set` is
    not defined, did you mean get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdxl__2af.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    // count all lower case and upper case\n    // return the result of set(string.lower().join(string.upper()).split())\n\
    \    // or count the total length of the set composed of string converted to lower\
    \ case and upper case\n    return strlen(to!string(to!set(string.lower ~ string.upper)));\n\
    }\n/*\nGiven a string, find out how many distinct characters (regardless of case)\n\
    does it consist of. The function should return a tuple of two long integers.\n\
    The first one is the number of distinct characters. The second one is the\nnumber\
    \ of occurrences of the most frequently occurring character in the\nstring. If\
    \ there are several characters that are all the most frequently\noccurring ones,\
    \ you can return any of them.\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    (3L, 3L)\n    >>> count_distinct_characters(\"Jerry\")\n    (4L, 2L)\n  \
    \  >>> count_distinct_characters(\"Mississippi\")\n    (4L, 4L)\n*/\nTuple!(long,\
    \ long) count_distinct_characters2(string string) \n{\n    auto counts = count(split(string.lower\
    \ ~ string.upper));\n    return tuple(counts.length, counts.values.max!(a => a));\n\
    }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpegvo0998.d(16): Error: undefined identifier `strlen`

    /tmp/tmpegvo0998.d(34): Error: undefined identifier `count`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpegvo0998.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    // convert string to char set\n    set!char charset = set(string.front, string.back);\n\
    \    return charset.length;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxd0ukbsv.d(14): Error: template instance `set!char` template `set`
    is not defined, did you mean get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)?

    /tmp/tmpxd0ukbsv.d(14): Error: undefined identifier `set`, did you mean template
    `get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxd0ukbsv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \t// Return the number of distinct characters in the given string\n\tchar[] charArray\
    \ = string.dup;\n\tcharArray.sort;\n\tcharArray.dedup;\n\treturn charArray.length;\n\
    }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzqvx7cim.d(15): Error: no property `sort` for type `char[]`

    /tmp/tmpzqvx7cim.d(16): Error: no property `dedup` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzqvx7cim.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long[] chrs = string.map!(c => c.toLower().ord).array;\n    return chrs.length.iota.filter!(i\
    \ => chrs[i] != chrs[i+1]).length;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoqdcp015.d(13): Error: no property `map` for type `string`

    /tmp/tmpoqdcp015.d(14): Error: no property `iota` for type `ulong`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoqdcp015.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    foreach(char ch; string)\n    {\n        count += lower(ch)\
    \ == upper(ch);\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpop2h9vj3.d(16): Error: undefined identifier `lower`

    /tmp/tmpop2h9vj3.d(16): Error: undefined identifier `upper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpop2h9vj3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long result;\n    foreach(immutable character; string) \n    {\n        if(toLower(character)\
    \ == character) \n        {\n            result++;\n        }\n    }\n    return\
    \ result;\n}\n// How to convert a string to an array of bytes\nunittest\n{\n \
    \   alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\"\
    ) == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprkhwshf3.d(16): Error: undefined identifier `toLower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprkhwshf3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return std.algorithm.uniq(string.toLower().toUTF8z()).length;\n}\n```\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp968v9tb7.d(15): Error: declaration expected, not `""`

    /tmp/tmp968v9tb7.d(15): Error: unterminated string constant starting at /tmp/tmp968v9tb7.d(15)

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp968v9tb7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    auto s = set!char;\n    foreach(c; string)\n    {\n        s.insert(toLower(c));\n\
    \    }\n    return s.length;\n}\n/*\n Given a string, find out the most frequent\
    \ character (regardless of case) in it\n \n    >>> find_most_frequent_character(\"\
    abcabcabcabcabcabcabcabc\")\n    Tuple!(char, \"c\", 12L)\n    >>> find_most_frequent_character(\"\
    Jerry\")\n    Tuple!(char, \"r\", 2L)\n    \n*/\nauto find_most_frequent_character(string\
    \ string) \n{\n    auto m = map!(char, long)();\n    foreach(c; string)\n    {\n\
    \        auto a = toLower(c);\n        if(m.contains(a))\n        {\n        \
    \    m[a] = m[a] + 1;\n        }\n        else\n        {\n            m[a] =\
    \ 1;\n        }\n    }\n    auto l = m.length;\n    auto most_frequent_char =\
    \ m.keys[0];\n    auto max_freq = m.values[0];\n    for(int i = 1; i < l; i++)\n\
    \    {\n        if(m.values[i] > max_freq)\n        {\n            max_freq =\
    \ m.values[i];\n            most_frequent_char = m.keys[i];\n        }\n    }\n\
    \    return tuple(most_frequent_char, max_freq);\n}\n/*\n Given a string, find\
    \ out how many vowels (lower and upper case) does it consist of\n    >>> count_vowels(\"\
    xyzXYZ\")\n    0L\n    >>> count_vowels(\"Jerry\")\n    2L\n    \n*/\nlong count_vowels(string\
    \ string) \n{\n    auto vowels = \"aeiou\";\n    auto c = 0;\n    foreach(v; string)\n\
    \    {\n        if(vowels.contains(toLower(v)))\n        {\n            c++;\n\
    \        }\n    }\n    return c;\n}\n/*\n\nunittest\n{\n    alias candidate =\
    \ count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptb4otwsr.d(78): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptb4otwsr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    auto lower = string.toLower();\n    unordered_set!char d_char;\n    foreach(index,\
    \ char c; lower) {\n        d_char.insert(c);\n    }\n    return d_char.length;\n\
    }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnst81vq2.d(13): Error: no property `toLower` for type `string`

    /tmp/tmpnst81vq2.d(14): Error: template instance `unordered_set!char` template
    `unordered_set` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnst81vq2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    import std.algorithm.sorting : sort;\n    long[]  chars = new long[string.length];\n\
    \    immutable last = string.length - 1;\n    foreach(immutable i, immutable x;\
    \ string)\n    {\n        chars[i] = x;\n    }\n    chars.sort();\n    long count\
    \ = 0;\n    for(immutable i = 0; i < last; i++)\n    {\n        count += chars[i]\
    \ != chars[i + 1];\n    }\n    return count + 1;\n}\nunittest \n{\n    assert(count_distinct_characters(\"\
    xyzXYZ\") == 3);\n    assert(count_distinct_characters(\"Jerry\") == 4);\n}\n\
    unittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5_2n0oy4.d(22): Error: cannot modify `immutable` expression `0`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5_2n0oy4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \t/*\n\thttp://www.viva64.com/en/b/0255/\n\t*/\n\tchar[ulong] set;\n\tforeach(ch;\
    \ string) \n\t{\n\t\tset[cast(ulong)ch] = ch;\n\t}\n\treturn set.length;\n}\n\
    unittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpz_427dag.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x428761]

    ??:? void tmpz_427dag.__unittest_L23_C1() [0x427b94]

    ??:? void tmpz_427dag.__modtest() [0x427c00]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d66f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x4285be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a515]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42a5a4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a4a1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428595]

    ??:? runModuleUnitTests [0x42d445]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4291c0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    foreach(char c; string)\n        writeln(c);\n    return string.length;\n\
    }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk_th45qn.d(14): Error: `writeln` is not defined, perhaps `import
    std.stdio;` is needed?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk_th45qn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \tint count = 0;\n\t// for loop for chars 0 to the length of the string\n\tfor\
    \ (size_t i = 0; i < string.length; i++) \n\t{\n\t\t// for loop for chars 0 to\
    \ the length of the string\n\t\tfor (size_t j = 0; j < string.length; j++) \n\t\
    \t{\n\t\t\t// if i is equal to j and they are equal to each other\n\t\t\tif (i\
    \ == j) \n\t\t\t{\n\t\t\t\t// break out of loop\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\
    \t// if char at i is equal to char at j\n\t\t\tif (string[i] == string[j]) \n\t\
    \t\t{\n\t\t\t\t// set both chars to null\n\t\t\t\tstring[i] = null;\n\t\t\t\t\
    string[j] = null;\n\t\t\t}\n\t\t}\n\t}\n\tfor (size_t k = 0; k < string.length;\
    \ k++) \n\t{\n\t\t// if char at k is not equal to null\n\t\tif (string[k] != null)\
    \ \n\t\t{\n\t\t\t// increment count\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n\
    }\n/*\nAn isogram is a word that has no repeating letters, consecutive or non-consecutive.\
    \ \nImplement a function that determines whether a string that contains only letters\
    \ is an isogram. \nAssume the empty string is an isogram. Ignore letter case.\n\
    unittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjbtyjm8y.d(46): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjbtyjm8y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    auto res = string.lower.unique;\n    return res.length;\n}\nunittest\n{\n\
    \    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\"\
    ) == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdkdz2cpq.d(13): Error: no property `lower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdkdz2cpq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \treturn string.toLowerCase.toHashSet.size();\n}\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8bvqjms0.d(13): Error: no property `toLowerCase` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8bvqjms0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \treturn string.unique.length;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3dn1ew27.d(13): Error: no property `unique` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3dn1ew27.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \tlong n = 0;\n\tlong i = 0;\n\tlong length = string.length;\n\tchar[] characters\
    \ = new char[128];\n\tforeach(char c;string)\n\t{\n\t\tif (c >= 'a' && c <= 'z')\n\
    \t\t{\n\t\t\tif (characters[c] == 0)\n\t\t\t{\n\t\t\t\tcharacters[c] = 1;\n\t\t\
    \t\tn++;\n\t\t\t}\n\t\t}\n\t\telse if (c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif\
    \ (characters[c - 'A' + 'a'] == 0)\n\t\t\t{\n\t\t\t\tcharacters[c - 'A' + 'a']\
    \ = 1;\n\t\t\t\tn++;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (characters[c]\
    \ == 0)\n\t\t\t{\n\t\t\t\tcharacters[c] = 1;\n\t\t\t\tn++;\n\t\t\t}\n\t\t}\n\t\
    }\n\treturn n;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7zqwlhf_.d(51): unittest failure

    ----------------

    ??:? _d_unittestp [0x427fad]

    ??:? void tmp7zqwlhf_.__unittest_L46_C1() [0x427c99]

    ??:? void tmp7zqwlhf_.__modtest() [0x427d30]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c027]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aeba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430145]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4305f4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4300d1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ae91]

    ??:? runModuleUnitTests [0x42bdfd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428470]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long result = 0;\n    bool[] isVisited = new bool[string.length];\n    for\
    \ (long i = 0; i < string.length; i++) \n    {\n        if (isVisited[i] == false)\
    \ \n        {\n            result++;\n            isVisited[i] = true;\n     \
    \       char current = string[i];\n            for (long j = i + 1; j < string.length;\
    \ j++) \n            {\n                if (isVisited[j] == false && char.tolower(current)\
    \ == char.tolower(string[j])) \n                {\n                    isVisited[j]\
    \ = true;\n                }\n            }\n        }\n    }\n    return result;\n\
    }\n/*\n    Given two strings, find out if one of them is a permutation of the\
    \ other.\n    >>> is_permutation(\"abcd\", \"dcba\")\n    true\n    >>> is_permutation(\"\
    abcd\", \"dcbd\")\n    false\n    >>> is_permutation(\"abcd\", \"abcc\")\n   \
    \ false\n*/\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm02vuy0d.d(24): Error: no property `tolower` for type `char`

    /tmp/tmpm02vuy0d.d(24): Error: no property `tolower` for type `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm02vuy0d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    uint[] lower = std.string.toLower(string).toUTFz.group;\n    uint[] upper\
    \ = std.string.toUpper(string).toUTFz.group;\n    uint[] tmp;\n    if (lower.length\
    \ > upper.length)\n    {\n        tmp = upper;\n        upper = lower;\n     \
    \   lower = tmp;\n    }\n    foreach (uint x; lower)\n    {\n        uint index\
    \ = upper.indexOf(x);\n        if (index != -1)\n        {\n            upper[index]\
    \ = 0;\n        }\n    }\n    return (count!(bool)(upper));\n}\n/*\n    Write\
    \ a function that returns an array of Fibonacci numbers up to a given number.\n\
    \        >>> fibonacci_numbers(10)\n        [0L, 1L, 1L, 2L, 3L, 5L, 8L]\n*/\n\
    long[] fibonacci_numbers(long number) \n{\n    long[] result = new long[];\n \
    \   foreach (long x; 0L .. number)\n    {\n        if (x == 0L || x == 1L)\n \
    \       {\n            result ~= x;\n        }\n        else\n        {\n    \
    \        long tmp = result[result.length - 1] + result[result.length - 2];\n \
    \           if (tmp <= number)\n            {\n                result ~= tmp;\n\
    \            }\n        }\n    }\n    return result;\n}\n/*\nGiven a list of items,\
    \ return the longest increasing subsequence.\n    >>> longest_increasing_subsequence([1,\
    \ 3, 4, 9, 5, 12, 6, 7, 8])\n    [1, 3, 4, 5, 6, 7, 8]\n    >>> longest_increasing_subsequence([3,\
    \ 5, 10, 2, 1, 20])\n    [3, 5, 10, 20]\n*/\nT[] longest_increasing_subsequence(T)(T[]\
    \ items) \n{\n    long[] result = new long[];\n    long[] result2 = new long[];\n\
    \    foreach (long x; 0L .. items.length)\n    {\n        if (x == 0L)\n     \
    \   {\n            result\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp2rffi_9.d(73): Error: found `unittest` when expecting `;` following
    statement

    /tmp/tmpp2rffi_9.d(83): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpp2rffi_9.d(83): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpp2rffi_9.d(83): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp2rffi_9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \t//in case user forgets to lowercase\n\tchar[] char_ = string.toLower.toCharArray();\n\
    \treturn char_.uniq.length;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpckdc5wm3.d(14): Error: no property `toLower` for type `string`

    /tmp/tmpckdc5wm3.d(15): Error: no property `uniq` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpckdc5wm3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long distinctCount = 0;\n    foreach(immutable char current; string)\n  \
    \  {\n        distinctCount += !std.array.canFind(string[0..$-1], current.toLower);\n\
    \    }\n    return distinctCount;\n}\n/*\n Given a string, find out how many of\
    \ those characters occur more than once, case insensitive.\n    >>> count_duplicate_characters(\"\
    xyzXYZ\")\n    0L\n    >>> count_duplicate_characters(\"Jerry\")\n    4L\n   \
    \ >>> count_duplicate_characters(\"TomTom\")\n    3L\n*/\nlong count_duplicate_characters(string\
    \ string) \n{\n    long duplicateCount = 0;\n    foreach(immutable char current;\
    \ string)\n    {\n        foreach(immutable char other; string[0..$-1])\n    \
    \    {\n            if(current.toLower == other.toLower)\n            {\n    \
    \            duplicateCount++;\n                break;\n            }\n      \
    \  }\n    }\n    return duplicateCount;\n}\n/*\n Given a string, find out how\
    \ many of those characters occur more than once and how many times. \n The output\
    \ should be a two dimensional array with two columns and n rows, where n is the\
    \ number of characters that occur more than once in the input.\n The first column\
    \ should contain the character that occurs more than once.\n The second column\
    \ should contain the number of times that character occurs.\n    \n    >>> count_duplicate_characters_in_string(\"\
    xyzXYZ\")\n    []\n    >>> count_duplicate_characters_in_string(\"Jerry\")\n \
    \   [[\"e\", 2L], [\"r\", 2L], [\"J\", 1L], [\"y\", 1L]]\n    >>> count_duplicate_characters_in_string(\"\
    TomTom\")\n    [[\"T\", 2L], [\"o\", 2L], [\"m\", 2L]]\n*/\nlong[][] count_duplicate_characters_in_string(string\
    \ string) \n{\n    long[][] duplicateChars = [[],[]];\n    foreach(immutable char\
    \ current; string)\n    {\n        if(duplicateChars[0].canFind\nunittest\n{\n\
    \    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\"\
    ) == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2n5ge4oz.d(64): Error: found `unittest` when expecting `)`

    /tmp/tmp2n5ge4oz.d(74): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp2n5ge4oz.d(74): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2n5ge4oz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    auto set = SortedSet!(char)();\n    set.insert(string.toLower());\n    return\
    \ set.length;\n}\n/*\nWrite a function that converts a string (no newlines) to\
    \ a rectangle of characters with each character centered in its cell,\nhence a\
    \ rectangle of the smallest possible size that fits the string. You can pad empty\
    \ space on any side of the rectangle as needed\n    >>> make_rectangle(\"Hello\
    \ there\")\n    \"\"\"\\\n    +-----+\n    |Hello|\n    | there|\n    +-----+\n\
    \    \"\"\"\n    >>> make_rectangle(\"Ph'nglui mglw'nafh Cthulhu R'lyeh wgah'nagl\
    \ fhtagn\")\n    \"\"\"\\\n    +-------------------------------------------------+\n\
    \    |Ph'nglui                                         |\n    |mglw'nafh     \
    \                                   |\n    |Cthulhu                          \
    \               |\n    |R'lyeh                                           |\n \
    \   |wgah'nagl                                        |\n    |fhtagn         \
    \                                  |\n    +-------------------------------------------------+\n\
    \    \"\"\"\n*/\nstring make_rectangle(string string) \n{\n    int length = string.length;\n\
    \    int height = length/2 + length%2;\n    string[] lines = new string[height];\n\
    \    foreach(i; 0..height)\n    {\n        string line = \"\";\n        foreach(j;\
    \ 0..(length - 1)/height + 1)\n        {\n            line ~= string[i + j*height];\n\
    \        }\n        lines[i] = line;\n    }\n    int maxLen = reduce!max((a, b)\
    \ => a.length > b.length ? a : b)(lines);\n    // centering\n    foreach(i; 0..height)\n\
    \    {\n        lines[i] = \"|\" ~ lines[i] ~ replicate(\" \", maxLen - lines[i].length)\
    \ ~ \"|\";\n    }\n    string topBottom = \"+\" ~ replicate(\"-\", maxLen) ~ \"\
    +\";\n    string res = topBottom ~ \"\\n\";\n    foreach(line; lines)\n    {\n\
    \        res ~= line ~ \"\\n\";\n    }\n    res ~= topBottom\nunittest\n{\n  \
    \  alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\")\
    \ == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0hd1ixl6.d(66): Error: found `unittest` when expecting `;` following
    statement

    /tmp/tmp0hd1ixl6.d(76): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0hd1ixl6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return map!(toLowerCase)(string).toSet().length;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of,\
    \ \n and return the first unique character (in its original case)\n    >>> first_unique_character(\"\
    abcdabcd\")\n    'e'\n    >>> first_unique_character(\"xyzXYZ\")\n    'x'\n  \
    \  >>> first_unique_character(\"Jerry\")\n    'J'\n*/\nchar first_unique_character(string\
    \ string)\n{\n    auto [lowerCaseString, upperCaseString] = unzip(string.map!(toLowerCase)(string),\
    \ string);\n    foreach(i, c; lowerCaseString)\n    {\n        string[i] = c;\n\
    \    }\n    string = string.toSet();\n    foreach(c; string)\n    {\n        if(c.isUpper)\n\
    \        {\n            return c;\n        }\n    }\n    return '\\0';\n}\n/*\n\
    Given a string, return true if it is a palindrome, false otherwise\n    >>> is_palindrome(\"\
    abcba\")\n    true\n    >>> is_palindrome(\"abc\")\n    false\n*/\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo6q6v5dw.d(27): Error: basic type expected, not `[`

    /tmp/tmpo6q6v5dw.d(27): Error: found `,` when expecting `]`

    /tmp/tmpo6q6v5dw.d(27): Error: semicolon expected, not `]`

    /tmp/tmpo6q6v5dw.d(27): Error: found `]` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo6q6v5dw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    string result = \"\";\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk9jkgkxc.d(14): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk9jkgkxc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return std.algorithm.uniq(string.toLower.toDchars.map!(x => x.to!long)).length;\n\
    }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf8v81adr.d(13): Error: undefined identifier `algorithm` in package
    `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf8v81adr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    foreach(char c; string) \n    {\n        if(!c.isLetter())\n\
    \            continue;\n        count += c.toLower().isLetter ? c.toLower().isLetter\
    \ : -1; \n    }\n    return count;\n}\n/*\n Given a string, remove the first occurance\
    \ of a char from the string\n    >>> remove_char(\"Jerry\", 'J')\n    erry\n*/\n\
    unittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0ynfls0i.d(16): Error: no property `isLetter` for type `char`

    /tmp/tmp0ynfls0i.d(18): Error: no property `toLower` for type `char`

    /tmp/tmp0ynfls0i.d(18): Error: no property `toLower` for type `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0ynfls0i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    /*string temp;\n    foreach(elem; string)\n    {\n        if(elem.length)\n\
    \        {\n            temp ~= elem.upper;\n        }\n    }\n    string = temp;*/\n\
    \    long count = 0;\n    for(long i = 0; i < string.length; i++)\n    {\n   \
    \     if(string[i] >= 'a' && string[i] <= 'z')\n        {\n            if(!string[i..i+1].canFind(\"\
    a\") && !string[i..i+1].canFind(\"A\"))\n            {\n                count++;\n\
    \            }\n        }\n        else if(string[i] >= 'A' && string[i] <= 'Z')\n\
    \        {\n            if(!string[i..i+1].canFind(\"a\") && !string[i..i+1].canFind(\"\
    A\"))\n            {\n                count++;\n            }\n        }\n   \
    \ }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpstvbzixg.d(27): Error: no property `canFind` for type `string`

    /tmp/tmpstvbzixg.d(27): Error: no property `canFind` for type `string`

    /tmp/tmpstvbzixg.d(34): Error: no property `canFind` for type `string`

    /tmp/tmpstvbzixg.d(34): Error: no property `canFind` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpstvbzixg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return toSet(string.toLower()).length;\n}\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4ldmkpa0.d(13): Error: undefined identifier `toSet`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ldmkpa0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long res = 0;\n    foreach(char c; string.chars)\n    {\n        if (c.isUpper)\n\
    \        {\n            char lower = c.toLower;\n            if (lower !in res)\n\
    \            {\n                res ~= lower;\n            }\n        }\n    \
    \    else if (c !in res)\n        {\n            res ~= c;\n        }\n    }\n\
    \    return res.length;\n}\n/*\n    Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n    >>> count_distinct_characters_1(\"\
    xyzXYZ\")\n    3L\n    >>> count_distinct_characters_1(\"Jerry\")\n    4L\n  \
    \  \n*/\nlong count_distinct_characters_1(string string) \n{\n    long res = 0;\n\
    \    foreach(char c; string.chars)\n    {\n        char lower = c.toLower;\n \
    \       if (lower !in res)\n        {\n            res ~= lower;\n        }\n\
    \    }\n    return res.length;\n}\n/*\n    Given a list of numbers, find out how\
    \ many duplicates there are, and return them as a list.\n    >>> count_duplicates([2,\
    \ 3, 4, 3, 5, 6, 4, 7, 8, 9, 10, 4, 11, 12, 13, 14, 15, 15, 16, 17, 17, 18, 19,\
    \ 20, 20])\n    4L\n    >>> count_duplicates([2, 3, 4, 3, 5, 6, 4, 7, 8, 9, 10,\
    \ 4, 11, 12, 13, 14, 15, 15, 16, 17, 17, 18, 19, 20, 20])\n    [4, 15, 17, 20]\n\
    */\nlong count_duplicates(long[] arr) \n{\n    //long res = 0;\n    auto res =\
    \ new long[];\n    foreach(long i; arr)\n    {\n        if (i in res)\n      \
    \  {\n            continue;\n        }\n        foreach(long j; arr)\n       \
    \ {\n            if (i == j)\n            {\n               \nunittest\n{\n  \
    \  alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\")\
    \ == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpivjtkul9.d(74): Error: found `unittest` instead of statement

    /tmp/tmpivjtkul9.d(84): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpivjtkul9.d(84): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpivjtkul9.d(84): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpivjtkul9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    // Initially fill the map with the characters of the string\n    auto char_map\
    \ = typeof(return)();\n    foreach(c; string)\n    {\n        char_map[c] = true;\n\
    \    }\n    // Return the number of distinct characters in the map\n    return\
    \ char_map.length;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkxae1jxe.d(17): Error: only one index allowed to index `long`

    /tmp/tmpkxae1jxe.d(20): Error: no property `length` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkxae1jxe.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    auto freq = count(string.release());\n    return freq.length;\n}\n// char\n\
    alias F = dchar;\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmosh1me0.d(13): Error: undefined identifier `count`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmosh1me0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \tstring l_string = toLower(string);\n\tbool[] table = [false; 256];\n\tforeach(char\
    \ c; l_string) {\n\t\ttable[c] = true;\n\t}\n\treturn count(table);\n}\n/*\n Given\
    \ a string, print all unique characters (characters in a string are not repeated)\n\
    \ \n    >>> print_all_unique_characters(\"xyzXYZ\")\n    xyz\n    >>> print_all_unique_characters(\"\
    Jerry\")\n    Jer\n    \n*/\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe5y5l9e4.d(14): Error: comma expected separating array initializers,
    not `;`

    /tmp/tmpe5y5l9e4.d(14): Error: semicolon expected, not `256`

    /tmp/tmpe5y5l9e4.d(14): Error: found `]` when expecting `;` following statement

    /tmp/tmpe5y5l9e4.d(14): Deprecation: use `{ }` for an empty statement, not `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe5y5l9e4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    auto lower_string = toLower(string);\n    return to!string(lower_string).length;\n\
    }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl_72fcq0.d(13): Error: undefined identifier `toLower`

    /tmp/tmpl_72fcq0.d(14): Error: template instance `to!string` template `to` is
    not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl_72fcq0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    auto chars = string.toLower().chars.sort().unique;\n    return chars.length;\n\
    }\n \n/*\nGiven a string, check if it is a permutation of a palindrome\n    >>>\
    \ is_permutation_of_palindrome(\"Jerry\")\n    true\n    >>> is_permutation_of_palindrome(\"\
    Jerry is the best\")\n    false\n    >>> is_permutation_of_palindrome(\"race car\"\
    )\n    true\n*/\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpauc1dstd.d(13): Error: no property `toLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpauc1dstd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long l=0;\n    foreach(c;string)\n    {\n        if(c!=' ')\n        {\n\
    \            l++;\n        }\n    }\n    return l;\n}\nunittest\n{\n    alias\
    \ candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n\
    \    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu9w6dm5p.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ded]

    ??:? void tmpu9w6dm5p.__unittest_L23_C1() [0x427b00]

    ??:? void tmpu9w6dm5p.__modtest() [0x427b6c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb13]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9a6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb39]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fac5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a97d]

    ??:? runModuleUnitTests [0x42b8e9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42823c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \     static assert(is(typeof(string.front) == dchar));\nunittest\n{\n    alias\
    \ candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n\
    \    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb5452fqd.d(14): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb5452fqd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    \n    return std.uniq(std.sort(string)).length;\n}\nunittest\n{\n    alias\
    \ candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n\
    \    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpliuw79ch.d(14): Error: undefined identifier `uniq` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpliuw79ch.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \     char[] char_array = string.chars();\n     return char_array.length.sort.uniq.length;\n\
    }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph5gshbe5.d(13): Error: no property `chars` for type `string`

    /tmp/tmph5gshbe5.d(14): Error: no property `sort` for type `ulong`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph5gshbe5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \treturn string.toLower().unique.length;\n}\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_0jfvayo.d(13): Error: no property `toLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_0jfvayo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    auto distinctChars = new HashSet!(char)();\n    foreach(char c; string)\n\
    \    {\n        distinctChars.insert(tolower(c));\n    }\n    return distinctChars.length;\n\
    }\n/*\nGiven an integer, find out if its divisible by 2, 3, or 5, or all three\n\
    \    >>> is_divisible_by_2_3_5(16)\n    (1L, 0L, 0L, 0L)\n    >>> is_divisible_by_2_3_5(56)\n\
    \    (1L, 1L, 0L, 0L)\n    >>> is_divisible_by_2_3_5(35)\n    (0L, 0L, 1L, 0L)\n\
    \    >>> is_divisible_by_2_3_5(0)\n    (1L, 1L, 1L, 1L)\n    >>> is_divisible_by_2_3_5(11)\n\
    \    (0L, 0L, 0L, 0L)\n*/\nTuple!(long, long, long, long) is_divisible_by_2_3_5(long\
    \ number) \n{\n    return tuple(number % 2 == 0, number % 3 == 0, number % 5 ==\
    \ 0, number == 0);\n}\n/*\nGiven a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    >>> count_distinct_characters(\"\
    xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n\
    */\nlong count_distinct_characters(string string) \n{\n    auto distinctChars\
    \ = new HashSet!(char)();\n    foreach(char c; string)\n    {\n        distinctChars.insert(tolower(c));\n\
    \    }\n    return distinctChars.length;\n}\n/*\nFind out if a string is a palindrome\
    \ (reads the same from left to right and from right to left)\n    >>> is_palindrome(\"\
    x\")\n    true\n    >>> is_palindrome(\"xy\")\n    false\n    >>> is_palindrome(\"\
    aaa\")\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpltjslp0i.d(54): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpltjslp0i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \timmutable uniqued_string = uniq(string.toLower());\n\treturn uniqued_string.length;\n\
    }\n/*\n Given a string, find out how many distinct consonants (regardless of case)\
    \ does it consist of\n    >>> count_distinct_consonants(\"xyzXYZ\")\n    2L\n\
    \    >>> count_distinct_consonants(\"Jerry\")\n    3L\n*/\nlong count_distinct_consonants(string\
    \ string) \n{\n\timmutable consonants = \"bcdfghjklmnpqrstvwxyz\";\n\timmutable\
    \ uniqued_string = uniq(string.toLower());\n\timmutable count = 0;\n\tforeach(letter;\
    \ uniqued_string)\n\t{\n\t\tif(letter in consonants)\n\t\t{\n\t\t\tcount++;\n\t\
    \t}\n\t}\n\treturn count;\n}\n/*\n Given a string, find out how many distinct\
    \ vowels (regardless of case) does it consist of\n    >>> count_distinct_vowels(\"\
    xyzXYZ\")\n    1L\n    >>> count_distinct_vowels(\"Jerry\")\n    1L\n*/\nlong\
    \ count_distinct_vowels(string string) \n{\n\timmutable vowels = \"aeiou\";\n\t\
    immutable uniqued_string = uniq(string.toLower());\n\timmutable count = 0;\n\t\
    foreach(letter; uniqued_string)\n\t{\n\t\tif(letter in vowels)\n\t\t{\n\t\t\t\
    count++;\n\t\t}\n\t}\n\treturn count;\n}\n/*\n Given a string, find out how many\
    \ distinct consonants and vowels (regardless of case) does it consist of\n   \
    \ >>> count_distinct_consonants_and_vowels(\"xyzXYZ\")\n    3L\n    >>> count_distinct_consonants_and_vowels(\"\
    Jerry\")\n    4L\n*/\nlong count_distinct_consonants_and_vowels(string string)\
    \ \n{\n\timmutable vowels = \"aeiou\";\n\timmutable consonants = \"bcdfghjkl\n\
    unittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeyw15x7w.d(73): Error: Implicit string concatenation is deprecated,
    use "bcdfghjkl\x0aunittest\x0a{\x0a    alias candidate = count_distinct_characters;\x0a\x0a    assert(candidate("
    ~ ") == 0L);\x0a    assert(candidate(" instead

    /tmp/tmpeyw15x7w.d(74): Error: semicolon expected following auto declaration,
    not `abcde`

    /tmp/tmpeyw15x7w.d(74): Error: found `") == 5L);\x0a    assert(candidate("` when
    expecting `;` following statement

    /tmp/tmpeyw15x7w.d(75): Error: found `") == 5L);\x0a    assert(candidate("` when
    expecting `;` following statement

    /tmp/tmpeyw15x7w.d(76): Error: found `") == 1L);\x0a    assert(candidate("` when
    expecting `;` following statement

    /tmp/tmpeyw15x7w.d(77): Error: found `jERRY` when expecting `;` following statement

    /tmp/tmpeyw15x7w.d(77): Error: unterminated string constant starting at /tmp/tmpeyw15x7w.d(77)

    /tmp/tmpeyw15x7w.d(77): Error: found `""` when expecting `;` following statement

    /tmp/tmpeyw15x7w.d(79): Error: found `End of File` when expecting `}` following
    compound sta'
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long result = 0;\n    foreach(char; string) \n    {\n        if(!result)\
    \ result++;\n        else if(result && char != string[$-1]) result++;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpee7qyamd.d(14): Error: no identifier for declarator `char`

    /tmp/tmpee7qyamd.d(17): Error: found `!=` when expecting `.` following char

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpee7qyamd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return to!Set(map!(toUpper,to!(dchar[])(string))).length;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplhcpazcn.d(13): Error: template instance `to!Set` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplhcpazcn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \talias char_lower = to!char(0);\n\talias char_upper = to!char(0);\n\talias char_count\
    \ = size_t;\n\t\n\tauto char_map = new char[256];\n\tauto char_count_map = new\
    \ size_t[256];\n\t\n\tauto len = string.length;\n\t\n\tforeach(i; 0..256)\n\t\
    {\n\t\tchar_map[i] = cast(char)i;\n\t\tchar_count_map[i] = 0;\n\t}\n\t\n\tforeach(i;\
    \ 0..len)\n\t{\n\t\tchar_lower = to!char(string[i]);\n\t\tchar_upper = to!char(string[i]);\n\
    \t\t\n\t\tchar_lower = toLower(char_lower);\n\t\tchar_upper = toUpper(char_upper);\n\
    \t\t\n\t\tauto char_idx = cast(size_t)char_lower;\n\t\tchar_count_map[char_idx]\
    \ = 1;\n\t\t\n\t\tif(char_upper != char_lower)\n\t\t{\n\t\t\tchar_idx = cast(size_t)char_upper;\n\
    \t\t\tchar_count_map[char_idx] = 1;\n\t\t}\n\t}\n\t\n\tchar_count = 0;\n\tforeach(i;\
    \ 0..256)\n\t{\n\t\tchar_count += char_count_map[i];\n\t}\n\t\n\treturn char_count;\n\
    }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph3wrzj1y.d(13): Error: unexpected `(` in declarator

    /tmp/tmph3wrzj1y.d(13): Error: basic type expected, not `0`

    /tmp/tmph3wrzj1y.d(13): Error: found `0` when expecting `)`

    /tmp/tmph3wrzj1y.d(13): Error: semicolon expected to close `alias` declaration

    /tmp/tmph3wrzj1y.d(13): Error: found `)` instead of statement

    /tmp/tmph3wrzj1y.d(14): Error: unexpected `(` in declarator

    /tmp/tmph3wrzj1y.d(14): Error: basic type expected, not `0`

    /tmp/tmph3wrzj1y.d(14): Error: found `0` when expecting `)`

    /tmp/tmph3wrzj1y.d(14): Error: semicolon expected to close `alias` declaration

    /tmp/tmph3wrzj1y.d(14): Error: found `)` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph3wrzj1y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    auto result = new Map!(string, int) ();\n    foreach(char character; string)\
    \ \n    {\n        result[character.toLower().toString()] = 0;\n    }\n    return\
    \ result.length;\n}\n/*\n Given a string, find out how many unique characters\
    \ (regardless of case) does it consist of\n    >>> count_unique_characters(\"\
    xyzXYZ\")\n    6L\n    >>> count_unique_characters(\"Jerry\")\n    5L\n    \n\
    */\nlong count_unique_characters(string string) \n{\n    auto result = new Set!(string)\
    \ ();\n    foreach(char character; string) \n    {\n        result.insert(character.toLower().toString());\n\
    \    }\n    return result.length;\n}\n/*\n Given a string, find out the length\
    \ of the longest consecutive character (regardless of case) does it consist of\n\
    \    >>> longest_consecutive_character(\"xyzXYZ\")\n    3L\n    >>> longest_consecutive_character(\"\
    Jerry\")\n    1L\n    >>> longest_consecutive_character(\"aaaaaaaAAAAAA\")\n \
    \   7L\n    \n*/\nlong longest_consecutive_character(string string) \n{\n    auto\
    \ result = new Map!(string, int) ();\n    long maxResult = 0;\n    foreach(char\
    \ character; string) \n    {\n        const string key = character.toLower().toString();\n\
    \        const int value = result.get(key, -1) + 1;\n        result[key] = value;\n\
    \        maxResult = max(maxResult, value);\n    }\n    return maxResult;\n}\n\
    /*\n Given a string, find out the number of words (whitespace separated) in the\
    \ string\n    >>> count_words(\"Hello World\")\n    2L\n    >>> count_words(\"\
    D is the hardest programming language\")\n    7L\n    >>> count_words(\"   \"\
    )\n    0L\n    \n*/\nlong count_words(string string) \n{\n    return string.split().length;\n\
    }\n/*\n Given a string, find out the number of the words that begin with capital\
    \ letters.\n    >>> count_capped\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprvs8alxv.d(74): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprvs8alxv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long counter = 0;\n    int i = 0;\n    while (i < string.length)\n    {\n\
    \        if (isupper(string[i]))\n        {\n            string[i] = tolower(string[i]);\n\
    \        }\n        i++;\n    }\n    for (int i = 0; i < string.length; i++)\n\
    \    {\n        for (int k = 0; k < string.length; k++)\n        {\n         \
    \   if (string[i] == string[k])\n            {\n                string[k] = '\\\
    0';\n            }\n        }\n    }\n    for (int i = 0; i < string.length; i++)\n\
    \    {\n        if (string[i] != '\\0')\n        {\n            counter++;\n \
    \       }\n    }\n    return counter;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsz6lgziu.d(17): Error: undefined identifier `isupper`

    /tmp/tmpsz6lgziu.d(19): Error: undefined identifier `tolower`

    /tmp/tmpsz6lgziu.d(23): Error: variable `i` is shadowing variable `tmpsz6lgziu.count_distinct_characters.i`

    /tmp/tmpsz6lgziu.d(29): Error: cannot modify `immutable` expression `string[cast(ulong)k]`

    /tmp/tmpsz6lgziu.d(33): Error: variable `i` is shadowing variable `tmpsz6lgziu.count_distinct_characters.i`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsz6lgziu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return string.toLower.unique.length;\n}\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1z3gy6wl.d(13): Error: no property `toLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1z3gy6wl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long j = 0;\n    foreach(ch; string.lower)\n    {\n        if(!string.lower[0..j].contains(ch))\n\
    \        {\n            j++;\n        }\n    }\n    return j;\n}\nunittest\n{\n\
    \    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\"\
    ) == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb0l0sh41.d(14): Error: no property `lower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb0l0sh41.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return string.toLower.unique.length;\n}\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1z3gy6wl.d(13): Error: no property `toLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1z3gy6wl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count;\n    size_t len;\n    long i;\n    int case_flag;\n    long j;\n\
    \    char dchar;\n    char case_pair[2];\n    struct case_pair{\n        char\
    \ a;\n        char b;\n    } ;\n    struct case_pair Ccase_pair[13] = \n    {\n\
    \        {'a','A'},\n        {'b','B'},\n        {'c','C'},\n        {'d','D'},\n\
    \        {'e','E'},\n        {'f','F'},\n        {'g','G'},\n        {'h','H'},\n\
    \        {'i','I'},\n        {'j','J'},\n        {'k','K'},\n        {'l','L'},\n\
    \        {'m','M'}\n    };\n    len = strlen(string);\n    count = len;\n    for\
    \ (i = 0; i < len; i++)\n    {\n        for (j = 0; j < 13; j++)\n        {\n\
    \            if (string[i] == Ccase_pair[j].a)\n            {\n              \
    \  string[i] = Ccase_pair[j].b;\n                break;\n            }\n     \
    \   }\n    }\n    for (i = 0; i < len; i++)\n    {\n        dchar = string[i];\n\
    \        case_flag = 0;\n        for (j = i + 1; j < len; j++)\n        {\n  \
    \          if (dchar == string[j])\n            {\n                case_flag =\
    \ 1;\n                break;\n            }\n        }\n        if (case_flag\
    \ == 1)\n        {\n            count = count - 1;\n        }\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1gs5lqup.d(18): Error: no identifier for declarator `char`

    /tmp/tmp1gs5lqup.d(18): Error: no identifier for declarator `dchar`

    /tmp/tmp1gs5lqup.d(18): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmp1gs5lqup.d(19): Deprecation: instead of C-style syntax, use D-style syntax
    `char[2] case_pair`

    /tmp/tmp1gs5lqup.d(23): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmp1gs5lqup.d(24): Error: { } expected following `struct` declaration

    /tmp/tmp1gs5lqup.d(26): Error: found `}` when expecting `;` following statement

    /tmp/tmp1gs5lqup.d(26): Error: found `,` instead of statement

    /tmp/tmp1gs5lqup.d(27): Error: found `,` instead of statement

    /tmp/tmp1gs5lqup.d(29): Error: found `}` when expecting `;` following statement

    /tmp/tmp1gs5lqup.d(29): Error: found `,` instead of statement

    /tmp/tmp1gs5lqup.d(31): Error: found `}` when expecting `;` following statement

    /tmp/tmp1gs5lqup.d(31): Error: found `,` instead of statement

    /tmp/tmp1gs5lqup.d(33): Error: found `}` when expecting `;` follo'
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    auto result = string.toLower().dup.unique;\n    return result.length;\n}\n\
    unittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgvv355nf.d(13): Error: no property `toLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgvv355nf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return distinct(toLower(string)).length;\n}\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyhb1uvjv.d(13): Error: undefined identifier `distinct`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyhb1uvjv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    //return (long)std.array.uniq(string.tolower).length;\n    return (long)string.tolower.length;\n\
    }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg3homt29.d(14): Error: C style cast illegal, use `cast(long)string.tolower.length`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg3homt29.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return set(string.tolower).length;\n}\nunittest\n{\n    alias candidate =\
    \ count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3caqd0tm.d(13): Error: undefined identifier `set`, did you mean
    template `get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3caqd0tm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    // Convert string to lower case\n    string = lower(string);\n    long length\
    \ = string.length;\n    // Store characters in a set\n    auto set = newSet();\n\
    \    foreach(i; 0..length)\n    {\n        set.insert(string[i]);\n    }\n   \
    \ return set.length;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps4incd07.d(14): Error: undefined identifier `lower`

    /tmp/tmps4incd07.d(17): Error: undefined identifier `newSet`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps4incd07.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    // create a map for all lower case letters\n    char[char] seen;\n    //\
    \ walk throught all the letters in the string\n    foreach(char c; string) \n\
    \    {\n        // put the lowercase version of the char in the map\n        seen[toLower(c)]\
    \ = c;\n    }\n    // return the length of the map (the number of keys)\n    return\
    \ seen.length;\n}\n/*\n Given a list of string, find the most frequently used\
    \ letter throughout the list\n    >>> find_most_frequent_letter([\"aaa\", \"bbbb\"\
    , \"ccc\"])\n    ('a', 3L)\n    >>> find_most_frequent_letter([\"abc\", \"abcd\"\
    , \"abcdef\", \"abcde\", \"abcdefg\"])\n    ('a', 1L)\n    \n*/\nTuple!(char,long)\
    \ find_most_frequent_letter(string[] list) \n{\n    // create a map of char to\
    \ int\n    char[long] seen;\n    // walk through the list\n    foreach(string\
    \ s; list) \n    {\n        // walk through all the chars in the string\n    \
    \    foreach(char c; s) \n        {\n            // put the lowercase version\
    \ of the char in the map\n            seen[toLower(c)]++;\n        }\n    }\n\
    \    // max we will use for finding the largest value seen\n    long max = 0;\n\
    \    // char we will use for finding the largest key seen\n    char maxKey;\n\
    \    // walk through the map to find the largest value seen\n    foreach(char\
    \ key, long value; seen) \n    {\n        if(value > max) \n        {\n      \
    \      max = value;\n            maxKey = key;\n        }\n    }\n    // return\
    \ a tuple of the max key and value\n    return tuple(maxKey, max);\n}\n/*\n Given\
    \ a list of string, find the longest string in the list\n    >>> find_longest_string([\"\
    aaa\", \"bbbb\", \"ccc\"])\n    \"bbbb\"\n    >>> find_longest_string([\"abc\"\
    , \"abcd\", \"abcdef\", \"abcde\", \"abcdefg\"]\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuvs2c2ut.d(62): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuvs2c2ut.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return string.length.__unique().length;\n}\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbz7ckgmh.d(13): Error: no property `__unique` for type `ulong`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbz7ckgmh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    // \n    auto isChar = tuple!(isAlpha, isNumeric, isPunct);\n    // \n  \
    \  auto _ = isChar.tupleof.map!(a => a(string[0])).tupleof;\n    // \n    auto\
    \ result = _.foldLeft!((b, a) => b || a).tupleof;\n    // \n    return result;\n\
    \    // \n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmopmxzoo.d(14): Error: undefined identifier `isAlpha`

    /tmp/tmpmopmxzoo.d(14): Error: undefined identifier `isNumeric`

    /tmp/tmpmopmxzoo.d(14): Error: undefined identifier `isPunct`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmopmxzoo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return length(set(to!string(tolower(string))));\n}\nunittest\n{\n    alias\
    \ candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n\
    \    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj7w1a552.d(13): Error: undefined identifier `length`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj7w1a552.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    char[] chars = toUpper(string).dup;\n    std.algorithm.sort(chars);\n   \
    \ auto c = std.set.Cmp.byKey!((a, b) => a < b);\n    auto set = std.set(c);\n\
    \    set.insert(chars);\n    return set.length;\n}\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2d96gp_f.d(13): Error: undefined identifier `toUpper`

    /tmp/tmp2d96gp_f.d(14): Error: undefined identifier `algorithm` in package `std`

    /tmp/tmp2d96gp_f.d(15): Error: undefined identifier `set` in package `std`

    /tmp/tmp2d96gp_f.d(16): Error: undefined identifier `set` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2d96gp_f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return distinct(string.tolower());\n}\n/*\n Given a string, find out how\
    \ many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"\
    xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n*/\n\
    long count_distinct_characters2(string string) \n{\n    return distinct(string.tolower().map!(a\
    \ => a.isLower ? a : a.toLower()));\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"\
    xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n*/\n\
    long count_distinct_characters3(string string) \n{\n    return distinct(string.toLower);\n\
    }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0m247t_e.d(13): Error: undefined identifier `distinct`

    /tmp/tmp0m247t_e.d(24): Error: undefined identifier `distinct`

    /tmp/tmp0m247t_e.d(35): Error: undefined identifier `distinct`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0m247t_e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    size_t distinct_chars = 0;\n    size_t [] characters = new size_t[256];\n\
    \    foreach(char c; string) \n    {\n        size_t index = cast(size_t)toLower(c);\n\
    \        if(characters[index] == 0) \n        {\n            distinct_chars++;\n\
    \            characters[index] = 1;\n        }\n    }\n    return distinct_chars;\n\
    }\n/*\n Write a function that takes a string and returns it in reverse order (i.e.\
    \ the last character of the string becomes the first and vice versa)\n    >>>\
    \ reverse_string(\"Zagreb\")\n    \"bergaZ\"\n    >>> reverse_string(\"abcde\"\
    )\n    \"edcba\"\n    >>> reverse_string(\"a\")\n    \"a\"\n    >>> reverse_string(\"\
    \")\n    \"\"\n*/\nstring reverse_string(string string) \n{\n    string reverse\
    \ = \"\";\n    foreach(int index; reverse(0..string.length)) \n    {\n       \
    \ reverse ~= string[index];\n    }\n    return reverse;\n}\n/*\n Write a function\
    \ that takes a string and two integers index1 and index2 and returns the character\
    \ at the index1 in the string \n and the character at the index2 in the string.\n\
    \    >>> swap_characters(\"Zagreb\", 0, 4)\n    (\"a\", \"b\")\n    >>> swap_characters(\"\
    abcde\", 0, 4)\n    (\"e\", \"a\")\n    >>> swap_characters(\"a\", 0, 0)\n   \
    \ (\"a\", \"a\")\n    >>> swap_characters(\"\", 0, 0)\n    (\"\", \"\")\n*/\n\
    typeof(return) swap_characters(string string, int index1, int index2) \n{\n  \
    \  return (string[index1], string[index2]);\n}\n/*\n Write a function that takes\
    \ a string as an argument and returns a tuple consisting of the number of uppercase\
    \ characters and the number of lowercase characters in the string.\n    >>> count_uppercase_lowercase(\"\
    \")\n    (0L, 0L)\n    >>> count_uppercase_lowercase(\"a\")\n    (\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaow9npev.d(40): Error: found `..` when expecting `,`

    /tmp/tmpaow9npev.d(62): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaow9npev.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    auto[chars,_,_] = std.algorithm.group(string.lower);\n    return chars.length;\n\
    }\n \n \n/*\n Given a string, check whether it is a palindrome or not\n    >>>\
    \ is_palindrome(\"Jerry\")\n    true\n    >>> is_palindrome(\"Tom\")\n    false\n\
    */\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpti26zhd4.d(13): Error: basic type expected, not `[`

    /tmp/tmpti26zhd4.d(13): Error: found `,` when expecting `]`

    /tmp/tmpti26zhd4.d(13): Error: semicolon expected, not `]`

    /tmp/tmpti26zhd4.d(13): Error: found `]` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpti26zhd4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    //get the length of the string\n    size_t length = string.length;\n    //declare\
    \ an array of characters\n    char characters[length];\n    //set the contents\
    \ of the array of characters to the contents of the string\n    string.toCharArray(characters);\n\
    \    //initialize a counter for the number of distinct characters\n    long count\
    \ = 0;\n    //declare a string of distinct characters\n    string distinct_characters\
    \ = \"\";\n    //loop over the characters in the array of characters\n    for\
    \ (char character : characters)\n    {\n        //convert the character to uppercase\n\
    \        character = toupper(character);\n        //if the character is not already\
    \ contained in the string of distinct characters\n        if (!distinct_characters.contains(character))\n\
    \        {\n            //append the character to the string of distinct characters\n\
    \            distinct_characters += character;\n            //increment the count\n\
    \            count++;\n        }\n    }\n    //return the count\n    return count;\n\
    }\n/*\nGiven a file, read the contents of that file into a string.\n    >>> read_file(\"\
    foo.txt\")\n    \"some text\"\n*/\nstring read_file(string filename)\n{\n    //initialize\
    \ a string to hold the contents of the file\n    string contents = \"\";\n   \
    \ //declare a file and initialize it to the filename\n    File file = SD.open(filename);\n\
    \    //if the file exists\n    if (file)\n    {\n        //read the file one byte\
    \ at a time\n        while (file.available())\n        {\n            //add the\
    \ byte to the contents\n            contents += (char)file.read();\n        }\n\
    \        //close the file\n        file.close();\n    }\n    //return the contents\n\
    \    return contents;\n}\n/*\nGiven a string and a character, remove all instances\
    \ of that character in the string.\n    >>> remove_character(\"the quick brown\
    \ fox\", 't')\n    \"he quick brown fox\"\n*/\nstring remove_character(string\
    \ string, char character)\n{\n    //get the length of the string\n    size_t length\
    \ = string.length;\n    //declare an array of characters\n    char characters[length];\n\
    \nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa6guzldo.d(16): Deprecation: instead of C-style syntax, use D-style
    syntax `char[length] characters`

    /tmp/tmpa6guzldo.d(24): Error: semicolon expected, not `:`

    /tmp/tmpa6guzldo.d(24): Error: expression expected, not `:`

    /tmp/tmpa6guzldo.d(24): Error: found `characters` when expecting `;` following
    `for` condition

    /tmp/tmpa6guzldo.d(58): Error: C style cast illegal, use `cast(char)file.read()`

    /tmp/tmpa6guzldo.d(76): Deprecation: instead of C-style syntax, use D-style syntax
    `char[length] characters`

    /tmp/tmpa6guzldo.d(78): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa6guzldo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n \
    \   { return to!string(to!(\"\", Tuple!(dchar))(string)).length; }\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvqgtpnbm.d(12): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvqgtpnbm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    auto keys = std.array.array!(string).make();\n    foreach(char\
    \ c; string)\n    {\n        if(keys.count == 0)\n        {\n            keys\
    \ ~= c.to!string;\n            count++;\n        }\n        else\n        {\n\
    \            foreach(char key; keys)\n            {\n                if(key !=\
    \ c.to!string)\n                {\n                    keys ~= c.to!string;\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\n/*\n Write a function to flatten a list of lists\
    \ in a single level\n    >>> flatten([[1,2,3],[4,5,6],[7,8,9]])\n    [1,2,3,4,5,6,7,8,9]\n\
    \    >>> flatten([[\"a\",\"b\",\"c\"],[\"d\",\"e\",\"f\"],[\"g\",\"h\",\"i\"]])\n\
    \    [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\"]\n    >>> flatten([[1,2,3,4,5],[6,7,8,9,10]])\n\
    \    [1,2,3,4,5,6,7,8,9,10]\n*/\nT[] flatten(T)(T[][] arr)\n{\n    T[] result;\n\
    \    foreach(item; arr)\n    {\n        result ~= item;\n    }\n    return result;\n\
    }\n/*\n Given a list and a positive integer N, write a function to find the Nth\
    \ permutation of the elements in the list\n    >>> permutation([1,2,3], 1)\n \
    \   [1,2,3]\n    >>> permutation([1,2,3], 2)\n    [1,3,2]\n    >>> permutation([1,2,3],\
    \ 3)\n    [2,1,3]\n    >>> permutation([1,2,3], 4)\n    [2,3,1]\n    >>> permutation([1,2,3],\
    \ 5)\n    [3,1,2]\n    >>> permutation([1,2,3], 6)\n\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5xxetlgg.d(54): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5xxetlgg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \nin\n\
    {\n    auto alphabet = tuple(string.toUpper());\n    int result = 0;\n    for\
    \ (size_t i = 0; i < alphabet.length; i++)\n    {\n        if (alphabet[i] >=\
    \ 65 && alphabet[i] <= 90)\n        {\n            result++;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    auto set = std.array.array!(char)(string.length);\n    foreach(c;string)\n\
    \    {\n        set.insert(c);\n    }\n    return set.length;\n}\n/*\n Given a\
    \ string of words,\n    >>> count_words(\"Hello world! It's a beautiful day, isn't\
    \ it?\")\n    6L\n    \n*/\nlong count_words(string string) \n{\n    if(string.length\
    \ == 0)\n        return 0;\n    else\n        return string.countSplitter(' ')\
    \ + 1;\n}\n/*\n Given a string, find out how many words does it consist of\n \
    \   >>> find_most_common_words(\"Hello world! It's a beautiful day, isn't it?\"\
    )\n    tuple(\"it\", 2L)\n    \n*/\ntuple!(string,long) find_most_common_words(string\
    \ string) \n{\n    if(string.length == 0)\n        return tuple(\"\",0);\n   \
    \ auto words = string.split(' ');\n    auto result = string.splitter(' ').reduce!((a,\
    \ b) => count_words(a) > count_words(b) ? a : b);\n    return tuple(result,count_words(result));\n\
    }\n/*\n Given a string, find out how many words does it consist of\n    >>> find_least_common_words(\"\
    Hello world! It's a beautiful day, isn't it?\")\n    tuple(\"Hello\", 1L)\n  \
    \  \n*/\ntuple!(string,long) find_least_common_words(string string) \n{\n    if(string.length\
    \ == 0)\n        return tuple(\"\",0);\n    auto words = string.split(' ');\n\
    \    auto result = string.splitter(' ').reduce!((a, b) => count_words(a) < count_words(b)\
    \ ? a : b);\n    return tuple(result,count_words(result));\n}\n/*\n Given a string,\
    \ find out how many words does it consist of\n    >>> get_list_of_all_substrings(\"\
    Hello world! It's a beautiful day, isn't it?\")\n    [\"Hello world! It's a beautiful\n\
    unittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpivcxximj.d(61): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpivcxximj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \  auto t = d_string!(char);\n  t.length = cast(size_t)string.length;\n  t.ptr\
    \ = string.ptr;\n  return count_distinct_characters(t);\n}\nunittest\n{\n    alias\
    \ candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n\
    \    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbte3vh9s.d(13): Error: template instance `d_string!char` template
    `d_string` is not defined, did you mean dstring?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbte3vh9s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    char[] chars = to!char[](toUpper(string));\n    return reduce!((a, b) =>\
    \ a + (chars[b] in chars[0 .. b] ? 0 : 1))(chars);\n}\n/*\n Given a string, find\
    \ out if it consists of only digits\n    >>> is_consists_of_digits(\"123\")\n\
    \    true\n    >>> is_consists_of_digits(\"1234 \")\n    false\n    \n*/\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp50r60bgu.d(13): Error: template instance `to!char` template `to`
    is not defined, did you mean No?

    /tmp/tmp50r60bgu.d(14): Error: template instance `reduce!((a, b) => a + (chars[b]
    in chars[0..b] ? 0 : 1))` template `reduce` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp50r60bgu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return uniq(string.toLower().dup).length;\n}\n/*\n Convert a string to a\
    \ format where each word starts with an uppercase letter and the remaining letters\
    \ are lowercase. For example:\n    >>> standardize_string(\"The quick brown fox\"\
    )\n    \"The Quick Brown Fox\"\n    >>> standardize_string(\"something like This\"\
    )\n    \"Something Like This\"\n*/\nstring standardize_string(string string) \n\
    {\n    return string.join(\" \").title;\n}\n/*\n Given a string, find out the\
    \ index of the first occurrence of the letter a\n    >>> find_a(\"alphabet\")\n\
    \    0L\n    >>> find_a(\"alphAbet\")\n    0L\n    >>> find_a(\"alphAbet\")\n\
    \    4L\n*/\nlong find_a(string string) \n{\n    return string.toLower().find(\"\
    a\");\n}\n/*\n Given two strings, swap the first two characters of each\n    >>>\
    \ swap_adjacent_characters(\"abcde\", \"fghij\")\n    (\"bacde\", \"gfhij\")\n\
    \    >>> swap_adjacent_characters(\"abcde\", \"fghi\")\n    (\"bacde\", \"gfhi\"\
    )\n*/\n(string, string) swap_adjacent_characters(string string1, string string2)\
    \ \n{\n    return (string1[1..$] ~ string1[0..0], string2[1..$] ~ string2[0..0]);\n\
    }\n/*\n Given a string that consists of several words separated by space characters,\
    \ return an array containing the length of each word. \n For example:\n    >>>\
    \ get_word_lengths(\"kata is interesting\")\n    [4L, 2L, 11L]\n*/\nlong[] get_word_lengths(string\
    \ string) \n{\n    return string.split().map!(x => x.length).array;\n}\n/*\n Given\
    \ a string of lowercase characters, find the index of the first unique character\n\
    \    >>> find_first_unique_character(\"abacab\")\n    3L\n    >>> find_first_unique_character(\"\
    aaabbbb\")\n    -1L\n*/\nlong find_first_unique\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzeoyv6hx.d(46): Error: declaration expected, not `(`

    /tmp/tmpzeoyv6hx.d(49): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzeoyv6hx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    auto m = typeof(return)();\n    for (auto c : string)\n    {\n        m[tolower(c)]\
    \ = 1;\n    }\n    return m.length;\n}\n \n/*\n Given a string, remove all characters\
    \ that occur more than once in it.\n    >>> remove_duplicate_characters(\"xyzxyz\"\
    )\n    \"xyz\"\n    >>> remove_duplicate_characters(\"abcccdafg\")\n    \"bdf\"\
    \n*/\nstring remove_duplicate_characters(string string) \n{\n    auto m = typeof(return)();\n\
    \    foreach (c; string)\n    {\n        m[c]++;\n    }\n    string result;\n\
    \    foreach (c; string)\n    {\n        if (m[c] == 1)\n        {\n         \
    \   result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n\
    \    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsfp8tx9m.d(14): Error: no identifier for declarator `c`

    /tmp/tmpsfp8tx9m.d(14): Error: expression expected, not `:`

    /tmp/tmpsfp8tx9m.d(14): Error: found `string` when expecting `;` following `for`
    condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsfp8tx9m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long i = 0;\n    long uniqueCharCount = 0;\n    long length = string.length;\n\
    \    bool[] isCharFound = false[256];\n    while (i < length) \n    {\n      \
    \  if (!isCharFound[string[i]]) \n        {\n            isCharFound[string[i]]\
    \ = true;\n            uniqueCharCount++;\n        }\n        i++;\n    }\n  \
    \  return uniqueCharCount;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0mmjoc4c.d(16): Error: only one index allowed to index `bool`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0mmjoc4c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \treturn std.algorithm.sort.uniq(std.algorithm.map!(toLower)(string)).length;\n\
    }\n/*\n Given a list of integers and a positive integer target, return all pairs\
    \ of integers in the list that add up to the target\n \t>>> find_pairs([4, 7,\
    \ 4, 6, 8, 7, 10, 11, 9, 7], 13)\n\t[7: 6, 6: 7, 11: 2, 2: 11]\n*/\nauto find_pairs(int[]\
    \ list, int target) \n{\n\treturn std.algorithm.map!(a => a[0] ~ \": \" ~ a[1])(std.algorithm.filter!(a\
    \ => a[0] + a[1] == target)(std.algorithm.cartesianProduct(list, list)));\n}\n\
    /*\nGiven a list of integers, remove all duplicates (keep only the first instance)\n\
    \t>>> list_without_duplicates([4, 7, 4, 6, 8, 7, 10, 11, 9, 7])\n\t[4, 7, 6, 8,\
    \ 10, 11, 9]\n*/\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjtzhvocq.d(13): Error: undefined identifier `algorithm` in package
    `std`

    /tmp/tmpjtzhvocq.d(22): Error: undefined identifier `algorithm` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjtzhvocq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return string.toLower().distinct().length;\n}\n/*\n For a given string \"\
    abcd\", find out how many unique substrings does it consist of\n    >>> count_unique_substrings(\"\
    abcd\")\n    10L\n    >>> count_unique_substrings(\"abdc\")\n    9L\n    \n*/\n\
    size_t count_unique_substrings(string string) \n{\n    return size_t(string.length\
    \ * (string.length + 1) / 2);\n}\n/*\n Given a string, find out all pairs of characters,\
    \ that can be swapped to make the string palindrome\n    >>> find_swap_pairs(\"\
    abcdcb\")\n    []\n    >>> find_swap_pairs(\"abcdcba\")\n    [(0,7),(1,6),(2,5),(3,4)]\n\
    \    >>> find_swap_pairs(\"acbaa\")\n    [(0,4),(1,3)]\n    \n*/\nalias Pair =\
    \ Tuple!(size_t, size_t);\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp21wlu2xg.d(13): Error: no property `toLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp21wlu2xg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return set(string.toUpper().split(\"\")).length;\n}\nunittest\n{\n    alias\
    \ candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n\
    \    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdgr_8eyf.d(13): Error: undefined identifier `set`, did you mean
    template `get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdgr_8eyf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return string.toLower().unique.length;\n}\n/*\n Given a list of strings,\
    \ return a tuple of two lists: the first one will contain all strings, that are\n\
    \  longer than 2 and the second one will contain all the rest.\n    >>> split_list([\"\
    b\", \"aaa\", \"c\"])\n    ([\"aaa\"], [\"b\", \"c\"])\n    >>> split_list([\"\
    a\", \"b\", \"c\"])\n    ([], [\"a\", \"b\", \"c\"])\n*/\nTuple!(string[], string[])\
    \ split_list(string[] lst) \n{\n    return Tuple!(string[], string[])(\n     \
    \   lst.filter!(s => s.length > 2),\n        lst.filter!(s => s.length <= 2)\n\
    \    );\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdubgtk4j.d(13): Error: no property `toLower` for type `string`

    /tmp/tmpdubgtk4j.d(26): Error: no property `filter` for type `string[]`

    /tmp/tmpdubgtk4j.d(27): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdubgtk4j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \  long count = 0;\n  for (char character = 'a'; character <= 'z'; character++)\
    \ \n  {\n    if (std.string.count(string, character) > 0 || std.string.count(string,\
    \ character - 'a' + 'A') > 0) \n    {\n      count++;\n    }\n  }\n  return count;\n\
    }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyrtx4100.d(16): Error: undefined identifier `string` in package
    `std`

    /tmp/tmpyrtx4100.d(16): Error: undefined identifier `string` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyrtx4100.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    foreach(char ch; string) \n    {\n        if (ch in\
    \ uppercaseAlphabet) \n        {\n            count++;\n        }\n        else\
    \ if (ch in lowercaseAlphabet) \n        {\n            count++;\n        }\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyyxye1ys.d(16): Error: undefined identifier `uppercaseAlphabet`

    /tmp/tmpyyxye1ys.d(20): Error: undefined identifier `lowercaseAlphabet`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyyxye1ys.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    // return distinct(toLower(string)); \n    return toSet(toLower(string)).length;\n\
    }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp961cacqt.d(14): Error: undefined identifier `toSet`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp961cacqt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    string lowercase = to!string(std.algorithm.map!(toLowerCase, string));\n\
    \    auto sorted = sort(lowercase);\n    auto unique = unique(sorted);\n    return\
    \ unique.length;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyidemn6c.d(13): Error: `string` is used as a type

    /tmp/tmpyidemn6c.d(13): Error: template instance `to!string` template `to` is
    not defined, did you mean No?

    /tmp/tmpyidemn6c.d(14): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmpyidemn6c.d(15): Error: undefined identifier `unique`, did you mean struct
    `Unique(T)`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyidemn6c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return distinct(map!(toupper)(string));\n}\n// Count the number of nodes\
    \ in a binary tree\nlong count_nodes(BinaryTreeNode!int node) \n{\n    if (node\
    \ is null)\n        return 0;\n    return 1 + count_nodes(node.left) + count_nodes(node.right);\n\
    }\n// Count the number of binary search trees that can be made with n nodes\n\
    long count_bst(size_t n) \n{\n    return n == 0 ? 1 : n * count_bst(n - 1);\n\
    }\n// Create a string of the form \"binary search tree\" if the nodes can be arranged\
    \ as a BST, otherwise as \"not a binary search tree\"\nstring is_bst(BinaryTreeNode!int\
    \ node) \n{\n    if (node is null)\n        return \"binary search tree\";\n \
    \   if (node.left is null && node.right is null)\n        return \"binary search\
    \ tree\";\n    if (node.left !is null && node.right is null)\n        return is_bst(node.left);\n\
    \    if (node.left is null && node.right !is null)\n        return is_bst(node.right);\n\
    \    return node.left.value < node.value && node.value < node.right.value ? is_bst(node.left)\
    \ : \"not a binary search tree\";\n}\n/*\n Given a list of strings, for each string\
    \ create a tuple containing the string and its length\n    >>> sort_strings_by_length([\"\
    abc\", \"xyz\", \"12\"])\n    [\"12\", \"abc\", \"xyz\"]\n    >>> sort_strings_by_length([\"\
    abc\", \"xyz\", \"12\", \"\", \"a\"])\n    [\"\", \"a\", \"12\", \"abc\", \"xyz\"\
    ]\n*/\nstring[] sort_strings_by_length(string[] strings) \n{\n    return strings.sort!(a\
    \ => a.length)();\n}\n/*\n Given a two dimensional array of positive integers,\
    \ create a new two dimensional array that contains the sums of the rectangles\
    \ of sub-arrays starting at (0, 0) to the bottom right corner\n    >>> sum\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8tt97z82.d(51): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8tt97z82.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    auto count = Map!(char, bool)();\n    foreach(c; string)\n    {\n       \
    \ count[tolower(c)] = true;\n    }\n    return count.length;\n}\nunittest\n{\n\
    \    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\"\
    ) == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptkob2pvn.d(13): Error: template instance `Map!(char, bool)` template
    `Map` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptkob2pvn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    // Comparing characters of different case is equal in D.\n    // Use toLower()\
    \ to treat them as the same.\n    return sort(map!(ch => toLower(ch))(string.dup)).length;\n\
    }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg0ovt6yz.d(15): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg0ovt6yz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \t\n\talias Upper =  std.ascii.toUpper;\n\tstring s = Upper(string);\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkj30g2px.d(16): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkj30g2px.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return set(to!string(map!(toUpperCase, string))).length;\n}\nunittest\n{\n\
    \    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\"\
    ) == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvp7fg2fy.d(13): Error: undefined identifier `set`, did you mean
    template `get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvp7fg2fy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return string.lower().chars.length;\n}\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvm78wb3r.d(13): Error: no property `lower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvm78wb3r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    char[] chars = map!(char.toLower)(string);\n    auto result = set(chars);\n\
    \    return result.length;\n}\n/* \n Given a string and a char, return the index\
    \ of the char in the string\n*/\nsize_t string_char_index(string s, char c) \n\
    {\n    size_t n;\n    int res = s.find(c, 0, n);\n    if (res == -1) \n    {\n\
    \        return size_t.max;\n    }\n    return n;\n}\n/* \n Given a string, find\
    \ the first and last occurence of a char in the string, return the first and last\
    \ index\n*/\nTuple!(size_t, size_t) string_first_last_index(string s, char c)\
    \ \n{\n    size_t fi = string_char_index(s, c);\n    if (fi == size_t.max) \n\
    \    {\n        return tuple(size_t.max, size_t.max);\n    }\n    size_t li =\
    \ string_char_index(s[fi+1..$], c);\n    if (li == size_t.max) \n    {\n     \
    \   return tuple(fi, fi);\n    }\n    return tuple(fi, fi + li + 1);\n}\n/* \n\
    \ Given a string, return a tuple of the indices of the first and last occurence\
    \ of \"ab\"\n*/\nTuple!(size_t, size_t) string_aba_index(string s) \n{\n    return\
    \ string_first_last_index(s, 'a');\n}\n/* \n Given a string, return a tuple of\
    \ the indices of the first and last occurence of \"aba\"\n*/\nTuple!(size_t, size_t)\
    \ string_aba_index2(string s) \n{\n    return string_first_last_index(s, 'a');\n\
    }\n/* \n Given a string, return the reverse string\n*/\nstring string_reverse(string\
    \ s) \n{\n    char[] res = s.dup;\n    return res.reverse.idup;\n}\n/* \n Given\
    \ a string,\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyv70uueq.d(69): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyv70uueq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count;\n    foreach(immutable char c; string) \n    {\n        count\
    \ += !std.algorithm.any!\"a.toLower() == c.toLower()\"(string[0 .. count]);\n\
    \    }\n    return count;\n}\n/*\n    >>> count_distinct_characters(\"xyzXYZ\"\
    )\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n*/\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq_jr5nco.d(16): Error: undefined identifier `algorithm` in package
    `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq_jr5nco.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    // write your code here\n    return string.toLower().removeDuplicates().length;\n\
    }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzsea362y.d(14): Error: no property `toLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzsea362y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long total;\n    // for each character in the string\n    foreach(c; string)\n\
    \    {\n        // convert the character to lower case\n        auto lower = toLower(c);\n\
    \        // if lower is not already in lowerCharSet\n        if (!lowerCharSet.contains(lower))\n\
    \        {\n            // add it to lowerCharSet\n            lowerCharSet.put(lower);\n\
    \            // increment the number of unique characters\n            total +=\
    \ 1;\n        }\n    }\n    return total;\n}\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz5ffg88s.d(18): Error: undefined identifier `toLower`

    /tmp/tmpz5ffg88s.d(20): Error: undefined identifier `lowerCharSet`

    /tmp/tmpz5ffg88s.d(23): Error: undefined identifier `lowerCharSet`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz5ffg88s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    string lower = string.toLower();\n    int counter = 0;\n    foreach(c; lower)\n\
    \    {\n        if(c != ' ')\n        {\n            if(!counter)\n          \
    \  {\n                counter++;\n            }\n            else\n          \
    \  {\n                bool exists = false;\n                foreach(y; 0..counter)\n\
    \                {\n                    if(lower[y] == c)\n                  \
    \  {\n                        exists = true;\n                        break;\n\
    \                    }\n                }\n                if(!exists)\n     \
    \           {\n                    counter++;\n                }\n           \
    \ }\n        }\n    }\n    return counter;\n}\n/*\n Given a string, find the most\
    \ common character (regardless of case) and return it and the count of its occurences\
    \ in a touple\n    >>> most_common_character(\"xyzXYZ\")\n    ('z', 2L)\n    >>>\
    \ most_common_character(\"Jerry\")\n    ('r', 2L)\n    >>> most_common_character(\"\
    \")\n    ('', 0L)\n    \n*/\ntuple!(char, size_t) most_common_character(string\
    \ string) \n{\n    string lower = string.toLower();\n    int counter = 0;\n  \
    \  char mostcommon = ' ';\n    foreach(c; lower)\n    {\n        if(c != ' ')\n\
    \        {\n            if(!counter)\n            {\n                counter++;\n\
    \                mostcommon = c;\n            }\n            else\n          \
    \  {\n                int counter2 = 0;\n                foreach(y; 0..lower.length)\n\
    \                {\n                    if(lower[y] == c)\n                  \
    \  {\n                        counter2++;\n                    }\n           \
    \     }\n                if(counter2 > counter)\n                {\n         \
    \           counter = counter2;\n                    mostcommon = c;\n       \
    \         }\n            }\n        }\n    }\n    return tuple(mostcommon, counter);\n\
    }\n/*\nGiven a string, find all the words that start with a given letter (regardless\
    \ of case) and return them in a tuple. \nThe order of words in the tuple does\
    \ not matter.\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxiez74id.d(87): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxiez74id.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    auto count_distinct_characters_impl =\n        [&](auto count_distinct_characters_impl,\
    \ string string) {\n            auto count_distinct_characters_impl_ =\n     \
    \           [&](string string) {\n                    if (string.empty) return\
    \ 0L;\n                    // set is a sorted container, counts all unique values.\n\
    \                    auto s = to!set(string.tolower());\n                    return\
    \ s.length;\n                };\n            return count_distinct_characters_impl_(string);\n\
    \        };\n    return count_distinct_characters_impl(count_distinct_characters_impl,\
    \ string);\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl2g65501.d(14): Error: expression expected, not `]`

    /tmp/tmpl2g65501.d(14): Error: expression expected, not `auto`

    /tmp/tmpl2g65501.d(14): Error: found `count_distinct_characters_impl` when expecting
    `,`

    /tmp/tmpl2g65501.d(14): Error: expression expected, not `,`

    /tmp/tmpl2g65501.d(14): Error: found `string` when expecting `,`

    /tmp/tmpl2g65501.d(14): Error: found `{` when expecting `,`

    /tmp/tmpl2g65501.d(15): Error: expression expected, not `auto`

    /tmp/tmpl2g65501.d(15): Error: found `count_distinct_characters_impl_` when expecting
    `,`

    /tmp/tmpl2g65501.d(15): Error: expression expected, not `=`

    /tmp/tmpl2g65501.d(16): Error: expression expected, not `]`

    /tmp/tmpl2g65501.d(16): Error: found `string` when expecting `,`

    /tmp/tmpl2g65501.d(16): Error: found `{` when expecting `,`

    /tmp/tmpl2g65501.d(17): Error: expression expected, not `if`

    /tmp/tmpl2g65501.d(17): Error: found `return` when expecting `,`

    /tmp/tmpl2g65501.d(17): Error: found `;` when expecting `,`

    /tmp/tmpl2g65501.d(19): Error: expression e'
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    alias UTF = wchar;\n    auto chars = string.toUpperArray.retro;\n    size_t\
    \ count = 0;\n    while (chars.empty is false)\n    {\n        char character\
    \ = chars.front;\n        if (character.isAlpha) \n        {\n            chars.retro.retro.remove(character);\n\
    \            count += 1;\n        }\n        else\n        {\n            chars.popFront;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0pl_htia.d(14): Error: no property `toUpperArray` for type `string`

    /tmp/tmp0pl_htia.d(19): Error: no property `isAlpha` for type `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0pl_htia.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return to!(long)(set(map!tolower(string))).length;\n}\nunittest\n{\n    alias\
    \ candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n\
    \    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxmdfkl82.d(13): Error: template instance `to!long` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxmdfkl82.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \tlong result = string.lower.dup.sort.uniq.length;\n\treturn result;\n}\n/*\n\
    Given a string, find out the number of occurrences of each character (regardless\
    \ of case)\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgc4zioms.d(16): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgc4zioms.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return to(string).byLowerCase().distinct.length;\n}\nunittest\n{\n    alias\
    \ candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n\
    \    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphz45qjac.d(13): Error: undefined identifier `to`, did you mean
    struct `No`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphz45qjac.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \treturn string.lower.length;\n}\n/*\n Given a string, return true if it contains\
    \ a substring between given indices.\n   Only check the substring if they are\
    \ valid\n    >>> has_substring(\"hello\", 2, 4)\n    true\n    >>> has_substring(\"\
    hello\", 0, 3)\n    true\n    >>> has_substring(\"hello\", -1, 3)\n    false\n\
    \    >>> has_substring(\"hello\", 2, 100)\n    false\n*/\nunittest\n{\n    alias\
    \ candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n\
    \    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzwlvb48n.d(13): Error: no property `lower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzwlvb48n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long total = 0;\n    auto charSet = TreeSet!(char)();\n    for(int i = 0;\
    \ i < string.length; i++)\n    {\n        charSet.insert(toLower(string[i]));\n\
    \    }\n    total = charSet.length;\n    return total;\n}\nunittest\n{\n    alias\
    \ candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n\
    \    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0cqyysn1.d(14): Error: template instance `TreeSet!char` template
    `TreeSet` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0cqyysn1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return (string.toUpper().toSet().length);\n}\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpigkva00u.d(13): Error: no property `toUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpigkva00u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    // map each character to its lowercase counterpart\n    // e.g. 'A' -> 'a',\
    \ 'b' -> 'b', 'a' -> 'a'\n    string lowercased = map!(char.toLower)(string);\n\
    \    // store all distinct characters in a set\n    Set!char chars = set(lowercased);\n\
    \    // get the number of chars in the set\n    return chars.length;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3vtggbdn.d(15): Error: `string` is used as a type

    /tmp/tmp3vtggbdn.d(15): Error: template instance `map!((char).toLower)` template
    `map` is not defined

    /tmp/tmp3vtggbdn.d(17): Error: template instance `Set!char` template `Set` is
    not defined, did you mean get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)?

    /tmp/tmp3vtggbdn.d(17): Error: undefined identifier `set`, did you mean template
    `get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3vtggbdn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \tlong result = 0;\n\tforeach(c; to!string(map!(toLower)(string)))\n\t{\n\t\t\
    if(result == 0 || c != result) result++;\n\t}\n\treturn result;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp91hd8em5.d(14): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp91hd8em5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count=0;\n    int[char] result;\n    foreach(char d;string)\n    {\n\
    \        if (result[toLower(d)]==0)\n        {\n            result[toLower(d)]=1;\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\"\
    ) == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5f0lkrhh.d(17): Error: undefined identifier `toLower`

    /tmp/tmp5f0lkrhh.d(19): Error: undefined identifier `toLower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5f0lkrhh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    immutable char_counts = map!(char => uint)();\n    foreach(char c; string)\
    \ \n    {\n        immutable lower = toLower(c);\n        immutable count = char_counts[lower];\n\
    \        char_counts[lower] = count ? count + 1 : 1;\n    }\n    return char_counts.length;\n\
    }\n \nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphm_1imsg.d(13): Error: found `=>` when expecting `.` following
    char

    /tmp/tmphm_1imsg.d(13): Error: found `uint` when expecting identifier following
    `char`.

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphm_1imsg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long res = 0;\n    char[char] memo = new char[char];\n    foreach(c; string)\
    \ {\n        if(c in memo) {\n            continue;\n        }\n        else {\n\
    \            res += 1;\n            memo[c] = 'Y';\n        }\n    }\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n \
    \   assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4lch0fdf.d(14): Error: need size of rightmost array, not type `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4lch0fdf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return std.string.length(string.toUpper()) - \n            std.algorithm.count(string.toUpper(),'-');\n\
    }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzyuw0his.d(13): Error: undefined identifier `string` in package
    `std`

    /tmp/tmpzyuw0his.d(14): Error: undefined identifier `algorithm` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzyuw0his.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return to!(long)(uniq(map!(toUpper)(string)));\n}\n/*\n Given a string and\
    \ a delimiter, split the string into a list of components\n    >>> split(\"hello,jerry,olivvy,lulu,crystal\"\
    , ',')\n    [\"hello\", \"jerry\", \"olivvy\", \"lulu\", \"crystal\"]\n    >>>\
    \ split(\"hello\", ',')\n    [\"hello\"]\n    >>> split(\"\", ',')\n    []\n*/\n\
    string[] split(string string, char delimiter)\n{\n    import std.algorithm.iteration\
    \ : find;\n    string[] split_string;\n    string temp;\n    size_t position =\
    \ 0;\n    while(position != string.length)\n    {\n        position = find(string[position..$],\
    \ delimiter);\n        if(position == string.length)\n        {\n            split_string\
    \ ~= temp;\n            break;\n        }\n        else\n        {\n         \
    \   temp = string[0..position];\n            split_string ~= temp;\n         \
    \   string = string[position+1..$];\n            position = 0;\n        }\n  \
    \  }\n    return split_string;\n}\n/*\n Given a string, find out how many words\
    \ (not word components) does it consist of\n    >>> count_words(\"hello,jerry,olivvy,lulu,crystal\"\
    )\n    5L\n    >>> count_words(\"hello\")\n    1L\n    >>> count_words(\"\")\n\
    \    0L\n*/\nlong count_words(string string)\n{\n    import std.algorithm.iteration\
    \ : find;\n    string[] split_string;\n    string temp;\n    size_t position =\
    \ 0;\n    long counter = 0;\n    while(position != string.length)\n    {\n   \
    \     position = find(string[position..$], ',');\n        if(position == string.length)\n\
    \        {\n            counter++;\n            break;\n        }\n        else\n\
    \        {\n            counter++;\n            string = string[position+1..$];\n\
    \            position = 0;\n        }\n    }\n    return counter;\n}\n/*\n Given\
    \ a string, find out how\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwvahsqed.d(81): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwvahsqed.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \tauto set_of_characters = set!char();\n\tforeach(i, x; string)\n\t{\n\t\tset_of_characters.insert(toLower(x));\n\
    \t}\n\treturn set_of_characters.length;\n}\n/*\n Given a string, find out how\
    \ many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_using_hash_table(\"\
    xyzXYZ\")\n    3L\n    >>> count_distinct_characters_using_hash_table(\"Jerry\"\
    )\n    4L\n    \n*/\nlong count_distinct_characters_using_hash_table(string string)\
    \ \n{\n\tHashTable!(char, bool) ht = new HashTable!(char, bool)();\n\tforeach(i,\
    \ x; string)\n\t{\n\t\tht[toLower(x)] = true;\n\t}\n\treturn ht.length;\n}\nunittest\n\
    {\n\tassert(count_distinct_characters(\"xyzXYZ\") == 3L);\n\tassert(count_distinct_characters(\"\
    Jerry\") == 4L);\n\tassert(count_distinct_characters_using_hash_table(\"xyzXYZ\"\
    ) == 3L);\n\tassert(count_distinct_characters_using_hash_table(\"Jerry\") == 4L);\n\
    }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7vcf8i6n.d(13): Error: template instance `set!char` template `set`
    is not defined, did you mean get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)?

    /tmp/tmp7vcf8i6n.d(30): Error: template instance `HashTable!(char, bool)` template
    `HashTable` is not defined

    /tmp/tmp7vcf8i6n.d(30): Error: template instance `HashTable!(char, bool)` template
    `HashTable` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7vcf8i6n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n \
    \   // Tuple\u7684\u4E00\u4E2A\u6784\u9020\u51FD\u6570\u662F\uFF0CTuple(ElementType[]\
    \ ts)\n    // \u6240\u4EE5\u8FD9\u91CC\u628Astring\u5185\u7684\u6BCF\u4E2A\u5B57\
    \u7B26\u4E32\u63D0\u53D6\u51FA\u6765\uFF0C\u653E\u5165\u4E00\u4E2AElementType\u6570\
    \u7EC4\u4E2D\uFF0C\n    // \u5373\u53EF\u6784\u9020\u51FATuple(ElementType[] ts)\n\
    \    // \u6CE8\u610Fcounts\u91CC\u9762\uFF0C\u6BCF\u4E2Aint\u90FD\u521D\u59CB\u5316\
    \u4E3A0\n    // tuples(t)\u8FD4\u56DE\u4E00\u4E2A\u6570\u7EC4\uFF0C\u6BCF\u4E2A\
    \u5143\u7D20\u90FD\u662Ftuple(t)\n    // tuple(t)\u8FD4\u56DE\u4E00\u4E2A\u5143\
    \u7EC4\uFF0C\u6709\u4E24\u4E2A\u5143\u7D20\uFF0C\u4E00\u4E2A\u662Ft\uFF0C\u4E00\
    \u4E2A\u662F0\n    // \u6240\u4EE5\uFF0Ccounts\u7684\u5143\u7D20\u7684\u5F62\u5F0F\
    \u5C31\u662F[tuple('a', 0), tuple('b', 0), ...]\n{ \n    long counts[0x80] = new\
    \ long[0x80];\n    foreach (ch; string) { \n        auto index = ch.to!char.tolower;\n\
    \        if (!counts[index]) { \n            counts[index] = 1;\n        }\n \
    \   }\n    return counts.length;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmd6vz53g.d(20): Deprecation: instead of C-style syntax, use D-style
    syntax `long[128] counts`

    /tmp/tmpmd6vz53g.d(22): Error: no property `to` for type `immutable(char)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmd6vz53g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    auto result = new Set!(char[])();\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkp4n8s16.d(14): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkp4n8s16.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    auto table = long[char](0);\n    foreach(c; string)\n    {\n        table[toLower(c)]++;\n\
    \    }\n    return table.count!(ch => ch > 0L);\n}\n/*\nCount the number of occurrences\
    \ of a particular character in a string\n    >>> count_characters(\"Hello\", 'l')\n\
    \    2L\n*/\nlong count_characters(string string, in char c)\n{\n    long count\
    \ = 0L;\n    foreach(element; string)\n    {\n        if(element == c)\n     \
    \   {\n            count++;\n        }\n    }\n    return count;\n}\n/*\nCount\
    \ the number of occurrences of each character in a string. Returns a mapping from\
    \ the character to the number of occurrences\n    >>> count_character_occurrences(\"\
    Hello\")\n    ['H': 1L, 'e': 1L, 'l': 2L, 'o': 1L]\n*/\nauto count_character_occurrences(string\
    \ string)\n{\n    auto table = long[char](0);\n    foreach(c; string)\n    {\n\
    \        table[c]++;\n    }\n    return table;\n}\n/*\nGiven a list, finds the\
    \ elements which has the highest frequency of occurrence and removes the rest,\
    \ keeping only one element of each\n    >>> filter_most_frequent_elements([1,\
    \ 2, 3, 1, 3, 3, 4, 5, 1, 4, 4, 5, 5, 5])\n    [1, 3, 4, 5]\n*/\nauto filter_most_frequent_elements(E[])(E[]\
    \ input)\n{\n    auto frequency = long[E](0);\n    foreach(e; input)\n    {\n\
    \        frequency[e]++;\n    }\n    long max_frequency = frequency.values.max;\n\
    \    auto filtered = E[](max_frequency);\n    foreach(pair; frequency)\n    {\n\
    \        if(pair.value == max_frequency)\n        {\n            filtered ~= pair.key;\n\
    \        }\n    }\n    return filtered;\n}\n/*\nFinds the index of the first occurrence\
    \ of a given element in a list. If the element does not occur in the\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi6i7f0zl.d(13): Error: found `[` when expecting `.` following long

    /tmp/tmpi6i7f0zl.d(13): Error: found `char` when expecting identifier following
    `long`.

    /tmp/tmpi6i7f0zl.d(13): Error: semicolon expected following auto declaration,
    not `]`

    /tmp/tmpi6i7f0zl.d(13): Error: found `]` instead of statement

    /tmp/tmpi6i7f0zl.d(44): Error: found `[` when expecting `.` following long

    /tmp/tmpi6i7f0zl.d(44): Error: found `char` when expecting identifier following
    `long`.

    /tmp/tmpi6i7f0zl.d(44): Error: semicolon expected following auto declaration,
    not `]`

    /tmp/tmpi6i7f0zl.d(44): Error: found `]` instead of statement

    /tmp/tmpi6i7f0zl.d(56): Error: identifier expected for template value parameter

    /tmp/tmpi6i7f0zl.d(58): Error: found `[` when expecting `.` following long

    /tmp/tmpi6i7f0zl.d(58): Error: semicolon expected following auto declaration,
    not `]`

    /tmp/tmpi6i7f0zl.d(58): Error: found `]` instead of statement

    /tmp/tmpi6i7f0zl.d(74): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-",'
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    // set\n    auto characters = set!char;\n    foreach(char c; string)\n  \
    \  {\n        characters.insert(toLower(c));\n    }\n    return characters.length;\n\
    }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4n31g6kk.d(14): Error: template instance `set!char` template `set`
    is not defined, did you mean get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4n31g6kk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    auto count = 0L;\n    auto chars = map!(ch => toUpper(ch))(string);\n   \
    \ foreach(i, ch; chars) \n    {\n        if (i == 0 || chars[i - 1] != ch) \n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n\
    \    Find the first character that does not repeat in the string\n    >>> find_first_non_repeating_character(\"\
    xyzxyz\")\n    'x'\n    >>> find_first_non_repeating_character(\"abcxyz\")\n \
    \   'a'\n*/\nchar find_first_non_repeating_character(string string) \n{\n    import\
    \ std.range : take, dropOne;\n    auto count = 0L;\n    auto chars = map!(ch =>\
    \ toUpper(ch))(string);\n    foreach(i, ch; chars) \n    {\n        if (i == 0\
    \ || chars[i - 1] != ch) \n        {\n            count++;\n        }\n      \
    \  if(i==chars.length-1)\n        {\n            if(count==1)\n            {\n\
    \                return ch;\n            }\n        }\n    }\n    return 'a';\n\
    }\n/*\n    >>> reverse_in_place(\"abcdef\")\n    \"fedcba\"\n    >>> reverse_in_place(\"\
    xyz\")\n    \"zyx\"\n*/\nstring reverse_in_place(string string) \n{\n    auto\
    \ count = 0L;\n    auto chars = map!(ch => toUpper(ch))(string);\n    auto rev\
    \ = string[$-1];\n    foreach(i, ch; chars) \n    {\n        if (i == 0 || chars[i\
    \ - 1] != ch) \n        {\n            count++;\n        }\n        if(i==chars.length-1)\n\
    \        {\n            if(count==1)\n            {\n                return rev;\n\
    \            }\n        }\n    }\n    return 'a';\n}\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpubdtflbv.d(14): Error: template instance `map!((ch) => toUpper(ch))`
    template `map` is not defined

    /tmp/tmpubdtflbv.d(35): Error: template instance `map!((ch) => toUpper(ch))` template
    `map` is not defined

    /tmp/tmpubdtflbv.d(61): Error: template instance `map!((ch) => toUpper(ch))` template
    `map` is not defined

    /tmp/tmpubdtflbv.d(77): Error: cannot implicitly convert expression `''a''` of
    type `char` to `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpubdtflbv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \t/*Use set to remove duplicate*/\n\treturn set(to!string(toUpper(string))).length;\n\
    }\n/*\n Given a string, check if it is a palindrome.\n    >>> is_palindrome(\"\
    A but tuba\")\n    true\n    >>> is_palindrome(\"A nut for a jar of tuna\")\n\
    \    true\n    >>> is_palindrome(\"A nut for a jar of beans\")\n    false\n*/\n\
    unittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprgodbr6n.d(14): Error: undefined identifier `set`, did you mean
    template `get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprgodbr6n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return string.toUpper().countUntil(a=>a==string.toUpper().front);\n}\ncount_distinct_characters(\"\
    xyzXYZ\");\ncount_distinct_characters(\"Jerry\");\n \n \nunittest\n{\n    alias\
    \ candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n\
    \    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptw86rhsa.d(15): Error: unexpected `(` in declarator

    /tmp/tmptw86rhsa.d(15): Error: basic type expected, not `"xyzXYZ"`

    /tmp/tmptw86rhsa.d(15): Error: found `"xyzXYZ"` when expecting `)`

    /tmp/tmptw86rhsa.d(15): Error: no identifier for declarator `count_distinct_characters(_error_)`

    /tmp/tmptw86rhsa.d(15): Error: semicolon expected following function declaration

    /tmp/tmptw86rhsa.d(15): Error: declaration expected, not `)`

    /tmp/tmptw86rhsa.d(16): Error: unexpected `(` in declarator

    /tmp/tmptw86rhsa.d(16): Error: basic type expected, not `"Jerry"`

    /tmp/tmptw86rhsa.d(16): Error: found `"Jerry"` when expecting `)`

    /tmp/tmptw86rhsa.d(16): Error: no identifier for declarator `count_distinct_characters(_error_)`

    /tmp/tmptw86rhsa.d(16): Error: semicolon expected following function declaration

    /tmp/tmptw86rhsa.d(16): Error: declaration expected, not `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptw86rhsa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return string.length - (string.toLower().translate(toupper).remove(tolower));\n\
    }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnz6r3i1u.d(13): Error: no property `toLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnz6r3i1u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    /*\n    //by using std.algorithm.uniq\n    uint[] u = string.chars.map!(toUpper)().uniq();\n\
    \    return u.length;\n    */\n    //by using std.array.array\n    uint[] a =\
    \ [0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\
    \ 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\
    \ 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\
    \ 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\
    \ 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\
    \ 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\
    \ 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\
    \ 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u\nunittest\n{\n\
    \    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\"\
    ) == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgd3ppqnv.d(20): Error: comma expected separating array initializers,
    not `unittest`

    /tmp/tmpgd3ppqnv.d(21): Error: semicolon expected, not `{`

    /tmp/tmpgd3ppqnv.d(30): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgd3ppqnv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    string upperString = to!string(to!wstring(string).toupper());\n    string[]\
    \ array = split(upperString);\n    return array.length;\n}\nunittest\n{\n    alias\
    \ candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n\
    \    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6xc08ir3.d(13): Error: `string` is used as a type

    /tmp/tmp6xc08ir3.d(13): Error: template instance `to!string` template `to` is
    not defined, did you mean No?

    /tmp/tmp6xc08ir3.d(14): Error: `string` is used as a type

    /tmp/tmp6xc08ir3.d(14): Error: undefined identifier `split`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6xc08ir3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return (string.length - string.join(\"\").nchars).count;\n}\nunittest\n{\n\
    \    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\"\
    ) == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa89gvk2z.d(13): Error: no property `join` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa89gvk2z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return to!(\"string\")(\"\").byChunk(string).distinct.length;\n}\n \n \n\
    \ \n \n/*\n Given a number, find out how many distinct digits (0-9) does it consist\
    \ of\n    >>> count_distinct_digits(912)\n    3L\n    >>> count_distinct_digits(1)\n\
    \    1L\n    \n*/\nlong count_distinct_digits(long number) \n{\n    return count_distinct_characters(to!string(number));\n\
    }\n \n \n \n \n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong\
    \ count_distinct_characters(string string) \n{\n    return to!(\"string\")(\"\"\
    ).byChunk(string).distinct.length;\n}\n \n \n \n \n/*\n Given a number, find out\
    \ how many distinct digits (0-9) does it consist of\n    >>> count_distinct_digits(912)\n\
    \    3L\n    >>> count_distinct_digits(1)\n    1L\n    \n*/\nlong count_distinct_digits(long\
    \ number) \n{\n    return count_distinct_characters(to!string(number));\n}\n \n\
    \ \n \n \n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong\
    \ count_distinct_characters(string string) \n{\n    return to!(\"string\")(\"\"\
    ).byChunk(string).distinct.length;\n}\n \n \n \n \n/*\n Given a number, find out\
    \ how many distinct digits (0-9) does it consist of\n    >>> count_distinct_digits(912)\n\
    \    3L\n    >>> count_distinct_dig\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gsuqx58.d(83): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gsuqx58.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return string.map!toLower.array.uniq.length;\n}\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpamkjzmvy.d(13): Error: no property `map` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpamkjzmvy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long res;\n    foreach(char; string) \n    {\n        res += (res & 1L <<\
    \ (to!char(\"a\") <= char <= to!char(\"z\") ? char - to!char(\"a\") : char - to!char(\"\
    A\") + 26)) == 0L;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3qfq4rqs.d(14): Error: no identifier for declarator `char`

    /tmp/tmp3qfq4rqs.d(16): Error: found `<=` when expecting `.` following char

    /tmp/tmp3qfq4rqs.d(16): Error: found `!` when expecting `)`

    /tmp/tmp3qfq4rqs.d(16): Error: found `char` when expecting `)`

    /tmp/tmp3qfq4rqs.d(16): Error: found `-` when expecting `.` following char

    /tmp/tmp3qfq4rqs.d(16): Error: found `!` when expecting `:`

    /tmp/tmp3qfq4rqs.d(16): Error: found `:` when expecting `;` following statement

    /tmp/tmp3qfq4rqs.d(16): Error: no identifier for declarator `char`

    /tmp/tmp3qfq4rqs.d(16): Error: found `)` when expecting `;` following statement

    /tmp/tmp3qfq4rqs.d(16): Error: found `)` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3qfq4rqs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return string.lower.unique;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1d56k9l5.d(13): Error: no property `lower` for type `string`

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n \
    \   in \n    {\n        assert(string.length > 0);\n    }\n    body\n    {\n \
    \       return set(to!string(char)(string)).length;\n    }\n/*\n Given two strings,\
    \ find out if the first string contains any character that is not in the second\
    \ string\n    >>> contains_uncommon_character(\"xyzXYZ\", \"XYZ\")\n    false\n\
    \    >>> contains_uncommon_character(\"xyzXYZ\", \"abcd\")\n    true\n*/\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5fpthbdq.d(18): Error: found `)` when expecting `.` following char

    /tmp/tmp5fpthbdq.d(18): Error: found `(` when expecting identifier following `char`.

    /tmp/tmp5fpthbdq.d(18): Error: found `string` when expecting `,`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5fpthbdq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    // write the body of your function here\n    return 0L;\n}\nunittest\n{\n\
    \    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\"\
    ) == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9geumob6.d(21): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d85]

    ??:? void tmp9geumob6.__unittest_L16_C1() [0x427a71]

    ??:? void tmp9geumob6.__modtest() [0x427b08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a93e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff80]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]

    ??:? runModuleUnitTests [0x42b881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    string lower = toLower(string);\n    return std.algorithm.uniq(lower.byChunk(1)).length;\n\
    }\n/*\n Given an integer value, determine whether it is an odd number or not.\n\
    \    >>> is_odd(4)\n    false\n    >>> is_odd(1)\n    true\n*/\nunittest\n{\n\
    \    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\"\
    ) == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplwbjldhf.d(13): Error: `string` is used as a type

    /tmp/tmplwbjldhf.d(13): Error: undefined identifier `toLower`

    /tmp/tmplwbjldhf.d(14): Error: undefined identifier `algorithm` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplwbjldhf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    dchar[bool] charMap;\n    foreach(c; string)\n    {\n        charMap[c] =\
    \ true;\n    }\n    return charMap.length;\n}\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps_isvbhh.d(16): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `bool`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps_isvbhh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    foreach(i; 0 .. string.length) \n    {\n        long\
    \ count_temp = 0;\n        for(long j = 0; j < string.length; j++) \n        {\n\
    \            if(string[i] == string[j]) \n            {\n                count_temp++;\n\
    \            }\n        }\n        if(count_temp == 1) \n        {\n         \
    \   count++;\n        }\n    }\n    return count;\n}\n/*\n Given two positive\
    \ numbers x and y and a non-empty string s, return a string containing the binary\
    \ representation of a number z with z equal to the product of x and y.\n    >>>\
    \ s = \"xyzXYZ\"\n    >>> find_product(3L, 4L, s)\n    \"11b\"\n    >>> find_product(2L,\
    \ 3L, s)\n    \"110\"\n    >>> find_product(8L, 2L, s)\n    \"11000\"\n    >>>\
    \ find_product(11L, 12L, s)\n    \"10101b\"\n*/\nstring find_product(long x, long\
    \ y, string s) \n{\n    long product = x * y;\n    string product_binary = to!string(product,\
    \ 2);\n    return product_binary;\n}\n/*\n Find the subsequence of consecutive\
    \ numbers in the given sequence that produces the greatest sum\n    >>> max_sum_sequence([-1L,\
    \ 1L, -1L, 1L, -1L, 1L, -1L, 1L, -1L, 1L])\n    1L\n    >>> max_sum_sequence([-1L,\
    \ 1L, -1L, 1L, -1L, 1L, -1L, 1L, -1L, 1L, -1L, 1L])\n    3L\n    >>> max_sum_sequence([-3L,\
    \ -5L, -1L, -10L, -1L, -1L, -1L, -2L, -2L, -1L, -1L, -2L, -2L, -1L, -1L, -2L,\
    \ -1L, -1L, -2L, -\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpohkd90s6.d(49): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpohkd90s6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return countUntil!(toLower)(string.sort)(ch=> toLower(ch) != ch);\n}\n/*\n\
    \ Given two strings, figure out whether one is a permutation of the other.\n \
    \   >>> is_permutation(\"aaaa\", \"aaAa\")\n    true\n    >>> is_permutation(\"\
    abc\", \"bca\")\n    true\n    >>> is_permutation(\"abc\", \"cab\")\n    true\n\
    \    >>> is_permutation(\"abc\", \"abc\")\n    true\n    >>> is_permutation(\"\
    abcc\", \"abca\")\n    false\n    >>> is_permutation(\"abcc\", \"abcb\")\n   \
    \ false\n    >>> is_permutation(\"cab\", \"abc\")\n    true\n    >>> is_permutation(\"\
    xabx\", \"abx\")\n    false\n    >>> is_permutation(\"abx\", \"xabx\")\n    false\n\
    */\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuyxwr7j4.d(13): Error: template instance `countUntil!toLower` template
    `countUntil` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuyxwr7j4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    \n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n  \
    \  assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n \
    \   assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpist8xdy8.d(11): Error: function `tmpist8xdy8.count_distinct_characters`
    has no `return` statement, but is expected to return a value of type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpist8xdy8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    //assume not the empty string\n    long number_of_distinct_characters = 0;\n\
    \    long current_character_index = 0;\n    long next_character_index = 1;\n \
    \   char current_character = string[current_character_index];\n    char next_character\
    \ = string[next_character_index];\n    while(next_character_index < string.length){\n\
    \        if(current_character != next_character){\n            number_of_distinct_characters++;\n\
    \            current_character = next_character;\n        }\n        next_character_index++;\n\
    \        next_character = string[next_character_index];\n    }\n    return number_of_distinct_characters\
    \ + 1;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n \
    \   assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpchx5tote.d(17): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x427efe]

    ??:? long tmpchx5tote.count_distinct_characters(immutable(char)[]) [0x427a4c]

    ??:? void tmpchx5tote.__unittest_L29_C1() [0x427af0]

    ??:? void tmpchx5tote.__modtest() [0x427bcc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbe7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa7a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc0d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300bc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb99]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa51]

    ??:? runModuleUnitTests [0x42b9bd]

    ??:? void rt.dmain2._d_run_main(int, char**, e'
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    // Return the number of distinct characters in the string\n    int result\
    \ = 0;\n    foreach(c; string.toLower())\n    {\n        if(result == 0)\n   \
    \     {\n            result = 1;\n        }\n        else if(c != string[result\
    \ - 1])\n        {\n            result++;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2kdopk7e.d(15): Error: no property `toLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2kdopk7e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return uniq(std.algorithm.map!(toLower)(string)).length;\n}\nunittest\n{\n\
    \    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\"\
    ) == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbv5sx0y0.d(13): Error: undefined identifier `uniq`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbv5sx0y0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return uniq(to!(string[])(string.tolower())).length;\n}\nunittest\n{\n  \
    \  alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\")\
    \ == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb0luekxr.d(13): Error: undefined identifier `uniq`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb0luekxr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \tauto result = Appender!(ubyte[])();\n\tforeach(c; string)\n\t{\n\t\tif (result.indexOf(cast(ubyte)c)\
    \ == -1)\n\t\t\tresult.put(cast(ubyte)c);\n\t}\n\treturn result.length;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpny9d0rdu.d(13): Error: template instance `Appender!(ubyte[])` template
    `Appender` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpny9d0rdu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long result;\n    const(char)[] alphabet = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n    auto chars = std.algorithm.map!(x => std.string.strip(x, \"\\n\\r\"))(std.string.split(string,\
    \ \"\"));\n    auto char_map = std.algorithm.map!(x => to!char(x))(chars);\n \
    \   auto unique_chars = std.algorithm.uniq(char_map);\n    auto count = std.algorithm.map!(x\
    \ => std.string.count(string, x.to!string))(unique_chars);\n    result = std.algorithm.reduce!\"\
    a + b\"(count);\n    return result;\n}\n```\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_w44w925.d(22): Error: declaration expected, not `""`

    /tmp/tmp_w44w925.d(22): Error: unterminated string constant starting at /tmp/tmp_w44w925.d(22)

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_w44w925.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long char_count = 0;\n    foreach(char; string) \n    {\n        if (char_count\
    \ == 0) \n        {\n            char_count++;\n        } \n        else \n  \
    \      {\n            bool flag = true;\n            foreach(y; 0..char_count)\
    \ \n            {\n                if (tolower(char) == tolower(string[y])) \n\
    \                {\n                    flag = false;\n                    break;\n\
    \                }\n            }\n            if (flag) \n            {\n   \
    \             char_count++;\n            }\n        }\n    }\n    return char_count;\n\
    }\n//=============================================================\n/*\n Given\
    \ an array of strings, find the one that has the largest number of distinct characters\n\
    \    >>> find_most_distinct_characters([\"abcdefg\", \"abcabcabcabcabcabcabcabcabcabc\"\
    ])\n    \"abcdefg\"\n    >>> find_most_distinct_characters([\"cs50\", \"cs50isawesome\"\
    , \"CS50\"])\n    \"cs50isawesome\"\n*/\nstring find_most_distinct_characters(string[]\
    \ strings) \n{\n    long max = 0;\n    string max_string = \"\";\n    foreach(string;\
    \ strings) \n    {\n        long chars = count_distinct_characters(string);\n\
    \        if (chars > max) \n        {\n            max = chars;\n            max_string\
    \ = string;\n        }\n    }\n    return max_string;\n}\n//=============================================================\n\
    /*\n Given a string, return the first character that appears only once, otherwise\
    \ return the empty string\n    >>> find_first_unique_character(\"abcbcba\")\n\
    \    'a'\n    >>> find_first_unique_character(\"abccccb\")\n    \"\"\n*/\nchar\
    \ find_first_unique_character(string string) \n{\n    int flag = 0;\n    foreach(char;\
    \ string) \n    {\n        flag = 0;\n        foreach(x; 0..string.length) \n\
    \        {\n            if (x == flag) \n            {\n                continue;\n\
    \            }\n            if (char\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw6gr4a_h.d(14): Error: no identifier for declarator `char`

    /tmp/tmpw6gr4a_h.d(25): Error: found `)` when expecting `.` following char

    /tmp/tmpw6gr4a_h.d(25): Error: found `==` when expecting identifier following
    `char`.

    /tmp/tmpw6gr4a_h.d(25): Error: found `tolower` when expecting `,`

    /tmp/tmpw6gr4a_h.d(26): Error: found `{` when expecting `)`

    /tmp/tmpw6gr4a_h.d(37): Error: declaration expected, not `return`

    /tmp/tmpw6gr4a_h.d(38): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw6gr4a_h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    auto set = uniq(string);\n    return set.length;\n}\n/*\n Sum of a given\
    \ list\n    >>> sum_of_numbers([1,2,3,4,5])\n    15L\n*/\nlong sum_of_numbers(long[]\
    \ numbers) \n{\n    long s = 0;\n    foreach(item; numbers) \n    {\n        s\
    \ += item;\n    }\n    return s;\n}\n/*\n Given a string and a search pattern,\
    \ find out how many times the search pattern matches the given string.\n    >>>\
    \ find_occurrence(\"dolly\",\"ll\")\n    1L\n    >>> find_occurrence(\"dolly\"\
    ,\"dd\")\n    0L\n*/\nlong find_occurrence(string string, string search) \n{\n\
    \    long i = 0;\n    long j = 0;\n    long count = 0;\n    while(i < string.length\
    \ && j < search.length) \n    {\n        if(string[i] == search[j]) \n       \
    \ {\n            i++;\n            j++;\n        } \n        else \n        {\n\
    \            i = i - j + 1;\n            j = 0;\n        }\n        if(j == search.length)\
    \ \n        {\n            count++;\n            j = 0;\n        }\n    }\n  \
    \  return count;\n}\n/*\n Given a string, find out if it is a palindrome or not.\n\
    \ A palindrome is a word, phrase, number, or other sequence of characters which\
    \ reads the same backward as forward, such as madam or racecar.\n    >>> is_palindrome(\"\
    racecar\")\n    true\n    >>> is_palindrome(\"Hello\")\n    false\n*/\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv4ztzupk.d(13): Error: undefined identifier `uniq`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv4ztzupk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return set(string.toUpper).length;\n}\nunittest\n{\n    alias candidate =\
    \ count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe7t9l7iw.d(13): Error: undefined identifier `set`, did you mean
    template `get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe7t9l7iw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    auto letters = string.to!string.replace(\" \", \"\").replace(\"-\", \"\"\
    ).replace(\"\\n\", \"\").toLowerCase().byChar;\n    long count = 0;\n    foreach(l;\
    \ std.algorithm.uniq(letters)) \n    {\n        count++;\n    }\n    return count;\n\
    }\n/*\nGiven a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n\
    \    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters2(string\
    \ string) \n{\n    string = string.to!string.replace(\" \", \"\").replace(\"-\"\
    , \"\").replace(\"\\n\", \"\").toLowerCase();\n    return std.algorithm.uniq(string.byChar).length;\n\
    }\n/*\nGiven a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n\
    \    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters3(string\
    \ string) \n{\n    string = string.to!string.replace(\" \", \"\").replace(\"-\"\
    , \"\").replace(\"\\n\", \"\").toLowerCase();\n    return std.algorithm.uniq(string.byChar).length;\n\
    }\n/*\nGiven a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n\
    \    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters4(string\
    \ string) \n{\n    string = string.to!string.replace(\" \", \"\").replace(\"-\"\
    , \"\").replace(\"\\n\", \"\").toLowerCase();\n    long count = 0;\n    foreach(l;\
    \ std.algorithm.uniq(string.byChar)) \n    {\n        count++;\n    }\n    return\
    \ count;\n}\n/*\nGiven a string, find\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    auto s = toLower(string);\n    return iota(1, s.length).map!(i => s[i]).uniq.length;\n\
    }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnpugcmif.d(13): Error: undefined identifier `toLower`

    /tmp/tmpnpugcmif.d(14): Error: undefined identifier `iota`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnpugcmif.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    auto ret = tuple(string.front());\n    for (size_t i = 1; i < string.length;\
    \ ++i) \n    {\n        const char c = string[i];\n        if (!std.algorithm.any!(unaryFun!(x\
    \ => c == toUpper(x)))(ret))\n            ret ~= c;\n    }\n    return ret.length;\n\
    }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcc_jdp4z.d(13): Error: no property `front` for type `string`

    /tmp/tmpcc_jdp4z.d(17): Error: undefined identifier `algorithm` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcc_jdp4z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    string str = toUpper(string);\n    return str.unique.length;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr5j5inv4.d(13): Error: `string` is used as a type

    /tmp/tmpr5j5inv4.d(13): Error: undefined identifier `toUpper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr5j5inv4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return size_t.max;\n}\n/*\n Given a string and a character, find out how\
    \ many times the character occurs in the string\n    >>> count_occurrences(\"\
    abcabcabcabcabcabcabcabcabcabc\", 'a')\n    8L\n    >>> count_occurrences(\"xyzxyzxyzxyzxyzxyzxyzxyzxyzxyz\"\
    , 'z')\n    8L\n*/\nlong count_occurrences(string string, char character) \n{\n\
    \    return size_t.max;\n}\n/*\n Given a string, find out if it is a palindrome\n\
    \    >>> is_palindrome(\"abcba\")\n    true\n    >>> is_palindrome(\"abcabc\"\
    )\n    false\n    >>> is_palindrome(\"abccba\")\n    true\n    >>> is_palindrome(\"\
    11121111\")\n    true\n*/\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpa_bitz59.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ddd]

    ??:? void tmpa_bitz59.__unittest_L37_C1() [0x427a9a]

    ??:? void tmpa_bitz59.__modtest() [0x427b60]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb03]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a996]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb29]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fab5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]

    ??:? runModuleUnitTests [0x42b8d9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42822c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return string.toLower.unique.length;\n}\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1z3gy6wl.d(13): Error: no property `toLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1z3gy6wl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164594
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \tauto result = Tuple!(\"characters\" => \"long\")(0L);\nunittest\n{\n    alias\
    \ candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n\
    \    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcljhi7y9.d(13): Error: found `=>` when expecting `)` following
    template argument list

    /tmp/tmpcljhi7y9.d(13): Error: semicolon expected following auto declaration,
    not `"long"`

    /tmp/tmpcljhi7y9.d(13): Error: found `)` when expecting `;` following statement

    /tmp/tmpcljhi7y9.d(14): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcljhi7y9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \  int[] count = new int[256];\n  long total = 0;\n  for (int i = 0; i < string.length;\
    \ i++) \n  {\n    count[cast(uint)string[i]]++;\n  }\n  for (int c = 0; c < 256;\
    \ c++) \n  {\n    if (count[c] > 0) \n    {\n      total++;\n    }\n  }\n  return\
    \ total;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprgezmvpj.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428105]

    ??:? void tmprgezmvpj.__unittest_L28_C1() [0x427e18]

    ??:? void tmprgezmvpj.__modtest() [0x427e84]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c0df]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42af72]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4301fd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4306ac]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430189]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af49]

    ??:? runModuleUnitTests [0x42beb5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    string key_characters = \"\";\n    long n_characters = 0;\n    size_t sz\
    \ = string.length;\n    size_t length_key_characters = 0;\n    foreach(char c;\
    \ string)\n    {\n        string temp = \"\";\n        temp += c;\n        string\
    \ key_characters_temp = key_characters;\n        if( temp.length>0 && temp[0]\
    \ != key_characters_temp.length && key_characters_temp.find(temp) == -1)\n   \
    \     {\n            length_key_characters += 1;\n            key_characters +=\
    \ temp;\n        }\n    }\n    return length_key_characters;\n}\nunittest\n{\n\
    \    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\"\
    ) == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr7is53bg.d(13): Error: `string` is used as a type

    /tmp/tmpr7is53bg.d(19): Error: `string` is used as a type

    /tmp/tmpr7is53bg.d(21): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr7is53bg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return _uniq(to!string(map!(toupper)(string))).length;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters_alt(string string)\
    \ \n{\n    return std.range.uniq(map!(toupper)(string)).length;\n}\n/*\n Given\
    \ a string and a character, count how many times the character\n occurs in the\
    \ string\n    >>> count_occurrences(\"Jerry\", 'r')\n    2L\n    >>> count_occurrences(\"\
    Mississippi\", 's')\n    4L\n    \n*/\nsize_t count_occurrences(string string,\
    \ char ch) \n{\n    return std.range.count(string, ch);\n}\n/*\n Given a string\
    \ and a character, count how many times the character\n occurs in the string\n\
    \    >>> count_occurrences(\"Jerry\", 'r')\n    2L\n    >>> count_occurrences(\"\
    Mississippi\", 's')\n    4L\n    \n*/\nsize_t count_occurrences_alt(string string,\
    \ char ch) \n{\n    size_t result = 0;\n    foreach (ch2; string) {\n        if\
    \ (ch2 == ch) {\n            result++;\n        }\n    }\n    return result;\n\
    }\n/*\n Given a string, find the first character that does not have duplicates\n\
    \ (regardless of case)\n    >>> find_unique_character(\"Jerry\")\n    'J'\n  \
    \  >>> find_unique_character(\"Mississippi\")\n    'M'\n    >>> find_unique_character(\"\
    apple\")\n    'a'\n    \n*/\nchar find_unique_character(string string) \n{\n \
    \   return to!char(std.range.min!(a => count_occurrences(string, a))(string));\n\
    }\n/*\n Given a string, find the first character that does not have duplicates\n\
    \ (regardless of case)\n    >>> find_\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpouhusmfr.d(74): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpouhusmfr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    auto key = SortedRange(string.chars);\n    auto map = KeyValueArray!(char,\
    \ bool, key);\n    foreach(char c; string.chars) {\n        auto result = map.insert(tuple(c,\
    \ false));\n        if(result.isNew) \n            result.keyValue.value = true;\n\
    \    }\n    return map.length;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplvr97c7g.d(13): Error: undefined identifier `SortedRange`

    /tmp/tmplvr97c7g.d(14): Error: template instance `KeyValueArray!(char, bool, key)`
    template `KeyValueArray` is not defined

    /tmp/tmplvr97c7g.d(15): Error: no property `chars` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplvr97c7g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return set(string.lower).length;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkv6h2elo.d(13): Error: undefined identifier `set`, did you mean
    template `get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkv6h2elo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return to!set(string.toLower).length;\n}\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdqluba9n.d(13): Error: template instance `to!set` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdqluba9n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return  array(set(string.lowercase)).length;\n}\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0y3ouxek.d(13): Error: undefined identifier `array`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0y3ouxek.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long result;\n    int[string] characters;\n    foreach(character; string)\n\
    \    {\n        characters[character] = 1;\n    }\n    result = characters.length;\n\
    \    return result;\n}\n/*\nGiven a string, find out how many distinct characters\
    \ (case sensitive) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\"\
    )\n    6L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n*/\nlong count_distinct_characters_case_sensitive(string\
    \ string) \n{\n    long result;\n    string[char] characters;\n    foreach(character;\
    \ string)\n    {\n        characters[character] = 1;\n    }\n    result = characters.length;\n\
    \    return result;\n}\n/*\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxnfy986e.d(40): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxnfy986e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    // auto set=std.set.Set(string);\n    // return set.length;\n    \n    //\
    \ auto x=std.algorithm.unique!(a => a.toLower());\n    // auto x=string.split().uniq;\n\
    \    // return x.length;\n    \n    string[] arr=string.split().uniq;\n    return\
    \ arr.length;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6y4e9lc8.d(20): Error: `string` is used as a type

    /tmp/tmp6y4e9lc8.d(20): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6y4e9lc8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    // write your solution here\n    /*\n    int len = string.length;\n    if\
    \ (len == 0) return 0;\n    int l = 0;\n    int r = 0;\n    bool chars[char.max];\n\
    \    for (int i = 0; i < char.max; i++) {\n        chars[i] = false;\n    }\n\
    \    chars[char.tolower(string[l])] = true;\n    int count = 1;\n    while (r\
    \ < len) {\n        r++;\n        if (r == len) break;\n        if (chars[char.tolower(string[r])]\
    \ == false) {\n            chars[char.tolower(string[r])] = true;\n          \
    \  count++;\n        }\n    }\n    return count;\n    */\n    // solution 2\n\
    \    /*\n    HashSet!char uniqueChars = new HashSet!char();\n    foreach (char\
    \ ch; string)\n    {\n        uniqueChars.insert(ch);\n    }\n    return uniqueChars.length;\n\
    \    */\n    // solution 3\n    import std.conv;\n    string = to!string(to!wstring(string).uniq);\n\
    \    return string.length;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1apvrgeb.d(46): Error: template instance `to!(string)` does not
    match template declaration `to(T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1apvrgeb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    dchar[char] temp;\n    foreach(dchar c; string)\n  \
    \  {\n        if(!temp.insert(c).second) // \u043F\u0440\u043E\u0432\u0435\u0440\
    \u044F\u0435\u043C \u043D\u0430\u043B\u0438\u0447\u0438\u0435 \u0431\u0443\u043A\
    \u0432\u044B \u0432 \u043C\u0430\u0441\u0441\u0438\u0432\u0435\n        {\n  \
    \          count ++;\n        }\n    }\n    return count;\n}\n```\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppsdh9l0j.d(24): Error: declaration expected, not `""`

    /tmp/tmppsdh9l0j.d(24): Error: unterminated string constant starting at /tmp/tmppsdh9l0j.d(24)

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppsdh9l0j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return set!string(set(string.toUpper.to!char[]).array).length;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_fr14vkf.d(13): Error: template instance `set!string` template
    `set` is not defined, did you mean get(K, V)(inout(V[K]) aa, K key, lazy inout(V)
    defaultValue)?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_fr14vkf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \     auto result = [string[0]];\n     foreach(character; string)\n     {\n  \
    \     result ~= character;\n     }\n     return result.length;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmp_qvgjr16.d(13): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x427f0e]

    ??:? long tmp_qvgjr16.count_distinct_characters(immutable(char)[]) [0x427a6c]

    ??:? void tmp_qvgjr16.__unittest_L20_C1() [0x427b04]

    ??:? void tmp_qvgjr16.__modtest() [0x427be0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c69f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b532]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ff85]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430434]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ff11]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b509]

    ??:? runModuleUnitTests [0x42c475]

    ??:? void rt.dmain2._d_run_main(int, char**, e'
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return set(string.lower.split('')).length;\n}\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplohvhmrm.d(13): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplohvhmrm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    string s = to!string(string.map!(tolower));\n    return s.length == 0 ? 0\
    \ : s.chunks(1).distinct.length;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_img4stx.d(13): Error: `string` is used as a type

    /tmp/tmp_img4stx.d(13): Error: template instance `to!string` template `to` is
    not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_img4stx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    auto cmp = (a, b) => toLower(a) == toLower(b); // equivalence relation\n\
    \    auto to_distinct_chars = unique!cmp(string); // deduplicate using equivalence\n\
    \    return to_distinct_chars.length;\n}\n/*\n  Find the longest word in a sentence\n\
    \  >>> find_longest_word(\"Hello, my name is $firstname. I am $age old\")\n  \"\
    firstname\"\n  >>> find_longest_word(\"Today, I want to share my opinion with\
    \ you\")\n  \"opinion\"\n*/\nstring find_longest_word(string sentence) \n{\n \
    \   return max!((a, b) => a.length < b.length)(sentence.split(\" \"));\n}\n/*\n\
    Find the shortest word in a sentence\n    >>> find_shortest_word(\"My name is\
    \ $firstname. I am $age old\")\n    \"My\"\n    >>> find_shortest_word(\"Now,\
    \ I want to share my opinion with you\")\n    \"I\"\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpggz8lts7.d(28): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpggz8lts7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long total = 0;\n    Map!char map;\n    foreach(char ch; string) \n    {\n\
    \        map[ch] = map.get(ch, 0) + 1;\n    }\n    return map.length;\n}\n/*\n\
    \ Given a string and a character, calculate how many times that character occurs\
    \ in the string\n    >>> count_character(\"The quick brown fox\", 'o')\n    2L\n\
    \    >>> count_character(\"xxx\", 'x')\n    3L\n*/\nlong count_character(string\
    \ string, char character) \n{\n    long total = 0;\n    foreach(char ch; string)\
    \ \n    {\n        if(ch == character)\n            total++;\n    }\n    return\
    \ total;\n}\n/*\n Given a string, find out the most frequent character in it\n\
    \    >>> find_most_frequent_character(\"The quick brown fox\")\n    'o'\n    >>>\
    \ find_most_frequent_character(\"JJJJ\")\n    'J'\n*/\nchar find_most_frequent_character(string\
    \ string) \n{\n    char max_character = ' ';\n    long max_number = 0;\n    foreach(char\
    \ ch; string) \n    {\n        long count = count_character(string, ch);\n   \
    \     if(count > max_number) \n        {\n            max_number = count;\n  \
    \          max_character = ch;\n        }\n    }\n    return max_character;\n\
    }\n/*\n Given a string, remove all duplicated characters from it.\n Remember that\
    \ capitalization matters here.\n    >>> remove_duplicated_characters(\"Jerry\"\
    )\n    \"Jery\"\n    >>> remove_duplicated_characters(\"Mississippi\")\n    \"\
    Misp\"\n*/\nstring remove_duplicated_characters(string string) \n{\n    // Don't\
    \ modify the input string, use a copy of it\n    string temp = string;\n    string\
    \ new_string = \"\";\n    foreach(char ch; temp) \n    {\n        size_t index\
    \ = temp.indexOf(ch);\n        if(index != -1) \n        {\n            temp =\
    \ temp[0..index] ~ temp[index\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoefvp_le.d(79): Error: found `unittest` when expecting `,`

    /tmp/tmpoefvp_le.d(89): Error: found `void` when expecting `,`

    /tmp/tmpoefvp_le.d(89): Error: found `{` when expecting `,`

    /tmp/tmpoefvp_le.d(89): Error: expression expected, not `}`

    /tmp/tmpoefvp_le.d(89): Error: found `End of File` when expecting `,`

    /tmp/tmpoefvp_le.d(89): Error: found `End of File` when expecting `]`

    /tmp/tmpoefvp_le.d(89): Error: found `End of File` when expecting `;` following
    statement

    /tmp/tmpoefvp_le.d(89): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpoefvp_le.d(89): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpoefvp_le.d(89): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoefvp_le.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \tauto char_set = std.set.make();\n\t\n\tfor(int i = 0; i < string.length; i++)\
    \ \n\t{\n\t\tchar_set.insert(tolower(string[i]));\n\t}\n\t\n\treturn char_set.length;\n\
    }\n/*\nGiven a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n\
    \    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n\tauto char_set = std.set.make();\n\t\n\tfor(int i = 0; i < string.length;\
    \ i++) \n\t{\n\t\tchar_set.insert(tolower(string[i]));\n\t}\n\t\n\treturn char_set.length;\n\
    }\nlong count_distinct_characters(string string) \n{\n\tauto char_set = std.set.make();\n\
    \t\n\tfor(int i = 0; i < string.length; i++) \n\t{\n\t\tchar_set.insert(tolower(string[i]));\n\
    \t}\n\t\n\treturn char_set.length;\n}\nlong count_distinct_characters(string string)\
    \ \n{\n\tauto char_set = std.set.make();\n\t\n\tfor(int i = 0; i < string.length;\
    \ i++) \n\t{\n\t\tchar_set.insert(tolower(string[i]));\n\t}\n\t\n\treturn char_set.length;\n\
    }\nlong count_distinct_characters(string string) \n{\n\tauto char_set = std.set.make();\n\
    \t\n\tfor(int i = 0; i < string.length; i++) \n\t{\n\t\tchar_set.insert(tolower(string[i]));\n\
    \t}\n\t\n\treturn char_set.length;\n}\nlong count_distinct_characters(string string)\
    \ \n{\n\tauto char_set = std.set.make();\n\t\n\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8l6liqvq.d(79): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8l6liqvq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    auto distinct_characters = newSet!char;\n    foreach(character; string) \n\
    \    {\n        distinct_characters.insert(character);\n    }\n    return distinct_characters.length;\n\
    }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp019igqaz.d(13): Error: template instance `newSet!char` template
    `newSet` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp019igqaz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    enum res = typeof(char.toLower(string[0]))[]; \n    foreach(char c; char.toLower(string))\
    \ \n    {\n        if(res.count(c) == 0) \n        {\n            res ~= c;\n\
    \        }\n    }\n    return res.length;\n}\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmhmsi6ba.d(13): Error: no property `toLower` for type `char`

    /tmp/tmpmhmsi6ba.d(14): Error: no property `toLower` for type `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmhmsi6ba.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164595
