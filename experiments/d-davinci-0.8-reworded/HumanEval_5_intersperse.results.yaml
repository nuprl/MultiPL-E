name: HumanEval_5_intersperse
language: d
results:
- program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    auto result\
    \ = numbers[];\n    if (numbers.length > 0)\n    {\n        result ~= numbers[0];\n\
    \        foreach (i, element; numbers[1..$])\n        {\n            result ~=\
    \ delimeter;\n            result ~= element;\n        }\n    }\n    return result;\n\
    }\n/*\n    https://www.hackerrank.com/challenges/mini-max-sum/problem\n    \n\
    \    Given five positive integers, find the minimum and maximum values that can\
    \ be calculated by summing exactly four of the five integers. Then print the respective\
    \ minimum and maximum values as a single line of two space-separated long integers.\n\
    \    \n    >>> miniMaxSum([1, 3, 5, 7, 9])\n    (16, 24)\n*/\nTuple!(long, long)\
    \ miniMaxSum(long[] arr) \n{\n    auto sortedArr = arr.sort()[];\n    return tuple(sortedArr[0..$-1].sum,\
    \ sortedArr[1..$].sum);\n}\n/*\n    https://www.hackerrank.com/challenges/a-very-big-sum/problem\n\
    \    Calculate and print the sum of the elements in an array, keeping in mind\
    \ that some of those integers may be quite large.\n    \n    >>> aVeryBigSum([1L,\
    \ 2L, 3L, 4L, 5L])\n    15L\n*/\nlong aVeryBigSum(long[] ar) \n{\n    return ar.sum;\n\
    }\n/*\n    https://www.hackerrank.com/challenges/diagonal-difference/problem\n\
    \    Given a square matrix, calculate the absolute difference between the sums\
    \ of its diagonals.\n    \n    >>> diagonalDifference([[1, 2, 3], [4, 5, 6], [9,\
    \ 8, 9]])\n    2\n*/\nlong diagonalDifference(long[][] arr) \n{\n    // Dimension\
    \ will be equal to length of any of the arrays inside arr\n    auto dimension\
    \ = arr.length;\n    auto sum1 = 0L;\n    auto sum2 = 0L;\n    foreach (index,\
    \ row; arr)\n    {\n        sum1 += row[index\nunittest\n{\n    alias candidate\
    \ = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8dprns7s.d(65): Error: found `unittest` when expecting `,`\\\
    n/tmp/tmp8dprns7s.d(73): Error: found `void` when expecting `,`\\n/tmp/tmp8dprns7s.d(73):\
    \ Error: found `{` when expecting `,`\\n/tmp/tmp8dprns7s.d(73): Error: expression\
    \ expected, not `}`\\n/tmp/tmp8dprns7s.d(73): Error: found `End of File` when\
    \ expecting `,`\\n/tmp/tmp8dprns7s.d(73): Error: found `End of File` when expecting\
    \ `]`\\n/tmp/tmp8dprns7s.d(73): Error: found `End of File` when expecting `;`\
    \ following statement\\n/tmp/tmp8dprns7s.d(73): Error: found `End of File` when\
    \ expecting `}` following compound statement\\n/tmp/tmp8dprns7s.d(73): Error:\
    \ found `End of File` when expecting `}` following compound statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8dprns7s.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n  auto res\
    \ = new long[];\n  foreach (i, e; numbers) \n  {\n    res ~= e;\n    if (i < numbers.length\
    \ - 1) \n    {\n      res ~= delimeter;\n    }\n  }\n  return res;\n}\n/*\n Insert\
    \ a number 'delimeter' between every two consecutive elements of input array `numbers'\n\
    \    >>> intersperse([], 4.0)\n    []\n    >>> intersperse([1.0, 2.0, 3.0], 4.0)\n\
    \    [1.0, 4.0, 2.0, 4.0, 3.0]\n    \n*/\ndouble[] intersperse(double[] numbers,\
    \ double delimeter) \n{\n  auto res = new double[];\n  foreach (i, e; numbers)\
    \ \n  {\n    res ~= e;\n    if (i < numbers.length - 1) \n    {\n      res ~=\
    \ delimeter;\n    }\n  }\n  return res;\n}\n/*\n Insert a number 'delimeter' between\
    \ every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 'hello')\n    []\n    >>> intersperse(['a', 'b', 'c'], 'hello')\n    ['a', 'hello',\
    \ 'b', 'hello', 'c']\n    \n*/\nstring[] intersperse(string[] numbers, string\
    \ delimeter) \n{\n  auto res = new string[];\n  foreach (i, e; numbers) \n  {\n\
    \    res ~= e;\n    if (i < numbers.length - 1) \n    {\n      res ~= delimeter;\n\
    \    }\n  }\n  return res;\n}\n/*\nInsert a number 'delimeter' between every two\
    \ consecutive elements of input array `numbers'\n    >>> intersperse([], [1L,\
    \ 2L, 3L])\n    []\n    >>> intersperse([1L, 2L, 3L], [1L, 2L, 3L])\n    [1L,\
    \ 1L, 2L, 3L, 2L, 1L, 2L, 3L, 3L]\n    \n*/\nlong[\nunittest\n{\n    alias candidate\
    \ = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj7ly63ky.d(75): Error: expression expected, not `unittest`\\\
    n/tmp/tmpj7ly63ky.d(76): Error: found `{` when expecting `]`\\n/tmp/tmpj7ly63ky.d(77):\
    \ Error: no identifier for declarator `long[0]`\\n/tmp/tmpj7ly63ky.d(79): Error:\
    \ declaration expected, not `assert`\\n/tmp/tmpj7ly63ky.d(80): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpj7ly63ky.d(81): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpj7ly63ky.d(82): Error: unrecognized declaration\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj7ly63ky.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[][]\
    \ zipped = zip(numbers, repeat(delimeter, numbers.length));\n    long[] interspersed\
    \ = new long[(numbers.length * 2) - 1];\n    foreach (i, value; zip(zipped))\n\
    \    {\n        interspersed[i] = value[0];\n        interspersed[i + 1] = value[1];\n\
    \        i += 2;\n    }\n    return interspersed[0 .. $ - 1];\n}\nunittest\n{\n\
    \    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwxs28nmt.d(13): Error: undefined identifier `zip`\\n/tmp/tmpwxs28nmt.d(15):\
    \ Error: undefined identifier `zip`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpwxs28nmt.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    auto result\
    \ = numbers.dup;\n    immutable len = result.length;\n    foreach (index, ref\
    \ element; result) \n    {\n        if (index + 1 < len)\n        {\n        \
    \    result = result[0 .. index + 1] ~ [delimeter] ~ result[index + 1 .. $];\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpd0r77ych.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4295e9]\\n??:? void tmpd0r77ych.__unittest_L24_C1()\
    \ [0x4282a5]\\n??:? void tmpd0r77ych.__modtest() [0x428560]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e1cb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429272]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42af55]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42afe4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42aee1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429249]\\n??:? runModuleUnitTests [0x42dfa1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429b00]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429a87]\\n??:? _d_run_main [0x4299f2]\\n??:? main [0x428573]\\\
    n??:? __libc_start_main [0xf8565554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    size_t\
    \ n = numbers.length;\n    if (n == 0) \n    {\n        return [];\n    } \n \
    \   else \n    {\n        long[] result = new long[2 * n - 1];\n        result[0]\
    \ = numbers[0];\n        size_t i = 1;\n        while (i < n) \n        {\n  \
    \          result[2 * i - 1] = delimeter;\n            result[2 * i] = numbers[i];\n\
    \            i += 1;\n        }\n        return result;\n    }\n}\n/*\n Translate\
    \ a string by replacing characters.\n    >>> translate(\"hello\", \"abcd\", \"\
    ABCD\")\n    \"AellA\"\n    >>> translate(\"hello\", \"\", \"ABCD\")\n    \"hello\"\
    \n    >>> translate(\"hello\", \"abcd\", \"\")\n    \"hello\"\n    >>> translate(\"\
    hello\", \"abcd\", \"abcd\")\n    \"hello\"\n    >>> translate(\"hello\", \"abcd\"\
    , \"bcde\")\n    \"hdllo\"\n    >>> translate(\"hello\", \"abc\", \"def\")\n \
    \   \"hello\"\n    >>> translate(\"hello\", \"abc\", \"defghi\")\n    \"hello\"\
    \n*/\nstring translate(string input, string from, string to) \n{\n    string result\
    \ = input;\n    size_t nf = from.length;\n    size_t nt = to.length;\n    size_t\
    \ i = 0;\n    while (i < nf) \n    {\n        size_t k = result.indexOf(from[i]);\n\
    \        while (k != SIZE_MAX) \n        {\n            result = result[0 .. k]\
    \ ~ (i < nt ? to[i] : \"\") ~ result[k + 1 .. $];\n            k = result.indexOf(from[i]);\n\
    \        }\n        i += 1;\n    }\n    return result;\n}\n/*\n A tail slice operator\n\
    \    >>> [1, 2, 3, 4][1 .. $]\n    [2, 3, 4]\n    >>> [1, 2, 3, 4][2 .. $]\n \
    \   [3, 4]\n    >>> [1, 2,\nunittest\n{\n    alias candidate = intersperse;\n\n\
    \    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpab7lar8u.d(67): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpab7lar8u.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    return\
    \ numbers.chunks(2).enumerate().map!((i, chunk) => \n                        \
    \                      (i == 0 ? chunk : chunk.insert(0, delimeter))).join;\n\
    }\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp62eteufp.d(13): Error: no property `chunks` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp62eteufp.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ interspersed = new long[];\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4jnpl4hl.d(14): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4jnpl4hl.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ ret;\n    ret.length = (numbers.length * 2) - 1;\n    foreach (i, n; numbers)\n\
    \    {\n        if (i != 0)\n        {\n            ret[i * 2 - 1] = delimeter;\n\
    \        }\n        ret[i * 2] = n;\n    }\n    return ret;\n}\nunittest\n{\n\
    \    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_arraysetlengthT [0x42985a]\\n??:? long[]\
    \ tmprlhsz47s.intersperse(long[], long) [0x427e5f]\\n??:? void tmprlhsz47s.__unittest_L25_C1()\
    \ [0x427f4c]\\n??:? void tmprlhsz47s.__modtest() [0x42819c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d56f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c402]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x431841]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x431cf0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4317cd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42c3d9]\\n??:? runModuleUnitTests [0x42d345]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288e0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428867]\\n??:? _d_run_main [0x4287d2]\\n??:? main [0x4281af]\\\
    n??:? __libc_start_main [0xe987c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[][]\
    \ _ = numbers.map!(a => [a, delimeter]).array;\n    return (_[0..$-1].reduce!((a,\
    \ b) => a ~ b));\n}\n \n// Insert a number 'delimeter' between every two consecutive\
    \ elements of input array `numbers'\nlong[] intersperse(long[] numbers, long delimeter,\
    \ long leftPadding, long rightPadding) \n{\n    long[][] _ = numbers.map!(a =>\
    \ [leftPadding, a, rightPadding]).array;\n    return (_[0..$-1].reduce!((a, b)\
    \ => a ~ b));\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy777fpwf.d(13): Error: no property `map` for type `long[]`\\\
    n/tmp/tmpy777fpwf.d(14): Error: no property `reduce` for type `long[][]`\\n/tmp/tmpy777fpwf.d(20):\
    \ Error: no property `map` for type `long[]`\\n/tmp/tmpy777fpwf.d(21): Error:\
    \ no property `reduce` for type `long[][]`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpy777fpwf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0) return [];\n    if (numbers.length == 1) return numbers;\n    long[] res\
    \ = new long[2 * numbers.length - 1];\n    res[0] = numbers[0];\n    foreach (i,\
    \ num; numbers[1 .. $]) {\n        res[2 * i - 1] = delimeter;\n        res[2\
    \ * i] = num;\n    }\n    return res;\n}\n/*\n Insert a number 'delimeter' between\
    \ every two consecutive elements of input array `numbers'\n \n    >>> intersperse([1.1,\
    \ 2.2, 3.3], 4.4)\n    [1.1, 4.4, 2.2, 4.4, 3.3]\n*/\ndouble[] intersperse(double[]\
    \ numbers, double delimeter) \n{\n    if (numbers.length == 0) return [];\n  \
    \  if (numbers.length == 1) return numbers;\n    double[] res = new double[2 *\
    \ numbers.length - 1];\n    res[0] = numbers[0];\n    foreach (i, num; numbers[1\
    \ .. $]) {\n        res[2 * i - 1] = delimeter;\n        res[2 * i] = num;\n \
    \   }\n    return res;\n}\n/*\nInsert an object 'delimeter' between every two\
    \ consecutive elements of input array `numbers'\n    >>> intersperse([1, 2, 3],\
    \ 4)\n    [1, 4, 2, 4, 3]\n*/\nT[] intersperse(T)(T[] numbers, T delimeter) \n\
    {\n    if (numbers.length == 0) return [];\n    if (numbers.length == 1) return\
    \ numbers;\n    T[] res = new T[2 * numbers.length - 1];\n    res[0] = numbers[0];\n\
    \    foreach (i, num; numbers[1 .. $]) {\n        res[2 * i - 1] = delimeter;\n\
    \        res[2 * i] = num;\n    }\n    return res;\n}\n/*\n >>> [1, 2, 3, 4, 5].break(3);\n\
    \ [[1, 2, 3], [4,\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjn6p3ss5.d(58): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjn6p3ss5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ delimeted;\n    foreach (num; numbers) \n    {\n        delimeted ~= num;\n\
    \        if (num != numbers[$ - 1]) \n        {\n            delimeted ~= delimeter;\n\
    \        }\n    }\n    return delimeted;\n}\n/*\n Insert a number 'delimeter'\
    \ after every 'length' consecutive elements of input array `numbers'\n    >>>\
    \ intersperse([], 4L, 2)\n    []\n    >>> intersperse([1L, 2L, 3L, 4L, 5L, 6L],\
    \ 7L, 2)\n    [1L, 2L, 7L, 3L, 4L, 7L, 5L, 6L]\n    >>> intersperse([1L, 2L, 3L,\
    \ 4L, 5L, 6L], 7L, 3)\n    [1L, 2L, 3L, 7L, 4L, 5L, 6L]\n    >>> intersperse([1L,\
    \ 2L, 3L, 4L, 5L, 6L], 7L, 4)\n    [1L, 2L, 3L, 4L, 7L, 5L, 6L]\n    >>> intersperse([1L,\
    \ 2L, 3L, 4L, 5L, 6L], 7L, 5)\n    [1L, 2L, 3L, 4L, 5L, 7L, 6L]\n    >>> intersperse([1L,\
    \ 2L, 3L, 4L, 5L, 6L], 7L, 6)\n    [1L, 2L, 3L, 4L, 5L, 6L]\n    >>> intersperse([1L,\
    \ 2L, 3L, 4L, 5L, 6L], 7L, 7)\n    [1L, 2L, 3L, 4L, 5L, 6L]\n    >>> intersperse([1L,\
    \ 2L, 3L, 4L, 5L, 6L], 7L, 10)\n    [1L, 2L, 3L, 4L, 5L, 6L]\n*/\nlong[] intersperse(long[]\
    \ numbers, long delimeter, int length) \n{\n    long[]\nunittest\n{\n    alias\
    \ candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnupjxbx0.d(46): Error: no identifier for declarator `long[]`\\\
    n/tmp/tmpnupjxbx0.d(46): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnupjxbx0.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n    {\n        return numbers;\n    }\n    long[] output = new long[2*numbers.length\
    \ - 1];\n    foreach (i, ref number; numbers)\n    {\n        if (i != 0)\n  \
    \      {\n            output[2*i - 1] = delimeter;\n        }\n        output[2*i]\
    \ = number;\n    }\n    return output;\n}\n/*\n    >>> intersperse([], 'c')\n\
    \    []\n    >>> intersperse(['a', 'b', 'c'], 'd')\n    ['a', 'd', 'b', 'd', 'c']\n\
    */\nchar[] intersperse(char[] numbers, char delimeter) \n{\n    if (numbers.length\
    \ == 0)\n    {\n        return numbers;\n    }\n    char[] output = new char[2*numbers.length\
    \ - 1];\n    foreach (i, ref number; numbers)\n    {\n        if (i != 0)\n  \
    \      {\n            output[2*i - 1] = delimeter;\n        }\n        output[2*i]\
    \ = number;\n    }\n    return output;\n}\n/*\n    >>> intersperse([], \"cd\"\
    )\n    []\n    >>> intersperse([\"ab\", \"c\", \"d\"], \"e\")\n    [\"ab\", \"\
    e\", \"c\", \"e\", \"d\"]\n*/\nstring[] intersperse(string[] numbers, string delimeter)\
    \ \n{\n    if (numbers.length == 0)\n    {\n        return numbers;\n    }\n \
    \   string[] output = new string[2*numbers.length - 1];\n    foreach (i, ref number;\
    \ numbers)\n    {\n        if (i != 0)\n        {\n            output[2*i - 1]\
    \ = delimeter;\n        }\n        output[2*i] = number;\n    }\n    return output;\n\
    }\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \nin \n{\n    assert(numbers.length\
    \ >= 0);\n}\nout \n{\n    assert(numbers.length == result.length - (result.length\
    \ - 1) / 2);\n}\ndo \n{\n    if (numbers.length == 0)\n    {\n        return numbers;\n\
    \    }\n    else\n    {\n        return numbers[0..1].concat([delimeter]).concat(intersperse(numbers[1..$],\
    \ delimeter));\n    }\n}\nunittest\n{\n    alias candidate = intersperse;\n\n\
    \    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppw8tydcw.d(28): Error: no property `concat` for type `long[]`\\\
    n/tmp/tmppw8tydcw.d(18): Error: undefined identifier `result`, did you mean variable\
    \ `__result`?\\n/tmp/tmppw8tydcw.d(18): Error: undefined identifier `result`,\
    \ did you mean variable `__result`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmppw8tydcw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0) \n    {\n        return numbers;\n    }\n    else \n    {\n        return\
    \ join(tuple(map!(a => tuple(a, delimeter), numbers)));\n    }\n}\n/*\n 'interweave'\
    \ function interweaves elements of `numbers' list\n    >>> interweave([], [])\n\
    \    []\n    >>> interweave([1L, 2L, 3L], [4L, 5L, 6L])\n    [1L, 4L, 2L, 5L,\
    \ 3L, 6L]\n    >>> interweave([1L, 2L, 3L], [4L, 5L])\n    [1L, 4L, 2L, 5L, 3L]\n\
    \    >>> interweave([1L, 2L], [4L, 5L, 6L])\n    [1L, 4L, 2L, 5L, 6L]\n*/\nlong[]\
    \ interweave(long[] xs, long[] ys) \n{\n    long[] res = new long[xs.length +\
    \ ys.length];\n    ulong zi = 0;\n    foreach (long x; xs) \n    {\n        res[zi]\
    \ = x;\n        zi += 2;\n    }\n    foreach (long y; ys) \n    {\n        res[zi]\
    \ = y;\n        zi += 2;\n    }\n    return res;\n}\n/*\n Rotate elements of array\
    \ `numbers' cyclically to the right by `n' positions\n    >>> rotate([], 1L)\n\
    \    []\n    >>> rotate([1L, 2L, 3L], 1L)\n    [3L, 1L, 2L]\n    >>> rotate([1L,\
    \ 2L, 3L], 2L)\n    [2L, 3L, 1L]\n    >>> rotate([1L, 2L, 3L], 3L)\n    [1L, 2L,\
    \ 3L]\n    >>> rotate([1L, 2L, 3L], 4L)\n    [3L, 1L, 2L]\n    >>> rotate([1L,\
    \ 2L, 3L], -1L\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6bektbf0.d(49): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6bektbf0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ ret = new long[];\n    foreach(long num; numbers)\n    {\n        ret ~= num;\n\
    \        if(num != numbers[$-1]) ret ~= delimeter;\n    }\n    return ret;\n}\n\
    /*\n Convert a number to a string representation of it's digits.\nunittest\n{\n\
    \    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4ikkrek6.d(21): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ikkrek6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    for (size_t\
    \ j = 0; j < numbers.length; j++) {\n        result[i] = numbers[j];\n       \
    \ i++;\n        if (j != numbers.length - 1) {\n            result[i] = delimeter;\n\
    \            i++;\n        }\n    }\n    return result;\n}\n/*\n Input:\n    -\
    \ `numbers': an array of numbers\n    - `expected_sum': the expected sum of `numbers'\n\
    \    - `delimeter': the number to insert between elements of `numbers' (see `intersperse()'\
    \ above)\n    - `size': the number of elements in `numbers'\n    \n Find all subsets\
    \ of `numbers' whose elements add up to `expected_sum'\n \n Return:\n    - `subsets':\
    \ an array of all valid subsets of `numbers'\n    - `subset_sums': the sums of\
    \ all valid subsets of `numbers'\n    - `subset_bools': a list of boolean arrays\
    \ representing the valid subsets of `numbers' (see also `subset()' below)\n*/\n\
    unittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L)\
    \ == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L,\
    \ 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da33]\\n??:? _d_newarrayT\
    \ [0x4297b8]\\n??:? long[] tmpc231aejw.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpc231aejw.__unittest_L39_C1() [0x427f48]\\n??:? void tmpc231aejw.__modtest()\
    \ [0x428198]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4f3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b386]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430611]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43059d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b35d]\\n??:? runModuleUnitTests [0x42c2c9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42885f]\\n??:? _d_run_main [0x4287ca]\\n??:? main [0x4281ab]\\\
    n??:? __libc_start_main [0x6a014554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    auto r\
    \ = [];\n    foreach (n; numbers)\n    {\n        r ~= n;\n        if (n != numbers[$\
    \ - 1])\n            r ~= delimeter;\n    }\n    return r;\n}\nunittest\n{\n \
    \   alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n \
    \   assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsgf9dicb.d(16): Error: cannot append type `long` to type `void[]`\\\
    n/tmp/tmpsgf9dicb.d(18): Error: cannot append type `long` to type `void[]`\\n/tmp/tmpsgf9dicb.d(20):\
    \ Error: cannot implicitly convert expression `r` of type `void[]` to `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsgf9dicb.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \nin \n{\n    assert(numbers.length\
    \ >= 0);\n}\nout\n{\n    assert(numbers.length <= numbers.length * 2 + 1);\n}\n\
    do\n{\n    var result = new long[numbers.length * 2 + 1];\n    size_t i = 0;\n\
    \    while (i < numbers.length) \n    {\n        result[i * 2] = numbers[i];\n\
    \        result[i * 2 + 1] = delimeter;\n        i = i + 1;\n    }\n    return\
    \ result[0..numbers.length * 2 - 1];\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7r935vx4.d(22): Error: undefined identifier `var`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7r935vx4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0) \n    {\n        return numbers;\n    }\n    auto result = new long[(numbers.length\
    \ * 2) - 1];\n    result[0] = numbers[0];\n    for (size_t i = 1; i < numbers.length;\
    \ i++) \n    {\n        result[(i * 2) - 1] = delimeter;\n        result[i * 2]\
    \ = numbers[i];\n    }\n    return result;\n}\n \n/*\n \n Concatenate two arrays\n\
    \    >>> concat([1L, 2L, 3L], [4L, 5L, 6L])\n    [1L, 2L, 3L, 4L, 5L, 6L]\n  \
    \  \n*/\nlong[] concat(long[] array1, long[] array2) \n{\n    long[] result =\
    \ new long[array1.length + array2.length];\n    foreach (size_t i, e; array1)\n\
    \    {\n        result[i] = e;\n    }\n    foreach (size_t i, e; array2)\n   \
    \ {\n        result[i + array1.length] = e;\n    }\n    return result;\n}\n \n\
    \ \n/*\n \n Sum up all the elements of the input array\n    >>> sum([])\n    0L\n\
    \    >>> sum([1L, 2L, 3L])\n    6L\n    \n*/\nlong sum(long[] numbers) \n{\n \
    \   long result = 0L;\n    foreach (n; numbers)\n    {\n        result += n;\n\
    \    }\n    return result;\n}\n \n/*\n \n Compute the product of all the elements\
    \ of the input array\n    >>> product([])\n    1L\n    >>> product([1L, 2L, 3L])\n\
    \    6L\n    \n*/\nlong product(long[] numbers) \n{\n    long result = 1L;\n \
    \   foreach (n; numbers)\n    {\n        result *= n;\n    }\n    return result;\n\
    }\n \n/*\n \n Remove duplicate elements from an array\n    >>> unique([1L, 2L,\
    \ 1L\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb90885fj.d(87): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb90885fj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[(cast(ulong)numbers.length)*2 - 1];\n    long j = 0;\n   \
    \ for (; j < numbers.length - 1; j += 1) {\n        result[j*2] = numbers[j];\n\
    \        result[j*2 + 1] = delimeter;\n    }\n    result[j*2] = numbers[j];\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n  \
    \  assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L)\
    \ == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) ==\
    \ [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da93]\\n??:? _d_newarrayT\
    \ [0x429818]\\n??:? long[] tmpd1le0d16.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpd1le0d16.__unittest_L22_C1() [0x427fa4]\\n??:? void tmpd1le0d16.__modtest()\
    \ [0x4281f4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c553]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3e6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430671]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b20]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305fd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3bd]\\n??:? runModuleUnitTests [0x42c329]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428938]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288bf]\\n??:? _d_run_main [0x42882a]\\n??:? main [0x428207]\\\
    n??:? __libc_start_main [0xb4051554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
