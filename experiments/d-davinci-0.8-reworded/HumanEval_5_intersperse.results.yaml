language: d
name: HumanEval_5_intersperse
results:
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    auto result\
    \ = numbers[];\n    if (numbers.length > 0)\n    {\n        result ~= numbers[0];\n\
    \        foreach (i, element; numbers[1..$])\n        {\n            result ~=\
    \ delimeter;\n            result ~= element;\n        }\n    }\n    return result;\n\
    }\n/*\n    https://www.hackerrank.com/challenges/mini-max-sum/problem\n    \n\
    \    Given five positive integers, find the minimum and maximum values that can\
    \ be calculated by summing exactly four of the five integers. Then print the respective\
    \ minimum and maximum values as a single line of two space-separated long integers.\n\
    \    \n    >>> miniMaxSum([1, 3, 5, 7, 9])\n    (16, 24)\n*/\nTuple!(long, long)\
    \ miniMaxSum(long[] arr) \n{\n    auto sortedArr = arr.sort()[];\n    return tuple(sortedArr[0..$-1].sum,\
    \ sortedArr[1..$].sum);\n}\n/*\n    https://www.hackerrank.com/challenges/a-very-big-sum/problem\n\
    \    Calculate and print the sum of the elements in an array, keeping in mind\
    \ that some of those integers may be quite large.\n    \n    >>> aVeryBigSum([1L,\
    \ 2L, 3L, 4L, 5L])\n    15L\n*/\nlong aVeryBigSum(long[] ar) \n{\n    return ar.sum;\n\
    }\n/*\n    https://www.hackerrank.com/challenges/diagonal-difference/problem\n\
    \    Given a square matrix, calculate the absolute difference between the sums\
    \ of its diagonals.\n    \n    >>> diagonalDifference([[1, 2, 3], [4, 5, 6], [9,\
    \ 8, 9]])\n    2\n*/\nlong diagonalDifference(long[][] arr) \n{\n    // Dimension\
    \ will be equal to length of any of the arrays inside arr\n    auto dimension\
    \ = arr.length;\n    auto sum1 = 0L;\n    auto sum2 = 0L;\n    foreach (index,\
    \ row; arr)\n    {\n        sum1 += row[index\nunittest\n{\n    alias candidate\
    \ = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8gd1znx_.d(65): Error: found `unittest` when expecting `,`

    /tmp/tmp8gd1znx_.d(73): Error: found `void` when expecting `,`

    /tmp/tmp8gd1znx_.d(73): Error: found `{` when expecting `,`

    /tmp/tmp8gd1znx_.d(73): Error: expression expected, not `}`

    /tmp/tmp8gd1znx_.d(73): Error: found `End of File` when expecting `,`

    /tmp/tmp8gd1znx_.d(73): Error: found `End of File` when expecting `]`

    /tmp/tmp8gd1znx_.d(73): Error: found `End of File` when expecting `;` following
    statement

    /tmp/tmp8gd1znx_.d(73): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp8gd1znx_.d(73): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8gd1znx_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n  auto res\
    \ = new long[];\n  foreach (i, e; numbers) \n  {\n    res ~= e;\n    if (i < numbers.length\
    \ - 1) \n    {\n      res ~= delimeter;\n    }\n  }\n  return res;\n}\n/*\n Insert\
    \ a number 'delimeter' between every two consecutive elements of input array `numbers'\n\
    \    >>> intersperse([], 4.0)\n    []\n    >>> intersperse([1.0, 2.0, 3.0], 4.0)\n\
    \    [1.0, 4.0, 2.0, 4.0, 3.0]\n    \n*/\ndouble[] intersperse(double[] numbers,\
    \ double delimeter) \n{\n  auto res = new double[];\n  foreach (i, e; numbers)\
    \ \n  {\n    res ~= e;\n    if (i < numbers.length - 1) \n    {\n      res ~=\
    \ delimeter;\n    }\n  }\n  return res;\n}\n/*\n Insert a number 'delimeter' between\
    \ every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 'hello')\n    []\n    >>> intersperse(['a', 'b', 'c'], 'hello')\n    ['a', 'hello',\
    \ 'b', 'hello', 'c']\n    \n*/\nstring[] intersperse(string[] numbers, string\
    \ delimeter) \n{\n  auto res = new string[];\n  foreach (i, e; numbers) \n  {\n\
    \    res ~= e;\n    if (i < numbers.length - 1) \n    {\n      res ~= delimeter;\n\
    \    }\n  }\n  return res;\n}\n/*\nInsert a number 'delimeter' between every two\
    \ consecutive elements of input array `numbers'\n    >>> intersperse([], [1L,\
    \ 2L, 3L])\n    []\n    >>> intersperse([1L, 2L, 3L], [1L, 2L, 3L])\n    [1L,\
    \ 1L, 2L, 3L, 2L, 1L, 2L, 3L, 3L]\n    \n*/\nlong[\nunittest\n{\n    alias candidate\
    \ = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfx_3txq0.d(75): Error: expression expected, not `unittest`

    /tmp/tmpfx_3txq0.d(76): Error: found `{` when expecting `]`

    /tmp/tmpfx_3txq0.d(77): Error: no identifier for declarator `long[0]`

    /tmp/tmpfx_3txq0.d(79): Error: declaration expected, not `assert`

    /tmp/tmpfx_3txq0.d(80): Error: declaration expected, not `assert`

    /tmp/tmpfx_3txq0.d(81): Error: declaration expected, not `assert`

    /tmp/tmpfx_3txq0.d(82): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfx_3txq0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[][]\
    \ zipped = zip(numbers, repeat(delimeter, numbers.length));\n    long[] interspersed\
    \ = new long[(numbers.length * 2) - 1];\n    foreach (i, value; zip(zipped))\n\
    \    {\n        interspersed[i] = value[0];\n        interspersed[i + 1] = value[1];\n\
    \        i += 2;\n    }\n    return interspersed[0 .. $ - 1];\n}\nunittest\n{\n\
    \    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzvjtx3yr.d(13): Error: undefined identifier `zip`

    /tmp/tmpzvjtx3yr.d(15): Error: undefined identifier `zip`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzvjtx3yr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    auto result\
    \ = numbers.dup;\n    immutable len = result.length;\n    foreach (index, ref\
    \ element; result) \n    {\n        if (index + 1 < len)\n        {\n        \
    \    result = result[0 .. index + 1] ~ [delimeter] ~ result[index + 1 .. $];\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmppefnc6qn.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x4295e9]

    ??:? void tmppefnc6qn.__unittest_L24_C1() [0x4282a5]

    ??:? void tmppefnc6qn.__modtest() [0x428560]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42e1cb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429272]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42af55]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42afe4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42aee1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429249]

    ??:? runModuleUnitTests [0x42dfa1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429b00]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    size_t\
    \ n = numbers.length;\n    if (n == 0) \n    {\n        return [];\n    } \n \
    \   else \n    {\n        long[] result = new long[2 * n - 1];\n        result[0]\
    \ = numbers[0];\n        size_t i = 1;\n        while (i < n) \n        {\n  \
    \          result[2 * i - 1] = delimeter;\n            result[2 * i] = numbers[i];\n\
    \            i += 1;\n        }\n        return result;\n    }\n}\n/*\n Translate\
    \ a string by replacing characters.\n    >>> translate(\"hello\", \"abcd\", \"\
    ABCD\")\n    \"AellA\"\n    >>> translate(\"hello\", \"\", \"ABCD\")\n    \"hello\"\
    \n    >>> translate(\"hello\", \"abcd\", \"\")\n    \"hello\"\n    >>> translate(\"\
    hello\", \"abcd\", \"abcd\")\n    \"hello\"\n    >>> translate(\"hello\", \"abcd\"\
    , \"bcde\")\n    \"hdllo\"\n    >>> translate(\"hello\", \"abc\", \"def\")\n \
    \   \"hello\"\n    >>> translate(\"hello\", \"abc\", \"defghi\")\n    \"hello\"\
    \n*/\nstring translate(string input, string from, string to) \n{\n    string result\
    \ = input;\n    size_t nf = from.length;\n    size_t nt = to.length;\n    size_t\
    \ i = 0;\n    while (i < nf) \n    {\n        size_t k = result.indexOf(from[i]);\n\
    \        while (k != SIZE_MAX) \n        {\n            result = result[0 .. k]\
    \ ~ (i < nt ? to[i] : \"\") ~ result[k + 1 .. $];\n            k = result.indexOf(from[i]);\n\
    \        }\n        i += 1;\n    }\n    return result;\n}\n/*\n A tail slice operator\n\
    \    >>> [1, 2, 3, 4][1 .. $]\n    [2, 3, 4]\n    >>> [1, 2, 3, 4][2 .. $]\n \
    \   [3, 4]\n    >>> [1, 2,\nunittest\n{\n    alias candidate = intersperse;\n\n\
    \    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpda125s5o.d(67): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpda125s5o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    return\
    \ numbers.chunks(2).enumerate().map!((i, chunk) => \n                        \
    \                      (i == 0 ? chunk : chunk.insert(0, delimeter))).join;\n\
    }\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3jo4rwm9.d(13): Error: no property `chunks` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3jo4rwm9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ interspersed = new long[];\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpujayewu4.d(14): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpujayewu4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ ret;\n    ret.length = (numbers.length * 2) - 1;\n    foreach (i, n; numbers)\n\
    \    {\n        if (i != 0)\n        {\n            ret[i * 2 - 1] = delimeter;\n\
    \        }\n        ret[i * 2] = n;\n    }\n    return ret;\n}\nunittest\n{\n\
    \    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation
    failed

    ----------------

    ??:? _d_arraysetlengthT [0x42985a]

    ??:? long[] tmpg_hgm7_1.intersperse(long[], long) [0x427e5f]

    ??:? void tmpg_hgm7_1.__unittest_L25_C1() [0x427f4c]

    ??:? void tmpg_hgm7_1.__modtest() [0x42819c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d56f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c402]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431841]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x431cf0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4317cd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c3d9]

    ??:? runModuleUnitTests [0x42d345]

    ??:? void rt.dmain2._d_run_main(int, char*'
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[][]\
    \ _ = numbers.map!(a => [a, delimeter]).array;\n    return (_[0..$-1].reduce!((a,\
    \ b) => a ~ b));\n}\n \n// Insert a number 'delimeter' between every two consecutive\
    \ elements of input array `numbers'\nlong[] intersperse(long[] numbers, long delimeter,\
    \ long leftPadding, long rightPadding) \n{\n    long[][] _ = numbers.map!(a =>\
    \ [leftPadding, a, rightPadding]).array;\n    return (_[0..$-1].reduce!((a, b)\
    \ => a ~ b));\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwyei36t3.d(13): Error: no property `map` for type `long[]`

    /tmp/tmpwyei36t3.d(14): Error: no property `reduce` for type `long[][]`

    /tmp/tmpwyei36t3.d(20): Error: no property `map` for type `long[]`

    /tmp/tmpwyei36t3.d(21): Error: no property `reduce` for type `long[][]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwyei36t3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0) return [];\n    if (numbers.length == 1) return numbers;\n    long[] res\
    \ = new long[2 * numbers.length - 1];\n    res[0] = numbers[0];\n    foreach (i,\
    \ num; numbers[1 .. $]) {\n        res[2 * i - 1] = delimeter;\n        res[2\
    \ * i] = num;\n    }\n    return res;\n}\n/*\n Insert a number 'delimeter' between\
    \ every two consecutive elements of input array `numbers'\n \n    >>> intersperse([1.1,\
    \ 2.2, 3.3], 4.4)\n    [1.1, 4.4, 2.2, 4.4, 3.3]\n*/\ndouble[] intersperse(double[]\
    \ numbers, double delimeter) \n{\n    if (numbers.length == 0) return [];\n  \
    \  if (numbers.length == 1) return numbers;\n    double[] res = new double[2 *\
    \ numbers.length - 1];\n    res[0] = numbers[0];\n    foreach (i, num; numbers[1\
    \ .. $]) {\n        res[2 * i - 1] = delimeter;\n        res[2 * i] = num;\n \
    \   }\n    return res;\n}\n/*\nInsert an object 'delimeter' between every two\
    \ consecutive elements of input array `numbers'\n    >>> intersperse([1, 2, 3],\
    \ 4)\n    [1, 4, 2, 4, 3]\n*/\nT[] intersperse(T)(T[] numbers, T delimeter) \n\
    {\n    if (numbers.length == 0) return [];\n    if (numbers.length == 1) return\
    \ numbers;\n    T[] res = new T[2 * numbers.length - 1];\n    res[0] = numbers[0];\n\
    \    foreach (i, num; numbers[1 .. $]) {\n        res[2 * i - 1] = delimeter;\n\
    \        res[2 * i] = num;\n    }\n    return res;\n}\n/*\n >>> [1, 2, 3, 4, 5].break(3);\n\
    \ [[1, 2, 3], [4,\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppnqyugtu.d(58): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppnqyugtu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ delimeted;\n    foreach (num; numbers) \n    {\n        delimeted ~= num;\n\
    \        if (num != numbers[$ - 1]) \n        {\n            delimeted ~= delimeter;\n\
    \        }\n    }\n    return delimeted;\n}\n/*\n Insert a number 'delimeter'\
    \ after every 'length' consecutive elements of input array `numbers'\n    >>>\
    \ intersperse([], 4L, 2)\n    []\n    >>> intersperse([1L, 2L, 3L, 4L, 5L, 6L],\
    \ 7L, 2)\n    [1L, 2L, 7L, 3L, 4L, 7L, 5L, 6L]\n    >>> intersperse([1L, 2L, 3L,\
    \ 4L, 5L, 6L], 7L, 3)\n    [1L, 2L, 3L, 7L, 4L, 5L, 6L]\n    >>> intersperse([1L,\
    \ 2L, 3L, 4L, 5L, 6L], 7L, 4)\n    [1L, 2L, 3L, 4L, 7L, 5L, 6L]\n    >>> intersperse([1L,\
    \ 2L, 3L, 4L, 5L, 6L], 7L, 5)\n    [1L, 2L, 3L, 4L, 5L, 7L, 6L]\n    >>> intersperse([1L,\
    \ 2L, 3L, 4L, 5L, 6L], 7L, 6)\n    [1L, 2L, 3L, 4L, 5L, 6L]\n    >>> intersperse([1L,\
    \ 2L, 3L, 4L, 5L, 6L], 7L, 7)\n    [1L, 2L, 3L, 4L, 5L, 6L]\n    >>> intersperse([1L,\
    \ 2L, 3L, 4L, 5L, 6L], 7L, 10)\n    [1L, 2L, 3L, 4L, 5L, 6L]\n*/\nlong[] intersperse(long[]\
    \ numbers, long delimeter, int length) \n{\n    long[]\nunittest\n{\n    alias\
    \ candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps3929lkw.d(46): Error: no identifier for declarator `long[]`

    /tmp/tmps3929lkw.d(46): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps3929lkw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n    {\n        return numbers;\n    }\n    long[] output = new long[2*numbers.length\
    \ - 1];\n    foreach (i, ref number; numbers)\n    {\n        if (i != 0)\n  \
    \      {\n            output[2*i - 1] = delimeter;\n        }\n        output[2*i]\
    \ = number;\n    }\n    return output;\n}\n/*\n    >>> intersperse([], 'c')\n\
    \    []\n    >>> intersperse(['a', 'b', 'c'], 'd')\n    ['a', 'd', 'b', 'd', 'c']\n\
    */\nchar[] intersperse(char[] numbers, char delimeter) \n{\n    if (numbers.length\
    \ == 0)\n    {\n        return numbers;\n    }\n    char[] output = new char[2*numbers.length\
    \ - 1];\n    foreach (i, ref number; numbers)\n    {\n        if (i != 0)\n  \
    \      {\n            output[2*i - 1] = delimeter;\n        }\n        output[2*i]\
    \ = number;\n    }\n    return output;\n}\n/*\n    >>> intersperse([], \"cd\"\
    )\n    []\n    >>> intersperse([\"ab\", \"c\", \"d\"], \"e\")\n    [\"ab\", \"\
    e\", \"c\", \"e\", \"d\"]\n*/\nstring[] intersperse(string[] numbers, string delimeter)\
    \ \n{\n    if (numbers.length == 0)\n    {\n        return numbers;\n    }\n \
    \   string[] output = new string[2*numbers.length - 1];\n    foreach (i, ref number;\
    \ numbers)\n    {\n        if (i != 0)\n        {\n            output[2*i - 1]\
    \ = delimeter;\n        }\n        output[2*i] = number;\n    }\n    return output;\n\
    }\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \nin \n{\n    assert(numbers.length\
    \ >= 0);\n}\nout \n{\n    assert(numbers.length == result.length - (result.length\
    \ - 1) / 2);\n}\ndo \n{\n    if (numbers.length == 0)\n    {\n        return numbers;\n\
    \    }\n    else\n    {\n        return numbers[0..1].concat([delimeter]).concat(intersperse(numbers[1..$],\
    \ delimeter));\n    }\n}\nunittest\n{\n    alias candidate = intersperse;\n\n\
    \    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9qpm9qem.d(28): Error: no property `concat` for type `long[]`

    /tmp/tmp9qpm9qem.d(18): Error: undefined identifier `result`, did you mean variable
    `__result`?

    /tmp/tmp9qpm9qem.d(18): Error: undefined identifier `result`, did you mean variable
    `__result`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9qpm9qem.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0) \n    {\n        return numbers;\n    }\n    else \n    {\n        return\
    \ join(tuple(map!(a => tuple(a, delimeter), numbers)));\n    }\n}\n/*\n 'interweave'\
    \ function interweaves elements of `numbers' list\n    >>> interweave([], [])\n\
    \    []\n    >>> interweave([1L, 2L, 3L], [4L, 5L, 6L])\n    [1L, 4L, 2L, 5L,\
    \ 3L, 6L]\n    >>> interweave([1L, 2L, 3L], [4L, 5L])\n    [1L, 4L, 2L, 5L, 3L]\n\
    \    >>> interweave([1L, 2L], [4L, 5L, 6L])\n    [1L, 4L, 2L, 5L, 6L]\n*/\nlong[]\
    \ interweave(long[] xs, long[] ys) \n{\n    long[] res = new long[xs.length +\
    \ ys.length];\n    ulong zi = 0;\n    foreach (long x; xs) \n    {\n        res[zi]\
    \ = x;\n        zi += 2;\n    }\n    foreach (long y; ys) \n    {\n        res[zi]\
    \ = y;\n        zi += 2;\n    }\n    return res;\n}\n/*\n Rotate elements of array\
    \ `numbers' cyclically to the right by `n' positions\n    >>> rotate([], 1L)\n\
    \    []\n    >>> rotate([1L, 2L, 3L], 1L)\n    [3L, 1L, 2L]\n    >>> rotate([1L,\
    \ 2L, 3L], 2L)\n    [2L, 3L, 1L]\n    >>> rotate([1L, 2L, 3L], 3L)\n    [1L, 2L,\
    \ 3L]\n    >>> rotate([1L, 2L, 3L], 4L)\n    [3L, 1L, 2L]\n    >>> rotate([1L,\
    \ 2L, 3L], -1L\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn_ml7n59.d(49): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn_ml7n59.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ ret = new long[];\n    foreach(long num; numbers)\n    {\n        ret ~= num;\n\
    \        if(num != numbers[$-1]) ret ~= delimeter;\n    }\n    return ret;\n}\n\
    /*\n Convert a number to a string representation of it's digits.\nunittest\n{\n\
    \    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8fim9hbh.d(21): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8fim9hbh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    for (size_t\
    \ j = 0; j < numbers.length; j++) {\n        result[i] = numbers[j];\n       \
    \ i++;\n        if (j != numbers.length - 1) {\n            result[i] = delimeter;\n\
    \            i++;\n        }\n    }\n    return result;\n}\n/*\n Input:\n    -\
    \ `numbers': an array of numbers\n    - `expected_sum': the expected sum of `numbers'\n\
    \    - `delimeter': the number to insert between elements of `numbers' (see `intersperse()'\
    \ above)\n    - `size': the number of elements in `numbers'\n    \n Find all subsets\
    \ of `numbers' whose elements add up to `expected_sum'\n \n Return:\n    - `subsets':\
    \ an array of all valid subsets of `numbers'\n    - `subset_sums': the sums of\
    \ all valid subsets of `numbers'\n    - `subset_bools': a list of boolean arrays\
    \ representing the valid subsets of `numbers' (see also `subset()' below)\n*/\n\
    unittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L)\
    \ == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L,\
    \ 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation
    failed

    ----------------

    ??:? _d_newarrayU [0x42da33]

    ??:? _d_newarrayT [0x4297b8]

    ??:? long[] tmp2srmtfhw.intersperse(long[], long) [0x427e4b]

    ??:? void tmp2srmtfhw.__unittest_L39_C1() [0x427f48]

    ??:? void tmp2srmtfhw.__modtest() [0x428198]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c4f3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b386]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430611]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430ac0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43059d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b35d]

    ??:? runModuleUnitTests [0x42c2c9]

    ??:? void rt.dmain2'
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    auto r\
    \ = [];\n    foreach (n; numbers)\n    {\n        r ~= n;\n        if (n != numbers[$\
    \ - 1])\n            r ~= delimeter;\n    }\n    return r;\n}\nunittest\n{\n \
    \   alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n \
    \   assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9qzsa75u.d(16): Error: cannot append type `long` to type `void[]`

    /tmp/tmp9qzsa75u.d(18): Error: cannot append type `long` to type `void[]`

    /tmp/tmp9qzsa75u.d(20): Error: cannot implicitly convert expression `r` of type
    `void[]` to `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9qzsa75u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \nin \n{\n    assert(numbers.length\
    \ >= 0);\n}\nout\n{\n    assert(numbers.length <= numbers.length * 2 + 1);\n}\n\
    do\n{\n    var result = new long[numbers.length * 2 + 1];\n    size_t i = 0;\n\
    \    while (i < numbers.length) \n    {\n        result[i * 2] = numbers[i];\n\
    \        result[i * 2 + 1] = delimeter;\n        i = i + 1;\n    }\n    return\
    \ result[0..numbers.length * 2 - 1];\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjyj9q0gc.d(22): Error: undefined identifier `var`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjyj9q0gc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0) \n    {\n        return numbers;\n    }\n    auto result = new long[(numbers.length\
    \ * 2) - 1];\n    result[0] = numbers[0];\n    for (size_t i = 1; i < numbers.length;\
    \ i++) \n    {\n        result[(i * 2) - 1] = delimeter;\n        result[i * 2]\
    \ = numbers[i];\n    }\n    return result;\n}\n \n/*\n \n Concatenate two arrays\n\
    \    >>> concat([1L, 2L, 3L], [4L, 5L, 6L])\n    [1L, 2L, 3L, 4L, 5L, 6L]\n  \
    \  \n*/\nlong[] concat(long[] array1, long[] array2) \n{\n    long[] result =\
    \ new long[array1.length + array2.length];\n    foreach (size_t i, e; array1)\n\
    \    {\n        result[i] = e;\n    }\n    foreach (size_t i, e; array2)\n   \
    \ {\n        result[i + array1.length] = e;\n    }\n    return result;\n}\n \n\
    \ \n/*\n \n Sum up all the elements of the input array\n    >>> sum([])\n    0L\n\
    \    >>> sum([1L, 2L, 3L])\n    6L\n    \n*/\nlong sum(long[] numbers) \n{\n \
    \   long result = 0L;\n    foreach (n; numbers)\n    {\n        result += n;\n\
    \    }\n    return result;\n}\n \n/*\n \n Compute the product of all the elements\
    \ of the input array\n    >>> product([])\n    1L\n    >>> product([1L, 2L, 3L])\n\
    \    6L\n    \n*/\nlong product(long[] numbers) \n{\n    long result = 1L;\n \
    \   foreach (n; numbers)\n    {\n        result *= n;\n    }\n    return result;\n\
    }\n \n/*\n \n Remove duplicate elements from an array\n    >>> unique([1L, 2L,\
    \ 1L\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn1e7ske1.d(87): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn1e7ske1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[(cast(ulong)numbers.length)*2 - 1];\n    long j = 0;\n   \
    \ for (; j < numbers.length - 1; j += 1) {\n        result[j*2] = numbers[j];\n\
    \        result[j*2 + 1] = delimeter;\n    }\n    result[j*2] = numbers[j];\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n  \
    \  assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L)\
    \ == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) ==\
    \ [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation
    failed

    ----------------

    ??:? _d_newarrayU [0x42da93]

    ??:? _d_newarrayT [0x429818]

    ??:? long[] tmp1791hgjq.intersperse(long[], long) [0x427e4b]

    ??:? void tmp1791hgjq.__unittest_L22_C1() [0x427fa4]

    ??:? void tmp1791hgjq.__modtest() [0x4281f4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c553]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b3e6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430671]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430b20]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4305fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3bd]

    ??:? runModuleUnitTests [0x42c329]

    ??:? void rt.dmain2'
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    return\
    \ intersperseImpl(numbers, delimeter, true);\n}\nunittest\n{\n    alias candidate\
    \ = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpge93gxij.d(13): Error: undefined identifier `intersperseImpl`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpge93gxij.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n        return numbers;\n    else\n    {\n        size_t n = numbers.length;\n\
    \        long[] ret = new long[2 * n - 1];\n        ret[0] = numbers[0];\n   \
    \     for (size_t i = 1; i < n; i++)\n        {\n            ret[2 * i - 1] =\
    \ delimeter;\n            ret[2 * i] = numbers[i];\n        }\n        return\
    \ ret;\n    }\n}\n/*\n Insert a number 'delimeter' between every two consecutive\
    \ elements of input array `numbers'\n    >>> intersperse([], 3L)\n    []\n   \
    \ >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[]\
    \ intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length == 0)\n\
    \        return numbers;\n    else\n    {\n        size_t n = numbers.length;\n\
    \        long[] ret = new long[2 * n - 1];\n        ret[0] = numbers[0];\n   \
    \     for (size_t i = 1; i < n; i++)\n        {\n            ret[2 * i - 1] =\
    \ delimeter;\n            ret[2 * i] = numbers[i];\n        }\n        return\
    \ ret;\n    }\n}\n/*\n Insert a number 'delimeter' between every two consecutive\
    \ elements of input array `numbers'\n    >>> intersperse([], 42L)\n    []\n  \
    \  >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[]\
    \ intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length == 0)\n\
    \        return numbers;\n    else\n    {\n        size_t n = numbers.length;\n\
    \        long[] ret = new long[2 * n - 1];\n        ret[0] = numbers[0];\n   \
    \     for (size_t i = 1; i < n; i++)\n        {\n            ret\nunittest\n{\n\
    \    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl1811_7j.d(73): Error: found `unittest` when expecting `;` following
    statement

    /tmp/tmpl1811_7j.d(81): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpl1811_7j.d(81): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpl1811_7j.d(81): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl1811_7j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n\tlong[] result\
    \ = [];\n\tif(numbers.length == 0)\n\t{\n\t\treturn result;\n\t}\n\telse\n\t{\n\
    \t\tresult ~= numbers[0];\n\t\tfor(int i = 1; i < numbers.length; i++)\n\t\t{\n\
    \t\t\tresult ~= delimeter;\n\t\t\tresult ~= numbers[i];\n\t\t}\n\t\treturn result;\n\
    \t}\n}\n/*\n Find the length of the longest subarray of consecutive integers.\n\
    \ \n    >>> longestConsecutiveSubarr([0, 1, 2, 3, 2, 3, 4, 5, 6, 7, 8, 9])\n \
    \   [0, 1, 2, 3]\n    >>> longestConsecutiveSubarr([5, 4, 6, 5, 7, 1, 0, 5, 4,\
    \ 3, 2, 1])\n    [0, 1, 2, 3, 4, 5]\n    >>> longestConsecutiveSubarr([0, 0, 0,\
    \ 1, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 5, 6, 7, 8, 9])\n    [3, 3, 3, 3, 3, 3,\
    \ 3, 3]\n    >>> longestConsecutiveSubarr([])\n    []\n    >>> longestConsecutiveSubarr([2])\n\
    \    [2]\n*/\nlong[] longestConsecutiveSubarr(long[] numbers) \n{\n\tlong[] result\
    \ = [];\n\tif(numbers.length == 0)\n\t{\n\t\treturn result;\n\t}\n\telse if(numbers.length\
    \ == 1)\n\t{\n\t\tresult ~= numbers[0];\n\t\treturn result;\n\t}\n\telse\n\t{\n\
    \t\tlong[] currentLargest = [];\n\t\tlong[] current = [];\n\t\tcurrent ~= numbers[0];\n\
    \t\tfor(int i = 1; i < numbers.length; i++)\n\t\t{\n\t\t\tif(numbers[i] == (numbers[i-1]\
    \ + 1))\n\t\t\t{\n\t\t\t\tcurrent ~= numbers[i];\n\t\t\t}\n\t\t\telse\n\t\t\t\
    {\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxff2ssnq.d(68): Error: found `unittest` instead of statement

    /tmp/tmpxff2ssnq.d(76): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpxff2ssnq.d(76): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpxff2ssnq.d(76): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxff2ssnq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n  if (numbers.length\
    \ > 0)\n  {\n    long[] result = new long[(numbers.length - 1) * 2 + 1];\n   \
    \ int index = 0;\n    foreach (num; numbers)\n    {\n      result[index] = num;\n\
    \      if (index < result.length - 1)\n      {\n        result[index + 1] = delimeter;\n\
    \        index += 2;\n      }\n    }\n    return result;\n  }\n  else\n  {\n \
    \   return [];\n  }\n}\nunittest\n{\n    alias candidate = intersperse;\n\n  \
    \  assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L)\
    \ == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) ==\
    \ [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n\treturn intersperseHelper(numbers,\
    \ delimeter).array;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n  \
    \  assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L)\
    \ == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) ==\
    \ [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv7jo2sfj.d(13): Error: undefined identifier `intersperseHelper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv7jo2sfj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n\tlong[] ret\
    \ = new long[numbers.length * 2 - 1];\n\tint i = 0;\n\tint j = 0;\n\twhile (i\
    \ < numbers.length && j < ret.length)\n\t{\n\t\tret[j] = numbers[i];\n\t\tj++;\n\
    \t\tif (i < numbers.length - 1)\n\t\t{\n\t\t\tret[j] = delimeter;\n\t\t\tj++;\n\
    \t\t}\n\t\ti++;\n\t}\n\treturn ret;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation
    failed

    ----------------

    ??:? _d_newarrayU [0x42da3b]

    ??:? _d_newarrayT [0x4297c0]

    ??:? long[] tmp4ocfc2rw.intersperse(long[], long) [0x427e4b]

    ??:? void tmp4ocfc2rw.__unittest_L29_C1() [0x427f4c]

    ??:? void tmp4ocfc2rw.__modtest() [0x42819c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c4fb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b38e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430619]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430ac8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4305a5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b365]

    ??:? runModuleUnitTests [0x42c2d1]

    ??:? void rt.dmain2'
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ > 0)\n    {\n        long[] result = new long[(numbers.length - 1) * 2 + 1];\n\
    \        int j = 0;\n        foreach (i, el; numbers) \n        {\n          \
    \  result[j] = el;\n            result[j + 1] = delimeter;\n            j += 2;\n\
    \        }\n        return result[0 .. $ - 1];\n    }\n    else \n    {\n    \
    \    return [];\n    }\n}\n/*\nMake a subarray of array `b' of size `n' starting\
    \ at position `offset'\n    >>> makeSubarray([], 0L, 1L)\n    []\n    >>> makeSubarray([],\
    \ 1L, 1L)\n    []\n    >>> makeSubarray([1L, 2L, 3L], 0L, 2L)\n    [1L, 2L]\n\
    \    >>> makeSubarray([1L, 2L, 3L], 1L, 2L)\n    [2L, 3L]\n    >>> makeSubarray([1L,\
    \ 2L, 3L], 1L, 1L)\n    [2L]\n    >>> makeSubarray([1L, 2L, 3L], 2L, 1L)\n   \
    \ [3L]\n*/\nlong[] makeSubarray(long[] b, long offset, long n) \n{\n    return\
    \ b[offset .. offset + n];\n}\n/*\nConcatenate the elements of a nested array\n\
    \    >>> flatten([])\n    []\n    >>> flatten([[]])\n    []\n    >>> flatten([[1L,\
    \ 2L], [3L, 4L]])\n    [1L, 2L, 3L, 4L]\n*/\nlong[] flatten(long[][] array) \n\
    {\n    long[] result = [];\n    foreach (i, el; array) \n    {\n        result\
    \ ~= el;\n    }\n    return result;\n}\n/*\nGet the sum of a range\n    >>> sum(0L,\
    \ 0L)\n    0L\n    >>> sum(0L, 1L)\n    1L\n    >>> sum(0L, 5L)\n    15L\n\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpznidtglf.d(67): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpznidtglf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    auto result\
    \ = new long[];\n    foreach (number; numbers)\n    {\n        result ~= number;\n\
    \        if (number != numbers[$ - 1])\n            result ~= delimeter;\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n\
    \    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp74_mgqhw.d(13): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp74_mgqhw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    return\
    \ numbers.map!(a => [a, delimeter]).flat;\n}\nunittest\n{\n    alias candidate\
    \ = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp7gniggc.d(13): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp7gniggc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    auto ret\
    \ = new long[];\n    foreach (index, number; numbers) \n    {\n        if (index\
    \ < numbers.length - 1) \n        {\n            ret ~= number;\n            ret\
    \ ~= delimeter;\n        }\n        else \n        {\n            ret ~= number;\n\
    \        }\n    }\n    return ret;\n}\n/*\nSeperate input array `numbers' into\
    \ groups of given size `window_size'\n    >>> chunks([], 2L)\n    []\n    >>>\
    \ chunks([1L, 2L, 3L, 4L, 5L, 6L], 2L)\n    [[1L, 2L], [3L, 4L], [5L, 6L]]\n \
    \   >>> chunks([1L, 2L, 3L, 4L, 5L, 6L], 3L)\n    [[1L, 2L, 3L], [4L, 5L, 6L]]\n\
    \    >>> chunks([1L, 2L, 3L, 4L, 5L, 6L], 0L)\n    [[1L, 2L, 3L, 4L, 5L, 6L]]\n\
    \    >>> chunks([1L, 2L, 3L, 4L, 5L, 6L], 10L)\n    [[1L, 2L, 3L, 4L, 5L, 6L]]\n\
    \    >>> chunks([1L, 2L, 3L, 4L, 5L, 6L], -10L)\n    [[1L, 2L, 3L, 4L, 5L, 6L]]\n\
    */\nlong[][] chunks(long[] numbers, long window_size) \n{\n    auto ret = new\
    \ long[][];\n    if (window_size == 0L)\n    {\n        ret ~= numbers;\n    \
    \    return ret;\n    }\n    size_t length = numbers.length;\n    if (window_size\
    \ < 0L)\n    {\n        window_size = length;\n    }\n    if (window_size >= length)\n\
    \    {\n        ret ~= numbers;\n        return ret;\n    }\n    size_t index\
    \ = 0;\n    while (index + window_size <= length)\n    {\n        ret ~=\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf1s3ivgc.d(65): Error: expression expected, not `unittest`

    /tmp/tmpf1s3ivgc.d(66): Error: found `{` when expecting `;` following statement

    /tmp/tmpf1s3ivgc.d(73): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf1s3ivgc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n\tif (numbers.length\
    \ == 0)\n\t\treturn numbers;\n\tauto result = new long[2 * numbers.length - 1];\n\
    \tforeach (i, n; numbers)\n\t{\n\t\tresult[2 * i] = n;\n\t\tif (i < numbers.length\
    \ - 1)\n\t\t\tresult[2 * i + 1] = delimeter;\n\t}\n\treturn result;\n}\n/*\n Calculate\
    \ difference between numbers\n    >>> countDiff([1L, 2L, 3L])\n    [1L, 1L]\n\
    \    >>> countDiff([1L, 2L, 1L])\n    [1L, -1L]\n    \n*/\nlong[] countDiff(long[]\
    \ numbers) \n{\n\tif (numbers.length == 0)\n\t\treturn numbers;\n\tauto result\
    \ = new long[numbers.length - 1];\n\tforeach (i, n; numbers)\n\t{\n\t\tif (i ==\
    \ 0)\n\t\t\tcontinue;\n\t\tresult[i - 1] = numbers[i] - numbers[i - 1];\n\t}\n\
    \treturn result;\n}\n/*\n Check, if all elements of the given array are equal\
    \ to the given element\n    >>> checkAllEqual([], 5L)\n    true\n    >>> checkAllEqual([1L,\
    \ 2L, 3L], 1L)\n    false\n    >>> checkAllEqual([1L, 1L, 1L], 1L)\n    true\n\
    \    \n*/\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n\treturn intersperseImpl(numbers,\
    \ delimeter);\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp43q2a_rm.d(13): Error: undefined identifier `intersperseImpl`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp43q2a_rm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    int[] numbersIndices\
    \ = new int[numbers.length];\n    int outputIndex = 0;\n    foreach (index, number;\
    \ numbers)\n    {\n        outputIndex += index;\n        numbersIndices[index]\
    \ = outputIndex;\n    }\n    long[] output = new long[numbers.length + numbersIndices.length];\n\
    \    outputIndex = 0;\n    foreach (number; numbers)\n    {\n        output[outputIndex]\
    \ = number;\n        outputIndex += 1;\n        if (outputIndex != output.length)\n\
    \        {\n            output[outputIndex] = delimeter;\n            outputIndex\
    \ += 1;\n        }\n    }\n    return output;\n}\n/*\n Convert input array `numbers'\
    \ to string by concatenating each element with a given delimeter 'delimeter'\n\
    \    >>> listToString([1L, 2L, 3L], \"\")\n    \"123\"\n    >>> listToString([1L,\
    \ 2L, 3L], \" \")\n    \"1 2 3\"\n*/\nstring listToString(long[] numbers, string\
    \ delimeter) \n{\n    string[] numbersAsStrings = new string[numbers.length];\n\
    \    foreach (index, number; numbers)\n    {\n        numbersAsStrings[index]\
    \ = to!string(number);\n    }\n    return delimeter.join(numbersAsStrings);\n\
    }\n/*\n Convert input array `strings' to list of long integers by parsing them\n\
    \    >>> stringToList(\"1 2 3\")\n    [1L, 2L, 3L]\n*/\nlong[] stringToList(string\
    \ strings) \n{\n    long[] output = new long[];\n    foreach (numberAsString;\
    \ split(strings))\n    {\n        output ~= to!long(numberAsString);\n    }\n\
    \    return output;\n}\n/*\n    Find anagrams in the list of strings\n    'sortedStrings'\
    \ maps each string to its sorted version (i.e. version in which characters are\
    \ sorted alphabetically)\n    >>> findAnagrams([\"word\", \"rodw\", \"wrdo\",\
    \ \"rdwo\", \"rdow\", \"drow\", \"owrd\", \"ordw\", \"ow\nunittest\n{\n    alias\
    \ candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsiuqrv_i.d(64): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsiuqrv_i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n\tauto result\
    \ = new long[];\n\t\n\tfor (int i = 0; i < numbers.length; i++) \n\t{\n\t\tresult\
    \ ~= numbers[i];\n\t\tif (i < numbers.length - 1)\n\t\t\tresult ~= delimeter;\n\
    \t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpygqakfc0.d(13): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpygqakfc0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    auto l\
    \ = numbers.length;\n    auto result = new long[];\n    foreach (i, item; numbers)\
    \ \n    {\n        result ~= item;\n        if (i != l - 1) \n        {\n    \
    \        result ~= delimeter;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb5aqow2c.d(14): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb5aqow2c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if(numbers.length\
    \ < 2)\n        return numbers;\n    else \n    {\n        long[] res = new long[2\
    \ * numbers.length - 1];\n        for(size_t i = 0; i < numbers.length; i++) \n\
    \        {\n            res[2 * i] = numbers[i];\n            if(i < numbers.length\
    \ - 1)\n                res[2 * i + 1] = delimeter;\n        }\n        return\
    \ res;\n    }\n}\n \n/*\n Extract every 'n'th element of an input array `elements'\n\
    \ >>> everyNth(2, [1L, 2L, 3L, 4L, 5L, 6L])\n [1L, 3L, 5L]\n \n*/\nlong[] everyNth(size_t\
    \ n, long[] elements) \n{\n    long[] result = new long[elements.length/n];\n\
    \    size_t index = 0;\n    foreach(e; elements) \n    {\n        if(index % n\
    \ == 0)\n            result ~= e;\n        index++;\n    }\n    return result;\n\
    }\n \n/*\n  Compute the average of all elements of input array `numbers'\n  >>>\
    \ average([1L, 2L, 3L, 4L, 5L])\n  3L\n  >>> average([1L, 2L, 3L, 4L, 5L, 6L])\n\
    \  3.5L\n \n*/\nreal average(long[] numbers) \n{\n    return reduce!((a, b) =>\
    \ a + b / numbers.length)(0.0, numbers);\n}\n \nunittest\n{\n    alias candidate\
    \ = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp59ih5y6b.d(57): Error: template instance `reduce!((a, b) => a +
    b / numbers.length)` template `reduce` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp59ih5y6b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n    {\n        return [];\n    }\nunittest\n{\n    alias candidate =\
    \ intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa25e_24a.d(17): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa25e_24a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n        return numbers;\n    else\n    {\n        long[] result = new\
    \ long[2 * numbers.length - 1];\n        for (int i = 0; i < numbers.length; i++)\n\
    \        {\n            result[2 * i] = numbers[i];\n            if (i < numbers.length\
    \ - 1)\n                result[2 * i + 1] = delimeter;\n        }\n        return\
    \ result;\n    }\n}\n/*\n Simple calculator with \"+\", \"-\", \"*\", \"/\" operations,\
    \ \n that outputs in RPN notation and support of parentheses\n    >>> calc(\"\
    2*(3+4)\")\n    [2L, 3L, 4L, +, *]\n    >>> calc(\"(2*(3+4))/10\")\n    [2L, 3L,\
    \ 4L, +, *, 10L, /]\n    >>> calc(\"(2*(3+4))/10*(10-0)\")\n    [2L, 3L, 4L, +,\
    \ *, 10L, /, 10L, 0L, -, *]\n    >>> calc(\"2*(3+4)*(5+7)\")\n    [2L, 3L, 4L,\
    \ +, *, 5L, 7L, +, *]\n    >>> calc(\"2*3+4*5\")\n    [2L, 3L, *, 4L, 5L, *, +]\n\
    \    >>> calc(\"2*3+4*5/4\")\n    [2L, 3L, *, 4L, 5L, *, 4L, /, +]\n    >>> calc(\"\
    1+(2+(3+(4+(5+(6+7)))))\")\n    [1L, 2L, 3L, 4L, 5L, 6L, 7L, +, +, +, +, +, +]\n\
    \    >>> calc(\"1+(2+(3+(4+(5+(6+(7+8))))))\")\n    [1L, 2L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, +, +, +, +, +, +, +]\n    >>> calc(\"1*(2+(3\nunittest\n{\n    alias candidate\
    \ = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpii1dcwsx.d(27): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpii1dcwsx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n    {\n        return [];\n    }\n    else\n    {\n        long[] result\
    \ = new long[2 * numbers.length - 1];\n        result[0] = numbers[0];\n     \
    \   foreach (i, number; numbers[1 .. $])\n        {\n            result[2 * i]\
    \ = delimeter;\n            result[2 * i + 1] = number;\n        }\n        return\
    \ result;\n    }\n}\n/*\n    Insert a number 'delimeter' between every two consecutive\
    \ elements of input array `numbers'\n    >>> intersperse(to!(long[])([1, 2, 3]),\
    \ 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(int[] numbers, long delimeter)\
    \ \n{\n    if (numbers.length == 0)\n    {\n        return [];\n    }\n    else\n\
    \    {\n        long[] result = new long[2 * numbers.length - 1];\n        result[0]\
    \ = numbers[0];\n        foreach (i, number; numbers[1 .. $])\n        {\n   \
    \         result[2 * i] = delimeter;\n            result[2 * i + 1] = number;\n\
    \        }\n        return result;\n    }\n}\n/*\n Create a range of numbers that\
    \ spans from `start` to `end` (inclusive) with a step of `step`\n    >>> range!(long)(0L,\
    \ 3L, 1L)\n    [0L, 1L, 2L, 3L]\n    >>> range!(long)(0L, 3L, 2L)\n    [0L, 2L]\n\
    \    >>> range!(long)(3L, 0L, -1L)\n    [3L, 2L, 1L, 0L]\n    >>> range!(long)(3L,\
    \ 0L, -2L)\n    [3L, 1L]\n*/\nlong[] range(long start, long end, long step = 1L)\
    \ \n{\n    if (step == 0L)\n    {\n        throw new Exception(\"Step cannot be\
    \ zero\");\n    }\n    long length = max(0L\nunittest\n{\n    alias candidate\
    \ = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkv1iqiwb.d(70): Error: found `unittest` when expecting `,`

    /tmp/tmpkv1iqiwb.d(78): Error: found `void` when expecting `,`

    /tmp/tmpkv1iqiwb.d(78): Error: found `{` when expecting `,`

    /tmp/tmpkv1iqiwb.d(78): Error: expression expected, not `}`

    /tmp/tmpkv1iqiwb.d(78): Error: found `End of File` when expecting `,`

    /tmp/tmpkv1iqiwb.d(78): Error: found `End of File` when expecting `)`

    /tmp/tmpkv1iqiwb.d(78): Error: semicolon expected, not `End of File`

    /tmp/tmpkv1iqiwb.d(78): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkv1iqiwb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0) \n    {\n        return numbers;\n    }\n    long[] result = new long[2*numbers.length\
    \ - 1];\n    foreach (i, e; numbers) \n    {\n        if (i != 0) \n        {\n\
    \            result[2*i - 1] = delimeter;\n        }\n        result[2*i] = e;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    auto result\
    \ = new long[];\n    int len = numbers.length;\n    if (len == 0)\n        return\
    \ result;\n    foreach (i, n; numbers) \n    {\n        if (i != 0)\n        \
    \    result ~= delimeter;\n        result ~= n;\n    }\n    return result;\n}\n\
    /*\n Convert a number to a string in any radix\n    >>> toString(13L, 2L)\n  \
    \  \"1101\"\n    >>> toString(1234L, 16L)\n    \"4d2\"\n    >>> toString(39L,\
    \ 39L)\n    \"10\"\n    >>> toString(12L, 12L)\n    \"10\"\n*/\nstring toString(long\
    \ value, long radix) \n{\n    if (radix < 2L || radix > 36L)\n        throw new\
    \ Exception(\"radix must be between 2 and 36\");\n    if (value == 0L)\n     \
    \   return \"0\";\n    auto isNegative = false;\n    if (value < 0L) \n    {\n\
    \        isNegative = true;\n        value = -value;\n    }\n    auto s = \"\"\
    ;\n    while (value != 0L) \n    {\n        auto digit = value % radix;\n    \
    \    value /= radix;\n        s = ((char) ((digit < 10L) ? (digit + '0') : (digit\
    \ - 10L + 'a'))) ~ s;\n    }\n    if (isNegative)\n        s = \"-\" ~ s;\n  \
    \  return s;\n}\n/*\n Finds the first index `i' where `predicate(input[i])' is\
    \ true, or -1 if none\n    >>> firstIndexWhere([1L, 2L, 3L], (i) => i > 1L)\n\
    \    1\n    >>> firstIndexWhere([1L, 2L, 3L], (i) => i == 5L)\n    -1\n*/\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp22yinmp3.d(53): Error: C style cast illegal, use `cast(char)(digit
    < 10L ? digit + ''0'' : digit - 10L + ''a'')`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp22yinmp3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    /*\n  \
    \  if(numbers.length == 0L) \n    {\n        return [];\n    }\n    else if(numbers.length\
    \ == 1L) \n    {\n        return numbers;\n    }\n    else \n    {\n        immutable(long)[]\
    \ result = [numbers[0L]];\n        foreach(n; numbers[1L .. $]) \n        {\n\
    \            result ~= [delimeter, n];\n        }\n        return result;\n  \
    \  }\n    */\n    return [delimeter].opCat(numbers).array;\n}\n/*\n    Insert\
    \ a number 'delimeter' between every two consecutive elements of input array `numbers'\n\
    unittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L)\
    \ == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L,\
    \ 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_jwtw6he.d(34): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_jwtw6he.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    import\
    \ std.algorithm.comparison : max;\n    import std.array : array;\n    import std.conv\
    \ : to;\n    import std.range : cycle, chain, iota, map, retro, walkLength;\n\
    \    import std.stdio : writeln;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.algorithm.iteration : filter;\n    import\
    \ std.algorithm.comparison : equal;\n    import std.algorithm.comparison : max;\n\
    \    import std.algorithm.iteration : map;\n    import std.range : chain, walkLength;\n\
    \    long[] result;\n    result = chain(numbers, cycle(delimeter)).walkLength(numbers.length).map!((a,\
    \ b) => tuple(a, b)).filter!((ref tuple!(a, b) t) => !equal(t[0], delimeter)).map!((ref\
    \ tuple!(a, b) t) => t[0]).array;\n    return result;\n}\n/*\n Computes the [GCD]\
    \ of two numbers using Euclid's algorithm\n    >>> gcd(12L, 8L)\n    4L\n    >>>\
    \ gcd(12L, 9L)\n    3L\n    >>> gcd(3L, 9L)\n    3L\n    >>> gcd(9L, 3L)\n   \
    \ 3L\n    >>> gcd(1071L, 462L)\n    21L\n    >>> gcd(462L, 1071L)\n    21L\n*/\n\
    long gcd(long a, long b) \n{\n    import std.algorithm.comparison : max;\n   \
    \ import std.array : array;\n    import std.conv : to;\n    import std.range :\
    \ cycle, chain, iota, map, retro, walkLength;\n    import std.stdio : writeln;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.algorithm.iteration : filter;\n    import std.algorithm.comparison : equal;\n\
    \    import std.algorithm.comparison : max;\n    import std.algorithm.iter\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp03f9r0tc.d(57): Error: `;` expected

    /tmp/tmp03f9r0tc.d(65): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp03f9r0tc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0) \n    {\n        return numbers;\n    }\n    return numbers.\n       \
    \ /* \n        * const long n = 2 * numbers.length - 1;  \n        *  long[] res\
    \ = new long[n];\n        *  auto i = 0;\n        *  foreach (number; numbers)\
    \ \n        *  {\n        *      res[i] = number;\n        *      i += 2;\n  \
    \      *  }\n        *  i = 1;\n        *  foreach (number; numbers[1 .. $]) \n\
    \        *  {\n        *      res[i] = delimeter;\n        *      i += 2;\n  \
    \      *  }\n        *  return res;\n        */\n        map!((a, b) => tuple(a,\
    \ delimeter)).\n        //  Append a last element of the first array.\n      \
    \  front.\n        array.\n        flatMap!(c => c).\n        // Remove redundant\
    \ delimeter.\n        array.\n        dropOne;\n}\n/*\n * Adapted from https://stackoverflow.com/a/4722898/1675961\n\
    */\nlong permutations(long m, long n)\n{\n    assert(m >= n);\n    return m <=\
    \ 1L ? 1L : m * permutations(m - 1L, n);\n}\nunittest\n{\n    alias candidate\
    \ = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm11bxsml.d(17): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm11bxsml.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n    {\n        return numbers;\n    }\n    else\n    {\n        long[][]\
    \ parts = new long[][numbers.length + 1];\n        foreach (i, number; numbers)\n\
    \        {\n            parts[i] = [number];\n        }\n        parts[$ - 1]\
    \ = [delimeter];\n        return join(parts);\n    }\n}\nunittest\n{\n    alias\
    \ candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp28dqq49n.d(25): Error: undefined identifier `join`, did you mean
    function `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp28dqq49n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n    if (numbers.length\
    \ == 0)\n    {\n        return numbers;\n    }\n    else\n    {\n        return\
    \ reduce!q{a ~ [delimeter] ~ b}(numbers);\n    }\n    \n/*\n Convert a string\
    \ to array of Unicode codepoints\n    >>> toUTF32(\"\")\n    []\n    >>> toUTF32(\"\
    Hello\")\n    [72L, 101L, 108L, 108L, 111L]\n*/\nlong[] toUTF32(string text)\n\
    {\n    return text.map!(c => c.toUTF32).array;\n}\n/*\n Convert a Unicode codepoint\
    \ to string\n    >>> fromUTF32(0L)\n    \"\"\n    >>> fromUTF32(72L)\n    \"H\"\
    \n*/\nstring fromUTF32(long codepoint)\n{\n    import std.conv;\n    return to!string(codepoint);\n\
    }\n/*\n Convert a number array to Unicode string\n    >>> fromUTF32([])\n    \"\
    \"\n    >>> fromUTF32([72L, 101L, 108L, 108L, 111L])\n    \"Hello\"\n*/\nstring\
    \ fromUTF32(long[] codepoints)\n{\n    import std.conv;\n    return to!string(codepoints);\n\
    }\n/*\n A 'set' of characters\n    >>> set(\"\")\n    \"\"\n    >>> set(\"Hello\"\
    )\n    \"Helo\"\n*/\nstring set(string text)\n{\n    return text.dup.removeDuplicates.array;\n\
    }\n/*\n A 'set' of Unicode codepoints\n    >>> set([])\n    []\n    >>> set([72L,\
    \ 101L, 108L, 108L, 111L])\n    [72L, 101L, 108L, 111L]\n*/\nlong[] set(long[]\
    \ codepoints)\n{\n    return codepoints.dup.removeDuplicates.array;\n}\n/*\n Convert\
    \ a string to a codepoint array, make a 'set' of codepoints, and finally convert\
    \ back to string\n    >>> compact(\"\")\n    \"\"\n    >>> compact(\"Hello\")\n\
    \    \"Helo\"\n*/\nstring compact(string text)\nunittest\n{\n    alias candidate\
    \ = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmidkurpz.d(12): Error: cannot use function constraints for non-template
    functions. Use `static if` instead

    /tmp/tmpmidkurpz.d(12): Error: declaration expected, not `if`

    /tmp/tmpmidkurpz.d(15): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmidkurpz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    auto result\
    \ = new long[2 * numbers.length - 1];\n    auto i = 0;\n    foreach (n; numbers)\
    \ {\n        result[i] = n;\n        i += 2;\n    }\n    i = 1;\n    foreach (n;\
    \ numbers[1 .. $]) {\n        result[i] = delimeter;\n        i += 2;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n  \
    \  assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L)\
    \ == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) ==\
    \ [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation
    failed

    ----------------

    ??:? _d_newarrayU [0x42da8b]

    ??:? _d_newarrayT [0x429810]

    ??:? long[] tmpwvbidtpc.intersperse(long[], long) [0x427e51]

    ??:? void tmpwvbidtpc.__unittest_L26_C1() [0x427fa0]

    ??:? void tmpwvbidtpc.__modtest() [0x4281f0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c54b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b3de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430669]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430b18]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4305f5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b5]

    ??:? runModuleUnitTests [0x42c321]

    ??:? void rt.dmain2'
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n\tlong[] result\
    \ = [];\n\tforeach(element; numbers) \n\t{\n\t\tresult ~= element;\n\t\tif(element\
    \ != numbers[$ - 1])\n\t\t\tresult ~= delimeter;\n\t}\n\treturn result;\n}\n/*\n\
    \ This function takes list of numbers as input and returns a list of \n expressions\
    \ where each expression is the product of all numbers except the\n one at index.\n\
    \    >>> product_of_all_but_index([1L, 2L, 3L])\n    [6L, 3L, 2L]\n    >>> product_of_all_but_index([1L,\
    \ 2L, 0L])\n    [0L, 0L, 0L]\n    >>> product_of_all_but_index([1L, 0L, 0L])\n\
    \    [0L, 0L, 0L]\n    >>> product_of_all_but_index([0L, 1L, 0L])\n    [0L, 0L,\
    \ 0L]\n    >>> product_of_all_but_index([0L, 0L, 1L])\n    [0L, 0L, 0L]\n    >>>\
    \ product_of_all_but_index([0L, 0L, 0L])\n    [0L, 0L, 0L]\n*/\nlong[] product_of_all_but_index(long[]\
    \ numbers) \n{\n\tlong[] result = [];\n\t\n\tforeach(index, current; numbers)\
    \ \n\t{\n\t\tlong product = 1L;\n\t\tfor(long i = 0L; i < numbers.length; i++)\
    \ \n\t\t{\n\t\t\tif(i != index)\n\t\t\t\tproduct *= numbers[i];\n\t\t}\n\t\tresult\
    \ ~= product;\n\t}\n\treturn result;\n}\n/*\n This function takes two numbers\
    \ and returns their product.\n    >>> multiply(4L, 5L)\n    20L\n    >>> multiply(4L,\
    \ -5L)\n    -20L\n    >>> multiply(-4L, 5L)\n    -20L\n    >>> multiply(-4L, -5L)\n\
    \    20L\n*/\nlong multiply(long x, long\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfs7m7o5b.d(67): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfs7m7o5b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if(numbers.length\
    \ == 0)\n        return [];\n    if(numbers.length == 1)\n        return numbers;\n\
    \    alias number = numbers[0];\n    auto acc = [number];\n    foreach(idx, number;\
    \ numbers[1..$])\n    {\n        acc ~= delimeter;\n        acc ~= number;\n \
    \   }\n    return acc;\n}\n/*\n Applies a function 'op' to all elements of input\
    \ array `numbers' and returns an array with the results\n    >>> map([], (x) =>\
    \ x)\n    []\n    >>> map([1L, 2L, 3L], (x) => x * 2L)\n    [2L, 4L, 6L]\n*/\n\
    long[] map(long[] numbers, R)(R op(long x))\n{\n    return numbers.map!op;\n}\n\
    unittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L)\
    \ == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L,\
    \ 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq1cilo2z.d(17): Error: alias `number` cannot alias an expression
    `numbers[0]`

    /tmp/tmpq1cilo2z.d(19): Error: variable `number` is shadowing alias `number`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq1cilo2z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0) \n    {\n        return numbers;\n    }\n    else \n    {\n        return\
    \ intersperseImpl(numbers, delimeter);\n    }\n}\nunittest\n{\n    alias candidate\
    \ = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu8sbfdgw.d(19): Error: undefined identifier `intersperseImpl`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu8sbfdgw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = [];\n    foreach (i, item; numbers)\n    {\n        result ~= item;\n\
    \        if (i < numbers.length - 1)\n            result ~= delimeter;\n    }\n\
    \    return result;\n}\n/*\n Function returns true if number is a prime (has divisors\
    \ only 1 and itself)\n    >>> isPrime(1L)\n    false\n    >>> isPrime(2L)\n  \
    \  true\n    >>> isPrime(3L)\n    true\n    >>> isPrime(4L)\n    false\n*/\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    auto result\
    \ = new long[](0);\n    long i = 0L;\n    long n = numbers.length;\n    if (n\
    \ == 0L)\n    {\n        return result;\n    }\n    else\n    {\n        result\
    \ = new long[](n * 2L - 1L);\n        for (; i < n - 1L; i++)\n        {\n   \
    \         result[i * 2L] = numbers[i];\n            result[i * 2L + 1L] = delimeter;\n\
    \        }\n        result[i * 2L] = numbers[i];\n        return result;\n   \
    \ }\n}\nenum Noisy(T) {\n    N(T value, size_t n);\n    @property T value() const;\n\
    \    @property size_t n() const;\n}\nstruct Result {\n    Result([Result] results)\
    \ {\n        this.results = results;\n    }\n    @property [Result] results()\
    \ const;\n}\n/*\n Let's try to write a function which computes a sum of squares\
    \ of some numbers.\n The function should be generic and work with any iterable\
    \ collection of numbers (including another\n range). The function should also\
    \ be template and have a static if condition checking whether the\n element type\
    \ is `Noisy`. If it is, the value should be extracted and the counter should be\n\
    \ incremented.\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzl_scpef.d(33): Error: found `value` when expecting `,`

    /tmp/tmpzl_scpef.d(33): Error: expression expected, not `,`

    /tmp/tmpzl_scpef.d(33): Error: found `size_t` when expecting `,`

    /tmp/tmpzl_scpef.d(38): Error: unexpected `(` in declarator

    /tmp/tmpzl_scpef.d(38): Error: basic type expected, not `[`

    /tmp/tmpzl_scpef.d(38): Error: no identifier for declarator `Result(_error_[Result]
    results)`

    /tmp/tmpzl_scpef.d(41): Error: use `@(attributes)` instead of `[attributes]`

    /tmp/tmpzl_scpef.d(41): Error: function declaration without return type. (Note
    that constructors are always named `this`)

    /tmp/tmpzl_scpef.d(41): Error: no identifier for declarator `const @property results()`

    /tmp/tmpzl_scpef.d(43): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzl_scpef.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \nin {\n  assert(all!(n\
    \ => n >= 0, numbers));\n}\nout (result) {\n  assert(result.length == numbers.length\
    \ * 2 - 1);\n  assert(all!(n => n == delimeter, result[1 .. $-1]));\n  assert(result[0]\
    \ == numbers[0]);\n  assert(result[$-1] == numbers[$-1]);\n}\n{\n  long[] result;\n\
    \  foreach (i, number; numbers)\n  {\n    result ~= number;\n    if (i < numbers.length\
    \ - 1)\n      result ~= delimeter;\n  }\n  return result;\n}\n/*\n Add two numbers\
    \ represented as decimal strings\n    >>> plus(\"0\", \"1\")\n    \"1\"\n    >>>\
    \ plus(\"1\", \"1\")\n    \"2\"\n    >>> plus(\"123\", \"456\")\n    \"579\"\n\
    \    >>> plus(\"999\", \"1\")\n    \"1000\"\n    \n*/\nstring plus(string x, string\
    \ y) \nin {\n  assert(x.length > 0);\n  assert(y.length > 0);\n  assert(all!(isdigit,\
    \ x));\n  assert(all!(isdigit, y));\n}\nout (result) {\n  assert(result.length\
    \ == max(x.length, y.length) + 1);\n  assert(all!(isdigit, result));\n}\n{\n \
    \ if (x.length < y.length)\n    return plus(y, x);\n  auto xnumber = uint(x);\n\
    \  auto ynumber = uint(y);\n  auto znumber = xnumber + ynumber;\n  return to!string(znumber);\n\
    }\n/*\n Given a string of digits and a set of digits 'allowed'\n returns the number\
    \ of occurrences of each digit in 'allowed'\n in the input string\n    >>> occurrences(\"\
    127\", \"0123456789\")\n    [1, 2, 1, 0, 0, 0, 0, 1, 0, 0]\n    >>> occurrences(\"\
    127\", \"02468\")\n    [0, 1, 0, 0, 0, 1, 0, 1, 0, 0]\n    \n*/\nlong\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa65mg0lh.d(21): Error: missing `do { ... }` after `in` or `out`

    /tmp/tmpa65mg0lh.d(54): Error: missing `do { ... }` after `in` or `out`

    /tmp/tmpa65mg0lh.d(73): Error: no identifier for declarator `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa65mg0lh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0) \n    {\n        return [];\n    }\n    auto result = new long[](numbers.length*2\
    \ - 1);\n    foreach (index, number; numbers) \n    {\n        result[index*2]\
    \ = number;\n        if (index < numbers.length - 1) \n        {\n           \
    \ result[index*2 + 1] = delimeter;\n        }\n    }\n    return result;\n}\n\
    /*\n   Return the minimum number of decimal digits needed to represent the given\
    \ number as a string.\n   The value `-1' is returned if the number is negative.\n\
    \    >>> minDigits(0L)\n    1\n    >>> minDigits(10L)\n    2\n    >>> minDigits(12345L)\n\
    \    5\n    >>> minDigits(-12L)\n    -1\n    >>> minDigits(12345678901234567890L)\n\
    \    20\n*/\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    foreach (i, e; numbers) \n \
    \   {\n        result[i * 2] = e;\n        if (i * 2 + 1 < result.length) \n \
    \       {\n            result[i * 2 + 1] = delimeter;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation
    failed

    ----------------

    ??:? _d_newarrayU [0x42da23]

    ??:? _d_newarrayT [0x4297a8]

    ??:? long[] tmpk9ki44tv.intersperse(long[], long) [0x427e4b]

    ??:? void tmpk9ki44tv.__unittest_L24_C1() [0x427f38]

    ??:? void tmpk9ki44tv.__modtest() [0x428188]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c4e3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b376]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430601]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430ab0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43058d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b34d]

    ??:? runModuleUnitTests [0x42c2b9]

    ??:? void rt.dmain2'
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ ret = new long[numbers.length * 2 - 1];\n    for (long i = 0; i < numbers.length;\
    \ i++)\n    {\n        ret[i * 2] = numbers[i];\n        if (i < numbers.length\
    \ - 1)\n        {\n            ret[i * 2 + 1] = delimeter;\n        }\n    }\n\
    \    return ret;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation
    failed

    ----------------

    ??:? _d_newarrayU [0x42da33]

    ??:? _d_newarrayT [0x4297b8]

    ??:? long[] tmplarw9edn.intersperse(long[], long) [0x427e4b]

    ??:? void tmplarw9edn.__unittest_L24_C1() [0x427f44]

    ??:? void tmplarw9edn.__modtest() [0x428194]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c4f3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b386]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430611]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430ac0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43059d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b35d]

    ??:? runModuleUnitTests [0x42c2c9]

    ??:? void rt.dmain2'
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0) \n    {\n        return numbers;\n    }\n    else \n    {\n        auto\
    \ first = numbers[0];\n        auto rest = numbers[1 .. $];\n        return (intersperse(rest,\
    \ delimeter) ~ [delimeter]) ~ [first];\n    }\n}\nunittest\n{\n    alias candidate\
    \ = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7y42otzk.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x4283fd]

    ??:? void tmp7y42otzk.__unittest_L24_C1() [0x428039]

    ??:? void tmp7y42otzk.__modtest() [0x428180]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5c7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b45a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304a5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430954]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430431]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b431]

    ??:? runModuleUnitTests [0x42c39d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \nin {\n    assert(isSorted(numbers));\n\
    }\nout (result) {\n    assert(isSorted(result));\n}\n{\n    if (numbers.length\
    \ == 0) {\n        return numbers;\n    }\n    long[] result = new long[2 * numbers.length\
    \ - 1];\n    result[0] = numbers[0];\n    for (int i = 1; i < numbers.length;\
    \ i++) {\n        result[2 * i - 1] = delimeter;\n        result[2 * i] = numbers[i];\n\
    \    }\n    return result;\n}\n/*\n In a given array `numbers', replace every\
    \ element with the product of all the other elements\n    >>> replaceWithProduct([1L,\
    \ 2L, 3L])\n    [6L, 3L, 2L]\n    \n*/\nlong[] replaceWithProduct(long[] numbers)\
    \ \nin {\n    assert(isSorted(numbers));\n}\nout (result) {\n    assert(isSorted(result));\n\
    }\n{\n    long[] result = new long[numbers.length];\n    if (numbers.length ==\
    \ 0) {\n        return result;\n    }\n    long product = 1L;\n    for (int i\
    \ = 0; i < numbers.length; i++) {\n        result[i] = product;\n        product\
    \ *= numbers[i];\n    }\n    product = 1L;\n    for (int i = numbers.length -\
    \ 1; i >= 0; i--) {\n        result[i] *= product;\n        product *= numbers[i];\n\
    \    }\n    return result;\n}\n/*\n Given a sorted array of integers, for each\
    \ position in the array, find the number of elements to its right that are smaller\
    \ than it. Return the original array of integers, where each element is replaced\
    \ by the number of smaller elements to its right.\n    >>> countSmaller([1L, 2L,\
    \ 7L, 8L, 5L])\n    [4L, 3L, 1L, 0L, 0L]\n    >>> countSmaller([5L, 4L, 3L, 2L,\
    \ 1L])\n    [0L, 0L, 0L, 0L, 0L]\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpceddgf67.d(18): Error: missing `do { ... }` after `in` or `out`

    /tmp/tmpceddgf67.d(43): Error: missing `do { ... }` after `in` or `out`

    /tmp/tmpceddgf67.d(60): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpceddgf67.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n  long[] result\
    \ = [];\n  long count = numbers.length;\n  for (size_t i = 0; i < count; i++)\n\
    \  {\n    result ~= numbers[i];\n    if (i + 1 < count)\n      result ~= delimeter;\n\
    \  }\n  return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n\
    \    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n \n \n  import\
    \ std.range;\n  import std.functional;\n  import std.algorithm;\n \n  return numbers.map!(x\
    \ => tuple(x, delimeter))\n                .joiner(`[]`)\n                .array;\n\
    }\n \nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfjw1t1b6.d(20): Error: template `std.algorithm.iteration.joiner`
    cannot deduce function from argument types `!()(MapResult!(__lambda3, long[]),
    string)`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/algorithm/iteration.d(2155):        `std.algorithm.iteration.joiner(RoR,
    Separator)(RoR r, Separator sep) if (isInputRange!RoR && isInputRange!(ElementType!RoR)
    && isForwardRange!Separator && is(ElementType!Separator : ElementType!(ElementType!RoR)))`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/algorithm/iteration.d(2474):        `std.algorithm.iteration.joiner(RoR)(RoR
    r) if (isInputRange!RoR && isInputRange!(ElementType!RoR))`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfjw1t1b6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if(numbers.length\
    \ == 0) return numbers;\n    // long[] res;\n    auto res = new long[(numbers.length\
    \ - 1) * 2 + 1];\n    int j = 0;\n    foreach(i, number; numbers) {\n        res[j]\
    \ = number;\n        j += 1;\n        if(i != numbers.length - 1) {\n        \
    \    res[j] = delimeter;\n            j += 1;\n        }\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163952
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n    {\n        return numbers;\n    }\n    auto arr = new long[numbers.length\
    \ * 2 - 1];\n    foreach (i, ref elem; numbers)\n    {\n        if (i != 0)\n\
    \        {\n            arr[i * 2 - 1] = delimeter;\n        }\n        arr[i\
    \ * 2] = elem;\n    }\n    return arr;\n}\nunittest\n{\n    alias candidate =\
    \ intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n    {\n        return numbers;\n    }\nunittest\n{\n    alias candidate\
    \ = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbm9_o94f.d(17): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbm9_o94f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ ret;\n    size_t len = numbers.length;\n    if (len == 0)\n    {\n        ret\
    \ = new long[len];\n    }\n    else\n    {\n        ret = new long[len * 2 - 1];\n\
    \        foreach (i, number; numbers)\n        {\n            ret[i*2] = number;\n\
    \            if (i < len - 1)\n            {\n                ret[i*2 + 1] = delimeter;\n\
    \            }\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate\
    \ = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0) return [];\n    long[] result = new long[2 * numbers.length - 1];\n  \
    \  foreach (i, ref number; numbers) \n    {\n        result[2 * i] = number;\n\
    \        if (i + 1 < numbers.length) \n        {\n            result[2 * i + 1]\
    \ = delimeter;\n        }\n    }\n    return result;\n}\n/*\n    insert a number\
    \ `delimeter' between the elements of input array `numbers' and its sorted copy,\
    \ return the sum of all elements\n    \n    >>> acumulate([1L, 2L, 3L], 4L)\n\
    \    25L\n*/\nlong acumulate(long[] numbers, long delimeter) \n{\n    long[] result\
    \ = intersperse(numbers, delimeter);\n    numbers = sort(numbers);\n    result\
    \ ~= intersperse(numbers, delimeter);\n    return reduce!\"a + b\"(result);\n\
    }\n/*\n    return the sum of the elements of input array `numbers'\n    >>> sum([1L,\
    \ 2L, 3L])\n    6L\n*/\nlong sum(long[] numbers) \n{\n    return reduce!\"a +\
    \ b\"(numbers);\n}\n/*\n    return the product of the elements of input array\
    \ `numbers'\n    >>> product([1L, 2L, 3L])\n    6L\n*/\nlong product(long[] numbers)\
    \ \n{\n    return reduce!\"a * b\"(numbers);\n}\n/*\n    return the sum of the\
    \ elements of input array `numbers' with their right-shifted copies\n    >>> sumRightShifted([1L,\
    \ 2L, 3L])\n    21L\n*/\nlong sumRightShifted(long[] numbers) \n{\n    long[]\
    \ doubledNumbers = [numbers, numbers];\n    long[] shiftedNumbers = doubledNumbers[1\
    \ .. $ - 1];\n    return sum(numbers) + sum(shiftedNumbers);\n}\n/*\n    return\
    \ the product of the elements of input array `numbers' with their right-shifted\
    \ copies\n    >>> productRightShifted([1L, 2L, 3L])\n    36L\n*/\nlong product\n\
    unittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L)\
    \ == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L,\
    \ 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphbuphy3f.d(73): Error: semicolon expected, not `unittest`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphbuphy3f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n    in {\n   \
    \     assert(numbers.length == 0 || delimeter != numbers[0]);\n    }\n    body\
    \ {\n        if (numbers.length <= 1) {\n            return numbers;\n       \
    \ }\n        else {\n            immutable int N = numbers.length;\n         \
    \   long[] result = new long[2*N - 1];\n            result[0] = numbers[0];\n\
    \            for (int i = 1; i < N; i += 1) {\n                result[2*i - 1]\
    \ = delimeter;\n                result[2*i] = numbers[i];\n            }\n   \
    \         return result;\n        }\n    }\n    \n//function calculating factorial\
    \ for number 'n'\nlong factorial(long n) \n    body {\n        if (n < 0) \n \
    \           return -1;\n        else if (n == 0) \n            return 1;\n   \
    \     else \n            return n * factorial(n - 1);\n    }\n    \n//Pascal's\
    \ triangle recursive implementation\nlong[][] pascalTriangle(long n) \n    body\
    \ {\n        if (n <= 0) {\n            return new long[][] {[]};\n        }\n\
    \        else {\n            immutable long[][] pascalPrev = pascalTriangle(n\
    \ - 1);\n            immutable long[] lastRow = pascalPrev[$-1];\n           \
    \ immutable long[] newRow = intersperse(lastRow, 0)\n                .zip(intersperse(lastRow,\
    \ 0)[1..$])\n                .map!((a, b) => a + b)\n                .array;\n\
    \            return pascalPrev ~ newRow;\n        }\n    }\n//Pascal's triangle\
    \ iterative implementation\nlong[][] pascalTriangle(long n) \n    body {\n   \
    \     if (n <= 0) {\n            return new long[][] {[]};\n        }\n      \
    \  else {\n            long[][] pascal = new long[][](1)[];\n            pascal[0]\
    \ = [1];\n            for (int i = 1; i < n; i += 1) {\n                pascal\
    \ ~= intersperse(pascal[$-1], 0)\n                    .zip(intersperse(p\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg8vvzoif.d(46): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmpg8vvzoif.d(46): Error: found `}` when expecting `;` following statement

    /tmp/tmpg8vvzoif.d(46): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmpg8vvzoif.d(62): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmpg8vvzoif.d(62): Error: found `}` when expecting `;` following statement

    /tmp/tmpg8vvzoif.d(62): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmpg8vvzoif.d(70): Error: found `unittest` when expecting `,`

    /tmp/tmpg8vvzoif.d(78): Error: found `void` when expecting `,`

    /tmp/tmpg8vvzoif.d(78): Error: found `{` when expecting `,`

    /tmp/tmpg8vvzoif.d(78): Error: expression expected, not `}`

    /tmp/tmpg8vvzoif.d(78): Error: found `End of File` when expecting `,`

    /tmp/tmpg8vvzoif.d(78): Error: found `End of File` when expecting `)`

    /tmp/tmpg8vvzoif.d(78): Error: found `End of File` when expecting `,`

    /tmp/tmpg8vvzoif.d(78): Error: found `End of File` when expecting `)'
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[];\n    foreach (number; numbers) \n    {\n        result\
    \ ~= number;\n        if (number != numbers[$ - 1])\n            result ~= delimeter;\n\
    \    }\n    return result;\n}\n/*\n Extracts the eight least significant bits\
    \ of a byte array and turns them into a long array\n    >>> extract_bytes([255L,\
    \ 15L, 0L])\n    [255L, 15L, 0L]\n*/\nlong[] extract_bytes(long[] bytes) \n{\n\
    \    long[] result = new long[];\n    foreach (byte; bytes) \n    {\n        foreach\
    \ (bit; 0..8) \n        {\n            result ~= (byte >> bit) & 1L;\n       \
    \ }\n    }\n    return result;\n}\n/*\n Extract the bits of a long array and places\
    \ them in a bit array\n    >>> extract_bits([0xFF, 0x0F, 0x00])\n    [1L, 1L,\
    \ 1L, 1L, 1L, 1L, 1L, 1L, 0L, 0L, 0L, 0L, 1L, 1L, 1L, 1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L]\n*/\nlong[] extract_bits(long[] longs)\
    \ \n{\n    long[] result = new long[];\n    foreach (long_; longs) \n    {\n \
    \       foreach (bit; 0..64) \n        {\n            result ~= (long_ >> bit)\
    \ & 1L;\n        }\n    }\n    return result;\n}\n/*\n Add a padding of 0s of\
    \ length `size' to the right of the bit array `bits'\n    >>> pad_right([0, 1,\
    \ 1, 1, 1, 0, 1, 0], 4)\n    [0L, 1L, 1L, 1L, 1L, 0L, 1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, 0L, 0L]\n*/\nunittest\n{\n    alias candidate = intersperse;\n\n   \
    \ assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L)\
    \ == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) ==\
    \ [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0yirg_lj.d(30): Error: no identifier for declarator `byte`

    /tmp/tmp0yirg_lj.d(34): Error: found `>>` when expecting `.` following byte

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0yirg_lj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n\treturn intersperse_core(numbers[],\
    \ delimeter, empty_long[], false);\n}\nlong[] intersperse_core(long[] nums, long\
    \ delimeter, long[] result, bool prevEmpty)\n{\n\tint len = nums.length;\n\tif\
    \ (prevEmpty)\n\t{\n\t\tresult ~= nums[0];\n\t\tprevEmpty = false;\n\t}\n\tfor\
    \ (int i = 1; i < len; i++)\n\t{\n\t\tresult ~= delimeter;\n\t\tresult ~= nums[i];\n\
    \t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n\
    \    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqi1axstk.d(13): Error: undefined identifier `empty_long`

    /tmp/tmpqi1axstk.d(17): Error: cannot implicitly convert expression `nums.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqi1axstk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    auto result\
    \ = new long[];\n    for (int i = 0; i < numbers.length; i++) \n    {\n      \
    \  result ~= numbers[i];\n        if (i != numbers.length - 1) \n        {\n \
    \           result ~= delimeter;\n        }\n    }\n    return result;\n}\n/*\n\
    1-d discretized domain, i.e. 1-d equidistant grid.\n*/\nstruct Domain \n{\n  \
    \  public int n;\n    public double[] values;\n    this(int n, double left, double\
    \ right) \n    {\n        this.n = n;\n        this.values = new double[n];\n\
    \        foreach (int i, ref value; this.values) \n        {\n            value\
    \ = left + double(i) / (n - 1) * (right - left);\n        }\n    }\n}\n/*\nPiecewise-constant\
    \ mesh function on a finite 1-d domain.\n    \n*/\nstruct ConstMeshFunc \n{\n\
    \    public Domain domain;\n    public double[] values;\n    this(Domain domain,\
    \ double[] values) \n    {\n        this.domain = domain;\n        assert(values.length\
    \ == domain.n);\n        this.values = values;\n    }\n    /*\n        Get value\
    \ of the mesh function at point 'x'.\n        \n        Args:\n            x:\
    \ Point where to get the value.\n        \n        Returns:\n            Value\
    \ of the mesh function.\n    */\n    double getValue(double x) \n    {\n     \
    \   int i = 0;\n        foreach (v; this.domain.values) \n        {\n        \
    \    if (v > x) \n            {\n                break;\n            }\n     \
    \       i++;\n        }\n        return this.values[i - 1];\n    }\n}\n/*\nRepresentation\
    \ of a linear operator of the type:\n    y[i] = sum(a[i][j] * x[j])\n*/\nstruct\
    \ LinearOperator \n{\n    double[][] a;\n    /*\n        Constructor of a linear\
    \ operator\n        \n        Args:\n            a: List of lists of operator\
    \ coefficients.\n    */\n\nunittest\n{\n    alias candidate = intersperse;\n\n\
    \    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkpm4_6aq.d(100): Error: `}` expected following members in `struct`
    declaration at /tmp/tmpkpm4_6aq.d(82)

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkpm4_6aq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[(numbers.length*2)-1];\n    foreach (number, numbers; int\
    \ i; result[i*2] = number) \n    {\n        if (i != numbers.length-1) \n    \
    \    {\n            result[(i*2)+1] = delimeter;\n        }\n    }\n    return\
    \ result;\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L,\
    \ 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nunittest\n{\n    alias candidate\
    \ = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcilqh_f_.d(14): Error: found `i` when expecting `.` following int

    /tmp/tmpcilqh_f_.d(14): Error: found `;` when expecting identifier following `int`.

    /tmp/tmpcilqh_f_.d(14): Error: found `result` when expecting `)`

    /tmp/tmpcilqh_f_.d(14): Error: found `)` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcilqh_f_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[0L];\n    foreach (i, number; numbers) \n    {\n        result\
    \ ~= number;\n        if (i < numbers.length - 1L) \n        {\n            result\
    \ ~= delimeter;\n        }\n    }\n    return result;\n}\n/*\n Insert a number\
    \ 'delimeter' between every two consecutive elements of input array `numbers'\n\
    \    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n\
    \    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter)\
    \ \n{\n    long[] result = new long[0L];\n    foreach (i, number; numbers) \n\
    \    {\n        result ~= number;\n        if (i < numbers.length - 1L) \n   \
    \     {\n            result ~= delimeter;\n        }\n    }\n    return result;\n\
    }\n/*\n Return dot product of two input arrays\n    >>> dotProduct([], [])\n \
    \   0L\n    >>> dotProduct([1L, 2L, 3L], [4L, 5L, 6L])\n    32L\n    >>> dotProduct([1L,\
    \ 2L, 3L], [4L, 5L])\n    0L\n    >>> dotProduct([1L, 2L], [4L, 5L, 6L])\n   \
    \ 0L\n    \n*/\nlong dotProduct(long[] a, long[] b) \n{\n    if (a.length != b.length)\
    \ \n    {\n        return 0L;\n    }\n    long result = 0L;\n    foreach (i, num;\
    \ a) \n    {\n        result += num * b[i];\n    }\n    return result;\n}\n/*\n\
    \ Return dot product of two input arrays\n    >>> dotProduct([], [])\n    0L\n\
    \    >>> dotProduct([1L, 2L, 3L], [4L, 5L, 6L])\n    32L\n    >>> dotProduct([1L,\
    \ 2L, 3L], [4L, 5L])\n    0L\n\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp1gmkmy3.d(70): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp1gmkmy3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ ans = [];\n    foreach(index, e; numbers)\n    {\n        if(index != 0)\n \
    \           ans ~= delimeter;\n        ans ~= e;\n    }\n    return ans;\n}\n\
    /*\n    Round down a number to the nearest multiple of factor 'divider'\n    >>>\
    \ roundDown(3.3, 2)\n    2.0\n    >>> roundDown(24, 5)\n    20\n    >>> roundDown(21,\
    \ 5)\n    20\n    >>> roundDown(10, 1)\n    10\n*/\nlong roundDown(long number,\
    \ long divider)\n{\n    return number - (number % divider);\n}\n/*\n    Round\
    \ up a number to the nearest multiple of factor 'divider'\n    >>> roundUp(3.3,\
    \ 2)\n    4.0\n    >>> roundUp(24, 5)\n    25\n    >>> roundUp(21, 5)\n    25\n\
    \    >>> roundUp(10, 1)\n    10\n*/\nlong roundUp(long number, long divider)\n\
    {\n    return roundDown(number, divider) + divider;\n}\n/*\n  Find the maximum\
    \ value of elements of input array 'values'\n    >>> max([1, 2, 3])\n    3\n \
    \   >>> max([1L, 2L, 3L])\n    3L\n    >>> max([4L, 5L, 2L, 3L])\n    5L\n*/\n\
    long max(long[] values)\n{\n    long maximum = values[0];\n    foreach(index,\
    \ e; values)\n    {\n        if(index != 0)\n            maximum = max(maximum,\
    \ e);\n    }\n    return maximum;\n}\n/*\n    Construct a 2D array of size 'rows'\
    \ by 'columns' filled with element 'fill'\n    >>> array2D(0, 2, 4L)\n    []\n\
    \    >>> array2D(1, 2, 4L)\n    [[4L, 4L]]\n    >>> array2D(2, 2, 4L)\n    [[4L,\
    \ 4L], [4L, 4L]]\n    >>> array2D(2, 2, 0L)\n    [[0L\nunittest\n{\n    alias\
    \ candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5bmkpzxl.d(71): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5bmkpzxl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    int n =\
    \ numbers.length;\n    long[] interspersed = new long[n + (n - 1)];\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp732ru2zb.d(15): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp732ru2zb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0) \n    {\n        return numbers;\n    } \n    else \n    {\n        long[]\
    \ result = new long[2 * numbers.length - 1];\n        result[0] = numbers[0];\n\
    \        size_t i = 1;\n        for (; i < result.length; i = i + 2) \n      \
    \  {\n            result[i] = delimeter;\n            result[i + 1] = numbers[i\
    \ / 2 + 1];\n        }\n        return result;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    return\
    \ intersperse(numbers, delimeter, numbers.length);\n}\nlong[] intersperse(long[]\
    \ numbers, long delimeter, size_t numVals) \n{\n    long[] result = new long[0L];\n\
    \    for (size_t i = 0L; i < numVals; i++) \n    {\n        result ~= numbers[i];\n\
    \        if (i < numVals - 1L) \n        {\n            result ~= delimeter;\n\
    \        }\n    }\n    return result;\n}\n/*\n Intersperse array 'array' between\
    \ every two consecutive elements of input array `numbers'\n    >>> intersperseArray([],\
    \ [1, 2, 3])\n    []\n    >>> intersperseArray([1, 2, 3], [4, 5, 6])\n    [1,\
    \ 4, 5, 6, 2, 4, 5, 6, 3]\n*/\nlong[] intersperseArray(long[] numbers, long[]\
    \ array) \n{\n    return intersperseArray(numbers, array, numbers.length);\n}\n\
    long[] intersperseArray(long[] numbers, long[] array, size_t numVals) \n{\n  \
    \  long[] result = new long[0L];\n    for (size_t i = 0L; i < numVals; i++) \n\
    \    {\n        result ~= numbers[i];\n        if (i < numVals - 1L) \n      \
    \  {\n            result ~= array;\n        }\n    }\n    return result;\n}\n\
    /*\n Returns an array containing the results of applying function 'func' to each\
    \ element in\n input array `numbers'\n    >>> map!(a => 2 * a)([1, 2, 3])\n  \
    \  [2, 4, 6]\n*/\nlong[] map(long[] numbers, Func1!long func) \n{\n    return\
    \ map(numbers, func, numbers.length);\n}\nlong[] map(long[] numbers, Func1!long\
    \ func, size_t numVals) \n{\n    long[] result = new long[numVals];\n    for (size_t\
    \ i = 0L; i < numVals; i++) \n\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2wzplee8.d(67): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2wzplee8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n\treturn iota(numbers.length\
    \ * 2 - 1)\n\t\t.map!(i => if (i % 2 == 0) numbers[i / 2] else delimeter)\n\t\t\
    .array;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprz3r4k9i.d(14): Error: expression expected, not `if`

    /tmp/tmprz3r4k9i.d(14): Error: found `numbers` when expecting `)` following template
    argument list

    /tmp/tmprz3r4k9i.d(14): Error: found `else` when expecting `;` following `return`
    statement

    /tmp/tmprz3r4k9i.d(14): Error: found `)` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprz3r4k9i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[$];\n    bool first = true;\n    foreach (number; numbers)\
    \ \n    {\n        if (first) \n        {\n            first = false;\n      \
    \  } \n        else \n        {\n            result ~= delimeter;\n        }\n\
    \        result ~= number;\n    }\n    return result;\n}\n/*\n Selects contiguous\
    \ slices of the input array with the length of `slicelength'.\n    >>> slice([1L,\
    \ 2L, 3L, 4L, 5L, 6L], 2L)\n    [[1L, 2L], [3L, 4L], [5L, 6L]]\n    >>> slice([1L,\
    \ 2L, 3L, 4L, 5L, 6L], 3L)\n    [[1L, 2L, 3L], [4L, 5L, 6L]]\n    >>> slice([1L,\
    \ 2L, 3L, 4L, 5L, 6L], 4L)\n    [[1L, 2L, 3L, 4L], [5L, 6L]]\n*/\nlong[][] slice(long[]\
    \ numbers, long slicelength) \n{\n    long[][] result = new long[$][];\n    long\
    \ c = numbers.length / slicelength;\n    for (long i = 0L; i < c; i++) \n    {\n\
    \        result ~= numbers[i * slicelength .. (i + 1L) * slicelength];\n    }\n\
    \    if (numbers.length % slicelength != 0L) \n    {\n        result ~= numbers[c\
    \ * slicelength .. $];\n    }\n    return result;\n}\n/*\nRemoves contiguous slices\
    \ of the input array with the length of `slicelength'.\n>>> remove([1L, 2L, 3L,\
    \ 4L, 5L, 6L], 2L)\n[3L, 4L, 5L, 6L]\n>>> remove([1L, 2L, 3L, 4L, 5L, 6L], 3L)\n\
    [4L, 5L, 6L]\n>>> remove([1L, 2L, 3L, 4L, 5L, 6L],\nunittest\n{\n    alias candidate\
    \ = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj_t0g09j.d(52): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj_t0g09j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n  long[] _numbers\
    \ = null;\n  if (isNull(numbers))\n    return _numbers;\n  auto len = numbers.length;\n\
    \  if (len == 1)\n    return numbers;\n  _numbers = new long[2 * len - 1];\n \
    \ for (size_t i = 0; i < len; i++)\n  {\n    _numbers[2 * i] = numbers[i];\n \
    \   if (i != len - 1)\n      _numbers[2 * i + 1] = delimeter;\n  }\n  return _numbers;\n\
    }\n/*\n    >>> group_by_gaps([1L, 2L, 4L, 5L, 8L, 9L, 11L, 13L, 15L])\n    [[1L,\
    \ 2L], [4L, 5L], [8L, 9L], [11L], [13L], [15L]]\n*/\nlong[][] group_by_gaps(long[]\
    \ nums) \n{\n  auto len = nums.length;\n  long[][] groups = new long[][](len);\n\
    \  size_t group_i = 0;\n  if (len != 0)\n  {\n    auto group = new long[](2);\n\
    \    long prev = nums[0];\n    group[0] = prev;\n    for (size_t i = 1; i < len;\
    \ i++)\n    {\n      if (nums[i] == prev + 1)\n      {\n        group[1] = nums[i];\n\
    \        prev = nums[i];\n      }\n      else\n      {\n        groups[group_i]\
    \ = group;\n        group = new long[](2);\n        group[0] = nums[i];\n    \
    \    prev = nums[i];\n        group_i++;\n      }\n    }\n    groups[group_i]\
    \ = group;\n  }\n  return groups[0 .. group_i + 1];\n}\n/*\n    >>> gap_sizes([[1L,\
    \ 2L], [4L, 5L], [8L, 9L], [11L], [13L], [15L]])\n    [1L,\nunittest\n{\n    alias\
    \ candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpasgdd3k1.d(62): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpasgdd3k1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[];\n    foreach (index, number; numbers) \n    {\n       \
    \ if (index == 0) \n        {\n            result ~= number;\n        }\n    \
    \    else \n        {\n            result ~= delimeter;\n            result ~=\
    \ number;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp34la5r73.d(13): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp34la5r73.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \nin {\n    foreach\
    \ (i; 0 .. numbers.length)\n        assert(numbers[i] > 0);\n    assert(delimeter\
    \ > 0);\n}\nout(result) {\n    assert(result.length == numbers.length * 2 - 1);\n\
    \    foreach (i; 0 .. result.length)\n        assert(result[i] > 0);\n}\n{\n \
    \   long[] result = new long[numbers.length * 2 - 1];\n    size_t index = 0;\n\
    \    foreach (i; 0 .. numbers.length) {\n        result[index] = numbers[i];\n\
    \        index++;\n        if (i != numbers.length - 1) {\n            result[index]\
    \ = delimeter;\n            index++;\n        }\n    }\n    return result;\n}\n\
    /*\n    Calculate average value from `numbers'\n    >>> average([])\n    0\n \
    \   >>> average([1L, 2L, 3L])\n    2\n*/\nlong average(long[] numbers)\nin {\n\
    \    foreach (i; 0 .. numbers.length)\n        assert(numbers[i] > 0);\n}\nout(result)\
    \ {\n    assert(result > 0);\n}\n{\n    size_t sum = 0;\n    foreach (i; 0 ..\
    \ numbers.length)\n        sum += numbers[i];\n    return sum / numbers.length;\n\
    }\n/*\n    Calculate gcd of two numbers\n    >>> gcd(10L, 5L)\n    5\n    >>>\
    \ gcd(5L, 10L)\n    5\n    >>> gcd(123L, 12L)\n    3\n*/\nlong gcd(long a, long\
    \ b)\nin {\n    assert(a > 0);\n    assert(b > 0);\n}\nout(result) {\n    assert(result\
    \ > 0);\n}\n{\n    long gcd = 1;\n    for (long i = 1; i <= a && i <= b; i++)\
    \ {\n        if (a % i == 0 && b % i == 0)\n            gcd = i;\n    }\n    return\
    \ gcd;\n}\n/*\n    Calculate lcm of two numbers\n    >>> lcm(10L\nunittest\n{\n\
    \    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprxaysvqy.d(22): Error: missing `do { ... }` after `in` or `out`

    /tmp/tmprxaysvqy.d(50): Error: missing `do { ... }` after `in` or `out`

    /tmp/tmprxaysvqy.d(73): Error: missing `do { ... }` after `in` or `out`

    /tmp/tmprxaysvqy.d(81): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprxaysvqy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    import\
    \ std.array : array;\n    return array(numbers.map!\"a ~ b\"(delimeter)).joined;\n\
    }\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdahzl5aq.d(14): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdahzl5aq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = [];\n    bool first = true;\n    foreach (num; numbers) {\n       \
    \ if (first) {\n            first = false;\n        } else {\n            result\
    \ ~= delimeter;\n        }\n        result ~= num;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163952
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0) return numbers;\n    if (numbers.length == 1) return numbers;\n    long[]\
    \ output = new long[2 * numbers.length - 1];\n    int i = 0;\n    while (i < numbers.length)\
    \ \n    {\n        output[2 * i] = numbers[i];\n        if (i < numbers.length\
    \ - 1) \n        {\n            output[2 * i + 1] = delimeter;\n        }\n  \
    \      i += 1;\n    }\n    return output;\n}\nunittest\n{\n    alias candidate\
    \ = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \nin\n{\n    assert(!(numbers.length\
    \ > 1 && numbers[$ - 1] == delimeter));\n}\nout(result)\n{\n    assert(result.length\
    \ == (numbers.length * 2 - 1));\n    foreach (i, e; result)\n    {\n        assert(e\
    \ == (i % 2 == 0 ? numbers[i / 2] : delimeter));\n    }\n}\n{\n    auto result\
    \ = new long[];\n    foreach (i, e; numbers)\n    {\n        if (i != 0)\n   \
    \     {\n            result ~= delimeter;\n        }\n        result ~= e;\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpou9p77s5.d(24): Error: missing `do { ... }` after `in` or `out`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpou9p77s5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0) \n    {\n        return numbers;\n    }\n    else \n    {\n        long[]\
    \ result = new long[2 * numbers.length - 1];\n        result[0] = numbers[0];\n\
    \        for (long i = 1; i < numbers.length; i++) \n        {\n            result[i\
    \ * 2 - 1] = delimeter;\n            result[i * 2] = numbers[i];\n        }\n\
    \        return result;\n    }\n}\n/*\n Create a dictionary of prime numbers between\
    \ start and end\n    >>> create_primes_dict(10L, 20L)\n    [19: 11L, 17: 7L, 13:\
    \ 5L, 11: 3L, 7: 2L]\n*/\ntypeof(ret) create_primes_dict(long start, long end)\
    \ \n{\n    return ret(generate_primes(start, end));\n}\n/*\n    Test if a number\
    \ is prime.\n        >>> is_prime(2L)\n        true\n        >>> is_prime(3L)\n\
    \        true\n        >>> is_prime(4L)\n        false\n*/\nunittest\n{\n    alias\
    \ candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps5i93k9w.d(34): Error: undefined identifier `ret`, did you mean
    template `get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps5i93k9w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n\tif (numbers.length\
    \ == 0) \n\t{\n\t\treturn numbers;\n\t}\n\tlong[] result = new long[numbers.length\
    \ * 2 - 1];\n\tforeach (idx, element; numbers) \n\t{\n\t\tresult[idx * 2] = element;\n\
    \t\tif (idx != numbers.length - 1) \n\t\t{\n\t\t\tresult[idx * 2 + 1] = delimeter;\n\
    \t\t}\n\t}\n\treturn result;\n}\n/*\n Partition the input array `numbers' into\
    \ two arrays.\n The first subarray contains all elements less than `delimeter',\n\
    \ the second subarray contains all elements greater than or equal to `delimeter'.\n\
    \    >>> partition([1L, 2L, 3L, 4L, 5L], 3L)\n    [1L, 2L], [3L, 4L, 5L]\n   \
    \ >>> partition([1L, 2L, 3L, 4L, 5L], 0L)\n    [], [1L, 2L, 3L, 4L, 5L]\n    >>>\
    \ partition([1L, 2L, 3L, 4L, 5L], 6L)\n    [1L, 2L, 3L, 4L, 5L], []\n    >>> partition([],\
    \ 0L)\n    [], []\n*/\nauto partition(long[] numbers, long delimeter) \n{\n\t\
    long[] left = new long[];\n\tlong[] right = new long[];\n\tforeach (idx, element;\
    \ numbers) \n\t{\n\t\tif (element < delimeter) \n\t\t{\n\t\t\tleft ~= element;\n\
    \t\t}\n\t\telse \n\t\t{\n\t\t\tright ~= element;\n\t\t}\n\t}\n\treturn tuple(left,\
    \ right);\n}\n/*\n Inserts `delimeter' after every two consecutive elements of\
    \ input array `numbers'\n    >>> intercalate([], 4L)\n    []\n    >>> intercalate([1L,\
    \ 2L, 3L], 4L)\n    [1L, 2L, 4L, 3L]\n*/\nlong[] intercalate(long[] numbers, long\
    \ del\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0qmgtqfo.d(66): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0qmgtqfo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \nin\n{\n    assert(isSorted(numbers));\n\
    }\nbody\n{\n    immutable len = numbers.length;\n    if (len < 2)\n    {\n   \
    \     return numbers;\n    }\n    else\n    {\n        long[] res = new long[len\
    \ * 2 - 1];\n        res[0] = numbers[0];\n        for (size_t i = 1; i < len;\
    \ i++)\n        {\n            res[2 * i - 1] = delimeter;\n            res[2\
    \ * i] = numbers[i];\n        }\n        return res;\n    }\n}\nunittest\n{\n\
    \    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnpcqrrxz.d(14): Error: undefined identifier `isSorted`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnpcqrrxz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ output = new long[numbers.length*2-1];\n    foreach (i, x; numbers)\n    {\n\
    \        if (i != 0)\n            output[2*i-1] = delimeter;\n        output[2*i]\
    \ = x;\n    }\n    return output;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation
    failed

    ----------------

    ??:? _d_newarrayU [0x42da2b]

    ??:? _d_newarrayT [0x4297b0]

    ??:? long[] tmpq5hes6gp.intersperse(long[], long) [0x427e4b]

    ??:? void tmpq5hes6gp.__unittest_L22_C1() [0x427f40]

    ??:? void tmpq5hes6gp.__modtest() [0x428190]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c4eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b37e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430609]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430ab8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430595]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b355]

    ??:? runModuleUnitTests [0x42c2c1]

    ??:? void rt.dmain2'
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ res = new long[numbers.length * 2 - 1];\n    foreach (i, j; 0 .. numbers.length)\n\
    \    {\n        res[i * 2] = numbers[j];\n        if (i != numbers.length - 1)\n\
    \            res[i * 2 + 1] = delimeter;\n    }\n    return res;\n}\n \n/*\n Insert\
    \ an element 'delimeter' between every two consecutive elements of input array\
    \ `elements'\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n*/\nE[]\
    \ intersperse(E)(E[] elements, E delimeter) \n{\n    E[] res = new E[elements.length\
    \ * 2 - 1];\n    foreach (i, j; 0 .. elements.length)\n    {\n        res[i *\
    \ 2] = elements[j];\n        if (i != elements.length - 1)\n            res[i\
    \ * 2 + 1] = delimeter;\n    }\n    return res;\n}\n \n/*\n Partition a sequence\
    \ into two lists according to a predicate.\n    >>> partition([1, 2, 3, 4, 5],\
    \ x => x % 2 == 0)\n    ([2, 4], [1, 3, 5])\n*/\ntuple!(E[], E[]) partition(alias\
    \ pred = \"a == b\", E)(E[] elements) \n{\n    E[] matched;\n    E[] unmatched;\n\
    \    foreach (elem; elements)\n    {\n        if (pred(elem))\n            matched\
    \ ~= elem;\n        else\n            unmatched ~= elem;\n    }\n    return tuple(matched,\
    \ unmatched);\n}\n \n/*\n Partition a sequence into two lists according to a predicate.\n\
    \    >>> partition(\"Hello, World!\", a => a == 'a')\n    (\"aaaa\", \"H,ello,\
    \ World!\")\n*/\ntuple!(string, string) partition(alias pred = \"a == b\", E)(E[]\
    \ elements) \n{\n    string matched;\n    string unmatched;\n    foreach (elem;\
    \ elements)\n    {\n        if (pred(elem))\n            matched ~=\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp691p_fxt.d(14): Error: found `..` when expecting `)`

    /tmp/tmp691p_fxt.d(14): Error: found `)` when expecting `;` following statement

    /tmp/tmp691p_fxt.d(31): Error: found `..` when expecting `)`

    /tmp/tmp691p_fxt.d(31): Error: found `)` when expecting `;` following statement

    /tmp/tmp691p_fxt.d(72): Error: expression expected, not `unittest`

    /tmp/tmp691p_fxt.d(73): Error: found `{` when expecting `;` following statement

    /tmp/tmp691p_fxt.d(80): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp691p_fxt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    auto tupleOfNumbers\
    \ = zip(numbers[0..$ - 1], numbers[1..$]);\n    auto flatTupleOfNumbers = map!(a\
    \ => a[0], tupleOfNumbers) ~ [numbers[$ - 1]];\n    return flatTupleOfNumbers.intersperse(delimeter);\n\
    }\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnojaf5nz.d(13): Error: undefined identifier `zip`

    /tmp/tmpnojaf5nz.d(14): Error: template instance `map!((a) => a[0], tupleOfNumbers)`
    template `map` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnojaf5nz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[][]\
    \ splitArr = zip(numbers, numbers[1 .. $]);\n    return join(splitArr.map!(a =>\
    \ [a[0], delimeter]));\n}\nunittest\n{\n    alias candidate = intersperse;\n\n\
    \    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3sufigqw.d(13): Error: undefined identifier `zip`

    /tmp/tmp3sufigqw.d(14): Error: undefined identifier `join`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3sufigqw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n    {\n        return numbers;\n    }\n    return concatenate(map!(\n\
    \    (Tuple!(long, long) tuple) => [tuple[0], delimeter],\n    zip(numbers[0 ..\
    \ $ - 1], numbers[1 .. $])));\n}\n// #3\nimport std.algorithm;\nimport std.range;\n\
    import std.stdio;\nimport std.string;\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq3cxz8pm.d(17): Error: undefined identifier `concatenate`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq3cxz8pm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[][]\
    \ res = new long[][numbers.length + 1];\n    res[0] = numbers[0];\n    foreach\
    \ (i, _; numbers[1..$]) \n    {\n        res[i + 1] = delimeter;\n        res[i\
    \ + 2] = numbers[i + 1];\n    }\n    return res.join;\n}\n/*\nOuput pairs of consecutive\
    \ items from input array `numbers'\n    >>> zip([1L, 2L, 3L])\n    [[1L, 2L],\
    \ [2L, 3L]]\n    >>> zip([])\n    []\n*/\nlong[][] zip(long[] numbers) \n{\n \
    \   long[][] res = new long[][numbers.length - 1];\n    foreach (i, _; numbers[0..$\
    \ - 1]) \n    {\n        res[i] = [numbers[i], numbers[i + 1]];\n    }\n    return\
    \ res;\n}\n/*\n Assign a 'rank' to each value in the input array `numbers'\n \
    \   >>> rank([1L, 2L, 2L, 4L, 5L])\n    [1L, 2L, 2L, 3L, 4L]\n    >>> rank([1L,\
    \ 1L, 1L, 1L, 1L])\n    [1L, 1L, 1L, 1L, 1L]\n    >>> rank([2L, 1L, 3L, 4L, 5L])\n\
    \    [3L, 1L, 2L, 3L, 4L]\n*/\nlong[] rank(long[] numbers) \n{\n    long[][] pairs\
    \ = zip(numbers);\n    long[][] ranks = new long[][numbers.length - 1];\n    foreach\
    \ (i, p; pairs) \n    {\n        if (p[0] > p[1]) \n        {\n            ranks[i]\
    \ = [2L, 1L];\n        }\n        else if (p[0] < p[1]) \n        {\n        \
    \    ranks[i] = [1L, 2L];\n        }\n        else \n        {\n            ranks[i]\
    \ = [1\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4qprhz4m.d(64): Error: found `unittest` when expecting `,`

    /tmp/tmp4qprhz4m.d(72): Error: found `void` when expecting `,`

    /tmp/tmp4qprhz4m.d(72): Error: found `{` when expecting `,`

    /tmp/tmp4qprhz4m.d(72): Error: expression expected, not `}`

    /tmp/tmp4qprhz4m.d(72): Error: found `End of File` when expecting `,`

    /tmp/tmp4qprhz4m.d(63): Error: found `End of File` when expecting `]`

    /tmp/tmp4qprhz4m.d(72): Error: found `End of File` when expecting `;` following
    statement

    /tmp/tmp4qprhz4m.d(72): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp4qprhz4m.d(72): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp4qprhz4m.d(72): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4qprhz4m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    auto result\
    \ = new long[];\n    long i = 0;\n    foreach (long number; numbers)\n    {\n\
    \        result ~= number;\n        if (i < numbers.length)\n        {\n     \
    \       result ~= delimeter;\n        }\n        i++;\n    }\n    return result;\n\
    }\n//3.3.3\nlong[] insert(long[] array, long elem, size_t pos) \n{\n    auto result\
    \ = new long[array.length + 1];\n    for (size_t i = 0; i < pos; i++)\n    {\n\
    \        result[i] = array[i];\n    }\n    result[pos] = elem;\n    for (size_t\
    \ i = pos; i < array.length; i++)\n    {\n        result[i + 1] = array[i];\n\
    \    }\n    return result;\n}\n/*\nInsert element `elem' into ordered array `array'\n\
    \    >>> orderedInsert([], 10L)\n    [10L]\n    >>> orderedInsert([1L, 2L, 5L,\
    \ 6L], 4L)\n    [1L, 2L, 4L, 5L, 6L]\n*/\nlong[] orderedInsert(long[] array, long\
    \ elem) \n{\n    size_t pos = 0;\n    foreach (a; array)\n    {\n        if (a\
    \ > elem)\n        {\n            break;\n        }\n        pos++;\n    }\n \
    \   return insert(array, elem, pos);\n}\n//3.3.4\nlong[] insertAdjacent(long[]\
    \ array, long newElem, bool where) \n{\n    auto result = new long[array.length\
    \ + 1];\n    size_t i = 0;\n    for (size_t j = 0; j < array.length; j++)\n  \
    \  {\n        if (j == where)\n        {\n            result[i] = newElem;\n \
    \           i++;\n        }\n        result[i] = array[j];\n        i++;\n   \
    \ }\n    return result;\n}\n/*\nInsert element `elem' into ordered array `array'\n\
    \    >>> orderedInsert([], 10L)\n\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_bwi_gfi.d(78): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_bwi_gfi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n\t/*\n\t This\
    \ is a very unintuitive way to write the array, but it is the only way to do it\n\
    \t    so that the number of elements in the result is known at compile time\n\t\
    \    and the compiler can generate an error if it is too large.\n\t    We start\
    \ with an array of the same length as the input, filled with the delimeter.\n\t\
    \    Then, we mark every other element as being not initialized.\n\t    Finally,\
    \ we assign the input values to the uninitialized elements.\n\t*/\n\tauto results\
    \ = new long[numbers.length * 2 - 1];\n\tforeach (index, _; numbers)\n\t{\n\t\t\
    // Insert delimeter, skipping over initialized elements\n\t\tresults[index * 2]\
    \ = delimeter;\n\t\t// Insert the number, initializing the uninitialized element\n\
    \t\tresults[index * 2 + 1] = numbers[index];\n\t}\n\treturn results[];\n}\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation
    failed

    ----------------

    ??:? _d_newarrayU [0x42da33]

    ??:? _d_newarrayT [0x4297b8]

    ??:? long[] tmph05welrf.intersperse(long[], long) [0x427e4b]

    ??:? void tmph05welrf.__unittest_L31_C1() [0x427f44]

    ??:? void tmph05welrf.__modtest() [0x428194]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c4f3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b386]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430611]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430ac0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43059d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b35d]

    ??:? runModuleUnitTests [0x42c2c9]

    ??:? void rt.dmain2'
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    auto result\
    \ = [];\n    foreach (n; numbers)\n    {\n        if (result.length)\n       \
    \     result ~= delimeter;\n        result ~= n;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyimgvljh.d(17): Error: cannot append type `long` to type `void[]`

    /tmp/tmpyimgvljh.d(18): Error: cannot append type `long` to type `void[]`

    /tmp/tmpyimgvljh.d(20): Error: cannot implicitly convert expression `result` of
    type `void[]` to `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyimgvljh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    return\
    \ map!(n => [n, delimeter])(numbers)[0 .. $ - 1];\n}\n/*\n Given a list of numbers\
    \ of length n, write a function that returns the sum of all numbers in the list.\n\
    \ For Example:\n     >>> sumAll([1L, 2L, 3L])\n     6L\n     >>> sumAll([])\n\
    \     0L\n*/\nlong sumAll(long[] numbers)\n{\n    return reduce!((a, b) => a +\
    \ b)(0L, numbers);\n}\n/*\n Given a list of numbers of length n, write a function\
    \ that finds the maximum number of the list.\n For Example:\n     >>> maxNum([1L,\
    \ 2L, 3L])\n     3L\n     >>> maxNum([0L, -1L, 3L])\n     3L\n*/\nlong maxNum(long[]\
    \ numbers)\n{\n    return reduce!((a, b) => a > b ? a : b)(numbers[0], numbers[1\
    \ .. $]);\n}\n/*\n Write a function that flattens a 2D array of ints to a 1D array\
    \ of ints.\n For Example:\n     >>> flatten2D([[1, 2], [3, 4]])\n     [1, 2, 3,\
    \ 4]\n     >>> flatten2D([[0, -1], [3, 5]])\n     [0, -1, 3, 5]\n     >>> flatten2D([[],\
    \ [3, 5]])\n     [3, 5]\n*/\nlong[] flatten2D(long[][] numbers)\n{\n    auto flattened\
    \ = map!(x => x)(numbers);\n    return reduce!((a, b) => a ~ b)(flattened[0],\
    \ flattened[1 .. $]);\n}\n/*\n Given a list of numbers of length n, write a function\
    \ that finds the average of all numbers in the list.\n For Example:\n     >>>\
    \ avg([1L, 2L, 3L])\n     2L\n     >>> avg([])\n     0L\n*/\ndouble avg(long[]\
    \ numbers)\n{\n    if (numbers.length == 0)\n        return 0;\n    return sumAll(numbers)\
    \ / numbers.length;\n\nunittest\n{\n    alias candidate = intersperse;\n\n   \
    \ assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L)\
    \ == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) ==\
    \ [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp210_h5km.d(68): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp210_h5km.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    auto r\
    \ = [];\n    long[][] temp = [numbers, replicate(numbers.length, delimeter)];\n\
    \    r = join(temp);\n    r = r[0..$-1];\n    return r;\n}\nunittest\n{\n    alias\
    \ candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfoyvfzhl.d(14): Error: undefined identifier `replicate`

    /tmp/tmpfoyvfzhl.d(15): Error: undefined identifier `join`, did you mean function
    `main`?

    /tmp/tmpfoyvfzhl.d(17): Error: cannot implicitly convert expression `r` of type
    `void[]` to `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfoyvfzhl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0) return numbers;\n    long[] result = new long[(numbers.length - 1) * 2\
    \ + 1];\n    size_t j = 0;\n    foreach (index, value; numbers) {\n        if\
    \ (index != 0) {\n            result[j] = delimeter;\n            j++;\n     \
    \   }\n        result[j] = value;\n        j++;\n    }\n    return result;\n}\n\
    /*\n Return a string representation of numbers\n    >>> show([1, 2, 3])\n    \"\
    [1, 2, 3]\"\n*/\nstring show(long[] numbers) {\n    string result = \"[\";\n \
    \   result ~= intersperse(numbers, \", \").join(\"\");\n    result ~= \"]\";\n\
    \    return result;\n}\n/*\n Return a string representation of a permutation\n\
    \    >>> show([2, 3, 1])\n    \"(3, 4, 2)\"\n*/\nstring show(Permutation p) {\n\
    \    string result = \"(\";\n    result ~= intersperse(p.to, \", \").join(\"\"\
    );\n    result ~= \")\";\n    return result;\n}\n/*\n Return the number of comparisons\
    \ between two values\n    >>> compare(1, 2)\n    -1\n    >>> compare(1, 1)\n \
    \   0\n    >>> compare(2, 1)\n    1\n*/\nlong compare(long a, long b) {\n    if\
    \ (a < b) return -1;\n    if (a > b) return 1;\n    return 0;\n}\n/*\n Return\
    \ a string representation of the comparision result of two values\n    >>> show(compare(1,\
    \ 2))\n    \"LT\"\n    >>> show(compare(1, 1))\n    \"EQ\"\n    >>> show(compare(2,\
    \ 1))\n    \"GT\"\n*/\nstring show(long comp) {\n    if (comp == -1) return \"\
    LT\";\n    if (comp == 0) return \"EQ\";\n    if (comp == 1) return \"GT\";\n\
    \    return \"ERR\";\n}\n/*\n Given a descending array `numbers', return an array\
    \ of integers\n whose values are the indices of numbers\nunittest\n{\n    alias\
    \ candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmploaob2t8.d(77): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmploaob2t8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    auto N\
    \ = numbers.length;\n    if (N == 0) \n    {\n        return numbers;\n    }\n\
    \    else \n    {\n        /*\n            A trivial solution:\n            auto\
    \ result = new long[(N - 1) * 2 + 1];\n            for (int i = 0; i < N; i++)\n\
    \            {\n                result[i * 2] = numbers[i];\n                if\
    \ (i < N - 1)\n                {\n                    result[i * 2 + 1] = delimeter;\n\
    \                }\n            }\n            return result;\n        */\n  \
    \      long[] result = new long[N];\n        result[0] = numbers[0];\n       \
    \ foreach (i, n; numbers[1 .. $]) \n        {\n            result ~= delimeter;\n\
    \            result ~= n;\n        }\n        return result;\n    }\n}\n/*\n \
    \   intersperse(numbers, delimeter) for two-dimensional arrays \n*/\nlong[][]\
    \ intersperse(long[][] numbers, long delimeter) \n{\n    return numbers.map!(nums\
    \ => intersperse(nums, delimeter));\n}\n/*\n    intersperse(numbers, delimeter)\
    \ for tuples\n*/\nTuple!(long[], long[]) intersperse(Tuple!(long[], long[]) numbers,\
    \ long delimeter) \n{\n    return tuple(intersperse(numbers[0], delimeter), intersperse(numbers[1],\
    \ delimeter));\n}\n/*\n    Return cross sum of a given long number\n    >>> crossSum(123L)\n\
    \    6L\n    >>> crossSum(11L)\n    2L\n    >>> crossSum(0L)\n    0L\n*/\nlong\
    \ crossSum(long number) \n{\n    long sum = 0L;\n    while (number != 0L) \n \
    \   {\n        sum += number % 10L;\n        number /= 10L;\n    }\n    return\
    \ sum;\n}\n/*\n    Return cross sum of a given int number\n    >>> crossSum(123)\n\
    \    6\n    >>> crossSum(11)\n    2\n    >>> crossSum(0)\n   \nunittest\n{\n \
    \   alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n \
    \   assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfq6ptbbi.d(76): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfq6ptbbi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    /*\n  \
    \      If there are less than 2 elements in numbers, just return\n        the\
    \ numbers array itself\n    */\n    if (numbers.length < 2) return numbers;\n\
    \    \n    /*\n        this would contain the result\n    */\n    long[] result;\n\
    \    \n    /*\n        This would be the count of delimeters to be inserted\n\
    \    */\n    int delimeterCount = numbers.length - 1;\n    \n    /*\n        Let's\
    \ calculate the size of the result array\n        We need to insert delimeterCount\
    \ number of delimeters\n        between the elements of numbers\n    */\n    result.length\
    \ = delimeterCount + numbers.length;\n    \n    /*\n        We need to loop through\
    \ 'numbers' and alternate between\n        inserting the elements of 'numbers'\
    \ and 'delimeter' into \n        'result'\n    */\n    foreach (i, d; result)\n\
    \    {\n        /*\n            We want to insert an element of 'numbers' at\n\
    \            even indices of 'result'\n        */\n        if (i % 2 == 0) \n\
    \        {\n            d = numbers[i / 2];\n        }\n        else \n      \
    \  {\n            d = delimeter;\n        }\n    }\n    \n    return result;\n\
    }\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw1vfvy1e.d(27): Error: cannot implicitly convert expression `numbers.length
    - 1LU` of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw1vfvy1e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n\tauto count\
    \ = numbers.length;\n\tif (count == 0L)\n\t{\n\t\treturn numbers;\n\t}\n\tlong[]\
    \ result = new long[(2L * count) - 1L];\n\tsize_t current = 0UL;\n\tfor (; current\
    \ < count - 1UL; current++)\n\t{\n\t\tresult[2UL * current] = numbers[current];\n\
    \t\tresult[(2UL * current) + 1UL] = delimeter;\n\t}\n\tresult[2UL * current] =\
    \ numbers[current];\n\treturn result;\n}\n/*\n Concatenate two arrays into a new\
    \ one\n    >>> concat([1L, 2L], [3L, 4L])\n    [1L, 2L, 3L, 4L]\n    \n*/\nlong[]\
    \ concat(long[] arr1, long[] arr2) \n{\n\tauto arr1Size = arr1.length;\n\tif (arr1Size\
    \ == 0L)\n\t{\n\t\treturn arr2;\n\t}\n\tauto arr2Size = arr2.length;\n\tif (arr2Size\
    \ == 0L)\n\t{\n\t\treturn arr1;\n\t}\n\tlong[] result = new long[arr1Size + arr2Size];\n\
    \tsize_t i = 0UL;\n\tfor (; i < arr1Size; i++)\n\t{\n\t\tresult[i] = arr1[i];\n\
    \t}\n\tsize_t j = 0UL;\n\tfor (; j < arr2Size; j++)\n\t{\n\t\tresult[i + j] =\
    \ arr2[j];\n\t}\n\treturn result;\n}\n/*\n Sum of all elements in the array `numbers'\n\
    \    >>> sum([1L, 2L, 3L])\n    6L\n    \n*/\nlong sum(long[] numbers) \n{\n\t\
    auto result = 0L;\n\tfor (auto n : numbers)\n\t{\n\t\tresult += n;\n\t}\n\treturn\
    \ result;\n}\n/*\n Reduce `numbers' using operation `op' and start value `start'\n\
    \    >>> reduce([1L, 2L, 3L], (a, b) => a\nunittest\n{\n    alias candidate =\
    \ intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw91s6164.d(68): Error: no identifier for declarator `n`

    /tmp/tmpw91s6164.d(68): Error: expression expected, not `:`

    /tmp/tmpw91s6164.d(68): Error: found `numbers` when expecting `;` following `for`
    condition

    /tmp/tmpw91s6164.d(74): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw91s6164.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if(numbers.length\
    \ == 0)\n    {\n        return [];\n    }\n    else\n    {\n        long[] result\
    \ = new long[2 * numbers.length - 1];\n        result[0] = numbers[0];\n     \
    \   int i = 1;\n        foreach(idx, number; numbers[1..$])\n        {\n     \
    \       result[i] = delimeter;\n            result[i + 1] = number;\n        \
    \    i += 2;\n        }\n        return result;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    int input_size\
    \ = numbers.length;\n    int output_size = 2 * input_size - 1;\n    long[] output\
    \ = new long[output_size];\n    int output_index = 0;\n    int input_index = 0;\n\
    \    while (input_index < input_size) \n    {\n        output[output_index] =\
    \ numbers[input_index];\n        output_index = output_index + 1;\n        if\
    \ (input_index < input_size - 1) \n        {\n            output[output_index]\
    \ = delimeter;\n            output_index = output_index + 1;\n        }\n    \
    \    input_index = input_index + 1;\n    }\n    return output;\n}\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgwibb7yl.d(13): Error: cannot implicitly convert expression `numbers.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgwibb7yl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ numbers_with_delimeter = new long[2 * numbers.length - 1];\n    foreach (i,\
    \ n; numbers)\n    {\n        numbers_with_delimeter[2 * i] = n;\n        if (i\
    \ < numbers.length - 1)\n            numbers_with_delimeter[2 * i + 1] = delimeter;\n\
    \    }\n    return numbers_with_delimeter;\n}\nunittest\n{\n    alias candidate\
    \ = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation
    failed

    ----------------

    ??:? _d_newarrayU [0x42da2b]

    ??:? _d_newarrayT [0x4297b0]

    ??:? long[] tmp4etqxcwo.intersperse(long[], long) [0x427e4b]

    ??:? void tmp4etqxcwo.__unittest_L22_C1() [0x427f3c]

    ??:? void tmp4etqxcwo.__modtest() [0x42818c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c4eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b37e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430609]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430ab8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430595]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b355]

    ??:? runModuleUnitTests [0x42c2c1]

    ??:? void rt.dmain2'
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    return\
    \ reduce!(a => b => a ~ [delimeter] ~ b)\n            (map!(x => [x]) (numbers));\n\
    }\n \nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdtdw8i9t.d(13): Error: template instance `reduce!((a) => (b) =>
    a ~ [delimeter] ~ b)` template `reduce` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdtdw8i9t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n    {\n        return numbers;\n    }\nunittest\n{\n    alias candidate\
    \ = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbm9_o94f.d(17): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbm9_o94f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n\tif(numbers.length\
    \ > 0)\n\t{\n\t\timmutable uint newSize = 2 * numbers.length - 1;\n\t\timmutable\
    \ uint i;\n\t\timmutable uint j;\n\t\tlong[] newArray = new long[newSize];\n\t\
    \tfor(i = 0, j = 0; i < newSize; i += 2, j++)\n\t\t{\n\t\t\tnewArray[i] = numbers[j];\n\
    \t\t\tif(i < newSize - 1)\n\t\t\t{\n\t\t\t\tnewArray[i + 1] = delimeter;\n\t\t\
    \t}\n\t\t}\n\t\treturn newArray;\n\t}\n\telse\n\t{\n\t\treturn numbers;\n\t}\n\
    }\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb5qk96yz.d(15): Error: cannot implicitly convert expression `2LU
    * numbers.length - 1LU` of type `ulong` to `immutable(uint)`

    /tmp/tmpb5qk96yz.d(19): Error: cannot modify `immutable` expression `i`

    /tmp/tmpb5qk96yz.d(19): Error: cannot modify `immutable` expression `j`

    /tmp/tmpb5qk96yz.d(19): Error: cannot modify `immutable` expression `0u`

    /tmp/tmpb5qk96yz.d(19): Error: cannot modify `immutable` expression `0u`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb5qk96yz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n     auto integers\
    \ = numbers.dup;\n     auto n = integers.length;\n     auto result = new long[n\
    \ * 2 - 1];\n     long offset = 0;\n     while (n-- > 0) \n     {\n         if\
    \ (n != integers.length - 1) \n         {\n             result[offset] = integers[offset];\n\
    \             result[offset + 1] = delimeter;\n             offset += 2;\n   \
    \      } \n         else \n         {\n             result[offset] = integers[offset];\n\
    \         }\n     }\n     return result;\n}\nunittest\n{\n    alias candidate\
    \ = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation
    failed

    ----------------

    ??:? _d_newarrayU [0x42aa43]

    ??:? _d_newarrayT [0x42aae0]

    ??:? long[] tmpwjzcdgup.intersperse(long[], long) [0x42804b]

    ??:? void tmpwjzcdgup.__unittest_L32_C1() [0x4281a4]

    ??:? void tmpwjzcdgup.__modtest() [0x428568]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42e22f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42927a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42afb9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42b048]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42af45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429251]

    ??:? runModuleUnitTests [0x42e005]

    ??:? void rt.dmain2'
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    return\
    \ unzip!(\n        (x,y)\n        {\n            return [x,y];\n        }\n  \
    \  )(\n        map!(\n            (x,y)\n            {\n                return\
    \ tuple(x, delimeter);\n            }\n        )(numbers, tail(numbers))\n   \
    \ );\n}\n/*\nA function that takes a function g,\n  an integer m,\n  and an array\
    \ of integers,\n  and returns an array of integers\n*/\nlong[] map_reduce(alias\
    \ g, long m, long[] numbers) \n{\n    return map!(x => g(m, x))(numbers);\n}\n\
    unittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L)\
    \ == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L,\
    \ 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3wslfaf2.d(33): Error: basic type expected, not `alias`

    /tmp/tmp3wslfaf2.d(33): Error: found `alias` when expecting `)`

    /tmp/tmp3wslfaf2.d(33): Error: semicolon expected following function declaration

    /tmp/tmp3wslfaf2.d(33): Error: no identifier for declarator `g`

    /tmp/tmp3wslfaf2.d(33): Error: declaration expected, not `,`

    /tmp/tmp3wslfaf2.d(36): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3wslfaf2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    immutable\
    \ result = [];\n    foreach (i, n; numbers) \n    {\n        if (i > 0)\n    \
    \        result ~= delimeter;\n        result ~= n;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnpai8kk0.d(17): Error: cannot modify `immutable` expression `result`

    /tmp/tmpnpai8kk0.d(18): Error: cannot modify `immutable` expression `result`

    /tmp/tmpnpai8kk0.d(20): Error: cannot implicitly convert expression `result` of
    type `immutable(void[])` to `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnpai8kk0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ ret;\n    ret.length = (2 * numbers.length) - 1;\n    size_t x = 0;\n    foreach\
    \ (i, n; numbers) {\n        ret[x] = n;\n        x += 1;\n        if (i + 1 <\
    \ numbers.length) {\n            ret[x] = delimeter;\n            x += 1;\n  \
    \      }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation
    failed

    ----------------

    ??:? _d_arraysetlengthT [0x42985a]

    ??:? long[] tmptts5rl6e.intersperse(long[], long) [0x427e5f]

    ??:? void tmptts5rl6e.__unittest_L26_C1() [0x427f4c]

    ??:? void tmptts5rl6e.__modtest() [0x42819c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d56f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c402]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431841]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x431cf0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4317cd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c3d9]

    ??:? runModuleUnitTests [0x42d345]

    ??:? void rt.dmain2._d_run_main(int, char*'
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[][]\
    \ zipped = zip(numbers, repeat(delimeter, numbers.length));\n    long[] result\
    \ = new long[zipped.length * 2 - 1];\n    long index = 0;\n    for (z in zipped)\
    \ \n    {\n        result[index] = z[0];\n        result[index + 1] = z[1];\n\
    \        index += 2;\n    }\n    return result[0 .. $ - 1];\n}\n/*\n Find the\
    \ first index of a value in an array\n    >>> find([] , 3L)\n    -1\n    >>> find([1L,\
    \ 2L, 3L], 2L)\n    1\n    >>> find([1L, 2L, 3L], 3L)\n    2\n    >>> find([1L,\
    \ 2L, 3L], 1L)\n    0\n*/\nlong find(long[] array, long value) \n{\n    long index\
    \ = 0;\n    for (element in array) \n    {\n        if (element == value) \n \
    \       {\n            return index;\n        }\n        index++;\n    }\n   \
    \ return -1;\n}\n/*\n Find the subarray of a given length starting from a given\
    \ position\n    >>> subarray([1L, 2L, 3L, 4L, 5L], 0L, 2L)\n    [1L, 2L]\n   \
    \ >>> subarray([1L, 2L, 3L, 4L, 5L], 1L, 3L)\n    [2L, 3L, 4L]\n    >>> subarray([1L,\
    \ 2L, 3L, 4L, 5L], 2L, 2L)\n    [3L, 4L]\n    >>> subarray([1L, 2L, 3L, 4L, 5L],\
    \ 2L, 4L)\n    [3L, 4L, 5L]\n*/\nlong[] subarray(long[] array, long start, long\
    \ length) \n{\n    return array[start .. start + length];\n}\n/*\n Drops every\
    \ n-th element from a given array\n    >>> dropEveryNth([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L, 9\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8zydjm5j.d(16): Error: found `)` when expecting `;` following statement

    /tmp/tmp8zydjm5j.d(22): Error: found `return` when expecting `;` following `for`
    condition

    /tmp/tmp8zydjm5j.d(22): Error: found `;` when expecting `)`

    /tmp/tmp8zydjm5j.d(23): Error: found `}` instead of statement

    /tmp/tmp8zydjm5j.d(38): Error: found `)` when expecting `;` following statement

    /tmp/tmp8zydjm5j.d(46): Error: found `return` when expecting `;` following `for`
    condition

    /tmp/tmp8zydjm5j.d(46): Error: found `;` when expecting `)`

    /tmp/tmp8zydjm5j.d(47): Error: found `}` instead of statement

    /tmp/tmp8zydjm5j.d(63): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8zydjm5j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0) \n    {\n        return [];\n    }\n    long[] result = new long[2 * numbers.length\
    \ - 1];\n    size_t i = 0;\n    for (; i < numbers.length - 1; i += 1) \n    {\n\
    \        result[2 * i] = numbers[i];\n        result[2 * i + 1] = delimeter;\n\
    \    }\n    result[2 * i] = numbers[i];\n    return result;\n}\n/*\n Swap every\
    \ two consecutive elements of input array `inputArray'\n    >>> swapEveryTwo([1L,\
    \ 2L, 3L, 4L, 5L])\n    [2L, 1L, 4L, 3L, 5L]\n    >>> swapEveryTwo([1L, 2L, 3L,\
    \ 4L])\n    [2L, 1L, 4L, 3L]\n    >>> swapEveryTwo([])\n    []\n    >>> swapEveryTwo([1L])\n\
    \    [1L]\n*/\nlong[] swapEveryTwo(long[] inputArray) \n{\n    if (inputArray.length\
    \ == 0) \n    {\n        return [];\n    }\n    if (inputArray.length == 1) \n\
    \    {\n        return inputArray;\n    }\n    return intersperse(inputArray[1..$],\
    \ inputArray[0]);\n}\n/*\n Multiply numbers from 0 to `n' inclusive modulo `p'\n\
    \    >>> mod_multiply(1L, 10L, 5L)\n    0L\n    >>> mod_multiply(2L, 10L, 5L)\n\
    \    0L\n    >>> mod_multiply(3L, 10L, 5L)\n    0L\n    >>> mod_multiply(4L, 10L,\
    \ 5L)\n    0L\n    >>> mod_multiply(5L, 10L, 5L)\n    0L\n    >>> mod_multiply(6L,\
    \ 10L, 5L)\n    6L\n    >>> mod_multiply(7L, 10L, 5L)\n    4L\n    >>> mod_multiply(8L,\
    \ 10L, 5L)\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5vdl_nny.d(50): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5vdl_nny.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    auto res\
    \ = new long[];\n    foreach (i, x; numbers) \n    {\n        if (i) \n      \
    \  {\n            res ~= delimeter;\n        }\n        res ~= x;\n    }\n   \
    \ return res;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj4_s70tu.d(13): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj4_s70tu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (empty(numbers))\
    \ \n    {\n        return [];\n    } \n    else \n    {\n        auto result =\
    \ [];\n        foreach (i, e; numbers) \n        {\n            if (i > 0) \n\
    \            {\n                result ~= delimeter;\n            }\n        \
    \    result ~= e;\n        }\n        return result;\n    }\n}\n/*\n Split array\
    \ `numbers' into parts of size `chunkSize'\n    >>> splitChunks([], 3L)\n    []\n\
    \    >>> splitChunks([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L], 3L)\n    [[1L, 2L,\
    \ 3L], [4L, 5L, 6L], [7L, 8L, 9L]]\n*/\nlong[][] splitChunks(long[] numbers, long\
    \ chunkSize) \n{\n    assert(chunkSize >= 0L);\n    if (empty(numbers)) \n   \
    \ {\n        return [];\n    } \n    else \n    {\n        auto chunks = [];\n\
    \        auto chunk = [];\n        foreach (e; numbers) \n        {\n        \
    \    chunk ~= e;\n            if (chunk.length == chunkSize) \n            {\n\
    \                chunks ~= chunk;\n                chunk = [];\n            }\n\
    \        }\n        if (!empty(chunk)) \n        {\n            chunks ~= chunk;\n\
    \        }\n        return chunks;\n    }\n}\n/*\n Concatenate arrays `chunks'\
    \ in order using array `delimeters'\n    >>> concatChunks([], [])\n    []\n  \
    \  >>> concatChunks([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]], [4L, 5L, 6L])\n\
    \    [1L, 2L, 3L, 4L, 4L, 5L, 5L, 6L, 6L, 7L, 8L, 9L]\n*/\nlong[] concatChunks(long[][]\
    \ chunks, long[] delimeters) \n{\n    assert(delimeters.length + 1L\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvwkp4b6u.d(75): Error: found `unittest` when expecting `)`

    /tmp/tmpvwkp4b6u.d(76): Error: found `{` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvwkp4b6u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n    in\n    {\n\
    \        assert(numbers.length > 0);\n    }\n    body\n    {\n        long[] result\
    \ = new long[2 * numbers.length - 1];\n        foreach (idx, n; numbers)\n   \
    \     {\n            result[2 * idx] = n;\n            if (idx < numbers.length\
    \ - 1)\n            {\n                result[2 * idx + 1] = delimeter;\n    \
    \        }\n        }\n        return result;\n    }\n    \n/*\n Insert a number\
    \ 'delimeter' between every two consecutive elements of input array `numbers'\n\
    \    >>> intersperse([], 4.0)\n    []\n    >>> intersperse([1.0, 2.0, 3.0], 4.0)\n\
    \    [1.0, 4.0, 2.0, 4.0, 3.0]\n    \n*/\ndouble[] intersperse(double[] numbers,\
    \ double delimeter) \n    in\n    {\n        assert(numbers.length > 0);\n   \
    \ }\n    body\n    {\n        double[] result = new double[2 * numbers.length\
    \ - 1];\n        foreach (idx, n; numbers)\n        {\n            result[2 *\
    \ idx] = n;\n            if (idx < numbers.length - 1)\n            {\n      \
    \          result[2 * idx + 1] = delimeter;\n            }\n        }\n      \
    \  return result;\n    }\nunittest\n{\n    alias candidate = intersperse;\n\n\
    \    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp0vxjmuea.d(14): Assertion failure

    ----------------

    ??:? _d_assertp [0x428dbd]

    ??:? long[] tmp0vxjmuea.intersperse(long[], long) [0x4286ef]

    ??:? void tmp0vxjmuea.__unittest_L56_C1() [0x42891c]

    ??:? void tmp0vxjmuea.__modtest() [0x428b6c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d35b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c1ee]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431479]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x431928]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431405]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c1c5]

    ??:? runModuleUnitTests [0x42d131]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int funct'
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    return\
    \ intersperseImpl(numbers, delimeter, false);\n}\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'.\n If `pad'\
    \ is true and length of `numbers' is odd, then append 'delimeter' at the end of\
    \ `numbers'\n    >>> intersperse([], 4L, true)\n    [4L]\n    >>> intersperse([1L,\
    \ 2L, 3L], 4L, true)\n    [1L, 4L, 2L, 4L, 3L, 4L]\n    >>> intersperse([1L, 2L,\
    \ 3L], 4L, false)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[]\
    \ numbers, long delimeter, bool pad) \n{\n    return intersperseImpl(numbers,\
    \ delimeter, pad);\n}\nlong[] intersperseImpl(long[] numbers, long delimeter,\
    \ bool pad) \n{\n    if(numbers.length == 0) return numbers;\n    if(numbers.length\
    \ == 1) \n    {\n        if(pad) return [numbers[0], delimeter];\n        else\
    \ return numbers;\n    }\n    int count = numbers.length;\n    if(pad) count =\
    \ count % 2 == 0 ? count : count + 1;\n    long[] ret = new long[count];\n   \
    \ for(int i = 0; i < count; i += 2) \n    {\n        ret[i] = numbers[i / 2];\n\
    \        if(i + 1 < count) ret[i + 1] = delimeter;\n    }\n    return ret;\n}\n\
    /*\n Insert an element 'delimeter' between every two consecutive elements of input\
    \ array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L,\
    \ 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nT[] intersperse(T)(T[] numbers,\
    \ T delimeter) \n{\n    return intersperseImpl(numbers, delimeter, false);\n}\n\
    \nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpek99v7d5.d(38): Error: cannot implicitly convert expression `numbers.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpek99v7d5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \nin \n{\n  assert(numbers.length\
    \ > 0);\n}\nout (result)\n{\n  assert(result.length == (numbers.length + numbers.length\
    \ - 1));\n}\ndo\n{\n  long[] result = new long[numbers.length + numbers.length\
    \ - 1];\n  long last = 0;\n  foreach (i, num; numbers)\n  {\n    if (i != 0)\n\
    \    {\n      result[last] = delimeter;\n      last = last + 1;\n    }\n    result[last]\
    \ = num;\n    last = last + 1;\n  }\n  return result;\n}\nunittest\n{\n    alias\
    \ candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpl7vfufth.d(14): Assertion failure

    ----------------

    ??:? _d_assertp [0x428465]

    ??:? long[] tmpl7vfufth.intersperse(long[], long) [0x427e72]

    ??:? void tmpl7vfufth.__unittest_L36_C1() [0x427fc8]

    ??:? void tmpl7vfufth.__modtest() [0x428218]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c627]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b4ba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430745]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430bf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306d1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b491]

    ??:? runModuleUnitTests [0x42c3fd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int funct'
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[0L];\n    for (long n; n = numbers.length; n > 0L) \n    {\n\
    \        switch (n) \n        {\n            case 1L:\n                result\
    \ ~= numbers[0L];\n                break;\n            default:\n            \
    \    result ~= numbers[0L];\n                result ~= delimeter;\n          \
    \      numbers = numbers[1L .. $];\n                break;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n  \
    \  assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L)\
    \ == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) ==\
    \ [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2zlxeeg0.d(14): Error: assignment cannot be used as a condition,
    perhaps `==` was meant?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2zlxeeg0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    int[] numbersAsInts\
    \ = cast(int[])numbers;\n    int[] intsWithDelimeter = new int[2 * numbersAsInts.length\
    \ - 1];\n    int index = 0;\n    foreach (num; numbersAsInts) {\n        intsWithDelimeter[index]\
    \ = num;\n        index += 1;\n        if (index < intsWithDelimeter.length) {\n\
    \            intsWithDelimeter[index] = cast(int)delimeter;\n            index\
    \ += 1;\n        }\n    }\n    return cast(long[])intsWithDelimeter;\n}\n/*\n\
    \    >>> combine(first: [1L, 2L, 3L], second: [4L, 5L, 6L])\n    [1L, 4L, 2L,\
    \ 5L, 3L, 6L]\n*/\nlong[] combine(long[] first, long[] second) {\n    long[] combined\
    \ = new long[first.length + second.length];\n    int i = 0;\n    foreach (f; first)\
    \ {\n        combined[i] = f;\n        i += 1;\n        combined[i] = second[i\
    \ - 1];\n        i += 1;\n    }\n    return combined;\n}\n/*\nReturn all subarrays\
    \ of `arr' of length `k'\n    >>> slice([1L, 2L, 3L, 4L, 5L], 2)\n    [[1L, 2L],\
    \ [2L, 3L], [3L, 4L], [4L, 5L]]\n    >>> slice([1L, 2L, 3L, 4L, 5L], 1)\n    [[1L],\
    \ [2L], [3L], [4L], [5L]]\n    >>> slice([1L, 2L, 3L, 4L, 5L], 4)\n    [[1L, 2L,\
    \ 3L, 4L], [2L, 3L, 4L, 5L]]\n    >>> slice([1L, 2L, 3L, 4L, 5L], 5)\n    [[1L,\
    \ 2L, 3L, 4L, 5L]]\n*/\nlong[][] slice(long[] arr, size_t k) {\n   \nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpob8df2_c.d(54): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpob8df2_c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[2 * numbers.length - 1];\n    foreach (i, el; numbers)\n \
    \   {\n        result[2 * i] = el;\n        if (i < numbers.length - 1)\n    \
    \        result[2 * i + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation
    failed

    ----------------

    ??:? _d_newarrayU [0x42da2b]

    ??:? _d_newarrayT [0x4297b0]

    ??:? long[] tmpcpmgx0ro.intersperse(long[], long) [0x427e4b]

    ??:? void tmpcpmgx0ro.__unittest_L22_C1() [0x427f3c]

    ??:? void tmpcpmgx0ro.__modtest() [0x42818c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c4eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b37e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430609]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430ab8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430595]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b355]

    ??:? runModuleUnitTests [0x42c2c1]

    ??:? void rt.dmain2'
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[][]\
    \ split = chunks(2, numbers);\n    auto result = new long[][](split.length);\n\
    \    foreach (i, part; split)\n    {\n        if (part.length == 1) \n       \
    \ {\n            result[i] = new long[](part.length);\n            result[i][0]\
    \ = part[0];\n        }\n        else \n        {\n            result[i] = new\
    \ long[](part.length + 1);\n            result[i][0] = part[0];\n            result[i][1]\
    \ = delimeter;\n            result[i][2] = part[1];\n        }\n    }\n    return\
    \ concatenate(result);\n}\nunittest\n{\n    alias candidate = intersperse;\n\n\
    \    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpecc_yd_r.d(13): Error: undefined identifier `chunks`

    /tmp/tmpecc_yd_r.d(30): Error: undefined identifier `concatenate`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpecc_yd_r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n  if (numbers.length\
    \ < 2) return numbers;\n  return new long[] {numbers[0], delimeter}\n    ~ intersperse(numbers[1\
    \ .. $], delimeter);\n}\n/*\nCompute the sum of all elements in array `numbers'\n\
    >>> sum([])\n0L\n>>> sum([1L, 2L, 3L])\n6L\n*/\nlong sum(long[] numbers) {\n \
    \ long result = 0L;\n  foreach (elem; numbers)\n    result += elem;\n  return\
    \ result;\n}\n/*\nCompute the average of all elements in array `numbers'\n>>>\
    \ average([])\n0.0\n>>> average([1L, 2L, 3L])\n2.0\n*/\ndouble average(long[]\
    \ numbers) {\n  if (numbers.length == 0) return 0.0;\n  return sum(numbers) /\
    \ cast(double) numbers.length;\n}\n/*\nCompute the standard deviation of all elements\
    \ in array `numbers'\n>>> standardDeviation([])\n0.0\n>>> standardDeviation([1L,\
    \ 2L, 3L])\n1.0\n*/\ndouble standardDeviation(long[] numbers) {\n  if (numbers.length\
    \ == 0) return 0.0;\n  double average_ = average(numbers);\n  return sqrt(sum(map!((a)\
    \ => (a - average_) * (a - average_))(numbers)) / numbers.length);\n}\n/*\nCount\
    \ how many times the element `elem' appears in the array `numbers'\n>>> count([],\
    \ 1L)\n0\n>>> count([1L, 2L, 3L], 1L)\n1\n>>> count([1L, 2L, 3L], 2L)\n1\n>>>\
    \ count([1L, 2L, 3L], 3L)\n1\n>>> count([1L, 2L, 1L, 2L, 1L, 2L], 1L)\n3\n>>>\
    \ count([1L, 2L, 1L, 2L, 1L, 2L], 2L)\n3\n*/\nunittest\n{\n    alias candidate\
    \ = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmb50pw_m.d(14): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmpmb50pw_m.d(14): Error: found `}` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmb50pw_m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n    long[] result;\n\
    \    if (numbers.length == 0)\n    {\n        result = [];\n    }\n    else\n\
    \    {\n        result = [numbers[0]];\n        foreach (int i; 1 .. numbers.length)\n\
    \        {\n            result ~= delimeter;\n            result ~= numbers[i];\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpepi4ne11.d(12): Error: semicolon expected following function declaration

    /tmp/tmpepi4ne11.d(13): Error: declaration expected, not `if`

    /tmp/tmpepi4ne11.d(16): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpepi4ne11.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if(numbers.length\
    \ == 0) \n    {\n        return numbers;\n    }\n    else \n    {\n        long[]\
    \ temp = new long[2 * numbers.length - 1];\n        for(size_t i = 0; i < numbers.length;\
    \ i++) \n        {\n            temp[2 * i] = numbers[i];\n            if(i !=\
    \ numbers.length - 1) \n            {\n                temp[2 * i + 1] = delimeter;\n\
    \            }\n        }\n        return temp;\n    }\n}\n/*\n >>> get_query([1L,\
    \ 2L, 3L, 4L], [0L, 1L, 1L, 0L])\n [2L, 3L]\n */\nlong[] get_query(long[] numbers,\
    \ long[] query) \n{\n    assert(numbers.length == query.length);\n    return numbers.filter!(a\
    \ => query[a] == 1L)();\n}\n/*\n Take distinct elements from the input array `numbers'\n\
    \    >>> distinct([])\n    []\n    >>> distinct([1L, 2L, 3L, 1L, 2L, 3L])\n  \
    \  [1L, 2L, 3L]\n*/\nlong[] distinct(long[] numbers) \n{\n    if(numbers.length\
    \ == 0) \n    {\n        return numbers;\n    }\n    else \n    {\n        return\
    \ numbers.filter!(a => a == 0L || numbers[a - 1L] != numbers[a])();\n    }\n}\n\
    /*\n >>> sum([])\n 0L\n >>> sum([1L, 2L, 3L])\n 6L\n*/\nlong sum(long[] numbers)\
    \ \n{\n    long total = 0L;\n    foreach(n; numbers) \n    {\n        total +=\
    \ n;\n    }\n    return total;\n}\n/*\n >>> product([])\n 1L\n >>> product([1L,\
    \ 2L, 3L])\n 6L\n*/\nlong product(long[] numbers) \n{\n    long total = 1L;\n\
    \    foreach(n; numbers) \n    {\n        total *= n;\n    }\n    return total\n\
    unittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L)\
    \ == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L,\
    \ 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu0ddm60j.d(87): Error: found `unittest` when expecting `;` following
    `return` statement

    /tmp/tmpu0ddm60j.d(95): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu0ddm60j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    auto ret\
    \ = new long[numbers.length * 2 - 1];\n    for (size_t i = 0; i < numbers.length;\
    \ i++)\n    {\n        ret[i * 2] = numbers[i];\n        if (i < numbers.length\
    \ - 1)\n            ret[i * 2 + 1] = delimeter;\n    }\n    return ret;\n}\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation
    failed

    ----------------

    ??:? _d_newarrayU [0x42da33]

    ??:? _d_newarrayT [0x4297b8]

    ??:? long[] tmpo1jfa1jj.intersperse(long[], long) [0x427e4b]

    ??:? void tmpo1jfa1jj.__unittest_L22_C1() [0x427f44]

    ??:? void tmpo1jfa1jj.__modtest() [0x428194]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c4f3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b386]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430611]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430ac0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43059d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b35d]

    ??:? runModuleUnitTests [0x42c2c9]

    ??:? void rt.dmain2'
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[2 * numbers.length - 1];\n    immutable int i_max = numbers.length\
    \ - 1;\n    foreach (immutable int i; 0 .. i_max)\n    {\n        result[2 * i]\
    \ = numbers[i];\n        result[2 * i + 1] = delimeter;\n    }\n    result[$ -\
    \ 1] = numbers[$ - 1];\n    return result;\n}\n/*\n Return a list with first element\
    \ dropped.\n    \n    >>> tail([1L, 2L, 3L])\n    [2L, 3L]\n    >>> tail([2L,\
    \ 3L])\n    [3L]\n    >>> tail([3L])\n    []\n    >>> tail([])\n    []\n*/\nlong[]\
    \ tail(long[] numbers) \n{\n    long[] result = new long[numbers.length - 1];\n\
    \    foreach (immutable int i; 1 .. numbers.length)\n    {\n        result[i -\
    \ 1] = numbers[i];\n    }\n    return result;\n}\n/*\n Return a list with last\
    \ element dropped.\n    \n    >>> init([1L, 2L, 3L])\n    [1L, 2L]\n    >>> init([2L,\
    \ 3L])\n    [2L]\n    >>> init([3L])\n    []\n    >>> init([])\n    []\n*/\nlong[]\
    \ init(long[] numbers) \n{\n    long[] result = new long[numbers.length - 1];\n\
    \    foreach (immutable int i; 0 .. numbers.length - 1)\n    {\n        result[i]\
    \ = numbers[i];\n    }\n    return result;\n}\n/*\n Return a list of numbers.\n\
    \    \n    >>> iota(0L, 3L)\n    [0L, 1L, 2L]\n    >>> iota(1L, 3L)\n    [1L,\
    \ 2L]\n    >>> iota(2L, 3L)\n    [2L]\n    >>> iota(3L, 3L)\n    []\n    >>> iota(4L,\
    \ 3L)\n    []\n*/\nlong[] iota(long start, long count)\nunittest\n{\n    alias\
    \ candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp330kz4lc.d(80): Error: semicolon expected following function declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp330kz4lc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = [];\n    foreach (number; numbers)\n    {\n        result ~= number;\n\
    \        if (number != numbers[$ - 1])\n            result ~= delimeter;\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n\
    \    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpl64q4r_y.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x42842d]

    ??:? void tmpl64q4r_y.__unittest_L22_C1() [0x4280fc]

    ??:? void tmpl64q4r_y.__modtest() [0x4281ac]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ce9b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bd2e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430781]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c30]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43070d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bd05]

    ??:? runModuleUnitTests [0x42cc71]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288f0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    size_t\
    \ length = numbers.length;\n    if (length == 0)\n    {\n        return new long[0];\n\
    \    }\n    size_t newlength = length * 2 - 1;\n    long[] result = new long[newlength];\n\
    \    foreach (immutable i, immutable elem; numbers)\n    {\n        if (i == 0)\n\
    \        {\n            result[i] = elem;\n        }\n        else\n        {\n\
    \            result[2 * i - 1] = delimeter;\n            result[2 * i] = elem;\n\
    \        }\n    }\n    return result;\n}\n/*\n    Computes the average of the\
    \ elements of input array `numbers'\n    >>> average([1L, 2L, 3L])\n    2L\n*/\n\
    long average(long[] numbers) \n{\n    size_t length = numbers.length;\n    if\
    \ (length == 0)\n    {\n        return 0L;\n    }\n    size_t sum = 0L;\n    foreach\
    \ (immutable elem; numbers)\n    {\n        sum += elem;\n    }\n    return sum\
    \ / length;\n}\n/*\n    Computes the median of the elements of input array `numbers'\n\
    \    >>> median([1L, 2L, 3L])\n    2L\n    >>> median([1L, 2L, 3L, 4L])\n    2L\n\
    */\nlong median(long[] numbers) \n{\n    size_t length = numbers.length;\n   \
    \ if (length == 0)\n    {\n        return 0L;\n    }\n    long[] sorted = numbers[0\
    \ .. length];\n    sort(sorted);\n    if (length % 2 == 0)\n    {\n        return\
    \ (sorted[length / 2 - 1] + sorted[length / 2]) / 2L;\n    }\n    else\n    {\n\
    \        return sorted[length / 2];\n    }\n}\n/*\n    Computes the standard deviation\
    \ of the elements of input array `numbers'\n    >>> stddev([1L, 2L, 3L])\n   \
    \ 1L\n*/\nlong stddev(long[] numbers) \n{\n    size_t length\nunittest\n{\n  \
    \  alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n  \
    \  assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1w5y2z24.d(85): Error: found `length` when expecting `;` following
    statement

    /tmp/tmp1w5y2z24.d(86): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1w5y2z24.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0) \n    {\n        return [];\n    }\n    else \n    {\n        return join(map!((x)\
    \ => [x, delimeter])(numbers)[0 .. $ - 1]);\n    }\n}\nunittest\n{\n    alias\
    \ candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2v9fdz3q.d(19): Error: undefined identifier `join`, did you mean
    function `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2v9fdz3q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ res = [];\n    foreach(n; numbers)\n    {\n        if(n == numbers[0]) \n  \
    \      {\n            res ~= n;\n        }\n        else\n        {\n        \
    \    res ~= delimeter;\n            res ~= n;\n        }\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjw2nn8fh.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428455]

    ??:? void tmpjw2nn8fh.__unittest_L28_C1() [0x428124]

    ??:? void tmpjw2nn8fh.__modtest() [0x4281d4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cec3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bd56]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307a9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c58]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430735]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bd2d]

    ??:? runModuleUnitTests [0x42cc99]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428918]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n\tlong[][]\
    \ splitted = split(numbers);\n\tlong[] result = splitted[0];\n\tif (splitted[1].length\
    \ != 0)\n\t{\n\t\tresult ~= delimeter;\n\t\tresult ~= splitted[1];\n\t}\n\treturn\
    \ result;\n}\n \n/*\n    Returns a tuple that contains two arrays.\n        -\
    \ The first element of the result is the first half of the input array\n     \
    \   - The second element of the result is the second half of the input array\n\
    \    For example:\n    >>> split([])\n    ([], [])\n    >>> split([1L, 2L, 3L,\
    \ 4L])\n    ([1L, 2L], [3L, 4L])\n    >>> split([1L, 2L, 3L])\n    ([1L], [2L,\
    \ 3L])\n    >>> split([1L, 2L, 3L, 4L, 5L])\n    ([1L, 2L], [3L, 4L, 5L])\n  \
    \  \n*/\nlong[][] split(long[] numbers) \n{\n\tlong[][] result = new long[2][];\n\
    \tlong middle = (int)floor(numbers.length / 2.0);\n\tresult[0] = numbers[0 ..\
    \ middle];\n\tresult[1] = numbers[middle .. $];\n\treturn result;\n}\n \n/*\n\
    \ Insert a number 'delimeter' between every two consecutive elements of input\
    \ array `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\nunittest\n{\n    alias candidate =\
    \ intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6fg2w2d7.d(41): Error: C style cast illegal, use `cast(int)floor(numbers.length
    / 2.00000)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6fg2w2d7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    return\
    \ iota(2L * numbers.length).map!((n) {\n        return (n % 2L == 0L) ? numbers[n\
    \ / 2L] : delimeter;\n    }).array;\n}\n// Insert a number 'delimeter' between\
    \ every two consecutive elements of input array `numbers'\nlong[] intersperse(long[]\
    \ numbers, long delimeter) \n{\n    if (numbers.length == 0L)\n    {\n       \
    \ return numbers;\n    }\n    return iota(2L * numbers.length - 1L).map!((n) =>\
    \ n % 2L == 0L ? numbers[n / 2L] : delimeter).array;\n}\nlong[] intersperse(long[]\
    \ numbers, long delimeter) \n{\n    if (numbers.length == 0L)\n    {\n       \
    \ return numbers;\n    }\n    return numbers.map!((e, i) => iota(1L, i * 2L +\
    \ 1L, 2L).map!((i) => e).array).joiner.array;\n}\nlong[] intersperse(long[] numbers,\
    \ long delimeter) \n{\n    if (numbers.length == 0L)\n    {\n        return numbers;\n\
    \    }\n    return numbers.map!((e, i) => (iota(1L, i * 2L + 1L, 2L).map!((i)\
    \ => e).array ~ (i < numbers.length - 1L ? [delimeter] : [])).array).joiner.array;\n\
    }\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    return numbers.zip!(iota(numbers.length\
    \ - 1L).map!((i) => delimeter).array).map!((z) => [z[0], z[1]]).joiner.array;\n\
    }\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0L)\n    {\n        return numbers;\n    }\n    return numbers.zip!(iota(numbers.length\
    \ - 1L).map!((i) => delimeter).array).map!((z) => z[0] ~ z[\nunittest\n{\n   \
    \ alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n   \
    \ assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n \
    \   assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyrmbjv_4.d(53): Error: expression expected, not `unittest`

    /tmp/tmpyrmbjv_4.d(54): Error: found `{` when expecting `,`

    /tmp/tmpyrmbjv_4.d(55): Error: expression expected, not `alias`

    /tmp/tmpyrmbjv_4.d(55): Error: found `candidate` when expecting `,`

    /tmp/tmpyrmbjv_4.d(55): Error: expression expected, not `=`

    /tmp/tmpyrmbjv_4.d(55): Error: found `intersperse` when expecting `,`

    /tmp/tmpyrmbjv_4.d(55): Error: expression expected, not `;`

    /tmp/tmpyrmbjv_4.d(57): Error: found `assert` when expecting `,`

    /tmp/tmpyrmbjv_4.d(57): Error: found `;` when expecting `,`

    /tmp/tmpyrmbjv_4.d(58): Error: found `;` when expecting `,`

    /tmp/tmpyrmbjv_4.d(59): Error: found `;` when expecting `,`

    /tmp/tmpyrmbjv_4.d(60): Error: expression expected, not `}`

    /tmp/tmpyrmbjv_4.d(61): Error: found `void` when expecting `,`

    /tmp/tmpyrmbjv_4.d(61): Error: found `{` when expecting `,`

    /tmp/tmpyrmbjv_4.d(61): Error: expression expected, not `}`

    /tmp/tmpyrmbjv_4.d(61): Error: found `End of File` when expecting `,`

    /tmp/tmpyrmbjv_4.'
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[(cast(ulong)numbers.length) * 2 - 1];\n    size_t j = 0;\n\
    \    foreach (i, e; numbers)\n    {\n        result[j] = e;\n        j += 1;\n\
    \        if (i + 1 < numbers.length)\n        {\n            result[j] = delimeter;\n\
    \            j += 1;\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n \
    \   assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation
    failed

    ----------------

    ??:? _d_newarrayU [0x42da2b]

    ??:? _d_newarrayT [0x4297b0]

    ??:? long[] tmpgjm9qftg.intersperse(long[], long) [0x427e4b]

    ??:? void tmpgjm9qftg.__unittest_L27_C1() [0x427f40]

    ??:? void tmpgjm9qftg.__modtest() [0x428190]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c4eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b37e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430609]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430ab8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430595]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b355]

    ??:? runModuleUnitTests [0x42c2c1]

    ??:? void rt.dmain2'
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \nnothrow @safe\
    \ @nogc\n{\n    auto result = new long[](numbers.length * 2 - 1);\n    foreach\
    \ (i, ref v; numbers)\n    {\n        result[i * 2] = v;\n        if (i + 1 <\
    \ numbers.length)\n            result[i * 2 + 1] = delimeter;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkuf7_5ss.d(14): Error: cannot use `new` in `@nogc` function `tmpkuf7_5ss.intersperse`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkuf7_5ss.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n\t{\n\tstatic\
    \ struct Intersperse\n\t\t{\n\t\tpublic:\n\t\t\tIntersperse(long delimeter) {\
    \ this.delimeter = delimeter; }\n\t\t\tIntersperse(ref Intersperse rhs) { this.delimeter\
    \ = rhs.delimeter; }\n\t\t\tauto ref opCall(long num)\n\t\t\t\t{\n\t\t\t\treturn\
    \ tuple(delimeter, num);\n\t\t\t\t}\n\t\tprivate:\n\t\t\tlong delimeter;\n\t\t\
    }\n\tint len_ = numbers.length;\n\treturn (len_ == 0) ? numbers :\n\t\tnumbers.retro.map!Intersperse(delimeter).\n\
    \t\t\tarray.array[].filter!(a => a[0] != 0L).\n\t\t\t\tmap!(a => a[1]).array;\n\
    \t}\n/*\n Same as above but for string.\n    >>> intersperse([], \"z\")\n    []\n\
    \    >>> intersperse([\"a\", \"b\", \"c\"], \"z\")\n    [\"a\", \"z\", \"b\",\
    \ \"z\", \"c\"]\n*/\nstring[] intersperse(string[] characters, string delimeter)\
    \ \n\t{\n\tstatic struct Intersperse\n\t\t{\n\t\tpublic:\n\t\t\tIntersperse(string\
    \ delimeter) { this.delimeter = delimeter; }\n\t\t\tIntersperse(ref Intersperse\
    \ rhs) { this.delimeter = rhs.delimeter; }\n\t\t\tauto ref opCall(string s)\n\t\
    \t\t\t{\n\t\t\t\treturn tuple(delimeter, s);\n\t\t\t\t}\n\t\tprivate:\n\t\t\t\
    string delimeter;\n\t\t}\n\tint len_ = characters.length;\n\treturn (len_ == 0)\
    \ ? characters :\n\t\tcharacters.retro.map!Intersperse(delimeter).\n\t\t\tarray.array[].filter!(a\
    \ => a[0] != \"\").\n\t\t\t\tmap!(a => a[1]).array;\n\t}\nunittest\n{\n    alias\
    \ candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf27bo5_d.d(16): Error: function declaration without return type.
    (Note that constructors are always named `this`)

    /tmp/tmpf27bo5_d.d(16): Error: no identifier for declarator `Intersperse(long
    delimeter)`

    /tmp/tmpf27bo5_d.d(17): Error: function declaration without return type. (Note
    that constructors are always named `this`)

    /tmp/tmpf27bo5_d.d(17): Error: no identifier for declarator `Intersperse(ref Intersperse
    rhs)`

    /tmp/tmpf27bo5_d.d(43): Error: function declaration without return type. (Note
    that constructors are always named `this`)

    /tmp/tmpf27bo5_d.d(43): Error: no identifier for declarator `Intersperse(string
    delimeter)`

    /tmp/tmpf27bo5_d.d(44): Error: function declaration without return type. (Note
    that constructors are always named `this`)

    /tmp/tmpf27bo5_d.d(44): Error: no identifier for declarator `Intersperse(ref Intersperse
    rhs)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf27bo5_d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[$];\n    if(numbers.length > 0) \n    {\n        result ~=\
    \ numbers[0];\n        if(numbers.length > 1) \n        {\n            foreach(int\
    \ i; 1 .. numbers.length) \n            {\n                result ~= delimeter;\n\
    \                result ~= numbers[i];\n            }\n        }\n    }\n    return\
    \ result;\n}\n/*\n  Insert a number 'delimeter' after every 'segment' elements\
    \ of input array `numbers'\n    >>> part(4L, [1L, 2L, 3L, 4L, 5L])\n    [1L, 2L,\
    \ 3L, 4L, 4L, 5L]\n    >>> part(4L, [1L, 2L, 3L, 4L, 5L, 6L])\n    [1L, 2L, 3L,\
    \ 4L, 4L, 5L, 6L]\n    >>> part(4L, [1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    [1L, 2L,\
    \ 3L, 4L, 4L, 5L, 6L, 7L]\n    >>> part(4L, [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L])\n\
    \    [1L, 2L, 3L, 4L, 4L, 5L, 6L, 7L, 8L]\n    >>> part(4L, [1L, 2L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L])\n    [1L, 2L, 3L, 4L, 4L, 5L, 6L, 7L, 8L, 9L]\n    >>> part(4L,\
    \ [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L])\n    [1L, 2L, 3L, 4L, 4L, 5L, 6L,\
    \ 7L, 8L, 9L, 10L]\n    >>> part(2L, [1L, 2L, 3L, 4L, 5L,\nunittest\n{\n    alias\
    \ candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9dcgnh4v.d(28): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9dcgnh4v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163953
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ <= 1)\n    {\n\treturn numbers;\n    }\n    else\n    {\n\tlong[] result = new\
    \ long[numbers.length * 2 - 1];\n\tfor (int i = 0; i < numbers.length; i++)\n\t\
    {\n\t    result[i * 2] = numbers[i];\n\t    if (i < numbers.length - 1)\n\t  \
    \  {\n\t\tresult[i * 2 + 1] = delimeter;\n\t    }\n\t}\n\treturn result;\n   \
    \ }\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    auto len\
    \ = numbers.length;\n    if (len == 0)\n    {\n        return numbers;\n    }\n\
    unittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L)\
    \ == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L,\
    \ 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpskp79xbb.d(18): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpskp79xbb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \nin {\n    assert(numbers.length\
    \ >= 0);\n}\nout (result) {\n    assert(result.length == 2 * numbers.length -\
    \ 1);\n    for (int i = 0; i < numbers.length; i++) {\n        if (i == 0) {\n\
    \            assert(result[i] == numbers[i]);\n        } else {\n            assert(result[2\
    \ * i - 1] == delimeter);\n            assert(result[2 * i] == numbers[i]);\n\
    \        }\n    }\n}\n{\n    if (numbers.length == 0) {\n        return [];\n\
    \    } else {\n        long[] result = new long[2 * numbers.length - 1];\n   \
    \     result[0] = numbers[0];\n        for (int i = 1; i < numbers.length; i++)\
    \ {\n            result[2 * i - 1] = delimeter;\n            result[2 * i] = numbers[i];\n\
    \        }\n        return result;\n    }\n}\n/*\n Calculate the maximum element\
    \ of array `numbers'\n    >>> maximum([1L, 2L, 3L])\n    3L\n    >>> maximum([3L,\
    \ 2L, 1L])\n    3L\n    >>> maximum([])\n    0L\n*/\nlong maximum(long[] numbers)\
    \ \nin {\n    assert(numbers.length >= 0);\n}\nout (result) {\n    for (int i\
    \ = 0; i < numbers.length; i++) {\n        assert(result >= numbers[i]);\n   \
    \ }\n}\n{\n    if (numbers.length == 0) {\n        return 0L;\n    } else {\n\
    \        long result = numbers[0];\n        for (int i = 1; i < numbers.length;\
    \ i++) {\n            if (numbers[i] > result) {\n                result = numbers[i];\n\
    \            }\n        }\n        return result;\n    }\n}\n/*\n Fill in array\
    \ `result' with the following values:\n    - The first element `result[0]' is\
    \ the maximum element of `numbers'\n    - The second element `result[1]' is the\
    \ product of the elements of `numbers'\n    - The third element `result[2\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2io0ao33.d(26): Error: missing `do { ... }` after `in` or `out`

    /tmp/tmp2io0ao33.d(57): Error: missing `do { ... }` after `in` or `out`

    /tmp/tmp2io0ao33.d(70): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2io0ao33.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long count\
    \ = 0L;\n    long length = numbers.length;\n    count = length * 2L - 1L;\n  \
    \  auto ret = new long[](count);\n    foreach (index, element; numbers) \n   \
    \ {\n        ret[index * 2L] = element;\n        if (index * 2L + 1L < count)\
    \ \n        {\n            ret[index * 2L + 1L] = delimeter;\n        }\n    }\n\
    \    return ret;\n}\n/*\n Prefixes of input array `numbers'\n    >>> prefixes([])\n\
    \    []\n    >>> prefixes([1L, 2L, 3L])\n    [[], [1L], [1L, 2L], [1L, 2L, 3L]]\n\
    */\nlong[][] prefixes(long[] numbers) \n{\n    long count = 0L;\n    long length\
    \ = numbers.length;\n    count = length + 1L;\n    auto ret = new long[][](count);\n\
    \    foreach (index; 0L .. count) \n    {\n        ret[index] = numbers[0L ..\
    \ index];\n    }\n    return ret;\n}\n/*\n Divide the input array `numbers' into\
    \ chunks of size `size'\n    >>> chunks([1L, 2L, 3L, 4L, 5L, 6L], 2L)\n    [[1L,\
    \ 2L], [3L, 4L], [5L, 6L]]\n    >>> chunks([1L, 2L, 3L, 4L, 5L, 6L], 3L)\n   \
    \ [[1L, 2L, 3L], [4L, 5L, 6L]]\n*/\nlong[][] chunks(long[] numbers, long size)\
    \ \n{\n    long length = numbers.length;\n    long count = divCeil(length, size);\n\
    \    auto ret = new long[][](count);\n    foreach (i; 0L .. count) \n    {\n \
    \       ret[i] = numbers[i * size .. (i + 1L) * size];\n    }\n    return ret;\n\
    }\n/*\n  Pad the input array `numbers' with 'pad' to make its length equal to\n\
    unittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L)\
    \ == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L,\
    \ 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw8fbz6iw.d(64): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw8fbz6iw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    auto output\
    \ = [];\n    if (numbers.length == 0) \n    {\n        return output;\n    }\n\
    \    output.append(numbers[0]);\n    for (int i = 1; i < numbers.length; i++)\
    \ \n    {\n        output.append(delimeter);\n        output.append(numbers[i]);\n\
    \    }\n    return output;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbai5m61r.d(18): Error: no property `append` for type `void[]`

    /tmp/tmpbai5m61r.d(21): Error: no property `append` for type `void[]`

    /tmp/tmpbai5m61r.d(22): Error: no property `append` for type `void[]`

    /tmp/tmpbai5m61r.d(16): Error: cannot implicitly convert expression `output` of
    type `void[]` to `long[]`

    /tmp/tmpbai5m61r.d(24): Error: cannot implicitly convert expression `output` of
    type `void[]` to `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbai5m61r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ res;\n    foreach (idx, e; numbers) \n    {\n        if (idx == 0) \n      \
    \  {\n            res ~= e;\n        } \n        else \n        {\n          \
    \  res ~= delimeter;\n            res ~= e;\n        }\n    }\n    return res;\n\
    }\n/*\n Compute powers of two.\n    >>> take(powersOfTwo(2L), 3)\n    [1L, 2L,\
    \ 4L]\n*/\nauto powersOfTwo(long a) \n{\n    struct result \n    {\n        long\
    \ value;\n        bool empty() { return value < 0; }\n        long front() { return\
    \ value; }\n        void popFront() { value = -value; }\n    }\n    long value\
    \ = a;\n    return result(value);\n}\n/*\n Compute powers of two.\n    >>> take(powersOfTwo2(2L),\
    \ 3)\n    [1L, 2L, 4L]\n*/\nstruct PowersOfTwo {\n    long value;\n    static\
    \ if (isNarrowString!(long)) \n    {\n        @property bool empty() { return\
    \ value < 0; }\n        @property long front() { return value; }\n        void\
    \ popFront() { value = -value; }\n    }\n    else {\n        @property bool empty()\
    \ { return false; }\n        @property long front() { return value; }\n      \
    \  void popFront() { value = -value; }\n    }\n}\nPowersOfTwo powersOfTwo2(long\
    \ a) { return PowersOfTwo(a); }\n/*\n Create a range of numbers.\n    >>> range(5L)\n\
    \    [0L, 1L, 2L, 3L, 4L]\n    >>> range(0L, 5L)\n    [0L, 1L, 2L, 3L, 4L]\n \
    \   >>> range(0L, 10L, 2L)\n    [0L, 2L, 4L, 6L, 8L]\n    >>> range(0L, -10L,\
    \ -2L)\n    [0L, -2L, -4L, -6L, -8L]\n    >>>\nunittest\n{\n    alias candidate\
    \ = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp52_l6qre.d(65): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp52_l6qre.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if(numbers.length\
    \ == 0)\n        return numbers;\n    return map!((x) => (x, delimeter), numbers).array;\n\
    }\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwa4czul9.d(15): Error: template instance `map!((x) => x , delimeter,
    numbers)` template `map` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwa4czul9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163953
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0) return [];\n    if (numbers.length == 1) return numbers;\n    else\n \
    \   {\n        long[] result = [numbers[0]];\n        foreach (i, num; numbers[1..$])\n\
    \        {\n            result ~= delimeter;\n            result ~= num;\n   \
    \     }\n        return result;\n    }\n}\nunittest\n{\n    alias candidate =\
    \ intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163953
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    typeof(numbers)\
    \ result;\n    foreach (idx, elem; numbers) \n    {\n        result ~= elem;\n\
    \        if (idx < numbers.length - 1)\n            result ~= delimeter;\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n\
    \    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163953
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n\tif (numbers.length\
    \ < 2) return numbers;\n\tlong[] result = new long[numbers.length * 2 - 1];\n\t\
    foreach (i, number; numbers) \n\t{\n\t\tif (i > 0) result[i * 2 - 1] = delimeter;\n\
    \t\tresult[i * 2] = number;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias\
    \ candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \nin\n{\n    assert(numbers.length\
    \ >= 0);\n}\nbody\n{\n    if (numbers.length <= 1) \n    {\n        return numbers;\n\
    \    } \n    else \n    {\n        long[] result = new long[2 * numbers.length\
    \ - 1];\n        foreach (int i, e; numbers) \n        {\n            if (i ==\
    \ 0) \n            {\n                result[0] = e;\n            } \n       \
    \     else \n            {\n                result[2 * i - 1] = delimeter;\n \
    \               result[2 * i] = e;\n            }\n        }\n        return result;\n\
    \    }\n}\n// Take a list of objects and a mapper function. \n// Invoke the mapper\
    \ function on every element of the input list, and return the list of results.\n\
    // ---\n// Assume that the mapper function always returns a `long'.\nlong[] mapLong(Object[]\
    \ list, alias fun)(Object obj) \nin\n{\n    assert(list.length >= 0);\n}\nbody\n\
    {\n    long[] result = new long[list.length];\n    foreach (int i, e; list) \n\
    \    {\n        result[i] = fun(e);\n    }\n    return result;\n}\n// Take a list\
    \ of objects and a mapper function. \n// Invoke the mapper function on every element\
    \ of the input list, and return the list of results.\n// ---\n// Assume that the\
    \ mapper function always returns a `long'.\nT[] map[T](Object[] list, alias fun)(Object\
    \ obj) \nin\n{\n    assert(list.length >= 0);\n}\nbody\n{\n    T[] result = new\
    \ T[list.length];\n    foreach (int i, e; list) \n    {\n        result[i] = fun(e);\n\
    \    }\n    return result;\n}\n// Take a list of objects and a mapper function.\
    \ \n// Invoke the mapper function on every element of the input list, and return\
    \ the list of results.\n// ---\n// Assume that the mapper function always returns\
    \ a `long'.\nT[] map[T](long[] list, alias fun)(\nunittest\n{\n    alias candidate\
    \ = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp30ov1qbt.d(62): Deprecation: instead of C-style syntax, use D-style
    syntax `T[](Object obj)[T] map`

    /tmp/tmp30ov1qbt.d(63): Error: semicolon expected, not `in`

    /tmp/tmp30ov1qbt.d(63): Error: declaration expected, not `in`

    /tmp/tmp30ov1qbt.d(66): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp30ov1qbt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    bool even\
    \ = true;\n    ResultType!(long[], long[]) result;\n    foreach (n; numbers) \n\
    \    {\n        if (even) \n        {\n            result = result.push(n);\n\
    \        } \n        else \n        {\n            result = result.push(delimeter).push(n);\n\
    \        }\n        even = !even;\n    }\n    return result.extract();\n}\n/*\n\
    \    >>> intersperse2([], 4L)\n    []\n    >>> intersperse2([1L, 2L, 3L], 4L)\n\
    \    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse2(long[] numbers, long delimeter)\
    \ \n{\n    return insert(numbers, delimeter, 1 .. 2 * numbers.length - 1);\n}\n\
    long[] insert(long[] source, long elt, size_t[] idxs) \n{\n    size_t srcLen =\
    \ source.length;\n    size_t[] idxs0 = idxs.filter!(i => i < srcLen);\n    size_t[]\
    \ idxs1 = idxs.filter!(i => i >= srcLen);\n    ResultType!(long[], long[]) result;\n\
    \    foreach (idx; idxs0) \n    {\n        result = result.push(source[idx]);\n\
    \        result = result.push(elt);\n    }\n    foreach (idx; idxs1) \n    {\n\
    \        result = result.push(source[idx]);\n    }\n    return result.extract();\n\
    }\n/*\n    >>> intersperse2([], 4L)\n    []\n    >>> intersperse2([1L, 2L, 3L],\
    \ 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse3(long[] numbers, long\
    \ delimeter) \n{\n    size_t[] idxs = 1 .. 2 * numbers.length - 1;\n    long[]\
    \ result = new long[2 * numbers.length - 1];\n    foreach (i; idxs) \n    {\n\
    \        result\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcus8xpsw.d(37): Error: found `..` when expecting `,`

    /tmp/tmpcus8xpsw.d(64): Error: semicolon expected, not `..`

    /tmp/tmpcus8xpsw.d(64): Error: found `..` instead of statement

    /tmp/tmpcus8xpsw.d(69): Error: found `unittest` when expecting `;` following statement

    /tmp/tmpcus8xpsw.d(77): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpcus8xpsw.d(77): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcus8xpsw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if(numbers.length\
    \ <= 1L) return numbers;\n    Result!(long[]) temp;\n    auto result = appender!(long[])(temp);\n\
    \    foreach(i, number; numbers)\n    {\n        if(i != 0L)\n        {\n    \
    \        result.put(delimeter);\n        }\n        result.put(number);\n    }\n\
    \    return temp.data;\n}\n/*\n    >>> parseConfigFile(\"a:\\n b:\\n  c\\n  d\\\
    n e:\\n  f\\n  g\")\n    [\"a\": [\"b\": [\"c\", \"d\"]], \"e\": [\"f\", \"g\"\
    ]]\n*/\nConfigFile parseConfigFile(string input)\n{\n    auto lines = split(input,\
    \ \"\\n\");\n    ConfigFile config;\n    foreach(i, line; lines)\n    {\n    \
    \    auto line = strip(line);\n        if(line.empty) continue;\n        if(line[0]\
    \ == '#') continue;\n        auto indentation = count(line, \" \");\n        if(indentation\
    \ % 2 != 0)\n        {\n            throw new Exception(\"unexpected indentation\"\
    );\n        }\n        if(indentation == 0)\n        {\n            auto parts\
    \ = split(line, \":\");\n            if(parts.length != 2)\n            {\n  \
    \              throw new Exception(\"unexpected line format\");\n            }\n\
    \            config[parts[0]] = [];\n        }\n        else\n        {\n    \
    \        config[config.keys[$ - 1]].push(strip(strip(line), \" \"));\n       \
    \ }\n    }\n    return config;\n}\n/*\n    >>> parseCommandLine(\"foo bar baz\"\
    , [\"foo\", \"--bar\", \"baz\"])\n    [\"foo\", \"--bar\", \"baz\"]\n    >>> parseCommandLine(\"\
    foo bar baz\", [\"foo\", \"--bar\", \"baz\", \"--test\"])\n    [\"foo\", \"--bar\"\
    , \"baz\", \"--test\"]\n    >>> parseCommandLine(\"foo bar baz\", [\"foo\", \"\
    --bar\", \"baz\", \"--test\", \"test2\"])\n    [\"foo\", \"--bar\", \"\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf2_o0a7z.d(60): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf2_o0a7z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    if (numbers.length > 0) \n \
    \   {\n        result[0] = numbers[0];\n        for (long i = 1; i < numbers.length;\
    \ i++) \n        {\n            result[2 * i - 1] = delimeter;\n            result[2\
    \ * i] = numbers[i];\n        }\n    }\n    return result;\n}\n/*\n Insert a number\
    \ 'delimeter' between every two consecutive elements of input array `numbers'\n\
    \    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n\
    \    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter)\
    \ \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    if (numbers.length\
    \ > 0) \n    {\n        result[0] = numbers[0];\n        for (long i = 1; i <\
    \ numbers.length; i++) \n        {\n            result[2 * i - 1] = delimeter;\n\
    \            result[2 * i] = numbers[i];\n        }\n    }\n    return result;\n\
    }\n/*\n Insert a number 'delimeter' between every two consecutive elements of\
    \ input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L,\
    \ 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[]\
    \ numbers, long delimeter) \n{\n    long[] result = new long[numbers.length *\
    \ 2 - 1];\n    if (numbers.length > 0) \n    {\n        result[0] = numbers[0];\n\
    \        for (long i = 1; i < numbers.length; i++) \n        {\n            result[2\
    \ * i - 1] = delimeter;\n            result[2 * i] = numbers[i];\n        }\n\
    \    }\n    return result;\n}\n/*\n Insert a\nunittest\n{\n    alias candidate\
    \ = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe8kn7ub9.d(69): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe8kn7ub9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    return\
    \ $arr.moveFront(numbers).intersperse(delimeter).array;\n}\nunittest\n{\n    alias\
    \ candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp84rk7uo7.d(13): Error: `$` is valid only inside [] of index or
    slice

    /tmp/tmp84rk7uo7.d(13): Error: found `arr` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp84rk7uo7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \nin {\n  foreach(i,\
    \ number; numbers)\n  {\n    assert(number > 0);\n  }\n}\nout (result) {\n  int\
    \ i;\n  for (i = 0; i < (numbers.length - 1) * 2; i += 2) {\n    assert(result[i]\
    \ == numbers[i / 2]);\n    assert(result[i + 1] == delimeter);\n  }\n  if (numbers.length\
    \ > 0) {\n    assert(result[i] == numbers[i / 2]);\n  }\n}\n{\n  int len;\n  foreach(j,\
    \ number; numbers)\n  {\n    len++;\n  }\n  long[] result = new long[len * 2 -\
    \ 1];\n  int i = 0;\n  int j = 0;\n  while (i < numbers.length && j < len * 2\
    \ - 1) {\n    result[j] = numbers[i];\n    j += 1;\n    result[j] = delimeter;\n\
    \    j += 1;\n    i += 1;\n  }\n  if (i < numbers.length) {\n    result[j] = numbers[i];\n\
    \  }\n  return result;\n}\n/*\n Insert a number 'delimeter' between every two\
    \ consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n\
    \    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n   \
    \ \n*/\nlong[] intersperse_mut(long[] numbers, long delimeter) \nin {\n  foreach(i,\
    \ number; numbers)\n  {\n    assert(number > 0);\n  }\n}\nout (result) {\n  int\
    \ i;\n  for (i = 0; i < (numbers.length - 1) * 2; i += 2) {\n    assert(result[i]\
    \ == numbers[i / 2]);\n    assert(result[i + 1] == delimeter);\n  }\n  if (numbers.length\
    \ > 0) {\n    assert(result[i] == numbers[i / 2]);\n  }\n}\n{\n  int\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdlmf8_zv.d(28): Error: missing `do { ... }` after `in` or `out`

    /tmp/tmpdlmf8_zv.d(74): Error: missing `do { ... }` after `in` or `out`

    /tmp/tmpdlmf8_zv.d(76): Error: no identifier for declarator `int`

    /tmp/tmpdlmf8_zv.d(76): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdlmf8_zv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n  if (numbers.length\
    \ == 0) \n  {\n    return [];\n  }\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzcly6vom.d(17): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzcly6vom.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    int n =\
    \ numbers.length;\n    if (n == 0)\n    {\n        return numbers;\n    }\n  \
    \  return n > 1 ? [numbers[0L]] ~ delimeter ~ intersperse(numbers[1L .. $], delimeter)\
    \ : numbers;\n}\n/*\n  Convert input array `numbers' to a string, where every\
    \ two elements are separated by `delimeter'\n  >>> join([], \"|\")\n  \"\"\n \
    \ >>> join([1L, 2L, 3L], \"|\")\n  \"1|2|3\"\n*/\nstring join(long[] numbers,\
    \ string delimeter) \n{\n    return numbers.length == 0 ? \"\" : foldl((x, s)\
    \ => intersperse([x, s], delimeter), numbers);\n}\n/*\n  Returns the longest increasing\
    \ sub-sequence from the input array `numbers'\n  The time complexity of this algorithm\
    \ is O(n^2)\n    >>> longestIncreasingSubsequence([])\n    []\n    >>> longestIncreasingSubsequence([2L,\
    \ 1L, 5L, 3L, 6L, 4L, 8L, 9L, 7L])\n    [1L, 3L, 4L, 7L]\n*/\nlong[] longestIncreasingSubsequence(long[]\
    \ numbers) \n{\n    long n = numbers.length;\n    if (n == 0)\n    {\n       \
    \ return numbers;\n    }\n    long[] best = [1L];\n    foreach (i; 0 .. n)\n \
    \   {\n        long[] longest = [1L];\n        foreach (j; 0 .. i)\n        {\n\
    \            if (numbers[j] < numbers[i])\n            {\n                longest\
    \ ~= longest[j] + 1L;\n            }\n        }\n        best ~= longest[$ - 1L];\n\
    \    }\n    long lis = best[$ - 1L];\n    long[] solution = [numbers[$ - 1L]];\n\
    \    for (long i = n - 1L; i >= 0; i--)\n    {\n        if (best[i] == lis &&\
    \ (solution.length == 0 || numbers[i] < solution[$ - 1L]))\n       \nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvx9bjcsd.d(65): Error: found `unittest` instead of statement

    /tmp/tmpvx9bjcsd.d(73): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvx9bjcsd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    import\
    \ std.algorithm.iteration;\n    import std.range;\n    import std.traits;\n  \
    \  return numbers.map!(x => delimeter ~ x).tail;\n}\nunittest\n{\n    alias candidate\
    \ = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9sbaz7xx.d(16): Error: incompatible types for `(delimeter) ~ (x)`:
    both operands are of type `long`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/algorithm/iteration.d(499):        instantiated
    from here: `MapResult!(__lambda3, long[])`

    /tmp/tmp9sbaz7xx.d(16):        instantiated from here: `map!(long[])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9sbaz7xx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \nin {\n    assert(numbers.length\
    \ >= 0);\n}\nout (result) {\n    assert(result.length == 2 * numbers.length -\
    \ 1 || result.length == 0);\n    assert(forall(int i; (0 <= i && i < numbers.length)\
    \ ==> result[2 * i] == numbers[i]));\n    assert(forall(int i; (0 <= i && i <\
    \ numbers.length - 1) ==> result[2 * i + 1] == delimeter));\n}\n{\n    if (numbers.length\
    \ == 0) {\n        return [];\n    } else {\n        long[] result = new long[2\
    \ * numbers.length - 1];\n        int i = 0;\n        while (i < numbers.length\
    \ - 1)\n            unique {\n                invariant 0 <= i && i < numbers.length\
    \ - 1;\n                invariant 2 * i + 1 < result.length;\n               \
    \ invariant forall(int j; (0 <= j && j < i) ==> result[2 * j] == numbers[j]);\n\
    \                invariant forall(int j; (0 <= j && j < i) ==> result[2 * j +\
    \ 1] == delimeter);\n            }\n        {\n            result[2 * i] = numbers[i];\n\
    \            result[2 * i + 1] = delimeter;\n            i = i + 1;\n        }\n\
    \        result[2 * i] = numbers[i];\n        return result;\n    }\n}\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg2m_pu77.d(17): Error: found `i` when expecting `.` following int

    /tmp/tmpg2m_pu77.d(17): Error: found `;` when expecting identifier following `int`.

    /tmp/tmpg2m_pu77.d(17): Error: expression expected, not `>`

    /tmp/tmpg2m_pu77.d(17): Error: found `result` when expecting `,`

    /tmp/tmpg2m_pu77.d(18): Error: found `i` when expecting `.` following int

    /tmp/tmpg2m_pu77.d(18): Error: found `;` when expecting identifier following `int`.

    /tmp/tmpg2m_pu77.d(18): Error: expression expected, not `>`

    /tmp/tmpg2m_pu77.d(18): Error: found `result` when expecting `,`

    /tmp/tmpg2m_pu77.d(20): Error: missing `do { ... }` after `in` or `out`

    /tmp/tmpg2m_pu77.d(27): Error: found `{` when expecting `;` following statement

    /tmp/tmpg2m_pu77.d(28): Error: found `invariant` instead of statement

    /tmp/tmpg2m_pu77.d(29): Error: found `invariant` instead of statement

    /tmp/tmpg2m_pu77.d(30): Error: found `invariant` instead of statement

    /tmp/tmpg2m_pu77.d(30): Error: expression expected, not `>`

    /tmp/tmpg2m_pu77.d(30): Error: found'
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n\t@safe pure nothrow\
    \ \n{\n    if (numbers.length == 0)\n        return numbers;\n    else\n    {\n\
    \        // We can't just prepend 'delimeter' because that would result in double\
    \ \n        // delimeter at the beginning of the array\n        long[] result\
    \ = new long[2 * numbers.length - 1];\n        result[0] = numbers[0];\n     \
    \   foreach (i, value; numbers[1 .. $])\n        {\n            result[2 * i]\
    \ = delimeter;\n            result[2 * i + 1] = value;\n        }\n        return\
    \ result;\n    }\n}\n/*\nFlatten an array of arrays:\nunittest\n{\n    alias candidate\
    \ = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqsefuml1.d(30): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqsefuml1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[2 * numbers.length - 1];\n    if(numbers.length == 0) \n \
    \   {\n        return numbers;\n    }\n    else \n    {\n        result[0] = numbers[0];\n\
    \        foreach(size_t i, n; iota(numbers.length)) \n        {\n            if(i\
    \ != 0) \n            {\n                result[n * 2 - 1] = delimeter;\n    \
    \            result[n * 2] = numbers[i];\n            }\n        }\n        return\
    \ result;\n    }\n}\n/*\n Insert a number 'delimeter' between every two consecutive\
    \ elements of input array `numbers'\n    >>> intersperse([], 1.1)\n    []\n  \
    \  >>> intersperse([1.1, 2.2, 3.3], 4.4)\n    [1.1, 4.4, 2.2, 4.4, 3.3]\n*/\n\
    double[] intersperse(double[] numbers, double delimeter) \n{\n    double[] result\
    \ = new double[2 * numbers.length - 1];\n    if(numbers.length == 0) \n    {\n\
    \        return numbers;\n    }\n    else \n    {\n        result[0] = numbers[0];\n\
    \        foreach(size_t i, n; iota(numbers.length)) \n        {\n            if(i\
    \ != 0) \n            {\n                result[n * 2 - 1] = delimeter;\n    \
    \            result[n * 2] = numbers[i];\n            }\n        }\n        return\
    \ result;\n    }\n}\n/*\n Insert an element 'delimeter' between every two consecutive\
    \ elements of input array `numbers'\n    >>> intersperse([], \"a\")\n    []\n\
    \    >>> intersperse([\"a\", \"b\", \"c\"], \"d\")\n    [\"a\", \"d\", \"b\",\
    \ \"d\", \"c\"]\n*/\nstring[] intersperse(string[] numbers, string delimeter)\
    \ \n{\n    string[] result = new string[2 * numbers.length - 1];\n    if(numbers.length\
    \ == 0) \n    {\n        return numbers;\n    }\n\nunittest\n{\n    alias candidate\
    \ = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt7ka8wx0.d(75): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt7ka8wx0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \nin {\n\tassert(numbers.length\
    \ >= 0);\n}\nout (result) {\n\tassert(result.length == numbers.length * 2 - 1);\n\
    \tint i = 0;\n\twhile (i < result.length)\n\t    invariant(i >= 0 && i <= result.length)\n\
    \t    decreases(result.length - i)\n\t{\n\t\tif (i % 2 == 0) {\n\t\t\tassert(result[i]\
    \ == numbers[i / 2]);\n\t\t} else {\n\t\t\tassert(result[i] == delimeter);\n\t\
    \t}\n\t\ti = i + 1;\n\t}\n}\n{\n\tif (numbers.length == 0) {\n\t\treturn numbers;\n\
    \t}\n\tlong[] result = new long[numbers.length * 2 - 1];\n\tint j = 0;\n\tint\
    \ i = 0;\n\twhile (i < numbers.length)\n\t    invariant(j >= 0 && j <= result.length)\n\
    \t    invariant(i >= 0 && i <= numbers.length)\n\t    invariant(j / 2 == i)\n\t\
    \    decreases(numbers.length - i)\n\t{\n\t\tresult[j] = numbers[i];\n\t\tj =\
    \ j + 1;\n\t\tif (i != numbers.length - 1) {\n\t\t\tresult[j] = delimeter;\n\t\
    \t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n\
    \    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4vy3my47.d(19): Error: found `invariant` instead of statement

    /tmp/tmp4vy3my47.d(24): Error: declaration expected, not `else`

    /tmp/tmp4vy3my47.d(26): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4vy3my47.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ < 2)\n        return numbers;\n    long[] ret = new long[(numbers.length - 1)\
    \ * 2];\n    ret[0] = numbers[0];\n    ret[1] = delimeter;\n    for (int i = 1;\
    \ i < numbers.length - 1; i++) {\n        ret[i * 2] = numbers[i];\n        ret[i\
    \ * 2 + 1] = delimeter;\n    }\n    ret[$ - 1] = numbers[$ - 1];\n    return ret;\n\
    }\n/*\nPrint the path from `from' to `to' in the given `tree'.\n    >>> import\
    \ std.range;\n    >>> tree = [1L, [2L, [3L, [4L]], [5L, [6L], [7L]]], [8L]];\n\
    \    >>> printPath(tree, 3L, 6L);\n    3L-2L-1L\n    >>> printPath(tree, 5L, 4L);\n\
    \    5L-2L-1L\n    >>> printPath(tree, 8L, 6L);\n    8L-1L\n    >>> printPath(tree,\
    \ 7L, 3L);\n    7L-2L-1L\n*/\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmph8xbi6xh.d(43): unittest failure

    ----------------

    ??:? _d_unittestp [0x4284dd]

    ??:? void tmph8xbi6xh.__unittest_L38_C1() [0x428119]

    ??:? void tmph8xbi6xh.__modtest() [0x428260]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5bb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b44e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430b88]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430665]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b425]

    ??:? runModuleUnitTests [0x42c391]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4289a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n    in {\n   \
    \     foreach (idx, number; numbers) {\n            assert(idx == 0 || numbers[idx-1]\
    \ < number);\n        }\n    }\n    body {\n        // TODO: if range\n      \
    \  // todo: if <array>\n        long[] result;\n        foreach (idx, number;\
    \ numbers) {\n            if (idx == 0)\n                result ~= number;\n \
    \           else\n                result ~= delimeter ~ number;\n        }\n \
    \       return result;\n    }\n/*\n Insert a number 'delimeter' between every\
    \ two consecutive elements of input array `numbers'\n    >>> intersperse([], 4.5)\n\
    \    []\n    >>> intersperse([1.5, 2.5, 3.5], 4.5)\n    [1.5, 4.5, 2.5, 4.5, 3.5]\n\
    \    \n*/\ndouble[] intersperse(double[] numbers, double delimeter) \n    in {\n\
    \        foreach (idx, number; numbers) {\n            assert(idx == 0 || numbers[idx-1]\
    \ < number);\n        }\n    }\n    body {\n        // TODO: if range\n      \
    \  // todo: if <array>\n        double[] result;\n        foreach (idx, number;\
    \ numbers) {\n            if (idx == 0)\n                result ~= number;\n \
    \           else\n                result ~= delimeter ~ number;\n        }\n \
    \       return result;\n    }\n/*\n compute the sum of all elements of input array\
    \ `numbers'\n    >>> sum([])\n    0L\n    >>> sum([1L, 2L, 3L])\n    6L\n*/\n\
    long sum(long[] numbers) \n    in {\n        foreach (idx, number; numbers) {\n\
    \            assert(idx == 0 || numbers[idx-1] < number);\n        }\n    }\n\
    \    body {\n        // TODO: if range\n        // todo: if <array>\n        long\
    \ result = 0L;\n        foreach (number; numbers) {\n            result += number;\n\
    \        }\n        return result;\n    }\n/*\n compute the sum of all elements\n\
    unittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L)\
    \ == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L,\
    \ 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \nin\n    assert(isSorted(numbers));\n\
    out\n    assert(isSorted(result));\n{\n    // TODO: Implement\n    return [1L,\
    \ 2L, 3L];\n}\n/*\nGiven an array `numbers' of odd length, returns the median\
    \ of the array\n    >>> median([1L, 2L, 3L, 4L, 5L])\n    3L\n*/\nlong median(long[]\
    \ numbers)\nin\n    assert(numbers.length % 2 == 1);\n    assert(isSorted(numbers));\n\
    out\n    assert(result in numbers);\n{\n    // TODO: Implement\n    return 3L;\n\
    }\n/*\n    Given a list `lst' and a function `f', return the index of the first\
    \ element of `lst'\n    to satisfy `f'\n    \n    >>> findFirst([1L, 2L, 3L, 4L,\
    \ 5L], (x) => x == 3L)\n    2L\n*/\nlong findFirst(long[] lst, bool delegate(long)\
    \ f)\nin\n    assert(lst.length > 0);\n    assert(!f(lst[0]));\nout\n    assert(result\
    \ > 0);\n    assert(f(lst[result]));\n{\n    // TODO: Implement\n    return 2L;\n\
    }\n/*\n    Given an ordered array `numbers' and a new element `x', insert `x'\
    \ into `numbers' and\n    return the resulting array.\n    \n    >>> insertOrdered([1L,\
    \ 2L, 3L, 4L, 5L], 2L)\n    [1L, 2L, 2L, 3L, 4L, 5L]\n*/\nlong[] insertOrdered(long[]\
    \ numbers, long x)\nin\n    assert(isSorted(numbers));\nout\n    assert(isSorted(result));\n\
    {\n    // TODO: Implement\n    return [1L, 2L, 2L, 3L, 4L, 5L];\n}\n/*\n    Given\
    \ a pair `p' and a function `f', apply `f' to both elements of `p' and return\n\
    \    the resulting pair.\n    \n    >>> fst\nunittest\n{\n    alias candidate\
    \ = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxzk5nhfn.d(13): Error: statement expected to be `{ }`, not `assert`

    /tmp/tmpxzk5nhfn.d(15): Error: found `assert` when expecting `(`

    /tmp/tmpxzk5nhfn.d(15): Error: `(identifier) { ... }` or `(identifier; expression)`
    following `out` expected, not `(`

    /tmp/tmpxzk5nhfn.d(15): Error: found `isSorted` when expecting `)`

    /tmp/tmpxzk5nhfn.d(15): Error: statement expected to be `{ }`, not `(`

    /tmp/tmpxzk5nhfn.d(15): Error: found `)` when expecting `;` following statement

    /tmp/tmpxzk5nhfn.d(16): Error: declaration expected, not `{`

    /tmp/tmpxzk5nhfn.d(19): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxzk5nhfn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[(numbers.length - 1) * 2];\n    auto count = 0;\n    foreach\
    \ (n; numbers) \n    {\n        result[count] = n;\n        result[count + 1]\
    \ = delimeter;\n        count += 2;\n    }\n    return result[0 .. $ - 1];\n}\n\
    \ \n \n \n/*\n Convert a number to a string in a base-X notation\n    >>> numToString(16L,\
    \ 16L)\n    \"10\"\n    >>> numToString(16L, 16L, 2L)\n    \"10000000\"\n    >>>\
    \ numToString(5L, 2L)\n    \"101\"\n    >>> numToString(5L, 5L)\n    \"10\"\n\
    \    >>> numToString(5L, 3L)\n    \"12\"\n    >>> numToString(5L, 1L)\n    \"\
    11111\"\n    >>> numToString(0L, 2L)\n    \"0\"\n    >>> numToString(0L, 16L)\n\
    \    \"0\"\n    >>> numToString(100L, 2L)\n    \"1100100\"\n    >>> numToString(100L,\
    \ 16L)\n    \"64\"\n    >>> numToString(100L, 16L, 3L)\n    \"64000000\"\n   \
    \ \n*/\nstring numToString(long number, long base, long width = 0L) \n{\n    long[]\
    \ result = [];\n    if (number == 0L) \n    {\n        result ~= 0L;\n    }\n\
    \    else \n    {\n        static if (base > 0L) \n        {\n            while\
    \ (number > 0L) \n            {\n                auto mod = number % base;\n \
    \               number /= base;\n                result ~= mod;\n            }\n\
    \        }\n        else \n        {\n            while (number < 0L) \n     \
    \       {\n                auto mod = number % base;\n                number /=\
    \ base;\n                result ~= mod;\n            }\n        }\n    }\n   \
    \ if (width > 0L) \n    {\n        foreach (value; intersperse(reverse(result\n\
    unittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L)\
    \ == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L,\
    \ 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2ck7nyij.d(83): Error: found `unittest` when expecting `,`

    /tmp/tmp2ck7nyij.d(91): Error: found `void` when expecting `,`

    /tmp/tmp2ck7nyij.d(91): Error: found `{` when expecting `,`

    /tmp/tmp2ck7nyij.d(91): Error: expression expected, not `}`

    /tmp/tmp2ck7nyij.d(91): Error: found `End of File` when expecting `,`

    /tmp/tmp2ck7nyij.d(91): Error: found `End of File` when expecting `)`

    /tmp/tmp2ck7nyij.d(91): Error: found `End of File` when expecting `,`

    /tmp/tmp2ck7nyij.d(91): Error: found `End of File` when expecting `)`

    /tmp/tmp2ck7nyij.d(91): Error: found `End of File` when expecting `)`

    /tmp/tmp2ck7nyij.d(91): Error: found `End of File` instead of statement

    /tmp/tmp2ck7nyij.d(91): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp2ck7nyij.d(91): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2ck7nyij.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163953
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0) \n    {\n        return numbers;\n    }\n    auto result = new long[2\
    \ * numbers.length - 1];\n    auto r = 0;\n    foreach (i, num; numbers) \n  \
    \  {\n        result[r] = num;\n        r += 1;\n        if (i != numbers.length\
    \ - 1) \n        {\n            result[r] = delimeter;\n            r += 1;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \nin {\n    foreach\
    \ (i; 0 .. numbers.length) in {\n        assert(numbers[i] >= 0);\n    }\n}\n\
    out (result) {\n    assert(result.length == numbers.length + (numbers.length -\
    \ 1));\n    foreach (i; 0 .. numbers.length) out (result) {\n        assert(result[2\
    \ * i] == numbers[i]);\n    }\n    foreach (i; 0 .. numbers.length - 1) out (result)\
    \ {\n        assert(result[2 * i + 1] == delimeter);\n    }\n}\nbody {\n    if\
    \ (numbers.length == 0) {\n        return numbers;\n    } else {\n        long[]\
    \ result = new long[numbers.length + (numbers.length - 1)];\n        foreach (i;\
    \ 0 .. numbers.length) {\n            result[2 * i] = numbers[i];\n        }\n\
    \        foreach (i; 0 .. numbers.length - 1) {\n            result[2 * i + 1]\
    \ = delimeter;\n        }\n        return result;\n    }\n}\nunittest\n{\n   \
    \ alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n   \
    \ assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n \
    \   assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphx4j8ptp.d(13): Error: found `in` instead of statement

    /tmp/tmphx4j8ptp.d(16): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphx4j8ptp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0) \n    {\n        return [];\n    }\nunittest\n{\n    alias candidate =\
    \ intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5gj5l74x.d(17): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5gj5l74x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    return\
    \ numbers.map!(x => x.tupleof(delimeter)).expand!(t => t).array.dropOne!(a =>\
    \ a[0] == delimeter).array;\n}\n \n// version = 1.0.0\nunittest\n{\n    alias\
    \ candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqaz33vyb.d(13): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqaz33vyb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    return\
    \ numbers.map!(a => tuple(a, delimeter)).join.dropRight!1;\n}\n \n/*\n Get the\
    \ combinations between two arrays\n    >>> combination([[1L, 2L], [10L, 20L, 30L]],\
    \ 'right)\n    [[1L, 10L], [1L, 20L], [1L, 30L], [2L, 10L], [2L, 20L], [2L, 30L]]\n\
    */\nlong[][] combination(long[][] arrays, string direction = \"right\") \n{\n\
    \    int arrays_num = arrays.length;\n    if (arrays_num == 0) return [];\n  \
    \  if (arrays_num == 1) return arrays[0].map!(a => [a]);\n    return arrays[0].map!(a\
    \ => arrays[1].map!(b => ([a] ~ b))).join;\n}\n \n/*\n Get the permutations between\
    \ two arrays\n    >>> permutation([[1L, 2L], [10L, 20L]])\n    [[1L, 10L], [1L,\
    \ 20L], [2L, 10L], [2L, 20L]]\n*/\nlong[][] permutation(long[][] arrays) \n{\n\
    \    int arrays_num = arrays.length;\n    if (arrays_num == 0) return [];\n  \
    \  if (arrays_num == 1) return arrays[0].map!(a => [a]);\n    return arrays[0].map!(a\
    \ => arrays[1].map!(b => ([a] ~ b))).join;\n}\n/*\n Get the cartesian product\
    \ of an array of arrays.\n    >>> cartesianProduct([[1L, 2L], [10L, 20L]])\n \
    \   [[1L, 10L], [1L, 20L], [2L, 10L], [2L, 20L]]\n*/\nlong[][] cartesianProduct(long[][]\
    \ arrays) \n{\n    int arrays_num = arrays.length;\n    if (arrays_num == 0) return\
    \ [];\n    if (arrays_num == 1) return arrays[0].map!(a => [a]);\n    return\n\
    unittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L)\
    \ == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L,\
    \ 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptmc82tie.d(52): Error: expression expected, not `unittest`

    /tmp/tmptmc82tie.d(53): Error: found `{` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptmc82tie.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[(numbers.length * 2) - 1];\n    if (numbers.length == 0)\n\
    \    {\n        return result;\n    }\n    result[0] = numbers[0];\n    for (long\
    \ i = 1L; i < numbers.length; i++)\n    {\n        result[(i * 2) - 1] = delimeter;\n\
    \        result[i * 2] = numbers[(int)i];\n    }\n    return result;\n}\nlong[][]\
    \ intersperse(long[][] numbers, long delimeter) \n{\n    long[][] result = new\
    \ long[(numbers.length * 2) - 1][];\n    if (numbers.length == 0)\n    {\n   \
    \     return result;\n    }\n    result[0] = numbers[0];\n    for (long i = 1L;\
    \ i < numbers.length; i++)\n    {\n        result[(i * 2) - 1] = new long[1];\n\
    \        result[(i * 2) - 1][0] = delimeter;\n        result[i * 2] = numbers[(int)i];\n\
    \    }\n    return result;\n}\ntemplate intersperse(T, S)(T[] numbers, S delimeter)\
    \ if (is(T == long[], S == long, T == long[][], S == long[])) \n{\n    T[] result\
    \ = new T[(numbers.length * 2) - 1];\n    if (numbers.length == 0)\n    {\n  \
    \      return result;\n    }\n    result[0] = numbers[0];\n    for (long i = 1L;\
    \ i < numbers.length; i++)\n    {\n        result[(i * 2) - 1] = delimeter;\n\
    \        result[i * 2] = numbers[(int)i];\n    }\n    return result;\n}\nlong[][]\
    \ intersperse(long[][] numbers, long[] delimeter) \n{\n    long[][] result = new\
    \ long[(numbers.length * 2) - 1][];\n    if (numbers.length == 0)\n    {\n   \
    \     return result;\n    }\n    result[\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp2ks7741.d(22): Error: C style cast illegal, use `cast(int)i`

    /tmp/tmpp2ks7741.d(38): Error: C style cast illegal, use `cast(int)i`

    /tmp/tmpp2ks7741.d(42): Error: members of template declaration expected

    /tmp/tmpp2ks7741.d(42): Error: declaration expected, not `(`

    /tmp/tmpp2ks7741.d(45): Error: declaration expected, not `if`

    /tmp/tmpp2ks7741.d(48): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp2ks7741.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \nin {\n    assert(numbers.length\
    \ > 0);\n}\nout (result) {\n    assert(result.length == numbers.length * 2 - 1);\n\
    \    for (int i = 0; i < result.length; i++)\n    {\n        if (i % 2 == 0) {\n\
    \            assert(result[i] == numbers[i / 2]);\n        } else {\n        \
    \    assert(result[i] == delimeter);\n        }\n    }\n}\n{\n    long[] result\
    \ = new long[numbers.length * 2 - 1];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        result[i * 2] = numbers[i];\n        if (i + 1 < numbers.length)\
    \ {\n            result[i * 2 + 1] = delimeter;\n        }\n    }\n    return\
    \ result;\n}\n/*\n Return `numbers' where each element is squared\n    >>> square([])\n\
    \    []\n    >>> square([-2L, 0L, 2L])\n    [4L, 0L, 4L]\n*/\nlong[] square(long[]\
    \ numbers) \nin {\n    assert(numbers.length > 0);\n}\nout (result) {\n    assert(result.length\
    \ == numbers.length);\n    for (int i = 0; i < result.length; i++)\n    {\n  \
    \      assert(result[i] == numbers[i] * numbers[i]);\n    }\n}\n{\n    long[]\
    \ result = new long[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        result[i] = numbers[i] * numbers[i];\n    }\n    return\
    \ result;\n}\n/*\n Return the sum of `numbers'\n    >>> sum([])\n    0L\n    >>>\
    \ sum([1L, 2L, 3L])\n    6L\n*/\nlong sum(long[] numbers) \nin {\n    assert(numbers.length\
    \ > 0);\n}\nout (result) {\n    long sum = 0L;\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        sum += numbers[i];\n   \nunittest\n{\n    alias candidate\
    \ = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjsj5r4dj.d(26): Error: missing `do { ... }` after `in` or `out`

    /tmp/tmpjsj5r4dj.d(55): Error: missing `do { ... }` after `in` or `out`

    /tmp/tmpjsj5r4dj.d(80): Error: found `unittest` instead of statement

    /tmp/tmpjsj5r4dj.d(88): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjsj5r4dj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163953
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = null;\n    foreach (i, num; numbers)\n    {\n        result ~= num;\n\
    \        if (i != numbers.length - 1)\n            result ~= delimeter;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n  \
    \  assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L)\
    \ == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) ==\
    \ [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0) \n    {\n        return numbers;\n    }\n    // mapi will assign (0, 1,\
    \ 2, 3, 4, ...) to the corresponding elements of numbers \n    auto result = numbers[0..$-1].mapi!((i,\
    \ _) => tuple(numbers[i], delimeter));\n    // the last element of numbers is\
    \ not associated with the inserted delimeter\n    result ~= numbers[$-1];\n  \
    \  return result.flatten.array;\n}\n/*\n >>> intersperseN([[1L, 2L, 3L], [11L,\
    \ 12L, 13L]], 4L)\n [[1L, 4L, 2L, 4L, 3L], [11L, 4L, 12L, 4L, 13L]]\n*/\nlong[][]\
    \ intersperseN(long[][] numbers, long delimeter) \n{\n    return numbers.map!(x\
    \ => intersperse(x, delimeter));\n}\n/*\n Distribute an array 'input' over a number\
    \ of lists\n    >>> distribute([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3)\n\
    \    [[1L, 4L, 7L, 10L], [2L, 5L, 8L], [3L, 6L, 9L]]\n    \n*/\nlong[][] distribute(long[]\
    \ input, int lists) \n{\n    auto count = input.length;\n    assert(count % lists\
    \ == 0);\n    auto list_length = count / lists;\n    assert(list_length * lists\
    \ == count);\n    auto result = new long[][](lists);\n    foreach (i; 0..lists)\
    \ \n    {\n        result[i] = input[i * list_length..(i + 1) * list_length];\n\
    \    }\n    return result;\n}\n/*\n Flatten a 2D array of longs\n    >>> flatten([[1L,\
    \ 2L, 3L], [11L, 12L, 13L]])\n    [1L, 2L, 3L, 11L, 12L, 13L]\n*/\nlong[]\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp71cyi19x.d(56): Error: no identifier for declarator `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp71cyi19x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n    {\n        return numbers;\n    }\n    else\n    {\n        long[]\
    \ result = new long[(numbers.length * 2L) - 1L];\n        foreach (i, number;\
    \ numbers)\n        {\n            if (i != 0L)\n            {\n             \
    \   result[(i * 2L) - 1L] = delimeter;\n            }\n            result[i *\
    \ 2L] = number;\n        }\n        return result;\n    }\n}\n/*\n    A test function\n\
    \    >>> hanoi(5L)\n    31L\n*/\nlong hanoi(long numberOfDiscs) \n{\n    return\
    \ (1L << numberOfDiscs) - 1L;\n}\n/*\n    >>> add(1L, 2L)\n    3L\n    >>> add(1L,\
    \ -2L)\n    -1L\n*/\nlong add(long lhs, long rhs) \n{\n    return lhs + rhs;\n\
    }\n/*\n    >>> mul(2L, 3L)\n    6L\n    >>> mul(2L, -3L)\n    -6L\n*/\nlong mul(long\
    \ lhs, long rhs) \n{\n    return lhs * rhs;\n}\n/*\n    >>> findMax([1L, 2L, 3L])\n\
    \    3L\n    >>> findMax([])\n    0L\n*/\nlong findMax(long[] array) \n{\n   \
    \ long max = 0L;\n    foreach (i, num; array)\n    {\n        if (num > max)\n\
    \        {\n            max = num;\n        }\n    }\n    return max;\n}\n/*\n\
    \    >>> filterEven([1L, 2L, 3L, 4L])\n    [2L, 4L]\n    >>> filterEven([])\n\
    \    []\n*/\nlong[] filterEven(long[] array) \n{\n    return array.filter!(l =>\
    \ l % 2L == 0L);\n}\n/*\n    Remove all occurances of element 'elem' from array\
    \ 'array'\n    >>> remove([1L, 2L, 3L, 2L],\nunittest\n{\n    alias candidate\
    \ = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxt40ff9v.d(88): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxt40ff9v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \nin {\n    assert(numbers.length\
    \ >= 0);\n}\nout (result) {\n    assert(result.length == (numbers.length == 0\
    \ ? 0 : 2 * numbers.length - 1));\n    for (int i = 0; i < numbers.length; i++)\n\
    \        assert(result[i * 2] == numbers[i]);\n    for (int i = 0; i < numbers.length\
    \ - 1; i++)\n        assert(result[i * 2 + 1] == delimeter);\n}\nbody {\n    if\
    \ (numbers.length == 0)\n        return numbers;\n    long[] result = new long[2\
    \ * numbers.length - 1];\n    result[0] = numbers[0];\n    for (int i = 1; i <\
    \ numbers.length; i++) {\n        result[i * 2 - 1] = delimeter;\n        result[i\
    \ * 2] = numbers[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmp2g3vkm1z.d(20): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42870a]

    ??:? long[] tmp2g3vkm1z.intersperse(long[], long) [0x428078]

    ??:? void tmp2g3vkm1z.__unittest_L33_C1() [0x4280d8]

    ??:? void tmp2g3vkm1z.__modtest() [0x428328]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c737]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5ca]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430855]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d04]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4307e1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a1]

    ??:? runModuleUnitTests [0x42c50d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fun'
  stdout: ''
  timestamp: 1660163953
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n\tlong[] ret;\n\
    \tforeach(i, v; numbers) \n\t{\n\t\tret ~= v;\n\t\tif(i < numbers.length - 1)\
    \ \n\t\t{\n\t\t\tret ~= delimeter;\n\t\t}\n\t}\n\treturn ret;\n}\nunittest\n{\n\
    \    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    assert(delimeter.sizeof\
    \ == numbers.length.sizeof);\n    long[] res = new long[numbers.length * 2 - 1];\n\
    \    res[0] = numbers[0];\n    foreach (i, n; numbers[1 .. $]) \n    {\n     \
    \   res[i * 2] = delimeter;\n        res[i * 2 + 1] = n;\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation
    failed

    ----------------

    ??:? _d_newarrayU [0x42da5b]

    ??:? _d_newarrayT [0x4297e0]

    ??:? long[] tmp8gwe0_en.intersperse(long[], long) [0x427e4b]

    ??:? void tmp8gwe0_en.__unittest_L23_C1() [0x427f70]

    ??:? void tmp8gwe0_en.__modtest() [0x4281c0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c51b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b3ae]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430639]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430ae8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4305c5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b385]

    ??:? runModuleUnitTests [0x42c2f1]

    ??:? void rt.dmain2'
  stdout: ''
  timestamp: 1660163953
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[0L];\n    long count = numbers.length;\n    for (long i =\
    \ 0L; i < count; i++)\n    {\n        result ~= numbers[i];\n        if (i !=\
    \ count - 1L)\n        {\n            result ~= delimeter;\n        }\n    }\n\
    \    return result;\n}\n/*\n Find the exponent of the greatest power of the base\
    \ `base', that is less than `number'\n    >>> greatestPowerOfBase(5L, 2L)\n  \
    \  2L\n    >>> greatestPowerOfBase(5L, 3L)\n    1L\n    >>> greatestPowerOfBase(5L,\
    \ 2L + 3L)\n    2L\n*/\nlong greatestPowerOfBase(long number, long base) {\n \
    \   long power = 1L;\n    long expo = 0L;\n    for (long i = 1L; i < 32L; i++)\
    \ {\n        if (power > number)\n        {\n            break;\n        }\n \
    \       power = power * base;\n        expo = i;\n    }\n    return expo;\n}\n\
    long pow(long base, long expo) {\n    if (expo == 0L)\n    {\n        return 1L;\n\
    \    }\n    else\n    {\n        return base * pow(base, expo - 1L);\n    }\n\
    }\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n\tlong[] buffer\
    \ = new long[$];\n\tint inSize = numbers.length;\n\tif (inSize == 0) \n\t{\n\t\
    \treturn new long[0];\n\t}\n\telse \n\t{\n\t\tforeach (int i, long item; numbers)\
    \ \n\t\t{\n\t\t\tbuffer ~= item;\n\t\t\tif (i != inSize - 1) \n\t\t\t{\n\t\t\t\
    \tbuffer ~= delimeter;\n\t\t\t}\n\t\t}\n\t\treturn buffer;\n\t}\n}\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnqhfmcad.d(13): Error: undefined identifier `__dollar`

    /tmp/tmpnqhfmcad.d(14): Error: cannot implicitly convert expression `numbers.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnqhfmcad.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ < 2) return numbers;\n    long[] result = new long[2 * numbers.length - 1];\n\
    \    foreach (n; 0 .. numbers.length - 1) \n    {\n        result[2 * n] = numbers[n];\n\
    \        result[2 * n + 1] = delimeter;\n    }\n    return result[0 .. $ - 1];\n\
    }\n/*\n Get the sum of a sequence of numbers.\n    >>> sum([])\n    0L\n    >>>\
    \ sum([1L, 2L, 3L])\n    6L\n*/\nlong sum(long[] numbers) \n{\n    long result\
    \ = 0L;\n    foreach (n; numbers) \n    {\n        result += n;\n    }\n    return\
    \ result;\n}\n/*\n Produce a sequence of numbers, starting from 'start', incrementing\
    \ by 'step' each time.\n    >>> iota(1L, 5L)\n    [1L, 6L, 11L, 16L, 21L]\n  \
    \  >>> iota(4L, 9L)\n    [4L, 13L, 22L, 31L, 40L, 49L, 58L, 67L, 76L, 85L, 94L]\n\
    */\nlong[] iota(long start, long step) \n{\n    long[] result = new long[unchecked!(start\
    \ / step)];\n    foreach (n; 0 .. result.length) \n    {\n        result[n] =\
    \ start + n * step;\n    }\n    return result;\n}\n/*\n Produce a sequence of\
    \ numbers, starting from 'start', incrementing by 'step' each time.\n    >>> iota(1L,\
    \ 5L)\n    [1L, 6L, 11L, 16L, 21L]\n    >>> iota(4L, 9L)\n    [4L, 13L, 22L, 31L,\
    \ 40L, 49L, 58L, 67L, 76L, 85L, 94L]\n*/\nlong[] iota(long start, long step) \n\
    {\n    long[] result = new long[unchecked!(start / step)];\n    foreach (n; 0\
    \ .. result.length)\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9flp835b.d(65): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9flp835b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163953
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0) return new long[0];\n    long[] res = new long[2 * numbers.length - 1];\n\
    \    res[0] = numbers[0];\n    for (long i = 1; i < numbers.length; i++) {\n \
    \       res[2 * i - 1] = delimeter;\n        res[2 * i] = numbers[i];\n    }\n\
    \    return res;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[][]\
    \ bits = map!(n => [n, delimeter])(numbers);\n    long[] result = unfold!(s =>\
    \ s.length > 0)(Array.init)(bits);\n    return result[0 .. $ - 1];\n}\n/*\n  Call\
    \ a function n-times with given arguments\n    >>> repeat!(() => write(\"foo\"\
    ))(5)\n    foo\n    foo\n    foo\n    foo\n    foo\n    >>> repeat!((a, b) =>\
    \ write(\"foo\"))(5, \"bar\", \"baz\")\n    foo\n    foo\n    foo\n    foo\n \
    \   foo\n*/\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfps7p4ys.d(13): Error: template instance `map!((n) => [n, delimeter])`
    template `map` is not defined

    /tmp/tmpfps7p4ys.d(14): Error: template instance `unfold!((s) => s.length > 0)`
    template `unfold` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfps7p4ys.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0) \n    {\n        return numbers;\n    } \n    else \n    {\n        long[]\
    \ result = new long[(numbers.length - 1) * 2 + 1];\n        result[0] = numbers[0];\n\
    \        for (size_t i = 1; i < numbers.length; i++) \n        {\n           \
    \ result[i * 2 - 1] = delimeter;\n            result[i * 2] = numbers[i];\n  \
    \      }\n        return result;\n    }\n}\n/*\n    Split array `numbers' into\
    \ a list of sub-arrays where every sub-array has a length of `n'\n    >>> chunks([],\
    \ 1)\n    []\n    >>> chunks([1L, 2L, 3L, 4L, 5L], 2)\n    [[1L, 2L], [3L, 4L],\
    \ [5L]]\n    >>> chunks([1L, 2L, 3L, 4L, 5L], 4)\n    [[1L, 2L, 3L, 4L], [5L]]\n\
    */\nlong[][] chunks(long[] numbers, size_t n) \n{\n    size_t k = numbers.length\
    \ % n == 0 ? numbers.length / n : numbers.length / n + 1;\n    long[][] result\
    \ = new long[][](k);\n    for (size_t i = 0; i < k; i++) \n    {\n        size_t\
    \ length = n < numbers.length - i * n ? n : numbers.length - i * n;\n        result[i]\
    \ = numbers[i * n .. i * n + length];\n    }\n    return result;\n}\n/*\n    Split\
    \ array `numbers' into a list of sub-arrays where every sub-array has a length\
    \ of `n'\n    >>> chunks([], 1)\n    []\n    >>> chunks([1L, 2L, 3L, 4L, 5L],\
    \ 2)\n    [[1L, 2L], [3L, 4L], [5L]]\n    >>> chunks([1L, 2L, 3L, 4L, 5L], 4)\n\
    \    [[1L, 2L, 3L,\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6gjts3pv.d(49): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6gjts3pv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length + (numbers.length - 1)];\n    long[] nums =\
    \ numbers;\n    long[] ds = new long[numbers.length - 1];\n    int i = 0;\n  \
    \  while (i < ds.length) {\n        ds[i] = delimeter;\n        i += 1;\n    }\n\
    \    return result.map!((T, U) => T == 0 ? nums[T] : ds[T - 1])();\n}\n/*\n A\
    \ helper function that constructs an array with the first element of\n    `head'\
    \ and the rest of elements from `tail'\n    >>> cons(1L, [2L, 3L])\n    [1L, 2L,\
    \ 3L]\n    >>> cons([], [2L, 3L])\n    [[], 2L, 3L]\n    \n*/\nlong[][] cons(long[]\
    \ head, long[][] tail) \n{\n    long[][] result = new long[tail.length + 1][];\n\
    \    int i = 0;\n    while (i < head.length) {\n        result[i] = head[i];\n\
    \        i += 1;\n    }\n    int j = i;\n    while (j < result.length) {\n   \
    \     result[j] = tail[j - i];\n        j += 1;\n    }\n    return result;\n}\n\
    /*\n Build a list of alternating ones and zeros of length `len'\n    >>> buildAlternatingOnesAndZeros(0L)\n\
    \    []\n    >>> buildAlternatingOnesAndZeros(1L)\n    [1L]\n    >>> buildAlternatingOnesAndZeros(2L)\n\
    \    [1L, 0L]\n    >>> buildAlternatingOnesAndZeros(3L)\n    [1L, 0L, 1L]\n  \
    \  >>> buildAlternatingOnesAndZeros(4L)\n    [1L, 0L, 1L, 0L]\n    >>> buildAlternatingOnesAndZeros(5L)\n\
    \    [1L, 0L, 1L, 0L, 1L]\n    \n*/\nlong[] buildAlternatingOnes\nunittest\n{\n\
    \    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiioi_w9r.d(64): Error: semicolon expected, not `unittest`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiioi_w9r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n\tlong[] ret;\n\
    \tint len = numbers.length;\n\tret.length = len > 0 ? len*2-1 : 0;\n\tif (ret.length\
    \ > 0) {\n\t\tint j = 0;\n\t\tfor (int i = 0; i < len; i++) {\n\t\t\tret[j] =\
    \ numbers[i];\n\t\t\tj++;\n\t\t\tif (i < len-1) {\n\t\t\t\tret[j] = delimeter;\n\
    \t\t\t\tj++;\n\t\t\t}\n\t\t}\n\t}\n\treturn ret;\n}\nunittest\n{\n    alias candidate\
    \ = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2g91kfx6.d(14): Error: cannot implicitly convert expression `numbers.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2g91kfx6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[(numbers.length - 1) * 2];\nunittest\n{\n    alias candidate\
    \ = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp18qwu_zk.d(14): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp18qwu_zk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    return\
    \ numbers.map!(a => tuple(a, delimeter)).flat;\n}\nunittest\n{\n    alias candidate\
    \ = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfzy66hf0.d(13): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfzy66hf0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    // Take\
    \ the number of elements 'numbers' has\n    int n = numbers.length;\n    if (n\
    \ == 0) \n    {\n        return new long[0];\n    }\n    // If there is only one\
    \ element, we can't do anything\n    if (n == 1) \n    {\n        return numbers;\n\
    \    }\n    // We'll need to allocate a new array, with the same length of 'numbers'\n\
    \    // plus enough spaces for the 'delimeter' elements we need to add\n    long[]\
    \ result = new long[n * 2 - 1];\n    // Iterate on all the elements of 'numbers'\
    \ except the last one\n    for (int i = 0; i < n - 1; i++) \n    {\n        //\
    \ Add the 'i'th element of 'numbers' in the 'i*2'th slot\n        result[i * 2]\
    \ = numbers[i];\n        // And the 'delimeter' element in the 'i*2+1'th slot\n\
    \        result[i * 2 + 1] = delimeter;\n    }\n    // The last element of 'numbers'\
    \ goes in the last slot\n    result[n * 2 - 1] = numbers[n - 1];\n    return result;\n\
    }\n/*\n Insert a number 'delimeter' between every two consecutive elements of\
    \ input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L,\
    \ 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[]\
    \ numbers, long delimeter) \n{\n    // Take the number of elements 'numbers' has\n\
    \    int n = numbers.length;\n    if (n == 0) \n    {\n        return new long[0];\n\
    \    }\n    // If there is only one element, we can't do anything\n    if (n ==\
    \ 1) \n    {\n        return numbers;\n    }\n    // We'll need to allocate a\
    \ new array, with the same length of 'numbers'\n    // plus enough spaces for\
    \ the 'delimeter' elements we need to add\n    long[] result = new long[n\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjw7m7mds.d(63): Error: found `unittest` when expecting `]`

    /tmp/tmpjw7m7mds.d(64): Error: semicolon expected, not `{`

    /tmp/tmpjw7m7mds.d(71): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjw7m7mds.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    int len\
    \ = numbers.length;\n    long[] result = new long[2 * len - 1];\n    int j = 0;\n\
    \    int i = 0;\n    while (i < len) {\n        result[j] = numbers[i];\n    \
    \    if (i != len - 1) {\n            result[j + 1] = delimeter;\n           \
    \ j += 2;\n        }\n        i++;\n    }\n    return result;\n}\n/*\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy87unjcv.d(27): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy87unjcv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[];\n    for (long x = 0L; x < numbers.length; x++) \n    {\n\
    \        result.append(numbers[x]);\n        if (x < numbers.length - 1L) \n \
    \       {\n            result.append(delimeter);\n        }\n    }\n    return\
    \ result;\n}\n/*\n Returns the `index`th bit in `data`.\n \n   >>> getBit(6L,\
    \ 1L)\n   1L\n   >>> getBit(6L, 0L)\n   0L\n   >>> getBit(6L, 2L)\n   0L\n   >>>\
    \ getBit(6L, 3L)\n   0L\n*/\nlong getBit(long data, long index) \n{\n    return\
    \ (data >> index) & 1L;\n}\n/*\n Set the `index`th bit of `data` to `value`.\n\
    \ \n   >>> setBit(1L, 0L, 1L)\n   1L\n   >>> setBit(1L, 0L, 0L)\n   0L\n   >>>\
    \ setBit(0L, 0L, 1L)\n   1L\n   >>> setBit(6L, 0L, 1L)\n   7L\n   >>> setBit(6L,\
    \ 0L, 0L)\n   6L\n   >>> setBit(6L, 1L, 1L)\n   6L\n   >>> setBit(6L, 1L, 0L)\n\
    \   4L\n   >>> setBit(6L, 2L, 1L)\n   6L\n   >>> setBit(6L, 2L, 0L)\n   2L\n*/\n\
    long setBit(long data, long index, long value) \n{\n    if (value == 0L) \n  \
    \  {\n        return (data & ~(1L << index));\n    }\n    else \n    {\n     \
    \   return (data | (1L << index));\n    }\n}\n/*\n Combine the least significant\
    \ `bitCount` bits of each element in `data` into an array of longs.\n \n   >>>\
    \ packBits([1L, 2L, 3L], 1L)\n   [3L]\n  \nunittest\n{\n    alias candidate =\
    \ intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyg868hj4.d(73): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyg868hj4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \nin {\n    assert(delimeter\
    \ >= 0L);\n    assert(isSorted(numbers));\n}\nout (long[] result) \n{\n    assert(isSorted(result));\n\
    \    assert(result.length == numbers.length * 2L - 1L);\n    assert(result[2L]\
    \ == delimeter);\n    assert(!result.contains(delimeter));\n}\n{\n    long[] result\
    \ = [];\n    for (long i = 0L; i < numbers.length; i = i + 1L) {\n        result\
    \ = result + [numbers[i]];\n        if (i < numbers.length - 1L) {\n         \
    \   result = result + [delimeter];\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L)\
    \ == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L,\
    \ 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprjovq4oe.d(16): Error: `(identifier) { ... }` or `(identifier;
    expression)` following `out` expected, not `long`

    /tmp/tmprjovq4oe.d(16): Error: found `[` when expecting `)`

    /tmp/tmprjovq4oe.d(16): Error: statement expected to be `{ }`, not `]`

    /tmp/tmprjovq4oe.d(16): Error: found `]` instead of statement

    /tmp/tmprjovq4oe.d(19): Error: declaration expected, not `assert`

    /tmp/tmprjovq4oe.d(20): Error: declaration expected, not `assert`

    /tmp/tmprjovq4oe.d(21): Error: declaration expected, not `assert`

    /tmp/tmprjovq4oe.d(22): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprjovq4oe.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ retval = numbers.length <= 1 ? numbers : new long[(numbers.length * 2) - 1];\n\
    \    long i = 0;\n    for (; i < numbers.length - 1; i++)\n    {\n        retval[(i\
    \ * 2)] = numbers[i];\n        retval[(i * 2) + 1] = delimeter;\n    }\n    retval[(i\
    \ * 2)] = numbers[i];\n    return retval;\n}\n/*\n  Return the sum of all elements\
    \ in array 'numbers'\n    >>> sum([])\n    0L\n    >>> sum([1L, 2L, 3L])\n   \
    \ 6L\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvrhp3_jv.d(23): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvrhp3_jv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    enum size_t\
    \ num_numbers = numbers.length;\n    auto result = new long[2*num_numbers - 1];\n\
    \    foreach (idx, elem; numbers)\n    {\n        result[2*idx] = elem;\n    \
    \    if (idx < num_numbers - 1)\n            result[2*idx + 1] = delimeter;\n\
    \    }\n    return result;\n}\n/*\n Insert a number 'delimeter' between every\
    \ two consecutive elements of input array `numbers'\n    >>> intersperse([], 4.5)\n\
    \    []\n    >>> intersperse([1.5, 2.5, 3.5], 4.5)\n    [1.5, 4.5, 2.5, 4.5, 3.5]\n\
    \    \n*/\ndouble[] intersperse(double[] numbers, double delimeter) \n{\n    enum\
    \ size_t num_numbers = numbers.length;\n    auto result = new double[2*num_numbers\
    \ - 1];\n    foreach (idx, elem; numbers)\n    {\n        result[2*idx] = elem;\n\
    \        if (idx < num_numbers - 1)\n            result[2*idx + 1] = delimeter;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr0gcwsvs.d(13): Error: variable `numbers` cannot be read at compile
    time

    /tmp/tmpr0gcwsvs.d(33): Error: variable `numbers` cannot be read at compile time

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr0gcwsvs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n\tlong[][]\
    \ result = new long[][] { new long[] {} };\n\tforeach (number; numbers)\n\t{\n\
    \t\tresult[] ~= number;\n\t\tresult[] ~= delimeter;\n\t}\n\t//remove last delimeter\n\
    \tresult.length = result.length - 1;\n\treturn result.flatten;\n}\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpth9sdose.d(13): Error: semicolon expected, not `{`

    /tmp/tmpth9sdose.d(13): Error: found `{` when expecting `;` following statement

    /tmp/tmpth9sdose.d(14): Error: declaration expected, not `foreach`

    /tmp/tmpth9sdose.d(14): Error: no identifier for declarator `numbers`

    /tmp/tmpth9sdose.d(14): Error: declaration expected, not `)`

    /tmp/tmpth9sdose.d(17): Error: no identifier for declarator `result[]`

    /tmp/tmpth9sdose.d(17): Error: declaration expected, not `~=`

    /tmp/tmpth9sdose.d(18): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpth9sdose.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \nin\n{\n    assert(numbers.length\
    \ > 0);\n}\nbody\n{\n    long[][] result = [numbers[0L..1L]];\n    foreach (n;\
    \ numbers[1L..$]) \n    {\n        result ~= [delimeter, n];\n    }\n    return\
    \ result.flatten;\n}\n/*\n    >>> unBits(0L)\n    []\n    >>> unBits(1L)\n   \
    \ [1L]\n    >>> unBits(2L)\n    [2L]\n    >>> unBits(3L)\n    [1L, 2L]\n    >>>\
    \ unBits(7L)\n    [1L, 2L, 4L]\n    >>> unBits(13L)\n    [1L, 4L, 8L]\n    >>>\
    \ unBits(0xAAAAAAAAAAAAAAAAL)\n    [1L, 3L, 5L, 7L, 9L, 11L, 13L, 15L, 17L, 19L,\
    \ 21L, 23L, 25L, 27L, 29L, 31L, 33L, 35L, 37L, 39L, 41L, 43L, 45L, 47L, 49L, 51L,\
    \ 53L, 55L, 57L, 59L, 61L, 63L]\n    >>> unBits(0x5555555555555555L)\n    [2L,\
    \ 6L, 10L, 14L, 18L, 22L, 26L, 30L, 34L, 38L, 42L, 46L, 50L, 54L, 58L, 62L]\n\
    */\nlong[] unBits(long encoded) \nin\n{\n    assert(encoded > 0L);\n}\nbody\n\
    {\n    long[] ret = [];\n    long rest = encoded;\n    while (rest > 0L) \n  \
    \  {\n        long bit = ilog2(rest);\n        ret ~= bit;\n        rest -= 2L\
    \ ^^ bit;\n    }\n    return ret;\n}\n/*\n    >>> bits(0L)\n    0L\n    >>> bits(1L)\n\
    \    1L\n    >>> bits(2L)\n    2L\n\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb592yb6r.d(60): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb592yb6r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long size\
    \ = numbers.length;\n    if (size == 0)\n        return numbers;\n    Tuple!(long[],long[])\
    \ t = tuple(numbers[0..$-1], numbers[1..$]);\n    return t[0].zip(t[1]).map!(a\
    \ => a[0], a => a[1]).reduce!((a, b) => [a, delimeter, b]).array;\n}\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmhmevvuq.d(17): Error: no property `zip` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmhmevvuq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \nin {\n    assert(numbers.length\
    \ >= 0);\n}\nout {\n    assert(result.length == 2 * numbers.length - 1 || numbers.length\
    \ == 0);\n}\ndo {\n    return numbers.length == 0 ? numbers : numbers.zip(numbers.dropOne).map!((l,\
    \ r) => tuple(l, delimeter, r)).joiner;\n}\n/*\n    >>> split([], 4L)\n    []\n\
    \    >>> split([1L, 2L, 3L], 4L)\n    [[1L, 2L, 3L]]\n    >>> split([1L, 2L, 3L,\
    \ 4L, 5L, 6L], 4L)\n    [[1L, 2L, 3L], [5L, 6L]]\n    >>> split([1L, 2L, 3L, 4L,\
    \ 5L, 6L, 4L], 4L)\n    [[1L, 2L, 3L], [5L, 6L]]\n*/\nlong[][] split(long[] numbers,\
    \ long delimeter) \nin {\n    assert(numbers.length >= 0);\n}\nout {\n    assert(result.length\
    \ >= 0);\n    assert(result.length <= 2);\n    assert(result.length == 0 || (result[0].length\
    \ >= 1 && result[1].length >= 1));\n}\ndo {\n    auto left = numbers.takeWhile!(e\
    \ => e != delimeter);\n    auto right = numbers.dropWhile!(e => e != delimeter).dropOne;\n\
    \    return right.length == 0 ? [left] : [left, right];\n}\n/*\n    >>> splitN([],\
    \ 0L, 1L)\n    []\n    >>> splitN([1L, 2L, 3L], 0L, 1L)\n    [[1L, 2L, 3L]]\n\
    \    >>> splitN([1L, 2L, 3L, 4L, 5L, 6L], 0L, 1L)\n    [[1L, 2L, 3L], [5L, 6L]]\n\
    \    >>> splitN([1L, 2L, 3L, 4L, 5L, 6L, 4L], 0L, 1L)\n    [[1L,\nunittest\n{\n\
    \    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpig215l24.d(45): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpig215l24.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long i;\n\
    \    long[] result;\n    if(numbers.length == 0L)\n    {\n        return numbers;\n\
    \    }\n    result = new long[(numbers.length * 2L) - 1L];\n    result[0L] = numbers[0L];\n\
    \    foreach(i; 1L .. numbers.length)\n    {\n        result[(i * 2L) - 1L] =\
    \ delimeter;\n        result[i * 2L] = numbers[i];\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6bpr8l1q.d(21): Error: variable `i` is shadowing variable `tmp6bpr8l1q.intersperse.i`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6bpr8l1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n    {\n        return numbers;\n    }\n    long[] arr;\n    if (numbers.length\
    \ == 1)\n    {\n        arr = new long[2];\n        arr[0] = numbers[0];\n   \
    \     arr[1] = delimeter;\n        return arr;\n    }\n    arr = new long[2 *\
    \ numbers.length - 1];\n    foreach (i, v; numbers)\n    {\n        if (i < numbers.length\
    \ - 1)\n        {\n            arr[2 * i] = v;\n            arr[2 * i + 1] = delimeter;\n\
    \        }\n        else\n        {\n            arr[2 * i] = v;\n        }\n\
    \    }\n    return arr;\n}\n/*\n Insert a string 'delimeter' between every two\
    \ consecutive elements of input array `numbers'\n    >>> intersperse([], \"\"\
    )\n    []\n    >>> intersperse([\"a\", \"b\", \"c\"], \":\")\n    [\"a\", \":\"\
    , \"b\", \":\", \"c\"]\n*/\nstring[] intersperse(string[] numbers, string delimeter)\
    \ \n{\n    if (numbers.length == 0)\n    {\n        return numbers;\n    }\n \
    \   string[] arr;\n    if (numbers.length == 1)\n    {\n        arr = new string[2];\n\
    \        arr[0] = numbers[0];\n        arr[1] = delimeter;\n        return arr;\n\
    \    }\n    arr = new string[2 * numbers.length - 1];\n    foreach (i, v; numbers)\n\
    \    {\n        if (i < numbers.length - 1)\n        {\n            arr[2 * i]\
    \ = v;\n            arr[2 * i + 1] = delimeter;\n        }\n        else\n   \
    \     {\n            arr[2 * i] = v;\n        }\n    }\n    return arr;\n}\n/*\n\
    \ Insert a floating-point number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n    >>> intersperse([], 4.0)\n    []\n    >>> intersperse([1.0,\
    \ 2.0,\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk8lq51vj.d(76): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk8lq51vj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163953
