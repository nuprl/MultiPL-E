language: d
name: HumanEval_83_starts_one_ends
results:
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    return ((n-1)*9)\
    \ + (int)pow(10, (n-1));\n}\nunittest\n{\n    alias candidate = starts_one_ends;\n\
    \n    assert(candidate(1L) == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L)\
    \ == 180L);\n    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) ==\
    \ 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp99zlvsq_.d(11): Error: C style cast illegal, use `cast(int)pow(10,
    n - 1)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp99zlvsq_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164131
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{ \n    if (n==1) return\
    \ 1;\n    long ans = 1;\n    for (size_t i=1; i<n-1; i++) \n        ans *= 9;\n\
    \    return ans * 2;\n}\nunittest\n{\n    alias candidate = starts_one_ends;\n\
    \n    assert(candidate(1L) == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L)\
    \ == 180L);\n    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) ==\
    \ 18000L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpg17d7lrm.d(22): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d95]

    ??:? void tmpg17d7lrm.__unittest_L17_C1() [0x427a99]

    ??:? void tmpg17d7lrm.__modtest() [0x427b18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42babb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a94e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fae1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff90]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa6d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a925]

    ??:? runModuleUnitTests [0x42b891]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164131
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    if (n == 1)\
    \ return 2;\n    if (n == 2) return 3;\n    auto a = starts_one_ends(n - 1);\n\
    \    auto b = starts_one_ends(n - 2);\n    return a + 2 * b;\n}\nlong starts_one_ends_dp(long\
    \ n) \n{\n    long[long] memo;\n    memo[1] = 2;\n    memo[2] = 3;\n    for (long\
    \ i = 3; i <= n; i++) \n    {\n        memo[i] = memo[i - 1] + 2 * memo[i - 2];\n\
    \    }\n    return memo[n];\n}\nunittest\n{\n    alias candidate = starts_one_ends;\n\
    \n    assert(candidate(1L) == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L)\
    \ == 180L);\n    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) ==\
    \ 18000L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqml3qngc.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x428901]

    ??:? void tmpqml3qngc.__unittest_L28_C1() [0x427d00]

    ??:? void tmpqml3qngc.__modtest() [0x427da0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d823]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42875e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a73d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42a7cc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a6c9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428735]

    ??:? runModuleUnitTests [0x42d5f9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4293e8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164131
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    long res = 0;\n\
    \    if (n <= 1)\n        return n;\n    n--;\n    res += pow(10, n);\n    res\
    \ += starts_one_ends(n);\n    return res;\n}\nlong starts_one_ends_2(long n) \n\
    {\n    long res = 0;\n    if (n <= 1)\n        return n;\n    n--;\n    res +=\
    \ pow(10, n);\n    res += starts_one_ends_2(n);\n    return res;\n}\nunittest\n\
    {\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n\
    \    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L)\
    \ == 1800L);\n    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpapqfeh1_.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f0d]

    ??:? void tmpapqfeh1_.__unittest_L29_C1() [0x427b59]

    ??:? void tmpapqfeh1_.__modtest() [0x427c90]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc33]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aac6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc59]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430108]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbe5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa9d]

    ??:? runModuleUnitTests [0x42ba09]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42835c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164131
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    if (n < 1)\n\
    \        return 0;\n    long ret = 0;\n    long ones = 1;\n    long ten_power\
    \ = 10;\n    long p = (long) pow(10.0, n - 1);\n    for (long n_digits = 1; n_digits\
    \ <= n; ++n_digits) {\n        ret += ones;\n        ones = 9 * ones + p;\n  \
    \      p /= 10;\n    }\n    return ret;\n}\nstatic assert(starts_one_ends(1) ==\
    \ 2);\nstatic assert(starts_one_ends(2) == 2);\nstatic assert(starts_one_ends(3)\
    \ == 3);\nstatic assert(starts_one_ends(4) == 4);\nstatic assert(starts_one_ends(5)\
    \ == 5);\nstatic assert(starts_one_ends(6) == 6);\nstatic assert(starts_one_ends(7)\
    \ == 7);\nstatic assert(starts_one_ends(8) == 8);\nstatic assert(starts_one_ends(9)\
    \ == 9);\nstatic assert(starts_one_ends(10) == 10);\nstatic assert(starts_one_ends(11)\
    \ == 11);\nstatic assert(starts_one_ends(12) == 12);\nstatic assert(starts_one_ends(13)\
    \ == 13);\nstatic assert(starts_one_ends(14) == 14);\nstatic assert(starts_one_ends(15)\
    \ == 15);\nstatic assert(starts_one_ends(16) == 16);\nstatic assert(starts_one_ends(17)\
    \ == 17);\nstatic assert(starts_one_ends(18) == 18);\nstatic assert(starts_one_ends(19)\
    \ == 19);\nstatic assert(starts_one_ends(20) == 20);\nstatic assert(starts_one_ends(21)\
    \ == 21);\nstatic assert(starts_one_ends(22) == 22);\nstatic assert(starts_one_ends(23)\
    \ == 23);\nstatic assert(starts_one_ends(24) == 24);\nstatic assert(starts_one_ends(25)\n\
    unittest\n{\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L)\
    \ == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n\
    \    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) == 18000L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpklynpqd7.d(16): Error: C style cast illegal, use `cast(long)pow(10.0000,
    n - 1)`

    /tmp/tmpklynpqd7.d(49): Error: found `unittest` when expecting `)`

    /tmp/tmpklynpqd7.d(50): Error: found `{` when expecting `;`

    /tmp/tmpklynpqd7.d(53): Error: declaration expected, not `assert`

    /tmp/tmpklynpqd7.d(54): Error: declaration expected, not `assert`

    /tmp/tmpklynpqd7.d(55): Error: declaration expected, not `assert`

    /tmp/tmpklynpqd7.d(56): Error: declaration expected, not `assert`

    /tmp/tmpklynpqd7.d(57): Error: declaration expected, not `assert`

    /tmp/tmpklynpqd7.d(58): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpklynpqd7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164131
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    if (n <= 1)\
    \ \n        return 0;\n    assert(n > 1);\n    // Treating the number as base-10,\
    \ each digit has 10 choices (0-9).\n    // But each digit can only be 1 if that\
    \ digit is the first digit.\n    // So the way I see it, we have 10 choices for\
    \ the first digit, and\n    // 10 choices for the last digit.\n    // But then\
    \ the remaining digits can be anything from 1-9, so we have\n    // 9 choices\
    \ for each of those.\n    long choices = 10 * 10 * pow(9, n - 2);\n    return\
    \ choices;\n}\nlong count_1(long n)\n{\n    long sum = 0;\n    for (long i = 1;\
    \ i <= n; ++i) \n        sum += starts_one_ends(i);\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n\
    \    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L)\
    \ == 1800L);\n    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpuediy_uo.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x427fd1]

    ??:? void tmpuediy_uo.__unittest_L30_C1() [0x427b44]

    ??:? void tmpuediy_uo.__modtest() [0x427c9c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bcf7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab8a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fd1d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4301cc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fca9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab61]

    ??:? runModuleUnitTests [0x42bacd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428420]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164131
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    long n_bits\
    \ = n * (n + 1) / 2;\n    if (n == 1) return 2;\n    long count = 0;\n    foreach\
    \ (i; 1 .. n)\n    {\n        count += (1 << (n_bits - i * (i + 1) / 2));\n  \
    \  }\n    return count;\n}\nunittest\n{\n    alias candidate = starts_one_ends;\n\
    \n    assert(candidate(1L) == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L)\
    \ == 180L);\n    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) ==\
    \ 18000L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpsrq7tuxq.d(24): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dd5]

    ??:? void tmpsrq7tuxq.__unittest_L20_C1() [0x427ab8]

    ??:? void tmpsrq7tuxq.__modtest() [0x427b58]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bafb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a98e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb21]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42faad]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]

    ??:? runModuleUnitTests [0x42b8d1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428224]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164131
- exit_code: -8
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    return n * (n\
    \ - 1) * pow(9, n - 2);\n}\nunittest\n{\n    alias candidate = starts_one_ends;\n\
    \n    assert(candidate(1L) == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L)\
    \ == 180L);\n    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) ==\
    \ 18000L);\n}\nvoid main(){}"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660164131
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    if (n == 1)\n\
    \        return 1;\n    long c = 0;\n    if (n % 2 == 0)\n        c += starts_one_ends(n\
    \ - 1);\n    if (n % 2 == 1)\n        c += starts_one_ends(n - 1) * 9;\n    return\
    \ c;\n}\nunittest\n{\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L)\
    \ == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n\
    \    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) == 18000L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpppa0mpr2.d(25): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dbd]

    ??:? void tmpppa0mpr2.__unittest_L20_C1() [0x427ac1]

    ??:? void tmpppa0mpr2.__modtest() [0x427b40]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bae3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a976]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb09]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffb8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa95]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]

    ??:? runModuleUnitTests [0x42b8b9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42820c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164131
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    long result\
    \ = 0;\n    if (n == 1) {\n        result = 1;\n    } else if (n == 2) {\n   \
    \     result = 11;\n    } else {\n        result = 9;\n        for (long i = 1;\
    \ i < n - 1; i++) {\n            result *= 9;\n        }\n        result += starts_one_ends(n\
    \ - 1);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = starts_one_ends;\n\
    \n    assert(candidate(1L) == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L)\
    \ == 180L);\n    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) ==\
    \ 18000L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp86zz02lq.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dbd]

    ??:? void tmp86zz02lq.__unittest_L25_C1() [0x427ac1]

    ??:? void tmp86zz02lq.__modtest() [0x427b40]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bae3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a976]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb09]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffb8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa95]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]

    ??:? runModuleUnitTests [0x42b8b9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42820c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164131
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n  /*\n      https://oeis.org/A088286\n\
    \      A088286 \t   Number of n-digit numbers starting and ending with 1. \n \
    \                  9 n^2 + n, n >= 1. \n  */\n  if (n == 1) return 9;\n  return\
    \ (n*n + n) * 9;\n}\nlong starts_one_ends_runtime(long n) \n{\n  long ans = 0;\n\
    \  for (long i = 1; i < 10; i++) {\n    for (long j = 1; j < 10; j++) {\n    \
    \  long s = to!string(i^pow(10, n-1));\n      long e = to!string(j^pow(10, n-1));\n\
    \      long m = to!string(i^e);\n      auto a = to!(string[])(m.to!string());\n\
    \      bool valid = true;\n      for (long k = 0; k < a.length; k++) {\n     \
    \   if (a[k] != \"1\") {\n          valid = false;\n          break;\n       \
    \ }\n      }\n      if (valid) {\n        ans++;\n      }\n    }\n  }\n  return\
    \ ans;\n}\nunittest\n{\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L)\
    \ == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n\
    \    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) == 18000L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk5c6fmp5.d(24): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpk5c6fmp5.d(25): Error: template instance `to!string` template `to` is
    not defined, did you mean No?

    /tmp/tmpk5c6fmp5.d(26): Error: template instance `to!string` template `to` is
    not defined, did you mean No?

    /tmp/tmpk5c6fmp5.d(27): Error: template instance `to!(string[])` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk5c6fmp5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164131
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    long[long] fib_one\
    \ = [0:0, 1:1];\nunittest\n{\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L)\
    \ == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n\
    \    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) == 18000L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoz5roczc.d(12): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoz5roczc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164131
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{ \n    long digit,\
    \ result = 0; \n  \n    for (digit = 1; digit <= n; digit++) \n        result\
    \ += (long)pow(10, digit - 1); \n    return result; \n} \nunittest\n{\n    alias\
    \ candidate = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(2L)\
    \ == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L) == 1800L);\n\
    \    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprdb7c9v6.d(14): Error: C style cast illegal, use `cast(long)pow(10,
    digit - 1)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprdb7c9v6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164131
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{ \n    if (n <= 0)\
    \ \n        return 0; \n  \n    // Calculate 10^(n-1)\n    long t = (long)pow(10,\
    \ n - 1); \n  \n    // There are 9 numbers less than 10^(n-1)\n    // that have\
    \ 1 as starting or ending digit.\n    long result = 9; \n  \n    for (long i =\
    \ 2; i <= n; i++) \n    { \n        // For each n, the number of starting or ending\
    \ \n        // digit with 1 will be 9*9^(n-1).\n        result = 9 * result +\
    \ t; \n        t *= 10; \n    } \n  \n    return result; \n} \n/*\n    To understand\
    \ the above code, consider the examples.\n    \n    The number of 1 digit numbers\
    \ that start or end with 1 = 9\n    The number of 2 digit numbers that start or\
    \ end with 1 = 9*9 + 10 = 99\n    The number of 3 digit numbers that start or\
    \ end with 1 = 9*99 + 100 = 999\n    and so on.\n*/\nunittest\n{\n    alias candidate\
    \ = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(2L)\
    \ == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L) == 1800L);\n\
    \    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2hjtf8o1.d(15): Error: C style cast illegal, use `cast(long)pow(10,
    n - 1)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2hjtf8o1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164131
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    long res = 0;\n\
    \    for (long i = 1; i <= n; i++) \n    {\n        res += (long)pow(10,i - 1);\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = starts_one_ends;\n\
    \n    assert(candidate(1L) == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L)\
    \ == 180L);\n    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) ==\
    \ 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl0ukj_cu.d(14): Error: C style cast illegal, use `cast(long)pow(10,
    i - 1)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl0ukj_cu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164131
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    enum: long long\
    \ = 1e9+7;\n    if (n <= 1) return 0;\n    long result = 0;\n    for (long i =\
    \ 1; i < n; i++) \n    {\n        result += powerOf10(i - 1) + powerOf10(n - i\
    \ - 1);\n        result %= mod;\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n \
    \   assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L)\
    \ == 1800L);\n    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl23wqiqt.d(11): Error: use `long` for a 64 bit integer instead
    of `long long`

    /tmp/tmpl23wqiqt.d(11): Error: enum declaration is invalid

    /tmp/tmpl23wqiqt.d(11): Error: found `=` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl23wqiqt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164131
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    return (long)((n\
    \ - 1) * pow(9, n - 1) + pow(10, n - 1));\n}\nunittest\n{\n    alias candidate\
    \ = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(2L)\
    \ == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L) == 1800L);\n\
    \    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkp4vunnh.d(11): Error: C style cast illegal, use `cast(long)((n
    - 1) * pow(9, n - 1) + pow(10, n - 1))`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkp4vunnh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164131
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    long retval;\n\
    \    long n_min_1;\n    long n_min_2;\n    long n_min_3;\n    // If n < 1, return\
    \ 0\n    if (n < 1)\n    {\n        retval = 0;\n    }\n    // If n == 1, return\
    \ 10\n    else if (n == 1)\n    {\n        retval = 10;\n    }\n    // If n ==\
    \ 2, return 55\n    else if (n == 2)\n    {\n        retval = 55;\n    }\n   \
    \ // If n == 3, return 220\n    else if (n == 3)\n    {\n        retval = 220;\n\
    \    }\n    // If n == 4, return 715\n    else if (n == 4)\n    {\n        retval\
    \ = 715;\n    }\n    // Else return starts_one_ends(n-1) + starts_one_ends(n-2)\
    \ + starts_one_ends(n-3)\n    else\n    {\n        n_min_1 = starts_one_ends(n-1);\n\
    \        n_min_2 = starts_one_ends(n-2);\n        n_min_3 = starts_one_ends(n-3);\n\
    \        retval = n_min_1 + n_min_2 + n_min_3;\n    }\n    return retval;\n}\n\
    unittest\n{\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L)\
    \ == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n\
    \    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) == 18000L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp0wal8bgz.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e0d]

    ??:? void tmp0wal8bgz.__unittest_L50_C1() [0x427aec]

    ??:? void tmp0wal8bgz.__modtest() [0x427b8c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb33]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9c6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb59]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430008]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fae5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a99d]

    ??:? runModuleUnitTests [0x42b909]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42825c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164132
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    return (n*(10^(n-1))\
    \ - (10^(n-1) - 1));\n}\nunittest\n{\n    alias candidate = starts_one_ends;\n\
    \n    assert(candidate(1L) == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L)\
    \ == 180L);\n    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) ==\
    \ 18000L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpfpp70521.d(17): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmpfpp70521.__unittest_L13_C1() [0x427a50]

    ??:? void tmpfpp70521.__modtest() [0x427af0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164132
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    if (n == 1)\
    \ return 1;\n    long res = 0;\n    for (long i = 1; i <= n; i++)\n    {\n   \
    \     auto tmp = pow(10, i - 1);\n        res += (tmp - tmp / 10) * 2;\n    }\n\
    \    return res;\n}\nunittest\n{\n    alias candidate = starts_one_ends;\n\n \
    \   assert(candidate(1L) == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L)\
    \ == 180L);\n    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) ==\
    \ 18000L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp82ged0ts.d(25): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ebd]

    ??:? void tmp82ged0ts.__unittest_L20_C1() [0x427b05]

    ??:? void tmp82ged0ts.__modtest() [0x427c3c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbe3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa76]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc09]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300b8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb95]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa4d]

    ??:? runModuleUnitTests [0x42b9b9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42830c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164132
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    long nums =\
    \ 0;\n    long num_of_combs = power(10, n - 1);\n    nums += num_of_combs * n;\
    \ // when 1 starts\n    nums += num_of_combs * n; // when 1 ends\n    return nums;\n\
    }\nunittest\n{\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L)\
    \ == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n\
    \    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) == 18000L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaf3m6fbg.d(12): Error: undefined identifier `power`, did you mean
    template `pow(F, G)(F x, G n) if (isFloatingPoint!F && isIntegral!G)`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaf3m6fbg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164131
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    long result;\n\
    \    long zero = 0;\n    long one = 1;\n    long nine = 9;\n    if (n <= one)\
    \ {\n        result = one;\n    } else {\n        result = zero;\n        foreach\
    \ (i; 0 .. n - 1) {\n            result += nine * 10 ** i;\n        }\n      \
    \  result += 10 ** (n - 1);\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(2L)\
    \ == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L) == 1800L);\n\
    \    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpub0_usq4.d(20): Error: can only `*` a pointer, not a `long`

    /tmp/tmpub0_usq4.d(22): Error: can only `*` a pointer, not a `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpub0_usq4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164131
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    if (n == 1)\n\
    \        return 1;\n    // lets build a graph: one node for each digit\n    //\
    \ number of nodes = 10\n    // we can't have a cycle of odd length, so we can't\
    \ have a cycle\n    // of length 5.\n    // number of edges is the number of ways\
    \ you can start and end with 1\n    long[long] adjs;\n    foreach (e1; 0 .. 9)\
    \ {\n        foreach (e2; 0 .. 9) {\n            adjs[e1] ~= e2;\n        }\n\
    \    }\n    foreach (e1; 0 .. 9) {\n        adjs[e1] ~= 1;\n    }\n    foreach\
    \ (e1; 0 .. 9) {\n        adjs[1] ~= e1;\n    }\n    // we need a data structure\
    \ that can hold a queue of items\n    // and a set of visited items.\n    // It\
    \ is essentially a BFS search through the graph.\n    long[long][long] adj_list;\n\
    \    long[long] visited;\n    long[long] result;\n    long count = 0;\n    //std.conv.to!(long)(\"\
    1234\");\n    foreach (n1; 0 .. 9) {\n        auto res = std.conv.to!(long)(\"\
    1\" ~ n1);\n        visited[res] = true;\n        result[count] = res;\n     \
    \   count += 1;\n    }\n    //foreach (i; 0 .. 9) {\n    //    writeln(i);\n \
    \   //}\n    // this is a queue\n    //while (count < n) {\n    //    for (long\
    \ i = 0; i < count; i++) {\n    //        long c_num = result[i];\n    //    \
    \    c_num *= 10;\n    //        long r_num = result[i] % 10;\n    //        long\
    \ c_r_num = c_num + r_num;\n    //        visited[c_r_num] = true;\n    //   \
    \     result[count] = c_r_num;\n    //        count += 1;\n    //    }\n    //}\n\
    \    //\nunittest\n{\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L)\
    \ == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n\
    \    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) == 18000L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl7610zgk.d(60): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl7610zgk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164131
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    return n % 10\
    \ == 1 ? n + 9 : n;\n}\nunittest\n{\n    alias candidate = starts_one_ends;\n\n\
    \    assert(candidate(1L) == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L)\
    \ == 180L);\n    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) ==\
    \ 18000L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpp1ke9kny.d(17): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmpp1ke9kny.__unittest_L13_C1() [0x427a4c]

    ??:? void tmpp1ke9kny.__modtest() [0x427aec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164132
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    if (n <= 1)\
    \ return 0;\n    return (n*9-9)/2;\n}\nunittest\n{\n    alias candidate = starts_one_ends;\n\
    \n    assert(candidate(1L) == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L)\
    \ == 180L);\n    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) ==\
    \ 18000L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpugegp2ea.d(18): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d75]

    ??:? void tmpugegp2ea.__unittest_L14_C1() [0x427a54]

    ??:? void tmpugegp2ea.__modtest() [0x427af4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba9b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a92e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff70]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa4d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a905]

    ??:? runModuleUnitTests [0x42b871]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281c4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164132
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    if (n < 1) \n\
    \        return 0;\n    return (10 - n) * pow(9, n - 1);\n}\nunittest\n{\n   \
    \ alias candidate = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n   \
    \ assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L)\
    \ == 1800L);\n    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpr3ggw68q.d(19): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e85]

    ??:? void tmpr3ggw68q.__unittest_L15_C1() [0x427aac]

    ??:? void tmpr3ggw68q.__modtest() [0x427c04]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa3e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbd1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430080]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa15]

    ??:? runModuleUnitTests [0x42b981]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164132
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    return (n >\
    \ 1) ? (4 * std.math.pow(3, n - 2)) : 1;\n}\nunittest\n{\n    alias candidate\
    \ = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(2L)\
    \ == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L) == 1800L);\n\
    \    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3x0rpwzo.d(18): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e65]

    ??:? void tmp3x0rpwzo.__unittest_L13_C1() [0x427ab1]

    ??:? void tmp3x0rpwzo.__modtest() [0x427be8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa1e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbb1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430060]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f5]

    ??:? runModuleUnitTests [0x42b961]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164132
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    long res = 0;\n\
    \    for (long i = 0; i < n; i++) \n    {\n        auto comb = pow(2, i);\n  \
    \      auto num_comb = pow(2, n-i-1);\n        res += num_comb * comb;\n    }\n\
    \    return res;\n}\nunittest\n{\n    alias candidate = starts_one_ends;\n\n \
    \   assert(candidate(1L) == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L)\
    \ == 180L);\n    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) ==\
    \ 18000L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmptsp52qn6.d(25): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e9d]

    ??:? void tmptsp52qn6.__unittest_L20_C1() [0x427ae5]

    ??:? void tmptsp52qn6.__modtest() [0x427c1c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbc3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa56]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbe9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430098]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb75]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa2d]

    ??:? runModuleUnitTests [0x42b999]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282ec]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164132
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    assert(n >=\
    \ 0);\n    if (n == 0) return 0;\n    else return n*pow(10, n-1);\n}\nunittest\n\
    {\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n\
    \    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L)\
    \ == 1800L);\n    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjt3yxksn.d(20): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f71]

    ??:? void tmpjt3yxksn.__unittest_L15_C1() [0x427b05]

    ??:? void tmpjt3yxksn.__modtest() [0x427c3c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc97]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab2a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fcbd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43016c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc49]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]

    ??:? runModuleUnitTests [0x42ba6d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4283c0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164132
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    long res = 0;\n\
    \    //\n    // This is a straightforward use of std.math.pow, but as we're working\n\
    \    // with possibly very large numbers, we use std.math.BigInt to do the\n \
    \   // arithmetic.\n    //\n    auto start = BigInt(10).pow(n-1);\n    auto end\
    \ = BigInt(10).pow(n-2);\n    //\n    // We have n-1 different n-digit numbers\
    \ that start with 1.\n    //\n    res += n-1;\n    //\n    // And we have n-2\
    \ different n-digit numbers that end with 1.\n    //\n    res += n-2;\n    //\n\
    \    // To deal with large numbers, we need to use std.math.pow with BigInt,\n\
    \    // but we can't use std.math.pow with BigInt directly. We need to convert\n\
    \    // the BigInt back to a double.\n    //\n    res += cast(long)start.pow(n-1)\
    \ - end.pow(n-1);\n    return res;\n}\n//\n// The output from the line below should\
    \ be:\n//\n//   100\n//\nstatic assert(starts_one_ends(3) == 100);\n//\n// To\
    \ compute the number of positive integers with n digits that end with 1\n// we\
    \ have the following function that recursively computes the number.\n//\nlong\
    \ ends_one(long n) \n{\n    if (n == 0)\n        return 0;\n    else if (n ==\
    \ 1)\n        return 1;\n    else\n        return 9*ends_one(n-1) + 10.pow(n-2);\n\
    }\n//\n// And the output from the line below should be:\n//\n//   7\n//\nstatic\
    \ assert(ends_one(2) == 7);\n//\n// We can also compute the number of positive\
    \ integers with n digits that\n// start with 1.\n//\nlong starts_one(long n) \n\
    {\n    if (n == 0)\n        return 0;\n    else if (n == 1)\n        return 1;\n\
    \    else\n        return starts_one(n-1) + ends\nunittest\n{\n    alias candidate\
    \ = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(2L)\
    \ == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L) == 1800L);\n\
    \    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5rwr5omz.d(72): Error: found `unittest` when expecting `;` following
    `return` statement

    /tmp/tmp5rwr5omz.d(82): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5rwr5omz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164131
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    long ctr = 0;\n\
    \    long xx = 0;\n    foreach(i;iota(n)) {\n        assert(i<n);\n        xx\
    \ = xx*10+1;\n        assert(xx>=1);\n        assert(xx<=pow(10L,n));\n      \
    \  ctr += xx;\n    }\n    assert(xx == pow(10L,n-1));\n    return ctr;\n}\nunittest\n\
    {\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n\
    \    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L)\
    \ == 1800L);\n    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwu2_w94i.d(13): Error: undefined identifier `iota`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwu2_w94i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164131
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{ \n    long count\
    \ = 0;\n    long x = (long)pow(10, n-1);\n    long y = (long)pow(10, n);\n   \
    \ foreach(i; 2 .. y)\n    {\n        if(i >= x && i <= y)\n        {\n       \
    \     if(i % 10 == 1)\n            {\n                count++;\n            }\n\
    \        }\n    }\n    return count;\n} \nunittest\n{\n    alias candidate = starts_one_ends;\n\
    \n    assert(candidate(1L) == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L)\
    \ == 180L);\n    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) ==\
    \ 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_k6yw288.d(12): Error: C style cast illegal, use `cast(long)pow(10,
    n - 1)`

    /tmp/tmp_k6yw288.d(13): Error: C style cast illegal, use `cast(long)pow(10, n)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_k6yw288.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164131
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    assert(n > 0,\
    \ \"n must be a positive number\");\n    if (n == 1)\n        return 1;\n    long\
    \ high = (n * 10 ** (n - 1));\n    long low = pow(10, n - 1);\n    long c = high\
    \ - low;\n    c += starts_one_ends(n - 1);\n    return c;\n}\nunittest\n{\n  \
    \  alias candidate = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n  \
    \  assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L)\
    \ == 1800L);\n    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp48vw5wf.d(14): Error: can only `*` a pointer, not a `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp48vw5wf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164131
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    assert(n > 0);\n\
    \    /*\n        If n is even, the \"ones\" have to come in pairs. The other\n\
    \        digits are then free to be chosen in 10 ways.\n        \n        If n\
    \ is odd, then it's the other way around.\n    */\n    long offset = (n % 2) *\
    \ 10;\n    return 10 * pow(10, (n - 1) / 2) + offset;\n}\nunittest\n{\n    alias\
    \ candidate = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(2L)\
    \ == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L) == 1800L);\n\
    \    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp296kklbf.d(25): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f89]

    ??:? void tmp296kklbf.__unittest_L21_C1() [0x427b00]

    ??:? void tmp296kklbf.__modtest() [0x427c58]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bcaf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab42]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fcd5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430184]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc61]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab19]

    ??:? runModuleUnitTests [0x42ba85]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4283d8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164132
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{ \n    if (n == 1)\
    \ return 2; \n    if (n == 2) return 6; \n    return pow(n - 1, 2) + 2 * pow(n\
    \ - 1, 3); \n}\nunittest\n{\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L)\
    \ == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n\
    \    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) == 18000L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmplgvw27gz.d(19): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e75]

    ??:? void tmplgvw27gz.__unittest_L15_C1() [0x427ac0]

    ??:? void tmplgvw27gz.__modtest() [0x427bf8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430070]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb4d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa05]

    ??:? runModuleUnitTests [0x42b971]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164132
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    enum long inf\
    \ = n == 1 ? 1 : pow(10, n - 1);\n    enum long sup = pow(10, n);\n    long range\
    \ = sup - inf;\n    /*\n        Compute this by multiplying the number of possibilities\
    \ with the first\n        digit and then removing the numbers that begin and end\
    \ with 1, which\n        happen in a period of length 1 (for any number of digits).\n\
    \    */\n    return 9 * range - (n + 1);\n}\n/*\nunittest\n{\n    alias candidate\
    \ = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(2L)\
    \ == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L) == 1800L);\n\
    \    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaa_3epj5.d(21): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaa_3epj5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164131
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    /*\n       \
    \ given a n-digit number, if the first digit is 1, the rest of the\n        number\
    \ has n-1 digits, so the count is 9*10^(n-2), since the first\n        digit of\
    \ the numbers is 1.\n        When the last digit is 1, the first digit has n-1\
    \ digits, so the\n        count is 10^(n-1).\n        The total is 9*10^(n-2)\
    \ + 10^(n-1).\n    */\n    return 9*(long)pow(10, n-2) + (long)pow(10, n-1);\n\
    }\nunittest\n{\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L)\
    \ == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n\
    \    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) == 18000L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprxzaotlx.d(19): Error: C style cast illegal, use `cast(long)pow(10,
    n - 2)`

    /tmp/tmprxzaotlx.d(19): Error: C style cast illegal, use `cast(long)pow(10, n
    - 1)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprxzaotlx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164131
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    if (n <= 0)\n\
    \        return 0;\n    long sum = 1;\n    long aux = 1;\n    for (long i = 1;\
    \ i < n; i++) {\n        aux *= 10;\n        sum += aux;\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L)\
    \ == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n\
    \    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) == 18000L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmplgu2msx5.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d95]

    ??:? void tmplgu2msx5.__unittest_L21_C1() [0x427a95]

    ??:? void tmplgu2msx5.__modtest() [0x427b14]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42babb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a94e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fae1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff90]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa6d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a925]

    ??:? runModuleUnitTests [0x42b891]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164132
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{ \n    if (n==1) \n\
    \        return 2; \n    if (n==2) \n        return 3; \n    return starts_one_ends(n-1)\
    \ + starts_one_ends(n-2); \n} \nunittest\n{\n    alias candidate = starts_one_ends;\n\
    \n    assert(candidate(1L) == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L)\
    \ == 180L);\n    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) ==\
    \ 18000L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4sdk_7sy.d(21): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d9d]

    ??:? void tmp4sdk_7sy.__unittest_L17_C1() [0x427a7c]

    ??:? void tmp4sdk_7sy.__modtest() [0x427b1c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bac3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a956]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fae9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff98]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa75]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]

    ??:? runModuleUnitTests [0x42b899]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281ec]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164132
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    if (n < 0)\n\
    \        return 0;\n    if (n == 0)\n        return 1;\n    //start with 1\n \
    \   if (n > 1)\n        return starts_one_ends(n - 1) + starts_one_ends(n - 2);\n\
    \    return 0;\n}\nunittest\n{\n    alias candidate = starts_one_ends;\n\n   \
    \ assert(candidate(1L) == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L)\
    \ == 180L);\n    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) ==\
    \ 18000L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpq7krrvre.d(24): unittest failure

    ----------------

    ??:? _d_unittestp [0x427da5]

    ??:? void tmpq7krrvre.__unittest_L20_C1() [0x427a88]

    ??:? void tmpq7krrvre.__modtest() [0x427b28]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bacb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a95e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42faf1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffa0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa7d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a935]

    ??:? runModuleUnitTests [0x42b8a1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164132
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    long count =\
    \ 0;\n    auto N = cast(real) n;\n    if (n & 1)\n    {\n        //odd\n     \
    \   count = count + (1.0 / (N * N)) * pow(10.0, n - 1);\n    }\n    else\n   \
    \ {\n        //even\n        count = count + (1.0 / (N * N)) * pow(10.0, n);\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = starts_one_ends;\n\
    \n    assert(candidate(1L) == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L)\
    \ == 180L);\n    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) ==\
    \ 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp19_edcz1.d(16): Error: cannot implicitly convert expression `cast(real)count
    + 1.00000L / (N * N) * cast(real)pow(10.0000, n - 1L)` of type `real` to `long`

    /tmp/tmp19_edcz1.d(21): Error: cannot implicitly convert expression `cast(real)count
    + 1.00000L / (N * N) * cast(real)pow(10.0000, n)` of type `real` to `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp19_edcz1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164132
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    if (n == 1)\
    \ \n        return 1;\n    \n    if (n == 2) \n        return 3;\n    \n    if\
    \ (n == 3) \n        return 5;\n    \n    if (n > 3) \n        return (starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2) + starts_one_ends(n - 3));\n    \n    return -1;\n\
    }\n/*\n    Given a positive integer n, return the count of the numbers of n-digit\n\
    \    positive integers that neither starts or ends with 1.\n*/\nlong one_middle(long\
    \ n) \n{\n    if (n == 1) \n        return 0;\n    \n    if (n == 2) \n      \
    \  return 0;\n    \n    if (n == 3) \n        return 4;\n    \n    if (n > 3)\
    \ \n        return (starts_one_ends(n - 1) + starts_one_ends(n - 2) + starts_one_ends(n\
    \ - 3));\n    \n    return -1;\n}\n/*\n    Given a positive integer n, return\
    \ the count of the numbers of n-digit\n    positive integers that neither starts\
    \ or ends with 1.\n*/\nlong neither_starts_one_ends(long n) \n{\n    if (n ==\
    \ 1) \n        return 0;\n    \n    if (n == 2) \n        return 1;\n    \n  \
    \  if (n == 3) \n        return 3;\n    \n    if (n > 3) \n        return (neither_starts_one_ends(n\
    \ - 1) + neither_starts_one_ends(n - 2) + neither_starts_one_ends(n - 3));\n \
    \   \n    return -1;\n}\n/*\n    Given a positive integer n, return the count\
    \ of the numbers of n-digit\n    positive integers that don't start with 1.\n\
    */\nlong no_start_one(long n) \n{\n    if (n == 1) \n        return 0;\n    \n\
    \    if (n == 2) \n        return 1;\n    \n    if (n == 3) \n        return 3\n\
    unittest\n{\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L)\
    \ == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n\
    \    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) == 18000L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9c6xz2xs.d(79): Error: found `unittest` when expecting `;` following
    `return` statement

    /tmp/tmp9c6xz2xs.d(89): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9c6xz2xs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164132
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    long sum = 0;\n\
    \    for (long i = 1; i < n; i++) {\n        sum += (i+1) * pow(9, i);\n    }\n\
    \    sum += pow(9, n);\n    return sum;\n}\nunittest\n{\n    alias candidate =\
    \ starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(2L)\
    \ == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L) == 1800L);\n\
    \    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4vg70ev0.d(22): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ead]

    ??:? void tmp4vg70ev0.__unittest_L18_C1() [0x427ad4]

    ??:? void tmp4vg70ev0.__modtest() [0x427c2c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbd3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa66]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbf9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300a8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb85]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa3d]

    ??:? runModuleUnitTests [0x42b9a9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282fc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164132
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    long start_one\
    \ = pow(10, n - 1);\n    long ans = start_one;\n    long dp = 1;\n    long left\
    \ = 9;\n    long right = 9;\n    while (left > 0) \n    {\n        dp *= (left\
    \ + right);\n        dp /= right;\n        ans += dp;\n        right--;\n    \
    \    left--;\n    }\n    return ans;\n}\nunittest\n{\n    alias candidate = starts_one_ends;\n\
    \n    assert(candidate(1L) == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L)\
    \ == 180L);\n    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) ==\
    \ 18000L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpf7gfatxh.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ead]

    ??:? void tmpf7gfatxh.__unittest_L26_C1() [0x427ad4]

    ??:? void tmpf7gfatxh.__modtest() [0x427c2c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbd3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa66]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbf9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300a8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb85]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa3d]

    ??:? runModuleUnitTests [0x42b9a9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282fc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164132
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n\tlong pow10 = pow(10,\
    \ n - 1);\n\treturn (9L * pow10) + (9L * (n - 1) * pow10 / 10);\n}\nunittest\n\
    {\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n\
    \    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L)\
    \ == 1800L);\n    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpep8nhk6c.d(18): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e85]

    ??:? void tmpep8nhk6c.__unittest_L14_C1() [0x427ab0]

    ??:? void tmpep8nhk6c.__modtest() [0x427c08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa3e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbd1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430080]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa15]

    ??:? runModuleUnitTests [0x42b981]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164132
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    long sum = 0;\n\
    \    if (n == 1)\n        return 2;\n    else \n    {\n        foreach (i; 1 ..\
    \ n)\n        {\n            sum += starts_one_ends(n - i) * (long)Math.pow(3,\
    \ i - 1);\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(2L)\
    \ == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L) == 1800L);\n\
    \    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8si1gt_a.d(18): Error: C style cast illegal, use `cast(long)Math.pow(3,
    i - 1)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8si1gt_a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164132
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{ \n    return n *\
    \ (long)pow(10, n - 1); \n} \nunittest\n{\n    alias candidate = starts_one_ends;\n\
    \n    assert(candidate(1L) == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L)\
    \ == 180L);\n    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) ==\
    \ 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnrltulus.d(11): Error: C style cast illegal, use `cast(long)pow(10,
    n - 1)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnrltulus.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164132
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    // the count\
    \ of n-digit numbers that start with 1 is 10**(n-1)\n    // the count of n-digit\
    \ numbers that end with 1 is also 10**(n-1)\n    // but we counted such numbers\
    \ twice, so we must subtract them once\n    // but we counted numbers that start\
    \ and end with 1 only once, so we\n    // must add them again\n    // such numbers\
    \ are 9 times 10**(n-2)\n    // so it is the sum of those quantities and the answer\
    \ is\n    return 2 * pow(10, n - 1) - pow(10, n - 2);\n}\n \n/*\nunittest\n{\n\
    \    alias candidate = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n\
    \    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L)\
    \ == 1800L);\n    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr3u8038t.d(21): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr3u8038t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164132
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    /* \n      \
    \  assert(n > 0);\n        If we have n, let's generate n-digit numbers\n    \
    \    with no restriction whatsoever, then find\n        the number that starts\
    \ with one and end with one\n    */\n    long i, j, k, result = 0;\n    if (n\
    \ == 1)\n        return 9;\n    // First generate a range of numbers between 1\
    \ and 10^n\n    auto nums = iota(1L, pow(10L, n)).map!(to!long).array;\n    foreach\
    \ (num; nums)\n    {\n        // Checking if they start with 1\n        auto temp\
    \ = num;\n        while (temp > 0)\n        {\n            j = temp % 10;\n  \
    \          temp /= 10;\n            if (j == 1)\n            {\n             \
    \   // increment result if the number ends with 1 as well\n                if\
    \ (temp % 10 == 1)\n                    result++;\n                break;\n  \
    \          }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(2L)\
    \ == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L) == 1800L);\n\
    \    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk0046j_8.d(21): Error: undefined identifier `iota`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk0046j_8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164132
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    assert(n>0);\n\
    \    // number of n-digit positive integers that starts or ends with 1\n    return\
    \ n*9*pow(10,n-1);\n}\n/*\nunittest\n{\n    alias candidate = starts_one_ends;\n\
    \n    assert(candidate(1L) == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L)\
    \ == 180L);\n    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) ==\
    \ 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxga2jkkl.d(15): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxga2jkkl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164132
- exit_code: -8
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    /*\n    Notes:\n\
    \    - notice that the result is (n * pow(10, n - 1)) + (n * pow(10, n - 2))\n\
    \    - notice that the same pattern appears if you write out the results for\n\
    \      all values of n\n    */\n    return (n * pow(10L, n - 1)) + (n * pow(10L,\
    \ n - 2));\n}\nunittest\n{\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L)\
    \ == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n\
    \    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) == 18000L);\n}\n\
    void main(){}"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660164132
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    if (n <= 1)\n\
    \        return 1;\n    return pow(10, n - 1) + pow(10, n - 2) * 9;\n}\nlong ends_one_starts(long\
    \ n)\n{\n    if (n <= 1)\n        return 1;\n    return pow(10, n - 1) + pow(10,\
    \ n - 2) * 9;\n}\nunittest\n{\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L)\
    \ == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n\
    \    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) == 18000L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmphj8jufzo.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f1d]

    ??:? void tmphj8jufzo.__unittest_L21_C1() [0x427b69]

    ??:? void tmphj8jufzo.__modtest() [0x427ca0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aad6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc69]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430118]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbf5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aaad]

    ??:? runModuleUnitTests [0x42ba19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42836c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164132
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    if (n <= 1)\
    \ return 0;\n    long b = (long)pow(10, n - 1);\n    long e = (long)pow(10, n);\n\
    \    long a = (e - b) / 9;\n    return n * a;\n}\n/*\nunittest\n{\n    alias candidate\
    \ = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(2L)\
    \ == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L) == 1800L);\n\
    \    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq4_tczjg.d(12): Error: C style cast illegal, use `cast(long)pow(10,
    n - 1)`

    /tmp/tmpq4_tczjg.d(13): Error: C style cast illegal, use `cast(long)pow(10, n)`

    /tmp/tmpq4_tczjg.d(17): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq4_tczjg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164132
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{ \n    long ans =\
    \ 0;\n    long val = pow(10, n - 1);\n    long ten = 10;\n    while (val >= ten)\
    \ {\n        ans += (val / ten);\n        val = val / ten;\n    }\n    return\
    \ ans * 2;\n}\nunittest\n{\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L)\
    \ == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n\
    \    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) == 18000L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpuq45ip7m.d(24): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e8d]

    ??:? void tmpuq45ip7m.__unittest_L20_C1() [0x427ab8]

    ??:? void tmpuq45ip7m.__modtest() [0x427c10]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbb3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa46]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbd9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430088]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb65]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa1d]

    ??:? runModuleUnitTests [0x42b989]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282dc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164132
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    long res = 0;\n\
    \    long start = 1;\n    for (long i = 0; i < n; i++)\n        start *= 10;\n\
    \    long end = start * 10 - 1;\n    for (long i = start; i <= end; i++)\n   \
    \ {\n        auto digits = to!string(i);\n        if (digits[0] == '1' || digits[$-1]\
    \ == '1')\n            res++;\n    }\n    return res;\n}\nunittest\n{\n    alias\
    \ candidate = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(2L)\
    \ == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L) == 1800L);\n\
    \    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr6g5_ksz.d(18): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr6g5_ksz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164132
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    long one_count\
    \ = 1;\n    for (int i = 1; i < n; i++) {\n        one_count *= 10;\n    }\n \
    \   return one_count * 2;\n}\nunittest\n{\n    alias candidate = starts_one_ends;\n\
    \n    assert(candidate(1L) == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L)\
    \ == 180L);\n    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) ==\
    \ 18000L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmptcedmeau.d(21): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d85]

    ??:? void tmptcedmeau.__unittest_L17_C1() [0x427a64]

    ??:? void tmptcedmeau.__modtest() [0x427b04]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a93e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff80]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]

    ??:? runModuleUnitTests [0x42b881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164132
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    long D = 10,\
    \ P = 1;\n    long c1 = 0, c2 = 0;\n    while (D <= n) {\n        P *= 10;\n \
    \       c1 += P;\n        c2 += P;\n        if (D == n) c2 -= P / 10;\n      \
    \  D++;\n    }\n    return c1 + c2;\n}\nunittest\n{\n    alias candidate = starts_one_ends;\n\
    \n    assert(candidate(1L) == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L)\
    \ == 180L);\n    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) ==\
    \ 18000L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmph8wcw5m7.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dbd]

    ??:? void tmph8wcw5m7.__unittest_L22_C1() [0x427aa0]

    ??:? void tmph8wcw5m7.__modtest() [0x427b40]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bae3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a976]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb09]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffb8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa95]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]

    ??:? runModuleUnitTests [0x42b8b9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42820c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164132
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    long res = 0;\n\
    \    long d = pow(10, n);\n    res += long(log10(d-1));\n    res += n * (long(log10(d/10))\
    \ + 1);\n    res += 1;\n    return res;\n}\n/*\nunittest\n{\n    alias candidate\
    \ = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(2L)\
    \ == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L) == 1800L);\n\
    \    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppt0_ip2j.d(18): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppt0_ip2j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164132
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    /*\n       \
    \ Approach:\n        We can find the answer directly through a closed formula:\n\
    \        10^(n-1) + 9*9^(n-1)\n        To derive this, consider the fact that,\n\
    \        Any number that begins with 1, has 9 choices for the last digit.\n  \
    \      Any number that does not start with 1, has 8 choices for the last digit.\n\
    \        Therefore, for any n-digit number, the number of choices for the last\
    \ digit\n        is 9 if the number starts with 1 and 8 otherwise.\n        Now,\
    \ since the problem asks for the sum of numbers that start or end with 1,\n  \
    \      we can split it into the case where the number starts with 1 and the case\
    \ where\n        it ends with 1.\n        Let the number of n-digit numbers that\
    \ start with 1 be S.\n        The number of n-digit numbers that end with 1, can\
    \ be derived by considering\n        all the n-digit numbers that start with 1.\n\
    \        By simply multiplying 9^(n-1) by 9 (1 for the starting digit and 9 for\
    \ the last digit),\n        we get all the n-digit numbers that end with 1.\n\
    \        Therefore, the answer is S + 9*9^(n-1).\n        Since we do not need\
    \ to account for a number that starts and ends with 1,\n        we can subtract\
    \ 1 from the answer.\n        Therefore, the final formula is,\n        S + 9*9^(n-1)\
    \ - 1\n        Now, S can be split into two cases. The numbers that start with\
    \ 1 and have \n        1 as the last digit and the numbers that start with 1 and\
    \ don't have 1 as the\n        last digit.\n        Therefore,\n        S = 1\
    \ + 8*9^(n-2)\n        Plugging this into the above formula, we get the final\
    \ answer as,\n        10^(n-1) + 9*9^(n-1)\n        Now this formula has a potential\
    \ overflow problem as n can be as large as 10^5.\n        Therefore, we need to\
    \ use BigInts.\n    */\n    return BigInt(10)^(n-1) + BigInt(9)*BigInt(9)^(n-1);\n\
    }\n/*\n    Given an array A of integers, for\nunittest\n{\n    alias candidate\
    \ = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(2L)\
    \ == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L) == 1800L);\n\
    \    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp734jefdn.d(45): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp734jefdn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164132
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    n = n - 1;\n\
    \    //  0 1 2 3 4 5 6 7 8 9\n    auto dp = [long[][10](), long[][10]()];\n  \
    \  dp[0][0] = 1;\n    dp[1][0] = 1;\n    for (auto i = 1; i <= n; i++) {\n   \
    \     for (auto j = 0; j < 10; j++) {\n            if (j == 0) {\n           \
    \     dp[0][j] = dp[1][j];\n                dp[1][j] = dp[0][j + 1];\n       \
    \     } else if (j == 9) {\n                dp[0][j] = dp[0][j - 1];\n       \
    \         dp[1][j] = dp[1][j - 1];\n            } else {\n                dp[0][j]\
    \ = dp[0][j - 1] + dp[0][j + 1];\n                dp[1][j] = dp[1][j - 1] + dp[1][j\
    \ + 1];\n            }\n        }\n    }\n    auto ans = 0;\n    for (auto j =\
    \ 0; j < 10; j++) {\n        ans += dp[0][j] + dp[1][j];\n    }\n    return ans;\n\
    }\nunittest\n{\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L)\
    \ == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n\
    \    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) == 18000L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp40b6yqc_.d(13): Error: found `[` when expecting `.` following long

    /tmp/tmp40b6yqc_.d(13): Error: found `]` when expecting identifier following `long`.

    /tmp/tmp40b6yqc_.d(13): Error: found `[` when expecting `.` following long

    /tmp/tmp40b6yqc_.d(13): Error: found `]` when expecting identifier following `long`.

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp40b6yqc_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164132
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    if (n == 1)\
    \ return 10;\nunittest\n{\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L)\
    \ == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n\
    \    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) == 18000L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpth96n1v4.d(12): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpth96n1v4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164132
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    long i = 0;\n\
    \    long num = 0;\n    if (n == 1)\n        return 10;\n    else \n    {\n  \
    \      foreach (i; 0 .. 10)\n        {\n            num += starts_one_ends(n -\
    \ 1);\n        }\n        return num;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(2L)\
    \ == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L) == 1800L);\n\
    \    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb7teqq3_.d(17): Error: variable `i` is shadowing variable `tmpb7teqq3_.starts_one_ends.i`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb7teqq3_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164132
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    if (n == 1)\n\
    \        return 1;\n    else\n        return 9 * pow(10, n - 1) + 10 * pow(10,\
    \ n - 2);\n}\nunittest\n{\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L)\
    \ == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n\
    \    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) == 18000L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpiftkgsuj.d(21): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e95]

    ??:? void tmpiftkgsuj.__unittest_L16_C1() [0x427ae1]

    ??:? void tmpiftkgsuj.__modtest() [0x427c18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbe1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430090]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb6d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa25]

    ??:? runModuleUnitTests [0x42b991]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164132
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    // Mask the\
    \ last bit\n    long n_ones = n & 1;\n    // Check the number of ones using\n\
    \    // K&R's method to count the number of\n    // 1 bits.\n    while(n != 0)\
    \ {\n        // n_ones++\n        n_ones++;\n        // n = n / 2\n        n >>=\
    \ 1;\n    }\n    // Subtract one 1 to account for the first bit\n    return n_ones\
    \ - 1;\n}\nunittest\n{\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L)\
    \ == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n\
    \    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) == 18000L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu80mbcsn.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d7d]

    ??:? void tmpu80mbcsn.__unittest_L25_C1() [0x427a7d]

    ??:? void tmpu80mbcsn.__modtest() [0x427afc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baa3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a936]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff78]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa55]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a90d]

    ??:? runModuleUnitTests [0x42b879]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281cc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164132
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    return n * n;\n\
    }\nunittest\n{\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L)\
    \ == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n\
    \    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) == 18000L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpq8nyey5g.d(18): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d55]

    ??:? void tmpq8nyey5g.__unittest_L13_C1() [0x427a59]

    ??:? void tmpq8nyey5g.__modtest() [0x427ad8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba7b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a90e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42faa1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff50]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa2d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8e5]

    ??:? runModuleUnitTests [0x42b851]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281a4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164132
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    if (n == 1)\
    \ \n        return 2;\n    return (11 - n) * pow(10, n - 2) + starts_one_ends(n\
    \ - 1);\n}\nunittest\n{\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L)\
    \ == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n\
    \    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) == 18000L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8fe8l_d.d(19): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ea5]

    ??:? void tmpy8fe8l_d.__unittest_L15_C1() [0x427ad0]

    ??:? void tmpy8fe8l_d.__modtest() [0x427c28]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbcb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa5e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbf1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb7d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa35]

    ??:? runModuleUnitTests [0x42b9a1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164132
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    if (n == 1)\
    \ return 1;\nunittest\n{\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L)\
    \ == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n\
    \    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) == 18000L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkp5utdwh.d(12): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkp5utdwh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164132
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    import std.math\
    \ : isPrime;\n    import std.bitmanip : ones;\n    import std.algorithm : map,\
    \ filter, count;\n    import std.range : cycle, retro;\n    import std.range :\
    \ take, takeExactly, drop;\n    import std.range : iota, chunk;\n    import std.conv\
    \ : to;\n    import std.string : format;\n    import std.algorithm : count;\n\
    \    import std.algorithm : partition;\n    import std.algorithm : equal;\n  \
    \  import std.math : sqrt;\n    import std.typecons : tuple;\n    import std.array\
    \ : array;\n    import std.bigint : BigInt;\n    import std.algorithm : equal;\n\
    \    import std.range : take;\n    import std.range : cycle;\n    import std.bitmanip\
    \ : reverseBits;\n    import std.array : array;\n    import std.math : pow;\n\
    \    import std.typecons : tuple;\n    import std.algorithm : sum;\n    import\
    \ std.algorithm : max;\n    import std.algorithm : zip;\n    import std.range\
    \ : retro;\n    import std.range : chunk;\n    import std.range : drop;\n    import\
    \ std.range : take;\n    import std.range : cycle;\n    import std.range : retro;\n\
    \    import std.range : drop;\n    import std.range : take;\n    import std.range\
    \ : cycle;\n    import std.range : retro;\n    import std.range : drop;\n    import\
    \ std.range : take;\n    import std.range : cycle;\n    import std.range : retro;\n\
    \    import std.range : drop;\n    import std.range : take;\n    import std.range\
    \ : cycle;\n    import std.range : retro;\n    import std.range : drop;\n    import\
    \ std.range : take;\n    import std.range : cycle;\n    import std.range : retro;\n\
    \    import std.range : drop;\n    import std.range : take;\n    import std.range\
    \ : cycle;\n    import std.range : retro;\n    import std.range : drop;\n    import\
    \ std.range : take\nunittest\n{\n    alias candidate = starts_one_ends;\n\n  \
    \  assert(candidate(1L) == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L)\
    \ == 180L);\n    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) ==\
    \ 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbrqg4vr5.d(64): Error: `;` expected

    /tmp/tmpbrqg4vr5.d(74): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbrqg4vr5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164132
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    long ret;\n\
    \    long n2;\n    long n3;\n    long dp;\n    n2 = n / 2;\n    n3 = n - n2;\n\
    \    ret = pow(3, n3);\n    dp = pow(2, n2 - 1);\n    if (n % 2 == 0)\n      \
    \  ret += dp;\n    else\n        ret += 2 * dp;\n    return ret;\n}\n/*\nunittest\n\
    {\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n\
    \    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L)\
    \ == 1800L);\n    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpszpkl5jw.d(25): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpszpkl5jw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164132
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    long max_value\
    \ = (long)pow(10, n);\n    long value = 10;\n    long count = 0;\n    // Start\
    \ with 10, that is the smallest n-digit number that starts or ends\n    // with\
    \ 1\n    while (value < max_value) \n    {\n        count++;\n        // Go to\
    \ the next one that starts or ends with 1, there are (n-1)\n        // positions\
    \ to put a 0 in the middle, so there are 9^(n-1) possible\n        // numbers.\n\
    \        value = 10 + pow(9, n - 1);\n    }\n    return count;\n}\n \nlong starts_one_ends_tests()\
    \ \n{\n    assert(starts_one_ends(3) == 4);\n    assert(starts_one_ends(4) ==\
    \ 37);\n    assert(starts_one_ends(5) == 364);\n    return 0;\n}\nunittest\n{\n\
    \    alias candidate = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n\
    \    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L)\
    \ == 1800L);\n    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmponnqqr0n.d(11): Error: C style cast illegal, use `cast(long)pow(10,
    n)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmponnqqr0n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164132
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n\tassert(n >= 1);\n\
    \tif (n < 3)\n\t\treturn n;\n\t\n\tlong[long] results;\n\tlong[long] results2;\n\
    \tlong d0 = 1;\n\tlong d1 = 1;\n\tlong result = 0;\n\t\n\t// Stores already calculated\
    \ results\n\tresults[1] = d0;\n\tresults[2] = d1;\n\tresults2[1] = d0;\n\tresults2[2]\
    \ = d1;\n\t\n\t// Calculates the number of n-digit numbers that start or end in\
    \ 1\n\tfor (long i = 3; i <= n; i++) {\n\t\tif (results[i] == null) {\n\t\t\t\
    // We haven't calculated this n-digit number yet\n\t\t\t// Either this n-digit\
    \ number starts with 1 or it ends with 1\n\t\t\tlong nums_starts_one = results[i\
    \ - 1];\n\t\t\tlong nums_ends_one = results2[i - 1];\n\t\t\tresult = nums_starts_one\
    \ + nums_ends_one;\n\t\t\tresults[i] = result;\n\t\t\tresults2[i] = nums_starts_one;\n\
    \t\t} else {\n\t\t\t// We already calculated this result, retrieve it\n\t\t\t\
    result = results[i];\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias\
    \ candidate = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(2L)\
    \ == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L) == 1800L);\n\
    \    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0mj_gfgc.d(29): Error: incompatible types for `(results[i]) ==
    (null)`: `long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0mj_gfgc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164132
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    long a = 0,\
    \ b = 1, c = 0;\n    for (long i = 2; i <= n; i++) {\n        c = 10 * b + a;\n\
    \        a = b;\n        b = c;\n    }\n    return c;\n}\nunittest\n{\n    alias\
    \ candidate = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(2L)\
    \ == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L) == 1800L);\n\
    \    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpp0ys_pep.d(23): unittest failure

    ----------------

    ??:? _d_unittestp [0x427da5]

    ??:? void tmpp0ys_pep.__unittest_L19_C1() [0x427a88]

    ??:? void tmpp0ys_pep.__modtest() [0x427b28]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bacb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a95e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42faf1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffa0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa7d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a935]

    ??:? runModuleUnitTests [0x42b8a1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164132
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    if (n <= 0)\
    \ \n        return 0;\n    if (n == 1) \n        return 1;\n    return starts_one_ends(n\
    \ - 1) + 9 * power(10, n - 2);\n}\nunittest\n{\n    alias candidate = starts_one_ends;\n\
    \n    assert(candidate(1L) == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L)\
    \ == 180L);\n    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) ==\
    \ 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp33mes3xp.d(15): Error: undefined identifier `power`, did you mean
    template `pow(F, G)(F x, G n) if (isFloatingPoint!F && isIntegral!G)`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp33mes3xp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164132
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    return pow(10.0,n)\
    \ - 9 * pow(9.0,n-1);\n}\n/*\nunittest\n{\n    alias candidate = starts_one_ends;\n\
    \n    assert(candidate(1L) == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L)\
    \ == 180L);\n    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) ==\
    \ 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmbrlcwwk.d(13): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmbrlcwwk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164132
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    long total =\
    \ 0;\n    if (n <= 0)\n        return 0;\n    else if (n == 1)\n        return\
    \ 1;\n    else {\n        foreach (j; 1 .. n + 1) {\n            total += starts_one_ends(n\
    \ - j) * 2;\n        }\n    }\n    return total;\n}\nunittest\n{\n    alias candidate\
    \ = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(2L)\
    \ == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L) == 1800L);\n\
    \    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7e9gcmb6.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427db5]

    ??:? void tmp7e9gcmb6.__unittest_L23_C1() [0x427ab9]

    ??:? void tmp7e9gcmb6.__modtest() [0x427b38]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42badb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a96e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb01]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffb0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa8d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a945]

    ??:? runModuleUnitTests [0x42b8b1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428204]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164132
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    import std.math\
    \ : log;\n    auto digits = 1 + cast(long)log(n)/log(10);\n    if (digits == 1)\n\
    \        return 1;\n    return (10.pow(digits-1) - 1) * digits;\n}\n/*\n    \n\
    \    \n    \n    \n*/\nlong count_ones(long n)\n{\n    import std.conv : to;\n\
    \    import std.algorithm : map;\n    import std.range : iota;\n    import std.typecons\
    \ : Tuple;\n    auto arr = iota(0, n)\n                .map!(to!string)\n    \
    \            .map!(a => a.countUntil(\"1\") > 0)\n                .map!(a => Tuple!(int,\
    \ int)(a, a ? 1 : 0))\n                .fold!((a, b) => Tuple!(int, int)(b[0],\
    \ a[1] + b[1]));\n    return arr[1];\n}\n/*\n    \n    \n    \n    \n*/\nlong\
    \ nice(long n)\n{\n    return count_ones(n) == n/2;\n}\n/*\n    Given an array\
    \ of integers nums, return the count of the numbers that are\n    great than or\
    \ equal to 100.\n*/\nlong count_100(int[] nums)\n{\n    import std.algorithm :\
    \ count;\n    return nums.count!(a => a >= 100);\n}\n/*\n    Given an array of\
    \ integers nums, return the count of the numbers that are\n    even and greater\
    \ than or equal to 100.\n*/\nlong count_even_100(int[] nums)\n{\n    import std.algorithm\
    \ : count;\n    return nums.count!(a => a >= 100 && a % 2 == 0);\n}\n/*\n    Given\
    \ an array of integers nums, return the count of the numbers that are\n    odd\
    \ and greater than or equal to 100.\n*/\nlong count_odd_100(int[] nums)\n{\n \
    \   import std.algorithm : count;\n    return nums.count!(a => a >= 100 && a %\
    \ 2 == 1);\n}\n/*\n    Given an array\nunittest\n{\n    alias candidate = starts_one_ends;\n\
    \n    assert(candidate(1L) == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L)\
    \ == 180L);\n    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) ==\
    \ 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxltf6xoe.d(73): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxltf6xoe.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164132
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    if (n == 1)\n\
    \        return 10;\n    \n    long number_of_digits = n - 1;\n    return (1 +\
    \ 9 * std.math.pow(10, number_of_digits - 1)) * number_of_digits;\n}\nunittest\n\
    {\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n\
    \    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L)\
    \ == 1800L);\n    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpncmg4v01.d(21): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e7d]

    ??:? void tmpncmg4v01.__unittest_L17_C1() [0x427aa4]

    ??:? void tmpncmg4v01.__modtest() [0x427bfc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bba3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa36]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430078]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb55]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa0d]

    ??:? runModuleUnitTests [0x42b979]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282cc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164132
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    /* Function\
    \ to check if the number\n       begins or ends with 1. */\n    auto check = (long\
    \ x) =>\n    {\n        while (x >= 10) {\n            x /= 10;\n        }\n \
    \       if (x == 1)\n            return true;\n        return false;\n    };\n\
    \    \n    // Count of digits\n    long digits = (long) ceil(log10(n + 1));\n\
    \    \n    long count = 0;\n    long end_count = 0;\n    long start_count = 0;\n\
    \    \n    // Count the numbers of n-digit positive integers\n    // that start\
    \ with 1\n    for (long i = 1; i < n; i++) {\n        if (digits == 1) {\n   \
    \         if (i == 1)\n                start_count++;\n        }\n        else\
    \ if (digits == ceil(log10(i + 1))) {\n            if (check(i))\n           \
    \     start_count++;\n        }\n    }\n    \n    // Count the numbers of n-digit\
    \ positive integers\n    // that end with 1\n    for (long i = 1; i < n; i++)\
    \ {\n        if (digits == 1) {\n            if (i == 1)\n                end_count++;\n\
    \        }\n        else if (digits == ceil(log10(i + 1))) {\n            if (check(i))\n\
    \                end_count++;\n        }\n    }\n    \n    // Return the sum of\
    \ counts\n    return start_count + end_count;\n}\n \nunittest\n{\n    alias candidate\
    \ = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(2L)\
    \ == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L) == 1800L);\n\
    \    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj8qnqeb7.d(24): Error: C style cast illegal, use `cast(long)ceil(log10(n
    + 1))`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj8qnqeb7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164132
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    if (n <= 0)\
    \ return 0;\n    if (n == 1) return 1;\n    return pow(10, n - 1) + 9 * pow(10,\
    \ n - 2);\n}\nunittest\n{\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L)\
    \ == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n\
    \    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) == 18000L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2qq7diji.d(20): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e9d]

    ??:? void tmp2qq7diji.__unittest_L15_C1() [0x427ae5]

    ??:? void tmp2qq7diji.__modtest() [0x427c1c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbc3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa56]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbe9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430098]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb75]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa2d]

    ??:? runModuleUnitTests [0x42b999]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282ec]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164132
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    n = n - 1;\n\
    \    long start = (long)pow(10, n);\n    long end = start * 10;\n    return (end\
    \ - start);\n}\nunittest\n{\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L)\
    \ == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n\
    \    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) == 18000L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpevi5wnlp.d(12): Error: C style cast illegal, use `cast(long)pow(10,
    n)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpevi5wnlp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164132
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    assert(n > 0);\n\
    \    if (n == 1) return 1;\n    if (n == 2) return 2;\n    return pow(10, n -\
    \ 1) + 9 * (pow(10, n - 2) - 1);\n}\n/*\n    Given a positive integer n, return\
    \ the sum of the first n n-digit positive\n    integers.\n*/\nlong sum_first_n(long\
    \ n)\n{\n    assert(n > 0);\n    if (n == 1) return 1;\n    return pow(10, n)\
    \ - 1;\n}\n/*\n    Given a positive integer n, return the sum of the numbers of\
    \ n-digit\n    positive integers that start or end with 1.\n*/\nlong sum_starts_one_ends(long\
    \ n)\n{\n    assert(n > 0);\n    if (n == 1) return 1;\n    if (n == 2) return\
    \ 3;\n    return sum_first_n(n) - starts_one_ends(n);\n}\nlong solve(long upper_bound)\n\
    {\n    long result = 0;\n    foreach (n; 1 .. upper_bound + 1) {\n        result\
    \ += sum_starts_one_ends(n);\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(2L)\
    \ == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L) == 1800L);\n\
    \    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmvhj8_3r.d(50): unittest failure

    ----------------

    ??:? _d_unittestp [0x428129]

    ??:? void tmpmvhj8_3r.__unittest_L45_C1() [0x427cbd]

    ??:? void tmpmvhj8_3r.__modtest() [0x427df4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42be4f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ace2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fe75]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430324]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fe01]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42acb9]

    ??:? runModuleUnitTests [0x42bc25]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428578]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164132
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    import std.math\
    \ : log10;\n    auto count = cast(int)log10(n);\n    return (count * (cast(long)9\
    \ * pow(10, count - 1)) + n - pow(10, count) + 1);\n}\n/*\n    Given a positive\
    \ integer n, return the count of the numbers of n-digit\n    positive integers\
    \ that start or end with 2.\n*/\nlong starts_two_ends(long n) \n{\n    import\
    \ std.math : log10;\n    auto count = cast(int)log10(n);\n    return (count *\
    \ (cast(long)9 * pow(10, count - 1)) + n - pow(10, count) + 1);\n}\n/*\n    Given\
    \ a positive integer n, return the count of the numbers of n-digit\n    positive\
    \ integers that start or end with 5.\n*/\nlong starts_five_ends(long n) \n{\n\
    \    import std.math : log10;\n    auto count = cast(int)log10(n);\n    return\
    \ (count * (cast(long)9 * pow(10, count - 1)) + n - pow(10, count) + 1);\n}\n\
    /*\n    Given a positive integer n, return the count of the numbers of n-digit\n\
    \    positive integers that start or end with 9.\n*/\nlong starts_nine_ends(long\
    \ n) \n{\n    import std.math : log10;\n    auto count = cast(int)log10(n);\n\
    \    return (count * (cast(long)9 * pow(10, count - 1)) + n - pow(10, count) +\
    \ 1);\n}\n/*\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with a digit other than\
    \ 1, 2, 5, or 9.\n*/\nlong starts_other_ends(long n) \n{\n    import std.math\
    \ : log10;\n    auto count = cast(int)log10(n);\n    return (count * (cast(long)9\
    \ * pow(10, count - 1)) + n - pow(10, count) + 1);\n}\n/*\n    Given a positive\
    \ integer n, return the count of the numbers\nunittest\n{\n    alias candidate\
    \ = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(2L)\
    \ == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L) == 1800L);\n\
    \    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2_oohhu0.d(55): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2_oohhu0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164132
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    if (n == 1)\n\
    \        return 1;\n    else\n        return pow(10, n-1) + starts_one_ends(n-1);\n\
    }\nunittest\n{\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L)\
    \ == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n\
    \    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) == 18000L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy63m1f92.d(21): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e7d]

    ??:? void tmpy63m1f92.__unittest_L16_C1() [0x427ac9]

    ??:? void tmpy63m1f92.__modtest() [0x427c00]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bba3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa36]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430078]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb55]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa0d]

    ??:? runModuleUnitTests [0x42b979]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282cc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164132
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    long retval\
    \ = 0;\n    long i = 0;\n    long digits = ceil(log10(n));\n    long digits_tens\
    \ = pow(10, digits - 1);\n    long digits_tens_plus_one = digits_tens * 10;\n\
    \    long digits_tens_minus_one = digits_tens / 10;\n    long n_digits_tens =\
    \ n / digits_tens;\n    long n_digits_tens_plus_one = n / digits_tens_plus_one;\n\
    \    long n_digits_tens_minus_one = n / digits_tens_minus_one;\n    Tuple!(int,\
    \ int) tuple_a;\n    Tuple!(int, int) tuple_b;\n    long x = 0;\n    long y =\
    \ 0;\n    long a = 0;\n    long b = 0;\n    long n_digits_tens_plus_one_pow_i\
    \ = 0;\n    long n_digits_tens_minus_one_pow_i = 0;\n    long min_leading_zeros\
    \ = 0;\n    long max_leading_zeros = 0;\n    long count_i = 0;\n    for (i = 1;\
    \ i < digits; i++) {\n        tuple_a = (n_digits_tens_plus_one, i);\n       \
    \ tuple_b = (n_digits_tens_minus_one, i);\n        count_i = 0;\n        min_leading_zeros\
    \ = digits - i;\n        max_leading_zeros = digits - 1;\n        n_digits_tens_plus_one_pow_i\
    \ = pow(n_digits_tens_plus_one, i);\n        n_digits_tens_minus_one_pow_i = pow(n_digits_tens_minus_one,\
    \ i);\n        //printf(\"tuple_a: %d %d\\n\", tuple_a[0], tuple_a[1]);\n    \
    \    //printf(\"tuple_b: %d %d\\n\", tuple_b[0], tuple_b[1]);\n        count_i\
    \ +=\nunittest\n{\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L)\
    \ == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n\
    \    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) == 18000L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt39ehjri.d(42): Error: expression expected, not `unittest`

    /tmp/tmpt39ehjri.d(43): Error: found `{` when expecting `;` following statement

    /tmp/tmpt39ehjri.d(52): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt39ehjri.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164132
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    switch(n) {\n\
    \        case 1:\n            return 10;\n        case 2:\n            return\
    \ 18;\n        case 3:\n            return 28;\n        case 4:\n            return\
    \ 40;\n        case 5:\n            return 54;\n        case 6:\n            return\
    \ 70;\n        case 7:\n            return 88;\n        case 8:\n            return\
    \ 108;\n        case 9:\n            return 130;\n        case 10:\n         \
    \   return 154;\n        case 11:\n            return 180;\n        case 12:\n\
    \            return 208;\n        case 13:\n            return 238;\n        case\
    \ 14:\n            return 270;\n        case 15:\n            return 304;\n  \
    \      case 16:\n            return 340;\n        case 17:\n            return\
    \ 378;\n        case 18:\n            return 418;\n        case 19:\n        \
    \    return 460;\n        case 20:\n            return 504;\n        case 21:\n\
    \            return 550;\n        case 22:\n            return 598;\n        case\
    \ 23:\n            return 648;\n        case 24:\n            return 700;\n  \
    \      case 25:\n            return 754;\n        case 26:\n            return\
    \ 810;\n        case 27:\n            return 868;\n        case 28:\n        \
    \    return 928;\n        case 29:\n            return 990;\n        case 30:\n\
    \            return 1054;\n        case 31:\n            return 1120;\n      \
    \  case 32:\n            return 1188;\n        case 33:\n            return 1258;\n\
    \        case 34:\n            return 1330;\n        case 35:\n            return\
    \ 1404;\n        case 36:\n            return 1480;\n        case 37:\n      \
    \      return 1558;\n        case 38:\n            return 1638;\n        case\
    \ 39:\n            return 1720;\n        case 40:\n            return 1804;\n\
    \        case 41:\n            return 1890;\n        case 42:\n            return\
    \ 1978;\n        case 43:\n            return 2068;\n        case 44:\n      \
    \      return 2160;\n        case 45:\n            return 2254;\n        case\
    \ 46:\n            return 2350;\n        case 47:\n            return 2448;\n\
    \        case 48:\n            return 2548\nunittest\n{\n    alias candidate =\
    \ starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(2L)\
    \ == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L) == 1800L);\n\
    \    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5482mdax.d(108): Error: found `unittest` when expecting `;` following
    `return` statement

    /tmp/tmp5482mdax.d(118): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp5482mdax.d(118): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5482mdax.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164132
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    long count =\
    \ 0;\n    long base = 0;\n    while (n > 0) {\n        base = base * 10 + 1;\n\
    \        count += (n + 1) * base;\n        n--;\n    }\n    return count;\n}\n\
    unittest\n{\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L)\
    \ == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n\
    \    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) == 18000L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpv7priqf_.d(24): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d9d]

    ??:? void tmpv7priqf_.__unittest_L20_C1() [0x427a7c]

    ??:? void tmpv7priqf_.__modtest() [0x427b1c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bac3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a956]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fae9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff98]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa75]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]

    ??:? runModuleUnitTests [0x42b899]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281ec]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164132
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    long res = 0;\n\
    \    if (n == 1) \n    {\n        res = 2;\n    } \n    else if (n == 2) \n  \
    \  {\n        res = 3;\n    } \n    else \n    {\n        res = 2 * pow(9, n -\
    \ 1) + starts_one_ends(n - 1);\n    }\n    return res;\n}\nunittest\n{\n    alias\
    \ candidate = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(2L)\
    \ == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L) == 1800L);\n\
    \    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpdq7b6w2q.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ea5]

    ??:? void tmpdq7b6w2q.__unittest_L26_C1() [0x427acc]

    ??:? void tmpdq7b6w2q.__modtest() [0x427c24]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbcb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa5e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbf1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb7d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa35]

    ??:? runModuleUnitTests [0x42b9a1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164133
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{ \n    return (9 *\
    \ pow(10, n - 1) - 1) * pow(10, n - 1); \n} \nunittest\n{\n    alias candidate\
    \ = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(2L)\
    \ == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L) == 1800L);\n\
    \    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpz83es8u2.d(17): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e85]

    ??:? void tmpz83es8u2.__unittest_L13_C1() [0x427aac]

    ??:? void tmpz83es8u2.__modtest() [0x427c04]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa3e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbd1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430080]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa15]

    ??:? runModuleUnitTests [0x42b981]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164133
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    if (n == 1)\n\
    \        return 10;\n    else \n    {\n        auto res = (n - 1) * pow(10, n\
    \ - 2);\n        res += 9 * pow(10, n - 2);\n        return res;\n    }\n}\nunittest\n\
    {\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n\
    \    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L)\
    \ == 1800L);\n    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2bfu0vsk.d(24): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e9d]

    ??:? void tmp2bfu0vsk.__unittest_L20_C1() [0x427ac8]

    ??:? void tmp2bfu0vsk.__modtest() [0x427c20]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbc3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa56]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbe9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430098]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb75]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa2d]

    ??:? runModuleUnitTests [0x42b999]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282ec]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164133
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    if (n < 1) return\
    \ 0;\n    if (n == 1) return 10;\n    long dp[int.max / 2] = void;\n    long total\
    \ = 0;\n    bool last_one = false;\n    dp[0] = 1;\n    dp[1] = 9;\n    foreach\
    \ (i; 2 .. n)\n    {\n        long new_dp[int.max / 2] = void;\n        new_dp[i]\
    \ = dp[i - 1];\n        new_dp[i - 1] = dp[i - 1] * (10 - 1);\n        for (int\
    \ j = i - 2; j >= 0; j--)\n        {\n            new_dp[j] = new_dp[j + 1] +\
    \ dp[j] * (10 - 1);\n        }\n        dp = new_dp;\n    }\n    total = dp[0]\
    \ + dp[n - 1];\n    return total;\n}\nunittest\n{\n    alias candidate = starts_one_ends;\n\
    \n    assert(candidate(1L) == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L)\
    \ == 180L);\n    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) ==\
    \ 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnt_mceqt.d(13): Deprecation: instead of C-style syntax, use D-style
    syntax `long[(int).max / 2] dp`

    /tmp/tmpnt_mceqt.d(20): Deprecation: instead of C-style syntax, use D-style syntax
    `long[(int).max / 2] new_dp`

    /tmp/tmpnt_mceqt.d(13): Error: `long[1073741823]` size 8 * 1073741823 exceeds
    0x7fffffff size limit for static array

    /tmp/tmpnt_mceqt.d(20): Error: `long[1073741823]` size 8 * 1073741823 exceeds
    0x7fffffff size limit for static array

    /tmp/tmpnt_mceqt.d(23): Error: cannot implicitly convert expression `i - 2L` of
    type `long` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnt_mceqt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164132
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    long count =\
    \ 0;\n    long x = 0;\n    long y = 0;\n    foreach(i; 0 .. n)\n    {\n      \
    \  count += i;\n        if(i == 1)\n        {\n            count += 10 * x;\n\
    \            x += 9;\n        }\n        else if(i == 2)\n        {\n        \
    \    count += 10 * y;\n            y += 90;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L)\
    \ == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n\
    \    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) == 18000L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpw0m04vkz.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dc5]

    ??:? void tmpw0m04vkz.__unittest_L30_C1() [0x427aa8]

    ??:? void tmpw0m04vkz.__modtest() [0x427b48]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baeb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a97e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb11]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffc0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa9d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]

    ??:? runModuleUnitTests [0x42b8c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428214]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164133
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    long result;\n\
    \    switch (n) {\n        case 1:\n            result = 2;\n            break;\n\
    \        case 2:\n            result = 5;\n            break;\n        default:\n\
    \            result = starts_one_ends(n - 1) +\n                     starts_one_ends(n\
    \ - 2) +\n                     starts_one_ends(n - 2);\n            break;\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = starts_one_ends;\n\
    \n    assert(candidate(1L) == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L)\
    \ == 180L);\n    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) ==\
    \ 18000L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmplu0g4m2t.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dcd]

    ??:? void tmplu0g4m2t.__unittest_L27_C1() [0x427ab0]

    ??:? void tmplu0g4m2t.__modtest() [0x427b50]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baf3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a986]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb19]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffc8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42faa5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]

    ??:? runModuleUnitTests [0x42b8c9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42821c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164133
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    static struct\
    \ S {\n        long n;\n        long power;\n        long ends;\n        long\
    \ ends2;\n        long starts;\n        this(long n_) \n        {\n          \
    \  n = n_;\n            power = 1;\n            ends = ends2 = starts = 0;\n \
    \           foreach (i; 0 .. n) \n            {\n                power *= 10;\n\
    \                ends = ends * 10 + 1;\n                ends2 = ends2 * 10 + 9;\n\
    \                starts = starts * 10 + 9;\n            }\n        }\n    } \n\
    \    s;\n    static immutable long MAX_N = 20;\n    static immutable static_type_tuple!(S[])\
    \ s_arr = static_type_tuple!(S[])[\n        S(1), S(2), S(3), S(4), S(5), S(6),\
    \ S(7), S(8), S(9), S(10), S(11), S(12), S(13), S(14), S(15), S(16), S(17), S(18),\
    \ S(19), S(20)\n    ];\n    static if (n <= MAX_N) \n    {\n        return s_arr[n\
    \ - 1].starts + s_arr[n - 1].ends + s_arr[n - 1].ends2;\n    }\n    else \n  \
    \  {\n        return s.starts + s.ends + s.ends2;\n    }\n}\nunittest\n{\n   \
    \ alias candidate = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n   \
    \ assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L)\
    \ == 1800L);\n    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp545s_arw.d(31): Error: undefined identifier `s`

    /tmp/tmp545s_arw.d(33): Error: template instance `static_type_tuple!(S[])` template
    `static_type_tuple` is not defined

    /tmp/tmp545s_arw.d(33): Error: template instance `static_type_tuple!(S[])` template
    `static_type_tuple` is not defined

    /tmp/tmp545s_arw.d(36): Error: variable `n` cannot be read at compile time

    /tmp/tmp545s_arw.d(42): Error: undefined identifier `s`

    /tmp/tmp545s_arw.d(42): Error: undefined identifier `s`

    /tmp/tmp545s_arw.d(42): Error: undefined identifier `s`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp545s_arw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164132
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    long result\
    \ = 0;\n    if (n == 1)\n        return result + 1;\n    else\n    {\n       \
    \ long zeros = power(10, n - 1);\n        result += zeros;\n        result +=\
    \ starts_one_ends(n - 1);\n        return result;\n    }\n}\n/*\n    return the\
    \ number of ways to arrange n items with no restrictions.\n    http://www.cplusplus.com/reference/numeric/iota/\n\
    */\nlong factorial(long n) \n{\n    Tuple!(long) items;\n    items = tuple(iota(n));\n\
    \    return product(items);\n}\n/*\n    return the number of ways to arrange n\
    \ items in r ways.\n*/\nlong permutation(long n, long r) \n{\n    assert(r <=\
    \ n);\n    long result = 0;\n    if (r == n)\n        return result + 1;\n   \
    \ else\n    {\n        long zeros = power(10, n - 1);\n        result += zeros;\n\
    \        result += permutation(n - 1, r);\n        return result;\n    }\n}\n\
    /*\n    return the number of ways to arrange n items in r ways.\n*/\nlong combination(long\
    \ n, long r) \n{\n    assert(r <= n);\n    if (r == n)\n        return result\
    \ + 1;\n    else\n    {\n        long zeros = power(10, n - 1);\n        result\
    \ += zeros;\n        result += combination(n - 1, r);\n        return result;\n\
    \    }\n}\nunittest\n{\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L)\
    \ == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n\
    \    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) == 18000L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppdjz1v1z.d(16): Error: undefined identifier `power`, did you mean
    template `pow(F, G)(F x, G n) if (isFloatingPoint!F && isIntegral!G)`?

    /tmp/tmppdjz1v1z.d(29): Error: undefined identifier `iota`

    /tmp/tmppdjz1v1z.d(30): Error: undefined identifier `product`

    /tmp/tmppdjz1v1z.d(43): Error: undefined identifier `power`, did you mean template
    `pow(F, G)(F x, G n) if (isFloatingPoint!F && isIntegral!G)`?

    /tmp/tmppdjz1v1z.d(56): Error: undefined identifier `result`

    /tmp/tmppdjz1v1z.d(59): Error: undefined identifier `power`, did you mean template
    `pow(F, G)(F x, G n) if (isFloatingPoint!F && isIntegral!G)`?

    /tmp/tmppdjz1v1z.d(60): Error: undefined identifier `result`

    /tmp/tmppdjz1v1z.d(61): Error: undefined identifier `result`

    /tmp/tmppdjz1v1z.d(62): Error: undefined identifier `result`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppdjz1v1z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164132
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    long [long]\
    \ dp;\n    dp[0] = 0;\n    dp[1] = 1;\n    auto n_digits = log10(n) + 1;\n   \
    \ auto n_digits_minus_one = n_digits - 1;\n    foreach (i; 2 .. n_digits_minus_one)\
    \ {\n        // i-th level, dp[i] is the count of the numbers of i-digit\n   \
    \     // positive integers that start or end with 1.\n        dp[i] = pow(9, i\
    \ - 1) * i;\n    }\n    dp[n_digits] = pow(9, n_digits - 1) * n_digits;\n    //\
    \ tail: a slice of the first n_digits_minus_one integers\n    auto tail = iota(n_digits_minus_one).array();\n\
    \    tail.popFront();\n    long count = 0;\n    for (long i = 1; i < n_digits_minus_one;\
    \ i++) {\n        foreach (j; 0 .. i) {\n            long number = tail[j];\n\
    \            if (number < 10) continue;\n            auto digit = number % 10;\n\
    \            if (digit != 1) continue;\n            auto upper = i - j - 1;\n\
    \            auto lower = n_digits_minus_one - j - 1;\n            auto this_count\
    \ = pow(9, upper) * pow(10, lower);\n            count += this_count;\n      \
    \  }\n        tail.popFront();\n    }\n    return count + dp[n_digits];\n}\n \n\
    /*\n    Given a positive integer n, return the count of the numbers of n-digit\n\
    \    positive integers that start with 1.\n*/\nlong starts_one(long n) \n{\n \
    \   long [long] dp;\n    dp[0] = 0;\n    dp[1] = 1;\n    foreach (i; 2 .. n) {\n\
    \        // i-th level, dp[i] is the count of the numbers of i-digit\n       \
    \ // positive integers that start with 1.\n        dp[i] = pow(9, i\nunittest\n\
    {\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n\
    \    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L)\
    \ == 1800L);\n    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkeaaxp4t.d(55): Error: found `unittest` when expecting `,`

    /tmp/tmpkeaaxp4t.d(65): Error: found `void` when expecting `,`

    /tmp/tmpkeaaxp4t.d(65): Error: found `{` when expecting `,`

    /tmp/tmpkeaaxp4t.d(65): Error: expression expected, not `}`

    /tmp/tmpkeaaxp4t.d(65): Error: found `End of File` when expecting `,`

    /tmp/tmpkeaaxp4t.d(65): Error: found `End of File` when expecting `)`

    /tmp/tmpkeaaxp4t.d(65): Error: found `End of File` when expecting `;` following
    statement

    /tmp/tmpkeaaxp4t.d(65): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpkeaaxp4t.d(65): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkeaaxp4t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164132
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    if (n == 1)\
    \ return 2;\n    long k = n / 2;\n    long part1 = (long)pow(9, k);\n    long\
    \ part2 = (n % 2 == 0) ? 0 : (long)pow(9, k);\n    return part1 + part2;\n}\n\
    /*\nunittest\n{\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L)\
    \ == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n\
    \    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) == 18000L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppi05wf9i.d(13): Error: C style cast illegal, use `cast(long)pow(9,
    k)`

    /tmp/tmppi05wf9i.d(14): Error: C style cast illegal, use `cast(long)pow(9, k)`

    /tmp/tmppi05wf9i.d(17): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppi05wf9i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164132
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    long result\
    \ = 0;\n    if (n <= 1) \n    {\n        return 10;\n    } \n    else \n    {\n\
    \        if (n == 2) \n        {\n            return 81;\n        } \n       \
    \ else \n        {\n            result = 100;\n            for (long i = 1; i\
    \ < n - 1; i++) \n            {\n                result *= 10;\n            }\n\
    \            return (10 * result);\n        }\n    }\n}\nunittest\n{\n    alias\
    \ candidate = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(2L)\
    \ == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L) == 1800L);\n\
    \    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjox8kf0b.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dad]

    ??:? void tmpjox8kf0b.__unittest_L33_C1() [0x427a90]

    ??:? void tmpjox8kf0b.__modtest() [0x427b30]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bad3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a966]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42faf9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffa8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa85]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a93d]

    ??:? runModuleUnitTests [0x42b8a9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281fc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164133
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    if (n == 1)\
    \ \n        return 1;\n    else if (n == 2) \n        return 4;\n    else \n \
    \       return 3 * starts_one_ends(n - 1) - starts_one_ends(n - 2);\n}\nunittest\n\
    {\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n\
    \    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L)\
    \ == 1800L);\n    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpo0kh7b_u.d(23): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d9d]

    ??:? void tmpo0kh7b_u.__unittest_L18_C1() [0x427aa1]

    ??:? void tmpo0kh7b_u.__modtest() [0x427b20]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bac3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a956]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fae9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff98]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa75]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]

    ??:? runModuleUnitTests [0x42b899]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281ec]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164133
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{ \n    if (n == 1)\
    \ \n    { \n        return 2; \n    } \n  \n    if (n == 2) \n    { \n       \
    \ return 5; \n    } \n  \n    long dp[][] = new long[n + 1][2]; \n  \n    dp[0][0]\
    \ = 0; \n    dp[0][1] = 0; \n    dp[1][0] = 1; \n    dp[1][1] = 1; \n  \n    for\
    \ (long i = 2; i <= n; i++) \n    { \n        dp[i][0] = 9 * dp[i - 1][0] + dp[i\
    \ - 1][1]; \n        dp[i][1] = dp[i - 1][0]; \n    } \n  \n    return dp[n][0]\
    \ + dp[n][1]; \n}\nunittest\n{\n    alias candidate = starts_one_ends;\n\n   \
    \ assert(candidate(1L) == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L)\
    \ == 180L);\n    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) ==\
    \ 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2y3w9ss3.d(21): Deprecation: instead of C-style syntax, use D-style
    syntax `long[][] dp`

    /tmp/tmp2y3w9ss3.d(21): Error: variable `n` cannot be read at compile time

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2y3w9ss3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164132
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    long num = 1;\n\
    \    long res = 0;\n    while (n)\n    {\n        res += num;\n        num *=\
    \ 10;\n        n--;\n    }\n    return res;\n}\n \nunittest\n{\n    alias candidate\
    \ = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(2L)\
    \ == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L) == 1800L);\n\
    \    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmphbncbesa.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d85]

    ??:? void tmphbncbesa.__unittest_L22_C1() [0x427a89]

    ??:? void tmphbncbesa.__modtest() [0x427b08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a93e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff80]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]

    ??:? runModuleUnitTests [0x42b881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164133
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    long ret = 0;\n\
    \    int mod = pow(10, n-1);\n    long range = pow(10, n);\n    for (long i =\
    \ 1; i < range; i++)\n    {\n        if (i % mod == 1)\n            ret++;\n \
    \   }\n    return ret;\n}\n/*\n    Given a positive integer n, return the count\
    \ of the numbers of n-digit\n    positive integers that start or end with 1.\n\
    \    \n    This is a solution that deals with the count of numbers having a particular\n\
    \    number of 1's in them.\n    \n    The code is rather complex, but is the\
    \ fastest solution by far.\n*/\nlong starts_one_ends_solution(long n)\n{\n   \
    \ auto ret = 0;\n    if (n < 0)\n        return 0;\n    if (n == 0)\n        return\
    \ 1;\n    auto range = pow(10, n);\n    auto maxOnes = 2 * n - 2;\n    auto minOnes\
    \ = 2;\n    auto ones = minOnes;\n    auto increment = 2;\n    while (ones <=\
    \ maxOnes)\n    {\n        auto twoOf = getOnes(range, ones);\n        ret +=\
    \ twoOf;\n        ones += increment;\n        increment++;\n    }\n    return\
    \ ret;\n}\nlong getOnes(long range, long ones)\n{\n    auto ret = 0;\n    for\
    \ (auto i = 0; i < range; i++)\n    {\n        if (i == 0)\n            ret +=\
    \ solve(ones);\n        else\n        {\n            auto tmp = solve(ones-1);\n\
    \            ret += tmp;\n        }\n    }\n    return ret;\n}\nlong solve(long\
    \ n)\n{\n    if (n == 0)\n        return 1;\n    if (n == 1)\n        return 2;\n\
    \    auto ret = 0;\n    ret += solve(n-1);\n    ret += pow(2, n-1);\n    return\
    \ ret;\n}\nunittest\n{\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L)\
    \ == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n\
    \    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) == 18000L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp303_c3jo.d(12): Error: cannot implicitly convert expression `pow(10,
    n - 1L)` of type `long` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp303_c3jo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164132
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    if (n == 1)\
    \ \n        return 1;\n    \n    if (n == 2) \n        return 1;\n    \n    if\
    \ (n == 3) \n        return 1;\n    \n    if (n == 4) \n        return 1;\n  \
    \  \n    if (n == 5) \n        return 1;\n    \n    if (n == 6) \n        return\
    \ 1;\n    \n    if (n == 7) \n        return 1;\n    \n    if (n == 8) \n    \
    \    return 1;\n    \n    if (n == 9) \n        return 1;\n    \n    if (n ==\
    \ 10) \n        return 2;\n    \n    if (n == 11) \n        return 2;\n    \n\
    \    if (n == 12) \n        return 2;\n    \n    if (n == 13) \n        return\
    \ 2;\n    \n    if (n == 14) \n        return 2;\n    \n    if (n == 15) \n  \
    \      return 2;\n    \n    if (n == 16) \n        return 2;\n    \n    if (n\
    \ == 17) \n        return 2;\n    \n    if (n == 18) \n        return 2;\n   \
    \ \n    if (n == 19) \n        return 2;\n    \n    if (n == 20) \n        return\
    \ 3;\n    \n    if (n == 21) \n        return 3;\n    \n    if (n == 22) \n  \
    \      return 3;\n    \n    if (n == 23) \n        return 3;\n    \n    if (n\
    \ == 24) \n        return 3;\n    \n    if (n == 25) \n        return 3;\n   \
    \ \n    if (n == 26) \n        return 3;\n    \n    if (n == 27) \n        return\
    \ 3;\n    \n    if (n == 28) \n        return 3;\n    \n    if (n == 29) \n  \
    \      return 3;\n    \n    if (n == 30) \n        return 4;\n    \n    if (n\
    \ == 31) \n        return 4;\n    \n    if (n == 32) \n        return 4;\nunittest\n\
    {\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n\
    \    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L)\
    \ == 1800L);\n    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnb1t86io.d(106): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnb1t86io.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164132
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    long total =\
    \ 0;\n    auto x = pow(10, n-1);\n    if (n == 1) {\n        total += 1;\n   \
    \ } else {\n        for (int i = 0; i < 10; i++) {\n            auto m = starts_one_ends(n-1);\n\
    \            auto num = x + m;\n            auto f = num/10;\n            auto\
    \ l = num%10;\n            if (f == 1 || l == 1) {\n                total += num;\n\
    \            }\n        }\n    }\n    return total;\n}\n//@pbe (constraint (=\
    \ (f 0) 1))\n//@pbe (constraint (= (f 1) 10))\n//@pbe (constraint (= (f 2) 55))\n\
    //@pbe (constraint (= (f 3) 220))\n//@pbe (constraint (= (f 4) 715))\n//@pbe (constraint\
    \ (= (f 5) 2002))\n//@pbe (constraint (= (f 6) 5005))\n//@pbe (constraint (= (f\
    \ 7) 11440))\n//@pbe (constraint (= (f 8) 24310))\n//@pbe (constraint (= (f 9)\
    \ 48620))\n//@pbe (constraint (= (f 10) 92378))\n//@pbe (constraint (= (f 11)\
    \ 167960))\n//@pbe (constraint (= (f 12) 293930))\n//@pbe (constraint (= (f 13)\
    \ 497420))\n//@pbe (constraint (= (f 14) 817190))\n//@pbe (constraint (= (f 15)\
    \ 1307504))\n//@pbe (constraint (= (f 16) 2042975))\n//@pbe (constraint (= (f\
    \ 17) 3124550))\n//@pbe (constraint (= (f 18) 4686825))\n//@pbe (constraint (=\
    \ (f 19) 6782230))\n//@pbe (constraint (= (f 20) 10015005))\n//@pbe (constraint\
    \ (= (\nunittest\n{\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L)\
    \ == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n\
    \    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) == 18000L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpyt9xblfe.d(55): unittest failure

    ----------------

    ??:? _d_unittestp [0x427edd]

    ??:? void tmpyt9xblfe.__unittest_L50_C1() [0x427b29]

    ??:? void tmpyt9xblfe.__modtest() [0x427c60]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc03]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa96]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc29]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300d8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbb5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa6d]

    ??:? runModuleUnitTests [0x42b9d9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42832c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164133
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    static assert(n>=1);\n\
    \    if (n==1) \n        return 1;\n    long result = 0;\n    foreach (i; iota(n-1))\n\
    \        result += starts_one_ends(i+1) * starts_one_ends(n-1-i);\n    return\
    \ result;\n}\n/*\n    1*n + 10*(n-1) + 100*(n-2) + ... + 10^(n-1)*1\n    10^(n-1)\
    \ = 1 + 9*(1+10+100+...+10^(n-2))\n    10^(n-1) = 1 + 9*(1+starts_one_ends(n-1))\n\
    \    10^(n-1) - 9 = 10^(n-1) + starts_one_ends(n-1)\n    start(n) = 10^(n-1) +\
    \ starts_one_ends(n-1)\n*/\nlong starts_one(long n) \n{\n    static assert(n>=1);\n\
    \    if (n==1) \n        return 1;\n    return (long)pow(10, n-1) + starts_one_ends(n-1);\n\
    }\n/*\n    10^(n-1)*n + 1*n + 10*(n-1) + 100*(n-2) + ... + 10^(n-1)*1\n    10^n\
    \ - 10 = 10^(n-1)*n + start(n)\n    end(n) = 10^n - 10\n*/\nlong ends_one(long\
    \ n) \n{\n    static assert(n>=1);\n    if (n==1) \n        return 1;\n    return\
    \ (long)pow(10, n) - 10;\n}\nlong starts_one_count(long n) \n{\n    static assert(n>=1);\n\
    \    if (n==1) \n        return 1;\n    return starts_one(n) + starts_one_count(n-1);\n\
    }\n/*\n    Given a positive integer n, return the count of the numbers of n-digit\n\
    \    positive integers that start\nunittest\n{\n    alias candidate = starts_one_ends;\n\
    \n    assert(candidate(1L) == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L)\
    \ == 180L);\n    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) ==\
    \ 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsvmqstnj.d(31): Error: C style cast illegal, use `cast(long)pow(10,
    n - 1)`

    /tmp/tmpsvmqstnj.d(43): Error: C style cast illegal, use `cast(long)pow(10, n)`

    /tmp/tmpsvmqstnj.d(52): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsvmqstnj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164132
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    long res = 0;\n\
    \    for (long i = 1; i <= n; i++) \n    {\n        res += pow(2, i - 1);\n  \
    \  }\n    return res;\n}\nunittest\n{\n    alias candidate = starts_one_ends;\n\
    \n    assert(candidate(1L) == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L)\
    \ == 180L);\n    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) ==\
    \ 18000L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpsvrrahqm.d(23): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e85]

    ??:? void tmpsvrrahqm.__unittest_L18_C1() [0x427ad1]

    ??:? void tmpsvrrahqm.__modtest() [0x427c08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa3e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbd1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430080]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa15]

    ??:? runModuleUnitTests [0x42b981]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164133
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    if (n == 1)\
    \ \n        return 0;\n    if (n == 2) \n        return 9;\n    if (n == 3) \n\
    \        return 180;\n    long size = n + (n-1);\n    long[][] dp = new long[n+1][size+1];\n\
    \    for (int i = 0; i <= n; i++) \n        dp[i][0] = 0;\n    for (int i = 0;\
    \ i <= size; i++) \n        dp[0][i] = 0;\n    for (int i = 1; i <= n; i++) \n\
    \        dp[i][i-1] = 0;\n    dp[1][1] = 9;\n    for (int i = 2; i <= n; i++)\
    \ \n    {\n        for (int j = 1; j <= i+i-1; j++) \n        {\n            if\
    \ (j > n-1) \n                dp[i][j] = dp[i][j-1] + dp[i-1][j-1];\n        \
    \    else \n                dp[i][j] = dp[i][j-1] + dp[i-1][j-1] - dp[i-1][j];\n\
    \        }\n    }\n    return dp[n][size];\n}\nunittest\n{\n    alias candidate\
    \ = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(2L)\
    \ == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L) == 1800L);\n\
    \    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7dmqp_dn.d(18): Error: variable `n` cannot be read at compile time

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7dmqp_dn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164132
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    if (n==1) return\
    \ 1;\n    if (n==2) return 2;\n    if (n==3) return 4;\n    long result = 0;\n\
    \    for (long i=1; i<n; i++) {\n        result += starts_one_ends(i);\n    }\n\
    \    return result*9+pow(10,n-1);\n}\nunittest\n{\n    alias candidate = starts_one_ends;\n\
    \n    assert(candidate(1L) == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L)\
    \ == 180L);\n    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) ==\
    \ 18000L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4z4qg2w7.d(25): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ecd]

    ??:? void tmp4z4qg2w7.__unittest_L20_C1() [0x427b15]

    ??:? void tmp4z4qg2w7.__modtest() [0x427c4c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbf3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa86]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc19]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300c8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fba5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa5d]

    ??:? runModuleUnitTests [0x42b9c9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42831c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164133
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{ \n    return (n *\
    \ (pow(10,n-1))); \n} \nunittest\n{\n    alias candidate = starts_one_ends;\n\n\
    \    assert(candidate(1L) == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L)\
    \ == 180L);\n    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) ==\
    \ 18000L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpj5xv4li7.d(18): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e6d]

    ??:? void tmpj5xv4li7.__unittest_L13_C1() [0x427ab5]

    ??:? void tmpj5xv4li7.__modtest() [0x427bec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa26]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbb9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430068]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9fd]

    ??:? runModuleUnitTests [0x42b969]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164133
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    static struct\
    \ number_digit\n    {\n        long count;\n        long rest;\n    }\n    int[]\
    \ digits = new int[10];\n    long i = 0;\n    long count = 0;\n    long base =\
    \ 1;\n    long total = 0;\n    long digit = 0;\n    while (i < n)\n    {\n   \
    \     digits[i] = new number_digit;\n        ++i;\n    }\n    digits[0].count\
    \ = 9;\n    digits[0].rest = 0;\n    i = 1;\n    while (i < n)\n    {\n      \
    \  digits[i].count = 9 * base;\n        digits[i].rest = base;\n        base *=\
    \ 10;\n        ++i;\n    }\n    base = 1;\n    i = 0;\n    while (i < n)\n   \
    \ {\n        total += digits[i].count;\n        if (base == 1)\n        {\n  \
    \          count += digits[i].count;\n        }\n        else\n        {\n   \
    \         count += digits[i].rest;\n        }\n        base *= 10;\n        ++i;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = starts_one_ends;\n\
    \n    assert(candidate(1L) == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L)\
    \ == 180L);\n    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) ==\
    \ 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkerjg9ub.d(24): Error: cannot implicitly convert expression `new
    number_digit(0L, 0L)` of type `number_digit*` to `int`

    /tmp/tmpkerjg9ub.d(27): Error: no property `count` for type `int`

    /tmp/tmpkerjg9ub.d(28): Error: no property `rest` for type `int`

    /tmp/tmpkerjg9ub.d(32): Error: no property `count` for type `int`

    /tmp/tmpkerjg9ub.d(33): Error: no property `rest` for type `int`

    /tmp/tmpkerjg9ub.d(41): Error: no property `count` for type `int`

    /tmp/tmpkerjg9ub.d(44): Error: no property `count` for type `int`

    /tmp/tmpkerjg9ub.d(48): Error: no property `rest` for type `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkerjg9ub.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164133
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    /*\n       \
    \ This function counts the number of n-digit positive integers that\n        start\
    \ or end with 1.\nunittest\n{\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L)\
    \ == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n\
    \    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) == 18000L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf9fku30u.d(11): Error: unterminated /* */ comment

    /tmp/tmpf9fku30u.d(24): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf9fku30u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164133
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    return 0;\n\
    }\nunittest\n{\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L)\
    \ == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n\
    \    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) == 18000L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmphv_7d62p.d(17): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d4d]

    ??:? void tmphv_7d62p.__unittest_L13_C1() [0x427a30]

    ??:? void tmphv_7d62p.__modtest() [0x427ad0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba73]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a906]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fa99]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff48]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa25]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8dd]

    ??:? runModuleUnitTests [0x42b849]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42819c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164133
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{ \n    long num =\
    \ (int)pow(10, n-1);\n    long num1 = (int)pow(10, n) - 1;\n    long result =\
    \ 0;\n    foreach(i;iota(num, num1+1)){\n        auto chain = chain(i);\n    \
    \    if(chain[0] == '1' || chain[$-1] == '1'){\n            result++;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = starts_one_ends;\n\
    \n    assert(candidate(1L) == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L)\
    \ == 180L);\n    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) ==\
    \ 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppq75fwfx.d(11): Error: C style cast illegal, use `cast(int)pow(10,
    n - 1)`

    /tmp/tmppq75fwfx.d(12): Error: C style cast illegal, use `cast(int)pow(10, n)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppq75fwfx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164132
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    static struct\
    \ S \n    {\n        static long ctr;\n        static void inc() {++ctr;}\n  \
    \      static long get() {return ctr;}\n    } static s;\n    //\n    if (n ==\
    \ 1) return 1;\n    else if (n == 2) return 11;\n    else if (n == 3) return 111;\n\
    \    else if (n == 4) return 1111;\n    else if (n == 5) return 11111;\n    else\
    \ if (n == 6) return 111111;\n    else if (n == 7) return 1111111;\n    else if\
    \ (n == 8) return 11111111;\n    else if (n == 9) return 111111111;\n    else\
    \ if (n == 10) return 1111111111;\n    else if (n == 11) return 11111111111;\n\
    \    else if (n == 12) return 111111111111;\n    else if (n == 13) return 1111111111111;\n\
    \    else if (n == 14) return 11111111111111;\n    else if (n == 15) return 111111111111111;\n\
    \    else if (n == 16) return 1111111111111111;\n    else if (n == 17) return\
    \ 11111111111111111;\n    else if (n == 18) return 111111111111111111;\n    else\
    \ if (n == 19) return 1111111111111111111;\n    else if (n == 20) return 11111111111111111111;\n\
    \    else if (n == 21) return 111111111111111111111;\n    else if (n == 22) return\
    \ 1111111111111111111111;\n    else if (n == 23) return 11111111111111111111111;\n\
    \    else if (n == 24) return 111111111111111111111111;\n    else if (n == 25)\
    \ return 1111111111111111111111111;\n    else if (n == 26) return 11111111111111111111111111;\n\
    \    else if (n == 27) return 111111111111111111111111111;\n    else if (n ==\
    \ 28) return 1111111111111111111111111111;\n    else if (n == 29) return 11111111111111111111111111111;\n\
    \    else if (n == 30) return 111111111111111111111111111111;\nunittest\n{\n \
    \   alias candidate = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n \
    \   assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L)\
    \ == 1800L);\n    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyd46hikz.d(16): Error: no identifier for declarator `s`

    /tmp/tmpyd46hikz.d(16): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmpyd46hikz.d(37): Error: signed integer overflow

    /tmp/tmpyd46hikz.d(38): Error: integer overflow

    /tmp/tmpyd46hikz.d(39): Error: integer overflow

    /tmp/tmpyd46hikz.d(40): Error: integer overflow

    /tmp/tmpyd46hikz.d(41): Error: integer overflow

    /tmp/tmpyd46hikz.d(42): Error: integer overflow

    /tmp/tmpyd46hikz.d(43): Error: integer overflow

    /tmp/tmpyd46hikz.d(44): Error: integer overflow

    /tmp/tmpyd46hikz.d(45): Error: integer overflow

    /tmp/tmpyd46hikz.d(46): Error: integer overflow

    /tmp/tmpyd46hikz.d(47): Error: integer overflow

    /tmp/tmpyd46hikz.d(48): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyd46hikz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164133
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    long result;\n\
    \    switch (n) {\n        case 1 :\n            result = 2;\n            break;\n\
    \        case 2 :\n            result = 4;\n            break;\n        default\
    \ :\n            result = starts_one_ends(n - 1) + starts_one_ends(n - 2);\n \
    \           break;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(2L)\
    \ == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L) == 1800L);\n\
    \    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9cr3if3m.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427db5]

    ??:? void tmp9cr3if3m.__unittest_L25_C1() [0x427a94]

    ??:? void tmp9cr3if3m.__modtest() [0x427b34]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42badb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a96e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb01]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffb0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa8d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a945]

    ??:? runModuleUnitTests [0x42b8b1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428204]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164133
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    if (n <= 0)\
    \ return 0;\n    else return (10^(n-1)) - (10^(n-2));\n}\nunittest\n{\n    alias\
    \ candidate = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(2L)\
    \ == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L) == 1800L);\n\
    \    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpr3_h42qz.d(18): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d75]

    ??:? void tmpr3_h42qz.__unittest_L14_C1() [0x427a58]

    ??:? void tmpr3_h42qz.__modtest() [0x427af8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba9b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a92e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff70]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa4d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a905]

    ??:? runModuleUnitTests [0x42b871]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281c4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164133
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    auto a = 0;\n\
    \    auto b = 1;\n    auto c = 0;\n    auto d = 1;\n    auto i = n;\n    while\
    \ (i > 0) {\n        a = ((10 * a) + b) % 1000000007;\n        b = (b + c) % 1000000007;\n\
    \        c = ((10 * c) + d) % 1000000007;\n        d = (d + a) % 1000000007;\n\
    \        i -= 1;\n    }\n    return ((n - 1) * ((a + b) % 1000000007)) % 1000000007;\n\
    }\nunittest\n{\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L)\
    \ == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n\
    \    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) == 18000L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp839q1fbd.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427df5]

    ??:? void tmp839q1fbd.__unittest_L25_C1() [0x427ad4]

    ??:? void tmp839q1fbd.__modtest() [0x427b74]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb1b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9ae]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb41]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42fff0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42facd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a985]

    ??:? runModuleUnitTests [0x42b8f1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428244]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164133
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    long long nn\
    \ = n;\n    long long first_digit = nn / 10;\n    return (n <= 1) ? n : first_digit\
    \ + (10 - first_digit) * (n - 1);\n}\n/*\n    It's obvious that when n <= 2, the\
    \ answer is always n. \n    Let's assume that n > 2. There are two ways to get\
    \ a n-digit number start or \n    end with 1:\nunittest\n{\n    alias candidate\
    \ = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(2L)\
    \ == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L) == 1800L);\n\
    \    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi6aozglv.d(11): Error: use `long` for a 64 bit integer instead
    of `long long`

    /tmp/tmpi6aozglv.d(12): Error: use `long` for a 64 bit integer instead of `long
    long`

    /tmp/tmpi6aozglv.d(15): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi6aozglv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164133
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    if (n == 1)\
    \ return 1;\n    return (9 * pow(10, n - 1)) + starts_one_ends(n - 1);\n}\nunittest\n\
    {\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n\
    \    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L)\
    \ == 1800L);\n    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpe_8eaeni.d(19): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e85]

    ??:? void tmpe_8eaeni.__unittest_L14_C1() [0x427acd]

    ??:? void tmpe_8eaeni.__modtest() [0x427c04]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa3e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbd1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430080]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa15]

    ??:? runModuleUnitTests [0x42b981]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164133
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    ulong result\
    \ = 0;\n    foreach(ulong i;0..n)\n    {\n        ulong tmp = pow(10,i);\n   \
    \     result += tmp;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(2L)\
    \ == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L) == 1800L);\n\
    \    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpg889llih.d(24): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e65]

    ??:? void tmpg889llih.__unittest_L19_C1() [0x427acd]

    ??:? void tmpg889llih.__modtest() [0x427be4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa1e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbb1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430060]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f5]

    ??:? runModuleUnitTests [0x42b961]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164133
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    return int(pow(10,n))\
    \ - int(pow(9,n)) + int(pow(9,n-1));\n}\nunittest\n{\n    alias candidate = starts_one_ends;\n\
    \n    assert(candidate(1L) == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L)\
    \ == 180L);\n    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) ==\
    \ 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpztywsphq.d(11): Error: cannot implicitly convert expression `pow(10,
    n)` of type `long` to `int`

    /tmp/tmpztywsphq.d(11): Error: cannot implicitly convert expression `pow(9, n)`
    of type `long` to `int`

    /tmp/tmpztywsphq.d(11): Error: cannot implicitly convert expression `pow(9, n
    - 1L)` of type `long` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpztywsphq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164133
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n\tlong end_count\
    \ = 1;\n\tlong start_count = 1;\n\tlong mod = 100000;\n\tfor (long i = 2; i <\
    \ n; i++) {\n\t\tmod *= 10;\n\t\tend_count += cast(long) pow(10, i - 1);\n\t\t\
    start_count += end_count;\n\t}\n\tlong total = end_count + start_count;\n\tif\
    \ (total > mod) {\n\t\ttotal %= mod;\n\t}\n\treturn total;\n}\nunittest\n{\n \
    \   alias candidate = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n \
    \   assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L)\
    \ == 1800L);\n    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3iznwgw2.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ec5]

    ??:? void tmp3iznwgw2.__unittest_L25_C1() [0x427af0]

    ??:? void tmp3iznwgw2.__modtest() [0x427c48]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbeb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa7e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc11]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb9d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa55]

    ??:? runModuleUnitTests [0x42b9c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428314]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164133
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{ \n    long[long]\
    \ dp = new long[long[](n + 1, 0)];\n    dp[1] = 10;\n    long ret = 10;\n    foreach\
    \ (i; 2 .. n + 1) {\n        dp[i] = dp[i - 1] * 9 + pow(10, i - 1);\n       \
    \ ret += dp[i];\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate =\
    \ starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(2L)\
    \ == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L) == 1800L);\n\
    \    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpin5an5pj.d(11): Error: found `[` when expecting `.` following long

    /tmp/tmpin5an5pj.d(11): Error: found `]` when expecting identifier following `long`.

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpin5an5pj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164133
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    long nx1 = n-1;\n\
    \    return pow(10, nx1);\n}\n/*\nunittest\n{\n    alias candidate = starts_one_ends;\n\
    \n    assert(candidate(1L) == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L)\
    \ == 180L);\n    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) ==\
    \ 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4zy536mk.d(14): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4zy536mk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164133
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    return n ==\
    \ 1 ? 2 : starts_one_ends(n - 1) + (n - 1) * (long)pow(10, n - 2);\n}\nunittest\n\
    {\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n\
    \    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L)\
    \ == 1800L);\n    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiy4z39s4.d(11): Error: C style cast illegal, use `cast(long)pow(10,
    n - 2)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiy4z39s4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164133
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    if (n < 1)\n\
    \        return 0;\n    else if (n == 1)\n        return 2;\n    else\n      \
    \  return starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\nunittest\n{\n \
    \   alias candidate = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n \
    \   assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L)\
    \ == 1800L);\n    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpovsipuwa.d(22): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d95]

    ??:? void tmpovsipuwa.__unittest_L18_C1() [0x427a78]

    ??:? void tmpovsipuwa.__modtest() [0x427b18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42babb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a94e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fae1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff90]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa6d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a925]

    ??:? runModuleUnitTests [0x42b891]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164133
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    if (n==1) return\
    \ 2;\n    long nums = n;\n    long counts = 0;\n    for (; nums < math.pow(10,\
    \ n); nums++) {\n        if (nums % 10 == 1 || nums / math.pow(10, n-1) == 1)\n\
    \            counts++;\n    }\n    return counts;\n}\nunittest\n{\n    alias candidate\
    \ = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(2L)\
    \ == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L) == 1800L);\n\
    \    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpifdpof41.d(14): Error: undefined identifier `math`, did you mean
    function `main`?

    /tmp/tmpifdpof41.d(15): Error: undefined identifier `math`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpifdpof41.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164133
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    assert(n > 0);\n\
    \    return (long)pow(10, n - 1);\n}\nlong count_num(long n) \n{\n    assert(n\
    \ > 0);\n    return starts_one_ends(n) * 9;\n}\nunittest\n{\n    alias candidate\
    \ = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(2L)\
    \ == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L) == 1800L);\n\
    \    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu3t_4l89.d(12): Error: C style cast illegal, use `cast(long)pow(10,
    n - 1)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu3t_4l89.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164133
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    long ret = 0;\n\
    \    long lo = (long)pow(10, n - 1);\n    long hi = (long)pow(10, n) - 1;\n  \
    \  foreach (i; lo .. hi + 1)\n    {\n        if (is_1(i))\n            ret++;\n\
    \    }\n    return ret;\n}\nunittest\n{\n    alias candidate = starts_one_ends;\n\
    \n    assert(candidate(1L) == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L)\
    \ == 180L);\n    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) ==\
    \ 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvrz20sbc.d(12): Error: C style cast illegal, use `cast(long)pow(10,
    n - 1)`

    /tmp/tmpvrz20sbc.d(13): Error: C style cast illegal, use `cast(long)pow(10, n)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvrz20sbc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164133
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    if (n == 1)\n\
    \        return 10;\n    \n    return power(10L, n-1) + (n-1) * power(9L, n-1);\n\
    }\nunittest\n{\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L)\
    \ == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n\
    \    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) == 18000L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4vi9fpu7.d(14): Error: undefined identifier `power`, did you mean
    template `pow(F, G)(F x, G n) if (isFloatingPoint!F && isIntegral!G)`?

    /tmp/tmp4vi9fpu7.d(14): Error: undefined identifier `power`, did you mean template
    `pow(F, G)(F x, G n) if (isFloatingPoint!F && isIntegral!G)`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4vi9fpu7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164133
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    long num = 1;\n\
    \    long den = 1;\n    long ans = 0;\n    auto counts = tuple(0L, 0L, 0L, 0L,\
    \ 0L, 0L, 0L, 0L, 0L, 0L);\n    num = 10 - 1;\n    den = 9;\n    for (long i =\
    \ 1; i < n; i++) {\n        num *= 10 - 1;\n        den *= 9;\n    }\n    ans\
    \ = num / den;\n    return ans;\n}\nunittest\n{\n    alias candidate = starts_one_ends;\n\
    \n    assert(candidate(1L) == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L)\
    \ == 180L);\n    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) ==\
    \ 18000L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2fktqp3l.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x429825]

    ??:? void tmp2fktqp3l.__unittest_L24_C1() [0x428529]

    ??:? void tmp2fktqp3l.__modtest() [0x429290]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42e153]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42d062]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431989]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x431e38]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431915]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42d039]

    ??:? runModuleUnitTests [0x42df29]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429c74]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164133
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    long count =\
    \ 0;\n    if (n == 1) \n    {\n        return 1;\n    }\n    for (long i = 1;\
    \ i < n; i++) \n    {\n        count += pow(10, i - 1);\n    }\n    return count\
    \ * 2;\n}\nunittest\n{\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L)\
    \ == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n\
    \    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) == 18000L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpomjfve04.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e95]

    ??:? void tmpomjfve04.__unittest_L22_C1() [0x427ae1]

    ??:? void tmpomjfve04.__modtest() [0x427c18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbe1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430090]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb6d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa25]

    ??:? runModuleUnitTests [0x42b991]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164133
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    if (n == 1)\n\
    \        return 9;\n    return (9 * (10 ** (n - 1))) + starts_one_ends(n - 1);\n\
    }\nunittest\n{\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L)\
    \ == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n\
    \    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) == 18000L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9mr93mn0.d(13): Error: can only `*` a pointer, not a `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9mr93mn0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164133
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    enum E = n*8/3;\n\
    \    auto bits_in_n = (n*8/3+1);\n    auto dp = uint[0..bits_in_n][0..1];\n  \
    \  dp[0][0] = 1;\n    foreach(i; 1..bits_in_n)\n    {\n        dp[i][0] = dp[i-1][0]\
    \ + dp[i-1][1];\n        dp[i][1] = dp[i-1][0];\n    }\n    return dp[bits_in_n-1][0]\
    \ + dp[bits_in_n-1][1];\n}\nunittest\n{\n    alias candidate = starts_one_ends;\n\
    \n    assert(candidate(1L) == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L)\
    \ == 180L);\n    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) ==\
    \ 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj9tn1kel.d(13): Error: found `[` when expecting `.` following uint

    /tmp/tmpj9tn1kel.d(13): Error: found `0` when expecting identifier following `uint`.

    /tmp/tmpj9tn1kel.d(13): Error: semicolon expected following auto declaration,
    not `..`

    /tmp/tmpj9tn1kel.d(13): Error: found `..` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj9tn1kel.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164133
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    return (n <\
    \ 2) ? 1 : \n        pow(2, n - 1) + \n        starts_one_ends(n - 1);\n}\nunittest\n\
    {\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n\
    \    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L)\
    \ == 1800L);\n    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpnyecl7qf.d(20): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e85]

    ??:? void tmpnyecl7qf.__unittest_L15_C1() [0x427acd]

    ??:? void tmpnyecl7qf.__modtest() [0x427c04]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa3e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbd1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430080]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa15]

    ??:? runModuleUnitTests [0x42b981]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164133
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    return (exp(cast(double)n)\
    \ - 1) / (exp(1) - 1);\n}\n/*\nlong ends_one_ends(long n) \n{\n    return (exp(cast(double)n)\
    \ - 1) / (exp(1) - 1);\n}\n*/\nunittest\n{\n    alias candidate = starts_one_ends;\n\
    \n    assert(candidate(1L) == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L)\
    \ == 180L);\n    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) ==\
    \ 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx4fi5y4b.d(11): Error: `std.math.exp` called with argument types
    `(int)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1934):     `std.math.exp(real
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(2062):     `std.math.exp(float
    x)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx4fi5y4b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164133
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n\tlong ret;\n\t\
    static struct ONE end_one;\n\t\n\tif (n == 1) return 1;\n\t\n\tstatic if (is(typeof(end_one)\
    \ == struct)) {\n\t\tif (end_one.n == n)\n\t\t\treturn end_one.ret;\n\t} else\
    \ {\n\t\tend_one = ONE(n, 0);\n\t}\n\t\n\tret = starts_one_ends(n - 1) + pow(10,\
    \ n - 1);\n\tend_one.ret = ret;\n\treturn ret;\n}\nunittest\n{\n    alias candidate\
    \ = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(2L)\
    \ == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L) == 1800L);\n\
    \    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw462skmj.d(12): Error: { } expected following `struct` declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw462skmj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164133
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{ \n    long left =\
    \ 1, right = 0; \n    long count = 0; \n    int len = n; \n    while (len) \n\
    \    { \n        count += left * 9 * pow(10, len - 1); \n        right += left;\
    \ \n        left = right; \n        len--; \n    } \n    return count; \n} \n\
    unittest\n{\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L)\
    \ == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n\
    \    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) == 18000L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvlpogto1.d(13): Error: cannot implicitly convert expression `n`
    of type `long` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvlpogto1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164133
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    long a = pow(10,\
    \ n - 1);\n    long b = 10 * a;\n    return b - a + 1;\n}\nunittest\n{\n    alias\
    \ candidate = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(2L)\
    \ == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L) == 1800L);\n\
    \    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvw_t_lu6.d(19): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e6d]

    ??:? void tmpvw_t_lu6.__unittest_L15_C1() [0x427a94]

    ??:? void tmpvw_t_lu6.__modtest() [0x427bec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa26]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbb9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430068]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9fd]

    ??:? runModuleUnitTests [0x42b969]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164133
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{ \n    long result\
    \ = 0;\n    result = (long) pow(10, n - 1); \n    return result; \n} \nunittest\n\
    {\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n\
    \    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L)\
    \ == 1800L);\n    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp949dzb6y.d(12): Error: C style cast illegal, use `cast(long)pow(10,
    n - 1)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp949dzb6y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164133
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{ \n    long l = n\
    \ - 1;\n    if (n < 2)\n        return l;\n    l *= 9;\n    l += start_one_ends(n\
    \ - 1);\n    return l;\n}\nunittest\n{\n    alias candidate = starts_one_ends;\n\
    \n    assert(candidate(1L) == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L)\
    \ == 180L);\n    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) ==\
    \ 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp880mvzd9.d(15): Error: undefined identifier `start_one_ends`, did
    you mean function `starts_one_ends`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp880mvzd9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164133
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n\tlong t = 1;\n\t\
    long res = 0;\n\tlong i = 1;\n\tlong k = 1;\n\tlong d;\n\twhile (i <= n)\n\t{\n\
    \t\td = n - i;\n\t\tk = 9;\n\t\twhile (d > 0)\n\t\t{\n\t\t\tk *= 10;\n\t\t\td--;\n\
    \t\t}\n\t\tres += k;\n\t\ti++;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias\
    \ candidate = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(2L)\
    \ == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L) == 1800L);\n\
    \    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpk5ssrx7i.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dbd]

    ??:? void tmpk5ssrx7i.__unittest_L30_C1() [0x427a9c]

    ??:? void tmpk5ssrx7i.__modtest() [0x427b3c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bae3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a976]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb09]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffb8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa95]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]

    ??:? runModuleUnitTests [0x42b8b9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42820c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164133
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{ \n    // In the case\
    \ of 0 or 1 digit numbers, the number of integers is the same\n    // as the number\
    \ of digits\n    if (n <= 1)\n        return n;\n    \n    // In the case of numbers\
    \ that start or end with 1, 10**(n-1) of the numbers\n    // are of the form 10**(n-1)\
    \ * d, and 9 of these always start with 1.\n    // The remaining 10**(n-1) - 9\
    \ start with either 1 or 2, so are of the form\n    // 10**(n-1) * d + x where\
    \ x >= 1 and x <= 8\n    // However, since we have already counted the 10**(n-1)\
    \ numbers that start\n    // with 1, we only count those numbers where x >= 2\n\
    \    // Furthermore, since we have already counted the 10**(n-1) numbers that\n\
    \    // start with 1 or 2, we only count those numbers where x >= 3\n    // We\
    \ can proceed in this way until we count all numbers.\n    // This gives us the\
    \ total number of n-digit integers that start or end\n    // with 1.\n    // We\
    \ subtract 1 to account for the fact that we have counted the number\n    // 1\
    \ twice.\n    long result = 1;\n    for (int i = 1; i < n; i++)\n        result\
    \ += (9*10**(i-1))*(n-i);\n    return result - 1;\n}\nunittest\n{\n    alias candidate\
    \ = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(2L)\
    \ == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L) == 1800L);\n\
    \    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2hdww0t4.d(31): Error: can only `*` a pointer, not a `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2hdww0t4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164133
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    return (n -\
    \ 1) * 10 + 1;\n}\nunittest\n{\n    alias candidate = starts_one_ends;\n\n   \
    \ assert(candidate(1L) == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L)\
    \ == 180L);\n    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) ==\
    \ 18000L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpys3ums05.d(18): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d5d]

    ??:? void tmpys3ums05.__unittest_L13_C1() [0x427a5d]

    ??:? void tmpys3ums05.__modtest() [0x427adc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a916]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42faa9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff58]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8ed]

    ??:? runModuleUnitTests [0x42b859]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281ac]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164133
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{ \n    // dp[i][j]\
    \ contains count of j digits numbers with i 1's and i 0's \n    // i is up to\
    \ 8. j is up to 9\n    long[9][10] dp;\n    dp[0][0] = 1;\n    // dp[i][0] = 0\
    \ for i>0 because we cannot make number with 0 digits and at least 1 1\n    //\
    \ dp[0][j] is 1 for all j because we can only make 1 with 0 1's.\n    // dp[i][j]\
    \ is sum of dp[i-1][j-1] and dp[i][j-1]\n    // dp[i-1][j-1] is count of j-1 digit\
    \ numbers with i-1 1's and i 0's\n    // dp[i][j-1] is count of j-1 digit numbers\
    \ with i 1's and i 0's\n    // so, to make j digit number with i 1's and i 0's,\
    \ we can add a 1 at the end of all j-1 digit numbers with i-1 1's and i 0's.\n\
    \    // or we can add a 0 at the end of all j-1 digit numbers with i 1's and i\
    \ 0's.\n    foreach(i; 1..8) {\n        foreach(j; 1..9) {\n            dp[i][j]\
    \ = dp[i-1][j-1] + dp[i][j-1];\n        }\n    }\n    // Now we have counts of\
    \ 1's and 0's in numbers of all lengths.\n    // Count of numbers of length n\
    \ with 1's and 0's is sum of counts for 1's and 0's in numbers of length n.\n\
    \    // After that, the count is dp[1][n] + dp[2][n] + .. dp[8][n]\n    long sum\
    \ = 0;\n    foreach(i; 1..8) {\n        sum += dp[i][n];\n    }\n    return sum;\n\
    } \n \n// Driver code \nunittest\n{\n    alias candidate = starts_one_ends;\n\n\
    \    assert(candidate(1L) == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L)\
    \ == 180L);\n    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) ==\
    \ 18000L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpg8u58usv.d(43): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f4d]

    ??:? void tmpg8u58usv.__unittest_L38_C1() [0x427c51]

    ??:? void tmpg8u58usv.__modtest() [0x427cd0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bce7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab7a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fd0d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4301bc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc99]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab51]

    ??:? runModuleUnitTests [0x42babd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428410]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164133
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{ \n    if (n <= 1)\
    \ return 0;\n    long k = (n - 1) / 2;\n    long res = pow(10, k);\n    long ones\
    \ = n - 2 * k;\n    if (ones > 0) {\n        if (k > 0) {\n            res = res\
    \ + 9 * pow(10, k - 1);\n        } else {\n            res = res + ones;\n   \
    \     }\n    }\n    return res;\n}\nstatic assert(starts_one_ends(5) == 49);\n\
    static assert(starts_one_ends(4) == 30);\nstatic assert(starts_one_ends(3) ==\
    \ 10);\nstatic assert(starts_one_ends(2) == 0);\nstatic assert(starts_one_ends(1)\
    \ == 0);\n/*\n    Given an integer n, return all possible sequences that sum to\
    \ n.\n    Each sequence may or may not contain all numbers from 1 to n.\nunittest\n\
    {\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n\
    \    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L)\
    \ == 1800L);\n    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoqjg_93s.d(29): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoqjg_93s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164133
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    enum e = 2*n\
    \ -1;\n    long count = 0;\n    long d = n;\n    foreach(int; i; 0..d+1)\n   \
    \ {\n        long r = 10^e + 1 - 10^(e-i);\n        count += r;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L)\
    \ == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n\
    \    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) == 18000L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8isdijc5.d(14): Error: no identifier for declarator `int`

    /tmp/tmp8isdijc5.d(14): Error: found `;` when expecting `)`

    /tmp/tmp8isdijc5.d(14): Error: found `..` when expecting `;` following statement

    /tmp/tmp8isdijc5.d(14): Error: found `)` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8isdijc5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164133
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    //\n    // We're\
    \ going to use the \"stars and bars\" combinatorial technique here.\n    //\n\
    \    // For example, say we want the number of 4-digit positive integers that\n\
    \    // start with 1.\n    //\n    // The number of ways to choose the 1 is clearly\
    \ 1.\n    // The number of ways to choose the next 3 digits is 10^3.\n    // Therefore,\
    \ the total number of integers is 10^3.\n    //\n    // But, we're not just looking\
    \ for integers that start with 1, we're also\n    // looking for integers that\
    \ end with 1.\n    //\n    // In order to count those, we can simply imagine taking\
    \ our example above\n    // and flipping it on its head. That is, we now want\
    \ 4-digit integers that\n    // end with 1.\n    //\n    // The number of ways\
    \ to choose the last digit is clearly 1.\n    // The number of ways to choose\
    \ the first 3 digits is 10^3.\n    // Therefore, the total number of integers\
    \ is 10^3.\n    //\n    // Thus, the total number of integers that start or end\
    \ with 1 is\n    //\n    //     10^3 + 10^3 = 10^3 * 2\n    //\n    //\n    //\
    \ For example, say we want the number of 7-digit positive integers that\n    //\
    \ start with 1.\n    //\n    // The number of ways to choose the 1 is clearly\
    \ 1.\n    // The number of ways to choose the next 6 digits is 10^6.\n    // Therefore,\
    \ the total number of integers is 10^6.\n    //\n    // But, we're not just looking\
    \ for integers that start with 1, we're also\n    // looking for integers that\
    \ end with 1.\n    //\n    // In order to count those, we can simply imagine taking\
    \ our example above\n    // and flipping it on its head. That is, we now want\
    \ 7-digit integers that\n    // end with 1.\n    //\n    // The number of ways\
    \ to choose the last digit is clearly 1.\n    // The number of ways to choose\
    \ the first 6 digits is 10^6.\n    // Therefore, the total number of integers\
    \ is 10^6.\n    //\n    // Thus, the total number of integers that start or end\
    \ with\nunittest\n{\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L)\
    \ == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n\
    \    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) == 18000L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2ulswqb5.d(56): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2ulswqb5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164133
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    /*\n       \
    \ X = 10^n\n        then:\n        result = X / 2 +\n                 X / 4 +\n\
    \                 X / 8 +\n                 ... +\n                 X / (2^(n-1))\n\
    \    */\n    long X = ipow(10L, n);\n    long result = 0;\n    long multiplier\
    \ = 1;\n    while (multiplier <= n)\n    {\n        result += X / (2L * multiplier);\n\
    \        multiplier *= 2;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(2L)\
    \ == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L) == 1800L);\n\
    \    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0jxutnic.d(20): Error: undefined identifier `ipow`, did you mean
    template `pow(F, G)(F x, G n) if (isFloatingPoint!F && isIntegral!G)`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0jxutnic.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164133
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    auto digits\
    \ = [](long n) pure nothrow @nogc => n < 10 ? 1 : digits(n / 10) + 1;\n    if\
    \ (n == 1) \n        return 2;\n    else \n        return 0.5 * (power(10.0L,\
    \ n - 1) - power(9.0L, n - 1)) + 0.5 * (power(10.0L, n - 2) - power(9.0L, n -\
    \ 2));\n}\nunittest\n{\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L)\
    \ == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n\
    \    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) == 18000L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe14vxqm_.d(11): Error: found `n` when expecting `.` following long

    /tmp/tmpe14vxqm_.d(11): Error: found `)` when expecting identifier following `long`.

    /tmp/tmpe14vxqm_.d(11): Error: found `pure` when expecting `,`

    /tmp/tmpe14vxqm_.d(11): Error: expression expected, not `nothrow`

    /tmp/tmpe14vxqm_.d(11): Error: found `@` when expecting `,`

    /tmp/tmpe14vxqm_.d(11): Error: found `;` when expecting `,`

    /tmp/tmpe14vxqm_.d(12): Error: expression expected, not `if`

    /tmp/tmpe14vxqm_.d(13): Error: found `return` when expecting `,`

    /tmp/tmpe14vxqm_.d(13): Error: found `;` when expecting `,`

    /tmp/tmpe14vxqm_.d(14): Error: expression expected, not `else`

    /tmp/tmpe14vxqm_.d(15): Error: found `return` when expecting `,`

    /tmp/tmpe14vxqm_.d(15): Error: found `;` when expecting `,`

    /tmp/tmpe14vxqm_.d(16): Error: expression expected, not `}`

    /tmp/tmpe14vxqm_.d(17): Error: found `unittest` when expecting `,`

    /tmp/tmpe14vxqm_.d(27): Error: found `void` when expecting `,`

    /tmp/tmpe14vxqm_.d(27): Error: found `{` when expec'
  stdout: ''
  timestamp: 1660164133
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    if (n <= 0)\n\
    \        return 0;\n    else if (n == 1)\n        return 1;\n    else \n    {\n\
    \        long power = (long) pow(10, n - 1);\n        return starts_one_ends(n\
    \ - 1) + (power - 1) * power / 9;\n    }\n}\n \nunittest\n{\n    alias candidate\
    \ = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(2L)\
    \ == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L) == 1800L);\n\
    \    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_c696kov.d(17): Error: C style cast illegal, use `cast(long)pow(10,
    n - 1)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_c696kov.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164133
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    long[] counts;\n\
    \    long total = 0;\n    long limit = 10 ^ n;\n    long count = 1;\n    long\
    \ i = 0;\n    long j = 0;\n    long sum = 0;\n    long current = 1;\n    long\
    \ sum_total = 0;\n    long val = 0;\n    long k = 0;\n    long m = 0;\n    long\
    \ f = 0;\n    long s = 0;\n    long a = 0;\n    long b = 0;\n    long c = 0;\n\
    \    long d = 0;\n    long e = 0;\n    long h = 0;\n    long l = 0;\n    long\
    \ g = 0;\n    long v = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n\
    \    long u = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long\
    \ z = 0;\n    counts = new long[n + 1];\n    for (i = 1; i <= n; i++) {\n    \
    \    val = 10 ^ i;\n        if (i == 1) {\n            counts[i] = 2;\n      \
    \  } else {\n            counts[i] = 9 * (i - 1) * 10 ^ (i - 2);\n        }\n\
    \        writeln(counts[i]);\n    }\n    return 1;\n}\nunittest\n{\n    alias\
    \ candidate = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(2L)\
    \ == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L) == 1800L);\n\
    \    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgx1msl40.d(50): Error: `writeln` is not defined, perhaps `import
    std.stdio;` is needed?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgx1msl40.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164133
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{ \n    long dp[][]\
    \ = new long[2][n + 1]; \n    dp[0][1] = 0; \n    dp[1][1] = 1; \n    for (int\
    \ i = 2; i <= n; i++) { \n        dp[0][i] = dp[0][i - 1] + dp[1][i - 1]; \n \
    \       dp[1][i] = dp[0][i - 1]; \n    } \n    return dp[0][n] + dp[1][n]; \n\
    } \nunittest\n{\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L)\
    \ == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n\
    \    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) == 18000L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp75jx2dvk.d(11): Deprecation: instead of C-style syntax, use D-style
    syntax `long[][] dp`

    /tmp/tmp75jx2dvk.d(11): Error: cannot implicitly convert expression `new long[2][](cast(ulong)(n
    + 1L))` of type `long[2][]` to `long[][]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp75jx2dvk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164133
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    long digits\
    \ = 1;\n    long res = 0;\n    long start = 2;\n    long end = 0;\n    long count\
    \ = 10;\n    long index = 1;\n    while (digits < n)\n    {\n        end = count;\n\
    \        count *= 10;\n        res += end - start;\n        start = end;\n   \
    \     digits++;\n    }\n    res += count / 10;\n    return res;\n}\nunittest\n\
    {\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n\
    \    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L)\
    \ == 1800L);\n    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2hdc01fg.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dc5]

    ??:? void tmp2hdc01fg.__unittest_L28_C1() [0x427aec]

    ??:? void tmp2hdc01fg.__modtest() [0x427b48]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baeb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a97e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb11]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffc0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa9d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]

    ??:? runModuleUnitTests [0x42b8c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428214]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164133
- exit_code: -8
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    return n ? \n\
    \        pow(5, n-1) + 4 * pow(5, n-2) :\n        0;\n}\nunittest\n{\n    alias\
    \ candidate = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(2L)\
    \ == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L) == 1800L);\n\
    \    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660164134
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    long max_limit\
    \ = long(pow(10, n));\n    long min_limit = long(pow(10, n - 1));\n    return\
    \ (max_limit - min_limit) * 9 + min_limit;\n}\nunittest\n{\n    alias candidate\
    \ = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(2L)\
    \ == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L) == 1800L);\n\
    \    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5e2cfsvi.d(19): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e85]

    ??:? void tmp5e2cfsvi.__unittest_L15_C1() [0x427aac]

    ??:? void tmp5e2cfsvi.__modtest() [0x427c04]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa3e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbd1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430080]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa15]

    ??:? runModuleUnitTests [0x42b981]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164133
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    static struct\
    \ Helper\n    {\n        int[int] cache;\n        auto operator()() -> long\n\
    \        {\n            return 0;\n        }\n        auto operator()(int n) ->\
    \ long\n        {\n            if (cache.count(n))\n                return cache[n];\n\
    \            else\n            {\n                auto r = (*this)(n - 1) + 9\
    \ * pow(10, n - 1);\n                cache[n] = r;\n                return r;\n\
    \            }\n        }\n    } helper;\n    if (n < 0)\n        return 0;\n\
    \    return helper(n);\n}\nunittest\n{\n    alias candidate = starts_one_ends;\n\
    \n    assert(candidate(1L) == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L)\
    \ == 180L);\n    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) ==\
    \ 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg7gifare.d(14): Error: semicolon expected following function declaration

    /tmp/tmpg7gifare.d(14): Error: declaration expected, not `-`

    /tmp/tmpg7gifare.d(18): Error: semicolon expected following function declaration

    /tmp/tmpg7gifare.d(18): Error: expression expected, not `>`

    /tmp/tmpg7gifare.d(18): Error: found `long` when expecting `;` following statement

    /tmp/tmpg7gifare.d(29): Error: no identifier for declarator `helper`

    /tmp/tmpg7gifare.d(30): Error: declaration expected, not `if`

    /tmp/tmpg7gifare.d(32): Error: declaration expected, not `return`

    /tmp/tmpg7gifare.d(33): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg7gifare.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164133
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    long[4] fact_arr\
    \ = factorials!long(4);\n    switch(n) {\n        case 1:\n            return\
    \ 2;\n        case 2:\n            return 10;\n        default:\n            long\
    \ result = fact_arr[n]/fact_arr[n-2];\n            return (result*9/10);\n   \
    \ }\n}\nunittest\n{\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L)\
    \ == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n\
    \    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) == 18000L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsep2z3zw.d(11): Error: template instance `factorials!long` template
    `factorials` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsep2z3zw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164133
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{ \n    long s = 0;\n\
    \    if (n == 1) \n        return 2; \n    if (n == 2) \n        return 4; \n\
    \    s = starts_one_ends(n - 1) + starts_one_ends(n - 2); \n    return s; \n}\
    \ \n  \nlong ways_to_start_one(long n) \n{ \n    long n1, n2, n3; \n    n1 = n2\
    \ = n3 = 0; \n    if (n == 1) \n        return 2; \n    if (n == 2) \n       \
    \ return 4; \n    if (n == 3) \n        return 6; \n    n1 = ways_to_start_one(n\
    \ - 1); \n    n2 = ways_to_start_one(n - 2); \n    n3 = ways_to_start_one(n -\
    \ 3); \n    return (n1 + n2 + n3); \n} \nunittest\n{\n    alias candidate = starts_one_ends;\n\
    \n    assert(candidate(1L) == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L)\
    \ == 180L);\n    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) ==\
    \ 18000L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpo_ez0hcd.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e7d]

    ??:? void tmpo_ez0hcd.__unittest_L35_C1() [0x427b60]

    ??:? void tmpo_ez0hcd.__modtest() [0x427c00]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bba3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa36]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430078]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb55]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa0d]

    ??:? runModuleUnitTests [0x42b979]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282cc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164134
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    static long[const]\
    \ digits = [0L,1L,2L,3L,4L,5L,6L,7L,8L,9L];\n    static long[string] memo = [\"\
    0\":1,\"1\":2];\n    static long count(long n) \n    {\n        if (n == 0) return\
    \ 1;\n        if (n == 1) return 2;\n        // if not a multiple of 2, then there\
    \ is no way to start and end with a 1\n        if (n % 2 == 1) return count(n-1);\n\
    \        auto key = n.stringof;\n        if (key in memo) return memo[key];\n\
    \        long result = 0;\n        foreach (d; digits) \n        {\n         \
    \   if (d == 0) continue;\n            result += count(n-1);\n        }\n    \
    \    memo[key] = result;\n        return result;\n    }\n    return count(n);\n\
    }\n// ----\nlong starts_one_ends2(long n) \n{\n    static long[const] digits =\
    \ [0L,1L,2L,3L,4L,5L,6L,7L,8L,9L];\n    static long count(long n) \n    {\n  \
    \      if (n == 0) return 1;\n        if (n == 1) return 2;\n        // if not\
    \ a multiple of 2, then there is no way to start and end with a 1\n        if\
    \ (n % 2 == 1) return count(n-1);\n        long result = 0;\n        foreach (d;\
    \ digits) \n        {\n            if (d == 0) continue;\n            result +=\
    \ count(n-1);\n        }\n        return result;\n    }\n    return count(n);\n\
    }\n// ----\nlong starts_one_ends3(long n) \n{\n    static long[const] digits =\
    \ [0L,1L,2L,3L,4L,5L,6L,7L,8L,9L];\n    if (n == 0) return 1;\n    if (n == 1)\
    \ return 2;\n    // if not a multiple of 2, then there is no\nunittest\n{\n  \
    \  alias candidate = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n  \
    \  assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L)\
    \ == 1800L);\n    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeq_taodt.d(11): Error: basic type expected, not `]`

    /tmp/tmpeq_taodt.d(11): Error: `(arguments)` expected following `const(_error_)`

    /tmp/tmpeq_taodt.d(35): Error: basic type expected, not `]`

    /tmp/tmpeq_taodt.d(35): Error: `(arguments)` expected following `const(_error_)`

    /tmp/tmpeq_taodt.d(55): Error: basic type expected, not `]`

    /tmp/tmpeq_taodt.d(55): Error: `(arguments)` expected following `const(_error_)`

    /tmp/tmpeq_taodt.d(59): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeq_taodt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164133
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    auto f = [=](long\
    \ d) \n    {\n        return d <= 1 ? 1 : (long)pow(10.0, d - 1);\n    };\n  \
    \  return f(n) + (n - 1) * 9 * f(n - 1);\n}\n/*\nunittest\n{\n    alias candidate\
    \ = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(2L)\
    \ == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L) == 1800L);\n\
    \    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprf86sdqb.d(11): Error: expression expected, not `=`

    /tmp/tmprf86sdqb.d(11): Error: found `d` when expecting `.` following long

    /tmp/tmprf86sdqb.d(11): Error: found `)` when expecting identifier following `long`.

    /tmp/tmprf86sdqb.d(12): Error: found `{` when expecting `,`

    /tmp/tmprf86sdqb.d(13): Error: expression expected, not `return`

    /tmp/tmprf86sdqb.d(13): Error: found `d` when expecting `,`

    /tmp/tmprf86sdqb.d(13): Error: expression expected, not `<=`

    /tmp/tmprf86sdqb.d(13): Error: found `1` when expecting `,`

    /tmp/tmprf86sdqb.d(13): Error: expression expected, not `?`

    /tmp/tmprf86sdqb.d(13): Error: found `1` when expecting `,`

    /tmp/tmprf86sdqb.d(13): Error: expression expected, not `:`

    /tmp/tmprf86sdqb.d(13): Error: found `)` when expecting `.` following long

    /tmp/tmprf86sdqb.d(13): Error: found `;` when expecting `,`

    /tmp/tmprf86sdqb.d(14): Error: expression expected, not `}`

    /tmp/tmprf86sdqb.d(14): Error: found `;` when expecting `,`

    /tmp/tmprf86sdqb.d(15): Error: expression expected, not `return'
  stdout: ''
  timestamp: 1660164133
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    long num(long\
    \ n, bool starts_one)\n    {\n        if (n == 1) return 1;\n        long result\
    \ = 0;\n        if (starts_one) {\n            if (n == 2) return 9;\n       \
    \     long m = 1;\n            for (long i = 1; i < n; i++) m *= 10;\n       \
    \     result = 9 * m;\n            for (long i = 2; i < n; i++) {\n          \
    \      result += num(i, false) * 9 * m;\n            }\n        } else {\n   \
    \         for (long i = 1; i < n; i++) result += num(i, true);\n        }\n  \
    \      return result;\n    }\n    if (n < 1) return 0;\n    if (n == 1) return\
    \ 1;\n    return num(n, true) + num(n, false);\n}\nunittest\n{\n    alias candidate\
    \ = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(2L)\
    \ == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L) == 1800L);\n\
    \    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp67rm9itn.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ecd]

    ??:? void tmp67rm9itn.__unittest_L32_C1() [0x427bd1]

    ??:? void tmp67rm9itn.__modtest() [0x427c50]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbf3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa86]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc19]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300c8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fba5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa5d]

    ??:? runModuleUnitTests [0x42b9c9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42831c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164134
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    long res = 0;\n\
    \    if (n < 2)\n        return res;\n    long end_one = (long)pow(10, n - 1);\n\
    \    res += end_one;\n    if (n > 2)\n        res += (n - 2) * (end_one / 10);\n\
    \    return res;\n}\n/*\n    Given a positive integer n, return the count of the\
    \ numbers of n-digit\n    positive integers that start or end with 1, or 2.\n\
    */\nlong starts_one_two_ends(long n) \n{\n    return starts_one_ends(n) + starts_one_ends(n\
    \ - 1);\n}\n/*\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1, or 2, or 3.\n*/\n\
    long starts_one_two_three_ends(long n) \n{\n    return starts_one_ends(n) + starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2);\n}\n/*\n    Given a positive integer n, return\
    \ the count of the numbers of n-digit\n    positive integers that start or end\
    \ with 1, or 2, or 3, or 4.\n*/\nlong starts_one_two_three_four_ends(long n) \n\
    {\n    return starts_one_ends(n) + starts_one_ends(n - 1) + starts_one_ends(n\
    \ - 2) + starts_one_ends(n - 3);\n}\n/*\n    Given a positive integer n, return\
    \ the count of the numbers of n-digit\n    positive integers that start or end\
    \ with 1, or 2, or 3, or 4, or 5.\n*/\nlong starts_one_two_three_four_five_ends(long\
    \ n) \n{\n    return starts_one_ends(n) + starts_one_ends(n - 1) + starts_one_ends(n\
    \ - 2) + starts_one_ends(n - 3) + starts_one_ends(n - 4);\n}\n/*\n    Given a\
    \ positive integer n, return the count of the numbers of n-digit\n    positive\
    \ integers that start or end with 1,\nunittest\n{\n    alias candidate = starts_one_ends;\n\
    \n    assert(candidate(1L) == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L)\
    \ == 180L);\n    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) ==\
    \ 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaziijo9w.d(14): Error: C style cast illegal, use `cast(long)pow(10,
    n - 1)`

    /tmp/tmpaziijo9w.d(52): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaziijo9w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164133
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    long result\
    \ = 0;\n    long val = 0;\n    int i;\n    if (n == 1)\n        return 10;\n \
    \   \n    if (n == 2)\n        return 91;\n    \n    val = 9;\n    for (i = 2;\
    \ i <= n - 1; i++)\n        val *= 10;\n    result += val;\n    \n    // The next\
    \ number if the digits are all ones is 1,000,000\n    // This means that there\
    \ are one million - 1,000 numbers\n    // with a one in the front digit.\n   \
    \ if (n == 7)\n        result += 999999;\n    else\n        result += pow(10,\
    \ n) - pow(10, n - 1);\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(2L)\
    \ == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L) == 1800L);\n\
    \    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpetytv0as.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x427efd]

    ??:? void tmpetytv0as.__unittest_L35_C1() [0x427b28]

    ??:? void tmpetytv0as.__modtest() [0x427c80]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc23]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aab6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc49]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300f8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbd5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa8d]

    ??:? runModuleUnitTests [0x42b9f9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42834c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164134
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    assert(n > 0);\n\
    \    return (n == 1) ? 10 : starts_one_ends(n - 1) + 10.pow(n - 1);\n}\nunittest\n\
    {\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n\
    \    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L)\
    \ == 1800L);\n    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_m8_1ppw.d(18): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f79]

    ??:? void tmp_m8_1ppw.__unittest_L14_C1() [0x427af0]

    ??:? void tmp_m8_1ppw.__modtest() [0x427c48]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc9f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab32]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fcc5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430174]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc51]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab09]

    ??:? runModuleUnitTests [0x42ba75]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4283c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164134
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    return n > 1\
    \ ? (4 * pow(5.0, n - 2) + starts_one_ends(n - 1)) : 0;\n}\n/*\nunittest\n{\n\
    \    alias candidate = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n\
    \    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L)\
    \ == 1800L);\n    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe49q5hdx.d(13): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe49q5hdx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164133
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    assert(n > 0);\n\
    \    // Returns the count of starting or ending with one.\n    return pow(5L,\
    \ n - 1L);\n}\nunittest\n{\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L)\
    \ == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n\
    \    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) == 18000L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpodjct3cc.d(20): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f39]

    ??:? void tmpodjct3cc.__unittest_L15_C1() [0x427ae9]

    ??:? void tmpodjct3cc.__modtest() [0x427c04]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc5f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaf2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc85]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430134]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc11]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aac9]

    ??:? runModuleUnitTests [0x42ba35]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428388]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164134
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    if (n == 1)\n\
    \        return 1;\n    // all integers that start with 1 are 1xx...x\n    //\
    \ The first digit is always 1\n    // The other n-1 digits can be anything from\
    \ 0 to 9\n    // We have n-1 places where each one can be 0 or 1\n    // The total\
    \ number of digits is 2^(n-1)\n    long result = (cast(long)pow(2, n-1));\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = starts_one_ends;\n\n\
    \    assert(candidate(1L) == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L)\
    \ == 180L);\n    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) ==\
    \ 18000L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjkfn2iak.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e5d]

    ??:? void tmpjkfn2iak.__unittest_L21_C1() [0x427aa9]

    ??:? void tmpjkfn2iak.__modtest() [0x427be0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa16]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fba9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430058]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]

    ??:? runModuleUnitTests [0x42b959]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282ac]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164134
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    long c1 = n-1;\n\
    \    long c2 = n==1 ? 1 : n;\n    long c3 = n;\n    long c4 = c2;\n    long c5\
    \ = n;\n    long sum = c1 + c2 + c3 + c4 + c5;\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n\
    \    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L)\
    \ == 1800L);\n    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpni9ns0hy.d(23): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d8d]

    ??:? void tmpni9ns0hy.__unittest_L19_C1() [0x427a6c]

    ??:? void tmpni9ns0hy.__modtest() [0x427b0c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bab3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a946]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff88]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa65]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a91d]

    ??:? runModuleUnitTests [0x42b889]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281dc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164134
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    return \n  \
    \      n == 1 ? 2 : // 1xx, x1x\n        n == 2 ? 4 : // 11x, 1x1, x11, xx1\n\
    \        n == 3 ? 6 : // 111, 1x1, x11, xx1, 11x, x1x\n        n == 4 ? 8 : //\
    \ 1111, 1x11, x111, xx11, 11x1, x1x1, 1xx1, xxx1\n        n == 5 ? 10 : // 1111,\
    \ 1x11, x111, xx11, 11x1, x1x1, 1xx1, xxx1, 11xx, xx1x\n        n == 6 ? 12 :\
    \ // 11111, 1x111, x1111, xx111, 11x11, x1x11, 1xx11, xxx11, 11xx1, xx1x1, 1xxx1,\
    \ xxxx1\n        n == 7 ? 14 : // 11111, 1x111, x1111, xx111, 11x11, x1x11, 1xx11,\
    \ xxx11, 11xx1, xx1x1, 1xxx1, xxxx1, 11xxx, xx1xx, xxx1x\n        n == 8 ? 16\
    \ : // 111111, 1x1111, x11111, xx1111, 11x111, x1x111, 1xx111, xxx111, 11xx11,\
    \ xx1x11, 1xxx11, xxxx11, 11xx1x, xx1x1x, 1xxx1x, xxxx1x\n        n == 9 ? 18\
    \ : // 111111, 1x1111, x11111, xx1111, 11x111, x1x111, 1xx111, xxx111, 11xx11,\
    \ xx1x11, 1xxx11, xxxx11, 11xx1x, xx1x1x, 1xxx1x, xxxx1x, 11xxxx, xx1xxx, xxx1xx,\
    \ xxxx1x\n        n == 10 ? 20 : // 111111, 1x1111, x11111, xx1111, 11x111, x1x111,\
    \ 1xx111, xxx111, 11xx11, xx1x11, 1xxx11, xxxx11, 11xx1x, xx1x1x\nunittest\n{\n\
    \    alias candidate = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n\
    \    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L)\
    \ == 1800L);\n    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzum4c0kx.d(22): Error: expression expected, not `unittest`

    /tmp/tmpzum4c0kx.d(23): Error: found `{` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzum4c0kx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164133
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    return cast(long)\
    \ std.math.pow(9, n) + cast(long) std.math.pow(9, n-1);\n}\nunittest\n{\n    alias\
    \ candidate = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(2L)\
    \ == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L) == 1800L);\n\
    \    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpr1lrk__u.d(17): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e7d]

    ??:? void tmpr1lrk__u.__unittest_L13_C1() [0x427aa4]

    ??:? void tmpr1lrk__u.__modtest() [0x427bfc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bba3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa36]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430078]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb55]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa0d]

    ??:? runModuleUnitTests [0x42b979]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282cc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164134
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{ \n    if (n == 1)\
    \ \n        return 10; \n  \n    long count = 10; \n    long prev = 10; \n   \
    \ long cur = 9; \n    long digit = 9; \n  \n    for (long i = 1; i < n; i++) \n\
    \    { \n        digit--; \n        prev = cur; \n        cur = cur * digit; \n\
    \        count += prev; \n    } \n  \n    return count; \n} \nunittest\n{\n  \
    \  alias candidate = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n  \
    \  assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L)\
    \ == 1800L);\n    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpdhd238_s.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dbd]

    ??:? void tmpdhd238_s.__unittest_L29_C1() [0x427a9c]

    ??:? void tmpdhd238_s.__modtest() [0x427b3c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bae3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a976]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb09]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffb8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa95]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]

    ??:? runModuleUnitTests [0x42b8b9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42820c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164134
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    switch(n) {\n\
    \        case 1: return 1;\n        case 2: return 10;\n        case 3: return\
    \ 100;\n        case 4: return 190;\n        case 5: return 373;\n        case\
    \ 6: return 709;\n        case 7: return 1383;\n        case 8: return 2699;\n\
    \        case 9: return 5204;\n        case 10: return 9999;\n        default:\
    \ assert(0);\n    }\n}\nunittest\n{\n    alias candidate = starts_one_ends;\n\n\
    \    assert(candidate(1L) == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L)\
    \ == 180L);\n    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) ==\
    \ 18000L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpse2e8nvk.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e91]

    ??:? void tmpse2e8nvk.__unittest_L25_C1() [0x427ae1]

    ??:? void tmpse2e8nvk.__modtest() [0x427b60]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa4a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbdd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43008c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb69]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa21]

    ??:? runModuleUnitTests [0x42b98d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282e0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164134
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{ \n    if (n == 1)\
    \ \n    { \n        return 1; \n    } \n    if (n == 2) \n    { \n        return\
    \ 1; \n    } \n    if (n == 3) \n    { \n        return 2; \n    } \n    if (n\
    \ == 4) \n    { \n        return 3; \n    } \n    if (n == 5) \n    { \n     \
    \   return 4; \n    } \n    if (n == 6) \n    { \n        return 5; \n    } \n\
    \    if (n == 7) \n    { \n        return 6; \n    } \n    if (n == 8) \n    {\
    \ \n        return 7; \n    } \n    if (n == 9) \n    { \n        return 8; \n\
    \    } \n    return starts_one_ends(n - 1) \n        + starts_one_ends(n - 2)\
    \ \n        + starts_one_ends(n - 3) \n        + starts_one_ends(n - 4) \n   \
    \     + starts_one_ends(n - 5) \n        + starts_one_ends(n - 6) \n        +\
    \ starts_one_ends(n - 7) \n        + starts_one_ends(n - 8) \n        + starts_one_ends(n\
    \ - 9); \n} \n  \nunittest\n{\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L)\
    \ == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n\
    \    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) == 18000L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpatk12c8j.d(63): unittest failure

    ----------------

    ??:? _d_unittestp [0x427edd]

    ??:? void tmpatk12c8j.__unittest_L58_C1() [0x427bdd]

    ??:? void tmpatk12c8j.__modtest() [0x427c5c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc03]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa96]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc29]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300d8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbb5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa6d]

    ??:? runModuleUnitTests [0x42b9d9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42832c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164134
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    assert(n > 0);\n\
    \    return 10_L^(n-1) - 9_L^(n-1);\n}\nunittest\n{\n    alias candidate = starts_one_ends;\n\
    \n    assert(candidate(1L) == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L)\
    \ == 180L);\n    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) ==\
    \ 18000L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpsp253lbt.d(18): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e51]

    ??:? void tmpsp253lbt.__unittest_L14_C1() [0x427a7c]

    ??:? void tmpsp253lbt.__modtest() [0x427b1c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb77]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa0a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb9d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43004c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb29]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9e1]

    ??:? runModuleUnitTests [0x42b94d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164134
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    // The count\
    \ that begins and ends with a 1\n    // E.g. 11, 1101, 11001, 1111, 11011...\n\
    \    // This is the sum of the powers of 2 from 2^1 to 2^(n-1)\n    long ends_one_starts\
    \ = pow(2, n - 1);\n    \n    // The count that starts with 1 is the sum of all\
    \ numbers that do not\n    // start and end with 1\n    // E.g. 1, 101, 1001,\
    \ 1011, 10001, 10011, 10101...\n    // This is the sum of the powers of 2 from\
    \ 2^(n-1) to 2^n\n    long starts_one = pow(2, n) - ends_one_starts;\n    \n \
    \   // The count that ends with 1 is the same as the count that starts with 1\n\
    \    long ends_one = starts_one;\n    \n    // So the count that starts and ends\
    \ with 1 is the sum of the two\n    return starts_one + ends_one;\n}\nunittest\n\
    {\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n\
    \    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L)\
    \ == 1800L);\n    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpz6ybou3e.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e85]

    ??:? void tmpz6ybou3e.__unittest_L28_C1() [0x427aac]

    ??:? void tmpz6ybou3e.__modtest() [0x427c04]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa3e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbd1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430080]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa15]

    ??:? runModuleUnitTests [0x42b981]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164134
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    if (n == 1)\n\
    \        return 10;\n    \n    // S(n) = S(n-1) + S(n-2) + S(n-3) + S(n-4) + ...\
    \ + S(1) - 10\n    // S(n) = 10(2^(n-1)-1) + S(n-1)\n    if (n <= 0)\n       \
    \ return 0;\n    long S_1 = 10;\n    long S_2 = 90;\n    long S_n = 0;\n    for\
    \ (int i = 3; i <= n; i++) {\n        S_n = 10 * ((int)(pow(2, i-1)) - 1) + S_1;\n\
    \        S_1 = S_2;\n        S_2 = S_n;\n    }\n    return S_n;\n}\nunittest\n\
    {\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n\
    \    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L)\
    \ == 1800L);\n    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqbq94hkp.d(22): Error: C style cast illegal, use `cast(int)pow(2,
    i - 1)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqbq94hkp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164133
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    long count;\n\
    \    long j;\n    if (n == 1) \n    {\n        return 1;\n    }\n    else \n \
    \   {\n        count = starts_one_ends(n - 1);\n        if (n == 2) \n       \
    \ {\n            count *= 9;\n        }\n        else \n        {\n          \
    \  count *= 10;\n        }\n        return count;\n    }\n}\nlong count_ones(long\
    \ n) \n{\n    long count;\n    long j;\n    if (n == 1) \n    {\n        return\
    \ 1;\n    }\n    else \n    {\n        count = count_ones(n - 1);\n        count\
    \ *= 9;\n        count += n * starts_one_ends(n);\n        return count;\n   \
    \ }\n}\nlong count_digits(long n) \n{\n    long count;\n    long j;\n    if (n\
    \ == 1) \n    {\n        return 9;\n    }\n    else \n    {\n        count = count_digits(n\
    \ - 1);\n        count *= 10;\n        count -= starts_one_ends(n);\n        return\
    \ count;\n    }\n}\nlong ones(long n) \n{\n    long count;\n    long j;\n    count\
    \ = count_ones(n);\n    return count;\n}\nlong number_ends_with_one(long x) \n\
    {\n    long count;\n    long j;\n    long t;\n    auto digits = tuple(0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0);\n    for (j = 1; j <= x; j++) \n    {\n        t = j;\n\
    \        while (t > 0) \n        {\n            digits[t % 10]++;\n          \
    \  t /= 10;\n        }\n    }\n    count = 0;\n    for (j = 1; j <= x; j++) \n\
    \    {\n        if (digits[j % 10] > 0) \n        {\n            count++;\n  \
    \      }\n    }\n    return count;\n}\nlong not_ends_with_one(long x) \nunittest\n\
    {\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n\
    \    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L)\
    \ == 1800L);\n    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd096_mt2.d(96): Error: semicolon expected following function declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd096_mt2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164133
- exit_code: -8
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    long res;\n\
    \    long h = pow(10, n-1);\n    // number of digits - 1\n    long l = pow(10,\
    \ n-2);\n    // number of digits - 2\n    res = 8 * l + h - l;\n    return res;\n\
    }\nlong count1_digits(long n) \n{\n    long res = 0;\n    long i = 1;\n    //\
    \ start from 1-digit numbers\n    while (n >= 10) \n    {\n        res += starts_one_ends(i);\n\
    \        // i-digit numbers\n        i += 1;\n        n /= 10;\n    }\n    //\
    \ last one digit number\n    res += starts_one_ends(i);\n    return res;\n}\n\
    long count1(long n) \n{\n    if (n <= 0) return 0;\n    long res = 0;\n    long\
    \ p = pow(10, n);\n    long q = pow(10, n-1);\n    // number of digits\n    //\
    \ i is number to count digits\n    foreach (i; 1..n) \n    {\n        // number\
    \ of i-digit numbers\n        res += 9 * count1_digits(q-1);\n        // for each\
    \ i-digit number\n        res += i * q;\n        // (i-1)-digit numbers\n    \
    \    q /= 10;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = starts_one_ends;\n\
    \n    assert(candidate(1L) == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L)\
    \ == 180L);\n    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) ==\
    \ 18000L);\n}\nvoid main(){}"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660164134
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    if (n == 1)\
    \ return 2;\n    if (n == 2) return 4;\n    // f(n) = f(n-1) + f(n-2)\n    //\
    \ f(1) = 2, f(2) = 4, f(3) = 6, f(4) = 10, f(5) = 16\n    auto result = tuple(2L,\
    \ 4L);\n    for (long i = 3; i <= n; ++i) \n    {\n        result = tuple(result[1],\
    \ result[0] + result[1]);\n    }\n    return result[1];\n}\nunittest\n{\n    alias\
    \ candidate = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(2L)\
    \ == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L) == 1800L);\n\
    \    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpa_jebjwb.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x428a95]

    ??:? void tmpa_jebjwb.__unittest_L22_C1() [0x428040]

    ??:? void tmpa_jebjwb.__modtest() [0x4284fc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d6af]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c5be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430ee5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x431394]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430e71]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c595]

    ??:? runModuleUnitTests [0x42d485]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f70]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164134
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    long[] dp =\
    \ new long[n + 1];\n    dp[0] = 1;\n    dp[1] = 10;\n    foreach (i; 2 .. n +\
    \ 1) {\n        dp[i] = dp[i - 1] * 9 + dp[i - 2] * 9;\n    }\n    return dp[n];\n\
    }\nunittest\n{\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L)\
    \ == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n\
    \    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) == 18000L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7bynp2ua.d(23): unittest failure

    ----------------

    ??:? _d_unittestp [0x428145]

    ??:? void tmp7bynp2ua.__unittest_L19_C1() [0x427e28]

    ??:? void tmp7bynp2ua.__modtest() [0x427ec8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c143]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afd6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430261]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430710]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afad]

    ??:? runModuleUnitTests [0x42bf19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428608]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164134
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{ \n  if (n == 1) return\
    \ 10; \n  long result = pow(10, n-1); \n  for (long i = 0; i < n - 1; i++) \n\
    \    result += pow(9, n - i - 1) * 9; \n  return result; \n} \n  \nlong main()\
    \ \n{ \n  long n = 4; \n  return starts_one_ends(n); \n}\nunittest\n{\n    alias\
    \ candidate = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(2L)\
    \ == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L) == 1800L);\n\
    \    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5gfguki9.d(18): Error: function `D main` must return `int` or `void`,
    not `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5gfguki9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164134
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    long dp[][]\
    \ = new long[2][2];\n    dp[0][0] = 1;\n    dp[0][1] = 0;\n    dp[1][0] = 1;\n\
    \    dp[1][1] = 1;\n    for (long i = 2; i <= n; i++) {\n        dp[0][0] = dp[0][0]\
    \ * (9 - 1) + dp[0][1] * 1;\n        dp[0][1] = dp[0][0];\n        dp[1][0] =\
    \ dp[1][0] * (9 - 1) + dp[1][1] * 1;\n        dp[1][1] = dp[1][0];\n    }\n  \
    \  return dp[0][0] + dp[0][1] + dp[1][0] + dp[1][1];\n}\n// Returns count of n\
    \ digit numbers ending with digit d\nlong count(long n, long d) \n{\n    long\
    \ dp[][] = new long[2][2];\n    dp[0][0] = 1;\n    dp[0][1] = 0;\n    dp[1][0]\
    \ = 1;\n    dp[1][1] = 1;\n    for (long i = 2; i <= n; i++) {\n        dp[0][0]\
    \ = dp[0][0] * (9 - 1) + dp[0][1] * 1;\n        dp[0][1] = dp[0][0];\n       \
    \ dp[1][0] = dp[1][0] * (9 - 1) + dp[1][1] * 1;\n        dp[1][1] = dp[1][0];\n\
    \    }\n    return dp[1][1];\n}\n/*\n * \n * Given a number n, find count of all\
    \ possible non negative numbers less than n \n * that can be represented as a\
    \ sum of consecutive numbers.\nunittest\n{\n    alias candidate = starts_one_ends;\n\
    \n    assert(candidate(1L) == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L)\
    \ == 180L);\n    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) ==\
    \ 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvr5k2yhe.d(11): Deprecation: instead of C-style syntax, use D-style
    syntax `long[][] dp`

    /tmp/tmpvr5k2yhe.d(27): Deprecation: instead of C-style syntax, use D-style syntax
    `long[][] dp`

    /tmp/tmpvr5k2yhe.d(40): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvr5k2yhe.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164134
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    if (n == 1)\n\
    \        return 10;\n    else\n    {\n        long count = 0;\n        for (long\
    \ i = 0; i < n - 1; i++)\n            count += (n - 1 - i) * pow(10, i);\n   \
    \     return count * 2;\n    }\n}\nunittest\n{\n    alias candidate = starts_one_ends;\n\
    \n    assert(candidate(1L) == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L)\
    \ == 180L);\n    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) ==\
    \ 18000L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_oihlfzb.d(25): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ead]

    ??:? void tmp_oihlfzb.__unittest_L21_C1() [0x427ad4]

    ??:? void tmp_oihlfzb.__modtest() [0x427c2c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbd3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa66]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbf9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300a8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb85]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa3d]

    ??:? runModuleUnitTests [0x42b9a9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282fc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164134
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    if (n == 1)\n\
    \        return 2;\n    else\n        return starts_one_ends(n - 1) + pow(10,\
    \ n - 1);\n}\nunittest\n{\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L)\
    \ == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n\
    \    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) == 18000L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjo_ypw3u.d(20): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e7d]

    ??:? void tmpjo_ypw3u.__unittest_L16_C1() [0x427aa8]

    ??:? void tmpjo_ypw3u.__modtest() [0x427c00]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bba3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa36]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430078]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb55]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa0d]

    ??:? runModuleUnitTests [0x42b979]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282cc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164134
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    long sum = 0;\n\
    \    if (n <= 0)\n        return sum;\n    if (n == 1)\n        return 1;\n  \
    \  if (n == 2)\n        return 10;\n    auto half = (n + 1) / 2;\n    // half\
    \ digit prefix\n    sum += pow(9, half - 1);\n    // sum += \"1\" + \"0\"*half\
    \ + \"1\"*(n-half-1)\n    sum += starts_one_ends(n - half - 1);\n    // sum +=\
    \ \"1\" + \"0\"*(n-half-1) + \"1\"*half\n    sum += starts_one_ends(half - 1);\n\
    \    return sum;\n}\nunittest\n{\n    alias candidate = starts_one_ends;\n\n \
    \   assert(candidate(1L) == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L)\
    \ == 180L);\n    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) ==\
    \ 18000L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9lhtdidz.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ec5]

    ??:? void tmp9lhtdidz.__unittest_L27_C1() [0x427b0d]

    ??:? void tmp9lhtdidz.__modtest() [0x427c44]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbeb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa7e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc11]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb9d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa55]

    ??:? runModuleUnitTests [0x42b9c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428314]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164134
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    return n - 2;\n\
    }\nunittest\n{\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L)\
    \ == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n\
    \    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) == 18000L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp75k1a7i8.d(17): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d55]

    ??:? void tmp75k1a7i8.__unittest_L13_C1() [0x427a38]

    ??:? void tmp75k1a7i8.__modtest() [0x427ad8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba7b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a90e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42faa1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff50]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa2d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8e5]

    ??:? runModuleUnitTests [0x42b851]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281a4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164134
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    long nums =\
    \ 0;\n    foreach(elem; iota(1, (10^n)-1)) {\n        if (elem.text[0] == '1'\
    \ || elem.text[$-1] == '1') {\n            nums++;\n        }\n    }\n    return\
    \ nums;\n}\nunittest\n{\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L)\
    \ == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n\
    \    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) == 18000L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_ve8_q3o.d(12): Error: undefined identifier `iota`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_ve8_q3o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164134
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    return long(0.5\
    \ * 10.0 ^ (n - 1));\n}\nunittest\n{\n    alias candidate = starts_one_ends;\n\
    \n    assert(candidate(1L) == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L)\
    \ == 180L);\n    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) ==\
    \ 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9bydmfx5.d(11): Error: `0.5 * 10.0000` is not of integral type,
    it is a `double`

    /tmp/tmp9bydmfx5.d(11): Error: `cast(double)(n - cast(long)1)` is not of integral
    type, it is a `double`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9bydmfx5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164134
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n\tif (n <= 0) \n\
    \    {\n\t\treturn 0;\n\t}\n\tif (n == 1) \n    {\n\t\treturn 1;\n\t}\n\tlong\
    \ start = 1;\n\tlong end = 1;\n\tfor (long i = 2; i <= n; i++) \n    {\n\t\tend\
    \ *= 10;\n\t}\n\tlong result = start + end;\n\tfor (long i = 2; i <= n; i++) \n\
    \    {\n\t\tstart *= 10;\n\t\tresult += start + end;\n\t}\n\treturn result;\n\
    }\nunittest\n{\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L)\
    \ == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n\
    \    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) == 18000L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp21tbg9a4.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x427de5]

    ??:? void tmp21tbg9a4.__unittest_L33_C1() [0x427ae9]

    ??:? void tmp21tbg9a4.__modtest() [0x427b68]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a99e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fabd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]

    ??:? runModuleUnitTests [0x42b8e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428234]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164134
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    if (n == 1)\n\
    \        return 2;\n    long result = 0;\n    // i == 1\n    result += starts_one_ends(n\
    \ - 1);\n    // i != 1\n    result += (n - 1) * pow(9, n - 1);\n    return result;\n\
    }\nunittest\n{\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L)\
    \ == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n\
    \    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) == 18000L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwgxc_w5k.d(24): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e95]

    ??:? void tmpwgxc_w5k.__unittest_L20_C1() [0x427ac0]

    ??:? void tmpwgxc_w5k.__modtest() [0x427c18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbe1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430090]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb6d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa25]

    ??:? runModuleUnitTests [0x42b991]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164134
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    if (n < 1) \n\
    \        return 0;\n    if (n == 1) \n        return 10;\n    if (n == 2) \n \
    \       return 19;\n    const uint64_t pow9_9 = 387420489;\n    const uint64_t\
    \ pow9_8 = 43046721;\n    const uint64_t pow9_7 = 4782969;\n    if (n == 3) \n\
    \        return 28;\n    if (n == 4) \n        return 37;\n    if (n == 5) \n\
    \        return 46;\n    if (n == 6) \n        return 55;\n    if (n == 7) \n\
    \        return 64;\n    if (n == 8) \n        return 73;\n    if (n == 9) \n\
    \        return 82;\n    if (n == 10) \n        return 91;\n    if (n == 11) \n\
    \        return 100;\n    if (n == 12) \n        return 109;\n    if (n == 13)\
    \ \n        return 118;\n    if (n == 14) \n        return 127;\n    if (n ==\
    \ 15) \n        return 136;\n    if (n == 16) \n        return 145;\n    if (n\
    \ == 17) \n        return 154;\n    if (n == 18) \n        return 163;\n    if\
    \ (n == 19) \n        return 172;\n    if (n == 20) \n        return 181;\n  \
    \  if (n == 21) \n        return 190;\n    if (n == 22) \n        return 199;\n\
    \    if (n == 23) \n        return 208;\n    if (n == 24) \n        return 217;\n\
    \    if (n == 25) \n        return 226;\n    if (n == 26) \n        return 235;\n\
    \    if (n == 27) \n        return 244;\n    if (n == 28) \n        return 253;\n\
    \    if (n == 29) \n        return 262;\n    if (n == 30) \n        return 271;\n\
    \    if (n == 31) \n        return 280;\n    if (n == 32) \n       \nunittest\n\
    {\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n\
    \    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L)\
    \ == 1800L);\n    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxusgfqnr.d(80): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxusgfqnr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164134
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    long f_end =\
    \ pow(10, n-1);\n    long f_beg = pow(10, n) - 1;\n    long s_end = pow(10, n-1);\n\
    \    long s_beg = 10;\n    if (n == 1)\n        return 9;\n    return (f_end -\
    \ f_beg) + (s_end - s_beg);\n}\nunittest\n{\n    alias candidate = starts_one_ends;\n\
    \n    assert(candidate(1L) == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L)\
    \ == 180L);\n    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) ==\
    \ 18000L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpuiwwlj34.d(23): unittest failure

    ----------------

    ??:? _d_unittestp [0x427eb5]

    ??:? void tmpuiwwlj34.__unittest_L19_C1() [0x427ae0]

    ??:? void tmpuiwwlj34.__modtest() [0x427c38]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbdb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa6e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc01]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300b0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb8d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa45]

    ??:? runModuleUnitTests [0x42b9b1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428304]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164134
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    long[][] mem\
    \ = new long[n+1][2];\n    mem[1][0] = 0;\n    mem[1][1] = 1;\n    for (long i\
    \ = 2; i <= n; i++) {\n        mem[i][0] = mem[i-1][0] + mem[i-1][1];\n      \
    \  mem[i][1] = mem[i-1][0];\n    }\n    return mem[n][0] + mem[n][1];\n}\nstatic\
    \ assert(starts_one_ends(3) == 13);\nunittest\n{\n    alias candidate = starts_one_ends;\n\
    \n    assert(candidate(1L) == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L)\
    \ == 180L);\n    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) ==\
    \ 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps_5hhza2.d(11): Error: variable `n` cannot be read at compile time

    /tmp/tmps_5hhza2.d(20):        called from here: `starts_one_ends(3L)`

    /tmp/tmps_5hhza2.d(20):        while evaluating: `static assert(starts_one_ends(3L)
    == 13L)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps_5hhza2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164134
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    return(n ==\
    \ 1 ? 2 : (10 * starts_one_ends(n - 1) - 9));\n}\nunittest\n{\n    alias candidate\
    \ = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(2L)\
    \ == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L) == 1800L);\n\
    \    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpimjy_pii.d(17): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d75]

    ??:? void tmpimjy_pii.__unittest_L13_C1() [0x427a54]

    ??:? void tmpimjy_pii.__modtest() [0x427af4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba9b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a92e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff70]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa4d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a905]

    ??:? runModuleUnitTests [0x42b871]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281c4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164134
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    enum long limit\
    \ = 1L;\n    while (n--)\n        limit *= 10;\n    long ret = 0;\n    for (long\
    \ i = 1; i < limit; i++)\n    {\n        // this is a bit silly...\n        char[]\
    \ chars = to!(char[])(i);\n        if (chars[0] == '1' || chars[$-1] == '1')\n\
    \            ret++;\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate\
    \ = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(2L)\
    \ == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L) == 1800L);\n\
    \    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmparrxol15.d(13): Error: cannot modify constant `1L`

    /tmp/tmparrxol15.d(18): Error: template instance `to!(char[])` template `to` is
    not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmparrxol15.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164134
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{ \n    if (n == 1)\n\
    \        return 1;\n    else if (n == 2)\n        return 9;\n    else\n      \
    \  return 9 + pow(10, n - 1);\n}\nunittest\n{\n    alias candidate = starts_one_ends;\n\
    \n    assert(candidate(1L) == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L)\
    \ == 180L);\n    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) ==\
    \ 18000L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5bhu50mo.d(23): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e75]

    ??:? void tmp5bhu50mo.__unittest_L18_C1() [0x427abd]

    ??:? void tmp5bhu50mo.__modtest() [0x427bf4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430070]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb4d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa05]

    ??:? runModuleUnitTests [0x42b971]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164134
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    if (n == 1)\n\
    \        return 1;\n    else \n    {\n        auto digits = pow(10, n-1);\n  \
    \      return digits + 9 * digits / 10;\n    }\n}\n/*\nunittest\n{\n    alias\
    \ candidate = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(2L)\
    \ == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L) == 1800L);\n\
    \    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxghkd1xa.d(19): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxghkd1xa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164134
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    return (2 *\
    \ (9 * pow(10, n - 1)) - pow(10, n) + 1);\n}\nunittest\n{\n    alias candidate\
    \ = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(2L)\
    \ == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L) == 1800L);\n\
    \    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpkdno7151.d(17): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e85]

    ??:? void tmpkdno7151.__unittest_L13_C1() [0x427ab0]

    ??:? void tmpkdno7151.__modtest() [0x427c08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa3e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbd1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430080]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa15]

    ??:? runModuleUnitTests [0x42b981]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164134
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    return pow(10,\
    \ n - 1);\n}\nunittest\n{\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L)\
    \ == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n\
    \    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) == 18000L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpgmuwndxw.d(18): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e55]

    ??:? void tmpgmuwndxw.__unittest_L13_C1() [0x427a9d]

    ??:? void tmpgmuwndxw.__modtest() [0x427bd4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb7b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa0e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fba1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430050]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb2d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9e5]

    ??:? runModuleUnitTests [0x42b951]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282a4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164134
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    auto total =\
    \ 0;\n    auto end_zero = 1;\n    for (auto i = 1; i < n; i++) {\n        total\
    \ += end_zero * 10;\n        end_zero *= 10;\n    }\n    total += 1;\n    return\
    \ total;\n}\nstatic assert(starts_one_ends(1) == 1);\nstatic assert(starts_one_ends(2)\
    \ == 19);\nstatic assert(starts_one_ends(3) == 271);\nstatic assert(starts_one_ends(4)\
    \ == 4331);\nstatic assert(starts_one_ends(5) == 65921);\nstatic assert(starts_one_ends(6)\
    \ == 1018091);\nstatic assert(starts_one_ends(7) == 15727251);\nstatic assert(starts_one_ends(8)\
    \ == 236611171);\nstatic assert(starts_one_ends(9) == 3565927341);\nstatic assert(starts_one_ends(10)\
    \ == 53698550531);\nstatic assert(starts_one_ends(11) == 820366015511);\nstatic\
    \ assert(starts_one_ends(12) == 12537053455091);\nstatic assert(starts_one_ends(13)\
    \ == 192845492385271);\nstatic assert(starts_one_ends(14) == 2936887437476331);\n\
    static assert(starts_one_ends(15) == 44878678657065921);\nunittest\n{\n    alias\
    \ candidate = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(2L)\
    \ == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L) == 1800L);\n\
    \    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjyp7oqhd.d(21): Error: static assert:  `starts_one_ends(2L) ==
    19L` is false

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjyp7oqhd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164134
