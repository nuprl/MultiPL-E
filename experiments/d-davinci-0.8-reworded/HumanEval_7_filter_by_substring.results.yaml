name: HumanEval_7_filter_by_substring
language: d
results:
- program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n\t\n\tstring[] result;\n\tforeach(string s;\
    \ strings) \n\t{\n\t\tif(s.contains(substring))\n\t\t\tresult ~= s;\n\t}\n\treturn\
    \ result;\n}\n/*\n Find the index of a given string in the input array\n    >>>\
    \ search_by_name([\"1\", \"2\", \"3\"], \"1\")\n    0\n    >>> search_by_name([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacd\")\n    1\n*/\nunittest\n{\n    alias\
    \ candidate = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n\
    \    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"\
    xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsnodo0hb.d(17): Error: no property `contains` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsnodo0hb.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    auto filtered_strings = appender!(string[])();\n\
    \    foreach(string s; strings)\n    {\n        if(s.contains(substring))\n  \
    \      {\n            filtered_strings.put(s);\n        }\n    }\n    return filtered_strings.data;\n\
    }\n/*\n    Sort an input array of strings\n    >>> sort_strings([\"c\", \"b\"\
    , \"a\"])\n    [\"a\", \"b\", \"c\"]\n    >>> sort_strings([\"a\", \"b\", \"a\"\
    ])\n    [\"a\", \"a\", \"b\"]\n*/\nstring[] sort_strings(string[] strings) \n\
    {\n    auto local_strings = strings.dup;\n    local_strings.sort();\n    return\
    \ local_strings;\n}\n/*\n    Given an array of strings, return a string\n    that\
    \ is composed of all the strings joined\n    together.\n    >>> join_strings([\"\
    a\", \"b\", \"c\"])\n    \"abc\"\n    >>> join_strings([\"a\", \"b\", \"c\", \"\
    \"])\n    \"abc\"\n    >>> join_strings([\"a\", \"b\", \"c\", \"d\"])\n    \"\
    abcd\"\n    >>> join_strings([\"\", \"\", \"\"])\n    \"\"\n*/\nstring join_strings(string[]\
    \ strings) \n{\n    return strings.joiner;\n}\n/*\n    Given an array of integers,\
    \ return an array\n    of the same size with each element doubled.\n    >>> double_array([1,\
    \ 2, 3])\n    [2, 4, 6]\n    >>> double_array([])\n    []\n    >>> double_array([-1,\
    \ -2])\n    [-2, -4]\n    >>> double_array([9])\n    [18]\n*/\nunittest\n{\n \
    \   alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp79a9ymld.d(13): Error: template instance `appender!(string[])`\
    \ template `appender` is not defined\\n/tmp/tmp79a9ymld.d(16): Error: no property\
    \ `contains` for type `string`\\n/tmp/tmp79a9ymld.d(33): Error: no property `sort`\
    \ for type `string[]`\\n/tmp/tmp79a9ymld.d(51): Error: no property `joiner` for\
    \ type `string[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp79a9ymld.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    scope scope = scope();\n    scope._filter\
    \ = new string[];\n    scope.predicate = (string x) => (x.find(substring) >= 0);\n\
    \    std.algorithm.filter!(scope.predicate)(strings);\n    return scope._filter;\n\
    }\n/*\n Filter an input array of strings only for ones that contain a string from\
    \ a given array of strings\n    >>> filter_by_substrings([], [\"a\"])\n    []\n\
    \    >>> filter_by_substrings([\"abc\", \"bacd\", \"cde\", \"array\"], [\"a\"\
    , \"c\"])\n    [\"abc\", \"bacd\", \"cde\", \"array\"]\n    >>> filter_by_substrings([\"\
    abc\", \"bacd\", \"cde\", \"array\"], [\"b\", \"x\"])\n    [\"bacd\"]\n*/\nstring[]\
    \ filter_by_substrings(string[] strings, string[] substrings) \n{\n    scope scope\
    \ = scope();\n    scope._filter = new string[];\n    scope.predicate = (string\
    \ x) {\n        foreach (string ss; substrings) {\n            if (x.find(ss)\
    \ >= 0) {\n                return true;\n            }\n        }\n        return\
    \ false;\n    };\n    std.algorithm.filter!(scope.predicate)(strings);\n    return\
    \ scope._filter;\n}\n/*\n Filter an input array of strings only for ones that\
    \ satisfy a given predicate.\n    >>> filter_by_predicate([], (string x) => true)\n\
    \    []\n    >>> filter_by_predicate([\"abc\", \"bacd\", \"cde\", \"array\"],\
    \ (string x) => x.canFind(\"a\"))\n    [\"abc\", \"bacd\", \"array\"]\n    >>>\
    \ filter_by_predicate([\"abc\", \"bacd\", \"cde\", \"array\"], (string x) => x.canFind(\"\
    x\"))\n    []\n*/\nstring[] filter_by_predicate(string[] strings, alias pred)\
    \ \n{\n    scope scope = scope();\n    scope._filter = new string[];\n    scope.predicate\
    \ = pred;\n    std.algorithm.filter!(scope.predicate)(\nunittest\n{\n    alias\
    \ candidate = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n\
    \    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"\
    xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp98c2h9wq.d(13): Error: redundant attribute `scope`\\n/tmp/tmp98c2h9wq.d(13):\
    \ Error: basic type expected, not `=`\\n/tmp/tmp98c2h9wq.d(13): Error: no identifier\
    \ for declarator `_error_`\\n/tmp/tmp98c2h9wq.d(13): Error: found `=` instead\
    \ of statement\\n/tmp/tmp98c2h9wq.d(14): Error: no identifier for declarator `._filter`\\\
    n/tmp/tmp98c2h9wq.d(14): Error: found `=` instead of statement\\n/tmp/tmp98c2h9wq.d(15):\
    \ Error: no identifier for declarator `.predicate`\\n/tmp/tmp98c2h9wq.d(15): Error:\
    \ found `=` instead of statement\\n/tmp/tmp98c2h9wq.d(16): Error: expression expected,\
    \ not `scope`\\n/tmp/tmp98c2h9wq.d(17): Error: expression expected, not `scope`\\\
    n/tmp/tmp98c2h9wq.d(30): Error: redundant attribute `scope`\\n/tmp/tmp98c2h9wq.d(30):\
    \ Error: basic type expected, not `=`\\n/tmp/tmp98c2h9wq.d(30): Error: no identifier\
    \ for declarator `_error_`\\n/tmp/tmp98c2h9wq.d(30): Error: found `=` instead\
    \ of statement\\n/tmp/tmp98c2h9wq.d(31): Error: no identifier for declarator `._filter`\\\
    n/tmp/tmp98c2h9wq.d(31): Error: found `=` instead of statement\\n/tmp/tmp98c2h9wq.d(32):\
    \ Error: no identifier for declarator `.predicate`\\n/tmp/tmp98c2h9wq.d(32): Error:\
    \ found `=` instead of statement\\n/tmp/tmp98c2h9wq.d(33): Error: found `)` when\
    \ expecting `;` following statement\\n/tmp/tmp98c2h9wq.d(40): Error: expression\
    \ expected, not `scope`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"\
    /tmp/tmp98c2h9wq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return filter!(s => s.contains(substring))(strings);\n\
    }\n/*\n Compute a sum of a given array of integers\n    >>> sum_array([])\n  \
    \  0\n    >>> sum_array([1, 2, 3, 4, 5])\n    15\n*/\nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvdst1p7h.d(13): Error: template instance `filter!((s) => s.contains(substring))`\
    \ template `filter` is not defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\",\
    \ \"-o-\", \"/tmp/tmpvdst1p7h.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(s => s.contains(substring)).array;\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp228xgfw.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp228xgfw.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    auto res = [];\n    foreach(i,x; strings)\
    \ {\n        if (x.canFind(substring)) {\n            res ~= x;\n        }\n \
    \   }\n    return res;\n}\n \n/*\n    >>> filter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n*/\nstring[] filter_by_substring2(string[] strings, string substring)\
    \ \n{\n    auto res = [];\n    foreach(i,x; strings) {\n        if (x.canFind(substring))\
    \ {\n            res ~= x;\n        }\n    }\n    return res;\n}\n/*\n    >>>\
    \ filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"\
    abc\", \"bacd\", \"array\"]\n    >>> filter_by_substring([], \"a\")\n    []\n\
    */\nstring[] filter_by_substring3(string[] strings, string substring) \n{\n  \
    \  auto res = [];\n    foreach(i,x; strings) {\n        if (x.canFind(substring))\
    \ {\n            res ~= x;\n        }\n    }\n    return res;\n}\n/*\n    >>>\
    \ filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"\
    abc\", \"bacd\", \"array\"]\n    >>> filter_by_substring([], \"a\")\n    []\n\
    */\nstring[] filter_by_substring4(string[] strings, string substring) \n{\n  \
    \  auto res = [];\n    foreach(i,x; strings) {\n        if (x.canFind(substring))\
    \ {\n            res ~= x;\n        }\n    }\n    return res;\n}\nunittest\n{\n\
    \    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdvk1pk0s.d(15): Error: no property `canFind` for type `string`\\\
    n/tmp/tmpdvk1pk0s.d(16): Error: cannot append type `string` to type `void[]`\\\
    n/tmp/tmpdvk1pk0s.d(19): Error: cannot implicitly convert expression `res` of\
    \ type `void[]` to `string[]`\\n/tmp/tmpdvk1pk0s.d(32): Error: no property `canFind`\
    \ for type `string`\\n/tmp/tmpdvk1pk0s.d(33): Error: cannot append type `string`\
    \ to type `void[]`\\n/tmp/tmpdvk1pk0s.d(36): Error: cannot implicitly convert\
    \ expression `res` of type `void[]` to `string[]`\\n/tmp/tmpdvk1pk0s.d(48): Error:\
    \ no property `canFind` for type `string`\\n/tmp/tmpdvk1pk0s.d(49): Error: cannot\
    \ append type `string` to type `void[]`\\n/tmp/tmpdvk1pk0s.d(52): Error: cannot\
    \ implicitly convert expression `res` of type `void[]` to `string[]`\\n/tmp/tmpdvk1pk0s.d(64):\
    \ Error: no property `canFind` for type `string`\\n/tmp/tmpdvk1pk0s.d(65): Error:\
    \ cannot append type `string` to type `void[]`\\n/tmp/tmpdvk1pk0s.d(68): Error:\
    \ cannot implicitly convert expression `res` of type `void[]` to `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdvk1pk0s.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n\treturn strings.filter!(str => str.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphragv5nl.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphragv5nl.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    import std.algorithm;\n    return strings.filter!(s\
    \ => s.contains(substring)).array;\n}\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmnxsu2bb.d(14): Error: no property `contains` for type `string`\\\
    n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/algorithm/iteration.d(1122):\
    \        instantiated from here: `FilterResult!(__lambda3, string[])`\\n/tmp/tmpmnxsu2bb.d(14):\
    \        instantiated from here: `filter!(string[])`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpmnxsu2bb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    auto res = [];\n    foreach(s; strings)\
    \ \n    {\n        if (s.find(substring) != -1)\n            res ~= s;\n    }\n\
    \    return res;\n}\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpywz2p9uh.d(16): Error: no property `find` for type `string`\\\
    n/tmp/tmpywz2p9uh.d(17): Error: cannot append type `string` to type `void[]`\\\
    n/tmp/tmpywz2p9uh.d(19): Error: cannot implicitly convert expression `res` of\
    \ type `void[]` to `string[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpywz2p9uh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    /*\n        >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n        [\"abc\", \"bacd\", \"array\"\
    ]\n    */\n    string[] result = [\"abc\", \"bacd\", \"array\"];\n    return result;\n\
    }\n \n/*\n Filter an input array of string pairs by a given key, return a new\
    \ array of values for given key\n    >>> filter_by_key([(\"a\", 1), (\"b\", 2),\
    \ (\"a\", 3)], \"a\")\n    [1, 3]\n    >>> filter_by_key([(\"a\", 1), (\"b\",\
    \ 2), (\"a\", 3)], \"b\")\n    [2]\n*/\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp29_b00ud.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428f45]\\n??:? void tmp29_b00ud.__unittest_L28_C1()\
    \ [0x427c69]\\n??:? void tmp29_b00ud.__modtest() [0x4281b0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d81f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x428c9e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42a6cd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42a75c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42a659]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x428c75]\\n??:? runModuleUnitTests [0x42d5f5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429394]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42931b]\\n??:? _d_run_main [0x429286]\\n??:? main [0x4281c3]\\\
    n??:? __libc_start_main [0x66e8e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return filter!(a => a.canFind(substring))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph1sg5t9x.d(13): Error: template instance `filter!((a) => a.canFind(substring))`\
    \ template `filter` is not defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\",\
    \ \"-o-\", \"/tmp/tmph1sg5t9x.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(a => a.canFind(substring));\n\
    }\n/*\n Number of lines of code in a file.\n    >>> count_lines_of_code(\"test.txt\"\
    )\n    3\n*/\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp43egvjgk.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp43egvjgk.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] output = new string[0];\n    foreach(string\
    \ s; strings)\n    {\n        if(s.canFind(substring))\n        {\n          \
    \  output ~= s;\n        }\n    }\n    return output;\n}\n/*\nCompute the median\
    \ of a list of doubles (possible using std.algorithm.sorting.median()).\n    >>>\
    \ median([2.0, 3.0, 4.0])\n    3.0\n    >>> median([])\n    0.0\n    >>> median([1.0,\
    \ 2.0, 3.0, 4.0])\n    2.5\n*/\ndouble median(double[] values)\n{\n    if(values.length\
    \ == 0)\n    {\n        return 0.0;\n    }\n    else if(values.length % 2 == 1)\n\
    \    {\n        sort(values);\n        return values[values.length / 2];\n   \
    \ }\n    else\n    {\n        sort(values);\n        return 0.5 * (values[values.length\
    \ / 2] + values[values.length / 2 - 1]);\n    }\n}\n/*\nFind an integer e, such\
    \ that when it is added to all elements of an input array, the sum is equal to\
    \ a given integer.\n    >>> find_integer([0], 0)\n    0\n    >>> find_integer([1,2,3],\
    \ 6)\n    3\n    >>> find_integer([1,2,3], 5)\n    4\n    >>> find_integer([1,2,3],\
    \ 7)\n    4\n    >>> find_integer([1,2,3], 2)\n    -1\n    >>> find_integer([1,2,3],\
    \ 3)\n    -1\n    >>> find_integer([1,2,3], 4)\n    -1\n    >>> find_integer([1,2,3],\
    \ 0)\n    -1\n    >>> find_integer([1,2,3], 1)\n    -1\n    >>> find_integer([1,2,3],\
    \ 8)\n    -1\n*/\nunittest\n{\n    alias candidate = filter_by_substring;\n\n\
    \    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpve7tu5ek.d(16): Error: no property `canFind` for type `string`\\\
    n/tmp/tmpve7tu5ek.d(40): Error: undefined identifier `sort`, did you mean function\
    \ `sqrt`?\\n/tmp/tmpve7tu5ek.d(45): Error: undefined identifier `sort`, did you\
    \ mean function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"\
    /tmp/tmpve7tu5ek.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    import std.stdio;\n    int i = 0;\n    string[]\
    \ tmp = new string[strings.length];\n    foreach(s; strings)\n    {\n        if(s.contains(substring))\n\
    \        {\n            tmp[i] = s;\n            i += 1;\n        }\n    }\n \
    \   return tmp[0..i];\n}\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1bypxdqa.d(18): Error: no property `contains` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1bypxdqa.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n  string[] result = [];\n  for (size_t i = 0;\
    \ i < strings.length; i++)\n  {\n    if (strings[i].canFind(substring))\n    {\n\
    \      result ~= strings[i];\n    }\n  }\n  return result;\n}\nunittest\n{\n \
    \   alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkifbn897.d(16): Error: no property `canFind` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkifbn897.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] r = [];\n    foreach(s; strings)\
    \ \n    {\n        if(s.contains(substring))\n            r ~= s;\n    }\n   \
    \ return r;\n}\nunittest\n{\n    alias candidate = filter_by_substring;\n\n  \
    \  assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvezv49jy.d(16): Error: no property `contains` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvezv49jy.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n  string[] filtered_strings;\n  foreach(string\
    \ str; strings) \n  {\n    if (str.contains(substring)) \n    {\n      filtered_strings\
    \ ~= str;\n    }\n  }\n  return filtered_strings;\n}\n/*\n    Filter an input\
    \ array of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"f\")\n    []\n*/\nunittest\n{\n    alias\
    \ candidate = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n\
    \    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"\
    xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt1b5am97.d(16): Error: no property `contains` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt1b5am97.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result;\n    foreach(string elem;\
    \ strings) \n    {\n        if (elem.contains(substring)) \n        {\n      \
    \      result ~= elem;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5bhz5nx5.d(16): Error: no property `contains` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5bhz5nx5.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(s => s.contains(substring));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsggxn76h.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsggxn76h.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    return filter!(s => s.contains(substring))(strings);\n\
    }\n \n/*\n Filter an input array of integers only for odd numbers\n    >>> filter_odd([1,\
    \ 2, 3, 4, 5])\n    [1, 3, 5]\n    >>> filter_odd([2, 4, 6, 8, 10])\n    []\n\
    */\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd0y0bh8z.d(13): Error: template instance `filter!((s) => s.contains(substring))`\
    \ template `filter` is not defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\",\
    \ \"-o-\", \"/tmp/tmpd0y0bh8z.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
