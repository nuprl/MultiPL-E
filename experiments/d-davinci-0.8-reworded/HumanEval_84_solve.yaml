name: HumanEval_84_solve
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\nGiven a positive integer N, return\
  \ the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n\
  \    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n\
  \    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N\
  \ \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring\
  \ solve(long N) \n"
tests: "unittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) ==\
  \ \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) ==\
  \ \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L)\
  \ == \"10010\");\n}\nvoid main(){}"
completions: ["{\n    return toString(N,2);\n}", "{\n  return format(\"%=b\", N);\n\
    }\n/*", "{\n    return to!string(N, 2);\n}", "{\n    return to!string(N, 2);\n\
    }", "{\n    auto arr = split[0..N](x => N % 2 == 0, N /= 2);\n    return format(\"\
    %s\", chomp(arr));\n}", "{\n    string result;\n    for (; N; N >>= 1) \n    \
    \    result = (N & 1 ? \"1\" : \"0\") ~ result;\n    return result.empty ? \"\
    0\" : result;\n}\n/*\npublic class Solution {\n    public static String solve(long\
    \ N) {\n        String r = \"\";\n        while (N > 0) {\n            r = N %\
    \ 2 + r;\n            N /= 2;\n        }\n        return r;\n    }\n}\n*/", "{\n\
    \    string result;\n    result = to!string(N, 2);\n    return result;\n}", "{\n\
    \    //masukkan ke dalam list\n    auto list = new int[];\n    while(N>0)\n  \
    \  {\n        list ~= N%2;\n        N = N/2;\n    }\n    // return string(list.reverse);\n\
    \    string str;\n    foreach(i;list.reverse) str ~= i;\n    return str;\n}",
  "{\n    return to!string(N,2);\n}", "{\n    //var r = N.to!string;\n    //return\
    \ r;\n    // The idea is to work backwards\n    // start by \n    if (N == 0)\n\
    \        return \"0\";\n    auto ret = new string[];\n    // The idea is to start\
    \ from the last digit which is two\n    auto two = 2;\n    while (N > 0)\n   \
    \ {\n        // First divide by two\n        // If it is odd add one\n       \
    \ if (N % two == 1)\n            ret ~= \"1\";\n        else\n            ret\
    \ ~= \"0\";\n        N /= two;\n    }\n    //return ret.text;\n    return ret.reversed.text;\n\
    }", "{\n    // Write your code here\n    string str = \"\";\n    int remainder;\n\
    \    int count = 0;\n    long num = N;\n    while(num > 0)\n    {\n        remainder\
    \ = num % 2;\n        count++;\n        str = cast(string)remainder + str;\n \
    \       num = num / 2;\n    }\n    return str;\n}", "{\n    return N.text.to!string.d\n\
    }\n/*\n|a|>=|b|\n        \"1101110\"\n        \"1101\"\n    For each digit of\
    \ a, if it's 0, make it 1\n    For each digit of b, if it's 1, make it 0\n   \
    \         \"0001000\"\n            \"0000\"\n    +1\n*/", "{\n    return format(\"\
    %s\", to!string(N, 2));\n}", "{\n    return to!string(N, 2);\n}\n```", "{\n  \
    \  return to!string(N,2);\n}", "{\n    string result = \"\";\n    if (N == 0)\
    \ return \"0\";\n    while (N > 0) {\n        result = (N % 2 ? \"1\" : \"0\"\
    ) ~ result;\n        N /= 2;\n    }\n    return result;\n}", "{\n    static assert(0\
    \ <= N <= 10000);\n    int result = (N == 0 ? 0 : N % 2 + 10 * solve(N / 2));\n\
    \    return format(\"%d\", result);\n}", "{\n    auto b = to!string(N,2);\n  \
    \  return b;\n}", "{\n    return to!string(N, 2);\n}", "{\n    auto x = to!string(N,\
    \ 2);\n    return x;\n}", "{\n    enum N_bits = 64;\n    N_bits bits = N;\n  \
    \  bits.popFront();\n    //bits.popFront();\n    //bits.popFront();\n    string\
    \ s = \"\";\n    foreach( i; 0..N_bits)\n    {\n        s ~= bits.front ? \"1\"\
    \ : \"0\";\n        bits.popFront();\n    }\n    return s;\n}", "{\n    auto sum\
    \ = 0.0;\n    while(N != 0) \n    {\n        sum += N % 2;\n        N /= 2;\n\
    \    }\n    return to!string(sum);\n}", "{\n    string x = to!string(N, 2);\n\
    \    int y = x.length;\n    int z = 0;\n    int a = 0;\n    for(int i = 0; i <\
    \ y; i++)\n    {\n        z = i;\n        a += x[z] - '0';\n    }\n    return\
    \ to!string(a);\n}", "{\n    string res = \"\";\n    while(N > 0)\n    {\n   \
    \     res = to!string(N % 2) ~ res;\n        N = N / 2;\n    }\n    return res;\n\
    }", "{\n    auto result = \"\";\n    while(N != 0)\n    {\n        result = to!string(N\
    \ % 2) ~ result;\n        N /= 2;\n    }\n    return result;\n}", "{\n    auto\
    \ to_string = map!to!string(iota(0, 10));\n    return to_string[N % 2] ~ solve(N\
    \ / 2);\n}", "{\n    enum length = (int) ceil(log2(N));\n    string bits = \"\"\
    ;\n    for (int i = length; i >= 0; i--)\n    {\n        if (N & (1 << i))\n \
    \           bits ~= \"1\";\n        else\n            bits ~= \"0\";\n    }\n\
    \    return bits;\n}\n/*\n   \n*/", "{\n    //write your code here.\n    string\
    \ result;\n    foreach(char digit; to!string(N))\n    {\n        result ~= to!string(digit);\n\
    \    }\n    return result;\n}", "{\n\tstring bin(long n) \n\t{\n\t\tconst int\
    \ b = 2;\n\t\tif (n < b)\n\t\t\treturn to!string(n);\n\t\treturn bin(n / b) ~\
    \ to!string(n % b);\n\t}\n\t\n\tauto s = bin(N);\n\t\n\treturn std.algorithm.reduce!((a,\
    \ b) => a + b)(s.map!(x => to!int(x))).to!string;\n}", "{\n    /*\n        Convert\
    \ the number to a binary numbe, then split\n        it into a an array and sum\
    \ the individual numbers\n        and then return the sum as a string\n    */\n\
    \    auto binary = to!string(to!BigInt(N), 2);\n    string[] binaryNums = binary.to!string.split(\"\
    \");\n    auto sum = 0;\n    foreach(num; binaryNums)\n    {\n        sum += to!int(num);\n\
    \    }\n    return to!string(sum);\n}", "{\n    string res = \"\";\n    while(N\
    \ != 0)\n    {\n        res = to!string(N % 2) ~ res;\n        N /= 2;\n    }\n\
    \    return res;\n}", "{\n    /*\n    Your code here\n    */\n    uint[] arr;\n\
    \    int counter = 0;\n    for(int i = 0; N > 0; i++)\n    {\n        arr[i] =\
    \ N % 2;\n        N = N / 2;\n        counter++;\n    }\n    arr = arr.sliced(0,\
    \ counter);\n    arr = arr.reversed;\n    return arr.to!string;\n}", "{\n    return\
    \ N.to!string;\n}", "{\n    auto digits = new string[N + 1];\n    digits[0] =\
    \ \"0\";\n    digits[1] = \"1\";\n    auto n = 2;\n    while (n <= N) \n    {\n\
    \        digits[n] = digits[n - 1] + digits[n - 2];\n        n++;\n    }\n   \
    \ return digits[N];\n}", "{\n    string s = N.to!string;\n    string sum = \"\"\
    ;\n    for(char c : s)\n    {\n        sum ~= c.to!long.to!string;\n    }\n  \
    \  long b = sum.to!long;\n    string bin = \"\";\n    while(b > 0)\n    {\n  \
    \      auto rem = b % 2;\n        b /= 2;\n        bin = rem.to!string ~ bin;\n\
    \    }\n    return bin;\n}", "{\n    return std.typecons.to!string(N, 2);\n}",
  "{\n    string ret;\n    if (N == 0) return \"0\";\n    while (N > 0) {\n      \
    \  ret = to!string(N % 2) ~ ret;\n        N /= 2;\n    }\n    return ret;\n}",
  "{\n    int len = 1;\n    int temp = N;\n    long num = 0;\n    for(int i = 0; i\
    \ < N; i++)\n    {\n        if(temp >= 2)\n        {\n            temp = temp\
    \ / 2;\n            len++;\n        }\n        else\n        {\n            break;\n\
    \        }\n    }\n    len++;\n    string binary = new string[len];\n    string\
    \ reverse = new string[len];\n    for(int i = 0; i < len; i++)\n    {\n      \
    \  binary[i] = \"0\";\n        reverse[i] = \"0\";\n    }\n    int i = 0;\n  \
    \  int j = 0;\n    while(N != 0)\n    {\n        num = N % 2;\n        N = N /\
    \ 2;\n        binary[i] = to!string(num);\n        i++;\n    }\n    for(int i\
    \ = 0; i < len; i++)\n    {\n        reverse[i] = binary[len - 1 - i];\n    }\n\
    \    return reverse;\n}", "{\n  return to!string(N, 2);\n}", "{\n    int n;\n\
    \    string res=\"\";\n    int i=0;\n    while(N!=0)\n    {\n        n=N%2;\n\
    \        res=n.to!string+res;\n        N=N/2;\n    }\n    return res;\n}", "{\n\
    \    auto binary = to!string(N, 2);\n    return binary;\n}", "{\n    enum x=to!string(N,2);\n\
    \    return x;\n}", "{\n  string str_N = to!string(N);\n  return format(\"%0\"\
    , str_N);\n}", "{\n  string result = \"\";\n  result = to!string(N, 2); // convert\
    \ N to binary\n  return result;\n}\n/*\n    Testcases:\n        >>> solve(10L)\n\
    \        \"1010\"\n        >>> solve(0L)\n        \"0\"\n        >>> solve(47L)\n\
    \        \"101111\"\n        >>> solve(1000L)\n        \"1111101000\"\n*/\n/*",
  "{\n  return to!string(N, 2);\n}", "{\n    string result = \"\";\n    long a = N;\n\
    \    while(a != 0)\n    {\n        auto t = a % 2;\n        result = t ~ result;\n\
    \        a = a / 2;\n    }\n    return result;\n}", "{\n    return toString(N,\
    \ 2);\n}", "{\n    return to!string(N, 2);\n}", "{\n    if (N < 0 || N > 10000)\
    \ return \"Error Number invalid\";\n    string result = \"\";\n    if (N == 0)\
    \ return \"0\";\n    while (N != 0) {\n        result = to!string(N % 2) ~ result;\n\
    \        N /= 2;\n    }\n    return result;\n}", "{\n    enum Bits = bitsNeeded!(N);\n\
    \    long[] result = new long[Bits];\n    long mask = 2^(Bits-1);\n    for(long\
    \ i = 0; i < Bits; i++)\n    {\n        if(N & mask)\n            result[i] =\
    \ 1;\n        else\n            result[i] = 0;\n        mask >>= 1;\n    }\n \
    \   return result.reverse.join(\"\");\n}", "{\n    string result;\n    while(N\
    \ > 0){\n        result ~= to!string(N % 2);\n        N /= 2;\n    }\n    return\
    \ result;\n}\n// void main() {\n//     import std.stdio;\n//     writeln(solve(147L));\n\
    // }", "{\n    return format(\"{0:b}\", N);\n}", "{\n    return to!string(N, 2);\n\
    }", "{\n    // int R = 0;\n    // for (int i = 1; i <=N; i++)\n    //     R +=\
    \ pow(2, i);\n    // return R;\n    string s = \"\";\n    uint NN = cast(uint)N;\n\
    \    //if (N == 0) return \"0\";\n    while (NN > 0)\n    {\n        s = NN %\
    \ 2 ~ s;\n        NN /= 2;\n    }\n    return s;\n}\n/*\n    The bytes are stored\
    \ in little endian format, \n    so when viewed in a text editor the byte sequences\
    \ may appear as:\n        LE: \"abcd1234\"\n        BE: \"3412cdab\"\n*/\n ",
  "{\n    auto binaryNumber = to!string(N, 2);\n    return binaryNumber;\n}", "{\n\
    \    // create a string builder\n    auto sb = appender!string();\n    if (N ==\
    \ 0) {\n        return \"0\";\n    }\n    // loop\n    while (N != 0) {\n    \
    \    // push in remainder and then divide N by 2\n        sb.put(N % 2);\n   \
    \     N /= 2;\n    }\n    // reverse and return\n    return sb.data.reversed;\n\
    }", "{\n    import std.algorithm : iota;\n    import std.conv : to;\n    import\
    \ std.bitmanip : toBitString;\n    import std.range : generate;\n    import std.functional\
    \ : curry;\n    import std.range : map;\n    import std.algorithm : count, countUntil;\n\
    \    import std.math : pow;\n    auto n = to!string(N);\n    uint i = 0;\n   \
    \ uint j = 0;\n    string[string] vMap;\n    string[string] hMap;\n    foreach(c;\
    \ n)\n    {\n        if (c == '1')\n        {\n            i++;\n        }\n \
    \       vMap[n[j..$]] = repeat(\"0\", i) ~ \"1\" ~ repeat(\"0\", (n.length - j\
    \ - 1 - i));\n        hMap[n[j..$]] = repeat(\"0\", n.length - j - 1) ~ to!string(i);\n\
    \        j++;\n    }\n    auto r = generate!(() => n)().take(n.length);\n    return\
    \ r.map!(curry!q{c in vMap ? vMap[c] : hMap[c]}).array.join;\n}", "{\n    string\
    \ st = \"\";\n    long r;\n    do\n    {\n        r = N % 2;\n        st = st\
    \ ~ to!string(r);\n        N = N / 2;\n    }\n    while(N != 0);\n    return st;\n\
    }", "{\n    return toString(N, 2);\n}", "{\n  string binary = \"\";\n  while(N\
    \ > 0) {\n    binary = to!string(N % 2) ~ binary;\n    N /= 2;\n  }\n  return\
    \ binary;\n}", "{\n\t//typecons.Tuple(int,int)\n    auto tuple = tuple(N/2, N%2);\n\
    \    long temp = 0;\n    string bin = \"\";\n    int i = 0;\n    if(N < 2)\n \
    \       return to!string(N);\n    while(tuple[0] > 1)\n    {\n        if(i > 0)\n\
    \            temp = tuple[0];\n        bin = to!string(tuple[1]) ~ bin;\n    \
    \    tuple = tuple(tuple[0]/2, tuple[0]%2);\n        i++;\n    }\n    bin = to!string(tuple[0])\
    \ ~ to!string(tuple[1]) ~ bin;\n    return bin;\n}", "{\n    string result = \"\
    \";\n    while(N>0)\n    {\n        string binaryDigit = to!string(N%2);\n   \
    \     N/=2;\n        result = binaryDigit ~ result;\n    }\n    return result;\n\
    }", "{\n    return to!string(N,2);\n}", "{\n    return to!string(N, 2);\n}", "{\n\
    \    // \u5224\u65AD\u5947\u5076: if(N % 2 == 0)\n    string result;\n    while(N\
    \ > 0)\n    {\n        result = to!string(N % 2) ~ result;\n        N /= 2;\n\
    \    }\n    return result;\n}", "{\n    alias toDigits = std.conv.toString;\n\
    \    return toDigits(N, 2);\n}", "{\n    string result = \"\";\n    for (; N >\
    \ 0;)\n    {\n        result = to!string(N % 2) ~ result;\n        N /= 2;\n \
    \   }\n    return result.empty ? \"0\" : result;\n}", "{\n    return std.typecons.to!string(N,2);\n\
    }\n/*\n//default\nstring solve(long N) \n{\n    import std.string;\n    return\
    \ to!string(N,2);\n}\n*/\n/*\n//fancy\nstring solve(long N) \n{\n    return format(\"\
    %b\",N);\n}\n*/\n/*\n//brute\nstring solve(long N) \n{\n    import std.math;\n\
    \    string result = \"\";\n    while(N > 0)\n    {\n        result = N % 2 +\
    \ result;\n        N = N / 2;\n    }\n    return result;\n}\n*/\n/*\n//brute\n\
    string solve(long N) \n{\n    import std.math;\n    string result = \"\";\n  \
    \  while(N > 0)\n    {\n        result = N % 2 ~ result;\n        N = N / 2;\n\
    \    }\n    return result;\n}\n*/\n/*\n//brute\nstring solve(long N) \n{\n   \
    \ import std.math;\n    string result = \"\";\n    for(long i = N; i > 0; --i)\n\
    \    {\n        result = i % 2 ~ result;\n        i = i / 2;\n    }\n    return\
    \ result;\n}\n*/\n/*\n//brute\nstring solve(long N) \n{\n    import std.math;\n\
    \    string result = \"\";\n    for(long i = N; i > 0; i = i / 2)\n    {\n   \
    \     result = i % 2 ~ result;\n    }\n    return result;\n}\n*/\n/*\n//brute\n\
    string solve(long N) \n{\n    import std.math;\n    return N.recursiveCall!((a,b)\
    \ => (a / 2,b * 2 + a % 2)).array.array;\n}\n*/\n/*\n//brute\nstring solve(long\
    \ N) \n{\n    import std.math;\n    string result = \"\";\n    foreach(item; N.recursiveCall!((a,b)\
    \ => (a / 2,b * 2 + a % 2)).array)\n    {\n        result =", "{\n    string result\
    \ = \"\";\n    if (N == 0)\n        return \"0\";\n    \n    if (N == 1)\n   \
    \     return \"1\";\n    \n    if (N < 0)\n        return \"\";\n    \n    while\
    \ (N > 0)\n    {\n        result = (N % 2).to!string + result;\n        N /= 2;\n\
    \    }\n    \n    return result;\n}", "{\n    immutable Digits = [\n        \"\
    0\",\n        \"1\",\n        \"10\",\n        \"11\",\n        \"100\",\n   \
    \     \"101\",\n        \"110\",\n        \"111\",\n        \"1000\",\n      \
    \  \"1001\",\n        \"1010\",\n        \"1011\",\n        \"1100\",\n      \
    \  \"1101\",\n        \"1110\",\n        \"1111\",\n        \"10000\",\n     \
    \   \"10001\",\n        \"10010\",\n        \"10011\",\n        \"10100\",\n \
    \       \"10101\",\n        \"10110\",\n        \"10111\",\n        \"11000\"\
    ,\n        \"11001\",\n        \"11010\",\n        \"11011\",\n        \"11100\"\
    ,\n        \"11101\",\n        \"11110\",\n        \"11111\",\n        \"100000\"\
    ,\n        \"100001\",\n        \"100010\",\n        \"100011\",\n        \"100100\"\
    ,\n        \"100101\",\n        \"100110\",\n        \"100111\",\n        \"101000\"\
    ,\n        \"101001\",\n        \"101010\",\n        \"101011\",\n        \"101100\"\
    ,\n        \"101101\",\n        \"101110\",\n        \"101111\",\n        \"110000\"\
    ,\n        \"110001\",\n        \"110010\",\n        \"110011\",\n        \"110100\"\
    ,\n        \"110101\",\n        \"110110\",\n        \"110111\",\n        \"111000\"\
    ,\n        \"111001\",\n        \"111010\",\n        \"111011\",\n        \"111100\"\
    ,\n        \"111101\",\n        \"111110\",\n        \"111111\",\n        \"1000000\"\
    ,\n        \"1000001\",\n        \"1000010\",\n        \"1000011\",\n        \"\
    1000100\",\n        \"1000101\",\n        \"1000110\",\n        \"1000111\",\n\
    \        \"1001000\",\n        \"1001001\",\n        \"1001010\",\n        \"\
    1001011\",\n        \"1001100\",\n        \"1001101\",\n        \"1001110\",\n\
    \        \"1001111\",\n        \"1010000\",\n        \"1010001\",\n        \"\
    1010010\",\n        \"1010011", "{\n    //first take a string\n    string binary\
    \ = \"\";\n    //take a reference or copy of N, it can be long, but always take\
    \ a copy\n    long temp = N;\n    //while the value is greater than 0, the loop\
    \ will run\n    while(temp > 0)\n    {\n        //take the remainder of temp and\
    \ mod it by 2\n        //add it to the front of the string\n        binary = to!string(temp\
    \ % 2) ~ binary;\n        //divide temp by 2\n        temp /= 2;\n    }\n    //return\
    \ the string\n    return binary;\n}", "{\n\tstring result;\n\twhile(N!=0)\n\t\
    {\n\t\tresult = to!string(N % 2) ~ result;\n\t\tN = N / 2;\n\t}\n\treturn result;\n\
    }", "{\n  int M = (int) N;\n  string s=\"\";\n  int i = 0;\n  while( M > 0)\n\
    \  {\n      s = (M % 2).to!string + s;\n      M = M / 2;\n  }\n  return s;\n}",
  "{\n    //    int N = to!int(args[1]);\n    int S = 0;\n    //    string S;\n  \
    \  foreach(i;1..N+1)\n    {\n        string x = format(\"%b\",i);\n        int\
    \ result = x.sum();\n        S += result;\n    }\n    string s = to!string(S);\n\
    \    return s;\n}", "{\n    int i = 0;\n    string res = \"\";\n    while(N !=\
    \ 0) {\n        res = N % 2 == 0 ? \"0\" : \"1\" + res;\n        N /= 2;\n   \
    \ }\n    return res;\n}", "{\n    return to!string(N,2);\n}", "{\n    import std.conv;\n\
    \    string res = \"\";\n    size_t i = 0;\n    foreach(immutable n; N.to!string())\n\
    \    {\n        int d = to!int(n);\n        res ~= to!string(d * (2^i));\n   \
    \     i++;\n    }\n    return res;\n}", "{\n    return to!string(N, 2);\n}", "{\n\
    \    /*\n    import std.algorithm : map;\n    import std.conv : to;\n    import\
    \ std.range;\n    import std.algorithm.searching : find, findAdjacent;\n    import\
    \ std.array : array;\n    import std.range : retro;\n    import std.math : log2,\
    \ pow;\n    */\n    auto data = N.to!(string);\n    int n = data.length;\n   \
    \ n.iota.map!(a => pow(10, a)).sum.log2.to!int.iota.map!(a => pow(2, a)).filter!(a\
    \ => a <= N).sum.to!string;\n}", "{\n    const int base = 2;\n    string result\
    \ = \"\";\n    while (N > 0) {\n        result ~= std.typecons.to!string(N % base);\n\
    \        N /= base;\n    }\n    return std.algorithm.reverse(result);\n}", "{\n\
    \    auto res = to!string(N, 2);\n    int sum = 0;\n    foreach(d; res)\n    {\n\
    \        sum += d.to!int();\n    }\n    return to!string(sum);\n}", "{\n    //\
    \ Your code here\n    auto list = std.typecons.Tuple!(bool[], string, ulong)();\n\
    \    while(N > 0){\n        list[0] ~= N % 2;\n        N /= 2;\n    }\n    foreach(bit;\
    \ list[0]){\n        list[1] ~= to!string(bit);\n    }\n    return list[1];\n\
    }\n// Test", "{\n\tlong B= N ; \n\tlong[] A ; \n\tlong i =0 ; \n\twhile (B !=\
    \ 0 ) \n\t{\n\t\tlong m = B % 2 ; \n\t\tB = B / 2 ; \n\t\tA.insert (i , m ) ;\
    \ \n\t\ti = i + 1 ; \n\t}\n\tstring P ; \n\tfor (i =0 ; i < A.length ; i = i +\
    \ 1 ) \n\t{\n\t\tstring Q = to!string (A[i]) ; \n\t\tP = P ~ Q ; \n\t}\n\treturn\
    \ P ; \n}", "{\n    string result;\n    while(N>0)\n    {\n      result = (N&1)+result;\n\
    \      N=N>>1;\n    }\n    \n    return result;\n}", "{\n    string ret = \"\"\
    ;\n    return ret;\n}", "{\n    string result = to!string(N, 2);\n    return result;\n\
    }", "{\n    return (N == 0 ? \"0\" : to!string(N, 2));\n}", "{\n    return format(\"\
    %=0b\", N);\n}", "{\n    string ans = \"\";\n    foreach(i; 0 .. N+1)\n    {\n\
    \        ans = (N & (1 << i)) ? \"1\" ~ ans : \"0\" ~ ans;\n    }\n    return\
    \ ans;\n}", "{\n    string s;\n    while(N > 0)\n    {\n        if(N%2)\n    \
    \        s = \"1\" ~ s;\n        else\n            s = \"0\" ~ s;\n        N /=\
    \ 2;\n    }\n    return s;\n}", "{\n    string result = to!string(N,2);\n    return\
    \ result;\n}", "{\n    static string[] digits = [\"0\", \"1\"];\n    string bin\
    \ = \"\";\n    while (N > 0) \n    {\n        bin = digits[N % 2] ~ bin;\n   \
    \     N /= 2;\n    }\n    return bin;\n}\n// int main()\n// {\n//     const long\
    \ N = 1500L;\n//     writeln(solve(N));\n//     return 0;\n// }", "{\n    string\
    \ result = \"\";\n    if (N == 0)\n        return \"0\";\n    for (; N > 0; N\
    \ /= 2)\n        result = to!string(N % 2) ~ result;\n    return result;\n}",
  "{\n    string bin = to!string(N, 2);\n    string[] binarray = bin.split(\"\");\n\
    \    ulong sum = 0;\n    foreach(string element; binarray)\n    {\n        sum\
    \ += to!ulong(element);\n    }\n    return to!string(sum);\n}", "{\n    if (N\
    \ == 0)\n        return \"0\";\n    string result = \"\";\n    while (N > 0) \n\
    \    {\n        result = to!string(N % 2) ~ result;\n        N /= 2;\n    }\n\
    \    return result;\n}\n/*\n    Best Answer : 0ms\n    string solve(long N) \n\
    \    {\n        string temp;\n        foreach(x;std.algorithm.iota(0,19)){\n \
    \           if(N & 1<<x)\n                temp ~= '1';\n            else\n   \
    \             temp ~= '0';\n        }\n        temp = temp.dup.split(\n      \
    \      (t){\n                if(t=='0')\n                    return true;\n  \
    \              else\n                    return false;\n            }\n      \
    \  );\n        return temp[temp.length-1];\n    }\n*/", "{\n    return to!string(N,\
    \ 2);\n}", "{\n    int k;\n    string tmp=\"\";\n    while(N!=0)\n    {\n    \
    \    k=N%2;\n        N=N/2;\n        tmp+=to!string(k);\n    }\n    return tmp;\n\
    }", "{\n    string binaryNumber = \"\";\n    //convert integer to binary number\n\
    \    for(int i = 0; i < N; i++)\n    {\n        if(N % 2 == 0)\n        {\n  \
    \          binaryNumber += \"0\";\n        }\n        else\n        {\n      \
    \      binaryNumber += \"1\";\n        }\n        N /= 2;\n    }\n    return binaryNumber;\n\
    }", "{\n  string binN=\"\";\n  foreach(d; 0..30)\n    binN=to!string(N%2)+binN;\n\
    \  return binN;\n}\n/*\nusing std.stdio;", "{\n    return to!string(N, 2);\n}",
  "{\n    auto p = to!string(N, 2);\n    //long sum = 0;\n    //foreach(immutable\
    \ d; p.to!ulong())\n        //sum += d;\n    //return to!string(sum);\n    return\
    \ p;\n}", "{\n    string s = \"\";\n    while(N != 0)\n    {\n      s = to!string(N\
    \ % 2) ~ s;\n      N /= 2;\n    }\n    return s;\n}", "{\n    return binary(N).to!string;\n\
    }\n// bool testing = false;\n/*", "{\n    return to!string(N, 2);\n}", "{\n  \
    \  string t = \"\";\n    while(N != 0)\n    {\n        t = t ~ cast(string)(N\
    \ % 2);\n        N /= 2;\n    }\n    t = t.idup.reverse;\n    return t;\n}", "{\n\
    \    return to!string(N, 2);\n}", "{\n    // typecons.Tuple\n    auto result =\
    \ N == 0 ? Tuple!(\"0\", 0) : Tuple!(\"\", 0);\n    while (N > 0) \n    {\n  \
    \      // typecons.Tuple\n        auto current = Tuple!(\"\", (N % 2) + result[1]);\n\
    \        N /= 2;\n        if (current[1] == 2) \n        {\n            N++;\n\
    \            current[1] = 0;\n        }\n        // typecons.Tuple\n        result\
    \ = Tuple!(current[0] ~ result[0], current[1]);\n    }\n    return result[0];\n\
    }", "{\n    return to!string(N, 2);\n}", "{\n    return to!string(N, 2);\n}",
  "{\n    return to!string(N, 2);\n}\n```", "{\n    // loop invariant\n    // 1. sum(N)\
    \ = sum of N in binary\n    // 2. N > 0\n    // 3. N % 2 == 0\n    while (N >\
    \ 0) {\n        N /= 2;\n    }\n    \n    return \"0\";\n}", "{\n    \n    long\
    \ x = N;\n    string s = \"\";\n    while(x > 0)\n    {\n        s = to!string(x\
    \ % 2) ~ s;\n        x /= 2;\n    }\n    return s;\n}", "{\n    string res = to!string(N,\
    \ 2);\n    return res;\n}", "{\n    auto res = \"\";\n    for (auto i = 0; i <\
    \ N; i++)\n    {\n        res = (i % 2 ? \"1\" : \"0\") ~ res;\n    }\n    return\
    \ res;\n}", "{\n    \n    string[] bn = {\"0\",\"1\"};\n    string result = \"\
    \";\n    while(N!=0){\n        result = bn[N%2] + result;\n        N = N/2;\n\
    \    }\n    return result;\n}", "{\n    return to!string(N, 2);\n}", "{\n  int\
    \ sum = 0;\n  int exp = 1;\n  while (N>0)\n  {\n    int digit = N%2;\n    sum\
    \ += digit*exp;\n    exp *= 10;\n    N /= 2;\n  }\n  return to!string(sum);\n\
    }\n \n// Please do not modify main()", "{\n    auto binary_str = to!string(N,\
    \ 2);\n    int b = 0;\n    foreach(immutable a; binary_str) {\n        b += a\
    \ - '0';\n    }\n    return to!string(b);\n}", "{\n    // make binary number string\n\
    \    string s=\"\";\n    while(N != 0)\n    {\n        s = cast(string)(N%2) ~\
    \ s;\n        N /= 2;\n    }\n    if(s == \"\") \n        s = \"0\";\n    return\
    \ s;\n}", "{\n    string s = \"\";\n    while(N>0)\n    {\n        s = (N%2) ~\
    \ s;\n        N = N/2;\n    }\n    return s;\n}", "{\n\tstring result =\"\";\n\
    \t//convert decimal number to binary number\n\twhile(N>0)\n\t{\n\t\tresult = to!string(N%2)\
    \ ~ result;\n\t\tN /= 2;\n\t}\n\t//add up the binary digits\n\tlong sum = 0;\n\
    \tforeach(i; result)\n\t{\n\t\tsum += i - '0';\n\t}\n\tresult = to!string(sum);\n\
    \treturn result;\n}", "{\n  const int SIZE = 80;\n  int i, ans[SIZE];\n  for (i\
    \ = 0; i < SIZE; i++) ans[i] = 0;\n  for (i = 0; N > 0; i++) {\n    ans[i] = N\
    \ % 2;\n    N /= 2;\n  }\n  string t = to!string(ans[i - 1]);\n  for (i = i -\
    \ 2; i >= 0; i--) t ~= to!string(ans[i]);\n  return t;\n}", "{\n    string s =\
    \ to!string(N, 2);\n    return s;\n}", "{\n    string s_bin=\"\";\n    // your\
    \ code goes here\n    while(N!=0)\n    {\n        s_bin+=N%2+'0';\n        N/=2;\n\
    \    }\n    return s_bin;\n}\n// test case", "{\n    return to!string(N, 2);\n\
    }", "{\n    return format(to!string(N), \"b\");\n}", "{\n    \n    string binaryNum\
    \ = \"\";\n    \n    while (N > 0) {\n        \n        binaryNum = (N % 2) +\
    \ binaryNum;\n        N = N / 2;\n    }\n    \n    return binaryNum;\n}", "{\n\
    \    string result = \"\";\n    long i, j;\n    for (i = N; i > 0; i /= 2)\n \
    \   {\n        j = i % 2;\n        result = to!string(j) ~ result;\n    }\n  \
    \  return result;\n}", "{\n    immutable hash = [\n        '0': '0000',\n    \
    \    '1': '0001',\n        '2': '0010',\n        '3': '0011',\n        '4': '0100',\n\
    \        '5': '0101',\n        '6': '0110',\n        '7': '0111',\n        '8':\
    \ '1000',\n        '9': '1001',\n        'A': '1010',\n        'B': '1011',\n\
    \        'C': '1100',\n        'D': '1101',\n        'E': '1110',\n        'F':\
    \ '1111',\n    ];\n    string s = format(N);\n    string r;\n    foreach(c; s)\n\
    \        r ~= hash[c];\n    if(r.length == 1)\n        return r;\n    r = strip(r);\n\
    \    return r;\n}\n//void main()\n//{\n//    writeln(solve(1000L));\n//    writeln(solve(150L));\n\
    //    writeln(solve(147L));\n//}", "{\n  return to!string(N, 2);\n}", "{\n   \
    \ return toString(format(\"%b\", N));\n}", "{\n    return format(\"%b\", N);\n\
    }\n/*", "{\n    string a = N.text;\n    string Bin = \"\";\n    for (int i = 0;\
    \ i < a.length; i++) \n    {\n        Bin ~= to!string(to!long(a[i]),\"%b\");\n\
    \    }\n    return Bin;\n}", "{\n    return to!string(N,2);\n}", "{\n    alias\
    \ D = tuple(long, string);\n    int c = 0;\n    D[] s = D(0, \"\");\n    D[] Ds\
    \ = D(0, \"\");\n    if (N == 0) return \"0\";\n    while (N > 0)\n    {\n   \
    \     if (N % 2 == 0)\n        {\n            s[c] = D(0, \"0\");\n        }\n\
    \        else\n        {\n            s[c] = D(1, \"1\");\n        }\n       \
    \ N /= 2;\n        c++;\n    }\n    int idx = c - 1;\n    foreach (D i; s)\n \
    \   {\n        Ds[idx] = D(i[0], i[1]);\n        idx--;\n    }\n    string result\
    \ = \"\";\n    foreach (D i; Ds)\n    {\n        result ~= i[1];\n    }\n    return\
    \ result;\n}", "{\n    string result;\n    long num = 0;\n    num = N;\n    while(num\
    \ != 0)\n    {\n        //result = to!string(num % 2) ~ result;\n        result\
    \ = (num % 2).to!string ~ result;\n        num /= 2;\n    }\n    return result;\n\
    }", "{\n    enum digits = \"01\";\n    string binary;\n    while (N > 0) {\n \
    \       binary ~= digits[N % 2];\n        N /= 2;\n    }\n    return binary.reverse;\n\
    }", "{\n\tauto binary = long.to!string(N, 2);\n\t\n\treturn binary;\n}", "{\n\
    \    return N==0 ? \"0\" : to!string(N,2);\n}", "{\n    int res = 0;\n    string\
    \ r = \"\";\n    for (; N != 0; N /= 2)\n    {\n        res = N % 2;\n       \
    \ r = format(\"%s%s\", res, r);\n    }\n    return r;\n}\n/*", "{\n    bool first\
    \ = true;\n    string ret = \"\";\n    foreach(n; std.typecons.reverse(std.math.pow(2L,\
    \ 64L).iota))\n    {\n        if(n <= N)\n        {\n            if(!first)\n\
    \                ret ~= \"1\";\n            else\n                first = false;\n\
    \            N -= n;\n        }\n        else\n        {\n            if(!first)\n\
    \                ret ~= \"0\";\n        }\n    }\n    return ret;\n}", "{\n  \
    \  return to!string(N, 2);\n}", "{\n    return to!string(N, 2);\n}", "{\n    //\
    \ Write your code here\n    return \"\";\n}\n// -------------My Solution----------------\n\
    string solve(long N)\n{\n    string res = to!string(N, 2);\n    return res;\n\
    }\n/*\npublic:\n    string solve(long N) \n    {\n        // Write your code here\n\
    \        char res[100];\n        long long n = N;\n        long long i = 0;\n\
    \        while(n!=0)\n        {\n            res[i++] = n%2+'0';\n           \
    \ n /= 2;\n        }\n        return string(res, res+i);\n    }\n*/\n// ------------------------------------------------------",
  "{\n    const int base = 2;\n    string result = \"\";\n    while (N != 0) {\n \
    \       result = to!string(N % base) ~ result;\n        N /= base;\n    }\n  \
    \  return result;\n}", "{\n    string binary=\"\";\n    while(N!=0)\n    {\n \
    \       if(N%2==0)\n            binary=\"0\"+binary;\n        else\n         \
    \   binary=\"1\"+binary;\n        N/=2;\n    }\n    return binary;\n}", "{\n \
    \   auto bin = to!string(N,2);\n    return to!string(sum(to!(int[])(bin)));\n}",
  "{\n    string ret = \"\";\n    while(N != 0)\n    {\n        if(N % 2 == 0)\n \
    \           ret = \"0\" ~ ret;\n        else\n            ret = \"1\" ~ ret;\n\
    \        N /= 2;\n    }\n    return ret;\n}", "{\n    assert(N<=10000);\n    assert(N>=0);\n\
    \    string s = \"\";\n    if(N==0)\n    {\n        s = \"0\";\n    }\n    else\n\
    \    {\n        for(int i=0; i<N; i++)\n        {\n            s += \"1\";\n \
    \       }\n    }\n    return s;\n}", "{\n    string ret;\n    while(N)\n    {\n\
    \        long tmp = N % 2;\n        ret = ret + to!string(tmp);\n        N /=\
    \ 2;\n    }\n    return ret;\n}", "{\n    return format(\"%s\",std.conv.to!string(N,2));\n\
    }\n```", "{\n    string res = \"\";\n    long b = 1;\n    while (b <= N)\n   \
    \ {\n        if (N % (2 * b) >= b)\n            res = \"1\" ~ res;\n        else\n\
    \            res = \"0\" ~ res;\n        b *= 2;\n    }\n    return res;\n}\n\
    //string solve(long N)\n//{\n//    return format(\"%b\", N);\n//}\n//string solve(long\
    \ N)\n//{\n//    string res = \"\";\n//    while (N != 0)\n//    {\n//       \
    \ res = (N % 2 ? \"1\" : \"0\") ~ res;\n//        N /= 2;\n//    }\n//    return\
    \ res;\n//}", "{\n    string res = \"\";\n    while(N>0)\n    {\n        res =\
    \ to!string(N%2)~res;\n        N = N/2;\n    }\n    return res;\n}", "{\n\tint\
    \ [] t = [0,1,2,3,4,5,6,7,8,9];\n\tint [] r = [0,1,10,11,100,101,110,111,1000,1001];\n\
    \treturn to!string(reduce!(a=>b=>a*2+b)(map!(a=>r[a])(map!(a=>to!int(a))(to!string(N)))));\n\
    }", "{\n    int[] arr = new int[100];\n    int i = 0;\n    while (N > 0)\n   \
    \ {\n        arr[i] = cast(int)(N % 2);\n        N = N / 2;\n        i++;\n  \
    \  }\n    i--;\n    string str = \"\";\n    for (int j = i; j >= 0; j--)\n   \
    \ {\n        str = str ~ cast(string)(arr[j]);\n    }\n    return str;\n}", "{\n\
    \    return to!string(N, 2);\n}", "{\n    \n    \n    \n    \n    string res =\
    \ \"\";\n    while(N>0)\n    {\n        res = to!string(N%2) ~ res;\n        N/=2;\n\
    \    }\n    return res;\n}", "{\n    string result;\n    while(N > 0)\n    {\n\
    \        if(N % 2 == 0)\n        {\n            result ~= \"0\";\n        }\n\
    \        else\n        {\n            result ~= \"1\";\n        }\n        N /=\
    \ 2;\n    }\n    return result.reverse;\n}", "{\n    string bin = \"\";\n    for\
    \ ( ; N > 0; N /= 2)\n        bin = to!string(N % 2) ~ bin;\n    return bin;\n\
    }", "{\n    // your code here\n    string s = \"\";\n    while(N!=0)\n    {\n\
    \        s = to!string(N%2)~s;\n        N = N/2;\n    }\n    return s;\n}", "{\n\
    \    return to!string(N, 2);\n}", "{\n    return to!string(N, 2);\n}", "{\n  \
    \  string binary=\"\";\n    while(N > 0)\n    {\n        if(N%2 == 0)\n      \
    \  {\n            binary += \"0\";\n        }\n        else\n        {\n     \
    \       binary += \"1\";\n        }\n        N /= 2;\n    }\n    return binary.rev;\n\
    }", "{\n    long n = N;\n    immutable long b = 2;\n    string bin = \"\";\n \
    \   while(n != 0)\n    {\n        bin = (n % b == 0 ? \"0\" : \"1\") ~ bin;\n\
    \        n /= b;\n    }\n    return bin;\n}\n// ----- end of code -----", "{\n\
    \    // Write your code here.\n    string s = \"\";\n    while(N > 0)\n    {\n\
    \        int n = N % 2;\n        s = n + s;\n        N /= 2;\n    }\n    return\
    \ s;\n}\n}\n/*\n#include <iostream>\n#include <string>\n#include <vector>\n#include\
    \ <cmath>", "{\n    //auto val = std.typecons.Tuple!(string,bool)(\"\",false);\n\
    \    auto val = typeof(return).init;\n    foreach(i; 0 .. N.digits.length)\n \
    \   {\n        //val.string ~=\n    }\n    /*if(N > 0)\n    {\n        val.string\
    \ = \"1\";\n        val.bool = true;\n    }*/\n    //return val;\n    return val.string;\n\
    }", "{\n    // Write your code here\n    string t;\n    long tmp = N;\n    while(tmp\
    \ > 0)\n    {\n        t += to!string(tmp % 2);\n        tmp /= 2;\n    }\n  \
    \  return t.reverse;\n}", "{\n    import std.conv;\n    import std.format;\n \
    \   import std.string;\n    enum string s = to!string(N, 2);\n    return format(\"\
    %s\", to!string(s.countUntil(\"0\")));\n}", "{\n\treturn to!string(N, 2);\n}",
  "{\n    string s = \"\";\n    bool isplus = false;\n    bool isminus = false;\n\
    \    bool iszero = false;\n    if(N == 0)\n    {\n        iszero = true;\n   \
    \ }\n    else if(N > 0)\n    {\n        isplus = true;\n    }\n    else\n    {\n\
    \        isminus = true;\n    }\n    if(isminus)\n    {\n        N = -N;\n   \
    \ }\n    while(N > 0)\n    {\n        s = to!string(N % 2) ~ s;\n        N /=\
    \ 2;\n    }\n    if(iszero)\n    {\n        s = \"0\";\n    }\n    if(isminus)\n\
    \    {\n        s = \"-\" ~ s;\n    }\n    return s;\n}", "{\n    return to!string(N,\
    \ 2);\n}", "{\n    \n    string bin = \"\";\n    //convert long int into string\n\
    \    string s = to!string(N);\n    //loop through the converted string\n    foreach(char\
    \ c; s)\n    {\n        //convert char into int\n        int n = c - '0';\n  \
    \      //append the binary equivalent to a string variable\n        bin ~= to!string(n.to!bin);\n\
    \    }\n    //return the string variable with the binary number\n    return bin;\n\
    }\n//string solve(long N) \n//{\n//    \n//    string bin = \"\";\n//    //convert\
    \ long int into string\n//    string s = to!string(N);\n//    //loop through the\
    \ converted string\n//    foreach(char c; s)\n//    {\n//        //convert char\
    \ into int\n//        int n = c - '0';\n//        //append the binary equivalent\
    \ to a string variable\n//        bin ~= to!string(n.to!bin);\n//    }\n//   \
    \ //return the string variable with the binary number\n//    return bin;\n//}\n\
    //", "{\n    string s = \"\";\n    while(N > 0)\n    {\n        s += (N%2 == 0\
    \ ? \"0\" : \"1\");\n        N /= 2;\n    }\n    return s;\n}", "{\n    // std::cout\
    \ << \"hello\" << std::endl;\n    // int n = N;\n    // std::cout << n << std::endl;\n\
    \    std::string myString;\n    for (int i = 0; i < 32; i++) {\n        if ( (N&(1\
    \ << i)) != 0) {\n            myString.append(\"1\");\n        } else {\n    \
    \        myString.append(\"0\");\n        }\n    }\n    // std::cout << myString\
    \ << std::endl;\n    return myString;\n}", "{\n    return to!string(N, 2);\n}",
  "{\n    return to!string(N,2);\n}", "{\n    // Write your code here\n    auto res\
    \ = to!string(N, 2);\n    return res;\n}\n ", "{\n    //stores the ascii value\
    \ of the binary num\n    char[] binary = new char[32];\n    string b = \"\";\n\
    \    int index = 0;\n    while(N > 0)\n    {\n        //mod N by 2 and determine\
    \ the remainder to see if it is odd or even.\n        int remainder = N % 2;\n\
    \        N /= 2;\n        binary[index++] = remainder + '0';\n    }\n    //Reverse\
    \ the order of the binary number.\n    for(int i = index - 1; i >= 0; i--)\n \
    \   {\n        b += binary[i];\n    }\n    return b;\n}", "{\n    return to!string(N,2);\n\
    }", "{\n    return format(\"0b%s\", N.to!string);\n}", "{\n    string bits = \"\
    \";\n    while (N > 0) {\n        ulong mod = N % 2;\n        bits = to!string(mod)\
    \ ~ bits;\n        N /= 2;\n    }\n    return bits;\n}", "{\n    return to!string(Integer.to(BigInteger(N),\
    \ 2));\n}", "{\n    string s = \"\";\n    while(N > 0)\n    {\n        s = to!string(N%2)\
    \ ~ s;\n        N /= 2;\n    }\n    return s;\n}", "{\n    string b = \"\";\n\
    \    while(N != 0)\n    {\n        b = format(\"%s%s\", to!string(N % 2), b);\n\
    \        N /= 2;\n    }\n    return b;\n}", "{\n    //your code\n    if(N == 0)\n\
    \        return \"0\";\n    auto arr = [];\n    for(; N != 0; N/=2)\n        arr\
    \ ~= (N % 2).to!string;\n    return join(arr.reverse);\n}", "{\n    if (N <= 0)\
    \ return \"0\";\n    string s = \"\";\n    while (N > 0) {\n        s = (char)(N\
    \ % 2 + '0') + s;\n        N /= 2;\n    }\n    return s;\n}", "{\n    string result\
    \ = \"\";\n    //cout << \" N : \" << N << endl;\n    while(N > 0)\n    {\n  \
    \      if(N % 2 == 0)\n        {\n            //cout << \"0\" << endl;\n     \
    \       result = \"0\" + result;\n        }\n        else\n        {\n       \
    \     //cout << \"1\" << endl;\n            result = \"1\" + result;\n       \
    \ }\n        N = N / 2;\n    }\n    //cout << result << endl;\n    return result;\n\
    }", "{\n    static const int maxn = 10000;\n    static const int maxn2 = maxn/2;\n\
    \    static const int maxn4 = maxn/4;\n    static const int maxn8 = maxn/8;\n\
    \    static const int maxn16 = maxn/16;\n    static const int maxn32 = maxn/32;\n\
    \    static const int maxn64 = maxn/64;\n    static const int maxn128 = maxn/128;\n\
    \    static const int maxn256 = maxn/256;\n    static const int maxn512 = maxn/512;\n\
    \    static const int maxn1024 = maxn/1024;\n    static const int maxn2048 = maxn/2048;\n\
    \    static const int maxn4096 = maxn/4096;\n    static const int maxn8192 = maxn/8192;\n\
    \    static const int maxn16384 = maxn/16384;\n    static const int maxn32768\
    \ = maxn/32768;\n    static const int maxn65536 = maxn/65536;\n    static const\
    \ int maxn131072 = maxn/131072;\n    static const int maxn262144 = maxn/262144;\n\
    \    static const int maxn524288 = maxn/524288;\n    static const int maxn1048576\
    \ = maxn/1048576;\n    static const int maxn2097152 = maxn/2097152;\n    static\
    \ const int maxn4194304 = maxn/4194304;\n    static const int maxn8388608 = maxn/8388608;\n\
    \    static const int maxn16777216 = maxn/16777216;\n    static const int maxn33554432\
    \ = maxn/33554432;\n    static const int maxn67108864 = maxn/67108864;\n    static\
    \ const int maxn134217728 = maxn/134217728;\n    static const int maxn268435456\
    \ = maxn/268435456;\n    static const int maxn536870912 = maxn/536870912;\n  \
    \  static const int maxn1073741824 = maxn/1073741824;\n   ", "{\n    enum result\
    \ = to!string(N, 2);\n    return result;\n}", "{\n    // your code goes here\n\
    \    string result = \"\";\n    while(N>0)\n    {\n        result = to!string(N%2)\
    \ ~ result;\n        N/=2;\n    }\n    return result;\n}", "{\n    // write your\
    \ code here.\n    return to!string(N, 2);\n}", "{\n    return format(\"%s\", N.text);\n\
    }", "{\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    //Filling\
    \ in the template\n    import std.algorithm;\n    import std.conv;\n    import\
    \ std.range;\n    import std.stdio;\n    import std.string;\n    import std.typecons;\n\
    \    import std.math;\n    import std.bitmanip;\n    import std.conv;\n    import\
    \ std.bigint;\n    import std.exception;\n    import std.traits;\n    import std.array;\n\
    \    import std.typetuple;\n    import std.meta;\n    import std.tuple;\n    //Your\
    \ Function\n    import std.bitmanip;\n    import std.conv;\n    string binary=\"\
    \";\n    binary=to!string(N,2);\n    binary.retro;\n    return binary;\n}\n//Test\
    \ Generator\nimport std.algorithm;\nimport std.array;\nimport std.exception;\n\
    import std.math;\nimport std.range;\nimport std.random;\nimport std.typecons;\n\
    import std.uni;\nimport std.bitmanip;\nimport std.conv;\nimport std.bigint;\n\
    import std.exception;\nimport std.traits;\nimport std.array;\nimport std.typetuple;\n\
    import std.meta;\nimport std.tuple;", "{\n    enum binary = \"01\";\n    enum\
    \ decimal = \"0123456789\";\n    string binaryNumber = \"\";\n    while(N > 0)\n\
    \    {\n        binaryNumber = binary[N%2] ~ binaryNumber;\n        N = N/2;\n\
    \    }\n    return binaryNumber;\n}", "{\n    return to!string(N,2);\n}", "{\n\
    \t// Write your code here\n\tif(N < 0)\n\t{\n\t\treturn \"0\";\n\t}\n\tauto n\
    \ = N;\n\tauto str = \"\";\n\twhile(n > 0)\n\t{\n\t\tstr ~= n % 2;\n\t\tn /= 2;\n\
    \t}\n\treturn str.reverse();\n}", "{\n    long n = N;\n    string ans = \"\";\n\
    \    while(n != 0){\n        ans = format!(\"%d\", n % 2) ~ ans;\n        n /=\
    \ 2;\n    }\n    return ans;\n}", "{\n    string s = std.typecons.to!string(N,2);\n\
    \    return s;\n}", "{\n    enum i = 0;\n    auto dg = to!string(N);\n    int[]\
    \ digs = new int[dg.length];\n    foreach(ch; dg)\n    {\n        digs[i] = to!int(ch);\n\
    \        i++;\n    }\n    auto x = to!int(N);\n    string bits = \"\";\n    for(int\
    \ i = 0; i < digs.length; i++)\n    {\n        if(x == 0)\n        {\n       \
    \     return bits;\n        }\n        else\n        {\n            int bit =\
    \ x % 2;\n            x = x / 2;\n            bits = format(\"%s%s\", bit, bits);\n\
    \        }\n    }\n    return bits;\n}", "{\n    auto res = binary(N);\n    //return\
    \ std.string.format(\"%s\", res);\n    return std.string.replace(res,\"-\",\"\"\
    );\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
