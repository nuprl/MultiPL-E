language: d
name: HumanEval_147_get_max_triples
results:
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  auto l = new long[](n);\n    long cnt = 0;\n    foreach(i, l)\n    {\n    \
    \    l[i] = i * i - i + 1;\n    }\n    foreach(i, l)\n    {\n        foreach(j,\
    \ l[i + 1 .. $])\n        {\n            foreach(k, l[j + 1 .. $])\n         \
    \   {\n                if((l[i] + l[j] + l[k]) % 3 == 0)\n                {\n\
    \                    ++cnt;\n                }\n            }\n        }\n   \
    \ }\n    return cnt;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8wrtwisc.d(22): Error: no identifier for declarator `l`

    /tmp/tmp8wrtwisc.d(22): Error: found `)` when expecting `;`

    /tmp/tmp8wrtwisc.d(26): Error: found `foreach` when expecting `)`

    /tmp/tmp8wrtwisc.d(28): Error: no identifier for declarator `l[i + 1 .. __dollar]`

    /tmp/tmp8wrtwisc.d(28): Error: found `)` when expecting `;`

    /tmp/tmp8wrtwisc.d(30): Error: no identifier for declarator `l[j + 1 .. __dollar]`

    /tmp/tmp8wrtwisc.d(30): Error: found `)` when expecting `;`

    /tmp/tmp8wrtwisc.d(37): Error: found `}` when expecting `)`

    /tmp/tmp8wrtwisc.d(38): Error: found `}` instead of statement

    /tmp/tmp8wrtwisc.d(39): Error: found `return` when expecting `)`

    /tmp/tmp8wrtwisc.d(41): Error: found `unittest` when expecting `;` following statement

    /tmp/tmp8wrtwisc.d(50): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8wrtwisc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164150
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  auto arr = appender!(long[])();\n    long i;\n    for (i = 1; i <= n; i++)\
    \ \n    {\n        arr.put(i * i - i + 1);\n    }\n    long num_triples = 0;\n\
    \    for (i = 0; i < n; i++) \n    {\n        for (long j = i + 1; j < n; j++)\
    \ \n        {\n            for (long k = j + 1; k < n; k++) \n            {\n\
    \                if ((arr[i] + arr[j] + arr[k]) % 3 == 0) \n                {\n\
    \                    num_triples++;\n                }\n            }\n      \
    \  }\n    }\n    return num_triples;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpumwhwuo7.d(20): Error: template instance `appender!(long[])` template
    `appender` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpumwhwuo7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164150
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  int[] a = new int[n];\n    int count = 0;\n    foreach(idx, i; a)\n    {\n\
    \        a[idx] = i * i - i + 1;\n    }\n    foreach(i; a)\n    {\n        foreach(j;\
    \ a[i + 1 .. $])\n        {\n            foreach(k; a[j + 1 .. $])\n         \
    \   {\n                if((i + j + k) % 3 == 0)\n                {\n         \
    \           count++;\n                }\n            }\n        }\n    }\n   \
    \ return count;\n}\n/*\n    The order of the Fibonacci sequence is a row of numbers\
    \ where every number is the sum of the two numbers directly before it.\n    Your\
    \ task is to write a function that takes in an integer, n, and returns the nth\
    \ number of the Fibonacci sequence.\n    Example:\n    >>> get_fibonacci(1)\n\
    \    1\n    >>> get_fibonacci(2)\n    1\n    >>> get_fibonacci(8)\n    21\n  \
    \  >>> get_fibonacci(0)\n    -1\n*/\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpk57fsyw2.d(58): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281b5]

    ??:? void tmpk57fsyw2.__unittest_L54_C1() [0x427ec0]

    ??:? void tmpk57fsyw2.__modtest() [0x427f38]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c18f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b022]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302ad]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43075c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430239]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aff9]

    ??:? runModuleUnitTests [0x42bf65]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428678]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164150
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  // create vector based on n\n    auto size = n as int;\n    auto a = new int[](size);\n\
    \    // fill vector\n    foreach(i, ref item; a)\n    {\n        item = i * i\
    \ - i + 1;\n    }\n    // print vector\n    foreach(i, ref item; a)\n    {\n \
    \       writeln(item);\n    }\n    return 0L;\n}\nunittest\n{\n    alias candidate\
    \ = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp52vrzfxg.d(21): Error: semicolon expected following auto declaration,
    not `as`

    /tmp/tmp52vrzfxg.d(21): Error: found `int` when expecting `;` following statement

    /tmp/tmp52vrzfxg.d(21): Deprecation: use `{ }` for an empty statement, not `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp52vrzfxg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164150
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long triple_cnt = 0;\n    for (int i = 0; i <\
    \ n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (int i = 0; i\
    \ < n - 2; i++)\n    {\n        for (int j = i + 1; j < n - 1; j++)\n        {\n\
    \            for (int k = j + 1; k < n; k++)\n            {\n                if\
    \ ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    triple_cnt++;\n\
    \                }\n            }\n        }\n    }\n    return triple_cnt;\n\
    }\n// Test #1\nimport testlib.checker.Checker;\nimport testlib.checker.StringUtils;\n\
    import testlib.checker.StringWrapper;\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu0g2yvlk.d(42): Error: module `Checker` is in file ''testlib/checker/Checker.d''
    which cannot be read

    import path[0] = /tmp

    import path[1] = /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos

    import path[2] = /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/druntime/import

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu0g2yvlk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164150
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  // Write your code here\n    long[] a = new long[(int)n];\n    foreach(i; 0\
    \ .. n)\n    {\n        a[i] = i * i - i + 1;\n    }\n    long result = 0;\n \
    \   foreach(i; 0 .. n)\n    {\n        foreach(j; i+1 .. n)\n        {\n     \
    \       foreach(k; j+1 .. n)\n            {\n                if(a[i] + a[j] +\
    \ a[k] % 3 == 0)\n                {\n                    result++;\n         \
    \       }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp160htaao.d(21): Error: C style cast illegal, use `cast(int)n`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp160htaao.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164150
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long counter=0L;\n    for(long i=1L;i<n;i++)\n    {\n        for(long j=i+1L;j<n;j++)\n\
    \        {\n            for(long k=j+1L;k<n;k++)\n            {\n            \
    \    if((i*i-i+1L+j*j-j+1L+k*k-k+1L)%3L==0L)\n                {\n            \
    \        counter++;\n                }\n            }\n        }\n    }\n    return\
    \ counter;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L)\
    \ == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n\
    \    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpr7gk3p2_.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ddd]

    ??:? void tmpr7gk3p2_.__unittest_L36_C1() [0x427b05]

    ??:? void tmpr7gk3p2_.__modtest() [0x427b5c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb03]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a996]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb29]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fab5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]

    ??:? runModuleUnitTests [0x42b8d9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42822c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164150
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long res = 0;\n    foreach(size_t i; 0 .. n - 2)\n    {\n        foreach(size_t\
    \ j; i + 1 .. n - 1)\n        {\n            foreach(size_t k; j + 1 .. n)\n \
    \           {\n                if(i*i - i + 1 + j*j - j + 1 + k*k - k + 1 % 3\
    \ == 0)\n                {\n                    res++;\n                }\n  \
    \          }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8cgbc0kn.d(40): unittest failure

    ----------------

    ??:? _d_unittestp [0x427df5]

    ??:? void tmp8cgbc0kn.__unittest_L36_C1() [0x427b00]

    ??:? void tmp8cgbc0kn.__modtest() [0x427b78]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb1b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9ae]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb41]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42fff0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42facd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a985]

    ??:? runModuleUnitTests [0x42b8f1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428244]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164150
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long ret = 0;\n    long ai = 0;\n    long aj = 0;\n    long ak = 0;\n    foreach(i;\
    \ 1..n)\n    {\n        ai = i * i - i + 1;\n        foreach(j; (i + 1)..n)\n\
    \        {\n            aj = j * j - j + 1;\n            foreach(k; (j + 1)..n)\n\
    \            {\n                ak = k * k - k + 1;\n                if((ai +\
    \ aj + ak) % 3 == 0)\n                {\n                    ret++;\n        \
    \        }\n            }\n        }\n    }\n    return ret;\n}\n/*\n    TEST\n\
    */\nimport std.stdio;\nunittest\n{\n    alias candidate = get_max_triples;\n\n\
    \    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu9eimeo0.d(51): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e15]

    ??:? void tmpu9eimeo0.__unittest_L46_C1() [0x427b41]

    ??:? void tmpu9eimeo0.__modtest() [0x427b98]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb3b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb61]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430010]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42faed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9a5]

    ??:? runModuleUnitTests [0x42b911]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428264]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164150
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long total = 0;\n    for (long i = 0; i < n; i++)\n    {\n        for (long\
    \ j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n\
    \            {\n                long v1 = (i + 1) * (i + 1) - (i + 1) + 1;\n \
    \               long v2 = (j + 1) * (j + 1) - (j + 1) + 1;\n                long\
    \ v3 = (k + 1) * (k + 1) - (k + 1) + 1;\n                if ((v1 + v2 + v3) %\
    \ 3 == 0)\n                {\n                    total++;\n                }\n\
    \            }\n        }\n    }\n    return total;\n}\nunittest\n{\n    alias\
    \ candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164150
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  enum num = ctfe(3);\n    long[] a = new long[n];\n    foreach(int i, ref el;\
    \ a)\n    {\n        el = i * i - i + 1;\n    }\n    long count = 0;\n    for(int\
    \ i = 0; i < n; i++)\n    {\n        for(int j = i + 1; j < n; j++)\n        {\n\
    \            for(int k = j + 1; k < n; k++)\n            {\n                if((a[i]\
    \ + a[j] + a[k]) % num == 0)\n                {\n                    count++;\n\
    \                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_biybhiy.d(20): Error: undefined identifier `ctfe`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_biybhiy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164150
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[int(n)];\n    long count = 0;\n    foreach(i; 0..n)\n \
    \   {\n        a[i] = i * i - i + 1;\n    }\n    foreach(i; 0..n)\n    {\n   \
    \     foreach(j; i+1..n)\n        {\n            foreach(k; j+1..n)\n        \
    \    {\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n\
    \                    ++count;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\n/*\n    We will call the num_vertices function on\
    \ the tree t and the number n. \n    It should return the number of vertices that\
    \ are located at a distance less than or equal to n from the root.\n*/\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp13rk51nn.d(20): Error: cannot implicitly convert expression `n`
    of type `long` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp13rk51nn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164150
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    // for (i in 1..n)\n    for (long i = 1; i <= n; i++)\n\
    \    {\n        long a_i = i * i - i + 1;\n        // for (j in i + 1..n)\n  \
    \      for (long j = i + 1; j <= n; j++)\n        {\n            long a_j = j\
    \ * j - j + 1;\n            // for (k in j + 1..n)\n            for (long k =\
    \ j + 1; k <= n; k++)\n            {\n                long a_k = k * k - k + 1;\n\
    \                // if (a_i + a_j + a_k) % 3 == 0\n                if ((a_i +\
    \ a_j + a_k) % 3 == 0)\n                {\n                    // result += 1\n\
    \                    result += 1;\n                }\n            }\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164150
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long count = 0;\n    long mod_sum;\n    for (long a = 1; a < n - 1; a++)\n\
    \    {\n        for (long b = a + 1; b < n; b++)\n        {\n            mod_sum\
    \ = (a * a - a + 1) + (b * b - b + 1);\n            for (long c = b + 1; c <=\
    \ n; c++)\n            {\n                mod_sum += (c * c - c + 1);\n      \
    \          if (mod_sum % 3 == 0)\n                {\n                    count++;\n\
    \                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7cyfq9b1.d(43): unittest failure

    ----------------

    ??:? _d_unittestp [0x427de5]

    ??:? void tmp7cyfq9b1.__unittest_L39_C1() [0x427af0]

    ??:? void tmp7cyfq9b1.__modtest() [0x427b68]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a99e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fabd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]

    ??:? runModuleUnitTests [0x42b8e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428234]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164150
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long t = 0;\n    long hl = (n - 1) / 2;\n    foreach(idx, item; iota(1L, n\
    \ + 1L)) \n    {\n        auto v = item * item - item + 1;\n        if (v % 3\
    \ == 0) \n        {\n            auto x = (hl + 1) / item;\n            auto c\
    \ = idx - hl;\n            auto d = n - idx;\n            if (c >= 0 && d >= 0)\
    \ \n            {\n                t += x * c + x * d - x * x;\n            }\n\
    \        }\n    }\n    return t;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe4a49vts.d(22): Error: undefined identifier `iota`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe4a49vts.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164150
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  return (n * (n - 1) * (n - 2)) / 6;\n}\nunittest\n{\n    alias candidate =\
    \ get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpkh69dy4y.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d45]

    ??:? void tmpkh69dy4y.__unittest_L22_C1() [0x427a4c]

    ??:? void tmpkh69dy4y.__modtest() [0x427ac4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba6b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a8fe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fa91]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff40]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa1d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8d5]

    ??:? runModuleUnitTests [0x42b841]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428194]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164150
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    foreach(i, ref e; a)\n    {\n        e = i * i\
    \ - i + 1;\n    }\n    long counter = 0;\n    for(long i = 0; i < n; i++)\n  \
    \  {\n        for(long j = i + 1; j < n; j++)\n        {\n            for(long\
    \ k = j + 1; k < n; k++)\n            {\n                if((a[i] + a[j] + a[k])\
    \ % 3 == 0)\n                {\n                    counter++;\n             \
    \   }\n            }\n        }\n    }\n    return counter;\n}\nunittest\n{\n\
    \    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8zwkn3lg.d(45): unittest failure

    ----------------

    ??:? _d_unittestp [0x428125]

    ??:? void tmp8zwkn3lg.__unittest_L41_C1() [0x427e30]

    ??:? void tmp8zwkn3lg.__modtest() [0x427ea8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c123]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afb6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430241]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4306f0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301cd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af8d]

    ??:? runModuleUnitTests [0x42bef9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164150
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[to!int(n)];\n    long r=0;\n    for(long i=0;i<n;i++)\n\
    \    {\n        a[i]=i*i-i+1;\n        if(i>1)\n        {\n            for(long\
    \ j=i-1;j>0;j--)\n            {\n                if((a[i]+a[j])%3==0)\n      \
    \          {\n                    for(long k=j-1;k>=0;k--)\n                 \
    \   {\n                        if((a[i]+a[j]+a[k])%3==0)\n                   \
    \     {\n                            r++;\n                        }\n       \
    \             }\n                }\n            }\n        }\n    }\n    return\
    \ r;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L)\
    \ == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n\
    \    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq4u113r3.d(20): Error: template instance `to!int` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq4u113r3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164150
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[long] a;\n    a[0] = 1;\n    for (long i = 1; i < n; i++) \n    {\n  \
    \      a[i] = a[i - 1] + (2 * i + 1);\n    }\n    long cnt = 0;\n    for (long\
    \ i = 0; i < n - 2; i++) \n    {\n        for (long j = i + 1; j < n - 1; j++)\
    \ \n        {\n            long psum = a[i] + a[j];\n            if (psum % 3\
    \ == 0) \n            {\n                long rem = psum / 3;\n              \
    \  auto m = std.algorithm.lower_bound(a, i + 1, n, rem);\n                if (m\
    \ != n && *m == rem) \n                {\n                    cnt++;\n       \
    \         }\n            }\n        }\n    }\n    return cnt;\n}\nlong calculateMultiplicativePersistence(long\
    \ n)\n{\n\tif (n < 10) return 0;\n\tauto p = n.to!string.reduce!((a, b) => a *\
    \ b).to!long;\n\treturn 1 + calculateMultiplicativePersistence(p);\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgucpkfdt.d(35): Error: undefined identifier `algorithm` in package
    `std`

    /tmp/tmpgucpkfdt.d(48): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgucpkfdt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164150
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long count=0L;\n    if(n==0L)\n        return 0L;\n    if(n<=3L)\n        return\
    \ 0L;\n    if(n<=5L)\n        return 1L;\n    foreach(i;1L..n)\n    {\n      \
    \  foreach(j;i+1L..n)\n        {\n            foreach(k;j+1L..n)\n           \
    \ {\n                if((i*i-i+1L+j*j-j+1L+k*k-k+1L)%3L==0L)\n               \
    \     count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpc_cj5bi1.d(45): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e35]

    ??:? void tmpc_cj5bi1.__unittest_L40_C1() [0x427b5d]

    ??:? void tmpc_cj5bi1.__modtest() [0x427bb4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb5b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9ee]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb81]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430030]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb0d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9c5]

    ??:? runModuleUnitTests [0x42b931]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428284]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164150
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long ret=0;\n    foreach(int i;0..n)\n    {\n        foreach(int j;0..n)\n\
    \        {\n            foreach(int k;0..n)\n            {\n                if(j>i\
    \ && k>j && (i*i-i+1 +j*j-j+1 +k*k-k+1)%3==0)\n                {\n           \
    \         ret++;\n                }\n            }\n        }\n    }\n    return\
    \ ret;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L)\
    \ == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n\
    \    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpghty2evp.d(21): Error: cannot implicitly convert expression `n`
    of type `long` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpghty2evp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164150
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long counter = 0;\n    for (size_t i = 0; i < n; i++)\n    {\n        for (size_t\
    \ j = i + 1; j < n; j++)\n        {\n            for (size_t k = j + 1; k < n;\
    \ k++)\n            {\n                if ((i * i - i + 1 + j * j - j + 1 + k\
    \ * k - k + 1) % 3 == 0)\n                {\n                    counter++;\n\
    \                }\n            }\n        }\n    }\n    return counter;\n}\n\
    unittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L)\
    \ == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n\
    \    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqf6wlk_x.d(40): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ddd]

    ??:? void tmpqf6wlk_x.__unittest_L36_C1() [0x427ae4]

    ??:? void tmpqf6wlk_x.__modtest() [0x427b5c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb03]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a996]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb29]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fab5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]

    ??:? runModuleUnitTests [0x42b8d9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42822c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164150
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long const m = n;\n    long l = 0L;\n    while(n--) l += n - 1L;\n    return\
    \ l / 3L;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L)\
    \ == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n\
    \    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4109oqdr.d(20): Error: no identifier for declarator `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4109oqdr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164150
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  auto a = new int[n](1);\n    foreach(i, ref e; a) e = i * i - i + 1;\n    long\
    \ count = 0;\n    foreach(i, e; a)\n    {\n        foreach(j, f; a[i + 1 .. $])\n\
    \        {\n            foreach(k, g; a[j + 1 .. $])\n            {\n        \
    \        if((e + f + g) % 3 == 0)\n                    count++;\n            }\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplzx4p_6k.d(20): Error: function expected before `()`, not `new
    int[](cast(ulong)n)` of type `int[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplzx4p_6k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164150
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long res = 0;\n    for (long i = 1; i < n; i++)\n    {\n        auto a = i\
    \ * i - i + 1;\n        for (long j = i + 1; j < n; j++)\n        {\n        \
    \    auto b = j * j - j + 1;\n            for (long k = j + 1; k < n; k++)\n \
    \           {\n                auto c = k * k - k + 1;\n                if ((a\
    \ + b + c) % 3 == 0)\n                    res++;\n            }\n        }\n \
    \   }\n    return res;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvtzkrumj.d(42): unittest failure

    ----------------

    ??:? _d_unittestp [0x427de5]

    ??:? void tmpvtzkrumj.__unittest_L37_C1() [0x427b11]

    ??:? void tmpvtzkrumj.__modtest() [0x427b68]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a99e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fabd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]

    ??:? runModuleUnitTests [0x42b8e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428234]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164150
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long _a = 1;\n    long _b = 3;\n    long _c = 7;\n  \
    \  long _d = 13;\n    long _e = 21;\n    for (; _a < n; _a++)\n    {\n       \
    \ for (; _b < n; _b++)\n        {\n            for (; _c < n; _c++)\n        \
    \    {\n                if ((_a + _b + _c) % 3 == 0)\n                {\n    \
    \                result++;\n                }\n            }\n            _c =\
    \ _b + 4;\n        }\n        _b = _a + 4;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3ax_dzez.d(47): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dbd]

    ??:? void tmp3ax_dzez.__unittest_L43_C1() [0x427ac8]

    ??:? void tmp3ax_dzez.__modtest() [0x427b40]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bae3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a976]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb09]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffb8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa95]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]

    ??:? runModuleUnitTests [0x42b8b9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42820c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164150
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  auto maxTriple = 0L;\n    for(size_t i = 1; i < n - 1; i++)\n    {\n      \
    \  for(size_t j = i + 1; j < n; j++)\n        {\n            for(size_t k = j\
    \ + 1; k <= n; k++)\n            {\n                auto ai = i * i - i + 1;\n\
    \                auto aj = j * j - j + 1;\n                auto ak = k * k - k\
    \ + 1;\n                if((ai + aj + ak) % 3 == 0)\n                {\n     \
    \               maxTriple++;\n                }\n            }\n        }\n  \
    \  }\n    return maxTriple;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164150
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long res = 0;\n    for (int i = 1; i < n - 1; i++) \n    {\n        for (int\
    \ j = i + 1; j < n; j++) \n        {\n            if ((j * j - j + 1) % 3 == 0)\
    \ \n            {\n                res += (n - j);\n                break;\n \
    \           }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvwrbvla4.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d9d]

    ??:? void tmpvwrbvla4.__unittest_L34_C1() [0x427aa4]

    ??:? void tmpvwrbvla4.__modtest() [0x427b1c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bac3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a956]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fae9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff98]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa75]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]

    ??:? runModuleUnitTests [0x42b899]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281ec]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164150
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long sum = 0;\n    for (int i = 1; i < n; i++)\n    {\n        for (int j =\
    \ i + 1; j < n; j++)\n        {\n            for (int k = j + 1; k < n; k++)\n\
    \            {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k\
    \ + 1) % 3 == 0)\n                {\n                    sum++;\n            \
    \    }\n            }\n        }\n    }\n    return sum;\n}\nunittest\n{\n   \
    \ alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n   \
    \ assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpoh45mnt7.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x427db5]

    ??:? void tmpoh45mnt7.__unittest_L36_C1() [0x427ae1]

    ??:? void tmpoh45mnt7.__modtest() [0x427b38]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42badb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a96e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb01]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffb0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa8d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a945]

    ??:? runModuleUnitTests [0x42b8b1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428204]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164150
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[cast(size_t)n];\n    foreach(i; 0..n)\n        a[i] = i\
    \ * i - i + 1;\n    long count = 0;\n    for(long i = 0; i < n - 2; i++)\n   \
    \     for(long j = i + 1; j < n - 1; j++)\n            for(long k = j + 1; k <\
    \ n; k++)\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n               \
    \     count++;\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpojj6twfs.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x42814d]

    ??:? void tmpojj6twfs.__unittest_L31_C1() [0x427e54]

    ??:? void tmpojj6twfs.__modtest() [0x427ecc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c14b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afde]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430269]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430718]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301f5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afb5]

    ??:? runModuleUnitTests [0x42bf21]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428610]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164150
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    for (int i = 0; i < n; i++) \n    {\n        a[i]\
    \ = i * i - i + 1;\n    }\n    long count = 0;\n    for (int i = 0; i < n - 2;\
    \ i++) \n    {\n        for (int j = i + 1; j < n - 1; j++) \n        {\n    \
    \        for (int k = j + 1; k < n; k++) \n            {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n                    count++;\n            }\n    \
    \    }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpn7z9c1os.d(43): unittest failure

    ----------------

    ??:? _d_unittestp [0x428135]

    ??:? void tmpn7z9c1os.__unittest_L39_C1() [0x427e40]

    ??:? void tmpn7z9c1os.__modtest() [0x427eb8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c133]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afc6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430251]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430700]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301dd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af9d]

    ??:? runModuleUnitTests [0x42bf09]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285f8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164150
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  import std.range;\n    assert(n > 0);\n    long count = 0;\n    foreach(size_t\
    \ i, size_t j, size_t k; i < n && j < n && k < n; \n        ++i, ++j, ++k) \n\
    \    {\n        if((i + j + k) % 3 == 0)\n            ++count;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L)\
    \ == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n\
    \    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplzy7dym7.d(23): Error: found `;` when expecting `)`

    /tmp/tmplzy7dym7.d(24): Error: found `)` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplzy7dym7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164150
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  auto arr = array(3, 0, n);\n    for (int i = 0; i < n; i++)\n    {\n      \
    \  int cur = i * i - i + 1;\n        arr[cur % 3]++;\n    }\n    auto triple =\
    \ [](int a, int b, int c) \n    {\n        return a * b * c;\n    };\n    long\
    \ ret = triple(arr[0], arr[0], arr[0]);\n    ret += 2 * triple(arr[0], arr[0],\
    \ arr[1]);\n    ret += 2 * triple(arr[0], arr[0], arr[2]);\n    ret += 2 * triple(arr[0],\
    \ arr[1], arr[1]);\n    ret += 2 * triple(arr[0], arr[1], arr[2]);\n    ret +=\
    \ 2 * triple(arr[0], arr[2], arr[2]);\n    ret += 2 * triple(arr[1], arr[1], arr[1]);\n\
    \    ret += 2 * triple(arr[1], arr[1], arr[2]);\n    ret += 2 * triple(arr[1],\
    \ arr[2], arr[2]);\n    ret += triple(arr[2], arr[2], arr[2]);\n    return ret;\n\
    }\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L)\
    \ == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n\
    \    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpymw2qwhu.d(26): Error: found `a` when expecting `.` following int

    /tmp/tmpymw2qwhu.d(26): Error: found `,` when expecting identifier following `int`.

    /tmp/tmpymw2qwhu.d(26): Error: found `int` when expecting `,`

    /tmp/tmpymw2qwhu.d(26): Error: found `c` when expecting `.` following int

    /tmp/tmpymw2qwhu.d(26): Error: found `)` when expecting identifier following `int`.

    /tmp/tmpymw2qwhu.d(27): Error: found `{` when expecting `,`

    /tmp/tmpymw2qwhu.d(28): Error: expression expected, not `return`

    /tmp/tmpymw2qwhu.d(28): Error: found `a` when expecting `,`

    /tmp/tmpymw2qwhu.d(28): Error: found `;` when expecting `,`

    /tmp/tmpymw2qwhu.d(29): Error: expression expected, not `}`

    /tmp/tmpymw2qwhu.d(29): Error: found `;` when expecting `,`

    /tmp/tmpymw2qwhu.d(30): Error: found `ret` when expecting `.` following long

    /tmp/tmpymw2qwhu.d(30): Error: found `=` when expecting identifier following `long`.

    /tmp/tmpymw2qwhu.d(30): Error: found `triple` when expecting `,`

    /tmp/tmpymw2qwhu.d(30): Error: found `;` when expectin'
  stdout: ''
  timestamp: 1660164150
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  import std.math : ln;\n    import std.algorithm.iteration : all;\n    auto\
    \ init_arr(long n) {\n        return iota(1L).take(n).map!(x => x * x - x + 1L).array;\n\
    \    }\n    double lg3 = ln(3L);\n    auto is_triple = (long lhs, long rhs) {\n\
    \        return cast(long)((ln(lhs) + ln(rhs)) / lg3) == \n            cast(long)((ln(lhs)\
    \ + ln(rhs)) / lg3);\n    };\n    auto arr = init_arr(n);\n    long acc = 0L;\n\
    \    for (size_t i = 0; i < arr.length; i++) {\n        for (size_t j = i + 1;\
    \ j < arr.length; j++) {\n            auto tmp = arr[i] + arr[j];\n          \
    \  for (size_t k = j + 1; k < arr.length; k++) {\n                if (is_triple(tmp,\
    \ arr[k])) acc++;\n            }\n        }\n    }\n    return acc;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6roh77gc.d(20): Error: module `std.math` import `ln` not found

    /tmp/tmp6roh77gc.d(21): Error: module `std.algorithm.iteration` import `all` not
    found

    /tmp/tmp6roh77gc.d(23): Error: undefined identifier `iota`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6roh77gc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164150
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long a_size0 = n;\n    double a_size1 = n;\n    long[] a = new long[a_size0];\n\
    \    for (long i = 0; i < a_size0; i += 1) \n    {\n        a[i] = i * i - i +\
    \ 1;\n    }\n    long triples = 0;\n    foreach (i; 0 .. a_size0) \n    {\n  \
    \      foreach (j; i + 1 .. a_size0) \n        {\n            foreach (k; j +\
    \ 1 .. a_size0) \n            {\n                if ((a[i] + a[j] + a[k]) % 3\
    \ == 0) \n                {\n                    triples += 1;\n             \
    \   }\n            }\n        }\n    }\n    return triples;\n}\nunittest\n{\n\
    \    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp1plgyro6.d(47): unittest failure

    ----------------

    ??:? _d_unittestp [0x428175]

    ??:? void tmp1plgyro6.__unittest_L43_C1() [0x427e7c]

    ??:? void tmp1plgyro6.__modtest() [0x427ef4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c173]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b006]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430291]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430740]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43021d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afdd]

    ??:? runModuleUnitTests [0x42bf49]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428638]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164150
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  // Create a new empty array\n    int[] a = new int[n];\n    long count = 0;\n\
    \    foreach(i; 0..n) \n    {\n        // Append the value to the array\n    \
    \    a[i] = i * i - i + 1;\n    }\n    foreach(i; 0..n) \n    {\n        foreach(j;\
    \ 0..n) \n        {\n            foreach(k; 0..n) \n            {\n          \
    \      if(i < j && j < k && (a[i] + a[j] + a[k]) % 3 == 0) \n                {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\n/*\n    Problem:\n        You are given a function\
    \ f and an integer n. \n    You have to return an array of n length. \n    For\
    \ each i (1 \u2264 i \u2264 n), the value of the ith element should be the number\
    \ of letters in the ith term of the series of f(0), f(1), f(2), ....\n    You\
    \ may assume that the value of n won't exceed 1000.\nunittest\n{\n    alias candidate\
    \ = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr85ustrh.d(43): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr85ustrh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164150
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long count = 0;\n    for (long i = 1; i < n - 1; i++)\n    {\n        for (long\
    \ j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k <= n;\
    \ k++)\n            {\n                if ((i * i - i + 1 + j * j - j + 1 + k\
    \ * k - k + 1) % 3 == 0)\n                {\n                    count++;\n  \
    \              }\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164150
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  return reduce!((a, b) => a+b)(filter!((arr) => arr[0] + arr[1] + arr[2] % 3\
    \ == 0)(cartesianProduct!(iota(1L, n), iota(1L, n), iota(1L, n))));\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7kkttvmu.d(20): Error: template instance `reduce!((a, b) => a +
    b)` template `reduce` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7kkttvmu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164150
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  return (n - 2) * (n - 1) / 2;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpxtluja0h.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d3d]

    ??:? void tmpxtluja0h.__unittest_L22_C1() [0x427a48]

    ??:? void tmpxtluja0h.__modtest() [0x427ac0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba63]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a8f6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fa89]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff38]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa15]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8cd]

    ??:? runModuleUnitTests [0x42b839]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42818c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164150
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long div = n / 3;\n    long count = 0;\n    for (long i = 1; i <= div; i++)\n\
    \    {\n        for (long j = i; j <= n; j++)\n        {\n            long k =\
    \ n - i - j;\n            if (k > j)\n            {\n                // std.stdio.writeln(i,\"\
    \ \",j,\" \",k);\n                count++;\n            }\n        }\n    }\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n\
    \    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpoehdo_xc.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d95]

    ??:? void tmpoehdo_xc.__unittest_L36_C1() [0x427ac1]

    ??:? void tmpoehdo_xc.__modtest() [0x427b18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42babb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a94e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fae1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff90]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa6d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a925]

    ??:? runModuleUnitTests [0x42b891]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164150
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long i = 0;\n    long j = 0;\n    long k = 0;\n    long count = 0;\n    for\
    \ (i = 1; i < n; i++) \n    {\n        for (j = i + 1; j < n; j++) \n        {\n\
    \            for (k = j + 1; k < n; k++) \n            {\n                if ((((i\
    \ * i) - i + 1) + ((j * j) - j + 1) + ((k * k) - k + 1)) % 3 == 0) \n        \
    \        {\n                    count++;\n                }\n            }\n \
    \       }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpidwtzoqi.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x427de5]

    ??:? void tmpidwtzoqi.__unittest_L39_C1() [0x427b0d]

    ??:? void tmpidwtzoqi.__modtest() [0x427b64]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a99e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fabd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]

    ??:? runModuleUnitTests [0x42b8e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428234]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164151
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    int[long] array = new int[n];\n    int i;\n    foreach(i;\
    \ 0 .. n)\n    {\n        array[i] = i * i - i + 1;\n    }\n    foreach(int i;\
    \ 0 .. n - 2)\n    {\n        foreach(int j; i + 1 .. n - 1)\n        {\n    \
    \        foreach(int k; j + 1 .. n)\n            {\n                //std.stdio.writeln(array[i],\
    \ array[j], array[k]);\n                if((array[i] + array[j] + array[k]) %\
    \ 3 == 0)\n                {\n                    result++;\n                }\n\
    \            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsvk4k69e.d(21): Error: cannot implicitly convert expression `new
    int[](cast(ulong)n)` of type `int[]` to `int[long]`

    /tmp/tmpsvk4k69e.d(23): Error: variable `i` is shadowing variable `tmpsvk4k69e.get_max_triples.i`

    /tmp/tmpsvk4k69e.d(25): Error: cannot implicitly convert expression `i * i - i
    + 1L` of type `long` to `int`

    /tmp/tmpsvk4k69e.d(27): Error: cannot implicitly convert expression `n - 2L` of
    type `long` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsvk4k69e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164150
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] l = new long[n];\n    long sum = 0L;\n    foreach(i; 0 .. n)\n    {\n\
    \        l[i] = i * i - i + 1;\n    }\n    foreach(i; 0 .. n)\n    {\n       \
    \ foreach(j; i + 1 .. n)\n        {\n            foreach(k; j + 1 .. n)\n    \
    \        {\n                if((l[i] + l[j] + l[k]) % 3 == 0)\n              \
    \  {\n                    sum++;\n                }\n            }\n        }\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpe7mx2w21.d(45): unittest failure

    ----------------

    ??:? _d_unittestp [0x428175]

    ??:? void tmpe7mx2w21.__unittest_L41_C1() [0x427e80]

    ??:? void tmpe7mx2w21.__modtest() [0x427ef8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c173]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b006]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430291]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430740]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43021d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afdd]

    ??:? runModuleUnitTests [0x42bf49]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428638]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164150
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    for (size_t i = 0; i < n - 2; i++) \n    {\n        for\
    \ (size_t j = i + 1; j < n - 1; j++) \n        {\n            for (size_t k =\
    \ j + 1; k < n; k++) \n            {\n                if ((i + 1) * (i + 1) -\
    \ (i + 1) + 1 + (j + 1) * (j + 1) - (j + 1) + 1 + (k + 1) * (k + 1) - (k + 1)\
    \ + 1) % 3 == 0) \n                {\n                    result++;\n        \
    \        }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0pphpb8l.d(27): Error: found `%` instead of statement

    /tmp/tmp0pphpb8l.d(34): Error: declaration expected, not `return`

    /tmp/tmp0pphpb8l.d(35): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0pphpb8l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164150
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[to!long(n)];\n    long triple_count = 0;\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n   \
    \ for (int i = 0; i < a.length; i++)\n    {\n        for (int j = i + 1; j < a.length;\
    \ j++)\n        {\n            for (int k = j + 1; k < a.length; k++)\n      \
    \      {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n               \
    \ {\n                    triple_count++;\n                }\n            }\n \
    \       }\n    }\n    return triple_count;\n}\nunittest\n{\n    alias candidate\
    \ = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxzqkxiez.d(20): Error: template instance `to!long` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxzqkxiez.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164150
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    for (long i = 0; i < n - 2; i++)\n    {\n        for\
    \ (long j = i + 1; j < n - 1; j++)\n        {\n            for (long k = j + 1;\
    \ k < n; k++)\n            {\n                long value = 1 + i * i - i + 3 +\
    \ j * j - j + 7 + k * k - k;\n                if (value % 3 == 0)\n          \
    \      {\n                    result++;\n                }\n            }\n  \
    \      }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp1x3gsh93.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ddd]

    ??:? void tmp1x3gsh93.__unittest_L37_C1() [0x427ae8]

    ??:? void tmp1x3gsh93.__modtest() [0x427b60]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb03]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a996]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb29]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fab5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]

    ??:? runModuleUnitTests [0x42b8d9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42822c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164151
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  // My old solution\n    /*\n    n = n.minOf(min(n.divOf(3), n.divOf(2)));\n\
    \    bool[] a = bool[n];\n    foreach(i; 0..n)\n        a[i] = false;\n    foreach(i;\
    \ 0..n)\n        foreach(j; i+1..n)\n            if (((i+1) * (i+1) - (i+1) +\
    \ 1) + ((j+1) * (j+1) - (j+1) + 1) + ((j+1) * (j+1) - (j+1) + 1) % 3 == 0)\n \
    \               a[i] = true;\n    return a.countOf(true);\n    */\n    /*\n  \
    \      My solution\n        a[i] = i*i - i + 1\n        a[j] = j*j - j + 1\n \
    \       a[k] = k*k - k + 1\n        i < j < k\n        a[i] + a[j] + a[k] = 3\
    \ * i*i + 3 * j*j + 3 * k*k - (i + j + k) * 3 + 3\n        i + j + k = n.\n  \
    \      n = n.minOf(min(n.divOf(3), n.divOf(2)));\n        i + j + k = n;\n   \
    \     i + j = n - k\n        0 \u2264 i \u2264 j \u2264 k \u2264 n\n        k\
    \ = n - (i + j)\n        we can see that it is possible to get all the pairs (i,\
    \ j) such that i + j = n - k.\n        This is a classical programming problem.\n\
    \        Let's represent the pairs (i, j) as a map.\n        We will solve this\
    \ problem in 2 steps.\n        1) We find all possible pairs (i, j).\n       \
    \ 2) We find the possible values of k.\n        We find the possible values of\
    \ k if for some pair (i, j) we have (i, j, k) a triple that satisfies the problem.\n\
    \    */\n    n = n.minOf(min(n.divOf(3), n.div\nunittest\n{\n    alias candidate\
    \ = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_jpkhfpv.d(54): Error: found `unittest` when expecting `,`

    /tmp/tmp_jpkhfpv.d(63): Error: found `void` when expecting `,`

    /tmp/tmp_jpkhfpv.d(63): Error: found `{` when expecting `,`

    /tmp/tmp_jpkhfpv.d(63): Error: expression expected, not `}`

    /tmp/tmp_jpkhfpv.d(63): Error: found `End of File` when expecting `,`

    /tmp/tmp_jpkhfpv.d(63): Error: found `End of File` when expecting `)`

    /tmp/tmp_jpkhfpv.d(63): Error: found `End of File` when expecting `,`

    /tmp/tmp_jpkhfpv.d(63): Error: found `End of File` when expecting `)`

    /tmp/tmp_jpkhfpv.d(63): Error: found `End of File` when expecting `;` following
    statement

    /tmp/tmp_jpkhfpv.d(63): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_jpkhfpv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164150
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{ \n \
    \   long count = 0;\n    long max_i = n / 3 + (n % 3 == 0 ? 0 : 1);\n    foreach(i;\
    \ 1 .. max_i) {\n        long i_sq = i * i;\n        long j_val = i_sq + i;\n\
    \        long j_max = n - j_val;\n        long j_sq = (j_max * j_max + j_max)\
    \ / 2;\n        long j_max_plus = j_sq - j_val + 1;\n        long max_k = (j_max_plus\
    \ + j_val) / 3 + (j_max_plus + j_val) % 3 == 0 ? 0 : 1;\n        count += j_max\
    \ - max_k + 1;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpenry_iih.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dfd]

    ??:? void tmpenry_iih.__unittest_L33_C1() [0x427b08]

    ??:? void tmpenry_iih.__modtest() [0x427b80]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb23]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9b6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb49]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42fff8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fad5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a98d]

    ??:? runModuleUnitTests [0x42b8f9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42824c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164150
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{ \n \
    \   long count = 0;\n    foreach(i; 1 .. n)\n    {\n        foreach(j; i + 1 ..\
    \ n)\n        {\n            foreach(k; j + 1 .. n)\n            {\n         \
    \       if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) \n     \
    \           {\n                    ++count;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy64ig6qk.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dfd]

    ??:? void tmpy64ig6qk.__unittest_L36_C1() [0x427b29]

    ??:? void tmpy64ig6qk.__modtest() [0x427b80]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb23]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9b6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb49]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42fff8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fad5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a98d]

    ??:? runModuleUnitTests [0x42b8f9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42824c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164150
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  size_t count = 0;\n    Tuple!(int, int, int)[n][n][n] triples;\n    for (size_t\
    \ i = 0; i < n; i++)\n    {\n        for (size_t j = i + 1; j < n; j++)\n    \
    \    {\n            for (size_t k = j + 1; k < n; k++)\n            {\n      \
    \          triples[i][j][k] = tuple(i * i - i + 1, j * j - j + 1, k * k - k +\
    \ 1);\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3\
    \ == 0) count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm9k4ur6x.d(21): Error: variable `n` cannot be read at compile time

    /tmp/tmpm9k4ur6x.d(21): Error: variable `n` cannot be read at compile time

    /tmp/tmpm9k4ur6x.d(21): Error: variable `n` cannot be read at compile time

    /tmp/tmpm9k4ur6x.d(21): Error: variable `n` cannot be read at compile time

    /tmp/tmpm9k4ur6x.d(21): Error: variable `n` cannot be read at compile time

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm9k4ur6x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164150
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long numTriples = 0;\n    long[] a;\n    bool isMultipleOf3 = false;\n    //create\
    \ an integer array a of length n.\n    //For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n    a = new long[n];\n    foreach(i; 0..n)\n\
    \    {\n        a[i] = i * i - i + 1;\n    }\n    //check for triples\n    foreach(i;\
    \ 0..n)\n    {\n        foreach(j; i+1..n)\n        {\n            foreach(k;\
    \ j+1..n)\n            {\n                isMultipleOf3 = ((a[i] + a[j] + a[k])\
    \ % 3) == 0;\n                if(isMultipleOf3)\n                {\n         \
    \           numTriples++;\n                }\n            }\n        }\n    }\n\
    \    return numTriples;\n}\n/*\n    tested with the following\n    assert(get_max_triples(5L)\
    \ == 1L);\n    assert(get_max_triples(10L) == 11L);\n    assert(get_max_triples(15L)\
    \ == 51L);\n    assert(get_max_triples(20L) == 121L);\n    assert(get_max_triples(50L)\
    \ == 2099L);\n    assert(get_max_triples(100L) == 6501L);\n    assert(get_max_triples(500L)\
    \ == 243401L);\n    assert(get_max_triples(1000L) == 564470L);\n    assert(get_max_triples(2000L)\
    \ == 2277404L);\n    assert(get_max_triples(5000L) == 21392563L);\n    assert(get_max_triples(10000L)\
    \ == 158418343L);\n    assert(get_max_triples(20000L) == 137372363L);\n    assert(get_max_triples(30000L)\
    \ == 113090920L);\n    assert(get_max_triples(40000L) == 97767\nunittest\n{\n\
    \    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpczbpeag8.d(47): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpczbpeag8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164150
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long triples = 0;\n    for (long i = 1; i < n; i++)\n    {\n        for (long\
    \ j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n\
    \            {\n                if ( (i * i - i + 1 + j * j - j + 1 + k * k -\
    \ k + 1) % 3 == 0)\n                {\n                    triples++;\n      \
    \          }\n            }\n        }\n    }\n    return triples;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5fs3up02.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ddd]

    ??:? void tmp5fs3up02.__unittest_L36_C1() [0x427b05]

    ??:? void tmp5fs3up02.__modtest() [0x427b5c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb03]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a996]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb29]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fab5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]

    ??:? runModuleUnitTests [0x42b8d9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42822c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164150
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long count = 0;\n    foreach(immutable i; 1..n)\n    {\n        foreach(immutable\
    \ j; i..n)\n        {\n            foreach(immutable k; j..n)\n            {\n\
    \                if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\
    \                {\n                    ++count;\n                }\n        \
    \    }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpw68v0ynm.d(40): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e05]

    ??:? void tmpw68v0ynm.__unittest_L36_C1() [0x427b10]

    ??:? void tmpw68v0ynm.__modtest() [0x427b88]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb2b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb51]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430000]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fadd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]

    ??:? runModuleUnitTests [0x42b901]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428254]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164150
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long count = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long\
    \ sum = 0;\n    long a[n];\n    for (long i = 0; i < n; i++) {\n        a[i] =\
    \ i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++) {\n        for (long\
    \ j = i + 1; j < n; j++) {\n            for (long k = j + 1; k < n; k++) {\n \
    \               sum = a[i] + a[j] + a[k];\n                if (sum % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo3g29krd.d(25): Deprecation: instead of C-style syntax, use D-style
    syntax `long[n] a`

    /tmp/tmpo3g29krd.d(25): Error: variable `n` cannot be read at compile time

    /tmp/tmpo3g29krd.d(26): Error: variable `i` is shadowing variable `tmpo3g29krd.get_max_triples.i`

    /tmp/tmpo3g29krd.d(29): Error: variable `i` is shadowing variable `tmpo3g29krd.get_max_triples.i`

    /tmp/tmpo3g29krd.d(30): Error: variable `j` is shadowing variable `tmpo3g29krd.get_max_triples.j`

    /tmp/tmpo3g29krd.d(31): Error: variable `k` is shadowing variable `tmpo3g29krd.get_max_triples.k`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo3g29krd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164150
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] triplets = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n \
    \       triplets[i] = (i * i) - i + 1;\n    }\n    long sum;\n    long count =\
    \ 0;\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j\
    \ < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n       \
    \     {\n                sum = triplets[i] + triplets[j] + triplets[k];\n    \
    \            if (sum % 3 == 0)\n                {\n                    count++;\n\
    \                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpfuq8lm9s.d(47): unittest failure

    ----------------

    ??:? _d_unittestp [0x428135]

    ??:? void tmpfuq8lm9s.__unittest_L43_C1() [0x427e40]

    ??:? void tmpfuq8lm9s.__modtest() [0x427eb8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c133]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afc6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430251]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430700]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301dd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af9d]

    ??:? runModuleUnitTests [0x42bf09]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285f8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164151
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long count = 0;\n    for (int i = 1; i < n - 1; i++)\n    {\n        for (int\
    \ j = i + 1; j < n; j++)\n        {\n            for (int k = j + 1; k <= n; k++)\n\
    \            {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k\
    \ + 1) % 3 == 0)\n                {\n                    count++;\n          \
    \      }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164151
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  int res = 0;\n    for (int i = 0; i < n - 2; i++)\n    {\n        for (int\
    \ j = i + 1; j < n - 1; j++)\n        {\n            for (int k = j + 1; k < n;\
    \ k++)\n            {\n                long val = i * i - i + 1 + j * j - j +\
    \ 1 + k * k - k + 1;\n                if (val % 3 == 0)\n                    res++;\n\
    \            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9q3y7jto.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dc5]

    ??:? void tmp9q3y7jto.__unittest_L35_C1() [0x427ad0]

    ??:? void tmp9q3y7jto.__modtest() [0x427b48]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baeb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a97e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb11]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffc0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa9d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]

    ??:? runModuleUnitTests [0x42b8c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428214]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164151
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[cast(size_t)n];\n    foreach(i; 0..n)\n        a[i] = i\
    \ * i - i + 1;\n    \n    long total_triples = 0;\n    for(long i = 0; i < n;\
    \ i++) {\n        for(long j = i + 1; j < n; j++) {\n            for(long k =\
    \ j + 1; k < n; k++) {\n                if(a[i] + a[j] + a[k] % 3 == 0) {\n  \
    \                  total_triples++;\n                }\n            }\n      \
    \  }\n    }\n    return total_triples;\n}\nunittest\n{\n    alias candidate =\
    \ get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpx4s9njb6.d(40): unittest failure

    ----------------

    ??:? _d_unittestp [0x42813d]

    ??:? void tmpx4s9njb6.__unittest_L36_C1() [0x427e48]

    ??:? void tmpx4s9njb6.__modtest() [0x427ec0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c13b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430259]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430708]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301e5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afa5]

    ??:? runModuleUnitTests [0x42bf11]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428600]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164151
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  /*\n        n => 5\n        size(a) = 5\n        a[0] => 1\n        a[1] =>\
    \ 3\n        a[2] => 7\n        a[3] => 13\n        a[4] => 21\n        a[i] =\
    \ i*i - i + 1\n        get range => [1, 3, 7, 13, 21]\n        i, j, k => [1,\
    \ 2, 3, 4]\n        check a[i] + a[j] + a[k] is multiple of 3\n        i, j, k\
    \ => 1,2,3 => 1 + 3 + 7 = 11\n        i, j, k => 1,2,4 => 1 + 3 + 13 = 17\n  \
    \      i, j, k => 1,3,4 => 1 + 7 + 13 = 21\n        i, j, k => 2,3,4 => 3 + 7\
    \ + 13 = 23\n    */\n    long max_triples_count = 0;\n    long[] a = new long[n];\n\
    \    // range(a) => [1, 3, 7, 13, 21]\n    a[0] = 1;\n    for (long i = 1; i <\
    \ n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    // a[i] + a[j] + a[k]\n\
    \    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n;\
    \ j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n\
    \                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n     \
    \               // cout(\"a[i] + a[j] + a[k] => \", a[i], \" + \", a[j], \" +\
    \ \", a[k], \" => \", a[i] + a[j] + a[k]);\n                    max_triples_count++;\n\
    \                }\n            }\n        }\n    }\n    return max_triples_count;\n\
    }\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L)\
    \ == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n\
    \    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpld2z16to.d(66): unittest failure

    ----------------

    ??:? _d_unittestp [0x428155]

    ??:? void tmpld2z16to.__unittest_L62_C1() [0x427e60]

    ??:? void tmpld2z16to.__modtest() [0x427ed8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c153]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afe6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430271]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430720]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afbd]

    ??:? runModuleUnitTests [0x42bf29]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428618]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164151
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    foreach(int i; 2..n-1)\n    {\n        long j = i+1;\n\
    \        while(j <= n)\n        {\n            if( (i*i - i + 1 + j*j - j + 1)\
    \ % 3 == 0 )\n            {\n                long k = j+1;\n                while(k\
    \ <= n)\n                {\n                    if( (i*i - i + 1 + j*j - j + 1\
    \ + k*k - k + 1) % 3 == 0 )\n                    {\n                        result++;\n\
    \                    }\n                    k++;\n                }\n        \
    \    }\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqs4pupzf.d(21): Error: cannot implicitly convert expression `n
    - 1L` of type `long` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqs4pupzf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164150
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{ \n \
    \   long result = 0;\n    for (long i = 0; i < n; i++)\n    {\n        for (long\
    \ j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n\
    \            {\n                if (((i * i - i + 1) + (j * j - j + 1) + (k *\
    \ k - k + 1)) % 3 == 0)\n                {\n                    result++;\n  \
    \              }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpkkraa2x2.d(40): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dd5]

    ??:? void tmpkkraa2x2.__unittest_L36_C1() [0x427adc]

    ??:? void tmpkkraa2x2.__modtest() [0x427b54]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bafb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a98e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb21]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42faad]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]

    ??:? runModuleUnitTests [0x42b8d1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428224]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164151
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long a_size = n;\n    // store your result in this variable\n    long result\
    \ = 0;\n    /* ************************* */\n    // your code here\n    if (n\
    \ == 0) {return 0;}\n    auto a = array(typeof(a_size), a_size);\n    for (int\
    \ i = 0; i < n; i++) {\n        a[i] = (i+1) * (i+1) - (i+1) + 1;\n    }\n   \
    \ for (int i = 0; i < n-2; i++) {\n        for (int j = i+1; j < n-1; j++) {\n\
    \            for (int k = j+1; k < n; k++) {\n                if ((a[i] + a[j]\
    \ + a[k]) % 3 == 0) {\n                    result++;\n                }\n    \
    \        }\n        }\n    }\n    /* ************************* */\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L)\
    \ == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n\
    \    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnf6c65c6.d(26): Error: undefined identifier `array`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnf6c65c6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164150
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  // store in array\n    immutable long[] vals = new long[n];\n    long i = 0;\n\
    \    foreach(x; 0..n)\n    {\n        vals[i] = i * i - i + 1;\n        i++;\n\
    \    }\n    // we need to find all combinations for a[i] + a[j] + a[k] = 3*n\n\
    \    long count = 0;\n    foreach(x; 1..n-2)\n    {\n        foreach(y; x+1..n-1)\n\
    \        {\n            foreach(z; y+1..n)\n            {\n                if\
    \ (vals[x] + vals[y] + vals[z] == 3*n)\n                {\n                  \
    \  count++;\n                }\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n    You are given an array of integers a.\n        For each i (1 \u2264\
    \ i \u2264 n), the value of a[i] must be in the range [-1, n-i].\n        You\
    \ need to find the total number of permutations of a, satisfying the above conditions.\n\
    unittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L)\
    \ == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n\
    \    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcc9356ro.d(45): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcc9356ro.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164150
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n;\
    \ i++) \n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i <\
    \ n; i++) \n    {\n        for (long j = i + 1; j < n; j++) \n        {\n    \
    \        for (long k = j + 1; k < n; k++) \n            {\n                if\
    \ ((a[i] + a[j] + a[k]) % 3 == 0) \n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\n//\
    \ ====\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L)\
    \ == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n\
    \    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2jf2c1rg.d(46): unittest failure

    ----------------

    ??:? _d_unittestp [0x42813d]

    ??:? void tmp2jf2c1rg.__unittest_L42_C1() [0x427e44]

    ??:? void tmp2jf2c1rg.__modtest() [0x427ebc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c13b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430259]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430708]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301e5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afa5]

    ??:? runModuleUnitTests [0x42bf11]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428600]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164151
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  auto a = array!long(n).init;\n    foreach(i, ref elem; a)\n    {\n        elem\
    \ = i*i - i + 1;\n    }\n    long count = 0;\n    for(long i = 0; i < n; i++)\n\
    \    {\n        for(long j = i+1; j < n; j++)\n        {\n            for(long\
    \ k = j+1; k < n; k++)\n            {\n                if((a[i] + a[j] + a[k])\
    \ % 3 == 0)\n                {\n                    count++;\n               \
    \ }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzp2zk_p1.d(20): Error: template instance `array!long` template
    `array` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzp2zk_p1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164150
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  return n * (n - 1) * (n - 2) / 6L;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpnrbs36cw.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d45]

    ??:? void tmpnrbs36cw.__unittest_L22_C1() [0x427a4c]

    ??:? void tmpnrbs36cw.__modtest() [0x427ac4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba6b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a8fe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fa91]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff40]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa1d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8d5]

    ??:? runModuleUnitTests [0x42b841]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428194]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164151
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  int[] a = new int[n];\n    for (int i = 0; i < n; i++)\n    {\n        a[i]\
    \ = i * i - i + 1;\n    }\n    int count = 0;\n    for (int i = 0; i < n - 2;\
    \ i++)\n    {\n        for (int j = i + 1; j < n - 1; j++)\n        {\n      \
    \      for (int k = j + 1; k < n; k++)\n            {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n                {\n                    count++;\n\
    \                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp69rvm4fg.d(45): unittest failure

    ----------------

    ??:? _d_unittestp [0x428125]

    ??:? void tmp69rvm4fg.__unittest_L41_C1() [0x427e2c]

    ??:? void tmp69rvm4fg.__modtest() [0x427ea4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c0ff]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42af92]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43021d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4306cc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301a9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af69]

    ??:? runModuleUnitTests [0x42bed5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164151
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  assert(n>0, \"n must be a positive number\");\n    int sz = to!int(n);\n  \
    \  auto a = new int[sz];\n    foreach(i;0..sz)\n    {\n        a[i] = i*i - i\
    \ + 1;\n    }\n    long count = 0;\n    for(int i = 0; i < sz-2; i++)\n    {\n\
    \        for(int j = i+1; j < sz-1; j++)\n        {\n            for(int k = j+1;\
    \ k < sz; k++)\n            {\n                if((a[i] + a[j] + a[k]) % 3 ==\
    \ 0)\n                {\n                    count++;\n                }\n   \
    \         }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwyommbjz.d(21): Error: template instance `to!int` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwyommbjz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164151
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{ \n \
    \   long max_triples = 0;\n    // Type-safety is vital on this problem,\n    //\
    \ so we create a TypeTuple of the type\n    // we want to index our dynamic array\
    \ with.\n    auto index_type = TypeTuple!(size_t);\n    // dynamic arrays can\
    \ be used as a tuple,\n    // so we create one using our type tuple\n    // to\
    \ ensure index safety.\n    auto tuple = tuple(1, 3, 7, 13, 21);\n    foreach(index_1;\
    \ tuple.zip(index_type)[0 .. n])\n    {\n        foreach(index_2; tuple.zip(index_type)[index_1\
    \ .. n])\n        {\n            foreach(index_3; tuple.zip(index_type)[index_2\
    \ .. n])\n            {\n                if(\n                    (tuple[index_1]\
    \ + tuple[index_2] + tuple[index_3]) % 3 == 0\n                )\n           \
    \     {\n                    max_triples++;\n                }\n            }\n\
    \        }\n    }\n    return max_triples;\n}\nunittest\n{\n    alias candidate\
    \ = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfz_lhhl6.d(24): Error: template instance `TypeTuple!size_t` template
    `TypeTuple` is not defined

    /tmp/tmpfz_lhhl6.d(29): Error: no property `zip` for type `Tuple!(int, int, int,
    int, int)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfz_lhhl6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164151
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    if (n < 3)\n        return result;\n    assert(n > 0);\n\
    \    ulong[] a = new ulong[];\n    foreach (i; 0..n)\n        a ~= i * i - i +\
    \ 1;\n    foreach (i; 0..n)\n        foreach (j; i+1..n)\n            foreach\
    \ (k; j+1..n)\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n          \
    \          result++;\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxwhwfin5.d(24): Error: new can only create structs, dynamic arrays
    or class objects, not `ulong[]`''s

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxwhwfin5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164151
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  // Implicitly assume the entire array is filled with 0's, which means there\
    \ are no triples.\n    // Count the number of triples that would be present with\
    \ an array of length n.\n    // How to increase the number of valid triples ?\n\
    \    // With each index, increase their value by 1 until it would be non-zero\
    \ if the sum is divisible by 3.\n    long num_triples = 0L;\n    bool triple_possible\
    \ = false;\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L)\
    \ == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n\
    \    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp79vc1cle.d(26): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp79vc1cle.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164150
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long res = 0;\n    for (long i = 1; i < n - 1; i++)\n    {\n        for (long\
    \ j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k <= n;\
    \ k++)\n            {\n                if ((i * i - i + 1 + j * j - j + 1 + k\
    \ * k - k + 1) % 3 == 0)\n                {\n                    res++;\n    \
    \            }\n            }\n        }\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164151
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long cnt = 0;\n    for (long i = 1; i < n - 1; i++)\n    {\n        for (long\
    \ j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k <= n;\
    \ k++)\n            {\n                if ((i * i - i + 1 + j * j - j + 1 + k\
    \ * k - k + 1) % 3 == 0)\n                {\n                    cnt++;\n    \
    \            }\n            }\n        }\n    }\n    return cnt;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164151
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  auto a = new int[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n\
    \    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n\
    \    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long\
    \ k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0)\n                {\n                    count++;\n               \
    \ }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd33kpj3o.d(24): Error: cannot implicitly convert expression `i
    * i - i + 1L` of type `long` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd33kpj3o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164151
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  // Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n\
    \    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Also, create a range\
    \ array a with the given conditions.\n    auto a = iota(1L, n).map!((x) => x *\
    \ x - x + 1L);\n    // Find the combinations that can be multiple of 3\n    //\
    \ The combinations are (3 numbers) with the condition: (i < j < k)\n    auto combinations\
    \ = iota(0L, n - 3L).cartesianProduct(iota(1L, n - 2L)).cartesianProduct(iota(2L,\
    \ n - 1L))\n        .filter!((x) => (a[x[0][0]] + a[x[0][1]] + a[x[1]]) % 3L ==\
    \ 0L);\n    // Return the length of the combinations\n    return combinations.length;\n\
    }\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L)\
    \ == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n\
    \    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnqjrbc15.d(23): Error: undefined identifier `iota`

    /tmp/tmpnqjrbc15.d(26): Error: undefined identifier `iota`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnqjrbc15.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164151
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long res = 0;\n    for (long i = 1; i < n - 1; i++)\n    {\n        for (long\
    \ j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k <= n;\
    \ k++)\n            {\n                if (((i * i - i + 1) + (j * j - j + 1)\
    \ + (k * k - k + 1)) % 3 == 0)\n                {\n                    res++;\n\
    \                }\n            }\n        }\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164151
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long result = 0;\n    for (long i = 0; i < n;\
    \ i++) \n    {\n        a[i] = i * i - i + 1;\n    }\n    /*\n        //This is\
    \ a possible solution.\n        for (long i = 0; i < n; i++) \n        {\n   \
    \         for (long j = i + 1; j < n; j++) \n            {\n                for\
    \ (long k = j + 1; k < n; k++) \n                {\n                    if ((a[i]\
    \ + a[j] + a[k]) % 3 == 0) \n                    {\n                        result++;\n\
    \                    }\n                }\n            }\n        }\n    */\n\
    \    long sum = 0;\n    for (long i = 0; i < n; i++) \n    {\n        sum += a[i];\n\
    \        if (sum % 3 == 0) \n        {\n            result += n - i - 1;\n   \
    \     }\n    }\n    for (long i = 0; i < n; i++) \n    {\n        for (long j\
    \ = i + 1; j < n; j++) \n        {\n            sum -= a[i];\n            if (sum\
    \ % 3 == 0) \n            {\n                result += n - j - 1;\n          \
    \  }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4gvlnzf0.d(68): unittest failure

    ----------------

    ??:? _d_unittestp [0x42813d]

    ??:? void tmp4gvlnzf0.__unittest_L64_C1() [0x427e48]

    ??:? void tmp4gvlnzf0.__modtest() [0x427ec0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c13b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430259]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430708]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301e5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afa5]

    ??:? runModuleUnitTests [0x42bf11]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428600]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164151
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long sum,\n        res = 0L;\n    long[] a = new long[to!long(n)];\n    for\
    \ (long i = 0L; i < n; i++)\n    {\n        a[i] = i * i - i + 1L;\n    }\n  \
    \  for (long i = 0L; i < n - 2L; i++)\n    {\n        for (long j = i + 1L; j\
    \ < n - 1L; j++)\n        {\n            for (long k = j + 1L; k < n; k++)\n \
    \           {\n                sum = a[i] + a[j] + a[k];\n                if (sum\
    \ % 3L == 0L)\n                {\n                    res++;\n               \
    \ }\n            }\n        }\n    }\n    return res;\n}\n/*\n    Tests\n*/\n\
    unittest\n{\n    import std.stdio;\n    import std.string;\n    void assert_equal(long\
    \ actual, long expected)\n    {\n        if (actual != expected)\n        {\n\
    \            writefln(\"Got %s, but expected %s\", actual, expected);\n      \
    \      assert(0);\n        }\n    }\n    void run_tests()\n    {\n        writeln(\"\
    Running tests...\");\n        writeln(\"\\n* Test 1\");\n        assert_equal(get_max_triples(5L),\
    \ 1L);\n        writeln(\"* Test 2\");\n        assert_equal(get_max_triples(2L),\
    \ 0L);\n        writeln(\"* Test 3\");\n        assert_equal(get_max_triples(10L),\
    \ 2L);\n        writeln(\"* Test 4\");\n        assert_equal(get_max_triples(7L),\
    \ 3L);\n        writeln(\"* Test 5\");\n        assert_equal(get_max_triples(50L),\
    \ 18L);\n        writeln(\"Done!\");\n    }\n    run_tests();\n}\nunittest\n{\n\
    \    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd0j4ujzl.d(22): Error: template instance `to!long` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd0j4ujzl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164151
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  /*\n        I only found one approach to solve this problem in reasonable time:\n\
    \        Instead of explicitly constructing the array a and then iterating over\n\
    \        all triples of a, we can construct and count the valid triples \n   \
    \     directly. For each valid triple (i, j, k), where i < j < k, we have\n  \
    \      the following restrictions:\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn12ujts7.d(20): Error: unterminated /* */ comment

    /tmp/tmpn12ujts7.d(35): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn12ujts7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164151
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  import std.algorithm : equal;\n    long triples = 0;\n    long[] array = new\
    \ long[n];\n    for (long i = 0; i < n; i++)\n    {\n        array[i] = i * i\
    \ - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long\
    \ j = i+1; j < n; j++)\n        {\n            for (long k = j+1; k < n; k++)\n\
    \            {\n                if ((array[i] + array[j] + array[k]) % 3 == 0)\n\
    \                {\n                    triples++;\n                }\n      \
    \      }\n        }\n    }\n    return triples;\n}\nunittest\n{\n    alias candidate\
    \ = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpxnc5b0ql.d(46): unittest failure

    ----------------

    ??:? _d_unittestp [0x42813d]

    ??:? void tmpxnc5b0ql.__unittest_L42_C1() [0x427e44]

    ??:? void tmpxnc5b0ql.__modtest() [0x427ebc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c13b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430259]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430708]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301e5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afa5]

    ??:? runModuleUnitTests [0x42bf11]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428600]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164151
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  // your code here\n    long cnt = 0;\n    for(long i = 1; i < n; i++)\n   \
    \ {\n        for(long j = i + 1; j < n; j++)\n        {\n            for(long\
    \ k = j + 1; k < n; k++)\n            {\n                if((i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0)\n                {\n                \
    \    cnt++;\n                }\n            }\n        }\n    }\n    return cnt;\n\
    }\n/*\n    You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2clg_fa2.d(37): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2clg_fa2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164151
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  /*\n        Sample Test Cases\n        >>> get_max_triples(0L)\n        0L\n\
    \        >>> get_max_triples(1L)\n        0L\n        >>> get_max_triples(2L)\n\
    \        0L\n        >>> get_max_triples(3L)\n        0L\n        >>> get_max_triples(4L)\n\
    \        0L\n        >>> get_max_triples(5L)\n        1L\n        >>> get_max_triples(6L)\n\
    \        0L\n        >>> get_max_triples(7L)\n        1L\n        >>> get_max_triples(8L)\n\
    \        0L\n        >>> get_max_triples(9L)\n        0L\n        >>> get_max_triples(10L)\n\
    \        0L\n        >>> get_max_triples(11L)\n        1L\n        >>> get_max_triples(12L)\n\
    \        0L\n        >>> get_max_triples(13L)\n        1L\n        >>> get_max_triples(14L)\n\
    \        0L\n        >>> get_max_triples(15L)\n        0L\n        >>> get_max_triples(16L)\n\
    \        0L\n        >>> get_max_triples(17L)\n        1L\n        >>> get_max_triples(18L)\n\
    \        0L\n        >>> get_max_triples(19L)\n        1L\n        >>> get_max_triples(20L)\n\
    \        0L\n        >>> get_max_triples(21L)\n        1L\n        >>> get_max_triples(22L)\n\
    \        0L\n        >>> get_max_triples(23L)\n        0L\n        >>> get_max_triples(24L)\n\
    \        0L\n        >>> get_max_triples(25L)\n        1L\n        >>> get_max_triples(26L)\n\
    \        0L\n        >>> get_max_triples(27L)\n        1L\n        >>> get_max_triples(28L)\n\
    \        0L\n        >>> get_max_triples\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe5r3hbes.d(20): Error: unterminated /* */ comment

    /tmp/tmpe5r3hbes.d(90): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe5r3hbes.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164151
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[] a = new long[n];\n    // int a_size = a.length;\n\
    \    for (int i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n\
    \    foreach (i; 0 .. n)\n    {\n        foreach (j; 0 .. n)\n        {\n    \
    \        foreach (k; 0 .. n)\n            {\n                if (i < j && j <\
    \ k && ((a[i] + a[j] + a[k]) % 3 == 0))\n                {\n                 \
    \   result++;\n                }\n            }\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L)\
    \ == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n\
    \    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpzncwdgbe.d(46): unittest failure

    ----------------

    ??:? _d_unittestp [0x428185]

    ??:? void tmpzncwdgbe.__unittest_L42_C1() [0x427e8c]

    ??:? void tmpzncwdgbe.__modtest() [0x427f04]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c183]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b016]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302a1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430750]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43022d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afed]

    ??:? runModuleUnitTests [0x42bf59]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428648]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164151
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  // A tuple(long, long, long) is a struct with 3 long fields.\n    auto  result\
    \ = tuple(0L, 0L, 0L); //  number of triples, a[i], a[j]\n    auto  sum; \n  \
    \  foreach(i; 1..n)\n    {\n        result[1] = i * i - i + 1;\n        foreach(j;\
    \ i+1..n)\n        {\n            result[2] = j * j - j + 1;\n            sum\
    \ = result[1] + result[2]; \n            foreach(k; j+1..n)\n            {\n \
    \               if((sum + (k * k - k + 1)) % 3 == 0) result[0]++;\n          \
    \  }\n        }\n    }\n    return result[0];\n}\nunittest\n{\n    alias candidate\
    \ = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdej50747.d(22): Error: no identifier for declarator `sum`

    /tmp/tmpdej50747.d(22): Deprecation: use `{ }` for an empty statement, not `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdej50747.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164151
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    foreach(i, ref elem; a)\n    {\n        elem =\
    \ i * i - i + 1;\n    }\n    long count = 0;\n    foreach(i, ref a_i; a)\n   \
    \ {\n        if(i + 1 >= n)\n            break;\n        foreach(j, ref a_j; a[i\
    \ + 1 .. $])\n        {\n            if(j + 1 >= n)\n                break;\n\
    \            foreach(k, ref a_k; a[j + 1 .. $])\n            {\n             \
    \   if(a_i + a_j + a_k % 3 == 0)\n                    count++;\n            }\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp0yx08mg4.d(47): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281bd]

    ??:? void tmp0yx08mg4.__unittest_L43_C1() [0x427ec8]

    ??:? void tmp0yx08mg4.__modtest() [0x427f40]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c1bb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b04e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302d9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430788]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430265]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b025]

    ??:? runModuleUnitTests [0x42bf91]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428680]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164151
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  int result = 0;\n    int [] a = new int[(cast(int)n)];\n    foreach(index,\
    \ val; a)\n    {\n        a[index] = index * index - index + 1;\n    }\n    //writeln(a);\n\
    \    foreach(i; 0 .. n)\n    {\n        foreach(j; i + 1 .. n)\n        {\n  \
    \          foreach(k; j + 1 .. n)\n            {\n                if(a[i] + a[j]\
    \ + a[k] % 3 == 0)\n                {\n                    result += 1;\n    \
    \            }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0btjyruf.d(24): Error: cannot implicitly convert expression `index
    * index - index + 1LU` of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0btjyruf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164151
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  size_t len = 3;\n    bool b = (n - 3) % 2;\n    if(b)\n        len += 1;\n\
    \    uint len_8 = len / 8;\n    if(len % 8)\n        len_8 += 1;\n    bool[] bytemask\
    \ = new bool[len_8];\n    bytemask[0] = true;\n    bytemask[1] = true;\n    if(b)\n\
    \        bytemask[2] = true;\n    bytemask[len_8 - 1] = true;\n    long x = 1;\n\
    \    long y = n - 2;\n    long sum = 3;\n    long triples = (n * (n - 1) * (n\
    \ - 2)) / 6;\n    while(x < y)\n    {\n        if(sum % 3 == 0)\n        {\n \
    \           triples -= ((y - x) * (y - x - 1)) / 2;\n            if(b)\n     \
    \           triples -= (y - x);\n        }\n        sum -= x;\n        sum +=\
    \ y;\n        x++;\n        y--;\n    }\n    return triples;\n}\nunittest\n{\n\
    \    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb7__ipzn.d(21): Error: cannot implicitly convert expression `(n
    - 3L) % 2L` of type `long` to `bool`

    /tmp/tmpb7__ipzn.d(24): Error: cannot implicitly convert expression `len / 8LU`
    of type `ulong` to `uint`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb7__ipzn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164151
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  /*\n        i * i + i * i - i + 1 + i * i + i * i - i + 1\n        = 2 * i\
    \ * i + 2 * i - 2 + 1\n        = 2 * i * i + 2 * i - 1\n        = 2 * i * (i +\
    \ 1) - 1\n        = 2 * i * (i + 1) - 1\n    */\n    long nn = (n + 1) * (n +\
    \ 1);\n    //printf(\"%s, %d, %s, %ld\\n\", __func__, __LINE__, \"nn\", nn);\n\
    \    if(nn % 3 == 0){\n        return n;\n    }\n    return n - 1;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp71qeafxg.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d4d]

    ??:? void tmp71qeafxg.__unittest_L34_C1() [0x427a54]

    ??:? void tmp71qeafxg.__modtest() [0x427acc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba73]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a906]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fa99]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff48]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa25]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8dd]

    ??:? runModuleUnitTests [0x42b849]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42819c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164151
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    static int i = 1;\n    static int j = 2;\n    static\
    \ int k = 3;\n    static int[] a = new int[n];\n    //fill array with elements\n\
    \    while(i < n)\n    {\n        a[i] = (i * i) - i + 1;\n        i++;\n    }\n\
    \    //looks for triples\n    while(j < n)\n    {\n        while(k < n)\n    \
    \    {\n            if((a[i] + a[j] + a[k]) % 3 == 0)\n            {\n       \
    \         result++;\n            }\n            k++;\n        }\n        j++;\n\
    \    }\n    return result;\n}\n//to test\nmain(string[] args) \n{\n    long n\
    \ = 5L;\n    writefln(\"n: %s\", n);\n    writeln(\"result: \", get_max_triples(n));\n\
    }\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L)\
    \ == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n\
    \    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplay5varo.d(47): Error: function declaration without return type.
    (Note that constructors are always named `this`)

    /tmp/tmplay5varo.d(48): Error: no identifier for declarator `main(string[] args)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplay5varo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164151
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long count = 0;\n    for (long i = 0; i < n - 2; i++)\n    {\n        for (long\
    \ j = i + 1; j < n - 1; j++)\n        {\n            for (long k = j + 1; k <\
    \ n; k++)\n            {\n                if ((i * i - i + 1 + j * j - j + 1 +\
    \ k * k - k + 1) % 3 == 0)\n                {\n                    count++;\n\
    \                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp50fqxikx.d(40): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ddd]

    ??:? void tmp50fqxikx.__unittest_L36_C1() [0x427ae4]

    ??:? void tmp50fqxikx.__modtest() [0x427b5c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb03]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a996]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb29]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fab5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]

    ??:? runModuleUnitTests [0x42b8d9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42822c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164151
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  if (n < 3) \n        return 0;\n    \n    /*\n        a[i] = i*i - i + 1\n\
    \        a[i] % 3 == 0 iff n = 3*k iff (i*i - i + 1) % 3 == 0 iff i*i % 3 == 1\
    \ iff i*i % 3 == 2 iff i = 3*k+1 or i = 3*k+2\n    */\n    long total = (n - 1)\
    \ / 3 * 2;\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L)\
    \ == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n\
    \    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoz2x3mv6.d(28): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoz2x3mv6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164151
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long ret = 0L;\n    return ret;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpe_28c6zo.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d25]

    ??:? void tmpe_28c6zo.__unittest_L23_C1() [0x427a2c]

    ??:? void tmpe_28c6zo.__modtest() [0x427aa4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba4b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a8de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fa71]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff20]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42f9fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]

    ??:? runModuleUnitTests [0x42b821]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428174]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164151
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long a = 0L;\n    foreach(immutable i; 0 .. n)\n    {\n        foreach(immutable\
    \ j; i+1 .. n)\n        {\n            foreach(immutable k; j+1 .. n)\n      \
    \      {\n                if(((i+1)*(i+1)-(i+1)+1 + (j+1)*(j+1)-(j+1)+1 + (k+1)*(k+1)-(k+1)+1)\
    \ % 3 == 0)\n                {\n                    ++a;\n                }\n\
    \            }\n        }\n    }\n    return a;\n}\nunittest\n{\n    alias candidate\
    \ = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164151
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[long] a = new long[long];\n    long counter = 0;\n    // populate the\
    \ array\n    foreach(i; 0 .. n)\n    {\n        a[i] = (i + 1) * (i + 1) - (i\
    \ + 1) + 1;\n    }\n    // do the magic\n    foreach(i; 0 .. n)\n    {\n     \
    \   foreach(j; i + 1 .. n)\n        {\n            foreach(k; j + 1 .. n)\n  \
    \          {\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n            \
    \    {\n                    counter++;\n                }\n            }\n   \
    \     }\n    }\n    return counter;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppxj3hlqv.d(20): Error: need size of rightmost array, not type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppxj3hlqv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164151
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  assert(n > 0L);\n    n = n / 3L;\n    return n * (n + 1L) / 2L;\n}\n/*\n  \
    \  We have a sequence of integer numbers a1, a2, ..., an.\n        We consider\
    \ a triple of indexes (i, j, k) valid if 1 \u2264 i < j < k \u2264 n and ai <\
    \ aj < ak.\n        Your task is to calculate the number of valid triples.\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbna637ja.d(24): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbna637ja.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164151
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long res = 0;\n    for (long i = 1; i < n - 1; i++)\n    {\n        for (long\
    \ j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k <= n;\
    \ k++)\n            {\n                if ((i * i - i + 1 + j * j - j + 1 + k\
    \ * k - k + 1) % 3 == 0)\n                {\n                    res++;\n    \
    \            }\n            }\n        }\n    }\n    return res;\n}\n// Test\n\
    unittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L)\
    \ == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n\
    \    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164151
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[cast(size_t)n];\n    long triple = 0;\n    long sum = 0;\n\
    \    auto s = new SumType!(long, const(char)[])(\"sum\", \"num\");\n    for (int\
    \ i = 0; i < n; i++)\n    {\n        a[i] = (i + 1) * (i + 1) - (i + 1) + 1;\n\
    \        sum = a[i] + sum;\n        if (sum % 3 == 0)\n        {\n           \
    \ s.init!(long)(sum);\n            //writeln(s.sum);\n            triple++;\n\
    \        }\n    }\n    return triple;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzxly9hin.d(23): Error: template instance `SumType!(long, const(char)[])`
    template `SumType` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzxly9hin.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164151
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  auto a = new int[](n);\n    long res = 0;\n    foreach(i; 0..n)\n    {\n  \
    \      a[i] = i * i - i + 1;\n    }\n    foreach(i; 0..n-2)\n    {\n        foreach(j;\
    \ i+1..n-1)\n        {\n            foreach(k; j+1..n)\n            {\n      \
    \          if((a[i] + a[j] + a[k]) % 3 == 0) res++;\n            }\n        }\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl52a1nor.d(24): Error: cannot implicitly convert expression `i
    * i - i + 1L` of type `long` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl52a1nor.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164151
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  if (n<3)\n        return 0;\n    long ret=0;\n    size_t i,j,k;\n    int a[n];\n\
    \    foreach(i,a)\n        a[i]=i*i-i+1;\n    foreach(i,a)\n        foreach(j,i+1,a)\n\
    \            foreach(k,j+1,a)\n                if((a[i]+a[j]+a[k])%3==0)\n   \
    \                 ret++;\n    return ret;\n}\nunittest\n{\n    alias candidate\
    \ = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp86t_n9z9.d(24): Deprecation: instead of C-style syntax, use D-style
    syntax `int[n] a`

    /tmp/tmp86t_n9z9.d(25): Error: no identifier for declarator `a`

    /tmp/tmp86t_n9z9.d(25): Error: found `)` when expecting `;`

    /tmp/tmp86t_n9z9.d(26): Error: found `;` when expecting `)`

    /tmp/tmp86t_n9z9.d(27): Error: no identifier for declarator `a`

    /tmp/tmp86t_n9z9.d(27): Error: found `)` when expecting `;`

    /tmp/tmp86t_n9z9.d(28): Error: expression expected, not `foreach`

    /tmp/tmp86t_n9z9.d(29): Error: found `foreach` when expecting `)`

    /tmp/tmp86t_n9z9.d(30): Error: found `if` when expecting `;` following statement

    /tmp/tmp86t_n9z9.d(31): Error: found `ret` when expecting `;` following statement

    /tmp/tmp86t_n9z9.d(31): Error: expression expected, not `;`

    /tmp/tmp86t_n9z9.d(32): Error: found `return` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp86t_n9z9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164151
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long res = 0;\n    long t1 = 0;\n    long t2 = 0;\n    long t3 = 0;\n    long\
    \ t = 0;\n    t = 3;\n    long j = 2;\n    long k = 3;\n    while(t < n)\n   \
    \ {\n        t1 = t2 = t3 = t;\n        res += (n - 1 - t) * (n - 2 - t) / 2;\n\
    \        while(t3 < n)\n        {\n            t3 += (j * j - j + 1);\n      \
    \      ++j;\n        }\n        while(t2 < n)\n        {\n            t2 += (k\
    \ * k - k + 1);\n            ++k;\n        }\n        res -= (j - 2) * (k - 3);\n\
    \        t += (t * t - t + 1);\n    }\n    return res;\n}\nunittest\n{\n    alias\
    \ candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpxag24zjm.d(51): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e15]

    ??:? void tmpxag24zjm.__unittest_L47_C1() [0x427b20]

    ??:? void tmpxag24zjm.__modtest() [0x427b98]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb3b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb61]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430010]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42faed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9a5]

    ??:? runModuleUnitTests [0x42b911]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428264]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164151
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long res=0;\n    foreach(immutable i;0..n-2)\n    {\n        long ai=i*i-i+1;\n\
    \        foreach(immutable j;i+1..n-1)\n        {\n            long aj=j*j-j+1;\n\
    \            foreach(immutable k;j+1..n)\n            {\n                long\
    \ ak=k*k-k+1;\n                if((ai+aj+ak)%3==0)\n                {\n      \
    \              res++;\n                }\n            }\n        }\n    }\n  \
    \  return res;\n}\n/*\n    Instead of using three loops in your solution, use\
    \ 2 loops, \n    and make them only go over the values they have to go over. \n\
    \    For instance:\n*/\nlong get_max_triples_2(long n) \n{\n    long res=0;\n\
    \    foreach(immutable i;0..n-2)\n    {\n        long ai=i*i-i+1;\n        foreach(immutable\
    \ j;i+1..n-1)\n        {\n            long aj=j*j-j+1;\n            if((ai+aj)%3==0)\n\
    \            {\n                res+=n-j-1;\n            }\n        }\n    }\n\
    \    return res;\n}\n/*\n    The array a can be calculated in a couple of milliseconds.\
    \ \n    Generating the array is not a bottleneck. \n    The triple loops are.\
    \ Instead of using three loops in your solution, \n    use 2 loops, and make them\
    \ only go over the values they have to go over. \n    For instance:\n*/\nlong\
    \ get_max_triples_3(long n) \n{\n    long res=0;\n    foreach(immutable i;0..n-2)\n\
    \    {\n        long ai=i*i-i+1;\n        foreach(immutable j;i+1..n-1)\n    \
    \    {\n            long aj=j*j-j+1;\n            if((ai+aj)%3==0)\n         \
    \   {\n                res+=n-j-1;\n\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd1euoy_8.d(81): Error: found `unittest` instead of statement

    /tmp/tmpd1euoy_8.d(90): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpd1euoy_8.d(90): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpd1euoy_8.d(90): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd1euoy_8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164151
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long sum = 0;\n    Tuple!(long,long,long)[] triples = [];\n    long t = 1;\n\
    \    for(long i = 1; i < n; i++)\n    {\n        for(long j = i+1; j < n; j++)\n\
    \        {\n            if(j - i > 1)\n            {\n                long a =\
    \ i * i - i + 1;\n                long b = j * j - j + 1;\n                long\
    \ c = (j-i) * (j-i) - (j-i) + 1;\n                if((a + b + c) % 3 == 0)\n \
    \               {\n                    triples ~= tuple(a,b,c);\n            \
    \        sum++;\n                }\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L)\
    \ == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n\
    \    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmphklktnn7.d(47): unittest failure

    ----------------

    ??:? _d_unittestp [0x42971d]

    ??:? void tmphklktnn7.__unittest_L42_C1() [0x4281bd]

    ??:? void tmphklktnn7.__modtest() [0x42866c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42e897]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x4293fa]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42b941]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42b9d0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42b8cd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4293d1]

    ??:? runModuleUnitTests [0x42e66d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429b6c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164151
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long count = 0;\n    for (long i = 1; i < n - 1; i++)\n    {\n        auto\
    \ a = i * i - i + 1;\n        for (long j = i + 1; j < n; j++)\n        {\n  \
    \          auto b = j * j - j + 1;\n            for (long k = j + 1; k <= n; k++)\n\
    \            {\n                auto c = k * k - k + 1;\n                if ((a\
    \ + b + c) % 3 == 0)\n                {\n                    count++;\n      \
    \          }\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164151
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  //  The sum of three consecutive numbers divisible by 3\n    //  => sum of\
    \ the triple = n + n+1 + n+2 = 3n + 3\n    //\n    //  First number in the triple:\
    \ \n    //      n <= a[n] <= 3n - 3\n    //\n    //  Second number in the triple:\n\
    \    //      n + 1 <= a[n+1] <= 3n - 2\n    // \n    //  Third number in the triple:\n\
    \    //      n + 2 <= a[n+2] <= 3n - 1\n    //\n    long sum = 0;\n    long val\
    \ = 0;\n    long [long] map;\n    foreach(i; 1 .. n + 2)\n    {\n        val =\
    \ i * i - i + 1;\n        if(i <= 3)\n        {\n            map[val] = 1;\n \
    \       }\n        else\n        {\n            if(val > 3*(i-2))\n          \
    \  {\n                long diff = val - 3*(i-2);\n                auto key = map.keys.front;\n\
    \                map.remove(key);\n                sum += map[diff];\n       \
    \     }\n            map[val] += 1;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjh1kpscj.d(47): Error: no property `front` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjh1kpscj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164151
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    foreach(i; 0..n)\n        a[i] = i * i - i + 1;\n\
    \    \n    int count = 0;\n    for(int i = 0; i < n - 2; i++)\n        for(int\
    \ j = i + 1; j < n - 1; j++)\n            for(int k = j + 1; k < n; k++)\n   \
    \             if((a[i] + a[j] + a[k]) % 3 == 0)\n                    count++;\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n\
    \    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprq26xp9i.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x42813d]

    ??:? void tmprq26xp9i.__unittest_L32_C1() [0x427e48]

    ??:? void tmprq26xp9i.__modtest() [0x427ec0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c13b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430259]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430708]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301e5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afa5]

    ??:? runModuleUnitTests [0x42bf11]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428600]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164151
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  size_t[] a = new size_t[n];\n    size_t cnt = 0;\n    size_t tmp = 0;\n   \
    \ for (size_t i = 0; i < n; i++) {\n        a[i] = cast(size_t)(i * i - i + 1);\n\
    \    }\n    for (size_t i = 0; i < n - 2; i++) {\n        for (size_t j = i +\
    \ 1; j < n - 1; j++) {\n            for (size_t k = j + 1; k < n; k++) {\n   \
    \             tmp = a[i] + a[j] + a[k];\n                if (tmp % 3 == 0) {\n\
    \                    cnt++;\n                }\n            }\n        }\n   \
    \ }\n    return cast(long)cnt;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpq44dqapc.d(42): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282ed]

    ??:? void tmpq44dqapc.__unittest_L38_C1() [0x427ff4]

    ??:? void tmpq44dqapc.__modtest() [0x42806c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c24f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0e2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43036d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43081c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302f9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0b9]

    ??:? runModuleUnitTests [0x42c025]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164151
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] arr = new long[(int)n];\n    for (int i = 0; i < n; i++)\n    {\n  \
    \      arr[i] = (i * i) - i + 1;\n    }\n    long counter = 0;\n    for (int i\
    \ = 0; i < n - 2; i++)\n    {\n        for (int j = i + 1; j < n - 1; j++)\n \
    \       {\n            for (int k = j + 1; k < n; k++)\n            {\n      \
    \          if (arr[i] + arr[j] + arr[k] % 3 == 0)\n                {\n       \
    \             ++counter;\n                }\n            }\n        }\n    }\n\
    \    return counter;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj9cd63in.d(20): Error: C style cast illegal, use `cast(int)n`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj9cd63in.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164151
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  enum range = iota(n);\n    int[int] a = 0;\n    foreach(i;range) \n    {\n\
    \        a[i] = (i*i)-i+1;\n    }\n    long counter = 0;\n    foreach(i;1..n-2)\
    \ \n    {\n        foreach(j;i+1..n-1) \n        {\n            foreach(k;j+1..n)\
    \ \n            {\n                if((a[i]+a[j]+a[k])%3==0) \n              \
    \  {\n                    counter++;\n                }\n            }\n     \
    \   }\n    }\n    return counter;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzpjp_l78.d(20): Error: undefined identifier `iota`

    /tmp/tmpzpjp_l78.d(21): Error: cannot implicitly convert expression `0` of type
    `int` to `int[int]`

    /tmp/tmpzpjp_l78.d(33): Error: cannot implicitly convert expression `i` of type
    `long` to `int`

    /tmp/tmpzpjp_l78.d(33): Error: cannot implicitly convert expression `j` of type
    `long` to `int`

    /tmp/tmpzpjp_l78.d(33): Error: cannot implicitly convert expression `k` of type
    `long` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzpjp_l78.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164151
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long a[n];\n    for (long i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n\
    \    long count = 0;\n    for (long i = 0; i < n; i++)\n        for (long j =\
    \ i + 1; j < n; j++)\n            for (long k = j + 1; k < n; k++)\n         \
    \       if ((a[i] + a[j] + a[k]) % 3 == 0)\n                    count++;\n   \
    \ return count;\n}\n/*\n    You are given an integer n. Create a 2-dimensional\
    \ array a of length n consisting of n rows, \n    where the element a[i][j] equals\
    \ i * j.\n        Return the sum of all elements of the array.\nunittest\n{\n\
    \    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbcf9qd79.d(20): Deprecation: instead of C-style syntax, use D-style
    syntax `long[n] a`

    /tmp/tmpbcf9qd79.d(31): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbcf9qd79.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164151
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long half = n/2;\n    long third = n/3;\n    long quarter\
    \ = n/4;\n    foreach(i;0..half)\n    {\n        result += half - i;\n       \
    \ result += third - i;\n        result += quarter - i;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L)\
    \ == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n\
    \    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6nu_sr53.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x427db5]

    ??:? void tmp6nu_sr53.__unittest_L32_C1() [0x427ac0]

    ??:? void tmp6nu_sr53.__modtest() [0x427b38]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42badb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a96e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb01]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffb0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa8d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a945]

    ??:? runModuleUnitTests [0x42b8b1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428204]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164151
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  /*\n        max possible number of triples is\n        (n - 2)(n - 1)(n - 0)\
    \ / 6\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L)\
    \ == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n\
    \    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz9ipxu5p.d(20): Error: unterminated /* */ comment

    /tmp/tmpz9ipxu5p.d(32): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz9ipxu5p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164151
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  if (n <= 3)\n        return 0;\n    \n    long triples = 0;\n    long[] arr\
    \ = new long[cast(size_t)n];\n    for (long i = 0; i < n; i++)\n        arr[i]\
    \ = i * i - i + 1;\n    \n    for (long i = 0; i < n; i++)\n    {\n        for\
    \ (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k\
    \ < n; k++)\n            {\n                if ((arr[i] + arr[j] + arr[k]) % 3\
    \ == 0)\n                    triples++;\n            }\n        }\n    }\n   \
    \ return triples;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n\
    \    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpl0rj8yrm.d(45): unittest failure

    ----------------

    ??:? _d_unittestp [0x428145]

    ??:? void tmpl0rj8yrm.__unittest_L41_C1() [0x427e50]

    ??:? void tmpl0rj8yrm.__modtest() [0x427ec8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c143]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afd6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430261]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430710]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afad]

    ??:? runModuleUnitTests [0x42bf19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428608]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164151
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  // Write your code here\n    auto a = new int[n];\n    foreach(i, a)\n    \
    \    a[i] = i * i - i + 1;\n    long res = 0;\n    for(int i = 0; i < n - 2; i++)\n\
    \        for(int j = i + 1; j < n - 1; j++)\n            for(int k = j + 1; k\
    \ < n; k++)\n                if(a[i] + a[j] + a[k] % 3 == 0)\n               \
    \     res++;\n    return res;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc9g6_mph.d(22): Error: no identifier for declarator `a`

    /tmp/tmpc9g6_mph.d(22): Error: found `)` when expecting `;`

    /tmp/tmpc9g6_mph.d(23): Error: found `;` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc9g6_mph.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164151
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] arr = new long[n];\n    long count = 0;\n    for (long i = 0; i < n;\
    \ i++)\n    {\n        arr[i] = i * i - i + 1;\n    }\n    foreach (i; 0..n -\
    \ 3)\n    {\n        foreach (j; i + 1..n - 2)\n        {\n            foreach\
    \ (k; j + 1..n - 1)\n            {\n                if ((arr[i] + arr[j] + arr[k])\
    \ % 3 == 0)\n                {\n                    count++;\n               \
    \ }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpypp7qcqw.d(47): unittest failure

    ----------------

    ??:? _d_unittestp [0x42816d]

    ??:? void tmpypp7qcqw.__unittest_L41_C1() [0x427eba]

    ??:? void tmpypp7qcqw.__modtest() [0x427ef0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c16b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42affe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430289]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430738]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430215]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afd5]

    ??:? runModuleUnitTests [0x42bf41]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428630]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164151
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] arr = new long[(int)n];\n    foreach(index, _; arr)\n    {\n       \
    \ arr[index] = index * index - index + 1;\n    }\n    long sum, counter = 0;\n\
    \    foreach(i, _; arr)\n    {\n        foreach(j, _; arr[i+1..$])\n        {\n\
    \            foreach(k, _; arr[j+1..$])\n            {\n                sum =\
    \ arr[i] + arr[j] + arr[k];\n                if(sum % 3 == 0)\n              \
    \  {\n                    counter++;\n                }\n            }\n     \
    \   }\n    }\n    return counter;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcct9k2vk.d(20): Error: C style cast illegal, use `cast(int)n`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcct9k2vk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164151
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long ret = 0L;\n    ulong uret = 0UL;\n    ulong[] ar1;\n    int[] ar2;\n \
    \   ar1.length = ar2.length = n;\n    for (int i = 0; i < n; i++) {\n        ar1[i]\
    \ = i * i - i + 1UL;\n        ar2[i] = (int)((ar1[i] + 1UL) % 3UL);\n    }\n \
    \   /*\n        ar2: [1, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2,\
    \ 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1,\
    \ 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0,\
    \ 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2,\
    \ 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1,\
    \ 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0,\
    \ 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2,\
    \ 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplxjm65cj.d(27): Error: C style cast illegal, use `cast(int)((ar1[i]
    + 1LU) % 3LU)`

    /tmp/tmplxjm65cj.d(29): Error: unterminated /* */ comment

    /tmp/tmplxjm65cj.d(40): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplxjm65cj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164151
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long accum = 0;\n    a[0] = 1;\n    for (long\
    \ i = 1; i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    for (long i\
    \ = 0; i < n - 2; i++) {\n        for (long j = i + 1; j < n - 1; j++) {\n   \
    \         for (long k = j + 1; k < n; k++) {\n                if ((a[i] + a[j]\
    \ + a[k]) % 3 == 0) {\n                    accum++;\n                }\n     \
    \       }\n        }\n    }\n    return accum;\n}\nunittest\n{\n    alias candidate\
    \ = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3aa1t0ss.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x42815d]

    ??:? void tmp3aa1t0ss.__unittest_L37_C1() [0x427e68]

    ??:? void tmp3aa1t0ss.__modtest() [0x427ee0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c15b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afee]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430279]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430728]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430205]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afc5]

    ??:? runModuleUnitTests [0x42bf31]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428620]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164152
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  // step 1: put all of the elements in the array\n    auto a = [1L..n].map!(i\
    \ => i * i - i + 1);\n    auto result = 0L;\n    auto count = 0L;\n    auto mark\
    \ = new bool[n];\n    foreach(i; a)\n    {\n        mark[i] = false;\n    }\n\
    \    for(int i = 0; i < n - 2; i++)\n    {\n        for(int j = i + 1; j < n -\
    \ 1; j++)\n        {\n            for(int k = j + 1; k < n; k++)\n           \
    \ {\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n  \
    \                  mark[i] = true;\n                    mark[j] = true;\n    \
    \                mark[k] = true;\n                    count++;\n             \
    \   }\n            }\n        }\n    }\n    result = count;\n    return result;\n\
    }\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L)\
    \ == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n\
    \    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcpu0wjp0.d(21): Error: found `..` when expecting `,`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcpu0wjp0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164151
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    foreach(idx, ref elem; a)\n    {\n        elem\
    \ = idx * idx - idx + 1;\n    }\n    long max_triples = 0;\n    foreach(i; 0 ..\
    \ n)\n    {\n        foreach(j; i+1 .. n)\n        {\n            foreach(k; j+1\
    \ .. n)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n \
    \               {\n                    max_triples++;\n                }\n   \
    \         }\n        }\n    }\n    return max_triples;\n}\nunittest\n{\n    alias\
    \ candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpoiau_0_2.d(45): unittest failure

    ----------------

    ??:? _d_unittestp [0x428165]

    ??:? void tmpoiau_0_2.__unittest_L41_C1() [0x427e70]

    ??:? void tmpoiau_0_2.__modtest() [0x427ee8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c163]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aff6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430281]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430730]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43020d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afcd]

    ??:? runModuleUnitTests [0x42bf39]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428628]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164151
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long count = 0;\n    foreach(i, j; chain(iota(n - 2), iota(1, n - 1)))\n  \
    \  {\n        if((i * i - i + 1 + j * j - j + 1) % 3 == 0)\n        {\n      \
    \      auto max_k = n - 1 - j;\n            auto min_k = j + 2;\n            auto\
    \ k = max_k * max_k - max_k + 1;\n            if(k % 3 == 0)\n            {\n\
    \                count += max_k - min_k + 1;\n            }\n            else\
    \ if((j + 1) % 3 == 0)\n            {\n                count += (max_k - min_k)\
    \ / 3 + 1;\n            }\n            else\n            {\n                count\
    \ += (max_k - min_k) / 3;\n            }\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L)\
    \ == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n\
    \    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnwb_nt53.d(21): Error: undefined identifier `chain`, did you mean
    function `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnwb_nt53.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164151
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  //I know this can be solved with one loop, but I would need to use more temporary\
    \ variables\n    //and I would like to check if the current number can be added\
    \ to any of the two previous to\n    //form a triple. It is easier with two loops.\n\
    \    //Considering the fact that the array can be very large, I will use a tuple.\n\
    \    Tuple!(long, long)[] tempArray;\n    foreach(long i; 0..n)\n    {\n     \
    \   tempArray ~= tuple(i * i - i + 1, 0);\n    }\n    //The value of the second\
    \ element of the tuple will tell me if the first element \n    //can be added\
    \ to the previous element of the array to form a triple.\n    //If it is greater\
    \ than 0, then the first element can be added to the first element\n    //of the\
    \ previous triple.\n    //Else if it is equal to 0, then the first element cannot\
    \ be added to any previous\n    //triple.\n    //If it is less than 0, then the\
    \ first element can be added to the first element of\n    //the previous triple,\
    \ and to the first element of the triple before the previous\n    //triple.\n\
    \    long temp = 0;\n    long counter = 0;\n    foreach(ref tuple e; tempArray)\n\
    \    {\n        if(temp > 0)\n        {\n            if((e[0] + tempArray[temp\
    \ - 1][0]) % 3 == 0)\n            {\n                e[1] = 1;\n             \
    \   counter++;\n            }\n        }\n        else if(temp > 1)\n        {\n\
    \            if((e[0] + tempArray[temp - 1][0] + tempArray[temp - 2][0]) % 3 ==\
    \ 0)\n            {\n                e[1] = -1;\n                counter++;\n\
    \            }\n        }\n        temp++;\n    }\n    return counter;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmyhxywgq.d(27): Error: cannot append type `Tuple!(long, int)` to
    type `Tuple!(long, long)[]`

    /tmp/tmpmyhxywgq.d(40): Error: template `std.typecons.tuple(Names...)` is used
    as a type

    /tmp/tmpmyhxywgq.d(40): Error: argument type mismatch, `Tuple!(long, long)` to
    `ref _error_`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmyhxywgq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164151
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long triples_count = 0;\n    long[] a = new long[n];\n    for (long i = 0;\
    \ i < n; i++) \n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i =\
    \ 0; i < n; i++) \n    {\n        for (long j = i + 1; j < n; j++) \n        {\n\
    \            for (long k = j + 1; k < n; k++) \n            {\n              \
    \  if ((a[i] + a[j] + a[k]) % 3 == 0) \n                {\n                  \
    \  triples_count++;\n                }\n            }\n        }\n    }\n    return\
    \ triples_count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n \
    \   assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp80y19cob.d(45): unittest failure

    ----------------

    ??:? _d_unittestp [0x42813d]

    ??:? void tmp80y19cob.__unittest_L41_C1() [0x427e44]

    ??:? void tmp80y19cob.__modtest() [0x427ebc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c13b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430259]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430708]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301e5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afa5]

    ??:? runModuleUnitTests [0x42bf11]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428600]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164152
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  if (n <= 2)\n        return 0;\n    auto a = new int[].init;\n    foreach (index,\
    \ _; 0 .. n)\n        a ~= index * index - index + 1;\n    long cnt = 0;\n   \
    \ foreach (i, ai; a)\n    {\n        if (ai % 3 == 0)\n        {\n           \
    \ cnt += n - i - 1;\n            continue;\n        }\n        if (ai % 3 == 1)\n\
    \        {\n            auto rem_2 = std.algorithm.count(a[i + 1 .. $], (e) =>\
    \ e % 3 == 2);\n            auto rem_1 = std.algorithm.count(a[i + 1 .. $], (e)\
    \ => e % 3 == 1);\n            auto rem_0 = std.algorithm.count(a[i + 1 .. $],\
    \ (e) => e % 3 == 0);\n            cnt += rem_2 + (rem_1 * (rem_1 - 1) / 2) +\
    \ rem_0;\n            continue;\n        }\n        if (ai % 3 == 2)\n       \
    \ {\n            auto rem_1 = std.algorithm.count(a[i + 1 .. $], (e) => e % 3\
    \ == 1);\n            auto rem_0 = std.algorithm.count(a[i + 1 .. $], (e) => e\
    \ % 3 == 0);\n            cnt += rem_1 + rem_0;\n            continue;\n     \
    \   }\n    }\n    return cnt;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660164151
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  static assert(n > 0L);\n    long[] a = new long[n];\n    int j;\n    long sum\
    \ = 0L;\n    for (int i = 0; i < n; i++)\n    {\n        a[i] = (i * i) - i +\
    \ 1;\n    }\n    for (int i = 0; i < n - 2; i++)\n    {\n        for (j = i +\
    \ 1; j < n - 1; j++)\n        {\n            for (int k = j + 1; k < n; k++)\n\
    \            {\n                if (a[i] + a[j] + a[k] % 3 == 0)\n           \
    \     {\n                    sum++;\n                }\n            }\n      \
    \  }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp377vo35x.d(20): Error: variable `n` cannot be read at compile time

    /tmp/tmp377vo35x.d(20):        while evaluating: `static assert(n > 0L)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp377vo35x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164151
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  if (n < 3) return 0;\n    return typeof(n)[] a = iota(n).map!(i => i * i -\
    \ i + 1).array;\n    long count = 0;\n    for (long i = 0; i < n - 2; i++)\n \
    \   {\n        for (long j = i + 1; j < n - 1; j++)\n        {\n            for\
    \ (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j]\
    \ + a[k]) % 3 == 0)\n                {\n                    count++;\n       \
    \         }\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7e7vad63.d(21): Error: found `a` when expecting `;` following `return`
    statement

    /tmp/tmp7e7vad63.d(21): Error: found `=` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7e7vad63.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164151
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long r = 0;\n    int[] a = new int[n];\n    foreach(i; 0..n)\n    {\n     \
    \   a[i] = i * i - i + 1;\n    }\n    foreach(i; 0..n-2)\n    {\n        foreach(j;\
    \ i+1..n-1)\n        {\n            foreach(k; j+1..n)\n            {\n      \
    \          if((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n            \
    \        r++;\n                }\n            }\n        }\n    }\n    return\
    \ r;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L)\
    \ == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n\
    \    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy6c5gnsm.d(24): Error: cannot implicitly convert expression `i
    * i - i + 1L` of type `long` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy6c5gnsm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164151
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  // your code goes here\n    long count = 0;\n    for(long i = 1; i < n - 1;\
    \ i++)\n    {\n        for(long j = i + 1; j < n; j++)\n        {\n          \
    \  for(long k = j + 1; k <= n; k++)\n            {\n                //printf(\"\
    [%d, %d, %d]\\n\", a[i], a[j], a[k]);\n                if(((i * i - i + 1) + (j\
    \ * j - j + 1) + (k * k - k + 1)) % 3 == 0)\n                {\n             \
    \       //printf(\"[%d, %d, %d]\\n\", a[i], a[j], a[k]);\n                   \
    \ count++;\n                }\n            }\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L)\
    \ == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n\
    \    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164152
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[cast(int)n];\n    foreach(i, ref x; a)\n    {\n       \
    \ a[i] = i * i - i + 1;\n    }\n    long res = 0;\n    for(long i = 0; i < n -\
    \ 2; i++)\n    {\n        for(long j = i + 1; j < n - 1; j++)\n        {\n   \
    \         for(long k = j + 1; k < n; k++)\n            {\n                if((a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n                {\n                    res++;\n  \
    \              }\n            }\n        }\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9rmhn7de.d(45): unittest failure

    ----------------

    ??:? _d_unittestp [0x428155]

    ??:? void tmp9rmhn7de.__unittest_L41_C1() [0x427e5c]

    ??:? void tmp9rmhn7de.__modtest() [0x427ed4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c153]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afe6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430271]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430720]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afbd]

    ??:? runModuleUnitTests [0x42bf29]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428618]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164152
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    for (long i = 0; i < n; i++) {\n        a[i] =\
    \ i * i - i + 1;\n    }\n    long triples_sum = 0;\n    foreach (d; 0..n)\n  \
    \  {\n        foreach (e; d..n)\n        {\n            foreach (f; e..n)\n  \
    \          {\n                if (a[d] + a[e] + a[f] % 3 == 0) {\n           \
    \         triples_sum++;\n                }\n            }\n        }\n    }\n\
    \    return triples_sum;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprfolvmhi.d(43): unittest failure

    ----------------

    ??:? _d_unittestp [0x428155]

    ??:? void tmprfolvmhi.__unittest_L39_C1() [0x427e60]

    ??:? void tmprfolvmhi.__modtest() [0x427ed8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c153]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afe6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430271]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430720]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afbd]

    ??:? runModuleUnitTests [0x42bf29]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428618]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164152
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long prev_k_1 = 0;\n    long prev_k_2 = 0;\n    foreach(i;\
    \ 1 .. n)\n    {\n        long a_i = i * i - i + 1;\n        result += prev_k_1;\n\
    \        prev_k_1 += prev_k_2;\n        prev_k_2 = (a_i % 3 == 0) ? prev_k_2 +\
    \ 1 : prev_k_2;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp59p7pstx.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d9d]

    ??:? void tmp59p7pstx.__unittest_L32_C1() [0x427ac5]

    ??:? void tmp59p7pstx.__modtest() [0x427b1c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bac3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a956]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fae9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff98]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa75]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]

    ??:? runModuleUnitTests [0x42b899]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281ec]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164152
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  // a[i] = i * i - i + 1\n    return 0L;\n}\nunittest\n{\n    alias candidate\
    \ = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpg4fukk3d.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d25]

    ??:? void tmpg4fukk3d.__unittest_L23_C1() [0x427a2c]

    ??:? void tmpg4fukk3d.__modtest() [0x427aa4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba4b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a8de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fa71]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff20]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42f9fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]

    ??:? runModuleUnitTests [0x42b821]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428174]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164152
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    foreach(int i, ref long e; a)\n    {\n       \
    \ e = i * i - i + 1;\n    }\n    long res = 0;\n    foreach(int i, int j, int\
    \ k; iota(n - 2))\n    {\n        if((a[i] + a[j] + a[k]) % 3 == 0)\n        {\n\
    \            ++res;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias\
    \ candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp34c31sbs.d(26): Error: undefined identifier `iota`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp34c31sbs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164151
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  /*\n        n = 2  \n            1 + 3 + 7\n            5 % 3 == 2\n      \
    \  n = 3\n            1 + 3 + 13\n            17 % 3 == 2\n        n = 4\n   \
    \         1 + 3 + 21\n            25 % 3 == 1\n    */\n    alias T = Tuple!(long,\
    \ long, long);\n    // 1, 3, 7, 13, 21, 31, 43, 57, 73, 91, 111, 133, 157, 183,\
    \ 211, 241, 273, 307, 343, 381\n    // 1, 2, 4, 6, 9, 12, 16, 20, 25, 30, 36,\
    \ 42, 49, 56, 64, 72, 81, 90, 100, 110, 121, 132, 144, 156, 169, 182, 196, 210,\
    \ 225, 240, 256, 272, 289, 306, 324, 342, 361, 380, 400\n    // 1, 2, 4, 6, 9,\
    \ 12, 16, 20, 25, 30, 36, 42, 49, 56, 64, 72, 81, 90, 100, 110, 121, 132, 144,\
    \ 156, 169, 182, 196, 210, 225, 240, 256, 272, 289, 306, 324, 342, 361, 380, 400,\
    \ 421, 442, 464, 486, 509, 532, 556, 580, 605, 630, 656, 682, 709, 736, 764, 792,\
    \ 821, 850, 880, 910, 941, 972, 1004, 1036, 1069, 1102, 1136, 1170, 1205, 1240,\
    \ 1276, 1312, 1349, 1386, 1424, 1462, 1501, 1540, 1580, 1620, 1661, 1702, 1744,\
    \ 1786, 1829, 1872, 1916, 1960, 2005, 2050, 2096, 2142, 2189, 2236, 2284, 2332,\
    \ 2381, 2430, 2480, 2530, 2581, 2632, 2684, 2736, 2789, 2842, 2896, 2950, 3005,\
    \ 3060, 3116, 3172, 3229, 3286, 3344, 3402, 3461, 3520, 35\nunittest\n{\n    alias\
    \ candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp331y5i2c.d(35): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp331y5i2c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164151
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  int count = 0;\n    for (int i = 1; i < n; i++)\n    {\n        for (int j\
    \ = i+1; j < n; j++)\n        {\n            for (int k = j+1; k < n; k++)\n \
    \           {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k\
    \ + 1) % 3 == 0)\n                {\n                    count++;\n          \
    \      }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmps7_rieva.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x427db5]

    ??:? void tmps7_rieva.__unittest_L36_C1() [0x427ae1]

    ??:? void tmps7_rieva.__modtest() [0x427b38]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42badb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a96e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb01]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffb0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa8d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a945]

    ??:? runModuleUnitTests [0x42b8b1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428204]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164152
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long maxTriples = 0;\n    for (long i = 0; i < n; i++)\n    {\n        for\
    \ (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k\
    \ < n; k++)\n            {\n                if (((i*i - i + 1) + (j*j - j + 1)\
    \ + (k*k - k + 1)) % 3 == 0)\n                {\n                    maxTriples++;\n\
    \                }\n            }\n        }\n    }\n    return maxTriples;\n\
    }\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L)\
    \ == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n\
    \    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp34bryl9a.d(40): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dd5]

    ??:? void tmp34bryl9a.__unittest_L36_C1() [0x427adc]

    ??:? void tmp34bryl9a.__modtest() [0x427b54]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bafb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a98e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb21]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42faad]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]

    ??:? runModuleUnitTests [0x42b8d1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428224]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164152
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  if (n < 3)\n        return 0;\n    // https://en.wikipedia.org/wiki/Partition_(number_theory)\n\
    \    long m = (n - 1) / 2;\n    long s = n % 2 == 0 ? n / 2 : n / 2 + 1;\n   \
    \ long res = 0;\n    for (long i = m; i > s; i--)\n    {\n        long k = n -\
    \ i;\n        long x = ((2 * i - n) * (n - 1) - (i - 1) * i) / 6;\n        long\
    \ y = ((2 * k - n) * (n - 1) - (k - 1) * k) / 6;\n        long z = (m * (m + 1)\
    \ - s * (s + 1)) / 6;\n        res += 3 * (x + y - z) + 2 * (i - k - 1);\n   \
    \ }\n    return res;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmphp5jxk94.d(40): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e5d]

    ??:? void tmphp5jxk94.__unittest_L36_C1() [0x427b64]

    ??:? void tmphp5jxk94.__modtest() [0x427bdc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa16]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fba9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430058]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]

    ??:? runModuleUnitTests [0x42b959]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282ac]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164152
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long result = 0;\n    foreach(ref i; 0 .. n)\n\
    \    {\n        a[i] = i * i - i + 1;\n    }\n    foreach(i; 0 .. n)\n    {\n\
    \        foreach(j; i + 1 .. n)\n        {\n            foreach(k; j + 1 .. n)\n\
    \            {\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n          \
    \      {\n                    result += 1;\n                }\n            }\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2goxbwng.d(45): unittest failure

    ----------------

    ??:? _d_unittestp [0x428175]

    ??:? void tmp2goxbwng.__unittest_L41_C1() [0x427e7c]

    ??:? void tmp2goxbwng.__modtest() [0x427ef4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c173]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b006]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430291]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430740]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43021d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afdd]

    ??:? runModuleUnitTests [0x42bf49]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428638]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164152
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  // 1 \u2264 n \u2264 100000\n    assert(n >= 1L && n <= 100000L);\n    // 1\
    \ \u2264 a[i] \u2264 1000000000\n    assert(n*n - n + 1L >= 1L && n*n - n + 1L\
    \ <= 1000000000L);\n    // Sum of all a[i] \u2264 1000000000000000000.\n    assert(n*(n*n\
    \ - n + 1L)/2 <= 1000000000000000000L);\n    auto a = new long[](n);\n    for\
    \ (int i = 0; i < n; i++) {\n        a[i] = i*i - i + 1L;\n    }\n    long sum\
    \ = 0L;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n;\
    \ j++) {\n            for (int k = j + 1; k < n; k++) {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3L == 0L) {\n                    sum++;\n                }\n\
    \            }\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqfbtbybl.d(46): unittest failure

    ----------------

    ??:? _d_unittestp [0x428291]

    ??:? void tmpqfbtbybl.__unittest_L42_C1() [0x427ee4]

    ??:? void tmpqfbtbybl.__modtest() [0x427f5c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c28f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b122]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303ad]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43085c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430339]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]

    ??:? runModuleUnitTests [0x42c065]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428754]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164152
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long counter = 0;\n    foreach(immutable i; 1..n-2)\n    {\n        foreach(immutable\
    \ j; i+1..n-1)\n        {\n            foreach(immutable k; j+1..n)\n        \
    \    {\n                if((i*i - i + 1 + j*j - j + 1 + k*k - k + 1) % 3 == 0)\n\
    \                {\n                    counter++;\n                }\n      \
    \      }\n        }\n    }\n    return counter;\n}\nunittest\n{\n    alias candidate\
    \ = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpbr1yht1c.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e15]

    ??:? void tmpbr1yht1c.__unittest_L36_C1() [0x427b3d]

    ??:? void tmpbr1yht1c.__modtest() [0x427b94]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb3b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb61]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430010]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42faed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9a5]

    ??:? runModuleUnitTests [0x42b911]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428264]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164152
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long ret = 0L;\n    long[] arr = new long[n];\n    foreach(i; 0 .. n)\n   \
    \ {\n        arr[i] = i * i - i + 1;\n    }\n    foreach(i; 0 .. n)\n    {\n \
    \       foreach(j; i+1 .. n)\n        {\n            foreach(k; j+1 .. n)\n  \
    \          {\n                if((arr[i] + arr[j] + arr[k]) % 3 == 0)\n      \
    \          {\n                    ret++;\n                }\n            }\n \
    \       }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp50dp0zpe.d(45): unittest failure

    ----------------

    ??:? _d_unittestp [0x428185]

    ??:? void tmp50dp0zpe.__unittest_L41_C1() [0x427e8c]

    ??:? void tmp50dp0zpe.__modtest() [0x427f04]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c183]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b016]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302a1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430750]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43022d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afed]

    ??:? runModuleUnitTests [0x42bf59]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428648]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164152
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long i, j, k, cnt = 0L;\n    long[n] a;\n    foreach(i, j; zip(a, iota(n)))\n\
    \        a[j] = (i + 1L) * (i + 1L) - (i + 1L) + 1L;\n    foreach(i; iota(n -\
    \ 2L))\n        foreach(j; iota(i + 1L, n - 1L))\n            foreach(k; iota(j\
    \ + 1L, n))\n                if((a[i] + a[j] + a[k]) % 3L == 0L)\n           \
    \         cnt++;\n    return cnt;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnjpewxr2.d(21): Error: variable `n` cannot be read at compile time

    /tmp/tmpnjpewxr2.d(22): Error: undefined identifier `zip`

    /tmp/tmpnjpewxr2.d(24): Error: undefined identifier `iota`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnjpewxr2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164151
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  n--;\n    long n2 = n >> 1;\n    long n3 = n / 3;\n    long n5 = n / 5;\n \
    \   long n15 = n / 15;\n    long n2p = n2 * (n2 + 1) / 2;\n    long n3p = n3 *\
    \ (n3 + 1) / 2;\n    long n5p = n5 * (n5 + 1) / 2;\n    long n15p = n15 * (n15\
    \ + 1) / 2;\n    long n30p = n15p;\n    return 3 * n2p * n3p - 3 * n2p * n5p -\
    \ 3 * n2p * n15p + 3 * n2p * n30p - n3p * n5p + 2 * n3p * n15p - n3p * n30p -\
    \ n5p * n15p + n5p * n30p + n15p * n30p;\n}\n/*\n    1L \n    Explanation: \n\
    \    a = [1, 3, 7, 13, 21]\n    The only valid triple is (1, 7, 13).\n*/\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2p1i2zgy.d(42): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e55]

    ??:? void tmp2p1i2zgy.__unittest_L38_C1() [0x427b5c]

    ??:? void tmp2p1i2zgy.__modtest() [0x427bd4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb7b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa0e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fba1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430050]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb2d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9e5]

    ??:? runModuleUnitTests [0x42b951]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282a4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164152
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    int[int] dict = new int[int];\n    int count = 0;\n \
    \   foreach(i; 1 .. n - 1)\n    {\n        foreach(j; i + 1 .. n)\n        {\n\
    \            foreach(k; j + 1 .. n + 1)\n            {\n                if((i\
    \ * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n                {\n\
    \                    dict[i]++;\n                    dict[j]++;\n            \
    \        dict[k]++;\n                    count++;\n                }\n       \
    \     }\n        }\n    }\n    foreach(key; keys(dict))\n    {\n        if(dict[key]\
    \ == count)\n        {\n            result++;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L)\
    \ == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n\
    \    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnidgdryx.d(21): Error: need size of rightmost array, not type `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnidgdryx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164152
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  // tests.addTest(new Test(n, 1L));\n    if (n < 3)\n        return 0;\n   \
    \ int[] a = new int[n];\n    for (int i = 0; i < n; i++)\n        a[i] = i * i\
    \ - i + 1;\n    int[] b = new int[n + 1];\n    int[] c = new int[n + 1];\n   \
    \ for (int i = 0; i < n; i++)\n    {\n        b[i + 1] = b[i] + a[i];\n      \
    \  c[i + 1] = c[i] + (a[i] % 3);\n    }\n    // return tests.calculateAllTests();\n\
    \    long ans = 0;\n    for (int i = 0; i < n; i++)\n    {\n        for (int j\
    \ = i + 1; j < n; j++)\n        {\n            int s = c[n] - c[j] - (c[i] - c[0]);\n\
    \            int k = b[n] - b[j] - (b[i] - b[0]);\n            if (s == k)\n \
    \               ans++;\n        }\n    }\n    return ans;\n}\nunittest\n{\n  \
    \  alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n  \
    \  assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9d7c49xx.d(51): unittest failure

    ----------------

    ??:? _d_unittestp [0x428345]

    ??:? void tmp9d7c49xx.__unittest_L47_C1() [0x428050]

    ??:? void tmp9d7c49xx.__modtest() [0x4280c8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c31f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1b2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43043d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308ec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303c9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b189]

    ??:? runModuleUnitTests [0x42c0f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428808]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164152
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long myTriples = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    if\
    \ (n > 0)\n    {\n        while (k < n)\n        {\n            i = 0;\n     \
    \       j = i + 1;\n            k = j + 1;\n            while (j < n)\n      \
    \      {\n                while (k < n)\n                {\n                 \
    \   long triple = (i * i - i + 1) + (j * j - j + 1) + (k * k - k + 1);\n     \
    \               if (triple % 3 == 0)\n                    {\n                \
    \        myTriples++;\n                    }\n                    k++;\n     \
    \           }\n                j++;\n                k = j + 1;\n            }\n\
    \            i++;\n        }\n    }\n    return myTriples;\n}\nunittest\n{\n \
    \   alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n \
    \   assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpbx13fieh.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dd5]

    ??:? void tmpbx13fieh.__unittest_L50_C1() [0x427ae0]

    ??:? void tmpbx13fieh.__modtest() [0x427b58]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bafb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a98e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb21]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42faad]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]

    ??:? runModuleUnitTests [0x42b8d1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428224]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164152
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long a[], count = 0L;\n    a.length = n;\n    for (long i = 0L; i < n; i++)\n\
    \    {\n        a[i] = (i * i) - i + 1L;\n    }\n    foreach (i, value_i; a)\n\
    \    {\n        foreach (j, value_j; a[i..$])\n        {\n            foreach\
    \ (k, value_k; a[j..$])\n            {\n                if (value_i + value_j\
    \ + value_k % 3L == 0L)\n                {\n                    count++;\n   \
    \             }\n            }\n        }\n    }\n    return count / 3L;\n}\n\
    unittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L)\
    \ == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n\
    \    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvnl5ovfn.d(20): Deprecation: instead of C-style syntax, use D-style
    syntax `long[] a`

    /tmp/tmpvnl5ovfn.d(20): Error: multiple declarations must have the same type,
    not `long[]` and `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvnl5ovfn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164152
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long res = 0;\n    for (long i = 1; i < n - 1; i++) \n    {\n        long start\
    \ = i * i - i + 1;\n        for (long j = i + 1; j < n; j++) \n        {\n   \
    \         start += 2 * i + 1;\n            long end = j * j - j + 1;\n       \
    \     for (long k = j + 1; k <= n; k++) \n            {\n                end +=\
    \ 2 * j + 1;\n                if ((start + end) % 3 == 0) \n                {\n\
    \                    res++;\n                }\n            }\n        }\n   \
    \ }\n    return res;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpf87ex9_o.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dfd]

    ??:? void tmpf87ex9_o.__unittest_L40_C1() [0x427b04]

    ??:? void tmpf87ex9_o.__modtest() [0x427b7c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb23]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9b6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb49]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42fff8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fad5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a98d]

    ??:? runModuleUnitTests [0x42b8f9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42824c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164152
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  //ch\u1EC9 ch\u1EA1y \u0111\u1EBFn 2/3 s\u1ED1 l\u01B0\u1EE3ng m\u1EA3ng v\xEC\
    \ s\u1ED1 sau 2/3 ch\u1EAFc ch\u1EAFn\n    //d\u01B0 1 v\xE0 ch\u1EC9 ch\u1EA1\
    y i < j < k -> 1 < 2 < 3\n    long max = 0;\n    foreach(a; 0..(n / 3)) {\n  \
    \      foreach(b; (a + 1)..(n / 2)) {\n            foreach(c; (b + 1)..n) {\n\
    \                //\u0111\u1EC3 n\xF3 th\u1EF1c hi\u1EC7n nhanh h\u01A1n b\u1EB1\
    ng c\xE1ch ch\u1EC9 \u0111\u1EC3 c\u1ED9ng l\u1EA1i s\u1ED1 nguy\xEAn\n      \
    \          //ch\u1EE9 kh\xF4ng \u0111\u1EC3 gi\u1EA3i ph\u01B0\u01A1ng tr\xEC\
    nh nh\u01B0 b\xE0i tr\u01B0\u1EDBc\n                if((a * a - a + 1 + b * b\
    \ - b + 1 + c * c - c + 1) % 3 == 0) {\n                    ++max;\n         \
    \       }\n            }\n        }\n    }\n    return max;\n}\nunittest\n{\n\
    \    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8gtduh65.d(40): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e15]

    ??:? void tmp8gtduh65.__unittest_L36_C1() [0x427b1c]

    ??:? void tmp8gtduh65.__modtest() [0x427b94]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb3b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb61]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430010]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42faed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9a5]

    ??:? runModuleUnitTests [0x42b911]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428264]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164152
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long count=0L;\n    for(long i=0L;i<n;i++)\n    {\n        for(long j=i+1L;j<n;j++)\n\
    \        {\n            for(long k=j+1L;k<n;k++)\n            {\n            \
    \    if(((i*i-i+1L)+(j*j-j+1L)+(k*k-k+1L))%3L==0L)\n                {\n      \
    \              count++;\n                }\n            }\n        }\n    }\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n\
    \    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpex6zkt9q.d(40): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dd5]

    ??:? void tmpex6zkt9q.__unittest_L36_C1() [0x427adc]

    ??:? void tmpex6zkt9q.__modtest() [0x427b54]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bafb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a98e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb21]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42faad]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]

    ??:? runModuleUnitTests [0x42b8d1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428224]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164152
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long sum = 0;\n    long a = 0;\n    long b = 0;\n   \
    \ long c = 0;\n    for (long i = 0; i < n; i++)\n    {\n        a = i * i - i\
    \ + 1;\n        for (long j = 0; j < n; j++)\n        {\n            b = j * j\
    \ - j + 1;\n            for (long k = 0; k < n; k++)\n            {\n        \
    \        c = k * k - k + 1;\n                sum = a + b + c;\n              \
    \  if (sum % 3 == 0)\n                {\n                    result++;\n     \
    \           }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwjmhloez.d(48): unittest failure

    ----------------

    ??:? _d_unittestp [0x427de5]

    ??:? void tmpwjmhloez.__unittest_L44_C1() [0x427af0]

    ??:? void tmpwjmhloez.__modtest() [0x427b68]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a99e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fabd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]

    ??:? runModuleUnitTests [0x42b8e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428234]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164152
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  size_t[] a = new size_t[n];\n    auto count = 0L;\n    foreach( i; 0..n )\n\
    \    {\n        a[i] = i * i - i + 1;\n    }\n    foreach( i; 0..n-2 )\n    {\n\
    \        foreach( j; i+1..n-1 )\n        {\n            foreach( k; j+1..n )\n\
    \            {\n                if( (a[i] + a[j] + a[k]) % 3 == 0 )\n        \
    \        {\n                    count++;\n                }\n            }\n \
    \       }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7noiihac.d(45): unittest failure

    ----------------

    ??:? _d_unittestp [0x42832d]

    ??:? void tmp7noiihac.__unittest_L41_C1() [0x428034]

    ??:? void tmp7noiihac.__modtest() [0x4280ac]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c28f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b122]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303ad]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43085c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430339]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]

    ??:? runModuleUnitTests [0x42c065]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287f0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164152
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long ans = 0;\n    for (int i = 1; i < n; i++)\n    {\n        for (int j =\
    \ i + 1; j < n; j++)\n        {\n            for (int k = j + 1; k < n; k++)\n\
    \            {\n                if ((j * j - j + 1 + k * k - k + 1 + i * i - i\
    \ + 1) % 3 == 0)\n                {\n                    ans++;\n            \
    \    }\n            }\n        }\n    }\n    return ans;\n}\n// @exclude\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpnh_sguig.d(42): unittest failure

    ----------------

    ??:? _d_unittestp [0x427db5]

    ??:? void tmpnh_sguig.__unittest_L37_C1() [0x427ae1]

    ??:? void tmpnh_sguig.__modtest() [0x427b38]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42badb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a96e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb01]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffb0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa8d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a945]

    ??:? runModuleUnitTests [0x42b8b1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428204]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164152
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  n = n == 0L ? 1L : n;\n    long[] a = new long[n];\n    foreach(i, ref a_i;\
    \ a)\n    {\n        a_i = i * i - i + 1L;\n    }\n    long result = 0L;\n   \
    \ foreach_reverse(i, i_prev; a)\n    {\n        if (i <= 0L)\n        {\n    \
    \        break;\n        }\n        result += a[i_prev] / 3L;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L)\
    \ == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n\
    \    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmp_j1fzw1_.d(33): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42817e]

    ??:? long tmp_j1fzw1_.get_max_triples(long) [0x427d89]

    ??:? void tmp_j1fzw1_.__unittest_L37_C1() [0x427dbd]

    ??:? void tmp_j1fzw1_.__modtest() [0x427e4c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c0cb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42af5e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4301e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430698]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430175]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af35]

    ??:? runModuleUnitTests [0x42bea1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function('
  stdout: ''
  timestamp: 1660164152
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  static int count = 0;\n    static int how = 0;\n    static int size = 0;\n\
    \    static int index = 0;\n    static int sum = 0;\n    static int[] arr;\n \
    \   static int[] sum_arr;\n    static int[] multi_arr;\n    static tuple[] ans;\n\
    \    static tuple[] temp;\n    static int[] ret;\n    static int[] ret_sum;\n\
    \    static int[] ret_multi;\n    static tuple[] ret_tup;\n    static int ret_index\
    \ = 0;\n    static int max = 0;\n    static int mod = 0;\n    static int[] memo;\n\
    \    static int[] memo_index;\n    static int memo_index_index = 0;\n    static\
    \ int memo_index_index_index = 0;\n    static int memo_index_index_index_index\
    \ = 0;\n    static int memo_index_index_index_index_index = 0;\n    static int\
    \ first = 0;\n    static int second = 0;\n    static int third = 0;\n    static\
    \ int[] temp_ret;\n    static int[] temp_ans;\n    static int[] temp_ret_index;\n\
    \    static int count_ret = 0;\n    static int[] temp_arr;\n    static int temp_max\
    \ = 0;\n    static int temp_mod = 0;\n    static int[] temp_multi_arr;\n    static\
    \ int[] temp_sum_arr;\n    static int temp_sum = 0;\n    static tuple[] temp_tup;\n\
    \    static int temp_how = 0;\n    static int temp_count = 0;\n    static int\
    \ temp_count_ret = 0;\n    static int temp_ret_index = 0;\n    static int[] temp_ret_sum;\n\
    \    static int[] temp_ret_multi;\n    static int temp_multi = 0;\n    static\
    \ int temp_ret_multi_sum = 0;\n    static int ret_multi_sum = 0;\n    static int\
    \ temp_ret_sum_sum = 0;\n    static int ret_sum_sum = 0;\n    if (count == 0)\
    \ {\n        arr = new int[n];\n        sum_arr = new int[n];\n        multi\n\
    unittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L)\
    \ == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n\
    \    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbezcl4n0.d(72): Error: found `unittest` when expecting `;` following
    statement

    /tmp/tmpbezcl4n0.d(81): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpbezcl4n0.d(81): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbezcl4n0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164152
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long res = 0;\n    auto a = tuple(iota(n)).map!((long x) {return x * x - x\
    \ + 1;}).array;\n    // auto a = tuple(iota(n)).map!((long x) {return (x * x -\
    \ x + 1) % 3;}).array;\n    // auto a = tuple(iota(n)).map!((long x) {return (x\
    \ * x - x + 1) & 1;}).array;\n    // auto a = tuple(iota(n)).map!((long x) {return\
    \ (x * x - x + 1) % 4;}).array;\n    // auto a = tuple(iota(n)).map!((long x)\
    \ {return (x * x - x + 1) / 3;}).array;\n    // auto a = tuple(iota(n)).map!((long\
    \ x) {return (x * x - x + 1) % 5;}).array;\n    // auto a = tuple(iota(n)).map!((long\
    \ x) {return (x * x - x + 1) / 7;}).array;\n    // auto a = tuple(iota(n)).map!((long\
    \ x) {return (x * x - x + 1) % 8;}).array;\n    // auto a = tuple(iota(n)).map!((long\
    \ x) {return (x * x - x + 1) % 10;}).array;\n    // auto a = tuple(iota(n)).map!((long\
    \ x) {return (x * x - x + 1) % 12;}).array;\n    // auto a = tuple(iota(n)).map!((long\
    \ x) {return (x * x - x + 1) % 16;}).array;\n    // auto a = tuple(iota(n)).map!((long\
    \ x) {return (x * x - x + 1) % 20;}).array;\n    // auto a = tuple(iota(n)).map!((long\
    \ x) {return (x * x - x + 1) % 27;}).array;\n    // auto a = tuple(iota(n)).map!((long\
    \ x) {return (x * x - x + 1) % 36;}).array;\n    // auto\nunittest\n{\n    alias\
    \ candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjudik9b5.d(36): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjudik9b5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164152
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  // setup\n    long i, j, k;\n    long triple_count = 0;\n    long[] a = new\
    \ long[n];\n    // populate a\n    foreach(i; 0..n)\n    {\n        a[i] = i *\
    \ i - i + 1;\n    }\n    // loop through a\n    foreach(i; 0..n)\n    {\n    \
    \    foreach(j; i..n)\n        {\n            foreach(k; j..n)\n            {\n\
    \                if((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n      \
    \              triple_count += 1;\n                }\n            }\n        }\n\
    \    }\n    return triple_count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdspysn2x.d(25): Error: variable `i` is shadowing variable `tmpdspysn2x.get_max_triples.i`

    /tmp/tmpdspysn2x.d(30): Error: variable `i` is shadowing variable `tmpdspysn2x.get_max_triples.i`

    /tmp/tmpdspysn2x.d(32): Error: variable `j` is shadowing variable `tmpdspysn2x.get_max_triples.j`

    /tmp/tmpdspysn2x.d(34): Error: variable `k` is shadowing variable `tmpdspysn2x.get_max_triples.k`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdspysn2x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164152
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  import std.algorithm : sum;\n    import std.array : array;\n    import std.math\
    \ : round;\n    import std.range : iota;\n    import std.typecons : tuple;\n \
    \   import std.algorithm : map;\n    assert(n>0);\n    auto a = iota(n).map!(x\
    \ => x*x-x+1).array;\n    long sum = 0;\n    foreach(i;iota(n-2))\n    {\n   \
    \     foreach(j;iota(i+1,n-1))\n        {\n            foreach(k;iota(j+1,n))\n\
    \            {\n                long tmp = a[i]+a[j]+a[k];\n                if(tmp%3==0)\n\
    \                    sum+=1;\n            }\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L)\
    \ == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n\
    \    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa2b9xzpq.d(28): Error: declaration `tmpa2b9xzpq.get_max_triples.sum`
    is already defined

    /tmp/tmpa2b9xzpq.d(37): Error: `sum(R)(R r) if (isInputRange!R && !isInfinite!R
    && is(typeof(r.front + r.front)))` is not an lvalue and cannot be modified

    /tmp/tmpa2b9xzpq.d(41): Error: template `sum(R)(R r) if (isInputRange!R && !isInfinite!R
    && is(typeof(r.front + r.front)))` has no type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa2b9xzpq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164152
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  //auto [a, b, c] = tuple(1, 2, 3);\n    //static if (is(typeof({1,2,3}) ==\
    \ Tuple!(int, int, int)))\n    //    writeln(\"Tuple\");\n    //else\n    // \
    \   writeln(\"Not a Tuple\");\n    //assert(a == 1);\n    //assert(b == 2);\n\
    \    //assert(c == 3);\n    //static if (is(typeof({1,2,3}) == Tuple!(int, int,\
    \ int)))\n    //    writeln(\"Tuple\");\n    //else\n    //    writeln(\"Not a\
    \ Tuple\");\n    long arr[n];\n    long res = 0;\n    for (long i = 0; i < n;\
    \ i++)\n    {\n        arr[i] = i * i - i + 1;\n        //writeln(arr[i]);\n \
    \   }\n    for (long i = 0; i < n - 2; i++)\n    {\n        for (long j = i +\
    \ 1; j < n - 1; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n\
    \            {\n                //assert(arr[i] + arr[j] + arr[k] == i * i - i\
    \ + 1 + j * j - j + 1 + k * k - k + 1);\n                if ((arr[i] + arr[j]\
    \ + arr[k]) % 3 == 0)\n                {\n                    res++;\n       \
    \             //writeln(i, j, k);\n                }\n            }\n        }\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcq12cggw.d(32): Deprecation: instead of C-style syntax, use D-style
    syntax `long[n] arr`

    /tmp/tmpcq12cggw.d(32): Error: variable `n` cannot be read at compile time

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcq12cggw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164152
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  //write your code here\n    long result = 0;\n    bool[] a = new bool[n+1];\n\
    \    for(int i = 1; i < n+1; i++)\n    {\n        a[i] = true;\n    }\n    for(int\
    \ i = 1; i < n+1; i++)\n    {\n        for(int j = i+1; j < n+1; j++)\n      \
    \  {\n            int remainder = (i*i-i+1 + j*j-j+1) % 3;\n            if(remainder\
    \ == 0)\n            {\n                a[j] = false;\n            }\n       \
    \ }\n    }\n    for(int i = 1; i < n+1; i++)\n    {\n        if(a[i])\n      \
    \  {\n            result++;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp18atdgj4.d(51): unittest failure

    ----------------

    ??:? _d_unittestp [0x427fc5]

    ??:? void tmp18atdgj4.__unittest_L47_C1() [0x427ccc]

    ??:? void tmp18atdgj4.__modtest() [0x427d44]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bdfb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ac8e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ff19]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4303c8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fea5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ac65]

    ??:? runModuleUnitTests [0x42bbd1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428488]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164152
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  if (n < 2) return 0;\n    long count = 0;\n    immutable  uint a = (1,3,7,13,21);\n\
    \    //for (int i = 0; i < n; i++) \n    //    a[i] = i * i - i + 1;\n    const\
    \ uint sum = a[0] + a[1] + a[2];\n    int j = 2;\n    for (int i = 0; i < n; i++)\
    \ \n    {\n        auto tmp = sum - a[i];\n        for (uint k = j; k < n; k++)\
    \ \n        {\n            if (tmp + a[k] == 3) count++;\n            else if\
    \ (tmp + a[k] < 3) break;\n        }\n        if (i + 2 == j) j++;\n    }\n  \
    \  return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n \
    \   assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdfn5vmpj.d(22): Error: Using the result of a comma expression is
    not allowed

    /tmp/tmpdfn5vmpj.d(25): Error: only one index allowed to index `immutable(uint)`

    /tmp/tmpdfn5vmpj.d(25): Error: only one index allowed to index `immutable(uint)`

    /tmp/tmpdfn5vmpj.d(25): Error: only one index allowed to index `immutable(uint)`

    /tmp/tmpdfn5vmpj.d(29): Error: only one index allowed to index `immutable(uint)`

    /tmp/tmpdfn5vmpj.d(32): Error: only one index allowed to index `immutable(uint)`

    /tmp/tmpdfn5vmpj.d(33): Error: only one index allowed to index `immutable(uint)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdfn5vmpj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164152
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  enum isMultipleOfThree = n => n % 3 == 0;\n    enum isValidPair(long[] a, long\
    \ i, long j)\n    {\n        return (1 < i < j < a.length) && isMultipleOfThree(a[i]\
    \ + a[j] + a[i+1]);\n    }\n    enum isValidTriple(long[] a, long i, long j, long\
    \ k)\n    {\n        return (1 < i < j < k < a.length) && isMultipleOfThree(a[i]\
    \ + a[j] + a[k]);\n    }\n    long[] values = iota(1L, n).map!(it => it * it -\
    \ it + 1).array;\n    long result = 0;\n    foreach(i; 0 .. n - 2)\n    {\n  \
    \      foreach(j; i + 1 .. n - 1)\n        {\n            if(isValidPair(values,\
    \ i, j))\n            {\n                ++result;\n            }\n        }\n\
    \    }\n    foreach(i; 0 .. n - 3)\n    {\n        foreach(j; i + 1 .. n - 2)\n\
    \        {\n            foreach(k; j + 1 .. n - 1)\n            {\n          \
    \      if(isValidTriple(values, i, j, k))\n                {\n               \
    \     ++result;\n                }\n            }\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L)\
    \ == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n\
    \    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeoksfs74.d(23): Error: found `<` when expecting `)`

    /tmp/tmpeoksfs74.d(23): Error: found `j` when expecting `;` following `return`
    statement

    /tmp/tmpeoksfs74.d(23): Error: found `<` instead of statement

    /tmp/tmpeoksfs74.d(27): Error: found `<` when expecting `)`

    /tmp/tmpeoksfs74.d(27): Error: found `j` when expecting `;` following `return`
    statement

    /tmp/tmpeoksfs74.d(27): Error: found `<` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeoksfs74.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164152
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  if (n < 3)\n        return 0;\n    long result = (n - 2) * (n - 1) * n / 3\
    \ / 2;\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_ymurgzs.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d5d]

    ??:? void tmp_ymurgzs.__unittest_L25_C1() [0x427a64]

    ??:? void tmp_ymurgzs.__modtest() [0x427adc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a916]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42faa9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff58]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8ed]

    ??:? runModuleUnitTests [0x42b859]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281ac]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164152
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    foreach(i;0 .. n)\n    {\n        a[i] = i * i\
    \ - i + 1;\n    }\n    return a;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuiaootx2.d(25): Error: cannot implicitly convert expression `a`
    of type `long[]` to `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuiaootx2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164152
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result;\n    long i;\n    long j;\n    long[] a;\n    long[] dp;\n   \
    \ long[] prev;\n    long[] sum;\n    long[] next;\n    long tmp;\n    a = (long[])\
    \ new int[(int)n];\n    foreach (idx; 0 .. n) {\n        a[idx] = cast(long)(idx\
    \ * idx - idx + 1);\n    }\n    dp = (long[]) new int[(int)n];\n    prev = (long[])\
    \ new int[(int)n];\n    sum = (long[]) new int[(int)n];\n    next = (long[]) new\
    \ int[(int)n];\n    foreach (i; 0 .. n) {\n        prev[i] = cast(long)(-1);\n\
    \        next[i] = cast(long)(-1);\n    }\n    foreach (i; 0 .. n) {\n       \
    \ foreach (j; i + 1 .. n) {\n            if (j > i + 1) {\n                tmp\
    \ = cast(long)(a[i] + a[j] + a[j - 1]);\n                if (tmp % 3L == 0L) {\n\
    \                    dp[j] = cast(long)(max(dp[j], 1L + dp[j - 1]));\n       \
    \             if (prev[j] == -1L) {\n                        prev[j] = i;\n  \
    \                  }\n                }\n            }\n            if (j < n\
    \ - 1) {\n                tmp = cast(long)(a[i] + a[j] + a[j + 1]);\n        \
    \        if (tmp % 3L == 0L) {\n                    dp[j] = cast(long)(max(dp[j],\
    \ 1L + dp[j + 1]));\n                    if (next[j] == -1L) {\n             \
    \           next[j] = i;\n                    }\n                }\n         \
    \   }\n        }\n    }\n    result = cast(long)(0L);\n    foreach (i; 0 .. n)\
    \ {\n        sum[i] = cast(long)(dp[i]);\n        if (prev[i]\nunittest\n{\n \
    \   alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n \
    \   assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt50j9qzw.d(29): Error: C style cast illegal, use `cast(int)n`

    /tmp/tmpt50j9qzw.d(29): Error: C style cast illegal, use `cast(long[])new int[cast(int)n]`

    /tmp/tmpt50j9qzw.d(33): Error: C style cast illegal, use `cast(int)n`

    /tmp/tmpt50j9qzw.d(33): Error: C style cast illegal, use `cast(long[])new int[cast(int)n]`

    /tmp/tmpt50j9qzw.d(34): Error: C style cast illegal, use `cast(int)n`

    /tmp/tmpt50j9qzw.d(34): Error: C style cast illegal, use `cast(long[])new int[cast(int)n]`

    /tmp/tmpt50j9qzw.d(35): Error: C style cast illegal, use `cast(int)n`

    /tmp/tmpt50j9qzw.d(35): Error: C style cast illegal, use `cast(long[])new int[cast(int)n]`

    /tmp/tmpt50j9qzw.d(36): Error: C style cast illegal, use `cast(int)n`

    /tmp/tmpt50j9qzw.d(36): Error: C style cast illegal, use `cast(long[])new int[cast(int)n]`

    /tmp/tmpt50j9qzw.d(67): Error: found `unittest` when expecting `)`

    /tmp/tmpt50j9qzw.d(76): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpt50j9qzw.d(76): Error: found `End of File` wh'
  stdout: ''
  timestamp: 1660164152
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  // initialize array\n    int[] a = new int[(int)n];\n    // populate array\n\
    \    foreach(i, val; a)\n    {\n        val = i * i - i + 1;\n    }\n    // get\
    \ all triples\n    alias Tuple!(int, int, int) triple;\n    auto triples = new\
    \ triple[]((int)n);\n    foreach(i, j, k; 0 .. n)\n    {\n        // skip if sum\
    \ is not divisible by 3\n        if ((a[i] + a[j] + a[k]) % 3 != 0) continue;\n\
    \        triples ~= triple(a[i], a[j], a[k]);\n    }\n    return triples.length;\n\
    }\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L)\
    \ == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n\
    \    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpku1lokc0.d(21): Error: C style cast illegal, use `cast(int)n`

    /tmp/tmpku1lokc0.d(29): Error: C style cast illegal, use `cast(int)n`

    /tmp/tmpku1lokc0.d(30): Error: found `..` when expecting `)`

    /tmp/tmpku1lokc0.d(30): Error: found `)` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpku1lokc0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164152
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long c = 0;\n    foreach(int i; 0..n)\n    {\n        foreach(int j; i+1..n)\n\
    \        {\n            foreach(int k; j+1..n)\n            {\n              \
    \  if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n            \
    \    {\n                    c++;\n                }\n            }\n        }\n\
    \    }\n    return c;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw2zajwy2.d(21): Error: cannot implicitly convert expression `n`
    of type `long` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw2zajwy2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164152
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long cnt = 0;\n    for (long i = 0; i < n; i++)\n    {\n        long a_i =\
    \ i * i - i + 1;\n        for (long j = i + 1; j < n; j++)\n        {\n      \
    \      long a_j = j * j - j + 1;\n            for (long k = j + 1; k < n; k++)\n\
    \            {\n                long a_k = k * k - k + 1;\n                if\
    \ ((a_i + a_j + a_k) % 3 == 0)\n                {\n                    cnt++;\n\
    \                }\n            }\n        }\n    }\n    return cnt;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpno47jpby.d(43): unittest failure

    ----------------

    ??:? _d_unittestp [0x427de5]

    ??:? void tmpno47jpby.__unittest_L39_C1() [0x427af0]

    ??:? void tmpno47jpby.__modtest() [0x427b68]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a99e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fabd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]

    ??:? runModuleUnitTests [0x42b8e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428234]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164152
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  int result = 0;\n    for (int i = 1; i < n - 1; i++)\n    {\n        for (int\
    \ j = i + 1; j < n; j++)\n        {\n            for (int k = j + 1; k <= n; k++)\n\
    \            {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k\
    \ + 1) % 3 == 0)\n                {\n                    result++;\n         \
    \       }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164152
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long n_sqrt_3 = (long)ceil(pow(n, 1.0/3.0));\n    long res = 0;\n    for (long\
    \ i = 1; i <= n_sqrt_3; i++)\n    {\n        long a = i * i - i + 1;\n       \
    \ for (long j = i + 1; j <= n_sqrt_3; j++)\n        {\n            long b = j\
    \ * j - j + 1;\n            if ((a + b) % 3 != 0)\n                continue;\n\
    \            auto k = 2.0 * (a + b) / 3 - i - j;\n            if (k <= n && k\
    \ > j)\n                res++;\n        }\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp__6u7qsm.d(20): Error: C style cast illegal, use `cast(long)ceil(pow(n,
    1.00000 / 3.00000))`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp__6u7qsm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164152
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  // long total = 0;\n    // for (long i = 1; i < n; i++) {\n    //     for (long\
    \ j = i + 1; j < n; j++) {\n    //         if ((i * i - i + 1 + j * j - j + 1)\
    \ % 3 == 0) {\n    //             total++;\n    //         }\n    //     }\n \
    \   // }\n    // return total;\n    auto result = 0L;\n    auto n2 = n * n;\n\
    \    foreach (i; 1..n) {\n        auto temp = n2 - i * i;\n        auto count\
    \ = temp / (3 * i);\n        if (temp % (3 * i) == 0) {\n            result +=\
    \ count;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpm90w1xd3.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x427da5]

    ??:? void tmpm90w1xd3.__unittest_L40_C1() [0x427aac]

    ??:? void tmpm90w1xd3.__modtest() [0x427b24]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bacb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a95e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42faf1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffa0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa7d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a935]

    ??:? runModuleUnitTests [0x42b8a1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164152
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  alias T = long;\n    long res = 0;\n    const long mod = 3;\n    foreach(i,\
    \ T; 0..n-2)\n    {\n        foreach(j, T; i+1..n-1)\n        {\n            foreach(k,\
    \ T; j+1..n)\n            {\n                if(((i+1)*(i+1)-(i+1)+1 + (j+1)*(j+1)-(j+1)+1\
    \ + (k+1)*(k+1)-(k+1)+1) % mod == 0)\n                {\n                    res++;\n\
    \                }\n            }\n        }\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4enuzr02.d(23): Error: found `..` when expecting `)`

    /tmp/tmp4enuzr02.d(23): Error: found `)` when expecting `;` following statement

    /tmp/tmp4enuzr02.d(25): Error: found `..` when expecting `)`

    /tmp/tmp4enuzr02.d(25): Error: found `)` when expecting `;` following statement

    /tmp/tmp4enuzr02.d(27): Error: found `..` when expecting `)`

    /tmp/tmp4enuzr02.d(27): Error: found `)` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4enuzr02.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164152
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  if (n < 3)\n        return 0;\n    long count = 0;\n    for (long i = 0; i\
    \ < n - 2; i++)\n    {\n        for (long j = i + 1; j < n - 1; j++)\n       \
    \ {\n            for (long k = j + 1; k < n; k++)\n            {\n           \
    \     if (((i * i - i + 1) + (j * j - j + 1) + (k * k - k + 1)) % 3 == 0)\n  \
    \                  count++;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n    First level of optimization: \n    Change array to tuple.\n    Change\
    \ i, j, k to uint, because array and tuple index can be only positive.\n    For\
    \ optimization you can use std.math.isMultiple.\n*/\nlong get_max_triples2(long\
    \ n) \n{\n    if (n < 3)\n        return 0;\n    auto a = tuple(iota(n).map!(x\
    \ => x * x - x + 1));\n    long count = 0;\n    for (uint i = 0; i < n - 2; i++)\n\
    \    {\n        for (uint j = i + 1; j < n - 1; j++)\n        {\n            for\
    \ (uint k = j + 1; k < n; k++)\n            {\n                if (isMultiple(a[i]\
    \ + a[j] + a[k], 3))\n                    count++;\n            }\n        }\n\
    \    }\n    return count;\n}\n/*\n    Second level of optimization: \n    Use\
    \ the fact that a[i] + a[j] + a[k] will only be a multiple of 3 \n    if both\
    \ of the following are true:\n        1. a[i] + a[j] is a multiple of 3.\n   \
    \     2. a[j] + a[k] is a multiple of 3.\n    So you can iterate through the list\
    \ of a, \n    and save each number with how many numbers before it are multiples\
    \ of 3.\n    Then for each a[i] you can calculate the number of k for which a[i]\
    \ + a[j] + a[k]\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L)\
    \ == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n\
    \    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpshxk7oyl.d(61): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpshxk7oyl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164152
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long res=0L;\n    int mod3;\n    foreach(i;0..n)\n    {\n        mod3=cast(int)((i*i-i+1)%3);\n\
    \        res+=mod3==0?n-i-1:((n-i-1)/3)*2;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpyvwpk6_s.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d9d]

    ??:? void tmpyvwpk6_s.__unittest_L29_C1() [0x427aa4]

    ??:? void tmpyvwpk6_s.__modtest() [0x427b1c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bac3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a956]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fae9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff98]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa75]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]

    ??:? runModuleUnitTests [0x42b899]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281ec]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164152
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[(int)n];\n    for (int i = 0; i < n; i++) \n    {\n   \
    \     a[i] = (i+1) * (i+1) - (i+1) + 1;\n    }\n    int count = 0;\n    for (int\
    \ i = 0; i < n; i++) \n    {\n        for (int j = i+1; j < n; j++) \n       \
    \ {\n            for (int k = j+1; k < n; k++) \n            {\n             \
    \   if ((a[i] + a[j] + a[k]) % 3 == 0)\n                    count++;\n       \
    \     }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphhu3x8jn.d(20): Error: C style cast illegal, use `cast(int)n`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphhu3x8jn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164152
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  int mod = n % 3;\n    mod = n - mod;\n    long sum = n * n;\n    long res =\
    \ 0;\n    long a = n / 3;\n    long b = 2 * n / 3;\n    long c = n;\n    while\
    \ (mod >= 1)\n    {\n        if (a + b + c == sum && (a + b) % 3 == 0)\n     \
    \       res++;\n        a--;\n        b++;\n        c--;\n        mod -= 3;\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6qgniubh.d(21): Error: cannot implicitly convert expression `n
    - cast(long)mod` of type `long` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6qgniubh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164152
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long ret = 0;\n    auto a = new long[][]();\n    a = new long[][]();\n    a[0]\
    \ = new long[]{1L, 3L, 7L, 13L, 21L};\n    a[1] = new long[]{3L, 9L, 15L, 21L,\
    \ 27L};\n    a[2] = new long[]{7L, 15L, 23L, 31L, 39L};\n    a[3] = new long[]{13L,\
    \ 21L, 31L, 41L, 51L};\n    a[4] = new long[]{21L, 27L, 39L, 51L, 63L};\n    foreach\
    \ (i; 1 .. n - 2L)\n    {\n        foreach (j; i + 1L .. n - 1L)\n        {\n\
    \            foreach (k; j + 1L .. n)\n            {\n                if ((a[i\
    \ - 1L][j - i - 1L] + a[i - 1L][k - i - 1L] + a[j - 1L][k - j - 1L]) % 3L == 0L)\n\
    \                {\n                    ret++;\n                }\n          \
    \  }\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate =\
    \ get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp61p8e63j.d(23): Error: found `{` when expecting `;` following statement

    /tmp/tmp61p8e63j.d(23): Error: found `}` when expecting `;` following statement

    /tmp/tmp61p8e63j.d(23): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmp61p8e63j.d(24): Error: found `{` when expecting `;` following statement

    /tmp/tmp61p8e63j.d(24): Error: found `}` when expecting `;` following statement

    /tmp/tmp61p8e63j.d(24): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmp61p8e63j.d(25): Error: found `{` when expecting `;` following statement

    /tmp/tmp61p8e63j.d(25): Error: found `}` when expecting `;` following statement

    /tmp/tmp61p8e63j.d(25): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmp61p8e63j.d(26): Error: found `{` when expecting `;` following statement

    /tmp/tmp61p8e63j.d(26): Error: found `}` when expecting `;` following statement

    /tmp/tmp61p8e63j.d(26): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmp61p8e63j.d(27): Error: found `{` when expecting `;` followin'
  stdout: ''
  timestamp: 1660164152
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    foreach(i; 0..n)\n        a[i] = i * i - i + 1;\n\
    \    long res = 0;\n    foreach(i; 1..n)\n        foreach(j; i+1..n)\n       \
    \     foreach(k; j+1..n)\n                if((a[i] + a[j] + a[k]) % 3 == 0) res++;\n\
    \    return res;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n \
    \   assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpc2ffo5lq.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x42817d]

    ??:? void tmpc2ffo5lq.__unittest_L30_C1() [0x427ea5]

    ??:? void tmpc2ffo5lq.__modtest() [0x427efc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c17b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b00e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430299]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430748]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430225]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afe5]

    ??:? runModuleUnitTests [0x42bf51]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428640]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164152
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long i = 0, j = 0, k = 0;\n    //std.range.iota(1L, n+1)\
    \ is [1L, 2L, 3L, 4L, 5L]\n    //std.algorithm.map is to make a[] as [1, 3, 7,\
    \ 13, 21]\n    //std.algorithm.array is to make a[] as an array, not Range\n \
    \   int[] a = std.algorithm.array(std.algorithm.map!(d => d*d - d + 1)(std.range.iota(1L,\
    \ n+1)));\n    foreach(ref i; a)\n    {\n        foreach(ref j; a[i+1..$])\n \
    \       {\n            foreach(ref k; a[j+1..$])\n            {\n            \
    \    if(i + j + k == 0)\n                {\n                    result++;\n  \
    \              }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpthc6i4pr.d(25): Error: undefined identifier `algorithm` in package
    `std`

    /tmp/tmpthc6i4pr.d(26): Error: variable `i` is shadowing variable `tmpthc6i4pr.get_max_triples.i`

    /tmp/tmpthc6i4pr.d(28): Error: variable `j` is shadowing variable `tmpthc6i4pr.get_max_triples.j`

    /tmp/tmpthc6i4pr.d(30): Error: variable `k` is shadowing variable `tmpthc6i4pr.get_max_triples.k`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpthc6i4pr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164152
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  auto m3 = n / 3;\n    return (m3-1)*m3/2;\n}\nunittest\n{\n    alias candidate\
    \ = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpczf2a7wn.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d45]

    ??:? void tmpczf2a7wn.__unittest_L23_C1() [0x427a50]

    ??:? void tmpczf2a7wn.__modtest() [0x427ac8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba6b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a8fe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fa91]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff40]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa1d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8d5]

    ??:? runModuleUnitTests [0x42b841]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428194]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164152
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long ans = 0;\n    foreach(i, 1..n)\n    {\n        long b = i * i - i + 1;\n\
    \        //printf(\"%ld \", b);\n        foreach(j, i + 1..n)\n        {\n   \
    \         long c = j * j - j + 1;\n            //printf(\"(%ld, %ld) \", b, c);\n\
    \            if((b + c) % 3 != 0) continue;\n            foreach(k, j + 1..n)\n\
    \            {\n                long d = k * k - k + 1;\n                //printf(\"\
    [%ld, %ld, %ld] \", b, c, d);\n                if((b + c + d) % 3 == 0) ans++;\n\
    \            }\n        }\n    }\n    return ans;\n}\nunittest\n{\n    alias candidate\
    \ = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmadftxgp.d(21): Error: basic type expected, not `1`

    /tmp/tmpmadftxgp.d(21): Error: no identifier for declarator `_error_`

    /tmp/tmpmadftxgp.d(21): Error: found `1` when expecting `;`

    /tmp/tmpmadftxgp.d(21): Error: expression expected, not `..`

    /tmp/tmpmadftxgp.d(21): Error: found `n` when expecting `)`

    /tmp/tmpmadftxgp.d(21): Error: found `)` instead of statement

    /tmp/tmpmadftxgp.d(25): Error: no identifier for declarator `i`

    /tmp/tmpmadftxgp.d(25): Error: found `+` when expecting `;`

    /tmp/tmpmadftxgp.d(25): Error: found `..` when expecting `)`

    /tmp/tmpmadftxgp.d(25): Error: found `)` when expecting `;` following statement

    /tmp/tmpmadftxgp.d(30): Error: no identifier for declarator `j`

    /tmp/tmpmadftxgp.d(30): Error: found `+` when expecting `;`

    /tmp/tmpmadftxgp.d(30): Error: found `..` when expecting `)`

    /tmp/tmpmadftxgp.d(30): Error: found `)` when expecting `;` following statement

    /tmp/tmpmadftxgp.d(38): Error: declaration expected, not `return`

    /tmp/tmpmadftxgp.d(39): Error: unrecognized declaration'
  stdout: ''
  timestamp: 1660164152
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  size_t result = 0;\n    if (n > 0)\n    {\n        // compute a[i]\n      \
    \  size_t* a = new size_t[n];\n        size_t* a_ = a;\n        size_t* a_end\
    \ = a + n;\n        size_t i = 1;\n        while (a_ != a_end)\n        {\n  \
    \          *a_ = i * i - i + 1;\n            ++a_;\n            ++i;\n       \
    \ }\n        /*\n        for (size_t* a_ = a; a_ != a_end; ++a_)\n        {\n\
    \            writeln(*a_);\n        }\n        */\n        // compute (a[i], a[j],\
    \ a[k]) for i < j < k\n        for (size_t i = 0; i < n - 2; ++i)\n        {\n\
    \            for (size_t j = i + 1; j < n - 1; ++j)\n            {\n         \
    \       for (size_t k = j + 1; k < n; ++k)\n                {\n              \
    \      if ((a[i] + a[j] + a[k]) % 3 == 0)\n                    {\n           \
    \             ++result;\n                    }\n                }\n          \
    \  }\n        }\n        // delete a[i]\n        delete[] a;\n    }\n    return\
    \ result;\n}\n/*\n    Get the maximum possible length of a subsequence such that\
    \ the sum of its elements is a multiple of M.\nunittest\n{\n    alias candidate\
    \ = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnryphq6d.d(55): Error: found `a` when expecting `;` following statement

    /tmp/tmpnryphq6d.d(55): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmpnryphq6d.d(59): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnryphq6d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164152
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  int[] a = new int[cast(int)n];\n    long res = 0;\n    foreach(i; 0..cast(int)n)\n\
    \    {\n        a[i] = i * i - i + 1;\n    }\n    foreach(i; 0..cast(int)n)\n\
    \    {\n        foreach(j; i+1..cast(int)n)\n        {\n            foreach(k;\
    \ j+1..cast(int)n)\n            {\n                if((a[i] + a[j] + a[k]) % 3\
    \ == 0)\n                {\n                    res++;\n                }\n  \
    \          }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660164152
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    long[long] array;\n    long[long] triples;\n    long\
    \ counter = 0;\n    foreach(i; 1..n+1)\n    {\n        array[i] = i*i - i + 1;\n\
    \    }\n    foreach(i; 1..n+1)\n    {\n        foreach(j; i+1..n+1)\n        {\n\
    \            foreach(k; j+1..n+1)\n            {\n                if(array[i]\
    \ + array[j] + array[k] % 3 == 0)\n                {\n                    triples[counter]\
    \ = tuple(array[i], array[j], array[k]);\n                    ++counter;\n   \
    \             }\n            }\n        }\n    }\n    return counter;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn_ulro_v.d(36): Error: cannot implicitly convert expression `tuple(array[i],
    array[j], array[k])` of type `Tuple!(long, long, long)` to `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn_ulro_v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164152
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long res = 0;\n    for (long i = 1; i < n - 1; i++) \n    {\n        for (long\
    \ j = i + 1; j < n; j++) \n        {\n            for (long k = j + 1; k <= n;\
    \ k++) \n            {\n                if ((i*i - i + 1 + j*j - j + 1 + k*k -\
    \ k + 1) % 3 == 0) \n                {\n                    res++;\n         \
    \       }\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n\
    \    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164152
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long res = 0;\n    for (size_t i = 0; i < n; i++)\n    {\n        for (size_t\
    \ j = i + 1; j < n; j++)\n        {\n            for (size_t k = j + 1; k < n;\
    \ k++)\n            {\n                if ((i * i - i + 1 + j * j - j + 1 + k\
    \ * k - k + 1) % 3 == 0)\n                {\n                    res++;\n    \
    \            }\n            }\n        }\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpymyr1pag.d(40): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ddd]

    ??:? void tmpymyr1pag.__unittest_L36_C1() [0x427ae4]

    ??:? void tmpymyr1pag.__modtest() [0x427b5c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb03]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a996]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb29]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fab5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]

    ??:? runModuleUnitTests [0x42b8d9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42822c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164153
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n\t\
    alias array_type = int[];\n\tarray_type a;\n\tforeach(i; 0 .. n)\n\t{\n\t\ta ~=\
    \ cast(int)(i * i - i + 1);\n\t}\n\tlong result = 0;\n\tforeach(i; 0 .. a.length)\n\
    \t{\n\t\tforeach(j; i + 1 .. a.length)\n\t\t{\n\t\t\tforeach(k; j + 1 .. a.length)\n\
    \t\t\t{\n\t\t\t\tresult += (a[i] + a[j] + a[k]) % 3 == 0 ? 1 : 0;\n\t\t\t}\n\t\
    \t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpivec8nsr.d(43): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281ad]

    ??:? void tmpivec8nsr.__unittest_L39_C1() [0x427eb4]

    ??:? void tmpivec8nsr.__modtest() [0x427f2c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cb17]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b9aa]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303fd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308ac]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430389]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b981]

    ??:? runModuleUnitTests [0x42c8ed]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428670]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164152
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  \n    long[] a = new long[cast(size_t)n];\n    long[] b = new long[cast(size_t)n];\n\
    \    long[] c = new long[cast(size_t)n];\n    foreach(i, e; a)\n    {\n      \
    \  a[i] = (i + 1L) * (i + 1L) - (i + 1L) + 1L;\n    }\n    foreach(i, e; b)\n\
    \    {\n        b[i] = a[i] % 3L;\n    }\n    foreach(i, e; c)\n    {\n      \
    \  c[i] = b[i] % 3L;\n    }\n    long[] d = zip(b, c);\n    long count = 0L;\n\
    \    foreach(e; d)\n    {\n        tuple!(long, long) tup = e;\n        long a1\
    \ = tup[0];\n        long a2 = tup[1];\n        if (a1 + a2 == 0L)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n    \n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxi4q3fa5.d(36): Error: undefined identifier `zip`

    /tmp/tmpxi4q3fa5.d(40): Error: `tuple!(long, long)` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxi4q3fa5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164152
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  // if (n == 1L) return 0L;\n    // else if (n == 2L) return 0L;\n    // else\
    \ if (n == 3L) return 1L;\n    // else if (n == 4L) return 1L;\n    // else if\
    \ (n == 5L) return 1L;\n    // else return n-3;\n    long count_triples = 0L;\n\
    \    long[] a = new long[n];\n    for (long i = 0L; i < n; i++)\n    {\n     \
    \   a[i] = i * i - i + 1;\n    }\n    for (long i = 0L; i < n-2; i++)\n    {\n\
    \        for (long j = i+1; j < n-1; j++)\n        {\n            for (long k\
    \ = j+1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0)\n                {\n                    count_triples++;\n       \
    \         }\n            }\n        }\n    }\n    return count_triples;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp44h2sj9k.d(51): unittest failure

    ----------------

    ??:? _d_unittestp [0x428145]

    ??:? void tmp44h2sj9k.__unittest_L47_C1() [0x427e4c]

    ??:? void tmp44h2sj9k.__modtest() [0x427ec4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c143]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afd6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430261]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430710]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afad]

    ??:? runModuleUnitTests [0x42bf19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428608]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164153
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  if (n < 3) \n        return 0;\n    long * a = new long[](n);\n    foreach\
    \ (i, v; a)\n        v = (i+1) * (i+1) - (i+1) + 1;\n    long cnt = 0;\n    for\
    \ (size_t i = 0; i < n - 2; i++)\n        for (size_t j = i + 1; j < n - 1; j++)\n\
    \            for (size_t k = j + 1; k < n; k++)\n                if ((a[i] + a[j]\
    \ + a[k]) % 3 == 0)\n                    cnt++;\n    return cnt;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb6pknfdd.d(22): Error: cannot implicitly convert expression `new
    long[](cast(ulong)n)` of type `long[]` to `long*`

    /tmp/tmpb6pknfdd.d(23): Error: invalid `foreach` aggregate `a`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb6pknfdd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164152
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  import std.algorithm : filter, map, reduce;\n    long[long] a;\n    long[long]\
    \ b;\n    long[long] c;\n    long[long] d;\n    long[long] e;\n    long[long]\
    \ f;\n    long[long] g;\n    long[long] h;\n    long[long] i;\n    long[long]\
    \ j;\n    long[long] k;\n    long[long] l;\n    long[long] m;\n    long[long]\
    \ o;\n    long[long] p;\n    long[long] q;\n    long[long] r;\n    long[long]\
    \ s;\n    long[long] t;\n    long[long] u;\n    long[long] v;\n    long[long]\
    \ w;\n    long[long] x;\n    long[long] y;\n    long[long] z;\n    return a.length;\n\
    }\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L)\
    \ == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n\
    \    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpp3w1lyrf.d(52): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d4d]

    ??:? void tmpp3w1lyrf.__unittest_L48_C1() [0x427a54]

    ??:? void tmpp3w1lyrf.__modtest() [0x427acc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba9f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a932]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff74]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa51]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a909]

    ??:? runModuleUnitTests [0x42b875]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164153
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  auto bs = map!(a => a * a - a + 1, iota(1L, n + 1L));\n    long mult_3_cnt\
    \ = 0L;\n    foreach(i; 0 .. n)\n    {\n        foreach(j; i + 1 .. n)\n     \
    \   {\n            foreach(k; j + 1 .. n)\n            {\n                if ((bs[i]\
    \ + bs[j] + bs[k]) % 3L == 0L)\n                {\n                    mult_3_cnt++;\n\
    \                }\n            }\n        }\n    }\n    return mult_3_cnt;\n\
    }\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L)\
    \ == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n\
    \    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_sh9w5uq.d(20): Error: template instance `map!((a) => a * a - a
    + 1, iota(1L, n + 1L))` template `map` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_sh9w5uq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164152
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    for (long i = 0; i < n; i++)\n    {\n        for (long\
    \ j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n\
    \            {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k\
    \ + 1) % 3 == 0)\n                {\n                    result++;\n         \
    \       }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmptacx6eu7.d(40): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dd5]

    ??:? void tmptacx6eu7.__unittest_L36_C1() [0x427adc]

    ??:? void tmptacx6eu7.__modtest() [0x427b54]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bafb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a98e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb21]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42faad]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]

    ??:? runModuleUnitTests [0x42b8d1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428224]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164153
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  enum size_t count_for_triple = 0u;\n    //enum size_t [] data_array = new size_t[n];\n\
    \    auto data_array = new int[n];\n    foreach(i, index; 0 .. n) \n    {\n  \
    \      data_array[index] = (index + 1) * (index + 1) - (index + 1) + 1;\n    }\n\
    \    foreach(i, index; 0 .. n - 2) \n    {\n        foreach(j, index_inner; i\
    \ + 1 .. n - 1) \n        {\n            foreach(k, index_inner_2; j + 1 .. n)\
    \ \n            {\n                if( (data_array[index] + data_array[index_inner]\
    \ + data_array[index_inner_2]) % 3 == 0)\n                {\n                \
    \    count_for_triple++;\n                }\n            }\n        }\n    }\n\
    \    return cast(long)count_for_triple;\n}\nunittest\n{\n    alias candidate =\
    \ get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd8hbkgqn.d(23): Error: found `..` when expecting `)`

    /tmp/tmpd8hbkgqn.d(23): Error: found `)` when expecting `;` following statement

    /tmp/tmpd8hbkgqn.d(27): Error: found `..` when expecting `)`

    /tmp/tmpd8hbkgqn.d(27): Error: found `)` when expecting `;` following statement

    /tmp/tmpd8hbkgqn.d(29): Error: found `..` when expecting `)`

    /tmp/tmpd8hbkgqn.d(29): Error: found `)` when expecting `;` following statement

    /tmp/tmpd8hbkgqn.d(31): Error: found `..` when expecting `)`

    /tmp/tmpd8hbkgqn.d(31): Error: found `)` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd8hbkgqn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164152
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  auto arr = new Tuple!(size_t, size_t, size_t)[](n);\n    auto c = 0;\n    auto\
    \ i = 1;\n    while(i <= n)\n    {\n        c += 1;\n        arr[i - 1] = tuple(i,\
    \ i*i, i*i - i + 1);\n        i += 1;\n    }\n    return cast(long)arr;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpon91aj3e.d(29): Error: cannot cast expression `arr` of type `Tuple!(ulong,
    ulong, ulong)[]` to `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpon91aj3e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164152
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  immutable int length = cast(int)n;\n    auto a = new int[](length);\n    foreach(i;\
    \ 0..length)\n    {\n        a[i] = i * i - i + 1;\n    }\n    int counter = 0;\n\
    \    //loop three times.\n    foreach(i; 0..length)\n    {\n        foreach(j;\
    \ i+1..length)\n        {\n            foreach(k; j+1..length)\n            {\n\
    \                if((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n      \
    \              counter++;\n                }\n            }\n        }\n    }\n\
    \    return counter;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpycp6fr9v.d(47): unittest failure

    ----------------

    ??:? _d_unittestp [0x428135]

    ??:? void tmpycp6fr9v.__unittest_L43_C1() [0x427e40]

    ??:? void tmpycp6fr9v.__modtest() [0x427eb8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c10f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afa2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43022d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4306dc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301b9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af79]

    ??:? runModuleUnitTests [0x42bee5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285f8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164153
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[long] arr;\n    foreach(i; 0..n)\n    {\n        long temp = i * i - i\
    \ + 1;\n        if(temp % 3 == 0)\n        {\n            arr[i] = temp;\n   \
    \     }\n    }\n    // writeln(arr);\n    long l = arr.length;\n    long count\
    \ = 0;\n    foreach(i; 1..l-2)\n    {\n        foreach(j; i+1..l-1)\n        {\n\
    \            foreach(k; j+1..l)\n            {\n                if(arr[i] + arr[j]\
    \ + arr[k] == 0)\n                {\n                    count++;\n          \
    \      }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpcsc21ksc.d(51): unittest failure

    ----------------

    ??:? _d_unittestp [0x4288d9]

    ??:? void tmpcsc21ksc.__unittest_L47_C1() [0x427cfc]

    ??:? void tmpcsc21ksc.__modtest() [0x427d74]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d827]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428736]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a741]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42a7d0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a6cd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42870d]

    ??:? runModuleUnitTests [0x42d5fd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4293ec]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164153
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{ \n \
    \   long sum = 0L;\n    for (int i = 1; i < n; i++) \n    { \n        for (int\
    \ j = i + 1; j < n; j++) \n        { \n            for (int k = j + 1; k < n;\
    \ k++) \n            { \n                if ((i * i - i + 1 + j * j - j + 1 +\
    \ k * k - k + 1) % 3 == 0) \n                { \n                    ++sum; \n\
    \                } \n            } \n        } \n    } \n    return sum; \n} \n\
    unittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L)\
    \ == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n\
    \    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmph0c0itj4.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x427db5]

    ??:? void tmph0c0itj4.__unittest_L36_C1() [0x427ae1]

    ??:? void tmph0c0itj4.__modtest() [0x427b38]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42badb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a96e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb01]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffb0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa8d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a945]

    ??:? runModuleUnitTests [0x42b8b1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428204]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164153
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \   long i = 0L;\n     long j = 0L;\n     long k = 0L;\n     long result = 0L;\n\
    \     long r = 0L;\n     long test = 0L;\n     long[] a = null;\n     a = new\
    \ long[cast(size_t)n];\n     for (i = 0L; i < n; i++)\n     {\n         a[cast(size_t)i]\
    \ = i * i - i + 1L;\n     }\n     for (i = 0L; i < n; i++)\n     {\n         for\
    \ (j = i + 1L; j < n; j++)\n         {\n             for (k = j + 1L; k < n; k++)\n\
    \             {\n                 test = a[cast(size_t)i] + a[cast(size_t)j] +\
    \ a[cast(size_t)k];\n                 if (test % 3L == 0L)\n                 {\n\
    \                     result += 1L;\n                 }\n             }\n    \
    \     }\n     }\n     return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpfiu3xm42.d(52): unittest failure

    ----------------

    ??:? _d_unittestp [0x42814d]

    ??:? void tmpfiu3xm42.__unittest_L48_C1() [0x427e58]

    ??:? void tmpfiu3xm42.__modtest() [0x427ed0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c14b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afde]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430269]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430718]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301f5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afb5]

    ??:? runModuleUnitTests [0x42bf21]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428610]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164153
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  return n*(n-1)*(n-2)/6;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpxk3fat8e.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d45]

    ??:? void tmpxk3fat8e.__unittest_L22_C1() [0x427a4c]

    ??:? void tmpxk3fat8e.__modtest() [0x427ac4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba6b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a8fe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fa91]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff40]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa1d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8d5]

    ??:? runModuleUnitTests [0x42b841]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428194]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164153
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  enum is_valid_triple = \n        mixin(\"return \" ~ \"a[i] + a[j] + a[k]\"\
    ) % 3L == 0L;\n    //@assert(mixin(\"return \" ~ \"1 + 2 + 3\") % 3L == 0L);\n\
    unittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L)\
    \ == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n\
    \    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp74fk4r7i.d(23): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp74fk4r7i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164152
