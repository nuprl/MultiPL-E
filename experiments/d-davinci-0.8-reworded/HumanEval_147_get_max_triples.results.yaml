name: HumanEval_147_get_max_triples
language: d
results:
- program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  auto l = new long[](n);\n    long cnt = 0;\n    foreach(i, l)\n    {\n    \
    \    l[i] = i * i - i + 1;\n    }\n    foreach(i, l)\n    {\n        foreach(j,\
    \ l[i + 1 .. $])\n        {\n            foreach(k, l[j + 1 .. $])\n         \
    \   {\n                if((l[i] + l[j] + l[k]) % 3 == 0)\n                {\n\
    \                    ++cnt;\n                }\n            }\n        }\n   \
    \ }\n    return cnt;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd4v17te1.d(22): Error: no identifier for declarator `l`\\n/tmp/tmpd4v17te1.d(22):\
    \ Error: found `)` when expecting `;`\\n/tmp/tmpd4v17te1.d(26): Error: found `foreach`\
    \ when expecting `)`\\n/tmp/tmpd4v17te1.d(28): Error: no identifier for declarator\
    \ `l[i + 1 .. __dollar]`\\n/tmp/tmpd4v17te1.d(28): Error: found `)` when expecting\
    \ `;`\\n/tmp/tmpd4v17te1.d(30): Error: no identifier for declarator `l[j + 1 ..\
    \ __dollar]`\\n/tmp/tmpd4v17te1.d(30): Error: found `)` when expecting `;`\\n/tmp/tmpd4v17te1.d(37):\
    \ Error: found `}` when expecting `)`\\n/tmp/tmpd4v17te1.d(38): Error: found `}`\
    \ instead of statement\\n/tmp/tmpd4v17te1.d(39): Error: found `return` when expecting\
    \ `)`\\n/tmp/tmpd4v17te1.d(41): Error: found `unittest` when expecting `;` following\
    \ statement\\n/tmp/tmpd4v17te1.d(50): Error: found `End of File` when expecting\
    \ `}` following compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\",\
    \ \"-o-\", \"/tmp/tmpd4v17te1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  auto arr = appender!(long[])();\n    long i;\n    for (i = 1; i <= n; i++)\
    \ \n    {\n        arr.put(i * i - i + 1);\n    }\n    long num_triples = 0;\n\
    \    for (i = 0; i < n; i++) \n    {\n        for (long j = i + 1; j < n; j++)\
    \ \n        {\n            for (long k = j + 1; k < n; k++) \n            {\n\
    \                if ((arr[i] + arr[j] + arr[k]) % 3 == 0) \n                {\n\
    \                    num_triples++;\n                }\n            }\n      \
    \  }\n    }\n    return num_triples;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvnob3ccv.d(20): Error: template instance `appender!(long[])`\
    \ template `appender` is not defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpvnob3ccv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  int[] a = new int[n];\n    int count = 0;\n    foreach(idx, i; a)\n    {\n\
    \        a[idx] = i * i - i + 1;\n    }\n    foreach(i; a)\n    {\n        foreach(j;\
    \ a[i + 1 .. $])\n        {\n            foreach(k; a[j + 1 .. $])\n         \
    \   {\n                if((i + j + k) % 3 == 0)\n                {\n         \
    \           count++;\n                }\n            }\n        }\n    }\n   \
    \ return count;\n}\n/*\n    The order of the Fibonacci sequence is a row of numbers\
    \ where every number is the sum of the two numbers directly before it.\n    Your\
    \ task is to write a function that takes in an integer, n, and returns the nth\
    \ number of the Fibonacci sequence.\n    Example:\n    >>> get_fibonacci(1)\n\
    \    1\n    >>> get_fibonacci(2)\n    1\n    >>> get_fibonacci(8)\n    21\n  \
    \  >>> get_fibonacci(0)\n    -1\n*/\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpwpd2ew6h.d(58): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281b5]\\n??:? void tmpwpd2ew6h.__unittest_L54_C1()\
    \ [0x427ec0]\\n??:? void tmpwpd2ew6h.__modtest() [0x427f38]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c18f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b022]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302ad]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430239]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aff9]\\n??:? runModuleUnitTests [0x42bf65]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428678]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285ff]\\n??:? _d_run_main [0x42856a]\\n??:? main [0x427f4b]\\\
    n??:? __libc_start_main [0x7e885554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  // create vector based on n\n    auto size = n as int;\n    auto a = new int[](size);\n\
    \    // fill vector\n    foreach(i, ref item; a)\n    {\n        item = i * i\
    \ - i + 1;\n    }\n    // print vector\n    foreach(i, ref item; a)\n    {\n \
    \       writeln(item);\n    }\n    return 0L;\n}\nunittest\n{\n    alias candidate\
    \ = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt4dtlhh6.d(21): Error: semicolon expected following auto declaration,\
    \ not `as`\\n/tmp/tmpt4dtlhh6.d(21): Error: found `int` when expecting `;` following\
    \ statement\\n/tmp/tmpt4dtlhh6.d(21): Deprecation: use `{ }` for an empty statement,\
    \ not `;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt4dtlhh6.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    long triple_cnt = 0;\n    for (int i = 0; i <\
    \ n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (int i = 0; i\
    \ < n - 2; i++)\n    {\n        for (int j = i + 1; j < n - 1; j++)\n        {\n\
    \            for (int k = j + 1; k < n; k++)\n            {\n                if\
    \ ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    triple_cnt++;\n\
    \                }\n            }\n        }\n    }\n    return triple_cnt;\n\
    }\n// Test #1\nimport testlib.checker.Checker;\nimport testlib.checker.StringUtils;\n\
    import testlib.checker.StringWrapper;\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp31khnlf.d(42): Error: module `Checker` is in file \\'testlib/checker/Checker.d\\\
    ' which cannot be read\\nimport path[0] = /tmp\\nimport path[1] = /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos\\\
    nimport path[2] = /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/druntime/import\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp31khnlf.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  // Write your code here\n    long[] a = new long[(int)n];\n    foreach(i; 0\
    \ .. n)\n    {\n        a[i] = i * i - i + 1;\n    }\n    long result = 0;\n \
    \   foreach(i; 0 .. n)\n    {\n        foreach(j; i+1 .. n)\n        {\n     \
    \       foreach(k; j+1 .. n)\n            {\n                if(a[i] + a[j] +\
    \ a[k] % 3 == 0)\n                {\n                    result++;\n         \
    \       }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8zhr767g.d(21): Error: C style cast illegal, use `cast(int)n`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8zhr767g.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long counter=0L;\n    for(long i=1L;i<n;i++)\n    {\n        for(long j=i+1L;j<n;j++)\n\
    \        {\n            for(long k=j+1L;k<n;k++)\n            {\n            \
    \    if((i*i-i+1L+j*j-j+1L+k*k-k+1L)%3L==0L)\n                {\n            \
    \        counter++;\n                }\n            }\n        }\n    }\n    return\
    \ counter;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L)\
    \ == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n\
    \    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp5hdg5x3v.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ddd]\\n??:? void tmp5hdg5x3v.__unittest_L36_C1()\
    \ [0x427b05]\\n??:? void tmp5hdg5x3v.__modtest() [0x427b5c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb03]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a996]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb29]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a96d]\\n??:? runModuleUnitTests [0x42b8d9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42822c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281b3]\\n??:? _d_run_main [0x42811e]\\n??:? main [0x427b6f]\\\
    n??:? __libc_start_main [0x90830554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long res = 0;\n    foreach(size_t i; 0 .. n - 2)\n    {\n        foreach(size_t\
    \ j; i + 1 .. n - 1)\n        {\n            foreach(size_t k; j + 1 .. n)\n \
    \           {\n                if(i*i - i + 1 + j*j - j + 1 + k*k - k + 1 % 3\
    \ == 0)\n                {\n                    res++;\n                }\n  \
    \          }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpkf91kslf.d(40): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427df5]\\n??:? void tmpkf91kslf.__unittest_L36_C1()\
    \ [0x427b00]\\n??:? void tmpkf91kslf.__modtest() [0x427b78]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb1b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9ae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb41]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42facd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a985]\\n??:? runModuleUnitTests [0x42b8f1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428244]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281cb]\\n??:? _d_run_main [0x428136]\\n??:? main [0x427b8b]\\\
    n??:? __libc_start_main [0xbde9c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long ret = 0;\n    long ai = 0;\n    long aj = 0;\n    long ak = 0;\n    foreach(i;\
    \ 1..n)\n    {\n        ai = i * i - i + 1;\n        foreach(j; (i + 1)..n)\n\
    \        {\n            aj = j * j - j + 1;\n            foreach(k; (j + 1)..n)\n\
    \            {\n                ak = k * k - k + 1;\n                if((ai +\
    \ aj + ak) % 3 == 0)\n                {\n                    ret++;\n        \
    \        }\n            }\n        }\n    }\n    return ret;\n}\n/*\n    TEST\n\
    */\nimport std.stdio;\nunittest\n{\n    alias candidate = get_max_triples;\n\n\
    \    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpi3f0_eyj.d(51): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e15]\\n??:? void tmpi3f0_eyj.__unittest_L46_C1()\
    \ [0x427b41]\\n??:? void tmpi3f0_eyj.__modtest() [0x427b98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb3b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb61]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430010]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42faed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9a5]\\n??:? runModuleUnitTests [0x42b911]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428264]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281eb]\\n??:? _d_run_main [0x428156]\\n??:? main [0x427bab]\\\
    n??:? __libc_start_main [0xfae86554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long total = 0;\n    for (long i = 0; i < n; i++)\n    {\n        for (long\
    \ j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n\
    \            {\n                long v1 = (i + 1) * (i + 1) - (i + 1) + 1;\n \
    \               long v2 = (j + 1) * (j + 1) - (j + 1) + 1;\n                long\
    \ v3 = (k + 1) * (k + 1) - (k + 1) + 1;\n                if ((v1 + v2 + v3) %\
    \ 3 == 0)\n                {\n                    total++;\n                }\n\
    \            }\n        }\n    }\n    return total;\n}\nunittest\n{\n    alias\
    \ candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  enum num = ctfe(3);\n    long[] a = new long[n];\n    foreach(int i, ref el;\
    \ a)\n    {\n        el = i * i - i + 1;\n    }\n    long count = 0;\n    for(int\
    \ i = 0; i < n; i++)\n    {\n        for(int j = i + 1; j < n; j++)\n        {\n\
    \            for(int k = j + 1; k < n; k++)\n            {\n                if((a[i]\
    \ + a[j] + a[k]) % num == 0)\n                {\n                    count++;\n\
    \                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp__60bbnp.d(20): Error: undefined identifier `ctfe`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp__60bbnp.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[int(n)];\n    long count = 0;\n    foreach(i; 0..n)\n \
    \   {\n        a[i] = i * i - i + 1;\n    }\n    foreach(i; 0..n)\n    {\n   \
    \     foreach(j; i+1..n)\n        {\n            foreach(k; j+1..n)\n        \
    \    {\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n\
    \                    ++count;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\n/*\n    We will call the num_vertices function on\
    \ the tree t and the number n. \n    It should return the number of vertices that\
    \ are located at a distance less than or equal to n from the root.\n*/\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqx7blwe8.d(20): Error: cannot implicitly convert expression `n`\
    \ of type `long` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\",\
    \ \"/tmp/tmpqx7blwe8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long result = 0;\n    // for (i in 1..n)\n    for (long i = 1; i <= n; i++)\n\
    \    {\n        long a_i = i * i - i + 1;\n        // for (j in i + 1..n)\n  \
    \      for (long j = i + 1; j <= n; j++)\n        {\n            long a_j = j\
    \ * j - j + 1;\n            // for (k in j + 1..n)\n            for (long k =\
    \ j + 1; k <= n; k++)\n            {\n                long a_k = k * k - k + 1;\n\
    \                // if (a_i + a_j + a_k) % 3 == 0\n                if ((a_i +\
    \ a_j + a_k) % 3 == 0)\n                {\n                    // result += 1\n\
    \                    result += 1;\n                }\n            }\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long count = 0;\n    long mod_sum;\n    for (long a = 1; a < n - 1; a++)\n\
    \    {\n        for (long b = a + 1; b < n; b++)\n        {\n            mod_sum\
    \ = (a * a - a + 1) + (b * b - b + 1);\n            for (long c = b + 1; c <=\
    \ n; c++)\n            {\n                mod_sum += (c * c - c + 1);\n      \
    \          if (mod_sum % 3 == 0)\n                {\n                    count++;\n\
    \                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp0z1_yr68.d(43): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427de5]\\n??:? void tmp0z1_yr68.__unittest_L39_C1()\
    \ [0x427af0]\\n??:? void tmp0z1_yr68.__modtest() [0x427b68]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb0b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a99e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb31]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fabd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a975]\\n??:? runModuleUnitTests [0x42b8e1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428234]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281bb]\\n??:? _d_run_main [0x428126]\\n??:? main [0x427b7b]\\\
    n??:? __libc_start_main [0x6f268554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long t = 0;\n    long hl = (n - 1) / 2;\n    foreach(idx, item; iota(1L, n\
    \ + 1L)) \n    {\n        auto v = item * item - item + 1;\n        if (v % 3\
    \ == 0) \n        {\n            auto x = (hl + 1) / item;\n            auto c\
    \ = idx - hl;\n            auto d = n - idx;\n            if (c >= 0 && d >= 0)\
    \ \n            {\n                t += x * c + x * d - x * x;\n            }\n\
    \        }\n    }\n    return t;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpunrdljnl.d(22): Error: undefined identifier `iota`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpunrdljnl.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  return (n * (n - 1) * (n - 2)) / 6;\n}\nunittest\n{\n    alias candidate =\
    \ get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpsq2f6hoa.d(26): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d45]\\n??:? void tmpsq2f6hoa.__unittest_L22_C1()\
    \ [0x427a4c]\\n??:? void tmpsq2f6hoa.__modtest() [0x427ac4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ba6b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a8fe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fa91]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff40]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa1d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a8d5]\\n??:? runModuleUnitTests [0x42b841]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428194]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42811b]\\n??:? _d_run_main [0x428086]\\n??:? main [0x427ad7]\\\
    n??:? __libc_start_main [0x6d60e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[n];\n    foreach(i, ref e; a)\n    {\n        e = i * i\
    \ - i + 1;\n    }\n    long counter = 0;\n    for(long i = 0; i < n; i++)\n  \
    \  {\n        for(long j = i + 1; j < n; j++)\n        {\n            for(long\
    \ k = j + 1; k < n; k++)\n            {\n                if((a[i] + a[j] + a[k])\
    \ % 3 == 0)\n                {\n                    counter++;\n             \
    \   }\n            }\n        }\n    }\n    return counter;\n}\nunittest\n{\n\
    \    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpk48exeak.d(45): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428125]\\n??:? void tmpk48exeak.__unittest_L41_C1()\
    \ [0x427e30]\\n??:? void tmpk48exeak.__modtest() [0x427ea8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c123]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afb6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430241]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306f0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301cd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42af8d]\\n??:? runModuleUnitTests [0x42bef9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4285e8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42856f]\\n??:? _d_run_main [0x4284da]\\n??:? main [0x427ebb]\\\
    n??:? __libc_start_main [0x73a31554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[] a = new long[to!int(n)];\n    long r=0;\n    for(long i=0;i<n;i++)\n\
    \    {\n        a[i]=i*i-i+1;\n        if(i>1)\n        {\n            for(long\
    \ j=i-1;j>0;j--)\n            {\n                if((a[i]+a[j])%3==0)\n      \
    \          {\n                    for(long k=j-1;k>=0;k--)\n                 \
    \   {\n                        if((a[i]+a[j]+a[k])%3==0)\n                   \
    \     {\n                            r++;\n                        }\n       \
    \             }\n                }\n            }\n        }\n    }\n    return\
    \ r;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L)\
    \ == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n\
    \    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt4vesc1t.d(20): Error: template instance `to!int` template `to`\
    \ is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"-v\",\
    \ \"-o-\", \"/tmp/tmpt4vesc1t.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long[long] a;\n    a[0] = 1;\n    for (long i = 1; i < n; i++) \n    {\n  \
    \      a[i] = a[i - 1] + (2 * i + 1);\n    }\n    long cnt = 0;\n    for (long\
    \ i = 0; i < n - 2; i++) \n    {\n        for (long j = i + 1; j < n - 1; j++)\
    \ \n        {\n            long psum = a[i] + a[j];\n            if (psum % 3\
    \ == 0) \n            {\n                long rem = psum / 3;\n              \
    \  auto m = std.algorithm.lower_bound(a, i + 1, n, rem);\n                if (m\
    \ != n && *m == rem) \n                {\n                    cnt++;\n       \
    \         }\n            }\n        }\n    }\n    return cnt;\n}\nlong calculateMultiplicativePersistence(long\
    \ n)\n{\n\tif (n < 10) return 0;\n\tauto p = n.to!string.reduce!((a, b) => a *\
    \ b).to!long;\n\treturn 1 + calculateMultiplicativePersistence(p);\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnogi_kvv.d(35): Error: undefined identifier `algorithm` in package\
    \ `std`\\n/tmp/tmpnogi_kvv.d(48): Error: no property `to` for type `long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnogi_kvv.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n\
    \    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n  \
    \  long count=0L;\n    if(n==0L)\n        return 0L;\n    if(n<=3L)\n        return\
    \ 0L;\n    if(n<=5L)\n        return 1L;\n    foreach(i;1L..n)\n    {\n      \
    \  foreach(j;i+1L..n)\n        {\n            foreach(k;j+1L..n)\n           \
    \ {\n                if((i*i-i+1L+j*j-j+1L+k*k-k+1L)%3L==0L)\n               \
    \     count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpu_ghvd3b.d(45): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e35]\\n??:? void tmpu_ghvd3b.__unittest_L40_C1()\
    \ [0x427b5d]\\n??:? void tmpu_ghvd3b.__modtest() [0x427bb4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb5b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9ee]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb81]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430030]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb0d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9c5]\\n??:? runModuleUnitTests [0x42b931]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428284]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42820b]\\n??:? _d_run_main [0x428176]\\n??:? main [0x427bc7]\\\
    n??:? __libc_start_main [0xcf8bf554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
