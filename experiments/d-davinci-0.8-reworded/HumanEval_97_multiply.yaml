name: HumanEval_97_multiply
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\nComplete the function that takes\
  \ two integers and returns \n    the product of their unit digits.\n    Assume the\
  \ input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n\
  \    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n \
  \   >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n"
tests: "unittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L,\
  \ 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L,\
  \ 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L,\
  \ 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
  \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
completions: ["{\n    return ((a % 10) * (b % 10));\n}", "{\n    long r1 = (abs(a)\
    \ % 10);\n    long r2 = (abs(b) % 10);\n    return r1 * r2;\n}", "{\n    long\
    \ c = a%10;\n    long d = b%10;\n    return c*d;\n}", "{\n    return (a%10) *\
    \ (b%10);\n}", "{\n    //Remove the minus sign if it exists.\n    auto isPositive\
    \ = (a < 0 ? -1 : 1) * (b < 0 ? -1 : 1);\n    a = abs(a);\n    b = abs(b);\n \
    \   return isPositive * (a % 10) * (b % 10);\n}", "{\n    long [] arr1 = ((a <\
    \ 0L) ? (-a).toString.map!(c => (c - '0').to!long) : a.toString.map!(c => (c -\
    \ '0').to!long)).array;\n    long [] arr2 = ((b < 0L) ? (-b).toString.map!(c =>\
    \ (c - '0').to!long) : b.toString.map!(c => (c - '0').to!long)).array;\n    return\
    \ arr1[$-1] * arr2[$-1];\n}", "{\n    long val = 0;\n    int i;\n    a = abs(a);\n\
    \    b = abs(b);\n    val = mod(a, 10) * mod(b, 10);\n    return val;\n}", "{\n\
    \    // your code here\n    return abs(a % 10) * abs(b % 10);\n}", "{\n    return\
    \ (long)(abs(a%10) * abs(b%10));\n}", "{\n    return ((a % 10) * (b % 10));\n\
    }\npublic class MultiplyDigits\n{\n    public static void Main()\n    {\n    \
    \    Console.WriteLine(multiply(148L, 412L));//expected 16L\n        Console.WriteLine(multiply(19L,\
    \ 28L));//expected 72L\n        Console.WriteLine(multiply(2020L, 1851L));//expected\
    \ 0L\n        Console.WriteLine(multiply(14L, -15L));//expected 20L\n    }\n}",
  "{\n    return abs(a) % 10 * abs(b) % 10;\n}", "{\n    return a.getUnits() * b.getUnits();\n\
    }", "{\n    return ((a%10)*(b%10));\n}", "{\n    long aa = a % 10;\n    long bb\
    \ = b % 10;\n    long cc = aa * bb;\n    return cc;\n}", "{\n    long c = abs(a%10)\
    \ * abs(b%10);\n    return c;\n}", "{\n    immutable auto aAbs = a >= 0 ? a :\
    \ -a;\n    immutable auto bAbs = b >= 0 ? b : -b;\n    return (aAbs % 10) * (bAbs\
    \ % 10);\n}", "{\n    Tuple!(long, long) unitDigits(long a)\n    {\n        immutable\
    \ long len = a.length;\n        immutable long tenPower = std.math.pow(10, len\
    \ - 1);\n        return (a / tenPower, a % 10);\n    }\n    auto a_tup = unitDigits(a);\n\
    \    auto b_tup = unitDigits(b);\n    return a_tup[1] * b_tup[1];\n}", "{\n  \
    \  return a%10 * b%10;\n}", "{\n    return abs(a%10) * abs(b%10);\n}", "{\n  \
    \  /*\n    long num1 = a % 10;\n    long num2 = b % 10;\n    auto result = num1\
    \ * num2;\n    return result;\n    */\n    long result = a % 10 * b % 10;\n  \
    \  return result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
