language: d
name: HumanEval_120_maximum
results:
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    immutable int N = arr.length;\n    assert(k > 0 && k <= N);\n\
    \    long[] temp = arr[0..$ - k];\n    std.algorithm.sort(temp);\n    for (int\
    \ i = N - k; i < N; i++)\n    {\n        if (arr[i] > temp[0])\n        {\n  \
    \          temp[0] = arr[i];\n            std.algorithm.sort(temp);\n        }\n\
    \    }\n    return temp;\n}\nunittest\n{\n    alias candidate = maximum;\n\n \
    \   assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphs1r9u1k.d(30): Error: cannot implicitly convert expression `arr.length`
    of type `ulong` to `immutable(int)`

    /tmp/tmphs1r9u1k.d(33): Error: undefined identifier `algorithm` in package `std`

    /tmp/tmphs1r9u1k.d(34): Error: cannot implicitly convert expression `cast(long)N
    - k` of type `long` to `int`

    /tmp/tmphs1r9u1k.d(39): Error: undefined identifier `algorithm` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphs1r9u1k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164015
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    if (k == 0)\n        return [].array();\n    auto arr_s = sort(arr);\n\
    \    auto result = new long[k];\n    foreach (i, element; arr_s[$ - k .. $])\n\
    \        result[i] = element;\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n\
    \    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj93xgq0n.d(31): Error: no property `array` for type `void[]`

    /tmp/tmpj93xgq0n.d(32): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj93xgq0n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164015
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    auto n = arr.length;\n    auto maxHeap = new max_heap_long;\n\
    \    auto i = 0L;\n    auto result = new long[](k);\n    foreach(el; arr)\n  \
    \  {\n        if(i < k)\n        {\n            maxHeap.push(el);\n          \
    \  i++;\n        }\n        else\n        {\n            if(el > maxHeap.top())\n\
    \            {\n                maxHeap.pop();\n                maxHeap.push(el);\n\
    \            }\n        }\n    }\n    for(auto j = n - 1L; j >= 0L; j--)\n   \
    \ {\n        result[j] = maxHeap.top();\n        maxHeap.pop();\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr_w8ix40.d(31): Error: undefined identifier `max_heap_long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr_w8ix40.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164015
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] firstK = new long[(int)k];\n    int i = 0;\n    while\
    \ (i < k) {\n        firstK[i] = arr[i];\n        i += 1;\n    }\n    std.sort(firstK);\n\
    \    int len = arr.length;\n    i = k;\n    while (i < len) {\n        long x\
    \ = arr[i];\n        if (x > firstK[0]) {\n            long j = 0;\n         \
    \   while (j < k) {\n                if (x > firstK[j]) {\n                  \
    \  long tmp = firstK[j];\n                    firstK[j] = x;\n               \
    \     x = tmp;\n                }\n                j += 1;\n            }\n  \
    \      }\n        i += 1;\n    }\n    return firstK;\n}\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphdxj3x83.d(30): Error: C style cast illegal, use `cast(int)k`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphdxj3x83.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164015
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    return arr[$-k .. $].sort().reverse();\n}\nunittest\n{\n  \
    \  alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L,\
    \ -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfrayd9yn.d(30): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfrayd9yn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164015
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    auto heap = PriorityQueue!(long)();\n    for (a; arr)\n   \
    \ {\n        if (heap.length == k)\n        {\n            if (a > heap.front)\n\
    \            {\n                heap.removeFront();\n                heap.add(a);\n\
    \            }\n        }\n        else\n        {\n            heap.add(a);\n\
    \        }\n    }\n    return heap.array.reverse();\n}\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp26ixl0ks.d(31): Error: found `)` when expecting `;` following `for`
    condition

    /tmp/tmp26ixl0ks.d(46): Error: found `return` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp26ixl0ks.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164015
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    arr.sort();\n    long[] r = new long[k];\n    for (long i =\
    \ 0; i < k; i++) \n    {\n        r[i] = arr[arr.length - 1 - i];\n    }\n   \
    \ return r;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3ruufpjr.d(30): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3ruufpjr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164015
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] sortedArray = arr.copy();\n    quickSort(sortedArray,\
    \ 0, arr.length - 1);\n    long[] result = new long[k];\n    for (long i = 0;\
    \ i < k; i++) \n    {\n        result[i] = sortedArray[arr.length - 1 - i];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_2_ifora.d(30): Error: no property `copy` for type `long[]`

    /tmp/tmp_2_ifora.d(31): Error: undefined identifier `quickSort`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_2_ifora.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164015
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    if (k == 0)\n        return new long[0];\n    if (k == arr.length)\n\
    \        return arr;\n    \n    long[] maxArr = new long[(int)k];\n    Heap<long>\
    \ heap = new Heap<long>(less);\n    foreach (long i; arr)\n        heap.insert(i);\n\
    \    \n    for (int i = 0; i < k; i++)\n        maxArr[i] = heap.removeFront();\n\
    \    \n    return maxArr;\n}\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsjhq0bs5.d(35): Error: C style cast illegal, use `cast(int)k`

    /tmp/tmpsjhq0bs5.d(36): Error: found `>` when expecting `.` following long

    /tmp/tmpsjhq0bs5.d(36): Error: found `>` when expecting `.` following long

    /tmp/tmpsjhq0bs5.d(36): Error: found `(` when expecting identifier following `long`.

    /tmp/tmpsjhq0bs5.d(36): Error: found `less` when expecting `;` following statement

    /tmp/tmpsjhq0bs5.d(36): Error: found `)` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsjhq0bs5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164015
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    if ( k <= 0L )\n        return [];\n    else if ( k == 1L )\n\
    \        return [ max(arr) ];\n    else if ( k == arr.length )\n        return\
    \ sort(arr);\n    else\n    {\n        int i = 0;\n        long tmp;\n       \
    \ for (i = 0; i < k; i++)\n        {\n            for (int j = i; j < arr.length;\
    \ j++)\n            {\n                if ( arr[i] < arr[j] )\n              \
    \  {\n                    tmp = arr[i];\n                    arr[i] = arr[j];\n\
    \                    arr[j] = tmp;\n                }\n            }\n       \
    \ }\n    }\n    return arr[0..(int)k];\n}\nunittest\n{\n    alias candidate =\
    \ maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n \
    \   assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo_n236vf.d(53): Error: C style cast illegal, use `cast(int)k`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo_n236vf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164015
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long len = arr.length;\n    // return arr;\n    long num;\n\
    \    long[] ans = new long[k];\n    long[] sorted = new long[len];\n    long[]\
    \ reversed = new long[len];\n    for (long i = 0; i < len; i++)\n    {\n     \
    \   sorted[i] = arr[i];\n    }\n    sort(sorted);\n    for (long i = 0; i < len;\
    \ i++)\n    {\n        reversed[i] = sorted[len - i - 1];\n    }\n    for (long\
    \ i = 0; i < k; i++)\n    {\n        ans[i] = reversed[i];\n    }\n    return\
    \ ans;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy4miht7t.d(40): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy4miht7t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164015
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    // If k == 1 return the maximum number\n    if (k == 1L)\n\
    \    {\n        return [max(arr)];\n    }\n    // If k == arr.length return the\
    \ sorted array\n    else if (k == arr.length)\n    {\n        return sort(arr);\n\
    \    }\n    // Else use a priority queue to sort the array\n    else\n    {\n\
    \        Queue!(long) myQueue = new Queue!(long)();\n        auto tempArr = new\
    \ long[](k);\n        foreach (i; 0..k)\n        {\n            myQueue.put(arr[i]);\n\
    \        }\n        foreach (i; k..arr.length)\n        {\n            auto num\
    \ = myQueue.get();\n            if (arr[i] > num)\n            {\n           \
    \     myQueue.put(arr[i]);\n            }\n            else\n            {\n \
    \               myQueue.put(num);\n            }\n        }\n        tempArr =\
    \ myQueue.getArray();\n        return sort(tempArr);\n    }\n}\nunittest\n{\n\
    \    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) ==\
    \ [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n  \
    \  assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa0e8zq3w.d(33): Error: undefined identifier `max`, did you mean
    function `fmax`?

    /tmp/tmpa0e8zq3w.d(38): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmpa0e8zq3w.d(43): Error: template instance `Queue!long` template `Queue`
    is not defined

    /tmp/tmpa0e8zq3w.d(43): Error: template instance `Queue!long` template `Queue`
    is not defined

    /tmp/tmpa0e8zq3w.d(62): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa0e8zq3w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164015
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] copy = new long[k];\n    for (long i = 0; i < k; i++)\
    \ \n    {\n        copy[i] = arr[i];\n    }\n    std.sort(copy);\n    for (long\
    \ i = k; i < arr.length; i++) \n    {\n        if (arr[i] < copy[0]) \n      \
    \  {\n            continue;\n        }\n        else \n        {\n           \
    \ copy[0] = arr[i];\n            std.sort(copy);\n        }\n    }\n    return\
    \ copy;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4iu69u2w.d(35): Error: undefined identifier `sort` in package `std`

    /tmp/tmp4iu69u2w.d(45): Error: undefined identifier `sort` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4iu69u2w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164015
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[cast(size_t)k];\n    foreach(i, x;\
    \ arr)\n    {\n        if(k > 0)\n        {\n            auto idx = binarySearch([result],\
    \ x);\n            if(idx < 0)\n            {\n                idx = -idx - 1;\n\
    \            }\n            if(idx < k)\n            {\n                arrayMove(result,\
    \ idx + 1, idx, k - idx - 1);\n                result[idx] = x;\n            }\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\
    \n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplm9v9pmk.d(35): Error: undefined identifier `binarySearch`

    /tmp/tmplm9v9pmk.d(42): Error: undefined identifier `arrayMove`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplm9v9pmk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164015
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] ret = new long[cast(int)k];\n    ret[] = numeric_limits.minL;\n\
    \    foreach(e; arr)\n    {\n        if(e > ret[0])\n        {\n            ret[0]\
    \ = e;\n            std.algorithm.sort(ret);\n        }\n    }\n    return ret;\n\
    }\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L,\
    \ 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L,\
    \ 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw8owqw5_.d(31): Error: undefined identifier `numeric_limits`

    /tmp/tmpw8owqw5_.d(37): Error: undefined identifier `algorithm` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw8owqw5_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164015
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    qsort(arr);\n    long[] r = new long[k];\n    for (long i =\
    \ 0L; i < k; i++) {\n        r[i] = arr[arr.length - 1L - i];\n    }\n    return\
    \ r;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjfvc3h31.d(30): Error: undefined identifier `qsort`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjfvc3h31.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164015
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    assert(k <= arr.length);\n    long[] ret = new long[k];\n \
    \   std.heap.priority_queue!(long, \"a > b\") q = new std.heap.priority_queue!(long,\
    \ \"a > b\")();\n    foreach(e; arr)\n    {\n        if(q.length < k)\n      \
    \  {\n            q.push(e);\n        }\n        else\n        {\n           \
    \ if(e > q.top)\n            {\n                q.pop();\n                q.push(e);\n\
    \            }\n        }\n    }\n    foreach(e; q)\n    {\n        ret ~= e;\n\
    \    }\n    return ret;\n}\nunittest\n{\n    alias candidate = maximum;\n\n  \
    \  assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvfovhhx_.d(32): Error: undefined identifier `heap` in package `std`

    /tmp/tmpvfovhhx_.d(32): Error: undefined identifier `heap` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvfovhhx_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164015
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    return arr.sort.drop(arr.length - k);\n}\nunittest\n{\n   \
    \ alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L,\
    \ -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2t4o9uxx.d(30): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2t4o9uxx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164015
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] subset = new long[(int)k];\n    arr.sort;\n    foreach(i,\
    \ v; arr)\n    {\n        subset[i] = v;\n    }\n    return subset;\n}\nunittest\n\
    {\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L)\
    \ == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n\
    \    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcvxh_okb.d(30): Error: C style cast illegal, use `cast(int)k`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcvxh_okb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164015
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    sort(arr);\n    long[] max = new long[(int)k];\n    for (long\
    \ i = 0; i < k; i++)\n    {\n        max[(int)i] = arr[(int)(arr.length - 1 -\
    \ i)];\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = maximum;\n\
    \n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaxk6aly7.d(31): Error: C style cast illegal, use `cast(int)k`

    /tmp/tmpaxk6aly7.d(34): Error: C style cast illegal, use `cast(int)i`

    /tmp/tmpaxk6aly7.d(34): Error: C style cast illegal, use `cast(int)(arr.length
    - 1 - i)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaxk6aly7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164015
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long n = arr.length;\n    k = min(k, n);\n    if (k == 0) \n\
    \        return new long[0];\n    return arr[0..n].sort()[n - k..n];\n}\nunittest\n\
    {\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L)\
    \ == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n\
    \    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkh68_zwu.d(31): Error: undefined identifier `min`, did you mean
    function `main`?

    /tmp/tmpkh68_zwu.d(34): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkh68_zwu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164015
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    auto a = sort(arr);\n    return a[a.length - k .. $];\n}\n\
    unittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L,\
    \ 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L,\
    \ 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwq2ib7gy.d(30): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwq2ib7gy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164015
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    int[] maxs = new int[cast(int)k];\n    int maxs_len = 0;\n\
    \    int begin = 0;\n    foreach(i, x; arr)\n    {\n        if(maxs_len == 0)\n\
    \        {\n            maxs[0] = i;\n            maxs_len = 1;\n        }\n \
    \       else if(maxs_len == cast(int)k)\n        {\n            if(arr[maxs[0]]\
    \ < x)\n            {\n                maxs[0] = i;\n                begin = 0;\n\
    \            }\n        }\n        else\n        {\n            maxs[maxs_len]\
    \ = i;\n            maxs_len++;\n        }\n        while(begin + 1 < maxs_len\
    \ && arr[maxs[begin]] < arr[maxs[begin + 1]])\n        {\n            swap(maxs[begin],\
    \ maxs[begin + 1]);\n            begin++;\n        }\n    }\n    return arr[maxs];\n\
    }\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L,\
    \ 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L,\
    \ 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpudbcadv2.d(37): Error: cannot implicitly convert expression `i`
    of type `ulong` to `int`

    /tmp/tmpudbcadv2.d(44): Error: cannot implicitly convert expression `i` of type
    `ulong` to `int`

    /tmp/tmpudbcadv2.d(50): Error: cannot implicitly convert expression `i` of type
    `ulong` to `int`

    /tmp/tmpudbcadv2.d(55): Error: undefined identifier `swap`

    /tmp/tmpudbcadv2.d(59): Error: cannot implicitly convert expression `maxs` of
    type `int[]` to `ulong`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpudbcadv2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164015
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[(int)k];\n    result[0] = std.stdio.__promptLineOfLongs(arr);\n\
    \    for (int i = 1; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n\
    \        {\n            result[0] = arr[i];\n        }\n    }\n    for (int i\
    \ = 1; i < k; i++)\n    {\n        result[i] = std.stdio.__promptLineOfLongs(arr);\n\
    \        for (int j = 0; j < i; j++)\n        {\n            if (result[i] > result[j])\n\
    \            {\n                result[j] = result[i];\n            }\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\
    \n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg9wvrptg.d(30): Error: C style cast illegal, use `cast(int)k`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9wvrptg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164015
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    std.sort(arr);\n    long[] res = new long[cast(int)k];\n  \
    \  long index = cast(long)arr.length - 1;\n    foreach(long i; 0..k)\n    {\n\
    \        res[i] = arr[index];\n        index--;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L)\
    \ == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n\
    \    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpubzfhi03.d(30): Error: undefined identifier `sort` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpubzfhi03.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164015
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    if (k == 0) \n    {\n        return new long[0];\n    }\n \
    \   int n = arr.length;\n    if (k >= n) \n    {\n        arr = arr.dup;\n   \
    \     arr.sort;\n        return arr;\n    }\n    long[] stk = new long[k];\n \
    \   long top = -1;\n    for (int i = 0; i < n; i++) \n    {\n        long x =\
    \ arr[i];\n        if (top < k - 1) \n        {\n            stk[++top] = x;\n\
    \        } \n        else \n        {\n            long j = top;\n           \
    \ while (j >= 0 && stk[j] < x) \n            {\n                j--;\n       \
    \     }\n            if (j < k - 1) \n            {\n                stk[j + 1]\
    \ = x;\n            }\n        }\n    }\n    return stk;\n}\nunittest\n{\n   \
    \ alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L,\
    \ -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzyd5cdvy.d(34): Error: cannot implicitly convert expression `arr.length`
    of type `ulong` to `int`

    /tmp/tmpzyd5cdvy.d(38): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzyd5cdvy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164015
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] res = new long[cast(int)k];\n    for (long i = 0; i\
    \ < arr.length; i++) \n    {\n        long j = max(0L, k - arr.length + i);\n\
    \        while (j < k && arr[cast(int)i] > res[cast(int)j]) \n        {\n    \
    \        j++;\n        }\n        if (j < k) \n        {\n            res[cast(int)j]\
    \ = arr[cast(int)i];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6tdnykyk.d(33): Error: undefined identifier `max`, did you mean
    function `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6tdnykyk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164015
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] retArr = new long[(int)k];\n    int n = 0;\n    while\
    \ (n < k)\n    {\n        long max = 0;\n        int maxI = 0;\n        for (int\
    \ i = 0; i < arr.length; i++)\n        {\n            if (arr[i] >= max)\n   \
    \         {\n                max = arr[i];\n                maxI = i;\n      \
    \      }\n        }\n        retArr[n] = max;\n        arr[maxI] = -1001;\n  \
    \      n++;\n    }\n    return retArr;\n}\nunittest\n{\n    alias candidate =\
    \ maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n \
    \   assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqe4nb0ta.d(30): Error: C style cast illegal, use `cast(int)k`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqe4nb0ta.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164015
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] max = new long[k];\n    foreach(i; 0..k)\n    {\n  \
    \      max[i] = arr[i];\n    }\n    sort(max);\n    for(long i = k; i < arr.length;\
    \ i++)\n    {\n        foreach(j; 0..k)\n        {\n            if(arr[i] > max[j])\n\
    \            {\n                max[j] = arr[i];\n                sort(max);\n\
    \                break;\n            }\n        }\n    }\n    return max;\n}\n\
    unittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L,\
    \ 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L,\
    \ 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_gmw6g7v.d(35): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmp_gmw6g7v.d(43): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_gmw6g7v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164015
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    // For ascending array\n    if (arr[0] < arr[arr.length - 1])\n\
    \    {\n        sort(arr);\n        return arr[arr.length - k..arr.length];\n\
    \    }\n    // For descending array\n    else\n    {\n        sort(arr);\n   \
    \     return arr[0..k];\n    }\n}\nunittest\n{\n    alias candidate = maximum;\n\
    \n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpplr0aopx.d(33): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpplr0aopx.d(39): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpplr0aopx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164015
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    auto n = arr.length;\n    if (n < k)\n    {\n        return\
    \ null;\n    }\n    else if (n == k)\n    {\n        return arr;\n    }\n    else\n\
    \    {\n        auto count = 0L;\n        auto result = new long[cast(ulong)k];\n\
    \        sort(arr);\n        for (n--; n >= 0; n--)\n        {\n            if\
    \ (count < k)\n            {\n                result[count] = arr[n];\n      \
    \          count++;\n            }\n            else\n            {\n        \
    \        break;\n            }\n        }\n        return result;\n    }\n}\n\
    unittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L,\
    \ 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L,\
    \ 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcq6sllf2.d(43): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcq6sllf2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164015
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] max = new long[k];\n    foreach(i; 0 .. k)\n    {\n\
    \        max[i] = -1001L;\n    }\n    foreach(i; 0 .. arr.length)\n    {\n   \
    \     if(arr[i] >= max[0])\n        {\n            max[0] = arr[i];\n        \
    \    sort(max);\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9zwls8tc.d(40): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9zwls8tc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164015
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    if (k == arr.length)\n        return arr;\n    int n = arr.length;\n\
    \    for (int i = 0; i < n-1; i++)\n    {\n        int max_idx = i;\n        for\
    \ (int j = i+1; j < n; j++)\n            if (arr[j] > arr[max_idx])\n        \
    \        max_idx = j;\n        long temp = arr[max_idx];\n        arr[max_idx]\
    \ = arr[i];\n        arr[i] = temp;\n    }\n    return arr[n-k..$];\n}\nunittest\n\
    {\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L)\
    \ == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n\
    \    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb_ho9ads.d(32): Error: cannot implicitly convert expression `arr.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb_ho9ads.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164015
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] answer = new long[(int)k];\n    std.sort(arr);\n   \
    \ for (long i = 0; i < k; i++)\n    {\n        answer[(int)i] = arr[(int)(arr.length\
    \ - i - 1)];\n    }\n    return answer;\n}\nunittest\n{\n    alias candidate =\
    \ maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n \
    \   assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd42wts2_.d(30): Error: C style cast illegal, use `cast(int)k`

    /tmp/tmpd42wts2_.d(34): Error: C style cast illegal, use `cast(int)i`

    /tmp/tmpd42wts2_.d(34): Error: C style cast illegal, use `cast(int)(arr.length
    - i - 1)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd42wts2_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164015
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    if (k > arr.length) \n    {\n        throw new RuntimeException(\"\
    K should be less than equal to Array length\");\n    }\n    if (k == arr.length)\n\
    \    {\n        return arr;\n    }\n    long[] result = new long[(int)k];\n  \
    \  sort(arr);\n    long[] temp = arr[$-1 .. $];\n    int index = 0;\n    for (int\
    \ i = 0; i < k; i++)\n    {\n        result[index++] = temp[i];\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb_h7ci1g.d(38): Error: C style cast illegal, use `cast(int)k`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb_h7ci1g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164015
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    sort(arr);\n    long[] res = new long[to!int(k)];\n    for\
    \ (int i = 0; i < k; i++)\n    {\n        res[i] = arr[$ - 1 - i];\n    }\n  \
    \  return res;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2ggnxg50.d(30): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmp2ggnxg50.d(31): Error: template instance `to!int` template `to` is not
    defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2ggnxg50.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164015
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    auto r = appender!(long[])();\n    foreach(i; 0 .. arr.length)\n\
    \    {\n        if(i < k)\n        {\n            r.put(arr[i]);\n        }\n\
    \        else\n        {\n            long max = r[0];\n            long max_index\
    \ = 0;\n            foreach(j; 0 .. k)\n            {\n                if(r[j]\
    \ > max)\n                {\n                    max = r[j];\n               \
    \     max_index = j;\n                }\n            }\n            if(arr[i]\
    \ < max)\n            {\n                r[max_index] = arr[i];\n            }\n\
    \        }\n    }\n    sort(r.data);\n    return r.data[$ .. 0 .. $ - k];\n}\n\
    unittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L,\
    \ 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L,\
    \ 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9eahovhd.d(56): Error: found `..` when expecting `,`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9eahovhd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164015
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    auto result = new long[k];\n    int pos = 0;\n    while (k\
    \ > 0) \n    {\n        auto max = arr[0];\n        int index = 0;\n        for\
    \ (int i = 1; i < arr.length; i++) \n        {\n            if (arr[i] > max)\
    \ \n            {\n                max = arr[i];\n                index = i;\n\
    \            }\n        }\n        result[pos++] = max;\n        arr[index] =\
    \ -1000000L;\n        k--;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpoz9nui4t.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x428a4d]

    ??:? void tmpoz9nui4t.__unittest_L50_C1() [0x428043]

    ??:? void tmpoz9nui4t.__modtest() [0x4287cc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cb2b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b9be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430c49]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4310f8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430bd5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b995]

    ??:? runModuleUnitTests [0x42c901]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f10]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    const long int arrLen = arr.length;\n    if (k == arrLen)\n\
    \        return arr;\n    if (k == 0)\n        return [];\n    if (k == 1)\n \
    \   {\n        long int max = -2147483648L;\n        foreach (i; arr)\n      \
    \      if (i > max)\n                max = i;\n        return [max];\n    }\n\
    \    const long int k_1 = k - 1L;\n    long[] newArr = arr[0L..k_1];\n    // heapify\n\
    \    for (long int i = k_1 / 2L; i >= 0L; i--)\n        shiftDown(newArr, i, k_1);\n\
    \    for (long int i = k_1; i < arrLen; i++)\n    {\n        if (arr[i] > newArr[0L])\n\
    \        {\n            newArr[0L] = arr[i];\n            shiftDown(newArr, 0L,\
    \ k_1);\n        }\n    }\n    return newArr;\n}\nunittest\n{\n    alias candidate\
    \ = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n\
    \    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_4fykcqv.d(30): Error: no identifier for declarator `long`

    /tmp/tmp_4fykcqv.d(37): Error: no identifier for declarator `long`

    /tmp/tmp_4fykcqv.d(43): Error: no identifier for declarator `long`

    /tmp/tmp_4fykcqv.d(46): Error: no identifier for declarator `long`

    /tmp/tmp_4fykcqv.d(46): Error: found `i` when expecting `.` following int

    /tmp/tmp_4fykcqv.d(46): Error: found `=` when expecting identifier following `int`.

    /tmp/tmp_4fykcqv.d(46): Error: found `k_1` when expecting `;` following `for`
    condition

    /tmp/tmp_4fykcqv.d(46): Error: expression expected, not `/`

    /tmp/tmp_4fykcqv.d(46): Error: found `2L` when expecting `)`

    /tmp/tmp_4fykcqv.d(46): Error: use `{ }` for an empty statement, not `;`

    /tmp/tmp_4fykcqv.d(46): Error: found `)` when expecting `;` following statement

    /tmp/tmp_4fykcqv.d(48): Error: no identifier for declarator `long`

    /tmp/tmp_4fykcqv.d(48): Error: found `i` when expecting `.` following int

    /tmp/tmp_4fykcqv.d(48): Error: found `=` when expecting identifier following `int`.

    /tmp/tmp_4f'
  stdout: ''
  timestamp: 1660164015
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    ArrayList<Long> res = new ArrayList<Long>();\n    for (long\
    \ i : arr) \n    {\n        if (res.size() < k) \n        {\n            res.add(i);\n\
    \        }\n        else \n        {\n            if (i > res.get(0)) \n     \
    \       {\n                res.set(0, i);\n            }\n        }\n        sort(res);\n\
    \    }\n    return res.stream().mapToLong(i -> i).toArray();\n}\nunittest\n{\n\
    \    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) ==\
    \ [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n  \
    \  assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwnr8cu7g.d(30): Error: found `>` when expecting `;` following statement

    /tmp/tmpwnr8cu7g.d(30): Error: found `>` when expecting `;` following statement

    /tmp/tmpwnr8cu7g.d(30): Error: expression expected, not `)`

    /tmp/tmpwnr8cu7g.d(30): Error: found `;` when expecting `)`

    /tmp/tmpwnr8cu7g.d(31): Error: found `for` when expecting `;` following statement

    /tmp/tmpwnr8cu7g.d(31): Error: found `:` when expecting `)`

    /tmp/tmpwnr8cu7g.d(31): Error: missing `{ ... }` for function literal

    /tmp/tmpwnr8cu7g.d(31): Error: found `arr` when expecting `;` following statement

    /tmp/tmpwnr8cu7g.d(31): Error: found `)` instead of statement

    /tmp/tmpwnr8cu7g.d(37): Error: declaration expected, not `else`

    /tmp/tmpwnr8cu7g.d(42): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwnr8cu7g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164015
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    // loop over all items in arr, saving the maximum \n    long\
    \ max = arr[0];\n    foreach(idx, item; arr)\n    {\n        if(item > max)\n\
    \        {\n            max = item;\n        }\n    }\n    // build a new array\
    \ using the maxium value, k times\n    long[] newArr = new long[k];\n    foreach(idx,\
    \ item; newArr)\n    {\n        newArr[idx] = max;\n    }\n    // return the new\
    \ array\n    return newArr;\n}\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpb2wkz2dg.d(52): unittest failure

    ----------------

    ??:? _d_unittestp [0x4289f5]

    ??:? void tmpb2wkz2dg.__unittest_L48_C1() [0x427fef]

    ??:? void tmpb2wkz2dg.__modtest() [0x428778]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cad3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b966]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430bf1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4310a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430b7d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b93d]

    ??:? runModuleUnitTests [0x42c8a9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428eb8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    // if k > arr.length return the sorted array\n    if (k > arr.length)\
    \ return arr.sort();\n    // if k <= 0 return empty array\n    if (k <= 0) return\
    \ [];\n    // else create a set\n    set!int set;\n    // create a range of 0\
    \ to arr.length\n    foreach (i; 0 .. arr.length)\n    {\n        // if set size\
    \ is greater than or equal to k\n        if (set.size >= k)\n        {\n     \
    \       // get min from set \n            long min = set.min;\n            //\
    \ if arr[i] is greater than min\n            if (arr[i] > min)\n            {\n\
    \                // remove the min value from set\n                set.remove(min);\n\
    \                // add the arr[i] to set\n                set.insert(arr[i]);\n\
    \            }\n        }\n        else\n        {\n            // if set size\
    \ is less than k add to set\n            set.insert(arr[i]);\n        }\n    }\n\
    \    // create empty array\n    long[] out = [];\n    // convert set to array\n\
    \    out = set.toArray();\n    // sort the array and return\n    return out.sort();\n\
    }\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L,\
    \ 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L,\
    \ 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpekxzeftb.d(60): Error: no identifier for declarator `long[]`

    /tmp/tmpekxzeftb.d(60): Error: found `out` instead of statement

    /tmp/tmpekxzeftb.d(62): Error: found `out` instead of statement

    /tmp/tmpekxzeftb.d(64): Error: expression expected, not `out`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpekxzeftb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164015
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    sort(arr);\n    long[] result = new long[k];\n    result[0\
    \ .. $] = arr[arr.length - k .. arr.length];\n    return result;\n}\nunittest\n\
    {\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L)\
    \ == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n\
    \    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphg8vj2_9.d(30): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphg8vj2_9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164015
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    int n = arr.length;\n    long[] result = new long[k];\n   \
    \ if (n <= k) {\n        sort(arr);\n        return arr;\n    }\n    for (int\
    \ i = 0; i < k; i++) {\n        result[i] = arr[i];\n    }\n    sort(result);\n\
    \    for (int i = k; i < n; i++) {\n        if (arr[i] > result[0]) {\n      \
    \      result[0] = arr[i];\n            for (int j = 1; j < k; j++) {\n      \
    \          if (result[j] < result[j - 1]) {\n                    long tmp = result[j];\n\
    \                    result[j] = result[j - 1];\n                    result[j\
    \ - 1] = tmp;\n                }\n            }\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjj5hrpep.d(30): Error: cannot implicitly convert expression `arr.length`
    of type `ulong` to `int`

    /tmp/tmpjj5hrpep.d(33): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmpjj5hrpep.d(39): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmpjj5hrpep.d(40): Error: cannot implicitly convert expression `k` of type
    `long` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjj5hrpep.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164015
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[to!int(k)];\n    std.sort(arr);\n\
    \    for (int i = arr.length - 1; i >= 0; i--)\n    {\n        if (k == 0) break;\n\
    \        result[arr.length - (int)k] = arr[i];\n        k--;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmebk88tg.d(35): Error: C style cast illegal, use `cast(int)k`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmebk88tg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164015
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] maxs = new long[(int)k];\n    maxs[0] = arr[0];\n  \
    \  uint i = 1;\n    while (i < k)\n    {\n        if (arr[i] > maxs[i - 1])\n\
    \        {\n            maxs[i] = arr[i];\n        }\n        else\n        {\n\
    \            maxs[i] = maxs[i - 1];\n        }\n        i++;\n    }\n    i = k;\n\
    \    while (i < arr.length)\n    {\n        if (arr[i] > maxs[(int)k - 1])\n \
    \       {\n            maxs[(int)k - 1] = arr[i];\n            maxs.sort();\n\
    \        }\n        i++;\n    }\n    return maxs;\n}\nunittest\n{\n    alias candidate\
    \ = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n\
    \    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbzz8b2x8.d(30): Error: C style cast illegal, use `cast(int)k`

    /tmp/tmpbzz8b2x8.d(48): Error: C style cast illegal, use `cast(int)k`

    /tmp/tmpbzz8b2x8.d(50): Error: C style cast illegal, use `cast(int)k`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbzz8b2x8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164015
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    quickSort(arr, 0, arr.length - 1);\n    return arr[arr.length\
    \ - (int)k .. arr.length];\n}\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjfo53g01.d(31): Error: C style cast illegal, use `cast(int)k`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjfo53g01.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164015
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    if (k == 0L) return new long[0];\n    // Since we want a sorted\
    \ array, it is easier to sort in descending order\n    sort(arr);\n    reverse(arr);\n\
    \    long[] result = new long[cast(int)k];\n    foreach (i, ref x; result)\n \
    \   {\n        result[i] = arr[i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) ==\
    \ [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n  \
    \  assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp22l8g4d4.d(32): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmp22l8g4d4.d(33): Error: undefined identifier `reverse`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp22l8g4d4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164015
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long length = arr.length;\n    if (length == k) \n    {\n \
    \       return arr;\n    }\n    else if (k == 1) \n    {\n        long max = arr[0];\n\
    \        foreach (i; arr)\n        {\n            if (i > max) \n            {\n\
    \                max = i;\n            }\n        }\n        return [max];\n \
    \   }\n    else if (k == 0) \n    {\n        return null;\n    }\n    else \n\
    \    {\n        foreach (i; 0 .. length)\n        {\n            long max = arr[i];\n\
    \            long position = i;\n            foreach (j; i .. length)\n      \
    \      {\n                if (arr[j] > max) \n                {\n            \
    \        max = arr[j];\n                    position = j;\n                }\n\
    \            }\n            long temp = arr[i];\n            arr[i] = max;\n \
    \           arr[position] = temp;\n        }\n        return arr[$ - k .. $];\n\
    \    }\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmptqobj9wv.d(76): unittest failure

    ----------------

    ??:? _d_unittestp [0x428b9d]

    ??:? void tmptqobj9wv.__unittest_L72_C1() [0x428193]

    ??:? void tmptqobj9wv.__modtest() [0x42891c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cc1f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bab2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430c45]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4310f4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430bd1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ba89]

    ??:? runModuleUnitTests [0x42c9f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429060]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[arr.length];\n    result = arr.dup;\n\
    \    result.sort;\n    result.reverse;\n    long[] k_element = new long[k];\n\
    \    for (long i = 0; i < k; i++)\n    {\n        k_element[i] = result[i];\n\
    \    }\n    return k_element;\n}\nunittest\n{\n    alias candidate = maximum;\n\
    \n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbdlj5p1_.d(32): Error: no property `sort` for type `long[]`

    /tmp/tmpbdlj5p1_.d(33): Error: no property `reverse` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbdlj5p1_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164015
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[to!int(k)];\n    sort(arr);\n    for\
    \ (int i = 0; i < k; i++)\n    {\n        result[i] = arr[arr.length - 1 - i];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmpwzynfg.d(30): Error: template instance `to!int` template `to`
    is not defined

    /tmp/tmpmpwzynfg.d(31): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmpwzynfg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164015
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[(int)k];\n    sort(arr);\n    for\
    \ (int i = 0; i < k; i++)\n    {\n        result[i] = arr[arr.length - 1 - i];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy7cf186o.d(30): Error: C style cast illegal, use `cast(int)k`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy7cf186o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164015
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n\tauto n = arr.length;\n\tif (k == n) return arr;\n\t\n\tstd.sort(arr);\n\
    \tlong[] result = new long[k];\n\tfor (auto i = 0L; i < k; i++)\n\t\tresult[i]\
    \ = arr[n - i - 1];\n\treturn result;\n}\nunittest\n{\n    alias candidate = maximum;\n\
    \n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi9x4hzyt.d(33): Error: undefined identifier `sort` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi9x4hzyt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164015
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    // sort the array\n    sort(arr);\n    // -1 because of the\
    \ zero indexing\n    long index = k - 1L;\n    // create a new array of size k\n\
    \    long[] array = new long[k];\n    // loop from k to 0\n    for (int i = cast(int)index;\
    \ i >= 0; i--)\n    {\n        // add the elements to the new array\n        array[i]\
    \ = arr[i];\n    }\n    // return the array\n    return array;\n}\nunittest\n\
    {\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L)\
    \ == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n\
    \    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnwljzdq_.d(31): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnwljzdq_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164015
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    int[] output = new int[k];\n    int lastIndex = 0;\n    int\
    \ max = int.min;\n    foreach(int i, ref int elem; arr)\n    {\n        if(i >=\
    \ k)\n            break;\n        if(elem > max)\n        {\n            max =\
    \ elem;\n            lastIndex = i;\n        }\n        output[i] = elem;\n  \
    \  }\n    if(k <= arr.length)\n    {\n        foreach(int i, ref int elem; arr[lastIndex\
    \ + 1 ..])\n        {\n            if(elem > max)\n            {\n           \
    \     int j = 0;\n                while(j < k)\n                {\n          \
    \          if(elem > output[j])\n                    {\n                     \
    \   int temp = output[j];\n                        output[j] = elem;\n       \
    \                 elem = temp;\n                    }\n                    j++;\n\
    \                }\n            }\n        }\n    }\n    else\n    {\n       \
    \ int j = 0;\n        while(j < k)\n        {\n            if(j > arr.length)\n\
    \                output[j] = output[arr.length - 1];\n            j++;\n     \
    \   }\n    }\n    return output;\n}\nunittest\n{\n    alias candidate = maximum;\n\
    \n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5yzy05at.d(46): Error: expression expected, not `]`

    /tmp/tmp5yzy05at.d(46): Error: found `)` when expecting `,`

    /tmp/tmp5yzy05at.d(63): Error: found `}` when expecting `,`

    /tmp/tmp5yzy05at.d(64): Error: expression expected, not `else`

    /tmp/tmp5yzy05at.d(65): Error: found `{` when expecting `,`

    /tmp/tmp5yzy05at.d(66): Error: found `j` when expecting `.` following int

    /tmp/tmp5yzy05at.d(66): Error: found `=` when expecting identifier following `int`.

    /tmp/tmp5yzy05at.d(66): Error: found `0` when expecting `,`

    /tmp/tmp5yzy05at.d(66): Error: expression expected, not `;`

    /tmp/tmp5yzy05at.d(67): Error: found `while` when expecting `,`

    /tmp/tmp5yzy05at.d(67): Error: found `<` when expecting `)`

    /tmp/tmp5yzy05at.d(67): Error: missing `{ ... }` for function literal

    /tmp/tmp5yzy05at.d(67): Error: found `k` when expecting `,`

    /tmp/tmp5yzy05at.d(67): Error: expression expected, not `)`

    /tmp/tmp5yzy05at.d(68): Error: found `{` when expecting `,`

    /tmp/tmp5yzy05at.d(69): Error: expression expected, not `if`

    /tmp/tmp'
  stdout: ''
  timestamp: 1660164015
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\
    \ {\n        result[i] = max(arr);\n        arr = removeLast(arr);\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6jhjr63_.d(32): Error: undefined identifier `max`, did you mean
    function `fmax`?

    /tmp/tmp6jhjr63_.d(33): Error: undefined identifier `removeLast`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6jhjr63_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    // Find the maximum number of times we are going to iterate\
    \ over arr.\n    auto maxIterations = k < arr.length ? k : arr.length;\n    //\
    \ Create the result array.\n    long[] result;\n    // Create the array of indexes\
    \ for the result array.\n    long[] indexes;\n    // Initialize the indexes array.\n\
    \    indexes.length = maxIterations;\n    // Populate the indexes array.\n   \
    \ for (auto i = 0L; i < maxIterations; i++)\n    {\n        indexes[i] = i;\n\
    \    }\n    // Sort the indexes array.\n    indexes.sort!((a, b) => arr[a] < arr[b]);\n\
    \    // Populate the result array.\n    for (auto i = 0L; i < maxIterations; i++)\n\
    \    {\n        result ~= arr[indexes[i]];\n    }\n    // Return the result array.\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvzr2zffi.d(44): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvzr2zffi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (long i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpybbujhw3.d(35): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpybbujhw3.d(41): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpybbujhw3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[cast(int)k];\n    if (k == 0)\n  \
    \      return result;\n    sort(arr);\n    result[$-1] = arr[$-1];\n    long current\
    \ = result[$-1];\n    long i = $-2;\n    while (i >= 0 && k > 1)\n    {\n    \
    \    if (arr[cast(int)i] != current)\n        {\n            result[$-k] = arr[cast(int)i];\n\
    \            current = arr[cast(int)i];\n            k--;\n        }\n       \
    \ i--;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\
    \n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpikri1ukp.d(36): Error: `$` is valid only inside [] of index or
    slice

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpikri1ukp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    int i = 0;\n    int j = (int)k - 1;\n    long[] res = new long[k];\n\
    \    if (k == 0) \n    {\n        return res;\n    }\n    else \n    {\n     \
    \   for (int m = 0; m < (int)k; m++) \n        {\n            res[m] = arr[m];\n\
    \        }\n        sort(res);\n        while (j < arr.length) \n        {\n \
    \           if (arr[j] > res[0]) \n            {\n                res[0] = arr[j];\n\
    \                sort(res);\n            }\n            j++;\n        }\n    \
    \    return res;\n    }\n}\nunittest\n{\n    alias candidate = maximum;\n\n  \
    \  assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprzdq93d7.d(31): Error: C style cast illegal, use `cast(int)k`

    /tmp/tmprzdq93d7.d(39): Error: C style cast illegal, use `cast(int)k`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprzdq93d7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] sort = arr.dup;\n\
    \    sort.sort();\n    auto limit = min(k, arr.length);\n    foreach(i; 0..limit)\n\
    \    {\n        result[i] = sort[arr.length - 1 - i];\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L,\
    \ 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L,\
    \ 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg0e6yq01.d(32): Error: no property `sort` for type `long[]`

    /tmp/tmpg0e6yq01.d(33): Error: undefined identifier `min`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg0e6yq01.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    // Do your magic here\n    long[] output = new long[(int)k];\n\
    \    int outputLen = 0;\n    if (k == 0) {\n        return output;\n    }\n  \
    \  for (long num : arr) {\n        if (outputLen < k) {\n            output[outputLen]\
    \ = num;\n            outputLen++;\n            continue;\n        }\n       \
    \ for (int i = 0; i < k; i++) {\n            if (num > output[i]) {\n        \
    \        long tmp = output[i];\n                output[i] = num;\n           \
    \     num = tmp;\n            }\n        }\n    }\n    return output;\n}\nunittest\n\
    {\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L)\
    \ == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n\
    \    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr_s4856y.d(31): Error: C style cast illegal, use `cast(int)k`

    /tmp/tmpr_s4856y.d(36): Error: semicolon expected, not `:`

    /tmp/tmpr_s4856y.d(36): Error: expression expected, not `:`

    /tmp/tmpr_s4856y.d(36): Error: found `arr` when expecting `;` following `for`
    condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr_s4856y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    sort(arr);\n    for (int\
    \ i = 0; i < k; i++)\n    {\n        result[i] = arr[$ - i - 1];\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwcj2kk43.d(31): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwcj2kk43.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    if (arr.length == k)\n        return arr;\n    else if (arr.length\
    \ > k)\n    {\n        long min = arr[0];\n        long indexOfMin = 0;\n    \
    \    long[] result = new long[cast(int)k];\n        for (int i = 0; i < k; i++)\n\
    \        {\n            for (int j = 1; j < arr.length; j++)\n            {\n\
    \                if (arr[j] < min)\n                {\n                    min\
    \ = arr[j];\n                    indexOfMin = j;\n                }\n        \
    \    }\n            result[i] = min;\n            arr[indexOfMin] = arr[0];\n\
    \            min = arr[0];\n        }\n        return result;\n    }\n    else\n\
    \        return arr;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpg_ds5z25.d(60): unittest failure

    ----------------

    ??:? _d_unittestp [0x428aa5]

    ??:? void tmpg_ds5z25.__unittest_L56_C1() [0x42809f]

    ??:? void tmpg_ds5z25.__modtest() [0x428828]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cb83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ba16]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430ca1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x431150]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430c2d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b9ed]

    ??:? runModuleUnitTests [0x42c959]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f68]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    auto length = arr.length;\n    if (k >= length)\n    {\n  \
    \      return arr;\n    }\n    // https://github.com/blackwhale/blackwhale/blob/master/src/blackwhale/blackwhale.d#L435\n\
    \    auto maxHeap = blackwhale.newHeap!((a, b) => b < a);\n    // add element\
    \ to max heap\n    foreach (e; arr)\n    {\n        maxHeap.insert(e);\n    }\n\
    \    long[] ans = new long[k];\n    long i = 0;\n    while (i < k)\n    {\n  \
    \      ans[i] = maxHeap.popFront;\n        i += 1;\n    }\n    return ans;\n}\n\
    unittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L,\
    \ 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L,\
    \ 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9bga5k75.d(36): Error: undefined identifier `blackwhale`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9bga5k75.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    const n = arr.length;\n    const result = new long[k];\n  \
    \  long sz = 0L;\n    for (long i = 0L; i < n; i++) \n    {\n        long j =\
    \ sz - 1L;\n        for (; j >= 0L && result[j] < arr[i]; j--)\n            result[j\
    \ + 1L] = result[j];\n        if (j + 1L < k) \n        {\n            result[j\
    \ + 1L] = arr[i];\n            sz++;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L,\
    \ 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L,\
    \ 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe9vg8syz.d(37): Error: cannot modify `const` expression `result[cast(ulong)(j
    + 1L)]`

    /tmp/tmpe9vg8syz.d(40): Error: cannot modify `const` expression `result[cast(ulong)(j
    + 1L)]`

    /tmp/tmpe9vg8syz.d(44): Error: cannot implicitly convert expression `result` of
    type `const(long[])` to `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe9vg8syz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] copy = new long[arr.length];\n    foreach(i, val; arr)\n\
    \        copy[i] = val;\n    quickSort(copy, 0, arr.length-1);\n    long[] result\
    \ = new long[k];\n    foreach(i, val; copy)\n    {\n        if(i >= arr.length-k)\n\
    \            result[i-(arr.length-k)] = val;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L)\
    \ == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n\
    \    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoenulivm.d(33): Error: undefined identifier `quickSort`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoenulivm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long temp;\n    for (long i = 0; i < k; i++) \n    {\n    \
    \    for (long j = 0; j < arr.length - i - 1; j++) \n        {\n            if\
    \ (arr[j] > arr[j + 1]) \n            {\n                temp = arr[j];\n    \
    \            arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n      \
    \      }\n        }\n    }\n    return arr[arr.length - (int)k .. arr.length];\n\
    }\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L,\
    \ 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L,\
    \ 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplmm77kpq.d(43): Error: C style cast illegal, use `cast(int)k`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplmm77kpq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] res = new long[cast(int)k];\n    int pos = 0;\n    while\
    \ (k > 0)\n    {\n        res[pos] = arr[cast(int)k-1];\n        k--;\n      \
    \  pos++;\n    }\n    sort(res);\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n\
    \    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf89ln19_.d(38): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf89ln19_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[cast(ulong)k];\n    foreach(el; arr)\n\
    \    {\n        bool isInserted = false;\n        foreach(i, val; result)\n  \
    \      {\n            if(!isInserted && el > val)\n            {\n           \
    \     isInserted = true;\n                result[i] = el;\n            }\n   \
    \         else if(isInserted)\n            {\n                result[i] = val;\n\
    \            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpdgx1d1y4.d(53): unittest failure

    ----------------

    ??:? _d_unittestp [0x428a35]

    ??:? void tmpdgx1d1y4.__unittest_L49_C1() [0x42802f]

    ??:? void tmpdgx1d1y4.__modtest() [0x4287b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cb13]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b9a6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430c31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4310e0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430bbd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b97d]

    ??:? runModuleUnitTests [0x42c8e9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ef8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    if (arr.length == 0)\n        return arr;\n    \n    if (k\
    \ == arr.length)\n        return arr;\n    \n    auto pivot = arr[arr.length /\
    \ 2];\n    auto left = [];\n    auto right = [];\n    \n    foreach (i, val; arr)\n\
    \    {\n        if (val <= pivot)\n            left ~= val;\n        else\n  \
    \          right ~= val;\n    }\n    \n    if (left.length == k)\n        return\
    \ left;\n    else if (left.length > k)\n        return maximum(left, k);\n   \
    \ else if (left.length + right.length > k)\n        return left ~ maximum(right,\
    \ k - left.length);\n    else\n        return left ~ right;\n}\n/*\n    Test\n\
    */\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplea7h2mc.d(43): Error: cannot append type `long` to type `void[]`

    /tmp/tmplea7h2mc.d(45): Error: cannot append type `long` to type `void[]`

    /tmp/tmplea7h2mc.d(51): Error: function `tmplea7h2mc.maximum(long[] arr, long
    k)` is not callable using argument types `(void[], long)`

    /tmp/tmplea7h2mc.d(51):        cannot pass argument `left` of type `void[]` to
    parameter `long[] arr`

    /tmp/tmplea7h2mc.d(53): Error: function `tmplea7h2mc.maximum(long[] arr, long
    k)` is not callable using argument types `(void[], ulong)`

    /tmp/tmplea7h2mc.d(53):        cannot pass argument `right` of type `void[]` to
    parameter `long[] arr`

    /tmp/tmplea7h2mc.d(49): Error: cannot implicitly convert expression `left` of
    type `void[]` to `long[]`

    /tmp/tmplea7h2mc.d(55): Error: cannot implicitly convert expression `left ~ right`
    of type `void[]` to `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplea7h2mc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    quicksort(arr, 0, arr.length\
    \ - 1);\n    foreach(i; 0 .. k)\n    {\n        result[i] = arr[i];\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiwld2mq2.d(31): Error: undefined identifier `quicksort`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiwld2mq2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long len = arr.length;\n    long[] sorted = arr[0 .. len];\n\
    \    std.sort(sorted);\n    return sorted[len - cast(int)k .. len];\n}\nunittest\n\
    {\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L)\
    \ == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n\
    \    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx5j6mu3f.d(32): Error: undefined identifier `sort` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx5j6mu3f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long len = arr.length;\n    long[] result = new long[k];\n\
    \    if (k > len)\n    {\n        return arr;\n    }\n    if (k == len)\n    {\n\
    \        return sort(arr);\n    }\n    if (k == 1)\n    {\n        return [max(arr)];\n\
    \    }\n    auto bucket = new long[1000L][0L];\n    long maxi = max(arr);\n  \
    \  long mini = min(arr);\n    foreach (el; arr)\n    {\n        bucket[el - mini]\
    \ ~= el;\n    }\n    ulong i = 1000L;\n    foreach (b; bucket[])\n    {\n    \
    \    if (b.length > 0)\n        {\n            i--;\n            if (i == 1000L\
    \ - k)\n            {\n                break;\n            }\n        }\n    }\n\
    \    long[] copy = new long[k];\n    ulong j = 0L;\n    foreach (b; bucket[])\n\
    \    {\n        if (b.length > 0)\n        {\n            i++;\n            if\
    \ (i >= 1000L - k)\n            {\n                foreach (el; b)\n         \
    \       {\n                    result[j] = el;\n                    j++;\n   \
    \             }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L)\
    \ == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n\
    \    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsemo8xxd.d(38): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpsemo8xxd.d(42): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmpsemo8xxd.d(45): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmpsemo8xxd.d(46): Error: undefined identifier `min`, did you mean function
    `main`?

    /tmp/tmpsemo8xxd.d(49): Error: cannot append type `long` to type `long[1000]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsemo8xxd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    size_t len = arr.length;\n    size_t i, j;\n    long tmp;\n\
    \    for (i = 1; i < len; i++) {\n        tmp = arr[i];\n        for (j = i; j\
    \ > 0 && arr[j - 1] < tmp; j--) {\n            arr[j] = arr[j - 1];\n        }\n\
    \        arr[j] = tmp;\n    }\n    return arr[len - k .. len];\n}\nunittest\n\
    {\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L)\
    \ == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n\
    \    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpilzx9_gt.d(46): unittest failure

    ----------------

    ??:? _d_unittestp [0x428a6d]

    ??:? void tmpilzx9_gt.__unittest_L42_C1() [0x428067]

    ??:? void tmpilzx9_gt.__modtest() [0x4287f0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42caef]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b982]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430b15]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430fc4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430aa1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b959]

    ??:? runModuleUnitTests [0x42c8c5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f30]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    int length = cast(int)k;\n    if (length > arr.length) \n \
    \   {\n        length = arr.length;\n    }\n    long[] max = new long[length];\n\
    \    for (int i = 0; i < length; i++) \n    {\n        long tmp = -1.0L;\n   \
    \     int index = -1;\n        for (int j = 0; j < arr.length; j++) \n       \
    \ {\n            if (arr[j] > tmp) \n            {\n                tmp = arr[j];\n\
    \                index = j;\n            }\n        }\n        arr[index] = -1.0L;\n\
    \        max[i] = tmp;\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n\
    \    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2pz0q4jh.d(33): Error: cannot implicitly convert expression `arr.length`
    of type `ulong` to `int`

    /tmp/tmp2pz0q4jh.d(38): Error: cannot implicitly convert expression `-1L` of type
    `real` to `long`

    /tmp/tmp2pz0q4jh.d(48): Error: cannot implicitly convert expression `-1L` of type
    `real` to `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2pz0q4jh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[(int)k];\n    result[0] = arr[0];\n\
    \    result[1] = arr[1];\n    if (k == 1)\n    {\n        return result;\n   \
    \ }\n    int i = 0;\n    while (k > 1)\n    {\n        while (i < arr.length)\n\
    \        {\n            if (arr[i] > result[0])\n            {\n             \
    \   result[0] = arr[i];\n            }\n            if (arr[i] < result[1])\n\
    \            {\n                result[1] = arr[i];\n            }\n         \
    \   i++;\n        }\n        k--;\n    }\n    sort(result);\n    return result;\n\
    }\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L,\
    \ 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L,\
    \ 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwc0zs1gb.d(30): Error: C style cast illegal, use `cast(int)k`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwc0zs1gb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long tmp;\n    for (long\
    \ i = 0; i < k; i++)\n    {\n        result[i] = arr[i];\n    }\n    mergeSort(result);\n\
    \    for (long i = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n\
    \        {\n            result[0] = arr[i];\n            for (long j = 0; j <\
    \ k-1; j++)\n            {\n                if (result[j] > result[j+1])\n   \
    \             {\n                    tmp = result[j];\n                    result[j]\
    \ = result[j+1];\n                    result[j+1] = tmp;\n                }\n\
    \            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplch1sj0d.d(36): Error: undefined identifier `mergeSort`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplch1sj0d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    for (uint i = 0; i < k; i++)\n    {\n        for (uint j =\
    \ i + 1; j < arr.length; j++)\n        {\n            if (arr[i] < arr[j])\n \
    \           {\n                auto temp = arr[i];\n                arr[i] = arr[j];\n\
    \                arr[j] = temp;\n            }\n        }\n    }\n    return arr[0..(int)k];\n\
    }\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L,\
    \ 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L,\
    \ 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6srstbft.d(42): Error: C style cast illegal, use `cast(int)k`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6srstbft.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    const auto len = arr.length;\n    auto list = list();\n   \
    \ auto res = new long[k];\n    foreach(v; arr) list.push(v);\n    sort(list);\n\
    \    res[$-1] = list[$-1];\n    foreach(i; 0..k-1) \n    {\n        res[$-1] =\
    \ list[$-1];\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = maximum;\n\
    \n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdt07tlgl.d(31): Error: undefined identifier `list`

    /tmp/tmpdt07tlgl.d(34): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdt07tlgl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    // QuickSOrt the array \n    arr.sort();\n    // Select the\
    \ last k elements\n    return arr[$ - k .. $];\n}\nunittest\n{\n    alias candidate\
    \ = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n\
    \    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0_ld4d6n.d(31): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0_ld4d6n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = -1000L;\n    }\n    for (int i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] > result[0])\n        {\n            result[0]\
    \ = arr[i];\n            result.sort();\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L,\
    \ 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L,\
    \ 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnam7_yzx.d(40): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnam7_yzx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    // D's slice is a subarray, so it's \n    // the same thing\
    \ as that in Python.\n    auto len = arr.length;\n    assert(k <= len);\n    auto\
    \ A = arr[0..k];\n    auto B = A.dup;\n    sort(A);\n    auto sortedByAscending\
    \ = true;\n    // Check if `arr` is sorted in ascending order.\n    for (long\
    \ i = 0; i < len - 1; i++) \n    {\n        if (arr[i] > arr[i + 1]) \n      \
    \  {\n            sortedByAscending = false;\n            break;\n        }\n\
    \    }\n    if (sortedByAscending) \n    {\n        // Just return `arr` if it's\
    \ already sorted.\n        return arr[len - k..len];\n    }\n    auto max = 0L;\n\
    \    auto j = 0L;\n    for (long i = k; i < len; i++) \n    {\n        if (arr[i]\
    \ > A[0]) \n        {\n            max = 0;\n            j = 0;\n            //\
    \ Find the index of `arr[i]` in `A`.\n            for (long m = 0; m < k; m++)\
    \ \n            {\n                if (arr[i] == A[m]) \n                {\n \
    \                   max = arr[i];\n                    j = m;\n              \
    \      break;\n                }\n            }\n            if (max != 0) \n\
    \            {\n                // Remove the element in `A` that is\n       \
    \         // less than `arr[i]` and add `arr[i]`\n                // to the end\
    \ of `A`.\n                A = array(A[0..j], A[j + 1..$]);\n                A\
    \ ~= arr[i];\n                sort(A);\n            }\n        }\n    }\n    return\
    \ B;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt1b80nte.d(36): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpt1b80nte.d(75): Error: undefined identifier `array`, did you mean variable
    `arr`?

    /tmp/tmpt1b80nte.d(77): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt1b80nte.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    foreach(i; 0 .. k)\n    {\n        long max = arr[i];\n   \
    \     long max_index = i;\n        foreach(j; i + 1 .. arr.length)\n        {\n\
    \            if(arr[j] > max)\n            {\n                max = arr[j];\n\
    \                max_index = j;\n            }\n        }\n        (arr[i], arr[max_index])\
    \ = (arr[max_index], arr[i]);\n    }\n    return arr[0 .. cast(size_t)k];\n}\n\
    unittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L,\
    \ 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L,\
    \ 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_63zrn28.d(42): Error: Using the result of a comma expression is
    not allowed

    /tmp/tmp_63zrn28.d(42): Error: Using the result of a comma expression is not allowed

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_63zrn28.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    // Apply heap sort, which is O(n*log(n))\n    // and find out\
    \ the last k numbers.\n    long tmp;\n    long parent;\n    long child;\n    long[]\
    \ output = new long[k];\n    output[0] = arr[0];\n    output[1] = arr[1];\n  \
    \  // start the heap sort.\n    for (long i = 0; i < arr.length; i++)\n    {\n\
    \        // if the index is k and parent is smaller than arr[i], then swap them.\n\
    \        if (i > 1 && i <= k)\n        {\n            if (arr[i] > output[1])\n\
    \            {\n                tmp = output[1];\n                output[1] =\
    \ arr[i];\n                output[2] = tmp;\n            }\n            else if\
    \ (arr[i] > output[0])\n            {\n                tmp = output[0];\n    \
    \            output[0] = arr[i];\n                output[1] = tmp;\n         \
    \   }\n        }\n        // Assume parent is the current number.\n        parent\
    \ = arr[i];\n        child = 2 * i + 1;\n        // Heapify the tree.\n      \
    \  while (child < arr.length)\n        {\n            // if the right child exists,\
    \ and is bigger than the left one,\n            // then choose the right one to\
    \ be compared with parent.\n            if (child + 1 < arr.length && arr[child]\
    \ < arr[child + 1])\n            {\n                child++;\n            }\n\
    \            // if the parent is bigger than the child, then swap them.\n    \
    \        if (parent < arr[child])\n            {\n                tmp = arr[child];\n\
    \                arr[child] = parent;\n                arr[(child - 1) / 2] =\
    \ tmp;\n                child = 2 * child + 1;\n            }\n            else\n\
    \            {\n                break;\n            }\n        }\n    }\n    //\
    \ After get the max k numbers, then sort them.\n    // apply bubble sort here.\n\
    \    for (long i = 0; i < k; i++)\n    {\n        for (long j = i + 1; j < k;\
    \ j++)\n        {\n            if (\nunittest\n{\n    alias candidate = maximum;\n\
    \n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3au7t1gw.d(90): Error: expression expected, not `unittest`

    /tmp/tmp3au7t1gw.d(91): Error: found `{` when expecting `)`

    /tmp/tmp3au7t1gw.d(106): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp3au7t1gw.d(106): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3au7t1gw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    quickSort(arr, 0, arr.length - 1);\n    long[] max = new long[to!int(k)];\n\
    \    for (int i = 0; i < to!int(k); i++) \n    {\n        max[i] = arr[i];\n \
    \   }\n    return max;\n}\nunittest\n{\n    alias candidate = maximum;\n\n   \
    \ assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp__v6hjbn.d(30): Error: undefined identifier `quickSort`

    /tmp/tmp__v6hjbn.d(31): Error: template instance `to!int` template `to` is not
    defined

    /tmp/tmp__v6hjbn.d(32): Error: template instance `to!int` template `to` is not
    defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp__v6hjbn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    return arr.sort(__lambda0__).take(k);\n}\nunittest\n{\n   \
    \ alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L,\
    \ -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp71w7jsz0.d(30): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp71w7jsz0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    int n = arr.length;\n    long[] result = new long[n];\n   \
    \ for (int i = 0; i < n; i++) \n    {\n        if (i < k) \n        {\n      \
    \      result[i] = arr[i];\n        }\n        else \n        {\n            if\
    \ (arr[i] > result[0]) \n            {\n                result[0] = arr[i];\n\
    \            }\n            int j = 1;\n            while (j < k && result[j -\
    \ 1] > result[j]) \n            {\n                long tmp = result[j - 1];\n\
    \                result[j - 1] = result[j];\n                result[j] = tmp;\n\
    \                j++;\n            }\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L,\
    \ 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L,\
    \ 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe5v3fq5w.d(30): Error: cannot implicitly convert expression `arr.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe5v3fq5w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    int n = arr.length;\n    ArrayList<Long> res = new ArrayList<Long>();\n\
    \    // pq1 is MaxHeap\n    PriorityQueue<Long> pq1 = new PriorityQueue<Long>(n,\
    \ (a, b) -> {\n        if (a < b)\n            return 1;\n        else if (a >\
    \ b)\n            return -1;\n        else\n            return 0;\n    });\n \
    \   // pq2 is MinHeap\n    PriorityQueue<Long> pq2 = new PriorityQueue<Long>(n,\
    \ (a, b) -> {\n        if (a < b)\n            return -1;\n        else if (a\
    \ > b)\n            return 1;\n        else\n            return 0;\n    });\n\
    \    for (int i = 0; i < n; i++) {\n        pq1.add(arr[i]);\n        if (pq1.size()\
    \ > k) {\n            pq2.add(pq1.poll());\n        }\n    }\n    while (!pq1.isEmpty())\
    \ {\n        res.add(pq1.poll());\n    }\n    while (!pq2.isEmpty()) {\n     \
    \   res.add(pq2.poll());\n    }\n    // Reverse the arraylist\n    Collections.reverse(res);\n\
    \    return res.stream().mapToLong(i -> i).toArray();\n}\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl3ur9ug1.d(31): Error: found `>` when expecting `;` following statement

    /tmp/tmpl3ur9ug1.d(31): Error: found `>` when expecting `;` following statement

    /tmp/tmpl3ur9ug1.d(31): Error: expression expected, not `)`

    /tmp/tmpl3ur9ug1.d(31): Error: found `;` when expecting `)`

    /tmp/tmpl3ur9ug1.d(33): Error: found `PriorityQueue` when expecting `;` following
    statement

    /tmp/tmpl3ur9ug1.d(33): Error: found `<` instead of statement

    /tmp/tmpl3ur9ug1.d(36): Error: found `else` without a corresponding `if`, `version`
    or `debug` statement

    /tmp/tmpl3ur9ug1.d(38): Error: found `else` without a corresponding `if`, `version`
    or `debug` statement

    /tmp/tmpl3ur9ug1.d(40): Error: declaration expected, not `)`

    /tmp/tmpl3ur9ug1.d(42): Error: no identifier for declarator `PriorityQueue`

    /tmp/tmpl3ur9ug1.d(42): Error: declaration expected, not `<`

    /tmp/tmpl3ur9ug1.d(45): Error: declaration expected, not `else`

    /tmp/tmpl3ur9ug1.d(47): Error: declaration expected, not `else`

    /tmp/tmpl3ur9ug1.d(49): Error: unrecognized declaratio'
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    // TODO: implement\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu5pbpe5b.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x428905]

    ??:? void tmpu5pbpe5b.__unittest_L34_C1() [0x427efb]

    ??:? void tmpu5pbpe5b.__modtest() [0x428684]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c96f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b802]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a8d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f3c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a19]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7d9]

    ??:? runModuleUnitTests [0x42c745]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d54]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    int len = arr.length;\n    long[] result = new long[k];\n \
    \   for (int i = 0; i < k; i++) \n    {\n        result[i] = arr[i];\n    }\n\
    \    if (k == len) \n    {\n        return result;\n    }\n    for (int i = k;\
    \ i < len; i++) \n    {\n        for (int j = 0; j < k; j++) \n        {\n   \
    \         if (arr[i] > result[j]) \n            {\n                for (int m\
    \ = 0; m < k; m++) \n                {\n                    if (m == k - 1) \n\
    \                    {\n                        result[m] = arr[i];\n        \
    \            }\n                    else \n                    {\n           \
    \             result[m] = result[m + 1];\n                    }\n            \
    \    }\n                break;\n            }\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L,\
    \ 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L,\
    \ 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjqqp_l5j.d(30): Error: cannot implicitly convert expression `arr.length`
    of type `ulong` to `int`

    /tmp/tmpjqqp_l5j.d(40): Error: cannot implicitly convert expression `k` of type
    `long` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjqqp_l5j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    priority_queue!(long)(\"\
    a > b\", result);\n    foreach(elem; arr)\n    {\n        if(result.length < k)\n\
    \        {\n            result.put(elem);\n        }\n        else\n        {\n\
    \            if(elem > result.front)\n            {\n                result.popFront();\n\
    \                result.put(elem);\n            }\n        }\n    }\n    return\
    \ result.data;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0zerxj24.d(31): Error: template instance `priority_queue!long`
    template `priority_queue` is not defined

    /tmp/tmp0zerxj24.d(36): Error: no property `put` for type `long[]`

    /tmp/tmp0zerxj24.d(40): Error: no property `front` for type `long[]`

    /tmp/tmp0zerxj24.d(42): Error: no property `popFront` for type `long[]`

    /tmp/tmp0zerxj24.d(43): Error: no property `put` for type `long[]`

    /tmp/tmp0zerxj24.d(47): Error: no property `data` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0zerxj24.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    if (arr.length < k)\n        return arr;\n    // init array\n\
    \    long[] maxs = new long[(int)k];\n    // init heap\n    std.priority_queue!(long[])();\n\
    \    foreach (i, v; arr)\n    {\n        long min = maxs[0];\n        if (min\
    \ > v)\n            continue;\n        maxs[0] = v;\n        // make heap\n  \
    \      std.make_heap(maxs.ptr, maxs.ptr + k);\n    }\n    // sort array\n    std.sort(maxs.ptr,\
    \ maxs.ptr + k);\n    return maxs;\n}\nunittest\n{\n    alias candidate = maximum;\n\
    \n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppvxhraqy.d(33): Error: C style cast illegal, use `cast(int)k`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppvxhraqy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    int n = arr.length;\n    if (n == k)\n        return arr;\n\
    \    else if (k == 1)\n    {\n        auto max = arr[0];\n        for (int i =\
    \ 1; i < n; i++)\n            max = max(max, arr[i]);\n        return [max];\n\
    \    }\n    else\n    {\n        sort(arr);\n        long[] res = new long[k];\n\
    \        for (int i = 0; i < k; i++)\n            res[i] = arr[n - i - 1];\n \
    \       return res;\n    }\n}\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1rplzuzd.d(30): Error: cannot implicitly convert expression `arr.length`
    of type `ulong` to `int`

    /tmp/tmp1rplzuzd.d(37): Error: function expected before `()`, not `max` of type
    `long`

    /tmp/tmp1rplzuzd.d(42): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1rplzuzd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[(int)k];\n    sort(arr);\n    arr\
    \ = arr.array();\n    for (int i = (int)k - 1; i >= 0; i--) {\n        result[i]\
    \ = arr[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n \
    \   assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp1ffu6vz.d(30): Error: C style cast illegal, use `cast(int)k`

    /tmp/tmpp1ffu6vz.d(33): Error: C style cast illegal, use `cast(int)k`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp1ffu6vz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[cast(int)k];\n    long p = 0L;\n \
    \   long t;\n    if (k >= arr.length)\n    {\n        arr.sort;\n        return\
    \ arr;\n    }\n    while (p < k)\n    {\n        long max = arr[cast(int)p];\n\
    \        foreach (i; p+1..arr.length)\n        {\n            if (arr[cast(int)i]\
    \ > max)\n            {\n                max = arr[cast(int)i];\n            \
    \    t = i;\n            }\n        }\n        result[cast(int)p] = max;\n   \
    \     arr[cast(int)t] = arr[cast(int)p];\n        arr[cast(int)p] = max;\n   \
    \     p++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\
    \n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwuntwqbf.d(35): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwuntwqbf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    return qsort(arr)[$ - (cast(size_t)k) .. $];\n}\nunittest\n\
    {\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L)\
    \ == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n\
    \    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpto7a_sqg.d(30): Error: undefined identifier `qsort`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpto7a_sqg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    arr.sort;\n    long[] ret = new long[k];\n    for (size_t i\
    \ = arr.length - k; i < arr.length; i++)\n    {\n        ret[i - arr.length +\
    \ k] = arr[i];\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate =\
    \ maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n \
    \   assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe7yhln1n.d(30): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe7yhln1n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    auto size = max(0L, min(k, arr.length));\n    auto sorted =\
    \ arr.dup.sort();\n    return sorted[$ - size .. $];\n}\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp398wkgfl.d(30): Error: undefined identifier `max`, did you mean
    function `fmax`?

    /tmp/tmp398wkgfl.d(31): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp398wkgfl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    /*\n        We are going to use a min heap to keep track of\
    \ the maximum\n        k numbers in the array. This algorithm runs in O(N*log(k))\
    \ time\n        complexity.\nunittest\n{\n    alias candidate = maximum;\n\n \
    \   assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpma1hey3k.d(30): Error: unterminated /* */ comment

    /tmp/tmpma1hey3k.d(50): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpma1hey3k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    return quickSelect(arr, 0, arr.length - 1, (int)k);\n}\nunittest\n\
    {\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L)\
    \ == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n\
    \    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptxbo11n2.d(30): Error: C style cast illegal, use `cast(int)k`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptxbo11n2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    quickSort(arr, 0, arr.length - 1);\n    arr = arr[arr.length\
    \ - k .. $];\n    return arr;\n}\nunittest\n{\n    alias candidate = maximum;\n\
    \n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplkatqu3z.d(30): Error: undefined identifier `quickSort`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplkatqu3z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[(int)k];\n    int cntr = 0;\n    int\
    \ j = 0;\n    int[][] arr2 = new int[arr.length][2];\n    for (int i = 0; i <\
    \ arr.length; i++)\n    {\n        arr2[i][0] = (int)arr[i];\n        arr2[i][1]\
    \ = i;\n    }\n    Arrays.sort(arr2, new Comparator<int[]>() {\n        @Override\n\
    \        public int compare(int[] o1, int[] o2) {\n            if (o1[0] == o2[0])\
    \ {\n                return o1[1] - o2[1];\n            }\n            return\
    \ o2[0] - o1[0];\n        }\n    });\n    while (cntr < arr.length && j < k)\n\
    \    {\n        result[j] = arr2[cntr][0];\n        cntr++;\n        j++;\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n \
    \   assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd9lyd2ti.d(30): Error: C style cast illegal, use `cast(int)k`

    /tmp/tmpd9lyd2ti.d(36): Error: C style cast illegal, use `cast(int)arr[i]`

    /tmp/tmpd9lyd2ti.d(39): Error: found `[` when expecting `.` following int

    /tmp/tmpd9lyd2ti.d(39): Error: found `]` when expecting identifier following `int`.

    /tmp/tmpd9lyd2ti.d(39): Error: found `>` when expecting `,`

    /tmp/tmpd9lyd2ti.d(41): Error: basic type expected, not `public`

    /tmp/tmpd9lyd2ti.d(41): Error: no identifier for declarator `_error_`

    /tmp/tmpd9lyd2ti.d(41): Error: found `public` instead of statement

    /tmp/tmpd9lyd2ti.d(45): Error: found `return` when expecting `,`

    /tmp/tmpd9lyd2ti.d(45): Error: found `;` when expecting `,`

    /tmp/tmpd9lyd2ti.d(46): Error: expression expected, not `}`

    /tmp/tmpd9lyd2ti.d(47): Error: found `}` when expecting `,`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd9lyd2ti.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] ret;\n    ret.length = cast(int)k;\n    k = min(k, cast(long)arr.length);\n\
    \    assert(k > 0);\n    foreach(i, elt; arr)\n    {\n        const bool bInsert\
    \ = (ret.length == 0) || (elt > ret[$-1]);\n        const bool bDelete = (ret.length\
    \ == k) && (elt < ret[0]);\n        if(bInsert)\n        {\n            ret ~=\
    \ elt;\n            ret.sort;\n        }\n        else if(bDelete)\n        {\n\
    \            ret[0 .. 1] = ret[1 .. $];\n        }\n    }\n    return ret;\n}\n\
    unittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L,\
    \ 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L,\
    \ 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyy92i69i.d(32): Error: undefined identifier `min`, did you mean
    function `main`?

    /tmp/tmpyy92i69i.d(41): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyy92i69i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    const int len = arr.length;\n    const int m = min(len, k);\n\
    \    long[] res = new long[m];\n    int i = 0;\n    int j = 0;\n    foreach(a;\
    \ arr)\n    {\n        if(res[i] < a)\n        {\n            res[i] = a;\n  \
    \          int t = i;\n            while(t > 0 && res[t - 1] < res[t])\n     \
    \       {\n                swap(res[t - 1], res[t]);\n                t--;\n \
    \           }\n            i = (i + 1) % m;\n        }\n    }\n    return res;\n\
    }\n/*\n    Test\n*/\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphb6elr66.d(30): Error: cannot implicitly convert expression `arr.length`
    of type `ulong` to `const(int)`

    /tmp/tmphb6elr66.d(31): Error: undefined identifier `min`, did you mean function
    `main`?

    /tmp/tmphb6elr66.d(43): Error: undefined identifier `swap`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphb6elr66.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    const long N = arr.length;\n    if (k == N) return arr;\n \
    \   if (k > N) k = N;\n    long[] result = new long[k];\n    long j = 0;\n   \
    \ for (long i = N-1; i >= N-k; i--) \n    {\n        result[j] = arr[i];\n   \
    \     j++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\
    \n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp48auqfla.d(46): unittest failure

    ----------------

    ??:? _d_unittestp [0x4289cd]

    ??:? void tmp48auqfla.__unittest_L42_C1() [0x427fc3]

    ??:? void tmp48auqfla.__modtest() [0x42874c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42caab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b93e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430bc9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x431078]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430b55]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b915]

    ??:? runModuleUnitTests [0x42c881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428e90]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    k = min(k, arr.length);\n    if (k == 0) return new long[0];\n\
    \    long[] result = new long[k];\n    result[0] = arr[0];\n    int idx = 1;\n\
    \    for (int i = 1; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n\
    \        {\n            if (idx < k)\n            {\n                result[idx]\
    \ = arr[i];\n                idx++;\n            }\n            else\n       \
    \     {\n                for (int j = 0; j < k; j++)\n                {\n    \
    \                if (result[j] < result[j + 1])\n                    {\n     \
    \                   result[j] = result[j + 1];\n                    }\n      \
    \              else break;\n                }\n                result[k - 1] =\
    \ arr[i];\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L)\
    \ == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n\
    \    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz4997jpi.d(30): Error: undefined identifier `min`, did you mean
    function `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz4997jpi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] temp = new long[k];\n    long i = 0L;\n    long j =\
    \ 0L;\n    long n = arr.length;\n    for (; i < n; i++)\n    {\n        if (arr[i]\
    \ > temp[j])\n        {\n            if (j < k - 1L)\n            {\n        \
    \        j++;\n                temp[j] = arr[i];\n            }\n            else\n\
    \            {\n                temp[j] = arr[i];\n                for (j = 0L;\
    \ j < k; j++)\n                {\n                    long a = temp[j];\n    \
    \                long b = temp[j + 1L];\n                    if (a > b)\n    \
    \                {\n                        long c = temp[j];\n              \
    \          temp[j] = temp[j + 1L];\n                        temp[j + 1L] = c;\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return temp;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpt6hl4es_.d(66): unittest failure

    ----------------

    ??:? _d_unittestp [0x428b6d]

    ??:? void tmpt6hl4es_.__unittest_L62_C1() [0x428163]

    ??:? void tmpt6hl4es_.__modtest() [0x4288ec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cc4b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bade]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430d69]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x431218]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430cf5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bab5]

    ??:? runModuleUnitTests [0x42ca21]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429030]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    struct max_item\n    {\n        long value;\n        long index;\n\
    \    };\n    const size_t N = (size_t)k;\n    long length = (long)arr.length;\n\
    \    if (N > length) return arr;\n    auto max_arr = new max_item[](N);\n    max_arr[0].value\
    \ = arr[0];\n    max_arr[0].index = 0;\n    for (long i = 1; i < N; ++i)\n   \
    \ {\n        max_arr[i].value = max(arr[i], max_arr[i - 1].value);\n        max_arr[i].index\
    \ = i;\n    }\n    for (long i = N; i < length; ++i)\n    {\n        if (arr[i]\
    \ > max_arr[N - 1].value)\n        {\n            max_arr[N - 1].value = arr[i];\n\
    \            max_arr[N - 1].index = i;\n            for (long j = N - 1; j > 0;\
    \ --j)\n            {\n                if (max_arr[j].value > max_arr[j - 1].value)\n\
    \                {\n                    std.swap(max_arr[j], max_arr[j - 1]);\n\
    \                }\n                else\n                {\n                \
    \    break;\n                }\n            }\n        }\n    }\n    auto result\
    \ = new long[](N);\n    foreach (item; max_arr)\n    {\n        result[item.index]\
    \ = item.value;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n\
    \    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdsgy31sj.d(34): Deprecation: use `{ }` for an empty statement,
    not `;`

    /tmp/tmpdsgy31sj.d(35): Error: C style cast illegal, use `cast(size_t)k`

    /tmp/tmpdsgy31sj.d(36): Error: C style cast illegal, use `cast(long)arr.length`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdsgy31sj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] res = new long[k];\n    long[] temp;\n    if (k <= 0)\
    \ \n    {\n        return res;\n    }\n    temp = arr[0..(k + 1)];\n    temp.sort();\n\
    \    for (long i = k; i < arr.length; i++) \n    {\n        if (arr[i] > temp[0])\
    \ \n        {\n            temp[0] = arr[i];\n            temp.sort();\n     \
    \   }\n    }\n    res = temp[0..k];\n    return res;\n}\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbioszx7r.d(37): Error: no property `sort` for type `long[]`

    /tmp/tmpbioszx7r.d(43): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbioszx7r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    assert (arr.length > 0);\n    return arr[0..int(k)].sort[$-1];\n\
    }\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L,\
    \ 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L,\
    \ 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcyp2v206.d(31): Error: cannot implicitly convert expression `k`
    of type `long` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcyp2v206.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    int len = arr.length;\n    std.sort(arr);\n    long[] max =\
    \ new long[k];\n    for (int i = len - 1; i >= len - k; i--) \n    {\n       \
    \ max[len - i - 1] = arr[i];\n    }\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdhhbrhij.d(30): Error: cannot implicitly convert expression `arr.length`
    of type `ulong` to `int`

    /tmp/tmpdhhbrhij.d(31): Error: undefined identifier `sort` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdhhbrhij.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    int len = arr.length;\n    long[] retArr = new long[(int)k];\n\
    \    //retArr = heapSort(arr);\n    retArr = quickSort(arr);\n    return retArr;\n\
    }\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L,\
    \ 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L,\
    \ 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwxlxvdkd.d(31): Error: C style cast illegal, use `cast(int)k`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwxlxvdkd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] ret = new long[(int)k];\n    int i, j;\n    long temp;\n\
    \    for (i = 0; i < k; i++)\n        ret[i] = arr[i];\n    for (i = k / 2; i\
    \ >= 0; i--) \n    {\n        for (j = i; j < k;)\n        {\n            long\
    \ left = 2 * j + 1;\n            long right = 2 * j + 2;\n            long max\
    \ = j;\n            if (left < k && ret[(int)left] > ret[(int)max])\n        \
    \        max = left;\n            if (right < k && ret[(int)right] > ret[(int)max])\n\
    \                max = right;\n            if (max == j)\n                break;\n\
    \            temp = ret[(int)j];\n            ret[(int)j] = ret[(int)max];\n \
    \           ret[(int)max] = temp;\n            j = max;\n        }\n    }\n  \
    \  for (i = k; i < arr.length; i++)\n    {\n        if (arr[i] > ret[0])\n   \
    \     {\n            ret[0] = arr[i];\n            for (j = 0; j < k;)\n     \
    \       {\n                long left = 2 * j + 1;\n                long right\
    \ = 2 * j + 2;\n                long max = j;\n                if (left < k &&\
    \ ret[(int)left] > ret[(int)max])\n                    max = left;\n         \
    \       if (right < k && ret[(int)right] > ret[(int)max])\n                  \
    \  max = right;\n                if (max == j)\n                    break;\n \
    \               temp = ret[(int)j];\n                ret[(int)j] = ret[(int)max];\n\
    \                ret[(int)max] = temp;\n                j = max;\n           \
    \ }\n        }\n    }\n    //for (i = 0; i < k / 2; i++)\n    //{\n    //    temp\
    \ = ret[i];\n    //    ret[i] = ret[(int)(k - i - 1)];\n    //\nunittest\n{\n\
    \    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) ==\
    \ [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n  \
    \  assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp917yn6g8.d(30): Error: C style cast illegal, use `cast(int)k`

    /tmp/tmp917yn6g8.d(42): Error: C style cast illegal, use `cast(int)left`

    /tmp/tmp917yn6g8.d(42): Error: C style cast illegal, use `cast(int)max`

    /tmp/tmp917yn6g8.d(44): Error: C style cast illegal, use `cast(int)right`

    /tmp/tmp917yn6g8.d(44): Error: C style cast illegal, use `cast(int)max`

    /tmp/tmp917yn6g8.d(48): Error: C style cast illegal, use `cast(int)j`

    /tmp/tmp917yn6g8.d(49): Error: C style cast illegal, use `cast(int)j`

    /tmp/tmp917yn6g8.d(49): Error: C style cast illegal, use `cast(int)max`

    /tmp/tmp917yn6g8.d(50): Error: C style cast illegal, use `cast(int)max`

    /tmp/tmp917yn6g8.d(64): Error: C style cast illegal, use `cast(int)left`

    /tmp/tmp917yn6g8.d(64): Error: C style cast illegal, use `cast(int)max`

    /tmp/tmp917yn6g8.d(66): Error: C style cast illegal, use `cast(int)right`

    /tmp/tmp917yn6g8.d(66): Error: C style cast illegal, use `cast(int)max`

    /tmp/tmp917yn6g8.d(70): Error: C style cast illegal, use `cast(int)j`

    /tmp/tmp917yn6g8.d'
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    if (arr.length == k) \n    {\n        return arr;\n    }\n\
    \    else if (arr.length < k) \n    {\n        return new long[0];\n    }\n  \
    \  else \n    {\n        long[] lk = new long[to!int(k)];\n        long max =\
    \ arr[0];\n        int lkIndex = 0;\n        lk[lkIndex] = max;\n        for (int\
    \ i = 1; i < arr.length; i++) \n        {\n            if (arr[i] >= max) \n \
    \           {\n                max = arr[i];\n                lk[lkIndex] = max;\n\
    \                lkIndex++;\n                if (lkIndex == lk.length) \n    \
    \            {\n                    break;\n                }\n            }\n\
    \        }\n        return lk;\n    }\n}\nunittest\n{\n    alias candidate = maximum;\n\
    \n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9o6e0s5k.d(40): Error: template instance `to!int` template `to`
    is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9o6e0s5k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] tempres = new long[k];\n    long[] res = new long[k];\n\
    \    foreach(i,d; 0..k) tempres[i] = d;\n    long max = -10000;\n    long index\
    \ = 0;\n    foreach(i,d; arr)\n    {\n        if(d > max)\n        {\n       \
    \     max = d;\n            index = i;\n        }\n    }\n    tempres[0] = arr[index];\n\
    \    arr[index] = -1000;\n    foreach(i,d; 1..k)\n    {\n        long max = -10000;\n\
    \        long index = 0;\n        foreach(j,e; arr)\n        {\n            if(e\
    \ > max)\n            {\n                max = e;\n                index = j;\n\
    \            }\n        }\n        tempres[i] = arr[index];\n        arr[index]\
    \ = -1000;\n    }\n    foreach(i,d; tempres)\n    {\n        res[i] = d;\n   \
    \ }\n    return res;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp95ipls9e.d(32): Error: found `..` when expecting `)`

    /tmp/tmp95ipls9e.d(32): Error: found `)` when expecting `;` following statement

    /tmp/tmp95ipls9e.d(45): Error: found `..` when expecting `)`

    /tmp/tmp95ipls9e.d(45): Error: found `)` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp95ipls9e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    if (arr.length == 0)\n        return new long[0];\n    \n \
    \   long[] result = new long[(int)k];\n    int resultIndex = 0;\n    int arrIndex\
    \ = 0;\n    int i = 0;\n    while (arrIndex < arr.length && k > 0)\n    {\n  \
    \      if (resultIndex == k)\n        {\n            if (arr[arrIndex] < result[0])\n\
    \            {\n                arrIndex++;\n                continue;\n     \
    \       }\n            else\n            {\n                resultIndex = 0;\n\
    \                continue;\n            }\n        }\n        else\n        {\n\
    \            if (arr[arrIndex] > result[resultIndex])\n            {\n       \
    \         for (int j = 0; j < resultIndex; j++)\n                {\n         \
    \           if (arr[arrIndex] < result[j])\n                    {\n          \
    \              continue;\n                    }\n                    else\n  \
    \                  {\n                        for (int l = 0; l < j; l++)\n  \
    \                      {\n                            result[l] = result[l + 1];\n\
    \                        }\n                        result[j] = arr[arrIndex];\n\
    \                        arrIndex++;\n                        break;\n       \
    \             }\n                }\n            }\n            else\n        \
    \    {\n                result[resultIndex] = arr[arrIndex];\n               \
    \ arrIndex++;\n                resultIndex++;\n            }\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp43myb3a_.d(33): Error: C style cast illegal, use `cast(int)k`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp43myb3a_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    if (k == 0) return [];\n    long[] out = new long[k];\n   \
    \ long[] a = arr.sort();\n    out[0] = a[$ - 1];\n    foreach (i, v; a[$ - k +\
    \ 1 .. $])\n    {\n        out[i] = v;\n    }\n    return out;\n}\nunittest\n\
    {\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L)\
    \ == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n\
    \    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw0ihv3gq.d(31): Error: no identifier for declarator `long[]`

    /tmp/tmpw0ihv3gq.d(31): Error: found `out` instead of statement

    /tmp/tmpw0ihv3gq.d(33): Error: found `out` instead of statement

    /tmp/tmpw0ihv3gq.d(36): Error: found `out` instead of statement

    /tmp/tmpw0ihv3gq.d(38): Error: expression expected, not `out`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw0ihv3gq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[(int)k];\n    int[] indexes = new\
    \ int[(int)k];\n    long[] mins = new long[(int)k];\n    for (int i = 0; i < k;\
    \ i++) {\n        indexes[i] = i;\n        mins[i] = arr[i];\n    }\n    for (int\
    \ i = k; i < arr.length; i++) {\n        int maxIndex = 0;\n        for (int j\
    \ = 1; j < k; j++) {\n            if (mins[j] > mins[maxIndex]) {\n          \
    \      maxIndex = j;\n            }\n        }\n        if (arr[i] < mins[maxIndex])\
    \ {\n            continue;\n        }\n        indexes[maxIndex] = i;\n      \
    \  mins[maxIndex] = arr[i];\n    }\n    int index = 0;\n    for (int i = 0; i\
    \ < k; i++) {\n        result[index++] = arr[indexes[i]];\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L,\
    \ 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L,\
    \ 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvlsw4zzi.d(30): Error: C style cast illegal, use `cast(int)k`

    /tmp/tmpvlsw4zzi.d(31): Error: C style cast illegal, use `cast(int)k`

    /tmp/tmpvlsw4zzi.d(32): Error: C style cast illegal, use `cast(int)k`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvlsw4zzi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] max = new long[cast(int)k];\n    int maxIndex = cast(int)k\
    \ - 1;\n    for (long elem; elem = arr.popFront;) \n    {\n        for (int i\
    \ = maxIndex; i >= 0; i--) \n        {\n            if (elem <= max[i]) \n   \
    \         {\n                if (i == 0) \n                {\n               \
    \     continue;\n                }\n                continue;\n            }\n\
    \            max.insert(i, elem);\n            max.popBack;\n            break;\n\
    \        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = maximum;\n\
    \n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn9u7ucct.d(32): Error: assignment cannot be used as a condition,
    perhaps `==` was meant?

    /tmp/tmpn9u7ucct.d(44): Error: no property `insert` for type `long[]`

    /tmp/tmpn9u7ucct.d(45): Error: no property `popBack` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn9u7ucct.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    sort(arr);\n    return arr[arr.length - k .. $];\n}\nunittest\n\
    {\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L)\
    \ == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n\
    \    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaz04nzr_.d(30): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaz04nzr_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] sorted = new long[arr.length];\n    if (k <= 0)\n  \
    \      return new long[0];\n    if (k == 1) {\n        if (arr.length == 1)\n\
    \            return arr;\n        else {\n            long max = arr[0];\n   \
    \         for (int i = 1; i < arr.length; i++) {\n                if (arr[i] >\
    \ max)\n                    max = arr[i];\n            }\n            return [max];\n\
    \        }\n    }\n    if (k >= arr.length)\n        return arr;\n    for (int\
    \ i = 0; i < arr.length; i++) {\n        long j = i;\n        while (j > 0 &&\
    \ arr[j - 1] < arr[j]) {\n            long tmp = arr[j];\n            arr[j] =\
    \ arr[j - 1];\n            arr[j - 1] = tmp;\n            j--;\n        }\n  \
    \  }\n    for (int i = 0; i < k; i++) {\n        sorted[i] = arr[i];\n    }\n\
    \    return sorted;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvbnpw46w.d(65): unittest failure

    ----------------

    ??:? _d_unittestp [0x428bd5]

    ??:? void tmpvbnpw46w.__unittest_L61_C1() [0x4281cf]

    ??:? void tmpvbnpw46w.__modtest() [0x428958]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ccb3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bb46]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430dd1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x431280]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430d5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bb1d]

    ??:? runModuleUnitTests [0x42ca89]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429098]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    List!long maxK = new List!long;\n    foreach(value; arr)\n\
    \    {\n        maxK.insert(abs(value))[0..$] = abs(value);\n        if(maxK.length\
    \ > k)\n        {\n            maxK.remove(maxK.length - 1);\n        }\n    }\n\
    \    foreach(index, value; maxK)\n    {\n        maxK[index] = -value;\n    }\n\
    \    return maxK.sort().take(k).array;\n}\nunittest\n{\n    alias candidate =\
    \ maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n \
    \   assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuikfrq4w.d(30): Error: template instance `List!long` template `List`
    is not defined

    /tmp/tmpuikfrq4w.d(30): Error: template instance `List!long` template `List` is
    not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuikfrq4w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    if (k > arr.length) \n    {\n        throw new Exception(\"\
    k is greater than the length of the array\");\n    }\n    auto r = new long[k];\n\
    \    for (int i = 0; i < k; i++)\n    {\n        r[i] = arr[i];\n    }\n    r.sort();\n\
    \    for (int i = k; i < arr.length; i++)\n    {\n        if (arr[i] > r[0])\n\
    \        {\n            r[0] = arr[i];\n            r.sort();\n        }\n   \
    \ }\n    return r;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpog1d3wn4.d(39): Error: no property `sort` for type `long[]`

    /tmp/tmpog1d3wn4.d(40): Error: cannot implicitly convert expression `k` of type
    `long` to `int`

    /tmp/tmpog1d3wn4.d(45): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpog1d3wn4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    auto n = arr.length;\n    long[] copy = arr.dup;\n    sort(copy);\n\
    \    return copy[$-k..$];\n}\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuk4x93t9.d(32): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuk4x93t9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long index;\n    long[] result = new long[k];\n    for (index\
    \ = 0L; index < k; index++) \n    {\n        result[index] = -std.int.max;\n \
    \   }\n    for (index = 0L; index < arr.length; index++) \n    {\n        if (arr[index]\
    \ > result[k - 1L]) \n        {\n            result[k - 1L] = arr[index];\n  \
    \          result.sort();\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L)\
    \ == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n\
    \    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0g8rn2h_.d(34): Error: identifier expected following `.`, not `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0g8rn2h_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[(int)k];\n    long temp;\n    long\
    \ i, j;\n    long smallerIndex;\n    for (i = 0; i < k; i++) \n    {\n       \
    \ smallerIndex = i;\n        for (j = i + 1; j < arr.length; j++) \n        {\n\
    \            if (arr[(int)j] > arr[(int)smallerIndex]) \n            {\n     \
    \           smallerIndex = j;\n            }\n        }\n        if (smallerIndex\
    \ != i) \n        {\n            temp = arr[(int)i];\n            arr[(int)i]\
    \ = arr[(int)smallerIndex];\n            arr[(int)smallerIndex] = temp;\n    \
    \    }\n        result[(int)i] = arr[(int)i];\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L,\
    \ 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L,\
    \ 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprnxeyk8w.d(30): Error: C style cast illegal, use `cast(int)k`

    /tmp/tmprnxeyk8w.d(39): Error: C style cast illegal, use `cast(int)j`

    /tmp/tmprnxeyk8w.d(39): Error: C style cast illegal, use `cast(int)smallerIndex`

    /tmp/tmprnxeyk8w.d(46): Error: C style cast illegal, use `cast(int)i`

    /tmp/tmprnxeyk8w.d(47): Error: C style cast illegal, use `cast(int)i`

    /tmp/tmprnxeyk8w.d(47): Error: C style cast illegal, use `cast(int)smallerIndex`

    /tmp/tmprnxeyk8w.d(48): Error: C style cast illegal, use `cast(int)smallerIndex`

    /tmp/tmprnxeyk8w.d(50): Error: C style cast illegal, use `cast(int)i`

    /tmp/tmprnxeyk8w.d(50): Error: C style cast illegal, use `cast(int)i`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprnxeyk8w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    import std.array;\n    auto result = new long[k];\n    foreach(idx,\
    \ el; arr)\n    {\n        if(el > result[$-1])\n        {\n            auto l\
    \ = idx;\n            auto r = k - 1;\n            while(l < r)\n            {\n\
    \                auto m = (l + r) / 2;\n                if(result[m] >= el)\n\
    \                    l = m + 1;\n                else\n                    r =\
    \ m;\n            }\n            array.insert(result, r, el);\n            array.remove(result,\
    \ k);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n\
    \    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd9tg7rt4.d(46): Error: template `array(Range)(Range r) if (isIterable!Range
    && !isNarrowString!Range && !isInfinite!Range)` does not have property `insert`

    /tmp/tmpd9tg7rt4.d(47): Error: template `array(Range)(Range r) if (isIterable!Range
    && !isNarrowString!Range && !isInfinite!Range)` does not have property `remove`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd9tg7rt4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    return std.sort(arr.takeExactly(k));\n}\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6i3edo5e.d(30): Error: undefined identifier `sort` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6i3edo5e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    // arr.sort();\n    // \n    // const auto sz = size_t(k);\n\
    \    // \n    // return arr[arr.length - sz .. arr.length];\n    // \n    // \n\
    \    // \n    // const auto len = arr.length;\n    // const auto sz = size_t(k);\n\
    \    // \n    // if (sz == len)\n    // {\n    //     return arr.sort();\n   \
    \ // }\n    // \n    // if (sz == 1)\n    // {\n    //     long mx = arr[0];\n\
    \    //     for (size_t i = 1; i < len; ++i)\n    //     {\n    //         mx\
    \ = max(mx, arr[i]);\n    //     }\n    // \n    //     return [mx];\n    // }\n\
    \    // \n    // long[] res;\n    // res.length = sz;\n    // \n    // auto j\
    \ = sz - 1;\n    // \n    // for (size_t i = len - 1; i >= len - sz; --i)\n  \
    \  // {\n    //     res[j--] = arr[i];\n    // }\n    // \n    // for (size_t\
    \ i = len - sz - 1; i < len; --i)\n    // {\n    //     if (arr[i] > res[0])\n\
    \    //     {\n    //         // replace smallest element in result array\n  \
    \  //         res[0] = arr[i];\n    //         for (size_t j = 1; j < sz; ++j)\n\
    \    //         {\n    //             if (res[j - 1] > res[j])\n    //       \
    \      {\n    //                 // bubble up\n    //                 std.swap(res[j\
    \ - 1], res[j]);\n    //             }\n    //             else\n    //      \
    \       {\n    //                 break;\n    //             }\n    //       \
    \  }\n    //     }\n    // }\n    // \n    // return res;\n    // \n    const\
    \ auto len = arr.length;\n    const auto s\nunittest\n{\n    alias candidate =\
    \ maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n \
    \   assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg7nzprzf.d(92): Error: no identifier for declarator `s`

    /tmp/tmpg7nzprzf.d(92): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg7nzprzf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    foreach(i; 0 .. k)\n    {\n\
    \        long index = 0;\n        long max = arr[0];\n        foreach(j; 1 ..\
    \ arr.length)\n        {\n            if(arr[j] > max)\n            {\n      \
    \          max = arr[j];\n                index = j;\n            }\n        }\n\
    \        result[i] = max;\n        arr[index] = long.min;\n    }\n    sort(result);\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxkeiws6h.d(46): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxkeiws6h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    if (arr.length == k)\n        return arr;\n    \n    int startIndex\
    \ = 0;\n    int endIndex = arr.length - 1;\n    int requiredSize = (int)k;\n \
    \   while (endIndex > startIndex)\n    {\n        int pivotIndex = partition(arr,\
    \ startIndex, endIndex);\n        if (pivotIndex < requiredSize)\n        {\n\
    \            startIndex = pivotIndex + 1;\n        }\n        else if (pivotIndex\
    \ > requiredSize)\n        {\n            endIndex = pivotIndex - 1;\n       \
    \ }\n        else\n        {\n            return slice(arr, 0, (int)k);\n    \
    \    }\n    }\n    return slice(arr, 0, (int)k);\n}\nunittest\n{\n    alias candidate\
    \ = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n\
    \    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp11cbov89.d(35): Error: C style cast illegal, use `cast(int)k`

    /tmp/tmp11cbov89.d(49): Error: C style cast illegal, use `cast(int)k`

    /tmp/tmp11cbov89.d(52): Error: C style cast illegal, use `cast(int)k`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp11cbov89.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    if (k == 0)\n        return new long[0];\n    if (k == arr.length)\n\
    \        return arr;\n    long[] result = new long[cast(int)k];\n    for (int\
    \ i = 0; i < result.length; i++)\n        result[i] = -INFINITY;\n    foreach\
    \ (int i, long num; arr)\n    {\n        if (num > result[0])\n        {\n   \
    \         result[0] = num;\n            result.sort(cast(int a, int b) => result[a]\
    \ > result[b] ? -1 : 1);\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L)\
    \ == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n\
    \    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5g8d6u32.d(42): Error: unexpected identifier `a` in declarator

    /tmp/tmp5g8d6u32.d(42): Error: found `,` when expecting `)`

    /tmp/tmp5g8d6u32.d(42): Error: found `b` when expecting `.` following int

    /tmp/tmp5g8d6u32.d(42): Error: found `)` when expecting identifier following `int`.

    /tmp/tmp5g8d6u32.d(42): Error: found `=>` when expecting `,`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5g8d6u32.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    if (arr.length < k)\n        return null;\n    else if (arr.length\
    \ == k)\n        return arr;\n    \n    if (k == 1)\n    {\n        auto aMax\
    \ = arr[0];\n        foreach (i, a; arr)\n            if (a > aMax)\n        \
    \        aMax = a;\n        return [aMax];\n    }\n    \n    size_t n = arr.length;\n\
    \    // we need to find k largest elements;\n    long[] maxArr = new long[k];\n\
    \    for (int i = 0; i < k; i++)\n        maxArr[i] = arr[i];\n    \n    for (int\
    \ i = 0; i < k/2; i++)\n    {\n        if (maxArr[2*i+1] > maxArr[2*i])\n    \
    \        swap(maxArr[2*i], maxArr[2*i+1]);\n        if (maxArr[2*i+2] > maxArr[2*i])\n\
    \            swap(maxArr[2*i], maxArr[2*i+2]);\n    }\n    \n    for (int i =\
    \ k; i < n; i++)\n    {\n        if (arr[i] > maxArr[0])\n        {\n        \
    \    maxArr[0] = arr[i];\n            // restore heap\n            int curr =\
    \ 0;\n            while (2*curr+1 < k)\n            {\n                auto j\
    \ = 2*curr+1;\n                if (j+1 < k && maxArr[j+1] > maxArr[j])\n     \
    \               j++;\n                if (maxArr[curr] > maxArr[j])\n        \
    \            break;\n                swap(maxArr[curr], maxArr[j]);\n        \
    \        curr = j;\n            }\n        }\n    }\n    \n    return maxArr;\n\
    }\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L,\
    \ 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L,\
    \ 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwc0a2qs9.d(53): Error: undefined identifier `swap`

    /tmp/tmpwc0a2qs9.d(55): Error: undefined identifier `swap`

    /tmp/tmpwc0a2qs9.d(58): Error: cannot implicitly convert expression `k` of type
    `long` to `int`

    /tmp/tmpwc0a2qs9.d(72): Error: undefined identifier `swap`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwc0a2qs9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] sorted = sort(arr);\n    long[] result = new long[k];\n\
    \    int c = 0;\n    int l = arr.length - 1;\n    while (c < k)\n    {\n     \
    \   result[c] = sorted[l];\n        l--;\n        c++;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L,\
    \ 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L,\
    \ 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjo7bujoe.d(30): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpjo7bujoe.d(33): Error: cannot implicitly convert expression `arr.length
    - 1LU` of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjo7bujoe.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    import std.algorithm.comparison : sort;\n    long[] sortedArray\
    \ = arr.sort();\n    return sortedArray[arr.length - k .. $];\n}\nunittest\n{\n\
    \    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) ==\
    \ [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n  \
    \  assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6l514uu2.d(30): Error: module `std.algorithm.comparison` import
    `sort` not found

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6l514uu2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] temp = new long[k];\n    long[] ret = new long[k];\n\
    \    for (long i = 0L; i < k; i++)\n    {\n        temp[i] = arr[i];\n    }\n\
    \    qsort(temp);\n    for (long i = k; i < arr.length; i++)\n    {\n        if\
    \ (arr[i] > temp[0])\n        {\n            temp[0] = arr[i];\n            qsort(temp);\n\
    \        }\n    }\n    for (long i = 0L; i < k; i++)\n    {\n        ret[i] =\
    \ temp[i];\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = maximum;\n\
    \n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk5j3yo2x.d(36): Error: undefined identifier `qsort`

    /tmp/tmpk5j3yo2x.d(42): Error: undefined identifier `qsort`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk5j3yo2x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    int length = arr.length;\n    k = min(k, length);\n    return\
    \ insertionSort(arr, k);\n}\nunittest\n{\n    alias candidate = maximum;\n\n \
    \   assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptufs7ied.d(30): Error: cannot implicitly convert expression `arr.length`
    of type `ulong` to `int`

    /tmp/tmptufs7ied.d(31): Error: undefined identifier `min`, did you mean function
    `main`?

    /tmp/tmptufs7ied.d(32): Error: undefined identifier `insertionSort`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptufs7ied.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    return arr[$-k .. $];\n}\nunittest\n{\n    alias candidate\
    \ = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n\
    \    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpoi3mvssn.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x42893d]

    ??:? void tmpoi3mvssn.__unittest_L32_C1() [0x427f33]

    ??:? void tmpoi3mvssn.__modtest() [0x4286bc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c9bf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b852]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4309e5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430e94]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430971]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b829]

    ??:? runModuleUnitTests [0x42c795]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428e00]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    sort(arr);\n    long[] result = new long[k];\n    for (long\
    \ i = 0; i < k; i++) \n    {\n        result[i] = arr[arr.length - 1 - i];\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpro52v2zg.d(30): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpro52v2zg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    auto s = sort(arr);\n    return s[arr.length - k .. $];\n}\n\
    unittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L,\
    \ 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L,\
    \ 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk5xnvd0e.d(30): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk5xnvd0e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    if (k <= 0)\n        return new long[0];\n    if (k >= arr.length)\n\
    \        return arr;\n    long[] heap = new long[k];\n    foreach (i, val; arr)\n\
    \    {\n        if (i < k)\n        {\n            heap[i] = val;\n          \
    \  up(heap, i);\n        }\n        else\n        {\n            if (val > heap[0])\n\
    \            {\n                heap[0] = val;\n                down(heap, 0);\n\
    \            }\n        }\n    }\n    return heap;\n}\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3snejlic.d(40): Error: undefined identifier `up`, did you mean
    template `dup(T : V[K], K, V)(T aa)`?

    /tmp/tmp3snejlic.d(47): Error: undefined identifier `down`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3snejlic.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] res = new long[(int)k];\n    for (long i = 0; i < k;\
    \ i++) \n    {\n        res[(int)i] = arr[(int)i];\n    }\n    sort(res);\n  \
    \  for (long i = k; i < arr.length; i++) \n    {\n        long j = 0;\n      \
    \  while (j < k && res[(int)j] > arr[(int)i]) \n        {\n            j++;\n\
    \        }\n        if (j < k) \n        {\n            memmove(res, (int)j, res,\
    \ (int)(j + 1), (int)(k - j - 1));\n            res[(int)j] = arr[(int)i];\n \
    \       }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = maximum;\n\
    \n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5sgjbdw3.d(30): Error: C style cast illegal, use `cast(int)k`

    /tmp/tmp5sgjbdw3.d(33): Error: C style cast illegal, use `cast(int)i`

    /tmp/tmp5sgjbdw3.d(33): Error: C style cast illegal, use `cast(int)i`

    /tmp/tmp5sgjbdw3.d(39): Error: C style cast illegal, use `cast(int)j`

    /tmp/tmp5sgjbdw3.d(39): Error: C style cast illegal, use `cast(int)i`

    /tmp/tmp5sgjbdw3.d(45): Error: C style cast illegal, use `cast(int)j`

    /tmp/tmp5sgjbdw3.d(45): Error: C style cast illegal, use `cast(int)(j + 1)`

    /tmp/tmp5sgjbdw3.d(45): Error: C style cast illegal, use `cast(int)(k - j - 1)`

    /tmp/tmp5sgjbdw3.d(46): Error: C style cast illegal, use `cast(int)j`

    /tmp/tmp5sgjbdw3.d(46): Error: C style cast illegal, use `cast(int)i`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5sgjbdw3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] temp = new long[k];\n    int n = arr.length;\n    for\
    \ (int i = 0; i < k; i++) {\n        long max = arr[i];\n        int index = i;\n\
    \        for (int j = i + 1; j < n; j++) {\n            if (arr[j] > max) {\n\
    \                max = arr[j];\n                index = j;\n            }\n  \
    \      }\n        temp[i] = max;\n        arr[index] = arr[i];\n        arr[i]\
    \ = max;\n    }\n    return temp;\n}\nunittest\n{\n    alias candidate = maximum;\n\
    \n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjt_wnbsn.d(31): Error: cannot implicitly convert expression `arr.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjt_wnbsn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] bucket = new long[1001];\n    foreach(i; arr) bucket[i\
    \ + 1000]++;\n    long[] res = new long[k];\n    k--;\n    foreach(i; 1000 - k\
    \ .. 1001)\n    {\n        while(bucket[i]-- > 0)\n        {\n            res[k--]\
    \ = i - 1000;\n            if(k < 0) return res;\n        }\n    }\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmp6ckjlio9.d(31): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428b16]

    ??:? long[] tmp6ckjlio9.maximum(long[], long) [0x427ea6]

    ??:? void tmp6ckjlio9.__unittest_L44_C1() [0x427fee]

    ??:? void tmp6ckjlio9.__modtest() [0x4287e8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cb43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b9d6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430c61]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x431110]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430bed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b9ad]

    ??:? runModuleUnitTests [0x42c919]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio'
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long len = arr.length;\n    if (k == 0)\n        return [];\n\
    \    else if (k >= len)\n        return arr;\n    else\n    {\n        long[]\
    \ res = [uninitialized];\n        for (int i = 0; i < k; i++)\n            res\
    \ ~= arr[i];\n        res = res.sort();\n        for (int i = k; i < len; i++)\n\
    \        {\n            if (arr[i] > res[0])\n            {\n                res[0]\
    \ = arr[i];\n                res = res.sort();\n            }\n        }\n   \
    \     return res;\n    }\n}\nunittest\n{\n    alias candidate = maximum;\n\n \
    \   assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbsqolm7t.d(37): Error: undefined identifier `uninitialized`

    /tmp/tmpbsqolm7t.d(40): Error: no property `sort` for type `long[]`

    /tmp/tmpbsqolm7t.d(41): Error: cannot implicitly convert expression `k` of type
    `long` to `int`

    /tmp/tmpbsqolm7t.d(46): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbsqolm7t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    if (k == 0L)\n        return new long[0L];\n    \n    long[]\
    \ max = new long[k];\n    foreach (i, e; arr)\n    {\n        long j = i;\n  \
    \      while (j > 0L && e > max[j - 1L])\n        {\n            max[j] = max[j\
    \ - 1L];\n            j--;\n        }\n        max[j] = e;\n    }\n    return\
    \ max;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpj3h1dyxw.d(50): unittest failure

    ----------------

    ??:? _d_unittestp [0x428a55]

    ??:? void tmpj3h1dyxw.__unittest_L46_C1() [0x42804f]

    ??:? void tmpj3h1dyxw.__modtest() [0x4287d8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cb33]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b9c6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430c51]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x431100]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430bdd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b99d]

    ??:? runModuleUnitTests [0x42c909]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f18]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164017
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] res = new long[cast(int)k];\n    int j = 0;\n    foreach(y;\
    \ arr)\n    {\n        if(j == 0)\n        {\n            res[j] = y;\n      \
    \      j++;\n        }\n        else\n        {\n            if(y > res[j-1])\n\
    \            {\n                res[j] = y;\n                j++;\n          \
    \  }\n            else\n            {\n                for(int i = 0; i < j; i++)\n\
    \                {\n                    if(y > res[i])\n                    {\n\
    \                        for(int h = j; h > i; h--)\n                        {\n\
    \                            res[h] = res[h-1];\n                        }\n \
    \                       res[i] = y;\n                        break;\n        \
    \            }\n                }\n            }\n        }\n        if(j == k)\n\
    \        {\n            break;\n        }\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L)\
    \ == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n\
    \    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpbltbo2ng.d(73): unittest failure

    ----------------

    ??:? _d_unittestp [0x428b05]

    ??:? void tmpbltbo2ng.__unittest_L69_C1() [0x4280fb]

    ??:? void tmpbltbo2ng.__modtest() [0x428884]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cbe3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ba76]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430d01]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4311b0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430c8d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ba4d]

    ??:? runModuleUnitTests [0x42c9b9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428fc8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    sort(arr);\n    long[] result = new long[k];\n    for (long\
    \ i = 0; i < k; i++)\n    {\n        result[i] = arr[arr.length - 1 - i];\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n \
    \   assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj3wjpv26.d(30): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj3wjpv26.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] copy = new long[arr.length];\n    long length = arr.length\
    \ - k;\n    long min;\n    long minIndex;\n    int i = 0;\n    int j = 0;\n  \
    \  int count = 0;\n    int copySize = 0;\n    copy = copy(arr);\n    while (count\
    \ != length)\n    {\n        min = copy[0];\n        minIndex = 0;\n        for\
    \ (i = 0; i < copy.length; i++)\n        {\n            if (copy[i] != Long.MIN_VALUE)\n\
    \            {\n                min = copy[i];\n                minIndex = i;\n\
    \                break;\n            }\n        }\n        for (i = 0; i < copy.length;\
    \ i++)\n        {\n            if (copy[i] < min && copy[i] != Long.MIN_VALUE)\n\
    \            {\n                min = copy[i];\n                minIndex = i;\n\
    \            }\n        }\n        copy[minIndex] = Long.MIN_VALUE;\n        count++;\n\
    \    }\n    long[] newArray = new long[k];\n    for (i = 0; i < copy.length; i++)\n\
    \    {\n        if (copy[i] != Long.MIN_VALUE)\n        {\n            newArray[j]\
    \ = copy[i];\n            j++;\n        }\n    }\n    return newArray;\n}\nunittest\n\
    {\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L)\
    \ == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n\
    \    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjq7_byj1.d(38): Error: function expected before `()`, not `copy`
    of type `long[]`

    /tmp/tmpjq7_byj1.d(45): Error: undefined identifier `Long`

    /tmp/tmpjq7_byj1.d(54): Error: undefined identifier `Long`

    /tmp/tmpjq7_byj1.d(60): Error: undefined identifier `Long`

    /tmp/tmpjq7_byj1.d(66): Error: undefined identifier `Long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjq7_byj1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[(int)k];\n    int[] dict = new int[1001];\n\
    \    foreach(long num; arr)\n    {\n        dict[(int)num + 1000]++;\n    }\n\
    \    int index = 0;\n    for(int i = 1000; i >= 0; i--)\n    {\n        while(dict[i]\
    \ > 0)\n        {\n            if(index < k)\n            {\n                result[index]\
    \ = i - 1000;\n                index++;\n            }\n            else\n   \
    \         {\n                break;\n            }\n            dict[i]--;\n \
    \       }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\
    \n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9dyfw72d.d(30): Error: C style cast illegal, use `cast(int)k`

    /tmp/tmp9dyfw72d.d(34): Error: C style cast illegal, use `cast(int)num`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9dyfw72d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] a = new long[k];\n    long[] ret = new long[k];\n  \
    \  long[] tmp = new long[arr.length];\n    long max = 0L;\n    long index = 0L;\n\
    \    long n = 0L;\n    long i = 0L;\n    long j = 0L;\n    long arrIdx = 0L;\n\
    \    long aIdx = 0L;\n    for (; j < k; j++) {\n        tmp[j] = arr[j];\n   \
    \ }\n    qsort(tmp);\n    for (; i < k; i++) {\n        ret[i] = tmp[i];\n   \
    \ }\n    for (; arrIdx < arr.length; arrIdx++) {\n        if (arr[arrIdx] > ret[k\
    \ - 1L]) {\n            tmp[index] = arr[arrIdx];\n            qsort(tmp);\n \
    \           if (index == k - 1L) {\n                for (; aIdx < k; aIdx++) {\n\
    \                    ret[aIdx] = tmp[aIdx];\n                }\n            }\n\
    \            index++;\n        }\n    }\n    return ret;\n}\nunittest\n{\n   \
    \ alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L,\
    \ -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplu__zqln.d(43): Error: undefined identifier `qsort`

    /tmp/tmplu__zqln.d(50): Error: undefined identifier `qsort`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplu__zqln.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    int[] sorted = arr.sort.array;\n    long[] max = new long[k];\n\
    \    long j = 0;\n    for (int i = arr.length - 1; i >= 0; i--)\n    {\n     \
    \   if (j == k)\n        {\n            break;\n        }\n        max[j] = sorted[i];\n\
    \        j++;\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = maximum;\n\
    \n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphmqlqzrt.d(30): Error: no property `sort` for type `long[]`

    /tmp/tmphmqlqzrt.d(33): Error: cannot implicitly convert expression `arr.length
    - 1LU` of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphmqlqzrt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] ret = new long[(int)k];\n    long[] tmp = new long[arr.length];\n\
    \    if (k == 0)\n        return ret;\n    for (int i = 0; i < arr.length; i++)\n\
    \        tmp[i] = arr[i];\n    sort(tmp);\n    for (int i = 0; i < k; i++)\n \
    \       ret[i] = tmp[tmp.length - 1 - i];\n    return ret;\n}\nunittest\n{\n \
    \   alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) ==\
    \ [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n  \
    \  assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe2bkmw2_.d(30): Error: C style cast illegal, use `cast(int)k`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe2bkmw2_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    if (k > arr.length) \n    {\n        k = arr.length;\n    }\n\
    \    quickSort(arr, 0, arr.length - 1);\n    return arr[arr.length - cast(int)k\
    \ .. arr.length];\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptv8wzfiw.d(34): Error: undefined identifier `quickSort`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptv8wzfiw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    if (arr.length == 0 || k < 1 || k > arr.length) return new\
    \ long[0];\n    if (k == arr.length) return arr;\n    long[] max_k = new long[(int)k];\n\
    \    long[] min_k = new long[(int)k];\n    for (int i = 0; i < k; i++) max_k[i]\
    \ = min_k[i] = arr[i];\n    for (int i = (int)k; i < arr.length; i++)\n    {\n\
    \        int max_k_i = maxElementIndex(max_k);\n        if (arr[i] > max_k[max_k_i])\
    \ max_k[max_k_i] = arr[i];\n        int min_k_i = minElementIndex(min_k);\n  \
    \      if (arr[i] < min_k[min_k_i]) min_k[min_k_i] = arr[i];\n    }\n    return\
    \ max_k;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv_j0a7sa.d(32): Error: C style cast illegal, use `cast(int)k`

    /tmp/tmpv_j0a7sa.d(33): Error: C style cast illegal, use `cast(int)k`

    /tmp/tmpv_j0a7sa.d(35): Error: C style cast illegal, use `cast(int)k`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv_j0a7sa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] h = new long[k];\n    long[] res = new long[k];\n  \
    \  if (k == 0L) \n    {\n        return res;\n    }\n    if (k == arr.length)\
    \ \n    {\n        sort(arr);\n        return arr;\n    }\n    if (k > arr.length)\
    \ \n    {\n        return res;\n    }\n    auto n = arr.length;\n    int r = 0;\n\
    \    for (long i = 0L; i < k; i++) \n    {\n        h[i] = arr[i];\n    }\n  \
    \  buildHeap(h);\n    for (long i = k; i < n; i++) \n    {\n        long x = arr[i];\n\
    \        if (x > h[0]) \n        {\n            h[0] = x;\n            heapify(h,\
    \ 0L);\n        }\n    }\n    sort(h);\n    for (long i = k - 1L; i >= 0L; i--)\
    \ \n    {\n        res[r] = h[i];\n        r++;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L)\
    \ == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n\
    \    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb8e6rudo.d(38): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpb8e6rudo.d(51): Error: undefined identifier `buildHeap`

    /tmp/tmpb8e6rudo.d(58): Error: undefined identifier `heapify`

    /tmp/tmpb8e6rudo.d(61): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb8e6rudo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[long] maxHeap = new long[1024L];\n    long maxIndex =\
    \ -1L;\n    foreach(item; arr)\n    {\n        if(maxIndex < k - 1L)\n       \
    \ {\n            ++maxIndex;\n            maxHeap[maxIndex] = item;\n        \
    \    shiftUp(maxHeap, maxIndex);\n        }\n        else if(item > maxHeap[0L])\n\
    \        {\n            maxHeap[0L] = item;\n            shiftDown(maxHeap, maxIndex);\n\
    \        }\n    }\n    long[] result = new long[k];\n    result[$ - 1L] = maxHeap[0L];\n\
    \    for(long i = 1L; i < k; ++i)\n    {\n        maxHeap[0L] = maxHeap[maxIndex];\n\
    \        --maxIndex;\n        shiftDown(maxHeap, maxIndex);\n        result[$\
    \ - 1L] = maxHeap[0L];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n\
    \    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa9q2oz8i.d(30): Error: cannot implicitly convert expression `new
    long[](1024LU)` of type `long[]` to `long[long]`

    /tmp/tmpa9q2oz8i.d(38): Error: undefined identifier `shiftUp`

    /tmp/tmpa9q2oz8i.d(43): Error: undefined identifier `shiftDown`

    /tmp/tmpa9q2oz8i.d(52): Error: undefined identifier `shiftDown`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa9q2oz8i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    // long[] result = new long[k];\n    // long[] aux = new long[k];\n\
    \    // long val, auxVal;\n    // long n = arr.length;\n    // assert(k < n);\n\
    \    // assert(k >= 0);\n    // assert(n <= 1000);\n    // foreach(val; arr)\n\
    \    // {\n    //     if(val < -1000 || val > 1000)\n    //     {\n    //    \
    \     assert(false);\n    //     }\n    // }\n    // aux[0] = arr[0];\n    //\
    \ for(long i = 1L; i < k; i++)\n    // {\n    //     aux[i] = max(aux[i - 1L],\
    \ arr[i]);\n    // }\n    // for(long i = k; i < n; i++)\n    // {\n    //   \
    \  auxVal = arr[i];\n    //     if(auxVal > aux[k - 1L])\n    //     {\n    //\
    \         aux[k - 1L] = auxVal;\n    //         for(long j = k - 2L; j >= 0L;\
    \ j--)\n    //         {\n    //             aux[j] = max(aux[j], aux[j + 1L]);\n\
    \    //         }\n    //     }\n    // }\n    // return aux;\n    // \n    //\n\
    \    long n = arr.length;\n    long[] result = new long[k];\n    long[] aux =\
    \ new long[k];\n    assert(k < n);\n    assert(k >= 0);\n    assert(n <= 1000);\n\
    \    foreach(val; arr)\n    {\n        if(val < -1000 || val > 1000)\n       \
    \ {\n            assert(false);\n        }\n    }\n    aux[0] = arr[0];\n    for(long\
    \ i = 1L; i < k; i++)\n    {\n        aux[i] = max(aux[i - 1L], arr[i]);\n   \
    \ }\n    for(long i = k; i < n; i++)\n    {\n        auto auxVal = arr[i];\n \
    \       if(auxVal > aux[k -\nunittest\n{\n    alias candidate = maximum;\n\n \
    \   assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpilrl95bp.d(86): Error: expression expected, not `unittest`

    /tmp/tmpilrl95bp.d(87): Error: found `{` when expecting `,`

    /tmp/tmpilrl95bp.d(88): Error: expression expected, not `alias`

    /tmp/tmpilrl95bp.d(88): Error: found `candidate` when expecting `,`

    /tmp/tmpilrl95bp.d(88): Error: expression expected, not `=`

    /tmp/tmpilrl95bp.d(88): Error: found `maximum` when expecting `,`

    /tmp/tmpilrl95bp.d(88): Error: expression expected, not `;`

    /tmp/tmpilrl95bp.d(90): Error: found `assert` when expecting `,`

    /tmp/tmpilrl95bp.d(90): Error: found `;` when expecting `,`

    /tmp/tmpilrl95bp.d(91): Error: found `;` when expecting `,`

    /tmp/tmpilrl95bp.d(92): Error: found `;` when expecting `,`

    /tmp/tmpilrl95bp.d(93): Error: found `;` when expecting `,`

    /tmp/tmpilrl95bp.d(94): Error: found `;` when expecting `,`

    /tmp/tmpilrl95bp.d(95): Error: found `;` when expecting `,`

    /tmp/tmpilrl95bp.d(96): Error: found `;` when expecting `,`

    /tmp/tmpilrl95bp.d(97): Error: found `;` when expecting `,`

    /tmp/tmpilrl95bp.d(98): Error: fou'
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] maximums = new long[int(k)];\n    for (long i = 0; i\
    \ < k; i++) \n    {\n        maximums[int(i)] = arr[int(i)];\n    }\n    maximums\
    \ = array(maximums).sort((a, b) => b - a);\n    for (long i = k; i < arr.length;\
    \ i++) \n    {\n        if (arr[int(i)] < maximums[int(maximums.length - 1)])\
    \ \n        {\n            continue;\n        }\n        for (long j = 0; j <\
    \ maximums.length; j++) \n        {\n            if (arr[int(i)] > maximums[int(j)])\
    \ \n            {\n                maximums[int(j)] = arr[int(i)];\n         \
    \       maximums = array(maximums).sort((a, b) => b - a);\n                break;\n\
    \            }\n        }\n    }\n    return maximums;\n}\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmkuvp28u.d(30): Error: cannot implicitly convert expression `k`
    of type `long` to `int`

    /tmp/tmpmkuvp28u.d(33): Error: cannot implicitly convert expression `i` of type
    `long` to `int`

    /tmp/tmpmkuvp28u.d(35): Error: undefined identifier `array`, did you mean variable
    `arr`?

    /tmp/tmpmkuvp28u.d(38): Error: cannot implicitly convert expression `i` of type
    `long` to `int`

    /tmp/tmpmkuvp28u.d(38): Error: cannot implicitly convert expression `maximums.length
    - 1LU` of type `ulong` to `int`

    /tmp/tmpmkuvp28u.d(44): Error: cannot implicitly convert expression `i` of type
    `long` to `int`

    /tmp/tmpmkuvp28u.d(44): Error: cannot implicitly convert expression `j` of type
    `long` to `int`

    /tmp/tmpmkuvp28u.d(46): Error: cannot implicitly convert expression `j` of type
    `long` to `int`

    /tmp/tmpmkuvp28u.d(47): Error: undefined identifier `array`, did you mean variable
    `arr`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmkuvp28u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    import std.array;\n    long[][] result = new long[][](1, k);\n\
    \    long[] res = new long[k];\n    long i = 0L;\n    long j = 1L;\n    long ind\
    \ = 0L;\n    long temp = 0L;\n    long temp2 = 0L;\n    long count = 0L;\n   \
    \ for (long n = 0L; n < k; n++)\n    {\n        result[0][n] = arr[n];\n    }\n\
    \    qsort(result[0]);\n    for (; i < (arr.length - k); i++)\n    {\n       \
    \ result[0][0] = arr[k + i];\n        qsort(result[0]);\n    }\n    for (long\
    \ z = 0L; z < k; z++)\n    {\n        res[z] = result[0][z];\n    }\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2mfg5gki.d(43): Error: undefined identifier `qsort`

    /tmp/tmp2mfg5gki.d(47): Error: undefined identifier `qsort`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2mfg5gki.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    int len = arr.length;\n    if (k > len)\n        k = len;\n\
    \    long[] res = new long[k];\n    for (int i = 0; i < k; i++)\n        res[i]\
    \ = arr[i];\n    for (int i = k; i < len; i++)\n    {\n        int idx = 0;\n\
    \        for (int j = 1; j < k; j++)\n            if (res[j] > res[idx])\n   \
    \             idx = j;\n        if (arr[i] > res[idx])\n            res[idx] =\
    \ arr[i];\n    }\n    res.sort();\n    return res;\n}\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6cas6jaa.d(30): Error: cannot implicitly convert expression `arr.length`
    of type `ulong` to `int`

    /tmp/tmp6cas6jaa.d(36): Error: cannot implicitly convert expression `k` of type
    `long` to `int`

    /tmp/tmp6cas6jaa.d(45): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6cas6jaa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    if (k < 1 || k > arr.length)\
    \ return result;\n    long[] sorted = arr[0..$];\n    sort(sorted);\n    for (long\
    \ i = 0; i < k; i++)\n    {\n        result[i] = sorted[$ - i - 1];\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpetydf74y.d(33): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpetydf74y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long n = arr.length;\n    if (k == n)\n        return arr;\n\
    \    \n    long top = k - 1;\n    long start = 0;\n    long end = n - 1;\n   \
    \ while (start <= end)\n    {\n        long pivot = arr[end];\n        long left\
    \ = start;\n        long right = end - 1;\n        while (left <= right)\n   \
    \     {\n            if (arr[left] < pivot)\n            {\n                arr[right]\
    \ = arr[left];\n                arr[left] = arr[right - 1];\n                arr[right\
    \ - 1] = pivot;\n                right -= 2;\n            }\n            else\n\
    \                left++;\n        }\n        if (left == top)\n            break;\n\
    \        else if (left < top)\n            start = left + 1;\n        else\n \
    \           end = left - 1;\n    }\n    return arr[0..cast(int)k];\n}\nunittest\n\
    {\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L)\
    \ == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n\
    \    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6xwz4kir.d(67): unittest failure

    ----------------

    ??:? _d_unittestp [0x428af5]

    ??:? void tmp6xwz4kir.__unittest_L63_C1() [0x4280ef]

    ??:? void tmp6xwz4kir.__modtest() [0x428878]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cb77]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ba0a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430b9d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43104c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430b29]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b9e1]

    ??:? runModuleUnitTests [0x42c94d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428fb8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164017
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    auto L = arr.length;\n    if (k < L) \n    {\n        struct\
    \ MyStruct \n        {\n            long p;\n            long n;\n        }\n\
    \        auto s = new MyStruct[L];\n        foreach (p, i; arr)\n        {\n \
    \           s[i].p = p;\n            s[i].n = i;\n        }\n        sort(s[0\
    \ .. L], (a, b) => a.p < b.p);\n        auto idx = new long[k];\n        foreach\
    \ (i; 0 .. k)\n        {\n            idx[i] = s[i].n;\n        }\n        sort(idx[0\
    \ .. k]);\n        auto res = new long[k];\n        foreach (i; 0 .. k)\n    \
    \    {\n            res[i] = arr[idx[i]];\n        }\n        return res;\n  \
    \  }\n    return arr;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpehv4ik8_.d(44): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpehv4ik8_.d(50): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpehv4ik8_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] ret = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        long max = arr[0];\n        long loc = 0;\n        for (long j\
    \ = 1; j < arr.length; j++)\n        {\n            if (arr[j] > max)\n      \
    \      {\n                max = arr[j];\n                loc = j;\n          \
    \  }\n        }\n        ret[i] = max;\n        arr[loc] = -9000;\n    }\n   \
    \ sort(ret);\n    return ret;\n}\nunittest\n{\n    alias candidate = maximum;\n\
    \n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_6ifycs8.d(46): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_6ifycs8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    // Sliding window \n    // Complexity: O(N) time, O(K) space\n\
    \    //             O(NlogK) time, O(K) space with max heap\n    //          \
    \   O(N) time, O(1) space with selection algorithm (quickSelect)\n    long[] res\
    \ = new long[k];\n    long max = INT_MIN;\n    long maxIndex = 0;\n    long min\
    \ = INT_MAX;\n    long minIndex = 0;\n    // find max\n    for (long i = 0; i\
    \ < k; i++)\n    {\n        if (arr[i] > max)\n        {\n            max = arr[i];\n\
    \            maxIndex = i;\n        }\n    }\n    // find min\n    for (long i\
    \ = 0; i < k; i++)\n    {\n        if (arr[i] < min)\n        {\n            min\
    \ = arr[i];\n            minIndex = i;\n        }\n    }\n    res[0] = max;\n\
    \    for (long i = 1; i < k; i++)\n    {\n        if (i != maxIndex)\n       \
    \ {\n            res[i] = min;\n        }\n        else\n        {\n         \
    \   res[i] = arr[maxIndex];\n        }\n    }\n    // sliding window\n    long\
    \ i = k;\n    while (i < arr.length)\n    {\n        long index = 0;\n       \
    \ // delete the largest one\n        if (arr[i] < max)\n        {\n          \
    \  res[index] = arr[i];\n            index++;\n        }\n        else\n     \
    \   {\n            max = arr[i];\n            maxIndex = i;\n        }\n     \
    \   // check the largest one\n        long j = index;\n        while (j < k)\n\
    \        {\n            if (res[j] < min)\n            {\n                min\
    \ = res[j];\n                minIndex = j;\n            }\n            j++;\n\
    \        }\n        if (index != 0)\n        {\n            res[index] = max;\n\
    \            index++;\n        }\n        // delete the smallest one\n       \
    \ j = index;\n        while (j < k)\n\nunittest\n{\n    alias candidate = maximum;\n\
    \n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpymsmy2h0.d(105): Error: found `unittest` instead of statement

    /tmp/tmpymsmy2h0.d(121): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpymsmy2h0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    auto pq = new std.PriorityQueue!(std.less, long[])();\n   \
    \ foreach (v; arr)\n    {\n        pq.insert(v);\n        if (pq.length > k)\n\
    \            pq.popFront();\n    }\n    return pq.data;\n}\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptl3wqi8j.d(30): Error: template identifier `PriorityQueue` is not
    a member of import `tmptl3wqi8j.std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptl3wqi8j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164017
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    if (arr.length <= k) return arr;\n    long[] max = new long[cast(int)k];\n\
    \    for (int i = 0; i < k; i++)\n    {\n        max[i] = arr[i];\n    }\n   \
    \ maxheap(max);\n    for (int i = cast(int)k; i < arr.length; i++)\n    {\n  \
    \      if (arr[i] > max[0])\n        {\n            max[0] = arr[i];\n       \
    \     maxheap(max);\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcvd5on8j.d(36): Error: undefined identifier `maxheap`

    /tmp/tmpcvd5on8j.d(42): Error: undefined identifier `maxheap`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcvd5on8j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    // create an array to store results\n    long[] result = new\
    \ long[(int)k];\n    // create a priority queue with a comparator to compare negatives\n\
    \    auto pq = new priority_queue!((a, b) => a > b);\n    // put all integers\
    \ into the priority queue\n    foreach(e; arr)\n    {\n        pq.put(e);\n  \
    \  }\n    // put the next k largest numbers into result\n    foreach(e; 0..k)\n\
    \    {\n        result[e] = pq.get();\n    }\n    // return the result\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnzx3t3fn.d(31): Error: C style cast illegal, use `cast(int)k`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnzx3t3fn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    const int BUCKET_SIZE = 1001;\n    long[][] buckets = new long[BUCKET_SIZE][];\n\
    \    long[][] sorted = new long[BUCKET_SIZE][];\n    foreach (var num; arr)\n\
    \    {\n        if (buckets[num + 1000] is null)\n            buckets[num + 1000]\
    \ = new long[0];\n        buckets[num + 1000] ~= num;\n    }\n    int index =\
    \ 0;\n    foreach (var bucket; buckets)\n    {\n        if (bucket !is null)\n\
    \        {\n            sorted[index] = bucket;\n            index++;\n      \
    \  }\n    }\n    sorted = sorted[0..index];\n    long[] ret = new long[0];\n \
    \   for (int i = sorted.length - 1; i >= 0; i--)\n    {\n        if (ret.length\
    \ + sorted[i].length <= k)\n            ret ~= sorted[i];\n        else\n    \
    \    {\n            ret ~= sorted[i][0..k - ret.length];\n            break;\n\
    \        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = maximum;\n\
    \n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpigezlyur.d(31): Error: new can only create structs, dynamic arrays
    or class objects, not `long[1001][]`''s

    /tmp/tmpigezlyur.d(32): Error: new can only create structs, dynamic arrays or
    class objects, not `long[1001][]`''s

    /tmp/tmpigezlyur.d(33): Error: undefined identifier `var`

    /tmp/tmpigezlyur.d(40): Error: undefined identifier `var`

    /tmp/tmpigezlyur.d(50): Error: cannot implicitly convert expression `sorted.length
    - 1LU` of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpigezlyur.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] max_array = new long[cast(int)k];\n    auto index =\
    \ 0;\n    for (i, n; i < arr.length; i++)\n    {\n        if (arr[i] < arr[index])\n\
    \        {\n            index = i;\n        }\n    }\n    max_array[0] = arr[index];\n\
    \    foreach (i, e; arr)\n    {\n        if (max_array.length == k)\n        {\n\
    \            break;\n        }\n        if (index == i)\n        {\n         \
    \   continue;\n        }\n        if (e > max_array[$-1])\n        {\n       \
    \     max_array[$] = e;\n        }\n    }\n    max_array.sort(max);\n    return\
    \ max_array;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfa8dpqco.d(32): Error: undefined identifier `i`

    /tmp/tmpfa8dpqco.d(32): Error: undefined identifier `n`

    /tmp/tmpfa8dpqco.d(32): Error: undefined identifier `i`

    /tmp/tmpfa8dpqco.d(32): Error: undefined identifier `i`

    /tmp/tmpfa8dpqco.d(34): Error: undefined identifier `i`

    /tmp/tmpfa8dpqco.d(36): Error: undefined identifier `i`

    /tmp/tmpfa8dpqco.d(55): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa8dpqco.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (long i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpybbujhw3.d(35): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpybbujhw3.d(41): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpybbujhw3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] array = arr.dup;\n    array.sort();\n    long[] result\
    \ = new long[k];\n    size_t i = 0;\n    while (i < k)\n    {\n        result[i]\
    \ = array[$ - 1 - i];\n        i++;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L)\
    \ == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n\
    \    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4xqr0qv6.d(31): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4xqr0qv6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    std.sort(arr);\n    return arr[arr.length-k..arr.length];\n\
    }\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L,\
    \ 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L,\
    \ 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjxr2880a.d(30): Error: undefined identifier `sort` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjxr2880a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    // Initialize empty array\n    long[] res = new long[k];\n\
    \    // Iterate through all elements in the array\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        // If the current element is less than the last of the\
    \ result array, replace it\n        if (arr[i] > res[$-1])\n        {\n      \
    \      res[$-1] = arr[i];\n            // Sort the result array\n            sort(res);\n\
    \        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = maximum;\n\
    \n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9170sqzx.d(40): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9170sqzx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    int N = arr.length;\n    long[] heap = new long[k + 1];\n \
    \   int heapSize = 0;\n    foreach (i; 0 .. k) {\n        heap[++heapSize] = arr[i];\n\
    \        siftUp(heap, heapSize);\n    }\n    for (int i = k; i < N; i++) {\n \
    \       long cur = arr[i];\n        if (cur > heap[1]) {\n            heap[1]\
    \ = cur;\n            siftDown(heap, heapSize);\n        }\n    }\n    return\
    \ heap[1 .. heapSize + 1];\n}\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eru6l2u.d(30): Error: cannot implicitly convert expression `arr.length`
    of type `ulong` to `int`

    /tmp/tmp3eru6l2u.d(35): Error: undefined identifier `siftUp`

    /tmp/tmp3eru6l2u.d(37): Error: cannot implicitly convert expression `k` of type
    `long` to `int`

    /tmp/tmp3eru6l2u.d(41): Error: undefined identifier `siftDown`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eru6l2u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164017
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    int n = cast(int) k;\n    int[] A = to!int[](arr);\n    int[]\
    \ ans = new int[];\n    int[] tmp = new int[n];\n    std.algorithm.sort(A);\n\
    \    for (int i = 0; i < n; i++) \n    {\n        tmp[i] = A[i];\n    }\n    int\
    \ i = n;\n    int start = A[0];\n    int end = A[n-1];\n    while (i < A.length)\
    \ \n    {\n        start = A[i];\n        end = A[i-1];\n        if (abs(start\
    \ - tmp[0]) >= abs(end - tmp[n-1])) \n        {\n            for (int j = 0; j\
    \ < n; j++) \n            {\n                tmp[j] = A[i - j];\n            }\n\
    \        }\n        i++;\n    }\n    return to!long[](tmp);\n}\nunittest\n{\n\
    \    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) ==\
    \ [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n  \
    \  assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqpilj45v.d(31): Error: template instance `to!int` template `to`
    is not defined

    /tmp/tmpqpilj45v.d(32): Error: new can only create structs, dynamic arrays or
    class objects, not `int[]`''s

    /tmp/tmpqpilj45v.d(34): Error: undefined identifier `algorithm` in package `std`

    /tmp/tmpqpilj45v.d(55): Error: template instance `to!long` template `to` is not
    defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqpilj45v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    auto res = new long[];\n    foreach(j; 0 .. k)\n    {\n   \
    \     long i = 0L;\n        foreach(q; arr)\n        {\n            if(q > arr[i])\n\
    \            {\n                i = q;\n            }\n        }\n        res\
    \ ~= arr[i];\n        arr[i] = arr[0] - 1;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L)\
    \ == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n\
    \    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc5dtv9y7.d(30): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc5dtv9y7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    int len = arr.length;\n    long[] result = new long[k];\n \
    \   for (int i = 0; i < k; i++)\n    {\n        int maxIndex = i;\n        for\
    \ (int j = i + 1; j < len; j++)\n        {\n            if (arr[j] > arr[maxIndex])\n\
    \            {\n                maxIndex = j;\n            }\n        }\n    \
    \    result[i] = arr[maxIndex];\n        arr[maxIndex] = arr[i];\n        arr[i]\
    \ = result[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n\
    \    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb0ifvfeu.d(30): Error: cannot implicitly convert expression `arr.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb0ifvfeu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164016
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    // you're given k and arr.length < 1000\n    // long[] result\
    \ = new long[arr.length];\n    // int size = 0;\n    // for (int i = 0; i < arr.length;\
    \ i++)\n    // {\n    //     if (size == 0)\n    //     {\n    //         result[size++]\
    \ = arr[i];\n    //     }\n    //     else if (size == k)\n    //     {\n    //\
    \         int index = 0;\n    //         for (int j = 1; j < size; j++)\n    //\
    \         {\n    //             if (result[j] < result[index])\n    //       \
    \      {\n    //                 index = j;\n    //             }\n    //    \
    \     }\n    //         if (arr[i] > result[index])\n    //         {\n    //\
    \             result[index] = arr[i];\n    //         }\n    //     }\n    //\
    \     else\n    //     {\n    //         result[size++] = arr[i];\n    //    \
    \ }\n    // }\n    // return result[..cast(int)k];\n    // TODO: can sort\n  \
    \  // sort(arr, (x, y) => x > y);\n    // return arr[0..cast(int)k];\n    // std.algorithm.sort\
    \ does not work (as of now)\n    long[] sorted = new long[cast(int)k];\n    for\
    \ (int i = 0; i < k; i++)\n    {\n        sorted[i] = arr[i];\n    }\n    for\
    \ (int i = 0; i < k; i++)\n    {\n        for (int j = i + 1; j < k; j++)\n  \
    \      {\n            if (sorted[i] > sorted[j])\n            {\n            \
    \    long temp = sorted[i];\n                sorted[i] = sorted[j];\n        \
    \        sorted[j] = temp;\n            }\n        }\n    }\n    for (int i =\
    \ cast(int)k; i < arr.length; i++)\n    {\n        int j = 0;\n        while (j\
    \ < k && arr[i] <= sorted[j])\n\nunittest\n{\n    alias candidate = maximum;\n\
    \n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjmrnxugk.d(86): Error: found `unittest` instead of statement

    /tmp/tmpjmrnxugk.d(102): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjmrnxugk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164017
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long n = arr.length;\n    long[] sorted = arr[0..n];\n    qsort(sorted);\n\
    \    return sorted[n-k..n];\n}\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdj5p5mnz.d(32): Error: undefined identifier `qsort`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdj5p5mnz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164017
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] ret = new long[(int)k];\n    int max_ind = 0;\n    //\
    \ find the max element\n    for (int i = 0; i < arr.length; i++)\n    {\n    \
    \    if (arr[i] > arr[max_ind])\n        {\n            max_ind = i;\n       \
    \ }\n    }\n    // now we need to split the arr into two\n    // first let's see\
    \ how big the two arrays are\n    int sz = arr.length;\n    int sz1 = max_ind;\n\
    \    int sz2 = sz - max_ind - 1;\n    // now lets create the arrays\n    long[]\
    \ arr1 = new long[sz1];\n    long[] arr2 = new long[sz2];\n    // now we'll populate\
    \ the arrays\n    for (int i = 0; i < sz1; i++)\n    {\n        arr1[i] = arr[i];\n\
    \    }\n    for (int i = 0; i < sz2; i++)\n    {\n        arr2[i] = arr[i + max_ind\
    \ + 1];\n    }\n    // now we'll do the merge sort\n    // we'll keep the first\
    \ k elements and push the rest into ret\n    int in1 = 0;\n    int in2 = 0;\n\
    \    for (int i = 0; i < k; i++)\n    {\n        if (in1 < sz1 && in2 < sz2)\n\
    \        {\n            if (arr1[in1] > arr2[in2])\n            {\n          \
    \      ret[i] = arr1[in1];\n                in1++;\n            }\n          \
    \  else\n            {\n                ret[i] = arr2[in2];\n                in2++;\n\
    \            }\n        }\n        else if (in1 < sz1)\n        {\n          \
    \  ret[i] = arr1[in1];\n            in1++;\n        }\n        else if (in2 <\
    \ sz2)\n        {\n            ret[i] = arr2[in2];\n            in2++;\n     \
    \   }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = maximum;\n\
    \n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6bvoe_ex.d(30): Error: C style cast illegal, use `cast(int)k`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6bvoe_ex.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164017
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    sort!((a, b) => b - a)(arr);\n    return arr[0..k];\n}\nunittest\n\
    {\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L)\
    \ == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n\
    \    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpycvq42jw.d(30): Error: template instance `sort!((a, b) => b - a)`
    template `sort` is not defined, did you mean sqrt?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpycvq42jw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164017
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    size_t n = arr.length;\n    size_t i, j;\n    auto revArr =\
    \ arr.dup;\n    // build the priority queue\n    for (i = n/2; i > 0; i--)\n \
    \   {\n        for (j = i; j*2 < n; j = j*2)\n        {\n            if (j*2+1\
    \ < n && revArr[j*2] < revArr[j*2+1])\n                j = j*2+1;\n          \
    \  if (revArr[j] > revArr[j/2])\n                swap(revArr[j], revArr[j/2]);\n\
    \        }\n    }\n    // extract the k maximum elements\n    for (i = n; i >\
    \ n-k; i--)\n    {\n        swap(revArr[1], revArr[i]);\n        for (j = 1; j*2\
    \ < i; j = j*2)\n        {\n            if (j*2+1 < i && revArr[j*2] < revArr[j*2+1])\n\
    \                j = j*2+1;\n            if (revArr[j] > revArr[j/2])\n      \
    \          swap(revArr[j], revArr[j/2]);\n        }\n    }\n    revArr = revArr[$-k:$];\n\
    \    revArr.reverse;\n    return revArr;\n}\nunittest\n{\n    alias candidate\
    \ = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n\
    \    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4w_wxhuk.d(56): Error: found `:` when expecting `,`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4w_wxhuk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164017
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    k = max(0L, min(k, arr.length));\n    qsort(arr);\n    return\
    \ arr[arr.length - (int)k .. $];\n}\nunittest\n{\n    alias candidate = maximum;\n\
    \n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf_zo0gp8.d(32): Error: C style cast illegal, use `cast(int)k`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf_zo0gp8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164017
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    // This array sortDescending() method works like a charm!\n\
    \    return arr.sortDescending()[0..(int)k];\n}\nunittest\n{\n    alias candidate\
    \ = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n\
    \    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuna_883g.d(31): Error: C style cast illegal, use `cast(int)k`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuna_883g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164017
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] res = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        res[i] = arr[i];\n    }\n    sort(res);\n    return res;\n}\n\
    unittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L,\
    \ 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L,\
    \ 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcj026lu0.d(35): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcj026lu0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164017
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    auto result = new long[k];\n    long len = arr.length;\n  \
    \  if (len < k) \n    {\n        k = len;\n    }\n    auto sorted = sort(arr);\n\
    \    for (long i = 0; i < k; i++) \n    {\n        result[i] = sorted[len - i\
    \ - 1];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\
    \n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1zk1d_xj.d(36): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1zk1d_xj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164017
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    assert(k <= arr.length);\n    assert(k > 0);\n    assert(arr.length\
    \ <= 1000);\n    assert(k <= 1000);\n    long maxElem = arr[0];\n    foreach(idx,\
    \ elem; arr)\n    {\n        assert(elem <= 1000);\n        assert(elem >= -1000);\n\
    \        if(elem > maxElem)\n        {\n            maxElem = elem;\n        }\n\
    \    }\n    long[] result = new long[cast(int)k];\n    auto count = new int[cast(int)maxElem\
    \ + 1];\n    foreach(idx, elem; arr)\n    {\n        count[cast(int)elem]++;\n\
    \    }\n    for(int i = cast(int)maxElem, j = cast(int)k - 1; i >= 0 && j >= 0;\
    \ --i)\n    {\n        while(count[i] > 0 && j >= 0)\n        {\n            result[j--]\
    \ = i;\n            count[i]--;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L)\
    \ == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n\
    \    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpu3jgq8jx.d(48): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428fc2]

    ??:? long[] tmpu3jgq8jx.maximum(long[], long) [0x4282aa]

    ??:? void tmpu3jgq8jx.__unittest_L60_C1() [0x4283e2]

    ??:? void tmpu3jgq8jx.__modtest() [0x428bdc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d1d3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c066]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4312f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4317a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43127d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c03d]

    ??:? runModuleUnitTests [0x42cfa9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio'
  stdout: ''
  timestamp: 1660164017
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    int n = arr.length;\n    if (n < 2) \n        return arr;\n\
    \    if (k == n) \n        return arr;\n    // Create a min heap of k elements\n\
    \    auto pq = new PriorityQueue!(a => a, (a, b) => a > b)(arr[0 .. k]);\n   \
    \ // Replace the element if it is greater than the smallest\n    // element in\
    \ the heap\n    foreach (i, el; arr[k .. $]) \n    {\n        if (el > pq.front)\
    \ \n        {\n            pq.replaceFront(el);\n        }\n    }\n    return\
    \ pq.toArray();\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr0_g1irh.d(30): Error: cannot implicitly convert expression `arr.length`
    of type `ulong` to `int`

    /tmp/tmpr0_g1irh.d(36): Error: template instance `PriorityQueue!((a) => a, (a,
    b) => a > b)` template `PriorityQueue` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr0_g1irh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164017
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] res = new long[to!long(k)];\n    long[] copy = arr.dup;\n\
    \    quickSort(copy);\n    copy = copy[copy.length - to!long(k) .. copy.length];\n\
    \    return copy;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgoabdn5d.d(30): Error: template instance `to!long` template `to`
    is not defined

    /tmp/tmpgoabdn5d.d(32): Error: undefined identifier `quickSort`

    /tmp/tmpgoabdn5d.d(33): Error: template instance `to!long` template `to` is not
    defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgoabdn5d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164017
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] ret = new long[k];\n    assert(arr.length >= k);\n \
    \   foreach(immutable i, ref j; ret)\n    {\n        ret[i] = arr[i];\n    }\n\
    \    sort(ret);\n    for(long i = k; i < arr.length; i++)\n    {\n        if(arr[i]\
    \ > ret[0])\n        {\n            for(long j = 1; j < k; j++)\n            {\n\
    \                if(arr[i] > ret[j])\n                {\n                    ret[j\
    \ - 1] = ret[j];\n                }\n                else\n                {\n\
    \                    ret[j - 1] = arr[i];\n                    break;\n      \
    \          }\n            }\n        }\n    }\n    return ret;\n}\nunittest\n\
    {\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L)\
    \ == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n\
    \    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv78lmoq5.d(36): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv78lmoq5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164017
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    // You need to return an array of length k that contains the\
    \ maximum \n    // numbers from the given array in a sorted order.\n    long[]\
    \ r = new long[k];\n    const long len = arr.length;\n    if (len <= k)\n    {\n\
    \        sort(arr);\n        return arr;\n    }\n    else\n    {\n        long[]\
    \ heap = new long[k];\n        int n = k;\n        const int ln = len;\n     \
    \   int i = 0;\n        for (i = 0; i < k; i++)\n        {\n            heap[i]\
    \ = arr[i];\n        }\n        buildMaxHeap(heap, k);\n        for (i = k; i\
    \ < ln; i++)\n        {\n            if (arr[i] > heap[0])\n            {\n  \
    \              heap[0] = arr[i];\n                maxHeapify(heap, 0, k);\n  \
    \          }\n        }\n        for (i = 0; i < k; i++)\n        {\n        \
    \    r[i] = heap[0];\n            heap[0] = heap[k - 1];\n            k--;\n \
    \           maxHeapify(heap, 0, k);\n        }\n        return r;\n    }\n}\n\
    unittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L,\
    \ 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L,\
    \ 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0dm9ake7.d(36): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmp0dm9ake7.d(42): Error: cannot implicitly convert expression `k` of type
    `long` to `int`

    /tmp/tmp0dm9ake7.d(43): Error: cannot implicitly convert expression `len` of type
    `const(long)` to `const(int)`

    /tmp/tmp0dm9ake7.d(49): Error: undefined identifier `buildMaxHeap`

    /tmp/tmp0dm9ake7.d(50): Error: cannot implicitly convert expression `k` of type
    `long` to `int`

    /tmp/tmp0dm9ake7.d(55): Error: undefined identifier `maxHeapify`

    /tmp/tmp0dm9ake7.d(63): Error: undefined identifier `maxHeapify`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0dm9ake7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164017
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    const size_t n = arr.length;\n    if (n < k) return arr;\n\
    \    if (k == 0) return [];\n    if (k == 1)\n    {\n        long m = arr[0];\n\
    \        for (size_t i = 1; i < n; ++i)\n            m = max(m, arr[i]);\n   \
    \     return [m];\n    }\n    return [_maximum(arr, k)];\n}\nunittest\n{\n   \
    \ alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L,\
    \ -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7kfp1shu.d(37): Error: undefined identifier `max`, did you mean
    function `fmax`?

    /tmp/tmp7kfp1shu.d(40): Error: undefined identifier `_maximum`, did you mean function
    `maximum`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7kfp1shu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164017
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    if (arr.length == 0) return new long[0];\n    if (k == 0) return\
    \ new long[0];\n    if (k >= arr.length) return arr;\n    auto pivotIndex = (arr.length\
    \ + 1) / 2;\n    auto pivot = arr[pivotIndex];\n    auto less = [];\n    auto\
    \ greater = [];\n    foreach (e; arr) {\n        if (e < pivot) less ~= e;\n \
    \       else if (e > pivot) greater ~= e;\n    }\n    if (less.length + 1 == k)\
    \ return less ~ [pivot];\n    if (less.length >= k) return maximum(less, k);\n\
    \    if (less.length + 1 + greater.length >= k) return less ~ [pivot] ~ maximum(greater,\
    \ k - (less.length + 1));\n    return less ~ [pivot] ~ greater;\n}\nunittest\n\
    {\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L)\
    \ == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n\
    \    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgyxfm9gj.d(38): Error: cannot append type `long` to type `void[]`

    /tmp/tmpgyxfm9gj.d(39): Error: cannot append type `long` to type `void[]`

    /tmp/tmpgyxfm9gj.d(42): Error: function `tmpgyxfm9gj.maximum(long[] arr, long
    k)` is not callable using argument types `(void[], long)`

    /tmp/tmpgyxfm9gj.d(42):        cannot pass argument `less` of type `void[]` to
    parameter `long[] arr`

    /tmp/tmpgyxfm9gj.d(43): Error: function `tmpgyxfm9gj.maximum(long[] arr, long
    k)` is not callable using argument types `(void[], ulong)`

    /tmp/tmpgyxfm9gj.d(43):        cannot pass argument `greater` of type `void[]`
    to parameter `long[] arr`

    /tmp/tmpgyxfm9gj.d(41): Error: cannot implicitly convert expression `less ~ cast(void[])[pivot]`
    of type `void[]` to `long[]`

    /tmp/tmpgyxfm9gj.d(44): Error: cannot implicitly convert expression `less ~ cast(void[])[pivot]
    ~ greater` of type `void[]` to `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgyxfm9gj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164017
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long i, j, tmp;\n    for (i = 0; i < k; i++) \n    {\n    \
    \    for (j = 0; j < arr.length-i-1; j++) \n        {\n            if (arr[j]\
    \ > arr[j+1]) \n            {\n                tmp = arr[j];\n               \
    \ arr[j] = arr[j+1];\n                arr[j+1] = tmp;\n            }\n       \
    \ }\n    }\n    return arr[arr.length-k .. arr.length];\n}\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164017
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] max = new long[(int)k];\n    for (long i = 0; i < k;\
    \ i++)\n    {\n        max[(int)i] = arr[(int)i];\n    }\n    for (long i = k;\
    \ i < arr.length; i++)\n    {\n        long smallest = arr[(int)k-1];\n      \
    \  long smallestPos = k-1;\n        for (long j = 0; j < k; j++)\n        {\n\
    \            if (max[(int)j] < smallest)\n            {\n                smallest\
    \ = max[(int)j];\n                smallestPos = j;\n            }\n        }\n\
    \        if (arr[(int)i] > smallest)\n        {\n            max[(int)smallestPos]\
    \ = arr[(int)i];\n        }\n    }\n    sort!(\"a < b\")(max);\n    return max;\n\
    }\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L,\
    \ 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L,\
    \ 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptl10fag0.d(30): Error: C style cast illegal, use `cast(int)k`

    /tmp/tmptl10fag0.d(33): Error: C style cast illegal, use `cast(int)i`

    /tmp/tmptl10fag0.d(33): Error: C style cast illegal, use `cast(int)i`

    /tmp/tmptl10fag0.d(37): Error: C style cast illegal, use `cast(int)k`

    /tmp/tmptl10fag0.d(41): Error: C style cast illegal, use `cast(int)j`

    /tmp/tmptl10fag0.d(43): Error: C style cast illegal, use `cast(int)j`

    /tmp/tmptl10fag0.d(47): Error: C style cast illegal, use `cast(int)i`

    /tmp/tmptl10fag0.d(49): Error: C style cast illegal, use `cast(int)smallestPos`

    /tmp/tmptl10fag0.d(49): Error: C style cast illegal, use `cast(int)i`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptl10fag0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164017
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[(int)k];\n    auto index = 0;\n  \
    \  foreach(i; arr)\n    {\n        if(index == 0)\n        {\n            result[index]\
    \ = i;\n            index++;\n        }\n        else\n        {\n           \
    \ for(auto j = index - 1; j >= 0; j--)\n            {\n                if(i <\
    \ result[j])\n                {\n                    result[j + 1] = result[j];\n\
    \                    if(j == 0)\n                    {\n                     \
    \   result[j] = i;\n                    }\n                }\n               \
    \ else\n                {\n                    result[j + 1] = i;\n          \
    \          break;\n                }\n            }\n            index++;\n  \
    \      }\n        if(index > k)\n        {\n            result = result[1..$];\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\
    \n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdumnbuzw.d(30): Error: C style cast illegal, use `cast(int)k`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdumnbuzw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164017
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted array \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] big = new long[k];\n    long[] ret = new long[k];\n\
    \    foreach(i, v; arr)\n    {\n        if(k > 0)\n        {\n            long\
    \ index = 0;\n            while(index < k && big[index] > v)\n            {\n\
    \                index++;\n            }\n            if(index < k)\n        \
    \    {\n                big[index..k] = big[index..k-1];\n                big[index]\
    \ = v;\n            }\n        }\n    }\n    return big;\n}\nunittest\n{\n   \
    \ alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L,\
    \ -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'object.Error@(0): Array lengths don''t match for copy: 2 != 3

    ----------------

    ??:? nothrow @safe void rt.util.array._enforceSameLength(const(char[]), const(ulong),
    const(ulong)) [0x42ac40]

    ??:? _d_arraycopy [0x428b76]

    ??:? long[] tmpbr6pkto1.maximum(long[], long) [0x427f75]

    ??:? void tmpbr6pkto1.__unittest_L50_C1() [0x428006]

    ??:? void tmpbr6pkto1.__modtest() [0x428800]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ce47]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bcda]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430f65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x431414]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430ef1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bcb1]'
  stdout: ''
  timestamp: 1660164017
