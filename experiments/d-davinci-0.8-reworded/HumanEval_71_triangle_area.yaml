name: HumanEval_71_triangle_area
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of the\
  \ three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal\
  \ points if the three sides form a valid triangle. \n    Otherwise return -1\n \
  \   Three sides make a valid triangle when the sum of any two sides is greater \n\
  \    than the third side.\n    Example:\n    >>> triangle_area(3L, 4L)\n    6.0\n\
  \    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long a, long\
  \ b, long c) \n"
tests: "unittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
  \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
  \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
  \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
  \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
  \ 2L, 10L) == -1L);\n}\nvoid main(){}"
completions: ["{\n    float p = (a + b + c) / 2.0;\n    if(p - a > 0 && p - b > 0\
    \ && p - c > 0)\n        return sqrt(p * (p - a) * (p - b) * (p - c));\n    return\
    \ -1;\n}", "{\n    float s;\n    if ( (a+b) > c && (a+c) > b && (b+c) > a )\n\
    \    {\n        s = (a+b+c)/2.0;\n        return sqrt(s*(s-a)*(s-b)*(s-c));\n\
    \    }\n    else\n    {\n        return -1.0;\n    }\n}", "{\n    if (a <= 0 ||\
    \ b <= 0 || c <= 0) return -1.0;\n    if (a + b > c && a + c > b && b + c > a)\n\
    \    {\n        float p = float(a + b + c) / 2;\n        return sqrt(p * (p -\
    \ a) * (p - b) * (p - c));\n    }\n    return -1.0;\n}", "{\n    return -1;\n}",
  "{\n    float s = float(a + b + c) / 2;\n    float area = sqrt(s * (s - a) * (s\
    \ - b) * (s - c));\n    if (a + b > c && a + c > b && b + c > a) {\n        return\
    \ area;\n    } else {\n        return -1;\n    }\n}\n/*", "{\n    float f1 = (float)\
    \ a;\n    float f2 = (float) b;\n    float f3 = (float) c;\n    if (a == 0 ||\
    \ b == 0 || c == 0) { return -1; }\n    else if (a > b + c || b > a + c || c >\
    \ a + b) { return -1; }\n    else { return abs(0.5 * (f1 * f2) * sin(180 / f3));\
    \ }\n}\n// Using type tuples (TupleT!(int, int, int))\nfloat triangle_area2(TupleT!(long,\
    \ long, long) triangle)\n{\n    float f1 = (float) triangle[0];\n    float f2\
    \ = (float) triangle[1];\n    float f3 = (float) triangle[2];\n    if (triangle[0]\
    \ == 0 || triangle[1] == 0 || triangle[2] == 0) { return -1; }\n    else if (triangle[0]\
    \ > triangle[1] + triangle[2] || triangle[1] > triangle[0] + triangle[2] || triangle[2]\
    \ > triangle[0] + triangle[1]) { return -1; }\n    else { return abs(0.5 * (f1\
    \ * f2) * sin(180 / f3)); }\n}\n// Using array, the same as the code above\nfloat\
    \ triangle_area3(long[] triangle)\n{\n    float f1 = (float) triangle[0];\n  \
    \  float f2 = (float) triangle[1];\n    float f3 = (float) triangle[2];\n    if\
    \ (triangle[0] == 0 || triangle[1] == 0 || triangle[2] == 0) { return -1; }\n\
    \    else if (triangle[0] > triangle[1] + triangle[2] || triangle[1] > triangle[0]\
    \ + triangle[2] || triangle[2] > triangle[0] + triangle[1]) { return -1; }\n \
    \   else { return abs(0.5 * (f1 * f2) * sin(180 / f3)); }\n}\n/*\n    Given a\
    \ string containing spaces, we want to use \"%20\" in place of each", "{\n   \
    \ float semi_perimeter = (a + b + c) / 2;\n    float area = sqrt(semi_perimeter\
    \ * (semi_perimeter - a) * (semi_perimeter - b) * (semi_perimeter - c));\n   \
    \ if (area > 0) {\n        return area;\n    }\n    return -1;\n}", "{\n    //\
    \ [a, b, c]\n    if ((a + b) <= c || (a + c) <= b || (b + c) <= a)\n        return\
    \ -1;\n    else {\n        // half of perimeter\n        long p = (a + b + c)\
    \ / 2;\n        // area of the triangle\n        double area = sqrt(p * (p - a)\
    \ * (p - b) * (p - c));\n        return round(area * 100.0) / 100.0;\n    }\n}",
  "{\n    real[][] sides = [[a, b, c], [b, c, a], [c, a, b]];\n    real[][] triangles\
    \ = [[a, b, c], [b, c, a], [c, a, b]];\n    real[3] one_triangle;\n    real p,\
    \ area;\n    foreach(i, sides) {\n        one_triangle = sides[i];\n        p\
    \ = (one_triangle[0] + one_triangle[1] + one_triangle[2]) / 2;\n        area =\
    \ sqrt(p * (p - one_triangle[0]) * (p - one_triangle[1]) * (p - one_triangle[2]));\n\
    \        if (isNaN(area)) {\n            area = -1;\n        }\n        triangles[i]\
    \ = area;\n    }\n    return max(triangles)[0];\n}", "{\n    if(a <= 0 || b <=\
    \ 0 || c <= 0)\n        return -1;\n    if(a >= b + c || b >= a + c || c >= a\
    \ + b)\n        return -1;\n    auto s = (a + b + c) / 2.0;\n    return sqrt(s\
    \ * (s - a) * (s - b) * (s - c));\n}", "{\n    auto s = (a + b + c) / 2.0;\n \
    \   if (a + b > c && a + c > b && b + c > a)\n    {\n        return sqrt(s * (s\
    \ - a) * (s - b) * (s - c));\n    }\n    return -1;\n}", "{\n    return (a * b\
    \ * c == 0) ? float(-1) : float(2 * a * b * c) / float(a + b + c);\n}", "{\n \
    \   if (a + b > c && a + c > b && b + c > a)\n    {\n        float s = (a + b\
    \ + c) / 2;\n        return sqrt(s * (s - a) * (s - b) * (s - c));\n    }\n  \
    \  else\n    {\n        return -1;\n    }\n}", "{\n    if(a + b > c && a + c >\
    \ b && b + c > a)\n    {\n        float s = (a + b + c) / 2.0;\n        return\
    \ sqrt(s * (s - a) * (s - b) * (s - c));\n    }\n    return -1;\n}", "{\n    auto\
    \ aF = float(a);\n    auto bF = float(b);\n    auto cF = float(c);\n    return\
    \ float(formatFloat(sqrt(aF*bF*cF / (aF+bF+cF)), \"%.2f\"));\n}", "{\n    long[]\
    \ sides = [a, b, c];\n    sort(sides);\n    if (sides[0] + sides[1] <= sides[2])\n\
    \        return -1L;\n    else\n        return (a * b / 2.0f);\n}", "{\n    float\
    \ s = (a + b + c) / 2.0;\n    if(a+b>c && a+c>b && b+c>a) \n    {\n        return\
    \ sqrt(s * (s - a) * (s - b) * (s - c));\n    }\n    return -1.0;\n}", "{\n  \
    \  float p = (a + b + c) / 2.0;\n    return sqrt(p * (p - a) * (p - b) * (p -\
    \ c));\n}", "{\n    auto triangle = tuple(a, b, c);\n    auto f = std.algorithm.find;\n\
    \    if (f(triangle, x => x <= 0)) return -1L;\n    auto mi = std.algorithm.minElement;\n\
    \    auto [mn, mx] = tuple(mi(triangle), std.algorithm.maxElement(triangle));\n\
    \    if (mn + mx < mx) return -1L;\n    auto sum = std.algorithm.reduce!((a, b)\
    \ => a + b)(triangle);\n    auto s = sum / 2.0;\n    return sqrt(s * (s - a) *\
    \ (s - b) * (s - c));\n}", "{\n    auto s = (a + b + c) / 2;\n    float answer\
    \ = sqrt(s * (s - a) * (s - b) * (s - c));\n    if (answer > 0)\n        return\
    \ answer;\n    else\n        return -1;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
