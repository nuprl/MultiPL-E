name: HumanEval_71_triangle_area
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of the\
  \ three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal\
  \ points if the three sides form a valid triangle. \n    Otherwise return -1\n \
  \   Three sides make a valid triangle when the sum of any two sides is greater \n\
  \    than the third side.\n    Example:\n    >>> triangle_area(3L, 4L)\n    6.0\n\
  \    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long a, long\
  \ b, long c) \n"
tests: "unittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
  \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
  \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
  \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
  \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
  \ 2L, 10L) == -1L);\n}\nvoid main(){}"
completions: ["{\n    float p = (a + b + c) / 2.0;\n    if(p - a > 0 && p - b > 0\
    \ && p - c > 0)\n        return sqrt(p * (p - a) * (p - b) * (p - c));\n    return\
    \ -1;\n}", "{\n    float s;\n    if ( (a+b) > c && (a+c) > b && (b+c) > a )\n\
    \    {\n        s = (a+b+c)/2.0;\n        return sqrt(s*(s-a)*(s-b)*(s-c));\n\
    \    }\n    else\n    {\n        return -1.0;\n    }\n}", "{\n    if (a <= 0 ||\
    \ b <= 0 || c <= 0) return -1.0;\n    if (a + b > c && a + c > b && b + c > a)\n\
    \    {\n        float p = float(a + b + c) / 2;\n        return sqrt(p * (p -\
    \ a) * (p - b) * (p - c));\n    }\n    return -1.0;\n}", "{\n    return -1;\n}",
  "{\n    float s = float(a + b + c) / 2;\n    float area = sqrt(s * (s - a) * (s\
    \ - b) * (s - c));\n    if (a + b > c && a + c > b && b + c > a) {\n        return\
    \ area;\n    } else {\n        return -1;\n    }\n}\n/*", "{\n    float f1 = (float)\
    \ a;\n    float f2 = (float) b;\n    float f3 = (float) c;\n    if (a == 0 ||\
    \ b == 0 || c == 0) { return -1; }\n    else if (a > b + c || b > a + c || c >\
    \ a + b) { return -1; }\n    else { return abs(0.5 * (f1 * f2) * sin(180 / f3));\
    \ }\n}\n// Using type tuples (TupleT!(int, int, int))\nfloat triangle_area2(TupleT!(long,\
    \ long, long) triangle)\n{\n    float f1 = (float) triangle[0];\n    float f2\
    \ = (float) triangle[1];\n    float f3 = (float) triangle[2];\n    if (triangle[0]\
    \ == 0 || triangle[1] == 0 || triangle[2] == 0) { return -1; }\n    else if (triangle[0]\
    \ > triangle[1] + triangle[2] || triangle[1] > triangle[0] + triangle[2] || triangle[2]\
    \ > triangle[0] + triangle[1]) { return -1; }\n    else { return abs(0.5 * (f1\
    \ * f2) * sin(180 / f3)); }\n}\n// Using array, the same as the code above\nfloat\
    \ triangle_area3(long[] triangle)\n{\n    float f1 = (float) triangle[0];\n  \
    \  float f2 = (float) triangle[1];\n    float f3 = (float) triangle[2];\n    if\
    \ (triangle[0] == 0 || triangle[1] == 0 || triangle[2] == 0) { return -1; }\n\
    \    else if (triangle[0] > triangle[1] + triangle[2] || triangle[1] > triangle[0]\
    \ + triangle[2] || triangle[2] > triangle[0] + triangle[1]) { return -1; }\n \
    \   else { return abs(0.5 * (f1 * f2) * sin(180 / f3)); }\n}\n/*\n    Given a\
    \ string containing spaces, we want to use \"%20\" in place of each", "{\n   \
    \ float semi_perimeter = (a + b + c) / 2;\n    float area = sqrt(semi_perimeter\
    \ * (semi_perimeter - a) * (semi_perimeter - b) * (semi_perimeter - c));\n   \
    \ if (area > 0) {\n        return area;\n    }\n    return -1;\n}", "{\n    //\
    \ [a, b, c]\n    if ((a + b) <= c || (a + c) <= b || (b + c) <= a)\n        return\
    \ -1;\n    else {\n        // half of perimeter\n        long p = (a + b + c)\
    \ / 2;\n        // area of the triangle\n        double area = sqrt(p * (p - a)\
    \ * (p - b) * (p - c));\n        return round(area * 100.0) / 100.0;\n    }\n}",
  "{\n    real[][] sides = [[a, b, c], [b, c, a], [c, a, b]];\n    real[][] triangles\
    \ = [[a, b, c], [b, c, a], [c, a, b]];\n    real[3] one_triangle;\n    real p,\
    \ area;\n    foreach(i, sides) {\n        one_triangle = sides[i];\n        p\
    \ = (one_triangle[0] + one_triangle[1] + one_triangle[2]) / 2;\n        area =\
    \ sqrt(p * (p - one_triangle[0]) * (p - one_triangle[1]) * (p - one_triangle[2]));\n\
    \        if (isNaN(area)) {\n            area = -1;\n        }\n        triangles[i]\
    \ = area;\n    }\n    return max(triangles)[0];\n}", "{\n    if(a <= 0 || b <=\
    \ 0 || c <= 0)\n        return -1;\n    if(a >= b + c || b >= a + c || c >= a\
    \ + b)\n        return -1;\n    auto s = (a + b + c) / 2.0;\n    return sqrt(s\
    \ * (s - a) * (s - b) * (s - c));\n}", "{\n    auto s = (a + b + c) / 2.0;\n \
    \   if (a + b > c && a + c > b && b + c > a)\n    {\n        return sqrt(s * (s\
    \ - a) * (s - b) * (s - c));\n    }\n    return -1;\n}", "{\n    return (a * b\
    \ * c == 0) ? float(-1) : float(2 * a * b * c) / float(a + b + c);\n}", "{\n \
    \   if (a + b > c && a + c > b && b + c > a)\n    {\n        float s = (a + b\
    \ + c) / 2;\n        return sqrt(s * (s - a) * (s - b) * (s - c));\n    }\n  \
    \  else\n    {\n        return -1;\n    }\n}", "{\n    if(a + b > c && a + c >\
    \ b && b + c > a)\n    {\n        float s = (a + b + c) / 2.0;\n        return\
    \ sqrt(s * (s - a) * (s - b) * (s - c));\n    }\n    return -1;\n}", "{\n    auto\
    \ aF = float(a);\n    auto bF = float(b);\n    auto cF = float(c);\n    return\
    \ float(formatFloat(sqrt(aF*bF*cF / (aF+bF+cF)), \"%.2f\"));\n}", "{\n    long[]\
    \ sides = [a, b, c];\n    sort(sides);\n    if (sides[0] + sides[1] <= sides[2])\n\
    \        return -1L;\n    else\n        return (a * b / 2.0f);\n}", "{\n    float\
    \ s = (a + b + c) / 2.0;\n    if(a+b>c && a+c>b && b+c>a) \n    {\n        return\
    \ sqrt(s * (s - a) * (s - b) * (s - c));\n    }\n    return -1.0;\n}", "{\n  \
    \  float p = (a + b + c) / 2.0;\n    return sqrt(p * (p - a) * (p - b) * (p -\
    \ c));\n}", "{\n    auto triangle = tuple(a, b, c);\n    auto f = std.algorithm.find;\n\
    \    if (f(triangle, x => x <= 0)) return -1L;\n    auto mi = std.algorithm.minElement;\n\
    \    auto [mn, mx] = tuple(mi(triangle), std.algorithm.maxElement(triangle));\n\
    \    if (mn + mx < mx) return -1L;\n    auto sum = std.algorithm.reduce!((a, b)\
    \ => a + b)(triangle);\n    auto s = sum / 2.0;\n    return sqrt(s * (s - a) *\
    \ (s - b) * (s - c));\n}", "{\n    auto s = (a + b + c) / 2;\n    float answer\
    \ = sqrt(s * (s - a) * (s - b) * (s - c));\n    if (answer > 0)\n        return\
    \ answer;\n    else\n        return -1;\n}", "{\n    float s = (a + b + c) / 2;\n\
    \    float area = sqrt(s * (s - a) * (s - b) * (s - c));\n    if(area < 0)\n \
    \       return -1;\n    return area;\n}", "{\n    if (a<=0 || b<=0 || c<=0)\n\
    \        return -1;\n    if (a+b<=c || a+c<=b || b+c<=a)\n        return -1;\n\
    \    float p = (a+b+c)/2.0;\n    return sqrt(p*(p-a)*(p-b)*(p-c));\n}", "{ \n\
    \    auto s = (a + b + c) / 2.0; \n  \n    // (s*(s-a)*(s-b)*(s-c)) is the area\
    \ \n    auto ans = sqrt(s * (s - a) * (s - b) * (s - c)); \n  \n    return ans;\
    \ \n} ", "{\n    if(a<=0L || b<=0L || c<=0L) return -1L;\n    //triangle inequality\
    \ theorem\n    if(a >= b+c || b >= a+c || c >= a+b) return -1L;\n    float s =\
    \ (a+b+c)/2.0f;\n    return sqrt(s*(s-a)*(s-b)*(s-c));\n}", "{\n    float p =\
    \ float(a + b + c) / 2;\n    float s = float(p * (p - a) * (p - b) * (p - c));\n\
    \    if (s <= 0)\n        return -1;\n    return sqrt(s);\n}", "{\n    if(is(typeof(assumeSorted3(a,\
    \ b, c)))) \n    {\n        float s = (a + b + c) / 2.0f;\n        float area\
    \ = s * (s - a) * (s - b) * (s - c);\n        if(area > 0) return sqrt(area);\n\
    \    }\n    return -1;\n}", "{\n    float s = (a + b + c) / 2.0;\n    return ((s\
    \ * (s - a) * (s - b) * (s - c)) != 0) ? sqrt(s * (s - a) * (s - b) * (s - c))\
    \ : -1;\n}", "{\n    if (a+b>c && a+c>b && b+c>a)\n    {\n        float s = (a+b+c)/2.0;\n\
    \        float t = s*(s-a)*(s-b)*(s-c);\n        return sqrt(t);\n    }\n    else\n\
    \    {\n        return -1.0;\n    }\n}", "{\n    if(a+b <= c || a+c <= b || b+c\
    \ <= a)\n        return -1.0;\n    auto s = (a+b+c)/2.0;\n    auto area = sqrt(s*(s-a)*(s-b)*(s-c));\n\
    \    return cast(float)area;\n}", "{\n    //check if is valid triangle\n    if(a\
    \ < b + c && b < a + c && c < a + b)\n    {\n        float p = (a + b + c) / 2.0;\n\
    \        return sqrt(p * (p - a) * (p - b) * (p - c));\n    }\n    return -1;\n\
    }", "{\n    float res = -1;\n    float p = 0;\n    long[] sort_arr = [a, b, c];\n\
    \    std.algorithm.sort(sort_arr);\n    if (sort_arr[0] + sort_arr[1] > sort_arr[2])\
    \ {\n        p = (a + b + c) / 2;\n        res = sqrt(p * (p - a) * (p - b) *\
    \ (p - c));\n    }\n    return res;\n}", "{\n    if(a + b > c && b + c > a &&\
    \ a + c > b)\n    {\n        return -1;\n    }\n    else\n    {\n        float\
    \ s = (a + b + c) / 2;\n        return sqrt(s * (s - a) * (s - b) * (s - c));\n\
    \    }\n}", "{\n    float area = -1.0f;\n    //float s = (a + b + c) / 2.0f;\n\
    \    //float t = sqrt(s * (s - a) * (s - b) * (s - c));\n    //auto t = sqrt(pow(a,\
    \ 2) + pow(b, 2) - 2 * a * b * cos(c));\n    area = (float)sqrt(max(0.0f, max(0.0f,\
    \ (float)pow(a, 2) + (float)pow(b, 2) - (float)pow(c, 2)) / 2.0f) * (min(a, b)\
    \ - max(0.0f, (float)pow(a, 2) + (float)pow(b, 2) - (float)pow(c, 2)) / 2.0f));\n\
    \    return (area >= 0.0f) ? area : -1.0f;\n}", "{\n    if(a < 1 || b < 1 || c\
    \ < 1)\n        return -1.0;\n    if(a + b > c && a + c > b && b + c > a)\n  \
    \  {\n        auto p = (a + b + c) / 2.0;\n        return sqrt(p * (p - a) * (p\
    \ - b) * (p - c));\n    }\n    return -1.0;\n}", "{\n    float s = 0.5 * (a +\
    \ b + c);\n    float area = sqrt(s * (s - a) * (s - b) * (s - c));\n    return\
    \ area;\n}\n ", "{\n  float result = 0;\n  if (a + b > c && a + c > b && b + c\
    \ > a)\n    result = a * b * sin(c) / 2;\n  else\n    result = -1.0;\n  return\
    \ result;\n}", "{\n    long T = a + b + c;\n    float s = cast(float)T / 2;\n\
    \    float r = s * (s - a) * (s - b) * (s - c);\n    float _t = s * s * s;\n \
    \   if (_t == 0 || r < 0) \n    {\n        return -1;\n    }\n    else \n    {\n\
    \        float triangle_area = sqrt(r);\n        return triangle_area;\n    }\n\
    }", "{\n    float p;\n    float s;\n    float area;\n    if (a + b > c && a +\
    \ c > b && b + c > a)\n    {\n        p = (a + b + c) / 2;\n        s = p * (p\
    \ - a) * (p - b) * (p - c);\n        area = sqrt(s);\n        return area;\n \
    \   }\n    else \n    {\n        return -1;\n    }\n}", "{\n    float s = (a +\
    \ b + c) / 2;\n    if(a + b > c && a + c > b && b + c > a) \n    {\n        return\
    \ sqrt(s * (s - a) * (s - b) * (s - c));\n    }\n    return -1;\n}", "{\n    long\
    \ sides[] = [a, b, c];\n    if(a<=0 || b<=0 || c<=0 || a+b <= c || a+c <= b ||\
    \ b+c <= a)\n        return -1;\n    sort(sides);\n    float res = (float)(sides[0]\
    \ + sides[1]);\n    res = res*sides[2]*0.5;\n    return res;\n}", "{\n    // No\
    \ triangle possible if any side is less than 1\n    // or if the sum of two sides\
    \ is less than the third\n    if (a < 1 || b < 1 || c < 1 || a + b < c || a +\
    \ c < b || b + c < a) {\n        return -1.0;\n    }\n    // compute the semi-perimeter\n\
    \    float s = (a + b + c) / 2.0;\n    // compute the area using Heron's formula\n\
    \    float area = (s * (s - a) * (s - b) * (s - c));\n    if (area < 0) {\n  \
    \      return -1.0;\n    }\n    return sqrt(area);\n}", "{\n    float s = (a +\
    \ b + c) / 2.0;\n    float area = sqrt(s * (s - a) * (s - b) * (s - c));\n   \
    \ return area > 0 ? area : -1;\n}\n/*\n    Given a list of integers, return a\
    \ list of those numbers squared and the product of all the \n    numbers in the\
    \ list.\n    Example:\n    >>> square_n_sum([1, 2, 3, 4, 5])\n    [1, 4, 9, 16,\
    \ 25, 15]\n    >>> square_n_sum([])\n    [0, 0]\n*/\nTuple!(long[], long) square_n_sum(long[]\
    \ xs) \n{\n    long[] ys = xs.map!(a => a ^^ 2).array;\n    long sum = xs.sum;\n\
    \    return tuple(ys, sum);\n}\n/*\n    Given a positive integer n return the\
    \ nth fibonacci number.\n    A fibonacci number is the sum of the two previous\
    \ fibonacci numbers.\n    Starting with 1 and 2 the first 10 fibonacci numbers\
    \ are:\n    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...\n    Example:\n    >>> fib(0)\n\
    \    1\n    >>> fib(1)\n    1\n    >>> fib(2)\n    2\n    >>> fib(3)\n    3\n\
    \    >>> fib(10)\n    89\n*/\nulong fib(ulong n) \n{\n    // F(n) = F(n-1) + F(n-2)\n\
    \    if (n < 2) \n        return 1;\n    ulong f1 = 1;\n    ulong f2 = 1;\n  \
    \  ulong f = 0;\n    for (int i = 2; i <= n; i++)\n    {\n        f = f1 + f2;\n\
    \        f1 = f2;\n        f2 = f;\n    }\n    return f;\n}\n/*\n    Given a positive\
    \ integer n return the nth triangular number.\n    A triangular number counts\
    \ the objects that can form an equilateral triangle.\n    The nth triangular number",
  "{ \n    float s = (a + b + c) / 2.0;\n    return (s - a > 0 && s - b > 0 && s -\
    \ c > 0) ? sqrt(s * (s - a) * (s - b) * (s - c)) : -1;\n}", "{\n    if(a<=0 ||\
    \ b<=0 || c<=0)\n        return -1;\n    double s = (a+b+c)/2;\n    double area\
    \ = sqrt(s*(s-a)*(s-b)*(s-c));\n    return area;\n}", "{\n    if(a + b <= c ||\
    \ a + c <= b || b + c <= a) return -1;\n    auto s = cast(float)(a + b + c) /\
    \ 2;\n    return sqrt(s * (s - a) * (s - b) * (s - c));\n}", "{\n    float s =\
    \ (a + b + c) / 2.0;\n    if (s == 0)\n        return -1;\n    else\n        return\
    \ round(sqrt(s * (s - a) * (s - b) * (s - c)) * 100.0) / 100.0;\n}", "{\n  float\
    \ s = (a + b + c) / 2;\n  float area = sqrt(s * (s - a) * (s - b) * (s - c));\n\
    \  return area;\n}", "{\n\tif (a <= 0 || b <= 0 || c <= 0) \n\t{\n\t\treturn -1;\n\
    \t}\n\t// Return the area of the triangle rounded to 2 decimal points\n\t// http://en.wikipedia.org/wiki/Triangle#Using_Heron.27s_formula\n\
    \tfloat s = (a + b + c) / 2;\n\treturn round(sqrt(s * (s - a) * (s - b) * (s -\
    \ c)) * 100) / 100;\n}", "{\n    // make a tuple of these values\n    auto v =\
    \ tuple(a, b, c);\n    // sort the tuple\n    v = sort(v);\n    // get the highest\
    \ values\n    auto x = v[$-1];\n    auto y = v[$-2];\n    auto z = v[$-3];\n \
    \   // is the sum of the lower 2 greater than the highest?\n    if(y + z > x)\
    \ {\n        // yes, its a valid triangle\n        // use Heron's formula to calculate\
    \ the area\n        // see: http://en.wikipedia.org/wiki/Heron%27s_formula\n \
    \       auto s = (y + z + x) / 2.0f;\n        auto a = sqrt(s * (s - x) * (s -\
    \ y) * (s - z));\n        // return the area to 2 decimal places\n        return\
    \ round(a * 100.0f) / 100.0f;\n    }\n    // return -1 if its not a valid triangle\n\
    \    return -1;\n}", "{\n    auto s = (a + b + c) / 2;\n    if (s > c && s > b\
    \ && s > a)\n    {\n        auto areasq = s * (s - a) * (s - b) * (s - c);\n \
    \       return sqrt(areasq);\n    }\n    return -1;\n}", "{\n    real x, y, z;\n\
    \    x = cast(real)a;\n    y = cast(real)b;\n    z = cast(real)c;\n    auto p\
    \ = x + y + z;\n    if (z < x + y && y < x + z && x < y + z)\n    {\n        return\
    \ cast(float)(sqrt(p/2*(p/2-x)*(p/2-y)*(p/2-z)));\n    }\n    else \n    {\n \
    \       return -1;\n    }\n}", "{\n    if (a + b > c && b + c > a && a + c > b)\n\
    \    {\n        float s = float(a + b + c) / 2;\n        return sqrt(s * (s -\
    \ a) * (s - b) * (s - c));\n    }\n    return -1;\n}", "{ \n    if(a + b > c &&\
    \ a + c > b && b + c > a)\n    {\n        long p = (a + b + c) / 2;\n        return\
    \ sqrt(p * (p - a) * (p - b) * (p - c));\n    }\n    else\n    {\n        return\
    \ -1;\n    }\n}\n/*\n    Given two numbers, return the product rounded to 2 decimal\
    \ points. \n    If the product is greater than 100000, return 100000.\n    Example:\n\
    \    >>> multiply(4.6, 5.6)\n    25.76\n    >>> multiply(4.6, 9.6)\n    100000.0\n\
    */\nfloat multiply(float a, float b) \n{ \n    float product = a * b;\n    if(product\
    \ < 100000)\n    {\n        return product;\n    }\n    else\n    {\n        return\
    \ 100000;\n    }\n}\n/*\n    Given two numbers, return the sum rounded to 2 decimal\
    \ points. \n    If the sum is greater than 100000, return 100000.\n    Example:\n\
    \    >>> add(4.6, 5.6)\n    10.2\n    >>> add(4.6, 9.6)\n    100000.0\n*/\nfloat\
    \ add(float a, float b) \n{ \n    float sum = a + b;\n    if(sum < 100000)\n \
    \   {\n        return sum;\n    }\n    else\n    {\n        return 100000;\n \
    \   }\n}\n/*\n    Given a list of tuples of the form (country, city, population),\
    \ \n    return a tuple of the form (country, city) if the city has a population\
    \ greater than 10 million.\n    Example:\n    >>> big_cities([(\"India\", \"Mumbai\"\
    , 18.5), (\"USA\", \"New York\", 8.2), (\"India\", \"Kolkata\", 14.6)])\n    ((\"\
    India\", \"Mumbai\"), (\"India\", \"Kolkata\"))\n    >>> big_cities([(\"USA\"\
    , \"New York\", 8.2), (\"USA\", \"Chicago\", 9.1)])\n    ((\"USA\", \"New York\"\
    ), (\"USA", "{\n    enum FloatingType = float;\n    static if (is(FloatingType\
    \ T))\n    {\n        if (a < 1 || b < 1 || c < 1)\n            return -1.0f;\n\
    \        else\n        {\n            auto s = (a + b + c) / 2.0f;\n         \
    \   return sqrt(s * (s - a) * (s - b) * (s - c));\n        }\n    }\n    else\n\
    \    {\n        static assert(false, \"FloatingType is not float\");\n    }\n}",
  "{\n    if(a + b > c && a + c > b && b + c > a)\n    {\n        float sp = (a +\
    \ b + c) / 2.0;\n        return sqrt(sp * (sp - a) * (sp - b) * (sp - c));\n \
    \   }\n    return -1.0;\n}", "{\n    if(a + b > c && a + c > b && b + c > a)\n\
    \    {\n        // http://math.stackexchange.com/questions/128991/how-to-calculate-the-area-of-a-triangle-if-you-know-the-lengths-of-all-three-sid\n\
    \        float s = (a + b + c) / 2.0;\n        float Area = sqrt(s * (s - a) *\
    \ (s - b) * (s - c));\n        return round(Area, 2);\n    }\n    return -1;\n\
    }", "{\n    float p = (a + b + c) / 2.0;\n    float s = 0.0;\n    if (a <= 0 ||\
    \ b <= 0 || c <= 0) {\n        return -1;\n    }\n    if (a + b <= c || a + c\
    \ <= b || b + c <= a) {\n        return -1;\n    }\n    if (a == b && b == c)\
    \ {\n        s = sqrt(p * (p - a) * (p - b) * (p - c));\n    } else if (a == b\
    \ || b == c || a == c) {\n        if (a == b) {\n            s = a * sqrt(p *\
    \ (p - a) * (p - b) * (p - c)) / (2 * b);\n        } else if (b == c) {\n    \
    \        s = b * sqrt(p * (p - a) * (p - b) * (p - c)) / (2 * a);\n        } else\
    \ {\n            s = c * sqrt(p * (p - a) * (p - b) * (p - c)) / (2 * b);\n  \
    \      }\n    } else {\n        s = sqrt(p * (p - a) * (p - b) * (p - c));\n \
    \   }\n    return s;\n}", "{\n    //return (a == 0L || b == 0L || c == 0L) ? -1.0\
    \ : \n    //    0.5 * a * b * sin(radians(c));\n    real aa = to!real(a);\n  \
    \  real bb = to!real(b);\n    real cc = to!real(c);\n    //\n    real s = (aa\
    \ + bb + cc) / 2.0;\n    return sqrt(s * (s - aa) * (s - bb) * (s - cc));\n}",
  "{\n    float s = (a + b + c) / 2.0;\n    float area = sqrt(s * (s - a) * (s - b)\
    \ * (s - c));\n    return area == area ? area : -1;\n}", "{\n    long[3] sides\
    \ = [a, b, c];\n    sides.sort();\n    if (sides[0] + sides[1] > sides[2])\n \
    \   {\n        long p = (a + b + c) / 2;\n        return sqrt(p * (p - a) * (p\
    \ - b) * (p - c));\n    }\n    return -1.0;\n}", "{\n    /* \n        return -1\
    \ if the 3 sides cannot form a triangle.\n        must be able to create a triangle\
    \ out of the sides. \n        A triangle is formed if the sum of any two sides\
    \ is greater than the third side.\n    */\n    return (a + b > c) && (a + c >\
    \ b) && (b + c > a) ? sqrt(pow(a, 2) + pow(b, 2) - pow(c, 2)) * sqrt(pow(a, 2)\
    \ + pow(c, 2) - pow(b, 2)) * sqrt(pow(b, 2) + pow(c, 2) - pow(a, 2)) : -1;\n}",
  "{\n    // make sure the parameters are valid\n    auto p = a + b + c;\n    if (p\
    \ <= 0)\n        return -1.0;", "{\n    if(!(a > 0 && b > 0 && c > 0)) return\
    \ -1;\n    if(a + b <= c || a + c <= b || b + c <= a) return -1;\n    auto p =\
    \ (a + b + c) / 2.0;\n    return sqrt(p * (p - a) * (p - b) * (p - c));\n}", "{\n\
    \    enum\n    {\n        a_index = 0,\n        b_index = 1,\n        c_index\
    \ = 2\n    };\n    typedef Tuple!(long, long, long) Sides;\n    auto sides = Sides(a,\
    \ b, c);\n    sides = sides.opSlice()\n                 .sort()\n            \
    \     .opSlice();\n    if(sides[b_index] > sides[c_index] - sides[a_index])\n\
    \    {\n        auto s = (sides[a_index] + sides[b_index] + sides[c_index]) /\
    \ 2.0;\n        return sqrt(s * (s - sides[a_index]) * (s - sides[b_index]) *\
    \ (s - sides[c_index]));\n    }\n    return -1;\n}", "{\n    if(a+b > c && a+c\
    \ > b && b+c > a)\n    {\n        float p = (a+b+c)/2.0;\n        return sqrt(p*(p-a)*(p-b)*(p-c));\n\
    \    }\n    return -1.0;\n}", "{\n    if (a<=0 || b<=0 || c<=0 || a+b<=c || a+c<=b\
    \ || b+c<=a) return -1.0;\n    float p = (a+b+c)/2.0;\n    return sqrt(p*(p-a)*(p-b)*(p-c));\n\
    }", "{\n    const size_t len = 3L;\n    float side_lengths[len] = [a, b, c];\n\
    \    float max_length = max(side_lengths);\n    float total_length = sum(side_lengths);\n\
    \    float area = 0.0;\n    if (total_length - max_length <= max_length)\n   \
    \ {\n        return -1;\n    }\n    else\n    {\n        float semi_perimeter\
    \ = total_length / 2;\n        area = sqrt(semi_perimeter * (semi_perimeter -\
    \ a) * (semi_perimeter - b) * (semi_perimeter - c));\n        return area;\n \
    \   }\n}\n/*", "{\n    float result;\n    result = -1.0;\n    float s;\n    s\
    \ = (a + b + c) / 2.0;\n    if (a + b > c && a + c > b && b + c > a) {\n     \
    \   result = sqrt(s * (s - a) * (s - b) * (s - c));\n    }\n    return result;\n\
    }", "{ \n    float s = (a + b + c) / 2.0;\n    return s * (s - a) * (s - b) *\
    \ (s - c) < 0 ? -1 : sqrt(s * (s - a) * (s - b) * (s - c));\n}\n/*", "{\n    float[3]\
    \ triangle = [a, b, c];\n    std.algorithm.sort(triangle);\n    if (triangle[0]\
    \ + triangle[1] > triangle[2])\n    {\n        float s = (triangle[0] + triangle[1]\
    \ + triangle[2]) / 2.0;\n        return std.math.sqrt(s * (s - triangle[0]) *\
    \ (s - triangle[1]) * (s - triangle[2]));\n    }\n    return -1.0;\n}", "{\n \
    \   if ((a < 0) || (b < 0) || (c < 0)) return -1;\n    if ((a + b < c) || (a +\
    \ c < b) || (b + c < a)) return -1;\n    return (a + b + c) / 2;\n}", "{\n   \
    \ float result = -1;\n    if (a < b+c && b < a+c && c < a+b)\n    {\n        float\
    \ p = (a+b+c)/2;\n        result = sqrt(p*(p-a)*(p-b)*(p-c));\n    }\n    return\
    \ round(result, 2);\n}", "{\n    if( a <= 0 || b <= 0 || c <= 0 ) \n        return\
    \ -1.0f;\n    \n    float s = (a + b + c) / 2.0f;\n    float area = sqrt(s * (s\
    \ - a) * (s - b) * (s - c));\n    return round(area * 100.0f) / 100.0f;\n}", "{\n\
    \    // TODO\n    if(a <= 0 || b <= 0 || c <= 0) return -1;\n    auto s = (a +\
    \ b + c) / 2;\n    return sqrt(s * (s - a) * (s - b) * (s - c));\n}", "{\n   \
    \ if(a + b <= c || a + c <= b || b + c <= a)\n        return -1.0;\n    double\
    \ p = (a + b + c) / 2.0;\n    return sqrt(p * (p - a) * (p - b) * (p - c));\n}",
  "{\n    if (a < 0 || b < 0 || c < 0) return -1.0;\n    if (a + b <= c || a + c <=\
    \ b || b + c <= a) return -1.0;\n    else return sqrt(pow(a, 2) + pow(b, 2) -\
    \ pow(c, 2)) / 4.0;\n}", "{\n    if(a<=0 || b<=0 || c<=0)\n        return -1.0;\n\
    \    \n    /*\n    if(a+b <= c || a+c <= b || b+c <= a)\n        return -1.0;\n\
    \    */\n    //Tuple!(long, long, long) t = tuple(a, b, c);\n    long[3] lengths\
    \ = [a, b, c];\n    lengths.sort();\n    /*\n    long[] lengths = new long[3];\n\
    \    lengths[0] = a;\n    lengths[1] = b;\n    lengths[2] = c;\n    lengths.sort();\n\
    \    */\n    if(lengths[0] + lengths[1] <= lengths[2])\n        return -1.0;\n\
    \    \n    auto s = float(a+b+c)/2;\n    float area = sqrt(s*(s-a)*(s-b)*(s-c));\n\
    \    return area;\n}", "{\n    if (a+b>c && a+c>b && b+c>a) {\n        double\
    \ s = (a+b+c)/2.0;\n        return sqrt(s*(s-a)*(s-b)*(s-c));\n    }\n    return\
    \ -1;\n}", "{\n    enum float epsilon = 1.0e-9;\n    float s = (a + b + c) / 2.0;\n\
    \    float p = s * (s - a) * (s - b) * (s - c);\n    float area = sqrt(p);\n \
    \   if(area >= 0.0 - epsilon && area <= 0.0 + epsilon) {\n        return -1.0;\n\
    \    }\n    return area;\n}", "{\n    float s = (a + b + c) / 2.0;\n    float\
    \ area = sqrt(s * (s - a) * (s - b) * (s - c));\n    return area > 0 ? area :\
    \ -1;\n}", "{\n    /* 1 2 3 */\n    if(a + b <= c || a + c <= b || b + c <= a)\n\
    \        return -1;\n    return cast(float)a * b / 2;\n}", "{\n    long sum1 =\
    \ a + b;\n    long sum2 = a + c;\n    long sum3 = b + c;\n    if (sum1 <= c ||\
    \ sum2 <= b || sum3 <= a)\n        return -1;\n    float s = (a + b + c) / 2.0;\n\
    \    return sqrt(s * (s - a) * (s - b) * (s - c));\n}", "{\n    if ((a + b <=\
    \ c) || (a + c <= b) || (b + c <= a))\n        return -1.0;\n    double s = (a\
    \ + b + c) / 2.0;\n    return sqrt(s * (s - a) * (s - b) * (s - c));\n}", "{\n\
    \    float s;\n    float area;\n    s = (a + b + c) / 2.0;\n    area = sqrt(s\
    \ * (s - a) * (s - b) * (s - c));\n    return area;\n}", "{\n    if (a <= 0 ||\
    \ b <= 0 || c <= 0) \n        return -1.0;\n    if (a + b <= c || a + c <= b ||\
    \ b + c <= a) \n        return -1.0;\n    float p = (a + b + c) / 2.0;\n    return\
    \ sqrt(p * (p - a) * (p - b) * (p - c));\n}\n/*\n    Write a function that takes\
    \ a string and returns it reversed.\n    Examples:\n    >>> reverse_string(\"\
    Eshan\")\n    \"nahse\"\n    >>> reverse_string(\"\")\n    \"\"\n    >>> reverse_string(\"\
    abcd efgh ijkl mnop qrst uvwx yz\")\n    \"zy xwvu ts", "{\n    if ( (a + b >\
    \ c) && (a + c > b) && (b + c > a) )\n    {\n        auto s = (a + b + c) / 2.0;\n\
    \        return round(sqrt(s * (s - a) * (s - b) * (s - c)) * 100) / 100;\n  \
    \  }\n    else\n    {\n        return -1.0;\n    }\n}", "{\n    if (a <= 0 ||\
    \ b <= 0 || c <= 0)\n        return -1.0;\n    if (a + b <= c || a + c <= b ||\
    \ b + c <= a)\n        return -1.0;\n    auto s = (a + b + c) / 2.0;\n    return\
    \ sqrt(s * (s - a) * (s - b) * (s - c));\n}", "{\n    real A = a;\n    real B\
    \ = b;\n    real C = c;\n    auto s = (A + B + C) / 2;\n    real area = sqrt(s\
    \ * (s - A) * (s - B) * (s - C));\n    return(area > 0 ? area : -1);\n}\n ", "{\n\
    \    float s = (a + b + c) / 2.0;\n    if (s < a || s < b || s < c)\n        return\
    \ -1.0;\n    return sqrt(s * (s - a) * (s - b) * (s - c));\n}", "{\n    float\
    \ s = (a + b + c) / 2.0;\n    float area = sqrt(s * (s - a) * (s - b) * (s - c));\n\
    \    if (area > 0)\n        return area;\n    else\n        return -1;\n}", "{\n\
    \    float p = (a + b + c) / 2.0;\n    if(p * (p - a) * (p - b) * (p - c) > 0)\n\
    \        return sqrt(p * (p - a) * (p - b) * (p - c));\n    return -1;\n}", "{\n\
    \    // return -1 if the given sides can't form a triangle\n    if ((a + b <=\
    \ c) || (a + c <= b) || (b + c <= a)) return -1;\n    else\n    {\n        //\
    \ calculate the semi-perimeter\n        long s = (a + b + c) / 2;\n        //\
    \ calculate the area\n        float area = sqrt(s * (s - a) * (s - b) * (s - c));\n\
    \        // return the rounded value to 2 decimal points\n        return round(area\
    \ * 100) / 100;\n    }\n}\n/*\n    Test function.\n*/", "{\n    // TODO: implement\
    \ this function\n    if(a + b > c && a + c > b && b + c > a) {\n        return\
    \ cast(float)sqrt( cast(double)(pow(cast(double)a, 2) + pow(cast(double)b, 2)\
    \ - pow(cast(double)c, 2)) * \n                                cast(double)(pow(cast(double)a,\
    \ 2) + pow(cast(double)c, 2) - pow(cast(double)b, 2)) * \n                   \
    \             cast(double)(pow(cast(double)b, 2) + pow(cast(double)c, 2) - pow(cast(double)a,\
    \ 2)) / \n                                cast(double)(4));\n    }\n    return\
    \ -1;\n}", "{ \n  long s = (a + b + c) / 2;\n  float area = sqrt(s * (s - a) *\
    \ (s - b) * (s - c));\n  if (area > 0)\n  {\n    return round(area, 2);\n  }\n\
    \  else\n  {\n    return -1;\n  }\n  \n}", "{\n    float s = (a + b + c) / 2.0;\n\
    \    float t = s * (s - a) * (s - b) * (s - c);\n    if (t < 0) return -1.0;\n\
    \    return sqrt(t);\n}", "{\n    float s = (a + b + c) / 2.0;\n    float area\
    \ = sqrt(s * (s - a) * (s - b) * (s - c));\n    return  area == area ? area :\
    \ -1;\n}", "{\n    // your code here\n    if(a+b > c && a+c > b && b+c > a)\n\
    \    {\n        auto p = float(a+b+c)/2;\n        return sqrt(p*(p-a)*(p-b)*(p-c));\n\
    \    }\n    else\n    {\n        return -1;\n    }\n}", "{\n    if(a<=0 || b<=0\
    \ || c<=0)\n        return -1;\n    \n    long s = (a+b+c)/2;\n    if(s*(s-a)*(s-b)*(s-c)\
    \ <= 0)\n        return -1;\n    else\n        return sqrt(s*(s-a)*(s-b)*(s-c));\n\
    }\n/*", "{\n\tfloat s = (a + b + c) / 2;\n\tfloat area = sqrt(s * (s - a) * (s\
    \ - b) * (s - c));\n\treturn (area < 0.00001) ? -1.0 : area;\n}", "{\n    float\
    \ p = (a + b + c) / 2.0;\n    float S = sqrt(p * (p - a) * (p - b) * (p - c));\n\
    \    return S;\n}", "{ \n    float p = (a + b + c) / 2.0;\n    float s = sqrt(p\
    \ * (p - a) * (p - b) * (p - c));\n    return s;\n}", "{\n    static if (is(typeof(a\
    \ * b * c)))\n    {\n        auto s = cast(real)(a + b + c) / 2;\n        return\
    \ sqrt(s * (s - a) * (s - b) * (s - c));\n    }\n    else\n    {\n        return\
    \ -1.0;\n    }\n}\n/*\n    Given a natural number n, return a list of all the\
    \ factors of n.\n    Example:\n    >>> factor(4)\n    [1, 2, 4]\n    >>> factor(5)\n\
    \    [1, 5]\n*/\nauto factor(long n) \n{\n    auto res = [];\n    foreach (i;\
    \ 1..n + 1) \n    {\n        if (n % i == 0)\n        {\n            res ~= i;\n\
    \        }\n    }\n    return res;\n}\n/*\n    Takes a list of numbers and returns\
    \ the sum of those numbers.\n    Example:\n    >>> sum([1, 2, 3])\n    6\n   \
    \ >>> sum([])\n    0\n*/\nlong sum(List!long values) \n{\n    long sum = 0;\n\
    \    foreach (val; values) \n    {\n        sum += val;\n    }\n    return sum;\n\
    }\n/*\n    Given a number n. Return a list of the first n natural numbers.\n \
    \   Example:\n    >>> nat(5)\n    [1, 2, 3, 4, 5]\n    >>> nat(0)\n    []\n*/\n\
    auto nat(long n) \n{\n    auto res = [];\n    foreach (i; 1..n + 1) \n    {\n\
    \        res ~= i;\n    }\n    return res;\n}\n/*\n    Given a natural number\
    \ n. Return a list of the first n primes.\n    Example:\n    >>> primes(5)\n \
    \   [2, 3, 5, 7, 11]\n    >>> primes(0)\n    []\n*/\nauto primes(long n) \n{\n\
    \    auto res = [];\n    auto primes = 1;\n    foreach (i; 1..n + 1) \n    {\n\
    \        while (pr", "{\n    if (a > 0L && b > 0L && c > 0L)\n    {\n        const\
    \ float s = (a + b + c) / 2.0f;\n        const float area = sqrt(s * (s - a) *\
    \ (s - b) * (s - c));\n        return std.typecons.round(area, 2);\n    }\n  \
    \  return -1.0f;\n}", "{\n    if (a <= 0 || b <= 0 || c <= 0) return -1.0;\n \
    \   if (a > b + c || b > a + c || c > a + b) return -1.0;\n    float s = (a +\
    \ b + c) / 2.0;\n    float area = sqrt(s * (s - a) * (s - b) * (s - c));\n   \
    \ return area;\n}", "{ \n    float s = (a + b + c) / 2;\n    float area = sqrt(s\
    \ * (s - a) * (s - b) * (s - c));\n    if (area > 0) \n        return area;\n\
    \    else \n        return -1;\n}", "{\n    bool bIsValid = false;\n    float\
    \ fRet = -1.0f;\n    if(a > 0 && b > 0 && c > 0) {\n        bIsValid = (a + b\
    \ > c) && (a + c > b) && (b + c > a);\n    }\n    if(bIsValid) {\n        float\
    \ s = float(a + b + c) / 2.0f;\n        fRet = sqrt(s * (s - a) * (s - b) * (s\
    \ - c));\n    }\n    return fRet;\n}", "{\n    float f = (a + b + c) / 2.0f;\n\
    \    float result = 0.0f;\n    // Try..catch is needed to catch an exception,\
    \ and return -1.0\n    try\n    {\n        result = sqrt(f * (f - a) * (f - b)\
    \ * (f - c));\n    }\n    catch(Exception e)\n    {\n        return -1.0f;\n \
    \   }\n    return result;\n}", "{\n    float s = (a + b + c) / 2.0;\n    float\
    \ area = sqrt(s * (s - a) * (s - b) * (s - c));\n    return area;\n}", "{\n  \
    \  if(a+b>c && a+c>b && b+c>a)\n    {\n        auto s = real(a+b+c)/2;\n     \
    \   return trunc( sqrt(s*(s-a)*(s-b)*(s-c))*100)/100;\n    }\n    else\n     \
    \   return -1.0;\n}", "{\n  if( a < b+c && b < a+c && c < a+b )\n    return sqrt(long(a+b+c)*(a+b-c)*(a-b+c)*(-a+b+c))/4;\n\
    \  else\n    return -1.0;\n}", "{\n    float area = 0.0f;\n    if (a <= 0 || b\
    \ <= 0 || c <= 0) return -1.0f;\n    if (a + b <= c || a + c <= b || b + c <=\
    \ a) return -1.0f;\n    auto s = (a + b + c) / 2.0f;\n    area = sqrt(s * (s -\
    \ a) * (s - b) * (s - c));\n    return area;\n}", "{\n    if (a <= 0 || b <= 0\
    \ || c <= 0) return -1;\n    float s = (a + b + c) / 2.0;\n    float area = sqrt(s\
    \ * (s - a) * (s - b) * (s - c));\n    return round(area * 100.0) / 100.0;\n}",
  "{\n    return a+b > c ? area(real(a), real(b), real(c)) : -1.0;\n}", "{ \n    float\
    \ x = float(a);\n    float y = float(b);\n    float z = float(c);\n    float s\
    \ = 0.5*(x+y+z);\n    float area = sqrt(s*(s-x)*(s-y)*(s-z));\n    if (x > y &&\
    \ x > z)\n    {\n      float area = sqrt(s*(s-x)*(s-y)*(s-z));\n      if (area\
    \ != 0)\n        return to!real(area);\n      else \n        return -1;\n    }\n\
    \    else if (y > x && y > z)\n    {\n      float area = sqrt(s*(s-x)*(s-y)*(s-z));\n\
    \      if (area != 0)\n        return to!real(area);\n      else \n        return\
    \ -1;\n    }\n    else if (z > x && z > y)\n    {\n      float area = sqrt(s*(s-x)*(s-y)*(s-z));\n\
    \      if (area != 0)\n        return to!real(area);\n      else \n        return\
    \ -1;\n    }\n    else \n    {\n      return -1;\n    }\n}", "{\n    if (a <=\
    \ 0 || b <= 0 || c <= 0)\n        return -1;\n    if (a + b <= c || a + c <= b\
    \ || b + c <= a)\n        return -1;\n    long s = (a + b + c) / 2;\n    float\
    \ area = (float)sqrt(s * (s - a) * (s - b) * (s - c));\n    return (float)std.math.round(area,\
    \ 2);\n}", "{\n    float p = (a + b + c) / 2.0;\n    float S = sqrt(p * (p - a)\
    \ * (p - b) * (p - c));\n    return (a + b > c && a + c > b && b + c > a) ? S\
    \ : -1;\n}", "{\n    return is(typeof(triangleAreaImpl!a)) ? triangleAreaImpl!a(a,\
    \ b, c) : -1;\n}", "{\n    const float s = (a + b + c) / 2.0;\n    const float\
    \ area = sqrt(s * (s - a) * (s - b) * (s - c));\n    return (a > 0 && b > 0 &&\
    \ c > 0 && area > 0) ? area : -1;\n}\n/*\n    You are a detective trying to track\
    \ down a gang of bank robbers. \n    You have intercepted their last message and\
    \ the only clue is that \n    they have mentioned the date of their final heist.\
    \ \n    The date is in the form dd/mm/yyyy. The gang only operates on sundays.\
    \ \n    So you know that the heist will take place on a sunday. \n    You have\
    \ also tracked down the location of the thieves and know that \n    they are currently\
    \ in a particular city. The gang has their \n    own code language and in their\
    \ message, the city and the date is represented by two strings. \n    You need\
    \ to figure out what the date is. \n    For example if the city is \"Melbourne\"\
    \ and the code for the string is \"sneuqf\" \n    then the string is the reverse\
    \ of the city as all vowels are replaced by the next character. \n    The next\
    \ character for 'e' is 'f' and for 'u' is 'v'. \n    The next sunday on or after\
    \ today is 15/09/2019. So the function should return \"15/09/2019\". \n    Note:\
    \ You can assume that the city and the code will have the same length. \n    The\
    \ city will only contain characters from the set [a-z] while the code will only\
    \ contain characters from the set [a-z, '?']. \n    A '?' in the code can stand\
    \ for either 'a' or 'e' or 'i' or 'o' or 'u'. \n    For example if the city is\
    \ \"tokyo\" and the code is \"d?k?y?\", then the function should return \"01/09/2019\"\
    \n    >>> find_sunday(\"Melbourne\", \"sneuqf\")\n    \"15/09/2019\"\n    >>>\
    \ find_sunday(\"dublin\", \"ji?n\")\n    \"22/09/2019", "{\n    float p = (a +\
    \ b + c) / 2.0;\n    float s = sqrt(p * (p - a) * (p - b) * (p - c));\n    float\
    \ result = s / 0.01;\n    float rounded_result = round(result);\n    if (rounded_result\
    \ == -1.0f) {\n        return -1.0f;\n    }\n    return (float)rounded_result\
    \ / 100.0f;\n}", "{\n    float a1 = float(a);\n    float b1 = float(b);\n    float\
    \ c1 = float(c);\n    float s = (a1 + b1 + c1) / 2;\n    float area = sqrt(s *\
    \ (s - a1) * (s - b1) * (s - c1));\n    if(a1 + b1 > c1 && a1 + c1 > b1 && b1\
    \ + c1 > a1){\n        return area;\n    }else{\n        return -1.0;\n    }\n\
    }", "{\n    if (a < 0 || b < 0 || c < 0) return -1.0;\n    if (a + b <= c || a\
    \ + c <= b || b + c <= a) return -1.0;\n    float s = (a + b + c) / 2.0;\n   \
    \ return cast(float) sqrt(s * (s - a) * (s - b) * (s - c));\n}", "{\n    float\
    \ result;\n    if ((a + b > c) && (a + c > b) && (b + c > a)) {\n        float\
    \ p = (a + b + c) / 2.0;\n        result = sqrt(p * (p - a) * (p - b) * (p - c));\n\
    \    } else {\n        result = -1.0;\n    }\n    return result;\n}", "{\n   \
    \ enum side_order = Tuple!(3L, 2L, 1L);\n    enum side_order_sort = Tuple!(2L,\
    \ 1L, 3L);\n    side_order[0] = a;\n    side_order[1] = b;\n    side_order[2]\
    \ = c;\n    side_order.sort!(std.algorithm.sort.quicksort, std.functional.less);\n\
    \    if (side_order[0] + side_order[1] > side_order[2])\n    {\n        side_order_sort[0]\
    \ = side_order[2];\n        side_order_sort[1] = side_order[1];\n        side_order_sort[2]\
    \ = side_order[0];\n        float p = (side_order_sort[0] + side_order_sort[1]\
    \ + side_order_sort[2]) / 2.0f;\n        float area = sqrt(p * (p - side_order_sort[0])\
    \ * (p - side_order_sort[1]) * (p - side_order_sort[2]));\n        return area;\n\
    \    }\n    else\n    {\n        return -1;\n    }\n}\n/*\n    Implement a function\
    \ which takes two numbers as input, and returns\n    all odd numbers between them,\
    \ inclusive.\n    Example:\n    >>> odd_numbers(1, 5)\n    [1, 3, 5]\n    >>>\
    \ odd_numbers(2, 10)\n    [3, 5, 7, 9]\n*/", "{\n    return (a + b > c && a +\
    \ c > b && b + c > a) ? sqrt(pow(a, 2) + pow(b, 2) - pow(c, 2)) * sqrt(pow(a,\
    \ 2) + pow(c, 2) - pow(b, 2)) * sqrt(pow(b, 2) + pow(c, 2) - pow(a, 2)) / 4 :\
    \ -1;\n}", "{ \n    float S = (a + b + c) / 2.0;\n    float area = sqrt(S * (S\
    \ - a) * (S - b) * (S - c));\n    return area;\n}", "{\n    float p = (a + b +\
    \ c) / 2.0;\n    float area = sqrt(p * (p - a) * (p - b) * (p - c));\n    float\
    \ result = cast(float) (area * 100) / 100;\n    return result;\n}", "{\n  if (a+b\
    \ > c && a+c > b && b+c > a) {\n    float p = (a+b+c)/2.0;\n    return Math.sqrt(p*(p-a)*(p-b)*(p-c));\n\
    \  } else {\n    return -1.0;\n  }\n}\n/*", "{\n    if (a < 0 || b < 0 || c <\
    \ 0)\n        return -1.0;\n    if ((a + b) < c || (a + c) < b || (b + c) < a)\n\
    \        return -1.0;\n    //using Heron's formula\n    double p = a + b + c;\n\
    \    double s = p / 2;\n    double area = sqrt(s * (s - a) * (s - b) * (s - c));\n\
    \    return area;\n}", "{\n    float[] sides = [a, b, c];\n    float s = (a +\
    \ b + c) / 2;\n    if (a < s || b < s || c < s)\n    {\n        return sqrt(s\
    \ * (s - a) * (s - b) * (s - c));\n    }\n    else \n    {\n        return -1.0;\n\
    \    }\n}", "{\n  float s = (a + b + c) / 2.0;\n  if (s <= a || s <= b || s <=\
    \ c)\n    return -1.0;\n  return sqrt(s * (s - a) * (s - b) * (s - c));\n}", "{\n\
    \    auto s = (a + b + c) / 2.0;\n    auto area = sqrt(s * (s - a) * (s - b) *\
    \ (s - c));\n    return area;\n}", "{\n    auto aTuple = makeTuple(a, b, c);\n\
    \    sort(aTuple);\n    if(aTuple[0] + aTuple[1] > aTuple[2])\n    {\n       \
    \ return -1;\n    }\n    else\n    {\n        return (0.5 * aTuple[0] * aTuple[1]);\n\
    \    }\n}", "{\n    if (a <= 0 || b <= 0 || c <= 0) return -1;\n    const float\
    \ p = (a + b + c) / 2;\n    return std.math.sqrt(p * (p - a) * (p - b) * (p -\
    \ c));\n}", "{\n    float p = (a + b + c) / 2.0;\n    if (p < a || p < b || p\
    \ < c)\n        return -1.0;\n    return sqrt(p * (p - a) * (p - b) * (p - c));\n\
    }", "{\n    bool good = false;\n    float answer = -1;\n    float s = -1;\n  \
    \  float halfs = -1;\n    float area = -1;\n    Tuple!(long, long, long) tup =\
    \ tuple(a, b, c);\n    writeln(tup);\n    if(a > 0 && b > 0 && c > 0)\n    {\n\
    \        if((a + b) > c)\n        {\n            if((a + c) > b)\n           \
    \ {\n                if((b + c) > a)\n                {\n                    good\
    \ = true;\n                }\n            }\n        }\n    }\n    writeln(good);\n\
    \    if(good)\n    {\n        s = cast(float)(a + b + c) / 2;\n        halfs =\
    \ s * (s - a) * (s - b) * (s - c);\n        area = std.math.sqrt(halfs);\n   \
    \     return area;\n    }\n    return answer;\n}", "{\n    long max_side = max(a,b,c);\n\
    \    if (max_side == a && a >= b + c)\n        return -1.0;\n    if (max_side\
    \ == b && b >= a + c)\n        return -1.0;\n    if (max_side == c && c >= a +\
    \ b)\n        return -1.0;\n    float p = (a + b + c) / 2.0;\n    return sqrt(p\
    \ * (p - a) * (p - b) * (p - c));\n}", "{\n    auto tup = tuple(a, b, c);\n  \
    \  auto tup_sorted = makeTuple(tup[$-1], tup[$-2], tup[$-3]);\n    auto s = cast(float)(tup_sorted[0]\
    \ + tup_sorted[1] + tup_sorted[2]) / 2;\n    auto area = sqrt(s * (s - tup_sorted[0])\
    \ * (s - tup_sorted[1]) * (s - tup_sorted[2]));\n    if(tup_sorted[0] >= tup_sorted[1]\
    \ + tup_sorted[2])\n        return -1.0;\n    else\n        return area;\n}",
  "{\n    float s = 0;\n    float area = 0;\n    const float MAX = float.max;\n  \
    \  float _a = float(a);\n    float _b = float(b);\n    float _c = float(c);\n\
    \    float[] temp = [_a, _b, _c];\n    sort(temp);\n    _a = temp[0];\n    _b\
    \ = temp[1];\n    _c = temp[2];\n    //writefln(\"a = %.0f b = %.0f c = %.0f\"\
    , _a, _b, _c);\n    if ((_a < 0) || (_b < 0) || (_c < 0)) return -1;\n    if ((_a\
    \ == 0) || (_b == 0) || (_c == 0)) return -1;\n    if ((_a == _b) && (_b == _c))\
    \ return sqrt(_a * _a * 3 / 4);\n    if ((_a + _b <= _c) || (_a + _c <= _b) ||\
    \ (_b + _c <= _a)) return -1;\n    s = (_a + _b + _c) / 2;\n    area = sqrt(s\
    \ * (s - _a) * (s - _b) * (s - _c));\n    if (area == 0) return 0;\n    if (area\
    \ >= MAX) return -1;\n    return area;\n}", "{\n    if(a == 0 || b == 0 || c ==\
    \ 0)\n        return -1.0;\n    if(a+b < c || a+c < b || b+c < a)\n        return\
    \ -1.0;\n    auto s = (a+b+c)/2.0;\n    auto area = sqrt(s*(s-a)*(s-b)*(s-c));\n\
    \    return area;\n}", "{ \n    float result;\n    bool validTriangle;\n    validTriangle\
    \ = ((a + b) > c && (a + c) > b && (b + c) > a);\n    if (validTriangle) {\n \
    \       auto s = (a + b + c) / 2.0;\n        result = sqrt(s * (s - a) * (s -\
    \ b) * (s - c));\n    } else {\n        result = -1.0;\n    }\n    return result;\n\
    } \n \n/*", "{\n    if(a+b>c && a+c>b && b+c>a)\n    {\n        float s=(a+b+c)/2.0;\n\
    \        float a=sqrt(s*(s-a)*(s-b)*(s-c));\n        return a;\n    }\n    else\
    \ return -1;\n}\n/*\n    Write a function named is_integer_string that accepts\
    \ a string and returns \n    true if it represents an integer value and false\
    \ otherwise.\n    Example:\n    >>> is_integer_string(\"-124L\")\n    true\n \
    \   >>> is_integer_string(\"124.01F\")\n    false\n*/", "{ \n    if (a <= 0L ||\
    \ b <= 0L || c <= 0L) return -1L;\n    if ((a + b) <= c || (a + c) <= b || (b\
    \ + c) <= a) return -1L;\n    float s = a+b+c;\n    return sqrt(s*(s-a)*(s-b)*(s-c))\
    \ / 4.0;\n}", "{\n    float s = (a + b + c) / 2.0;\n    if (s <= max(a, max(b,\
    \ c)))\n        return -1.0;\n    else\n        return sqrt(s * (s - a) * (s -\
    \ b) * (s - c));\n}", "{\n    if(a <= 0 || b <= 0 || c <= 0)\n        return -1.0;\n\
    \    \n    if(a+b <= c || a+c <= b || b+c <= a)\n        return -1.0;\n    \n\
    \    double s = (a+b+c)/2.0;\n    return sqrt(s*(s-a)*(s-b)*(s-c));\n}", "{\n\
    \    // Equilateral triangle\n    if (a == b && b == c) {\n        return (a *\
    \ a * sqrt(3)) / 4;\n    }", "{\n    if (a <= 0 || b <= 0 || c <= 0) \n      \
    \  return -1;\n    if (a + b <= c || a + c <= b || b + c <= a) \n        return\
    \ -1;\n    double s = (a + b + c) / 2.0;\n    return round(sqrt(s * (s - a) *\
    \ (s - b) * (s - c)) * 100) / 100;\n}", "{\n    static assert(a > 0 && b > 0 &&\
    \ c > 0);\n    static assert(a < long.max && b < long.max && c < long.max);\n\
    \    assert(a > 0);\n    assert(b > 0);\n    assert(c > 0);\n    if(a + b > c\
    \ && a + c > b && b + c > a)\n    {\n        auto tmp = (float)((a + b + c) /\
    \ 2);\n        float area = sqrt(tmp * (tmp - a) * (tmp - b) * (tmp - c));\n \
    \       return area;\n    }\n    else return -1;\n}", "{\n    float p = float(a\
    \ + b + c) / 2;\n    float abc = sqrt(p * (p - a) * (p - b) * (p - c));\n    return\
    \ (a + b > c && a + c > b && b + c > a) ? abc : -1;\n}", "{\n    return a <= 0\
    \ || b <= 0 || c <= 0 || a+b <= c || a+c <= b || b+c <= a ? -1.0 : \n        \
    \   2.0 * (a * b + b * c + a * c) / (a + b + c);\n}", "{\n    if(!(a+b>c && a+c>b\
    \ && b+c>a))\n        return -1;\n    auto s = cast(double)(a+b+c)/2;\n    return\
    \ sqrt(s*(s-a)*(s-b)*(s-c));\n}", "{ \n    long side_sum;\n    return ((a+b>c)&&(a+c>b)&&(b+c>a))\n\
    \        ? sqrt(pow(a,2)+pow(b,2)-pow(c,2))*b/2\n        : -1;\n}", "{ \n    float\
    \ s = (a + b + c) / 2.0;\n    float sq = sqrt(s * (s - a) * (s - b) * (s - c));\n\
    \    if (sq <= 0)\n        return -1;\n    return sq;\n}\n/*\n    Given a list\
    \ of the integer divisors of N, calculate and return\n    the sum of all the proper\
    \ divisors of N.\n    Example:\n    >>> proper_divisors(8L)\n    7L\n    >>> proper_divisors(9L)\n\
    \    4L\n    >>> proper_divisors(28L)\n    28L\n*/\nlong proper_divisors(T...)(T\
    \ N)\n{\n    static if (N.length == 0)\n        return 0;\n    else\n    {\n \
    \       long sum = 0;\n        foreach (i; 1 .. N)\n        {\n            if\
    \ (N % i == 0)\n                sum += i;\n        }\n        return sum - N;\n\
    \    }\n}\n/*\n    Given a positive integer N. Return the number of positive integers\n\
    \    less than or equal to N that have at least one digit that is a 7.\n    Example:\n\
    \    >>> sevens(1L)\n    0L\n    >>> sevens(7L)\n    1L\n    >>> sevens(17L)\n\
    \    1L\n    >>> sevens(77L)\n    7L\n    >>> sevens(777777777777L)\n    12000000000L\n\
    */\nlong sevens(long N)\n{\n    static if (N < 0)\n        return 0;\n    else\n\
    \    {\n        long sum = 0;\n        foreach (i; 1 .. N + 1)\n        {\n  \
    \          if (i.to!string.indexOf(\"7\") != -1)\n                sum++;\n   \
    \     }\n        return sum;\n    }\n}\n/*\n    Given a list of integers that\
    \ may or may not contain a number called \n    target. Return the index of target\
    \ in the list. If target is not in the\n    list return -1.\n    Example:\n  \
    \  >>> linear_search(4L, 5L, 6L,", "{\n    alias ulong = uint;", "{\n    float\
    \ perimeter = (a + b + c) / 2.0f;\n    float area = sqrt(perimeter * (perimeter\
    \ - a) * (perimeter - b) * (perimeter - c));\n    if (area <= 0)\n        return\
    \ -1.0f;\n    return area;\n}", "{ \n    if (a + b > c && b + c > a && a + c >\
    \ b)\n    {\n        float semi = (a + b + c) / 2.0;\n        return sqrt(semi\
    \ * (semi - a) * (semi - b) * (semi - c));\n    }\n    else \n    {\n        return\
    \ -1;\n    }\n    \n} \n/*\n    Write a function to sort a list of integers using\
    \ quicksort.\n    Example:\n    >>> quicksort([2, 4, 1, 3])\n    [1, 2, 3, 4]\n\
    \    \n*/\nT[] quicksort(T)(T[] list) if (is(T == int))\n{\n    return qsort(list,\
    \ 0, list.length);\n}", "{ \n    float s = (a + b + c) / 2.0;\n    if(s - a <=\
    \ 0 || s - b <= 0 || s - c <= 0)\n        return -1;\n    return sqrt(s * (s -\
    \ a) * (s - b) * (s - c));\n}", "{\n    if (a + b > c && a + c > b && b + c >\
    \ a)\n    {\n        float s = float(a + b + c) / 2;\n        return float(sqrt(s\
    \ * (s - a) * (s - b) * (s - c)));\n    }\n    return -1;\n}", "{\n    auto S\
    \ = (a + b + c) / 2.0f;\n    return S < a || S < b || S < c ? -1.0f : sqrt(S *\
    \ (S - a) * (S - b) * (S - c));\n}\n/*\n    Given a number n, construct a triangle\
    \ with sides 1 through n. \n    Here are some examples:\n    >>> triangle(1)\n\
    \    [1]\n    >>> triangle(2)\n    [1, 1, 1]\n    >>> triangle(3)\n    [1, 1,\
    \ 1, 1, 2, 1]\n    >>> triangle(4)\n    [1, 1, 1, 1, 2, 1, 1, 3, 3, 1]\n*/\nsize_t[size_t]\
    \ triangle(size_t n)\n{\n    if (n == 0)\n        return [];\n    auto triangle\
    \ = [](auto n, size_t[size_t] T)\n    {\n        if (n == 0)\n            return\
    \ T;\n        return triangle(n - 1, [1 .. n + 1] ~ T);\n    };\n    return triangle(n,\
    \ [1]);\n}\n/*\n    Given an array of integers and a positive number n, find all\
    \ elements n.\n    that are nth power of their indices.\n    >>> nthPower([1,\
    \ 2, 3, 4], 2)\n    [1, 4]\n    >>> nthPower([1, 2, 3, 4], 3)\n    [1]\n    >>>\
    \ nthPower([1, 2, 3, 4], 5)\n    []\n*/\nsize_t[] nthPower(int[] arr, size_t n)\n\
    {\n    auto power = [](auto i, auto n)\n    {\n        auto pow = 1;\n       \
    \ for (; n > 0; n--)\n            pow *= i;\n        return pow;\n    };\n   \
    \ return arr.filter!(i => i == power(arr.indexOf(i), n)).dup;\n}\n/*\n    Given\
    \ an array of integers, find a pair of numbers (one from the first array, \n \
    \   one from the second array) that would add up to the given sum. Return indices",
  "{\n    if ((a + b) > c && (a + c) > b && (b + c) > a)\n    {\n        return 0.5\
    \ * a * b;\n    } else\n    {\n        return -1;\n    }\n}", "{\n    // Insert\
    \ code here\n    if(a < 0 || b < 0 || c < 0)\n        return -1;\n    if((a +\
    \ b) <= c || (a + c) <= b || (b + c) <= a)\n        return -1;\n    auto s = (a\
    \ + b + c) / 2.0;\n    return sqrt(s * (s - a) * (s - b) * (s - c));\n}", "{\n\
    \    if (a + b > c)\n    {\n        //Use Heron's formula\n        double p =\
    \ (a + b + c) / 2.0;\n        return cast(float) sqrt(p * (p - a) * (p - b) *\
    \ (p - c));\n    }\n    else\n    {\n        return -1;\n    }\n}", "{\n    //\
    \ A triangle is valid if the sum of two sides is greater than the third side.\n\
    \    if (a + b > c && a + c > b && b + c > a)\n    {\n        // Heron's formula\
    \ is used to calculate the area of a triangle given the lengths of the sides.\n\
    \        float s = (a + b + c) / 2.0;\n        float area = float(sqrt(s * (s\
    \ - a) * (s - b) * (s - c)));\n        return area;\n    }\n    else\n    {\n\
    \        return -1.0;\n    }\n}", "{\n    const float f = a + b + c;\n    if (f\
    \ <= 0) return -1;\n    const float s = f / 2;\n    const float t = s * (s - a)\
    \ * (s - b) * (s - c);\n    if (t <= 0) return -1;\n    return sqrt(t);\n}", "{\n\
    \    if(a+b > c && a+c > b && b+c > a)\n    {\n        float s = (a+b+c)/2.0;\n\
    \        float area = sqrt(s*(s-a)*(s-b)*(s-c));\n        return float(area);\n\
    \    }\n    else\n    {\n        return -1;\n    }\n}", "{\n    if (a <= 0L ||\
    \ b <= 0L || c <= 0L) \n        return -1;\n    if (a+b <= c || a+c <= b || b+c\
    \ <= a) \n        return -1;\n    auto s = (a+b+c)/2.0;\n    return cast(float)\
    \ sqrt(s*(s-a)*(s-b)*(s-c));\n}", "{\n    if (a + b > c && a + c > b && b + c\
    \ > a)\n    {\n        auto p = (a + b + c) / 2.0;\n        return sqrt(p * (p\
    \ - a) * (p - b) * (p - c));\n    }\n    return -1.0;\n}", "{\n    if(a + b >\
    \ c && a + c > b && b + c > a)\n    {\n        float s = (a + b + c) / 2.0;\n\
    \        return sqrt(s * (s - a) * (s - b) * (s - c));\n    }\n    return -1.0;\n\
    }\n/*\n    Given a list of n numbers. Check if there are any two numbers in the\
    \ list that add up to 9. \n    Return True if 9 can be formed using two elements\
    \ from the list, else return False.\n    Example:\n    >>> sum_of_nine([2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10])\n    True\n    >>> sum_of_nine([2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11])\n    False\n*/", "{\n    // typecheck\n    if(a <= 0L || b <= 0L\
    \ || c <= 0L) return -1;\n    // triangle inequality\n    if(a + b <= c || a +\
    \ c <= b || b + c <= a) return -1;\n    // Heron's formula\n    auto s = cast(double)(a\
    \ + b + c) / 2;\n    auto area = sqrt(s * (s - a) * (s - b) * (s - c));\n    return\
    \ cast(float)(round(area * 100.0) / 100.0);\n}", "{\n    // a, b, c is the side\
    \ of the triangle\n    return -1.0;\n}", "{\n  if (a < 0 || b < 0 || c < 0) \n\
    \    return -1;\n  if (a + b > c && a + c > b && b + c > a)\n    return float(a\
    \ * b / 2);\n  return -1;\n}\n/*\n    You are given a list of students. Each student\
    \ has their own name and a \n    list of exam grades. The exam grades are given\
    \ as a list of tuples.\n    [(subject_name, subject_grade), ...]\n    Return the\
    \ name of the student that has the best average grade.\n    Example:\n    >>>\
    \ best_avg_student([\n    (\"Rado\", [2, 5, 5, 5, 3, 5, 2, 2, 3]),\n    (\"Ivo\"\
    , [2, 4, 5, 5, 4, 3, 3, 4, 5]),\n    (\"Maria\", [5, 5, 5, 5, 4, 4, 3, 5, 5]),\n\
    \    (\"Ana\", [5, 5, 4, 4, 3, 4, 3, 5, 5]),\n    (\"Ivaylo\", [5, 4, 5, 5, 5,\
    \ 4, 5, 5, 5])\n    ])\n    \"Maria\"\n*/\nstring best_avg_student(List!(Tuple!(string,\
    \ List!long)) students) \n{\n  string bestName = \"\";\n  long bestSum = 0;\n\
    \  for (size_t i = 0; i < students.length; i++) \n  {\n    long sum = 0;\n   \
    \ for (size_t j = 0; j < students[i][1].length; j++) \n    {\n      sum += students[i][1][j];\n\
    \    }\n    long avg = sum / students[i][1].length;\n    if (i == 0 || avg > bestSum)\
    \ \n    {\n      bestSum = avg;\n      bestName = students[i][0];\n    }\n  }\n\
    \  return bestName;\n}\n/*\n    Write a function that takes a string and returns\
    \ the sum of the numerical\n    values of the letters in that string.\n    Examples:\n\
    \    >>> sum_of_letters(\"az\")\n    3\n    >>> sum", "{\n    if(a + b > c &&\
    \ b + c > a && a + c > b) \n    {\n        auto s = (a + b + c) / 2.0;\n     \
    \   return sqrt(s * (s - a) * (s - b) * (s - c));\n    }\n    return -1;\n}\n\
    /*\n    Given two floating point numbers, return their difference rounded to 2\
    \ decimal points.\n    Example:\n    >>> round_diff(3.123, 3.234)\n    0.11\n\
    \    >>> round_diff(4.456, 4.457)\n    0.0\n*/\nfloat round_diff(float a, float\
    \ b)\n{\n    return floor((a - b) * 100) / 100;\n}\n/*\n    Given an array of\
    \ strings, return a list of list of strings\n    with all anagrams grouped together.\
    \ For example, the input\n    ['act', 'cat', 'bat', 'tab'] would produce [['act',\
    \ 'cat'],\n    ['bat', 'tab']]. Note that order is not important.\n*/\nT[] group_anagrams(T)(T[]\
    \ data)\n{\n    auto r = data.sort;\n    return r.group;\n}\n/*\n    Given a number\
    \ 'n', write a function that generates and prints\n    all the combination of\
    \ well-formed brackets.\n    Example: \n    >>> combinations(3)\n    ((()))\n\
    \    (()())\n    (())()\n    ()(())\n    ()()()\n    >>> combinations(2)\n   \
    \ (())\n    ()()\n*/", "{\n    if (a <= 0 || b <= 0 || c <= 0) \n        return\
    \ -1;", "{\n\tfloat S, p;\n\tp = (a + b + c) / 2.0;\n\tS = sqrt(p * (p - a) *\
    \ (p - b) * (p - c));\n\tif (S > 0)\n\t\treturn S;\n\telse\n\t\treturn -1;\n}",
  "{\n    if (a + b > c && b + c > a && a + c > b)\n    {\n        double halfPerimeter\
    \ = (a + b + c) / 2.0;\n        double area = sqrt(halfPerimeter * (halfPerimeter\
    \ - a) * (halfPerimeter - b) * (halfPerimeter - c));\n        return cast(float)\
    \ area;\n    }\n    else\n    {\n        return -1;\n    }\n}", "{\n    float\
    \ result = -1.0;\n    if (a > 0 && b > 0 && c > 0)\n    {\n        if (a + b >\
    \ c && a + c > b && b + c > a)\n        {\n            auto p = (a + b + c) /\
    \ 2.0;\n            auto area = sqrt(p * (p - a) * (p - b) * (p - c));\n     \
    \       result = area;\n        }\n    }\n    return result;\n}", "{\n    float\
    \ area = 0.0;\n    if(a > 0L && b > 0L && c > 0L && (a + b > c) && (a + c > b)\
    \ && (b + c > a))\n    {\n        float p = (a + b + c) / 2.0;\n        area =\
    \ sqrt(p * (p - a) * (p - b) * (p - c));\n    }\n    else \n    {\n        area\
    \ = -1.0;\n    }\n    return area;\n}", "{\n    auto values = tuple(a, b, c);\n\
    \    sort(values);\n    return (values[0] + values[1] > values[2]) ? sqrt(values[2]\
    \ * (values[2] - values[0]) * (values[2] - values[1]) * (values[0] + values[1]\
    \ + values[2])) / 4 : -1;\n}", "{\n    alias area_t = typeof(a < b ? a : b);",
  "{\n    float area = -1L;\n    if(a <= 0 || b <= 0 || c <= 0) return area;\n   \
    \ if(a+b > c && a+c > b && b+c > a)\n    {\n        float p = (a+b+c)/2.0;\n \
    \       area = sqrt(p*(p-a)*(p-b)*(p-c));\n    }\n    return area;\n}", "{\n \
    \   long[3] lengths = [a, b, c];\n    if(a <= 0 || b <= 0 || c <= 0)\n       \
    \ return -1;\n    else\n    {\n        lengths[0] = a;\n        lengths[1] = b;\n\
    \        lengths[2] = c;\n        sort(lengths);\n        if(lengths[0] + lengths[1]\
    \ <= lengths[2])\n            return -1;\n        else\n        {\n          \
    \  float s = (a + b + c) / 2;\n            return sqrt(s * (s - a) * (s - b) *\
    \ (s - c));\n        }\n    }\n}", "{\n    float s;\n    float area;\n    if (a\
    \ < 0 || b < 0 || c < 0)\n        return -1;\n    s = (a + b + c) / 2.0;\n   \
    \ area = sqrt(s * (s - a) * (s - b) * (s - c));\n    return area;\n}", "{\n  \
    \  auto valid = a > 0L && b > 0L && c > 0L && a + b > c && a + c > b && b + c\
    \ > a;\n    if (valid)\n    {\n        float s = (a + b + c) / 2.0f;\n       \
    \ float A = (s * (s - a) * (s - b) * (s - c));\n        return sqrt(A);\n    }\n\
    \    return -1.0f;\n}", "{\n    long a2 = a*a;\n    long b2 = b*b;\n    long c2\
    \ = c*c;\n    auto s = (a+b+c)/2.0;\n    auto area = sqrt(s*(s-a)*(s-b)*(s-c));\n\
    \    return (a+b>c && a+c>b && b+c>a) ? area : -1.0;\n}", "{\n    enum float s\
    \ = (a + b + c) / 2.0;\n    float area = sqrt(s * (s - a) * (s - b) * (s - c));\n\
    \    return area < 0 ? -1.0 : area;\n}", "{\n    float s = (a + b + c) / 2.0;\n\
    \    float area = (s*(s-a)*(s-b)*(s-c));\n    float result = -1;\n    if (a +\
    \ b > c && a + c > b && b + c > a)\n    {\n        result = sqrt(area);\n    }\n\
    \    return result;\n}", "{\n    float s = (a + b + c) / 2;\n    float area =\
    \ sqrt(s * (s - a) * (s - b) * (s - c));\n    return isNaN(area) ? -1 : round(area\
    \ * 100) / 100;\n}\n#endif", "{\n    float s;\n    if (a+b > c && a+c > b && b+c\
    \ > a)\n    {\n        s = (a+b+c)/2.0;\n        return sqrt(s*(s-a)*(s-b)*(s-c));\n\
    \    }\n    else\n    {\n        return -1.0;\n    }\n    \n}", "{\n    if (a\
    \ + b > c && a + c > b && b + c > a) \n    {\n        auto s = (a + b + c) / 2.0;\n\
    \        return sqrt(s * (s - a) * (s - b) * (s - c));\n    }\n    return -1;\n\
    }", "{\n    if ( (a + b > c) && (a + c > b) && (b + c > a) )\n    {\n        float\
    \ s = (a + b + c) / 2.0;\n        float area = sqrt(s * (s - a) * (s - b) * (s\
    \ - c));\n        return area;\n    }\n    else\n    {\n        return -1;\n \
    \   }\n}", "{\n    if (a < 0 || b < 0 || c < 0) \n        return -1.0;\n    if\
    \ ((a + b <= c) || (a + c <= b) || (b + c <= a)) \n        return -1.0;\n    auto\
    \ p = (a + b + c) / 2.0;\n    return sqrt(p * (p - a) * (p - b) * (p - c));\n}",
  "{\n    float s = (a + b + c) / 2;\n    float area = sqrt(s * (s - a) * (s - b)\
    \ * (s - c));\n    return floor(area * 100) / 100;\n}", "{\n    float result;\n\
    \    if (a < 1 || b < 1 || c < 1)\n        return -1.0;\n    if (a + b <= c ||\
    \ a + c <= b || b + c <= a)\n        return -1.0;\n    else\n    {\n        long\
    \ p = (a + b + c) / 2;\n        result = sqrt(p * (p - a) * (p - b) * (p - c));\n\
    \        return result;\n    }\n}", "{\n    float s = (a + b + c) / 2.0;\n   \
    \ //If a, b, c do not form a valid triangle, return -1\n    if (a + b <= c ||\
    \ a + c <= b || b + c <= a)\n        return -1.0;\n    return sqrt(s * (s - a)\
    \ * (s - b) * (s - c));\n}", "{\n    float p = 0;\n    bool valid_triangle = false;\n\
    \    valid_triangle = a > 0 && b > 0 && c > 0 ? true : false;\n    valid_triangle\
    \ = (a + b) > c ? true : false;\n    valid_triangle = (a + c) > b ? true : false;\n\
    \    valid_triangle = (b + c) > a ? true : false;\n    if (valid_triangle) {\n\
    \        p = a + b + c;\n        p /= 2;\n        return sqrt(p * (p - a) * (p\
    \ - b) * (p - c));\n    }\n    return -1;\n}", "{\n\tif (a + b > c && a + c >\
    \ b && b + c > a)\n    {\n\t\treturn (0.5 * a * b).approximate(1, float.roundNearestTiesToEven);\n\
    \t}\n\treturn -1.0;\n}", "{\n    float result = 0.0;\n    if(a + b > c && a +\
    \ c > b && b + c > a) {\n        float p = (a + b + c) / 2.0;\n        result\
    \ = sqrt(p * (p - a) * (p - b) * (p - c));\n    } else {\n        result = -1.0;\n\
    \    }\n    return result;\n}", "{\n    auto tuple = tuple(a, b, c);\n    auto\
    \ sides = sort(tuple);\n    a = sides[0];\n    b = sides[1];\n    c = sides[2];\n\
    \    return (a + b > c) ? \n        float(a * b * sin(float(acos(a / c)) / 2))\
    \ / 2 : \n        -1.0;\n}", "{\n    float s = (a + b + c) / 2;\n    float area\
    \ = sqrt(s * (s - a) * (s - b) * (s - c));\n    return (area < 0) ? -1 : area;\n\
    }", "{\n    if (a < 0 || b < 0 || c < 0)\n        return -1;\n    if (a == 0 ||\
    \ b == 0 || c == 0)\n        return -1;\n    if (a + b < c)\n        return -1;\n\
    \    if (a + c < b)\n        return -1;\n    if (b + c < a)\n        return -1;\n\
    \    double s = (a + b + c) / 2.0;\n    double area = sqrt(s * (s - a) * (s -\
    \ b) * (s - c));\n    area = floor(area * 100) / 100;\n    return area;\n}", "{\n\
    \    float s = (a + b + c) / 2.0;\n    if (s == 0)\n        return -1;\n    return\
    \ floor(sqrt(s * (s - a) * (s - b) * (s - c)) * 100) / 100;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
