{
  "language": "d",
  "name": "HumanEval_92_any_int",
  "results": [
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    return ( is(typeof(x + y + z) == int) && \n            ( (x + y == z) || \n              (x + z == y) || \n              (y + z == x) ) );\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp3b0opp10.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427e95]\n??:? void tmp3b0opp10.__unittest_L33_C1() [0x427a38]\n??:? void tmp3b0opp10.__modtest() [0x427c14]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbbb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa4e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbe1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430090]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb6d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa25]\n??:? runModuleUnitTests [0x42b991]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282e4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163985
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    if (x == y+z || y == x+z || z == x+y) \n    {\n        return true;\n    }\n    else \n    {\n        return false;\n    }\n}\n/*\n    Find max and min values for a given array of integers.\n    Returns a tuple of two values (max, min).\n    \n    Examples\n    >>> min_max([5L, 6L, 7L, 8L, 1L, 0L])\n    tuple(8L, 0L)\n    \n    >>> min_max([-5L, 6L, 7L, 8L, 1L, 0L])\n    tuple(8L, -5L)\n    \n    >>> min_max([1L, 1L, 1L, 1L, 1L, 1L])\n    tuple(1L, 1L)\n    \n    >>> min_max([])\n    tuple(0L, 0L)\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp375s9e68.d(37): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp375s9e68.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163984
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    if (is(typeof(x) == int) && is(typeof(y) == int) && is(typeof(z) == int))\n    {\n        if (x + y == z || x + z == y || y + z == x)\n        {\n            return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpseiuuv20.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x427e95]\n??:? void tmpseiuuv20.__unittest_L37_C1() [0x427a38]\n??:? void tmpseiuuv20.__modtest() [0x427c14]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbbb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa4e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbe1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430090]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb6d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa25]\n??:? runModuleUnitTests [0x42b991]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282e4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163985
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    if(x.isNaN || y.isNaN || z.isNaN || x.isInfinity || y.isInfinity || z.isInfinity)\n    {\n        return false;\n    }\n    return (x == y + z || y == x + z || z == x + y);\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpujlkvod9.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42804d]\n??:? void tmpujlkvod9.__unittest_L34_C1() [0x427bf4]\n??:? void tmpujlkvod9.__modtest() [0x427dd0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bd73]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ac06]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fd99]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430248]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fd25]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42abdd]\n??:? runModuleUnitTests [0x42bb49]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42849c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163985
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    if(is(typeof(x) == int) && is(typeof(y) == int) && is(typeof(z) == int))\n    {\n        if(x == y + z || x == y - z || x == z - y)\n        {\n            return true;\n        }\n        else if(y == x + z || y == x - z || y == z - x)\n        {\n            return true;\n        }\n        else if(z == x + y || z == x - y || z == y - x)\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n    else\n    {\n        return false;\n    }\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsrugo5if.d(56): unittest failure\n----------------\n??:? _d_unittestp [0x427e95]\n??:? void tmpsrugo5if.__unittest_L52_C1() [0x427a38]\n??:? void tmpsrugo5if.__modtest() [0x427c14]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbbb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa4e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbe1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430090]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb6d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa25]\n??:? runModuleUnitTests [0x42b991]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282e4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163985
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    // return true if x + y == z or y + z == x or x + z == y and all are integers\n    return is(typeof(x) == long) && is(typeof(y) == long) && is(typeof(z) == long)\n           && (x + y == z || y + z == x || x + z == y);\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpq15nuqop.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e95]\n??:? void tmpq15nuqop.__unittest_L32_C1() [0x427a38]\n??:? void tmpq15nuqop.__modtest() [0x427c14]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbbb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa4e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbe1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430090]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb6d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa25]\n??:? runModuleUnitTests [0x42b991]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282e4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163985
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    return (((int)x + (int)y == (int)z) || ((int)x + (int)z == (int)y) || ((int)y + (int)z == (int)x)) && x.is_integer && y.is_integer && z.is_integer;\n    \n}\n \n \nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp5sqt912m.d(28): Error: C style cast illegal, use `cast(int)x`\n/tmp/tmp5sqt912m.d(28): Error: C style cast illegal, use `cast(int)y`\n/tmp/tmp5sqt912m.d(28): Error: C style cast illegal, use `cast(int)z`\n/tmp/tmp5sqt912m.d(28): Error: C style cast illegal, use `cast(int)x`\n/tmp/tmp5sqt912m.d(28): Error: C style cast illegal, use `cast(int)z`\n/tmp/tmp5sqt912m.d(28): Error: C style cast illegal, use `cast(int)y`\n/tmp/tmp5sqt912m.d(28): Error: C style cast illegal, use `cast(int)y`\n/tmp/tmp5sqt912m.d(28): Error: C style cast illegal, use `cast(int)z`\n/tmp/tmp5sqt912m.d(28): Error: C style cast illegal, use `cast(int)x`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5sqt912m.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163984
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n  \n  long one = x, two = y, three = z;\n  return any_int(one, two, three);\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpsc5cek8v.d(29): Error: cannot implicitly convert expression `x` of type `float` to `long`\n/tmp/tmpsc5cek8v.d(29): Error: cannot implicitly convert expression `y` of type `float` to `long`\n/tmp/tmpsc5cek8v.d(29): Error: cannot implicitly convert expression `z` of type `float` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsc5cek8v.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163984
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    \n    if (int(x) == int(y) + int(z) || int(y) == int(x) + int(z) || int(z) == int(x) + int(y))\n        return true;\n    else\n        return false;\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpmo2cex4m.d(29): Error: cannot implicitly convert expression `x` of type `float` to `int`\n/tmp/tmpmo2cex4m.d(29): Error: cannot implicitly convert expression `y` of type `float` to `int`\n/tmp/tmpmo2cex4m.d(29): Error: cannot implicitly convert expression `z` of type `float` to `int`\n/tmp/tmpmo2cex4m.d(29): Error: cannot implicitly convert expression `y` of type `float` to `int`\n/tmp/tmpmo2cex4m.d(29): Error: cannot implicitly convert expression `x` of type `float` to `int`\n/tmp/tmpmo2cex4m.d(29): Error: cannot implicitly convert expression `z` of type `float` to `int`\n/tmp/tmpmo2cex4m.d(29): Error: cannot implicitly convert expression `z` of type `float` to `int`\n/tmp/tmpmo2cex4m.d(29): Error: cannot implicitly convert expression `x` of type `float` to `int`\n/tmp/tmpmo2cex4m.d(29): Error: cannot implicitly convert expression `y` of type `float` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmo2cex4m.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163984
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    float sum = x + y + z;\n    return cast(bool)sum % 1;\n}\n/*\n    \n    \n    \n    \n*/\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpjrvzddyf.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x427ec5]\n??:? void tmpjrvzddyf.__unittest_L37_C1() [0x427a68]\n??:? void tmpjrvzddyf.__modtest() [0x427c44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300c0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb9d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa55]\n??:? runModuleUnitTests [0x42b9c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428314]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163985
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    if(is(typeof(x) == int) && is(typeof(y) == int) && is(typeof(z) == int))\n    {\n        return (z == x + y) || (y == x + z) || (x == y + z);\n    }\n    else\n    {\n        return false;\n    }\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvf9rnnzc.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x427e95]\n??:? void tmpvf9rnnzc.__unittest_L37_C1() [0x427a38]\n??:? void tmpvf9rnnzc.__modtest() [0x427c14]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbbb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa4e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbe1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430090]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb6d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa25]\n??:? runModuleUnitTests [0x42b991]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282e4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163985
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    return x == y + z || x == y - z || x == z - y;\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpaihu6a0w.d(274): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaihu6a0w.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163984
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    \n    if (is(typeof(x) == int) && is(typeof(y) == int) && is(typeof(z) == int))\n    {\n        return  x == y + z || y == x + z || z == x + y;\n    }\n    else return false;\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpjbcurb1t.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x427e95]\n??:? void tmpjbcurb1t.__unittest_L35_C1() [0x427a38]\n??:? void tmpjbcurb1t.__modtest() [0x427c14]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbbb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa4e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbe1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430090]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb6d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa25]\n??:? runModuleUnitTests [0x42b991]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282e4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163985
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    if (x + y == z) return true;\n    if (x + z == y) return true;\n    if (y + z == x) return true;\n    return false;\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp302y98cm.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x427ed5]\n??:? void tmp302y98cm.__unittest_L33_C1() [0x427adc]\n??:? void tmp302y98cm.__modtest() [0x427c54]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbfb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa8e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa65]\n??:? runModuleUnitTests [0x42b9d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428324]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163985
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n  if (is(typeof(x+y) == int) && is(typeof(x+z) == int) && is(typeof(y+z) == int))\n    return true;\n  else\n    return false;\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmplmsmyf2f.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427e95]\n??:? void tmplmsmyf2f.__unittest_L33_C1() [0x427a38]\n??:? void tmplmsmyf2f.__modtest() [0x427c14]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbbb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa4e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbe1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430090]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb6d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa25]\n??:? runModuleUnitTests [0x42b991]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282e4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163985
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    if (((x + y) == z || (x + z) == y || (y + z) == x) &&\n    is(typeof(x) == int) &&\n    is(typeof(y) == int) &&\n    is(typeof(z) == int))\n        return true;\n    else\n        return false;\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpcw3b8jd1.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e95]\n??:? void tmpcw3b8jd1.__unittest_L36_C1() [0x427a38]\n??:? void tmpcw3b8jd1.__modtest() [0x427c14]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbbb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa4e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbe1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430090]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb6d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa25]\n??:? runModuleUnitTests [0x42b991]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282e4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163985
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    //return (x + y == z || x + z == y || y + z == x) && x == int(x) && y == int(y) && z == int(z);\n    auto t = tuple(x, y, z);\n    //std.algorithm.find!((tuple(float, float, float) t) => (t[0] + t[1] == t[2] || t[0] + t[2] == t[1] || t[1] + t[2] == t[0]) && t[0] == int(t[0]) && t[1] == int(t[1]) && t[2] == int(t[2]))(t);\n    return (x + y == z || x + z == y || y + z == x) && x == to!int(x) && y == to!int(y) && z == to!int(z);\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8lb_p4ws.d(31): Error: template instance `to!int` template `to` is not defined, did you mean t?\n/tmp/tmp8lb_p4ws.d(31): Error: template instance `to!int` template `to` is not defined, did you mean t?\n/tmp/tmp8lb_p4ws.d(31): Error: template instance `to!int` template `to` is not defined, did you mean t?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8lb_p4ws.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163984
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    bool A = int(x) == int(y) + int(z);\n    bool B = int(y) == int(x) + int(z);\n    bool C = int(z) == int(x) + int(y);\n    return A || B || C;\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpm_qthhx1.d(28): Error: cannot implicitly convert expression `x` of type `float` to `int`\n/tmp/tmpm_qthhx1.d(28): Error: cannot implicitly convert expression `y` of type `float` to `int`\n/tmp/tmpm_qthhx1.d(28): Error: cannot implicitly convert expression `z` of type `float` to `int`\n/tmp/tmpm_qthhx1.d(29): Error: cannot implicitly convert expression `y` of type `float` to `int`\n/tmp/tmpm_qthhx1.d(29): Error: cannot implicitly convert expression `x` of type `float` to `int`\n/tmp/tmpm_qthhx1.d(29): Error: cannot implicitly convert expression `z` of type `float` to `int`\n/tmp/tmpm_qthhx1.d(30): Error: cannot implicitly convert expression `z` of type `float` to `int`\n/tmp/tmpm_qthhx1.d(30): Error: cannot implicitly convert expression `x` of type `float` to `int`\n/tmp/tmpm_qthhx1.d(30): Error: cannot implicitly convert expression `y` of type `float` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm_qthhx1.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163984
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n    //@ requires true;\n    //@ ensures true;\n{\n    float f = x + y;\n    int i = (int) f;\n    if (f == i) {\n        return true;\n    }\n    f = x + z;\n    i = (int) f;\n    if (f == i) {\n        return true;\n    }\n    f = y + z;\n    i = (int) f;\n    if (f == i) {\n        return true;\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp659s4_dx.d(31): Error: C style cast illegal, use `cast(int)f`\n/tmp/tmp659s4_dx.d(36): Error: C style cast illegal, use `cast(int)f`\n/tmp/tmp659s4_dx.d(41): Error: C style cast illegal, use `cast(int)f`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp659s4_dx.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163984
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n    if(is(typeof(x) == int) && is(typeof(y) == int) && is(typeof(z) == int))\n        if((x == y + z) || (y == x + z) || (z == x + y))\n            return true;\n        else \n            return false;\n    else \n        return false;\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpv7kie9cr.d(27): Error: cannot use function constraints for non-template functions. Use `static if` instead\n/tmp/tmpv7kie9cr.d(27): Error: declaration expected, not `if`\n/tmp/tmpv7kie9cr.d(30): Error: declaration expected, not `else`\n/tmp/tmpv7kie9cr.d(32): Error: declaration expected, not `else`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv7kie9cr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163984
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    if(modf(x,0) != 0 || modf(y,0) != 0 || modf(z,0) != 0)\n    {\n        return false;\n    }\n    else if(x == y + z || y == x + z || z == x + y)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7r7qrtsc.d(28): Error: function `std.math.modf(real x, ref real i)` is not callable using argument types `(float, int)`\n/tmp/tmp7r7qrtsc.d(28):        cannot pass rvalue argument `0` of type `int` to parameter `ref real i`\n/tmp/tmp7r7qrtsc.d(28): Error: function `std.math.modf(real x, ref real i)` is not callable using argument types `(float, int)`\n/tmp/tmp7r7qrtsc.d(28):        cannot pass rvalue argument `0` of type `int` to parameter `ref real i`\n/tmp/tmp7r7qrtsc.d(28): Error: function `std.math.modf(real x, ref real i)` is not callable using argument types `(float, int)`\n/tmp/tmp7r7qrtsc.d(28):        cannot pass rvalue argument `0` of type `int` to parameter `ref real i`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7r7qrtsc.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163985
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    if (is(typeof(x) == int) && is(typeof(y) == int) && is(typeof(z) == int)) {\n        return x == y + z || y == x + z || z == x + y;\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpuvwi8twy.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427e95]\n??:? void tmpuvwi8twy.__unittest_L33_C1() [0x427a38]\n??:? void tmpuvwi8twy.__modtest() [0x427c14]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbbb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa4e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbe1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430090]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb6d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa25]\n??:? runModuleUnitTests [0x42b991]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282e4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163985
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    // your code here\n   \n    if (fabs(x-y) == z || fabs(x-z) == y || fabs(y-z) == x)\n        return true;\n    else\n        return false;\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpn08ergnl.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x427f45]\n??:? void tmpn08ergnl.__unittest_L35_C1() [0x427b50]\n??:? void tmpn08ergnl.__modtest() [0x427cc8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc8f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab22]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fcb5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430164]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc41]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aaf9]\n??:? runModuleUnitTests [0x42ba65]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428394]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163985
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    return (x+y==z || x+z==y || y+z==x) && is(typeof(x) == int && typeof(y) == int && typeof(z) == int);\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpma9ufcec.d(28): Error: found `&&` when expecting `)`\n/tmp/tmpma9ufcec.d(28): Error: found `typeof` when expecting `;` following `return` statement\n/tmp/tmpma9ufcec.d(28): Error: found `&&` when expecting `.` following int\n/tmp/tmpma9ufcec.d(28): Error: found `typeof` when expecting identifier following `int`.\n/tmp/tmpma9ufcec.d(28): Error: found `==` when expecting `;` following statement\n/tmp/tmpma9ufcec.d(28): Error: no identifier for declarator `int`\n/tmp/tmpma9ufcec.d(28): Error: found `)` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpma9ufcec.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163984
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    if (is(typeof(x) == int) && is(typeof(y) == int) && is(typeof(z) == int))\n    {\n        if (x == y + z || y == x + z || z == x + y)\n        {\n            return true;\n        }\n        else \n        {\n            return false;\n        }\n    }\n    else \n    {\n        return false;\n    }\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpcmyh4fg1.d(48): unittest failure\n----------------\n??:? _d_unittestp [0x427e95]\n??:? void tmpcmyh4fg1.__unittest_L44_C1() [0x427a38]\n??:? void tmpcmyh4fg1.__modtest() [0x427c14]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbbb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa4e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbe1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430090]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb6d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa25]\n??:? runModuleUnitTests [0x42b991]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282e4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163985
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    if (is(typeof(x) == int) && is(typeof(y) == int) && is(typeof(z) == int))\n    {\n        if (x == y + z || y == x + z || z == x + y)\n        {\n            return true;\n        }\n        else \n        {\n            return false;\n        }\n    }\n    else\n    {\n        return false;\n    }\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpaj3jyv37.d(48): unittest failure\n----------------\n??:? _d_unittestp [0x427e95]\n??:? void tmpaj3jyv37.__unittest_L44_C1() [0x427a38]\n??:? void tmpaj3jyv37.__modtest() [0x427c14]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbbb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa4e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbe1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430090]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb6d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa25]\n??:? runModuleUnitTests [0x42b991]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282e4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163985
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    bool areIntegers = (is(typeof(x)) == is(typeof(int)) && is(typeof(y)) == is(typeof(int)) && is(typeof(z)) == is(typeof(int)));\n    bool areIntegers2 = (is(typeof(x)) == is(typeof(uint)) && is(typeof(y)) == is(typeof(uint)) && is(typeof(z)) == is(typeof(uint)));\n    bool areIntegers3 = (is(typeof(x)) == is(typeof(long)) && is(typeof(y)) == is(typeof(long)) && is(typeof(z)) == is(typeof(long)));\n    if ((x == y + z) || (y == x + z) || (z == x + y) && (areIntegers || areIntegers2 || areIntegers3))\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpdwaidnl5.d(28): Error: found `)` when expecting `.` following int\n/tmp/tmpdwaidnl5.d(28): Error: found `)` when expecting identifier following `int`.\n/tmp/tmpdwaidnl5.d(28): Error: found `)` when expecting `.` following int\n/tmp/tmpdwaidnl5.d(28): Error: found `)` when expecting identifier following `int`.\n/tmp/tmpdwaidnl5.d(28): Error: found `)` when expecting `.` following int\n/tmp/tmpdwaidnl5.d(28): Error: found `)` when expecting identifier following `int`.\n/tmp/tmpdwaidnl5.d(28): Error: found `;` when expecting `)`\n/tmp/tmpdwaidnl5.d(29): Error: found `bool` when expecting `)`\n/tmp/tmpdwaidnl5.d(29): Error: found `=` when expecting `)`\n/tmp/tmpdwaidnl5.d(29): Error: found `)` when expecting `.` following uint\n/tmp/tmpdwaidnl5.d(29): Error: found `)` when expecting identifier following `uint`.\n/tmp/tmpdwaidnl5.d(29): Error: found `)` when expecting `.` following uint\n/tmp/tmpdwaidnl5.d(29): Error: found `)` when expecting identifier following `uint`.\n/tmp/tmpdwaidnl5.d(29): Error: found `)` when e",
      "stdout": "",
      "timestamp": 1660163984
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    assert(0);\n    return false;\n}\n// test cases\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpqzljxsid.d(28): Assertion failure\n----------------\n??:? _d_assertp [0x427ea5]\n??:? bool tmpqzljxsid.any_int(float, float, float) [0x427a34]\n??:? void tmpqzljxsid.__unittest_L32_C1() [0x427a65]\n??:? void tmpqzljxsid.__modtest() [0x427c58]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bcaf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab42]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fcd5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430184]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc61]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab19]\n??:? runModuleUnitTests [0x42ba85]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "stdout": "",
      "timestamp": 1660163985
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    real[3] xyz = [x, y, z];\n    real sum = std.algorithm.reduce!\"a + b\"(xyz);\n    foreach(real i; xyz)\n    {\n        if(i == sum/2 && (is(typeof(i) == long) || is(typeof(i) == int)))\n            return true;\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp0fr1lk9s.d(29): Error: undefined identifier `algorithm` in package `std`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0fr1lk9s.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163985
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n   // return bool(fmod(x,1) == 0 && fmod(y,1) == 0 && fmod(z,1) == 0 && (x + y == z || x + z == y || y + z == x));\n    if (fmod(x,1) == 0 && fmod(y,1) == 0 && fmod(z,1) == 0) {\n        if (x + y == z || x + z == y || y + z == x)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp8t8p6atd.d(48): unittest failure\n----------------\n??:? _d_unittestp [0x42801d]\n??:? void tmp8t8p6atd.__unittest_L35_C1() [0x427d87]\n??:? void tmp8t8p6atd.__modtest() [0x427d9c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bd63]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42abf6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fd89]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430238]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fd15]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42abcd]\n??:? runModuleUnitTests [0x42bb39]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42846c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163985
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    return (x == y + z || y == x + z || z == x + y);\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp9vbxpk9c.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427edd]\n??:? void tmp9vbxpk9c.__unittest_L30_C1() [0x427ae4]\n??:? void tmp9vbxpk9c.__modtest() [0x427c5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa96]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300d8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbb5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa6d]\n??:? runModuleUnitTests [0x42b9d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42832c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163985
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    return is(x == y + z) || is(y == x + z) || is(z == x + y);\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpc433av0h.d(28): Error: found `+` when expecting `)`\n/tmp/tmpc433av0h.d(28): Error: found `z` when expecting `;` following `return` statement\n/tmp/tmpc433av0h.d(28): Error: found `)` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc433av0h.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163984
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    if (isfinite(x) && isfinite(y) && isfinite(z))\n    {\n        if (x == y+z || y == x+z || z == x+y)\n        {\n            return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpe1_a0ykn.d(28): Error: undefined identifier `isfinite`, did you mean template `isFinite(X)(X x)`?\n/tmp/tmpe1_a0ykn.d(28): Error: undefined identifier `isfinite`, did you mean template `isFinite(X)(X x)`?\n/tmp/tmpe1_a0ykn.d(28): Error: undefined identifier `isfinite`, did you mean template `isFinite(X)(X x)`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe1_a0ykn.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163985
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    int tmp = x + y;\n    if (cast(int)tmp == z && is(typeof(x) == int) && is(typeof(y) == int) && is(typeof(z) == int))\n        return true;\n    tmp = x + z;\n    if (cast(int)tmp == y && is(typeof(x) == int) && is(typeof(y) == int) && is(typeof(z) == int))\n        return true;\n    tmp = y + z;\n    if (cast(int)tmp == x && is(typeof(x) == int) && is(typeof(y) == int) && is(typeof(z) == int))\n        return true;\n    return false;\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmppd3xgg2z.d(28): Error: cannot implicitly convert expression `x + y` of type `float` to `int`\n/tmp/tmppd3xgg2z.d(31): Error: cannot implicitly convert expression `x + z` of type `float` to `int`\n/tmp/tmppd3xgg2z.d(34): Error: cannot implicitly convert expression `y + z` of type `float` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppd3xgg2z.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163985
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    return (float(int(x)) == x) && (float(int(y)) == y) && (float(int(z)) == z) && (x + y == z || x + z == y || y + z == x);\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpb49685oe.d(28): Error: cannot implicitly convert expression `x` of type `float` to `int`\n/tmp/tmpb49685oe.d(28): Error: cannot implicitly convert expression `y` of type `float` to `int`\n/tmp/tmpb49685oe.d(28): Error: cannot implicitly convert expression `z` of type `float` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb49685oe.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163985
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{ \n  auto _x = int(x);\n  auto _y = int(y);\n  auto _z = int(z);\n  if (_x + _y == _z || _x + _z == _y || _y + _z == _x) {\n      return true;\n  }\n  return false;\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpvdfzkp5n.d(28): Error: cannot implicitly convert expression `x` of type `float` to `int`\n/tmp/tmpvdfzkp5n.d(29): Error: cannot implicitly convert expression `y` of type `float` to `int`\n/tmp/tmpvdfzkp5n.d(30): Error: cannot implicitly convert expression `z` of type `float` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvdfzkp5n.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163985
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    if (fmod(x, 1) != 0 || fmod(y, 1) != 0 || fmod(z, 1) != 0)\n        return false;\n    \n    if (x == y + z || y == x + z || z == x + y)\n        return true;\n    \n    return false;\n}\n \nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpnjxvf60y.d(50): unittest failure\n----------------\n??:? _d_unittestp [0x42800d]\n??:? void tmpnjxvf60y.__unittest_L37_C1() [0x427d7b]\n??:? void tmpnjxvf60y.__modtest() [0x427d90]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bd53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42abe6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fd79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430228]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fd05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42abbd]\n??:? runModuleUnitTests [0x42bb29]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42845c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163985
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    return (x == floor(x) && y == floor(y) && z == floor(z)) && \n        (x == y + z || y == x + z || z == x + y);\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp0i8vfaou.d(44): unittest failure\n----------------\n??:? _d_unittestp [0x4280dd]\n??:? void tmp0i8vfaou.__unittest_L31_C1() [0x427e47]\n??:? void tmp0i8vfaou.__modtest() [0x427e5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bf47]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42adda]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff6d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43041c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fef9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42adb1]\n??:? runModuleUnitTests [0x42bd1d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42852c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163985
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n  import std.math;\n  import std.typecons;\n  if ((long(x) == y + z) || (long(y) == x + z) || (long(z) == x + y)) {\n    return true;\n  } else {\n    return false;\n  }\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1gr5i7xv.d(30): Error: cannot implicitly convert expression `x` of type `float` to `long`\n/tmp/tmp1gr5i7xv.d(30): Error: cannot implicitly convert expression `y` of type `float` to `long`\n/tmp/tmp1gr5i7xv.d(30): Error: cannot implicitly convert expression `z` of type `float` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1gr5i7xv.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163985
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    return cast(int)x + cast(int)y == cast(int)z || cast(int)x + cast(int)z == cast(int)y || cast(int)y + cast(int)z == cast(int)x;\n}\n/*\n    Create a function that takes 1 strings and 1 numbers.\n    Returns true if the string has exactly n numbers, and false otherwise.\n    \n    Examples\n    >>> all_num(\"aeiou12345\", 5)\n    true\n    \n    >>> all_num(\"aeiou12345\", 4)\n    false\n    \n    >>> all_num(\"aeiou12345\", 6)\n    false\n    \n    >>> all_num(\"aeiou1345\", 5)\n    false\n    \n*/\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpm1p18wre.d(61): unittest failure\n----------------\n??:? _d_unittestp [0x427ed5]\n??:? void tmpm1p18wre.__unittest_L48_C1() [0x427c3f]\n??:? void tmpm1p18wre.__modtest() [0x427c54]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbfb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa8e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa65]\n??:? runModuleUnitTests [0x42b9d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428324]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163985
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    bool ret = false;\n    //@ref any_int(float, float, float)\n    if (x == y + z || y == x + z || z == x + y)\n    {\n        if (x % 1 == 0 && y % 1 == 0 && z % 1 == 0)\n        {\n            ret = true;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpppnlgwcq.d(52): unittest failure\n----------------\n??:? _d_unittestp [0x427f35]\n??:? void tmpppnlgwcq.__unittest_L39_C1() [0x427c9f]\n??:? void tmpppnlgwcq.__modtest() [0x427cb4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aaee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430130]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aac5]\n??:? runModuleUnitTests [0x42ba31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428384]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163985
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    return (x + y == z) || (x + z == y) || (y + z == x);\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpw57k_5n0.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427ecd]\n??:? void tmpw57k_5n0.__unittest_L30_C1() [0x427ad8]\n??:? void tmpw57k_5n0.__modtest() [0x427c50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300c8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fba5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa5d]\n??:? runModuleUnitTests [0x42b9c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42831c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163985
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    \n    \n    \n    \n    \n    \n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpvatgr4p8.d(26): Error: function `tmpvatgr4p8.any_int` has no `return` statement, but is expected to return a value of type `bool`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvatgr4p8.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163985
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    // TODO: implement me\n    if(x + y == z || y + z == x || x + z == y) return true;\n    return false;\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpeei9fvbp.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x427ed5]\n??:? void tmpeei9fvbp.__unittest_L32_C1() [0x427ae0]\n??:? void tmpeei9fvbp.__modtest() [0x427c58]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbfb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa8e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa65]\n??:? runModuleUnitTests [0x42b9d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428324]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163985
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    return (x == y + z || x == y - z || y == x + z || y == x - z || z == x + y || z == x - y) && is(typeof(x) == int && typeof(y) == int && typeof(z) == int);\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmprfxgaysg.d(28): Error: found `&&` when expecting `)`\n/tmp/tmprfxgaysg.d(28): Error: found `typeof` when expecting `;` following `return` statement\n/tmp/tmprfxgaysg.d(28): Error: found `&&` when expecting `.` following int\n/tmp/tmprfxgaysg.d(28): Error: found `typeof` when expecting identifier following `int`.\n/tmp/tmprfxgaysg.d(28): Error: found `==` when expecting `;` following statement\n/tmp/tmprfxgaysg.d(28): Error: no identifier for declarator `int`\n/tmp/tmprfxgaysg.d(28): Error: found `)` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprfxgaysg.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163985
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    return any_int(x as long, y as long, z as long);\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpvmny4td4.d(28): Error: found `as` when expecting `,`\n/tmp/tmpvmny4td4.d(28): Error: found `,` when expecting `.` following long\n/tmp/tmpvmny4td4.d(28): Error: found `as` when expecting `,`\n/tmp/tmpvmny4td4.d(28): Error: found `,` when expecting `.` following long\n/tmp/tmpvmny4td4.d(28): Error: found `as` when expecting `,`\n/tmp/tmpvmny4td4.d(28): Error: found `)` when expecting `.` following long\n/tmp/tmpvmny4td4.d(28): Error: found `;` when expecting identifier following `long`.\n/tmp/tmpvmny4td4.d(29): Error: found `}` when expecting `,`\n/tmp/tmpvmny4td4.d(30): Error: expression expected, not `unittest`\n/tmp/tmpvmny4td4.d(31): Error: found `{` when expecting `,`\n/tmp/tmpvmny4td4.d(32): Error: expression expected, not `alias`\n/tmp/tmpvmny4td4.d(32): Error: found `candidate` when expecting `,`\n/tmp/tmpvmny4td4.d(32): Error: expression expected, not `=`\n/tmp/tmpvmny4td4.d(32): Error: found `any_int` when expecting `,`\n/tmp/tmpvmny4td4.d(32): Error: expression expected, not `;`\n/tmp/tmpvmny4td4.d(34): Er",
      "stdout": "",
      "timestamp": 1660163985
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n\tif (is(typeof(x) == float || typeof(y) == float || typeof(z) == float))\n\t{\n\t\treturn false;\n\t}\n\telse\n\t{\n\t\treturn (x + y == z || x + z == y || y + z == x);\n\t}\n\t\n\t\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp5foj91kn.d(28): Error: found `||` when expecting `)`\n/tmp/tmp5foj91kn.d(28): Error: found `typeof` when expecting `)`\n/tmp/tmp5foj91kn.d(28): Error: found `||` when expecting `.` following float\n/tmp/tmp5foj91kn.d(28): Error: found `typeof` when expecting identifier following `float`.\n/tmp/tmp5foj91kn.d(28): Error: found `==` when expecting `;` following statement\n/tmp/tmp5foj91kn.d(28): Error: no identifier for declarator `float`\n/tmp/tmp5foj91kn.d(28): Error: found `)` instead of statement\n/tmp/tmp5foj91kn.d(32): Error: declaration expected, not `else`\n/tmp/tmp5foj91kn.d(35): Error: unrecognized declaration\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5foj91kn.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163985
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    return (int(x) == int(y + z)) || (int(y) == int(x + z)) || (int(z) == int(x + y));\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpid5t795j.d(28): Error: cannot implicitly convert expression `x` of type `float` to `int`\n/tmp/tmpid5t795j.d(28): Error: cannot implicitly convert expression `y + z` of type `float` to `int`\n/tmp/tmpid5t795j.d(28): Error: cannot implicitly convert expression `y` of type `float` to `int`\n/tmp/tmpid5t795j.d(28): Error: cannot implicitly convert expression `x + z` of type `float` to `int`\n/tmp/tmpid5t795j.d(28): Error: cannot implicitly convert expression `z` of type `float` to `int`\n/tmp/tmpid5t795j.d(28): Error: cannot implicitly convert expression `x + y` of type `float` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpid5t795j.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163985
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n\tif (int(x) == int(y) + int(z) || int(y) == int(x) + int(z) || int(z) == int(x) + int(y)) {\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpehkvehvi.d(28): Error: cannot implicitly convert expression `x` of type `float` to `int`\n/tmp/tmpehkvehvi.d(28): Error: cannot implicitly convert expression `y` of type `float` to `int`\n/tmp/tmpehkvehvi.d(28): Error: cannot implicitly convert expression `z` of type `float` to `int`\n/tmp/tmpehkvehvi.d(28): Error: cannot implicitly convert expression `y` of type `float` to `int`\n/tmp/tmpehkvehvi.d(28): Error: cannot implicitly convert expression `x` of type `float` to `int`\n/tmp/tmpehkvehvi.d(28): Error: cannot implicitly convert expression `z` of type `float` to `int`\n/tmp/tmpehkvehvi.d(28): Error: cannot implicitly convert expression `z` of type `float` to `int`\n/tmp/tmpehkvehvi.d(28): Error: cannot implicitly convert expression `x` of type `float` to `int`\n/tmp/tmpehkvehvi.d(28): Error: cannot implicitly convert expression `y` of type `float` to `int`\n",
      "stdout": "",
      "timestamp": 1660163985
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    return is(int a,x) && is(int b,y) && is(int c,z) && ((a == b + c) || (b == a + c) || (c == a + b));\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpmmcjnv18.d(28): Error: found `,` when expecting `)`\n/tmp/tmpmmcjnv18.d(28): Error: found `x` when expecting `;` following `return` statement\n/tmp/tmpmmcjnv18.d(28): Error: found `)` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmmcjnv18.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163985
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    bool x_int = (int)x == x;\n    bool y_int = (int)y == y;\n    bool z_int = (int)z == z;\n    return (x_int && y_int && z_int) && ((x + y == z) || (x + z == y) || (y + z == x));\n}\n// 3rd party solution\n//#include <cmath>\n//bool any_int(float x, float y, float z) {\n//  return std::isnormal(x) && std::isnormal(y) && std::isnormal(z) &&\n//    std::abs(x) < std::numeric_limits<int>::max() &&\n//    std::abs(y) < std::numeric_limits<int>::max() &&\n//    std::abs(z) < std::numeric_limits<int>::max() &&\n//    (int)x + (int)y == (int)z ||\n//    (int)x + (int)z == (int)y ||\n//    (int)y + (int)z == (int)x;\n//}\n//\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp72f6zu44.d(28): Error: C style cast illegal, use `cast(int)x`\n/tmp/tmp72f6zu44.d(29): Error: C style cast illegal, use `cast(int)y`\n/tmp/tmp72f6zu44.d(30): Error: C style cast illegal, use `cast(int)z`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp72f6zu44.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163985
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    float sum = x + y + z;\n    return ( ((sum == x) && (is_integer(y) && is_integer(z))) ||\n             ((sum == y) && (is_integer(x) && is_integer(z))) ||\n             ((sum == z) && (is_integer(x) && is_integer(y))) );\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnmcygwl4.d(29): Error: undefined identifier `is_integer`\n/tmp/tmpnmcygwl4.d(29): Error: undefined identifier `is_integer`\n/tmp/tmpnmcygwl4.d(30): Error: undefined identifier `is_integer`\n/tmp/tmpnmcygwl4.d(30): Error: undefined identifier `is_integer`\n/tmp/tmpnmcygwl4.d(31): Error: undefined identifier `is_integer`\n/tmp/tmpnmcygwl4.d(31): Error: undefined identifier `is_integer`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnmcygwl4.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163985
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    return((x+y==z)||(x+z==y)||(y+z==x));\n}\n//--------------------------------------------\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpfd1sgwm5.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427ecd]\n??:? void tmpfd1sgwm5.__unittest_L31_C1() [0x427ad8]\n??:? void tmpfd1sgwm5.__modtest() [0x427c50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300c8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fba5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa5d]\n??:? runModuleUnitTests [0x42b9c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42831c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163985
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    // return x == y + z || y == x + z || z == x + y;\n    return (cast(int)x == cast(int)y + cast(int)z || cast(int)y == cast(int)x + cast(int)z || cast(int)z == cast(int)x + cast(int)y);\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp3u03kwd7.d(44): unittest failure\n----------------\n??:? _d_unittestp [0x427ed5]\n??:? void tmp3u03kwd7.__unittest_L31_C1() [0x427c3f]\n??:? void tmp3u03kwd7.__modtest() [0x427c54]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbfb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa8e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa65]\n??:? runModuleUnitTests [0x42b9d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428324]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163985
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    return x == y + z || x == y - z || y == x + z || y == x - z || z == x + y || z == x - y;\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpg_b0tfvx.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427f15]\n??:? void tmpg_b0tfvx.__unittest_L30_C1() [0x427b20]\n??:? void tmpg_b0tfvx.__modtest() [0x427c98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aace]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430110]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aaa5]\n??:? runModuleUnitTests [0x42ba11]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428364]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope void delegate",
      "stdout": "",
      "timestamp": 1660163985
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    // if any of the numbers are not ints, return false\n    if(!isfinite(x) || !isfinite(y) || !isfinite(z))\n        return false;\n    \n    return (x == y + z) || (y == x + z) || (z == x + y);\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpp94fkrlk.d(29): Error: undefined identifier `isfinite`, did you mean template `isFinite(X)(X x)`?\n/tmp/tmpp94fkrlk.d(29): Error: undefined identifier `isfinite`, did you mean template `isFinite(X)(X x)`?\n/tmp/tmpp94fkrlk.d(29): Error: undefined identifier `isfinite`, did you mean template `isFinite(X)(X x)`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp94fkrlk.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163985
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n  if (is_integral_float!(typeof(x)) && is_integral_float!(typeof(y)) && is_integral_float!(typeof(z)))\n  {\n    if (x == y + z || y == x + z || z == x + y)\n    {\n      return true;\n    }\n    else\n    {\n      return false;\n    }\n  }\n  else\n  {\n    return false;\n  }\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpwonotk52.d(28): Error: template instance `is_integral_float!(typeof(x))` template `is_integral_float` is not defined\n/tmp/tmpwonotk52.d(28): Error: template instance `is_integral_float!(typeof(y))` template `is_integral_float` is not defined\n/tmp/tmpwonotk52.d(28): Error: template instance `is_integral_float!(typeof(z))` template `is_integral_float` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwonotk52.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163985
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    return (x + y == z) || (x + z == y) || (y + z == x);\n    \n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6ieql_k3.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427ecd]\n??:? void tmp6ieql_k3.__unittest_L31_C1() [0x427ad8]\n??:? void tmp6ieql_k3.__modtest() [0x427c50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300c8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fba5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa5d]\n??:? runModuleUnitTests [0x42b9c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42831c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163985
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    if(is(typeof(x) == int) && is(typeof(y) == int) && is(typeof(z) == int)) \n    {\n        if(x + y == z || x + z == y || y + z == x) \n        {\n            return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpzyy853s8.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x427e95]\n??:? void tmpzyy853s8.__unittest_L37_C1() [0x427a38]\n??:? void tmpzyy853s8.__modtest() [0x427c14]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbbb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa4e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbe1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430090]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb6d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa25]\n??:? runModuleUnitTests [0x42b991]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282e4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163985
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    return ( (x == y + z ) && is( typeof(x) == int ) &&  is( typeof(y) == int ) &&  is( typeof(z) == int ) ); \n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_b_rq4p8.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427e95]\n??:? void tmp_b_rq4p8.__unittest_L30_C1() [0x427a38]\n??:? void tmp_b_rq4p8.__modtest() [0x427c14]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbbb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa4e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbe1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430090]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb6d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa25]\n??:? runModuleUnitTests [0x42b991]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282e4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163985
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    \n    if(abs(x - (y + z)) < 0.00001)\n    {\n        return is(typeof(x) == int && typeof(y) == int && typeof(z) == int);\n    }\n    else if(abs(y - (x + z)) < 0.00001)\n    {\n        return is(typeof(x) == int && typeof(y) == int && typeof(z) == int);\n    }\n    else if(abs(z - (x + y)) < 0.00001)\n    {\n        return is(typeof(x) == int && typeof(y) == int && typeof(z) == int);\n    }\n    else\n    {\n        return false;\n    }\n    \n}\n/* \n    Create a function that takes a string.\n    Returns the maximal length of an array that can be constructed from the string.\n    The maximal length is the number of unique characters in the string.\n    For example: The string \"abbcc\" has a maximal length of 3, as we can create an array of \"a\", \"b\", \"c\".\n    The string \"abbccad\" has a maximal length of 4, as we can create an array of \"a\", \"b\", \"c\", \"d\".\n    \n    Examples\n    >>> maximal_length(\"abbccad\")\n    4\n    \n    >>> maximal_length(\"abbcc\")\n    3\n    \n    >>> maximal_length(\"aabc\")\n    3\n*/\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9e9tsxjr.d(31): Error: found `&&` when expecting `)`\n/tmp/tmp9e9tsxjr.d(31): Error: found `typeof` when expecting `;` following `return` statement\n/tmp/tmp9e9tsxjr.d(31): Error: found `&&` when expecting `.` following int\n/tmp/tmp9e9tsxjr.d(31): Error: found `typeof` when expecting identifier following `int`.\n/tmp/tmp9e9tsxjr.d(31): Error: found `==` when expecting `;` following statement\n/tmp/tmp9e9tsxjr.d(31): Error: no identifier for declarator `int`\n/tmp/tmp9e9tsxjr.d(31): Error: found `)` instead of statement\n/tmp/tmp9e9tsxjr.d(35): Error: found `&&` when expecting `)`\n/tmp/tmp9e9tsxjr.d(35): Error: found `typeof` when expecting `;` following `return` statement\n/tmp/tmp9e9tsxjr.d(35): Error: found `&&` when expecting `.` following int\n/tmp/tmp9e9tsxjr.d(35): Error: found `typeof` when expecting identifier following `int`.\n/tmp/tmp9e9tsxjr.d(35): Error: found `==` when expecting `;` following statement\n/tmp/tmp9e9tsxjr.d(35): Error: no identifier for declarator `int`\n/tmp/tmp9e9tsxjr.d(35): Error:",
      "stdout": "",
      "timestamp": 1660163985
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n    in\n    {\n        assert(!isNaN(x));\n        assert(!isNaN(y));\n        assert(!isNaN(z));\n    }\n    out (result)\n    {\n        assert(!isNaN(result));\n    }\n    do\n{\n    return isInteger(x) && isInteger(y) && isInteger(z) && isInteger(x + y) && isInteger(x + z) && isInteger(y + z) && (x == y + z || y == x + z || z == x + y);\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp__x_9yop.d(39): Error: undefined identifier `isInteger`\n/tmp/tmp__x_9yop.d(39): Error: undefined identifier `isInteger`\n/tmp/tmp__x_9yop.d(39): Error: undefined identifier `isInteger`\n/tmp/tmp__x_9yop.d(39): Error: undefined identifier `isInteger`\n/tmp/tmp__x_9yop.d(39): Error: undefined identifier `isInteger`\n/tmp/tmp__x_9yop.d(39): Error: undefined identifier `isInteger`\n/tmp/tmp__x_9yop.d(35): Error: template `std.math.isNaN` cannot deduce function from argument types `!()(const(bool))`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(5853):        `std.math.isNaN(X)(X x) if (isFloatingPoint!X)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp__x_9yop.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163985
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    return (typeof(x) == long) && (typeof(y) == long) && (typeof(z) == long) &&\n        ((x == y + z) || (y == x + z) || (z == x + y));\n}\n \nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp0v_7yljn.d(28): Error: found `)` when expecting `.` following long\n/tmp/tmp0v_7yljn.d(28): Error: found `&&` when expecting identifier following `long`.\n/tmp/tmp0v_7yljn.d(28): Error: found `)` when expecting `.` following long\n/tmp/tmp0v_7yljn.d(28): Error: found `&&` when expecting identifier following `long`.\n/tmp/tmp0v_7yljn.d(28): Error: found `)` when expecting `.` following long\n/tmp/tmp0v_7yljn.d(28): Error: found `&&` when expecting identifier following `long`.\n/tmp/tmp0v_7yljn.d(29): Error: found `;` when expecting `,`\n/tmp/tmp0v_7yljn.d(30): Error: expression expected, not `}`\n/tmp/tmp0v_7yljn.d(32): Error: found `unittest` when expecting `,`\n/tmp/tmp0v_7yljn.d(47): Error: found `void` when expecting `,`\n/tmp/tmp0v_7yljn.d(47): Error: found `{` when expecting `,`\n/tmp/tmp0v_7yljn.d(47): Error: expression expected, not `}`\n/tmp/tmp0v_7yljn.d(47): Error: found `End of File` when expecting `,`\n/tmp/tmp0v_7yljn.d(47): Error: found `End of File` when expecting `)`\n/tmp/tmp0v_7yljn.d(47): Error: ",
      "stdout": "",
      "timestamp": 1660163985
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n\tif ((x % 1 == 0) && (y % 1 == 0) && (z % 1 == 0))\n\t{\n\t\tif ((x == y + z) || (y == x + z) || (z == x + y))\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\telse return false;\n\t}\n\telse return false;\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpm00mm44_.d(51): unittest failure\n----------------\n??:? _d_unittestp [0x427f55]\n??:? void tmpm00mm44_.__unittest_L38_C1() [0x427cbf]\n??:? void tmpm00mm44_.__modtest() [0x427cd4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc7b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab0e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fca1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430150]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc2d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aae5]\n??:? runModuleUnitTests [0x42ba51]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283a4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163985
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    bool is_int = false;\n    bool result = false;\n    bool x_is_int = is(typeof(x) == int);\n    bool y_is_int = is(typeof(y) == int);\n    bool z_is_int = is(typeof(z) == int);\n    bool x_is_float = is(typeof(x) == float);\n    bool y_is_float = is(typeof(y) == float);\n    bool z_is_float = is(typeof(z) == float);\n    if (x_is_int || y_is_int || z_is_int) {\n        is_int = true;\n    }\n    if (x_is_float || y_is_float || z_is_float) {\n        is_int = false;\n    }\n    if (x_is_int && y_is_int && z_is_int) {\n        result = true;\n    }\n    if (result) {\n        if (x == y + z || y == x + z || z == x + y) {\n            return true;\n        }\n    }\n    else {\n        return false;\n    }\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyxjvcs1e.d(26): Error: function `tmpyxjvcs1e.any_int` no `return exp;` or `assert(0);` at end of function\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyxjvcs1e.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163985
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    // Create a tuple\n    Tuple!float t = tuple(x, y, z);\n    // Rotate tuple\n    t = rotateLeft(t);\n    // Take the first element of the tuple\n    float a = front(t);\n    // Take the first element of the rest of the tuple\n    float b = front(dropOne(t));\n    // Take the rest of the rest of the tuple\n    float c = front(dropOne(dropOne(t)));\n    if (a+b == c || b+c == a || a+c == b)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpskuom0ps.d(29): Error: none of the overloads of `this` are callable using argument types `(Tuple!(float, float, float))`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(668):        `std.typecons.Tuple!float.Tuple.this(float _param_0)`\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(689):        `std.typecons.Tuple!float.Tuple.__ctor(U, ulong n)(U[n] values) if (n == Types.length && allSatisfy!(isBuildableFrom!U, Types))`\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(715):        `std.typecons.Tuple!float.Tuple.__ctor(U)(U another) if (areBuildCompatibleTuples!(typeof(this), U))`\n/tmp/tmpskuom0ps.d(31): Error: undefined identifier `rotateLeft`\n/tmp/tmpskuom0ps.d(33): Error: undefined identifier `front`\n/tmp/tmpskuom0ps.d(35): Error: undefined identifier `front`\n/tmp/tmpskuom0ps.d(37): Error: undefined identifier `front`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpskuom0ps.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163985
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    int sum;\n    sum = x + y + z;\n    if(is(typeof(x) == int) && is(typeof(y) == int) && is(typeof(z) == int)){\n        if((x == sum - y - z) || (y == sum - x - z) || (z == sum - x - y)){\n            return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8ule39cp.d(29): Error: cannot implicitly convert expression `x + y + z` of type `float` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8ule39cp.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163985
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    return any_int(to!long(x), to!long(y), to!long(z));\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpz53dnmrb.d(28): Error: template instance `to!long` template `to` is not defined, did you mean No?\n/tmp/tmpz53dnmrb.d(28): Error: template instance `to!long` template `to` is not defined, did you mean No?\n/tmp/tmpz53dnmrb.d(28): Error: template instance `to!long` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz53dnmrb.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163985
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    return x==y+z || y==x+z || z==x+y;\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpzhekt8nn.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427edd]\n??:? void tmpzhekt8nn.__unittest_L30_C1() [0x427ae4]\n??:? void tmpzhekt8nn.__modtest() [0x427c5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa96]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300d8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbb5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa6d]\n??:? runModuleUnitTests [0x42b9d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42832c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163986
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    \n    if(x == 0 || y == 0 || z == 0) \n    {\n        return false;\n    }\n    \n    if(isZero(x) || isZero(y) || isZero(z)) \n    {\n        return false;\n    }\n    \n    if(ceil(x) != x || ceil(y) != y || ceil(z) != z) \n    {\n        return false;\n    }\n    \n    float max = Math.max(x, Math.max(y, z));\n    float min = Math.min(x, Math.min(y, z));\n    float mid = (x + y + z) - max - min;\n    \n    return max == mid + min;\n    \n    \n    \n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqdefm1td.d(34): Error: undefined identifier `isZero`\n/tmp/tmpqdefm1td.d(34): Error: undefined identifier `isZero`\n/tmp/tmpqdefm1td.d(34): Error: undefined identifier `isZero`\n/tmp/tmpqdefm1td.d(44): Error: undefined identifier `Math`\n/tmp/tmpqdefm1td.d(45): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqdefm1td.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163985
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    enum {x_, y_, z_} int_type;\n    int_type = x - cast(int)x == 0 ? x_ : (y - cast(int)y == 0 ? y_ : z_);\n    if (int_type == x_) {\n        return x == y + z;\n    }\n    else if (int_type == y_) {\n        return y == x + z;\n    }\n    else {\n        return z == x + y;\n    }\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpafqhdms1.d(28): Error: undefined identifier `int_type`\n/tmp/tmpafqhdms1.d(29): Error: undefined identifier `int_type`\n/tmp/tmpafqhdms1.d(30): Error: undefined identifier `int_type`\n/tmp/tmpafqhdms1.d(33): Error: undefined identifier `int_type`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpafqhdms1.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163985
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    float sum = x + y + z;\n    if(is(typeof(sum) == int) && x != sum && y != sum && z != sum)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp8abcgnp1.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x427e9d]\n??:? void tmp8abcgnp1.__unittest_L38_C1() [0x427a40]\n??:? void tmp8abcgnp1.__modtest() [0x427c1c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbc3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa56]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbe9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430098]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa2d]\n??:? runModuleUnitTests [0x42b999]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282ec]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163986
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n  float larger;\n  float smaller;\n  float smallest;\n  float maxSum;\n  float minSum;\n  if(x > y && x > z)\n  {\n    larger = x;\n    maxSum = larger;\n    if(y > z)\n    {\n      smaller = y;\n      smallest = z;\n    }\n    else\n    {\n      smaller = z;\n      smallest = y;\n    }\n  }\n  else if(y > x && y > z)\n  {\n    larger = y;\n    maxSum = larger;\n    if(x > z)\n    {\n      smaller = x;\n      smallest = z;\n    }\n    else\n    {\n      smaller = z;\n      smallest = x;\n    }\n  }\n  else if(z > x && z > y)\n  {\n    larger = z;\n    maxSum = larger;\n    if(x > y)\n    {\n      smaller = x;\n      smallest = y;\n    }\n    else\n    {\n      smaller = y;\n      smallest = x;\n    }\n  }\n  else\n  {\n    return false;\n  }\n  if(larger + smaller == smallest)\n  {\n    return true;\n  }\n  else\n  {\n    minSum = min(smaller, smallest);\n    if(larger == minSum)\n    {\n      return false;\n    }\n    else\n    {\n      return larger + minSum == smallest;\n    }\n  }\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpq2zwiv5h.d(88): Error: undefined identifier `min`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq2zwiv5h.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163985
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    return is(typeof(x+y+z) == int) && (x+y == z || x+z == y || y+z == x);\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmphf414u5q.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427e95]\n??:? void tmphf414u5q.__unittest_L30_C1() [0x427a38]\n??:? void tmphf414u5q.__modtest() [0x427c14]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbbb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa4e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbe1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430090]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb6d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa25]\n??:? runModuleUnitTests [0x42b991]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282e4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163986
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    return ((x == y + z) or (y == x + z) or (z == x + y)) and \n            (is(typeof(x == int) & typeof(y == int) & typeof(z == int)));\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpd9bfa8dg.d(28): Error: found `or` when expecting `)`\n/tmp/tmpd9bfa8dg.d(28): Error: found `or` when expecting `;` following `return` statement\n/tmp/tmpd9bfa8dg.d(28): Error: found `)` when expecting `;` following statement\n/tmp/tmpd9bfa8dg.d(29): Error: found `)` when expecting `.` following int\n/tmp/tmpd9bfa8dg.d(29): Error: found `&` when expecting identifier following `int`.\n/tmp/tmpd9bfa8dg.d(29): Error: found `typeof` when expecting `)`\n/tmp/tmpd9bfa8dg.d(29): Error: unexpected `(` in declarator\n/tmp/tmpd9bfa8dg.d(29): Error: found `==` when expecting `)`\n/tmp/tmpd9bfa8dg.d(29): Error: found `int` when expecting `)`\n/tmp/tmpd9bfa8dg.d(29): Error: found `)` when expecting `.` following int\n/tmp/tmpd9bfa8dg.d(29): Error: found `)` when expecting identifier following `int`.\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd9bfa8dg.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163985
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    \n    return (( (is(typeof(x)) == is(typeof(y)) ) == is(typeof(z)) ) == false) || ( (is(typeof(x)) != is(typeof(z)) ) != is(typeof(y)) ) == false;\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpl_1m83_k.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x427e95]\n??:? void tmpl_1m83_k.__unittest_L31_C1() [0x427a38]\n??:? void tmpl_1m83_k.__modtest() [0x427c14]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbbb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa4e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbe1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430090]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb6d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa25]\n??:? runModuleUnitTests [0x42b991]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282e4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163986
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    auto dist = [](float p, float q)\n    {\n        auto s = p - q;\n        return s * s;\n    };\n    \n    auto d1 = dist(x, y) + dist(x, z);\n    auto d2 = dist(y, x) + dist(y, z);\n    auto d3 = dist(z, x) + dist(z, y);\n    \n    auto eps = 1e-5;\n    \n    auto ret = d1 < eps || d2 < eps || d3 < eps;\n    \n    return ret;\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpb5pkuckq.d(28): Error: found `p` when expecting `.` following float\n/tmp/tmpb5pkuckq.d(28): Error: found `,` when expecting identifier following `float`.\n/tmp/tmpb5pkuckq.d(28): Error: found `float` when expecting `,`\n/tmp/tmpb5pkuckq.d(29): Error: semicolon expected following auto declaration, not `{`\n/tmp/tmpb5pkuckq.d(32): Deprecation: use `{ }` for an empty statement, not `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb5pkuckq.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163985
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    return (((x == y + z) || (y == x + z) || (z == x + y)) && \n           is(typeof(x) == int) && \n           is(typeof(y) == int) && \n           is(typeof(z) == int));\n}\n/*\n    Create a function that creates a vector of ints.\n    The vector will have the size of the argument\n    The values of the vector should be the squares of numbers from 1 to the number of elements\n    If the argument is negative, the function should return an empty vector.\n    \n    Examples\n    >>> v = create_vector(3)\n    >>> v.length == 3\n    true\n    >>> v[0] == 1\n    true\n    >>> v[1] == 4\n    true\n    >>> v[2] == 9\n    true\n    \n    >>> v = create_vector(0)\n    >>> v.length == 0\n    true\n    \n    >>> v = create_vector(-2)\n    >>> v.length == 0\n    true\n*/\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpl0uf420p.d(62): unittest failure\n----------------\n??:? _d_unittestp [0x427e95]\n??:? void tmpl0uf420p.__unittest_L58_C1() [0x427a38]\n??:? void tmpl0uf420p.__modtest() [0x427c14]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbbb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa4e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbe1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430090]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb6d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa25]\n??:? runModuleUnitTests [0x42b991]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282e4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163986
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    int xi = 0;\n    int yi = 0;\n    int zi = 0;\n    bool xisint = false;\n    bool yisint = false;\n    bool zisint = false;\n    bool sumisint = false;\n    bool result = false;\n    float sum = 0.0;\n    float sum_int = 0.0;\n    float float_sum = 0.0;\n    float epsilon = 0.001;\n    \n    xi = cast(int)x;\n    yi = cast(int)y;\n    zi = cast(int)z;\n    \n    if (abs(x - xi) < epsilon)\n    {\n        xisint = true;\n    }\n    if (abs(y - yi) < epsilon)\n    {\n        yisint = true;\n    }\n    if (abs(z - zi) < epsilon)\n    {\n        zisint = true;\n    }\n    \n    if (xisint && yisint && zisint)\n    {\n        float_sum = x + y + z;\n        sum_int = cast(int)float_sum;\n        if (abs(float_sum - sum_int) < epsilon)\n        {\n            sumisint = true;\n        }\n    }\n    \n    if (sumisint)\n    {\n        sum = cast(float)sum_int;\n        if (sum == x || sum == y || sum == z)\n        {\n            result = true;\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpspe_j1nk.d(83): unittest failure\n----------------\n??:? _d_unittestp [0x4280ad]\n??:? void tmpspe_j1nk.__unittest_L79_C1() [0x427c44]\n??:? void tmpspe_j1nk.__modtest() [0x427e2c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bdf7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ac8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fe1d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4302cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fda9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ac61]\n??:? runModuleUnitTests [0x42bbcd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4284fc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163986
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    return cast(bool) ((x == y + z) || (y == x + z) || (z == x + y));\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6rs8my9c.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427edd]\n??:? void tmp6rs8my9c.__unittest_L30_C1() [0x427ae4]\n??:? void tmp6rs8my9c.__modtest() [0x427c5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa96]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300d8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbb5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa6d]\n??:? runModuleUnitTests [0x42b9d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42832c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163986
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    return (x + y == z || y + z == x || x + z == y) && (is_int(x) && is_int(y) && is_int(z));\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpztbq5y99.d(28): Error: undefined identifier `is_int`\n/tmp/tmpztbq5y99.d(28): Error: undefined identifier `is_int`\n/tmp/tmpztbq5y99.d(28): Error: undefined identifier `is_int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpztbq5y99.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163985
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    return (is(typeof(x+y+z))== long) ? true : false;\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6s4un7v1.d(28): Error: found `)` when expecting `.` following long\n/tmp/tmp6s4un7v1.d(28): Error: found `?` when expecting identifier following `long`.\n/tmp/tmp6s4un7v1.d(28): Error: found `true` when expecting `)`\n/tmp/tmp6s4un7v1.d(28): Error: found `:` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6s4un7v1.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163985
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    if (isInteger(x) && isInteger(y) && isInteger(z))\n    {\n        if (x == y + z || y == x + z || z == x + y)\n        {\n            return true;\n        }\n    }\n    return false;\n}\n/*\n    Create a function that takes an array of integers, and returns true if any of the numbers is a palindrome.\n    Return false if there are no palindromes in the array.\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1uhyspe1.d(37): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1uhyspe1.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163985
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    return (((x + y) == z) || ((x + z) == y) || ((y + z) == x)) && std.typecons.is(x, long) && std.typecons.is(y, long) && std.typecons.is(z, long);\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp25t73wbv.d(28): Error: identifier expected following `.`, not `is`\n/tmp/tmp25t73wbv.d(28): Error: found `)` when expecting `.` following long\n/tmp/tmp25t73wbv.d(28): Error: found `&&` when expecting identifier following `long`.\n/tmp/tmp25t73wbv.d(28): Error: found `std` when expecting `,`\n/tmp/tmp25t73wbv.d(28): Error: identifier expected following `.`, not `is`\n/tmp/tmp25t73wbv.d(28): Error: found `)` when expecting `.` following long\n/tmp/tmp25t73wbv.d(28): Error: found `&&` when expecting identifier following `long`.\n/tmp/tmp25t73wbv.d(28): Error: found `std` when expecting `,`\n/tmp/tmp25t73wbv.d(28): Error: identifier expected following `.`, not `is`\n/tmp/tmp25t73wbv.d(28): Error: found `)` when expecting `.` following long\n/tmp/tmp25t73wbv.d(28): Error: found `;` when expecting identifier following `long`.\n/tmp/tmp25t73wbv.d(29): Error: found `}` when expecting `,`\n/tmp/tmp25t73wbv.d(30): Error: expression expected, not `unittest`\n/tmp/tmp25t73wbv.d(31): Error: found `{` when expecting `,`\n/tmp/t",
      "stdout": "",
      "timestamp": 1660163985
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    return x == y + z || y == x + z || z == x + y && x == floor(x) && y == floor(y) && z == floor(z);\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpy0ov72ja.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x4280b5]\n??:? void tmpy0ov72ja.__unittest_L30_C1() [0x427cc0]\n??:? void tmpy0ov72ja.__modtest() [0x427e38]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bf1f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42adb2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff45]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4303f4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fed1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ad89]\n??:? runModuleUnitTests [0x42bcf5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428504]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163986
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    // write your code here\n    return false;\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7urt9ry8.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x427e95]\n??:? void tmp7urt9ry8.__unittest_L31_C1() [0x427a38]\n??:? void tmp7urt9ry8.__modtest() [0x427c14]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbbb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa4e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbe1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430090]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb6d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa25]\n??:? runModuleUnitTests [0x42b991]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282e4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163986
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n  /*\n  \u0422\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0438 \u043f\u0440\u0438\u0432\u0435\u0441\u0442\u0438 \u043a int\n  std.math.abs\n  std.math.lround\n  std.typecons.Tuple.\n  */\n  //return false;\n  auto d = Tuple!(int, int, int)(lround(x), lround(y), lround(z));\n  return (d[0] + d[1] == d[2]) || (d[0] + d[2] == d[1]) || (d[1] + d[2] == d[0]);\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmppn4xx3_y.d(35): Error: none of the overloads of `this` are callable using argument types `(long, long, long)`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(668):        `std.typecons.Tuple!(int, int, int).Tuple.this(int _param_0, int _param_1, int _param_2)`\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(689):        `std.typecons.Tuple!(int, int, int).Tuple.__ctor(U, ulong n)(U[n] values) if (n == Types.length && allSatisfy!(isBuildableFrom!U, Types))`\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(715):        `std.typecons.Tuple!(int, int, int).Tuple.__ctor(U)(U another) if (areBuildCompatibleTuples!(typeof(this), U))`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\",",
      "stdout": "",
      "timestamp": 1660163985
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    if(fract(x) == 0.0 && fract(y) == 0.0 && fract(z) == 0.0)\n    {\n        return (x + y == z || x + z == y || y + z == x);\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9a_l2fo1.d(28): Error: undefined identifier `fract`\n/tmp/tmp9a_l2fo1.d(28): Error: undefined identifier `fract`\n/tmp/tmp9a_l2fo1.d(28): Error: undefined identifier `fract`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9a_l2fo1.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163986
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    assert(x == floor(x));\n    assert(y == floor(y));\n    assert(z == floor(z));\n    return ((x+y == z) || (x+z == y) || (y+z == x));\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvs43tk1o.d(28): Assertion failure\n----------------\n??:? _d_assertp [0x4280fd]\n??:? bool tmpvs43tk1o.any_int(float, float, float) [0x427bd7]\n??:? void tmpvs43tk1o.__unittest_L33_C1() [0x427cf1]\n??:? void tmpvs43tk1o.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c04b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aede]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430071]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430520]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fffd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aeb5]\n??:? runModuleUnitTests [0x42be21]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "stdout": "",
      "timestamp": 1660163986
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    auto sum = x + y + z;\n    return (sum == x || sum == y || sum == z) && all(map!is_int(immutable(float))([x, y, z]));\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpure9f2ab.d(29): Error: `(arguments)` expected following `immutable(float)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpure9f2ab.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163985
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    if (x + y == z || x + z == y || y + z == x) {\n        if (x.to!int() && y.to!int() && z.to!int()) {\n            return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163985
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    if(is(typeof(x+y+z)== int))\n    {\n        if((x+y == z) || (x+z == y) || (y+z == x))\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n    else\n    {\n        return false;\n    }\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4in33do8.d(48): unittest failure\n----------------\n??:? _d_unittestp [0x427e95]\n??:? void tmp4in33do8.__unittest_L44_C1() [0x427a38]\n??:? void tmp4in33do8.__modtest() [0x427c14]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbbb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa4e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbe1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430090]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb6d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa25]\n??:? runModuleUnitTests [0x42b991]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282e4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163986
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    float sum = x + y + z;\n    return sum / 3 == floor(sum / 3);\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpubzd9i5r.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x428055]\n??:? void tmpubzd9i5r.__unittest_L31_C1() [0x427cc0]\n??:? void tmpubzd9i5r.__modtest() [0x427dd4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bebf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ad52]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fee5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430394]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fe71]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ad29]\n??:? runModuleUnitTests [0x42bc95]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4284a4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163986
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    alias sum = x + y + z;\n    return (x == sum - y - z) || (y == sum - x - z) || (z == sum - x - y);\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3o4obcu0.d(28): Error: semicolon expected to close `alias` declaration\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3o4obcu0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163985
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    //return x == y + z || y == x + z || z == x + y;\n    return (round(x) == round(y + z) || round(y) == round(x + z) || round(z) == round(x + y));\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpktog3s7d.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427ffd]\n??:? void tmpktog3s7d.__unittest_L31_C1() [0x427c08]\n??:? void tmpktog3s7d.__modtest() [0x427d80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bd3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42abce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fd61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430210]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fced]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aba5]\n??:? runModuleUnitTests [0x42bb11]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42844c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163986
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    float max = 0;\n    float first = 0;\n    float second = 0;\n    int flag = 0;\n    if (x > y)\n    {\n        if (x > z)\n        {\n            max = x;\n            flag = 1;\n        }\n        else\n        {\n            max = z;\n            flag = 3;\n        }\n    }\n    else\n    {\n        if (y > z)\n        {\n            max = y;\n            flag = 2;\n        }\n        else\n        {\n            max = z;\n            flag = 3;\n        }\n    }\n    if (flag == 1)\n    {\n        first = y;\n        second = z;\n    }\n    else if (flag == 2)\n    {\n        first = x;\n        second = z;\n    }\n    else\n    {\n        first = x;\n        second = y;\n    }\n    if (max == (first + second))\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpthykokow.d(88): unittest failure\n----------------\n??:? _d_unittestp [0x427f5d]\n??:? void tmpthykokow.__unittest_L82_C1() [0x427b64]\n??:? void tmpthykokow.__modtest() [0x427cdc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab16]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fca9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430158]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aaed]\n??:? runModuleUnitTests [0x42ba59]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283ac]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163986
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    if(is(typeof(x == y)))\n    {\n        return false;\n    }\n    else if(is(typeof(x == z)))\n    {\n        return false;\n    }\n    else if(is(typeof(y == z)))\n    {\n        return false;\n    }\n    else if(is(typeof(x + y == z)))\n    {\n        return true;\n    }\n    else if(is(typeof(x + z == y)))\n    {\n        return true;\n    }\n    else if(is(typeof(y + z == x)))\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n    \n    \n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmplv2p3mkd.d(63): unittest failure\n----------------\n??:? _d_unittestp [0x427e95]\n??:? void tmplv2p3mkd.__unittest_L59_C1() [0x427a38]\n??:? void tmplv2p3mkd.__modtest() [0x427c14]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbbb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa4e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbe1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430090]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb6d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa25]\n??:? runModuleUnitTests [0x42b991]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282e4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163986
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    return x + y == z || x + z == y || y + z == x;\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmptl4r14z6.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427ecd]\n??:? void tmptl4r14z6.__unittest_L30_C1() [0x427ad8]\n??:? void tmptl4r14z6.__modtest() [0x427c50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300c8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fba5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa5d]\n??:? runModuleUnitTests [0x42b9c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42831c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163986
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    bool x_is_int = x == int(x);\n    bool y_is_int = y == int(y);\n    bool z_is_int = z == int(z);\n    bool any_is_int = x_is_int || y_is_int || z_is_int;\n    bool all_are_int = x_is_int && y_is_int && z_is_int;\n    return (x+y==z || x+z==y || y+z==x) && all_are_int;\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpadxynzwx.d(28): Error: cannot implicitly convert expression `x` of type `float` to `int`\n/tmp/tmpadxynzwx.d(29): Error: cannot implicitly convert expression `y` of type `float` to `int`\n/tmp/tmpadxynzwx.d(30): Error: cannot implicitly convert expression `z` of type `float` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpadxynzwx.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163986
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    // convert all values to integer\n    auto x_i = to!int(x);\n    auto y_i = to!int(y);\n    auto z_i = to!int(z);\n    \n    // convert the values back to float\n    auto x_f = to!float(x_i);\n    auto y_f = to!float(y_i);\n    auto z_f = to!float(z_i);\n    \n    // compare the float to the original float.\n    if(x_f == x && y_f == y && z_f == z) \n    {\n        // check if the float value equates to the sum of the other two\n        if(x == y + z || y == x + z || z == x + y) \n        {\n            return true;\n        }\n        else \n        {\n            return false;\n        }\n    }\n    else \n    {\n        return false;\n    }\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpldtyjai1.d(29): Error: template instance `to!int` template `to` is not defined, did you mean No?\n/tmp/tmpldtyjai1.d(30): Error: template instance `to!int` template `to` is not defined, did you mean No?\n/tmp/tmpldtyjai1.d(31): Error: template instance `to!int` template `to` is not defined, did you mean No?\n/tmp/tmpldtyjai1.d(34): Error: template instance `to!float` template `to` is not defined, did you mean No?\n/tmp/tmpldtyjai1.d(35): Error: template instance `to!float` template `to` is not defined, did you mean No?\n/tmp/tmpldtyjai1.d(36): Error: template instance `to!float` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpldtyjai1.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163986
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    return (y + z == x || x + z == y || x + y == z) && (is(typeof(x) == int) && is(typeof(y) == int) && is(typeof(z) == int));\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmprehawz8c.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427e9d]\n??:? void tmprehawz8c.__unittest_L30_C1() [0x427a44]\n??:? void tmprehawz8c.__modtest() [0x427c20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbc3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa56]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbe9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430098]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa2d]\n??:? runModuleUnitTests [0x42b999]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282ec]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163986
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n   if (is_integral!float(x) && is_integral!float(y) && is_integral!float(z))\n   {\n       if( x == y + z || x == y - z || y == x + z || y == x - z || z == x + y || z == x - y)\n        {\n           return true;\n        }\n   }\n   return false;\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp___vc1rk.d(28): Error: template instance `is_integral!float` template `is_integral` is not defined\n/tmp/tmp___vc1rk.d(28): Error: template instance `is_integral!float` template `is_integral` is not defined\n/tmp/tmp___vc1rk.d(28): Error: template instance `is_integral!float` template `is_integral` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp___vc1rk.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163986
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    return (x+y == z) || (x+z == y) || (y+z == x);\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpzt8jjhdl.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427ecd]\n??:? void tmpzt8jjhdl.__unittest_L30_C1() [0x427ad8]\n??:? void tmpzt8jjhdl.__modtest() [0x427c50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300c8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fba5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa5d]\n??:? runModuleUnitTests [0x42b9c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42831c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163986
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n  if (is(typeof(x) == int) && is(typeof(y) == int) && is(typeof(z) == int))\n  {\n    if (x == y + z || y == x + z || z == x + y)\n    {\n      return true;\n    }\n    else\n    {\n      return false;\n    }\n  }\n  else\n  {\n    return false;\n  }\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwkbvvsbw.d(48): unittest failure\n----------------\n??:? _d_unittestp [0x427e95]\n??:? void tmpwkbvvsbw.__unittest_L44_C1() [0x427a38]\n??:? void tmpwkbvvsbw.__modtest() [0x427c14]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbbb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa4e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbe1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430090]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb6d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa25]\n??:? runModuleUnitTests [0x42b991]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282e4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163986
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    return (x == y + z) || (y == x + z) || (z == x + y);\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpx2oegioj.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427edd]\n??:? void tmpx2oegioj.__unittest_L30_C1() [0x427ae4]\n??:? void tmpx2oegioj.__modtest() [0x427c5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa96]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300d8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbb5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa6d]\n??:? runModuleUnitTests [0x42b9d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42832c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope void delegate",
      "stdout": "",
      "timestamp": 1660163986
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    bool any_int(false);\n    float xyz = x + y + z;\n    if (xyz - trunc(xyz) == 0)\n    {\n        if (x == y + z || y == x + z || z == x + y)\n        {\n            any_int = true;\n        }\n    }\n    return any_int;\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpom0fulaj.d(28): Error: basic type expected, not `false`\n/tmp/tmpom0fulaj.d(28): Error: found `false` when expecting `)`\n/tmp/tmpom0fulaj.d(28): Error: semicolon expected following function declaration\n/tmp/tmpom0fulaj.d(28): Error: found `)` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpom0fulaj.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163986
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    return is(typeof(x + y + z) == int);\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpfvmtmzst.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427e95]\n??:? void tmpfvmtmzst.__unittest_L30_C1() [0x427a38]\n??:? void tmpfvmtmzst.__modtest() [0x427c14]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbbb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa4e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbe1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430090]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb6d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa25]\n??:? runModuleUnitTests [0x42b991]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282e4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163986
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    bool res = false;\n    auto fl = function!(float)();\n    if(is(typeof(fl(x) == typeof(fl(y)) == typeof(fl(z)))))\n    {\n        if(x == y + z || y == x + z || z == x + y)\n        {\n            res = true;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpdx51ouxp.d(29): Error: basic type expected, not `!`\n/tmp/tmpdx51ouxp.d(29): Error: missing `{ ... }` for function literal\n/tmp/tmpdx51ouxp.d(29): Error: semicolon expected following auto declaration, not `!`\n/tmp/tmpdx51ouxp.d(29): Error: expression expected, not `)`\n/tmp/tmpdx51ouxp.d(29): Error: found `;` when expecting `)`\n/tmp/tmpdx51ouxp.d(30): Error: C style cast illegal, use `cast(float)0`\n/tmp/tmpdx51ouxp.d(30): Error: found `if` when expecting `;` following statement\n/tmp/tmpdx51ouxp.d(30): Error: basic type expected, not `is`\n/tmp/tmpdx51ouxp.d(30): Error: found `is` when expecting `)`\n/tmp/tmpdx51ouxp.d(30): Error: missing `{ ... }` for function literal\n/tmp/tmpdx51ouxp.d(30): Error: found `==` when expecting `)`\n/tmp/tmpdx51ouxp.d(30): Error: found `typeof` when expecting `,`\n/tmp/tmpdx51ouxp.d(30): Error: found `)` when expecting `;` following statement\n/tmp/tmpdx51ouxp.d(30): Error: found `)` instead of statement\n/tmp/tmpdx51ouxp.d(36): Error: unrecognized declaration\nFailed: [\"dmd\", \"-u",
      "stdout": "",
      "timestamp": 1660163986
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    float sum = x + y + z;\n    if(is(typeof(sum)) float)\n    {\n        if(x == z + y || y == x + z || z == x + y) return true;\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpninov_ar.d(29): Error: found `float` when expecting `)`\n/tmp/tmpninov_ar.d(29): Error: found `)` instead of statement\n/tmp/tmpninov_ar.d(33): Error: declaration expected, not `return`\n/tmp/tmpninov_ar.d(34): Error: unrecognized declaration\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpninov_ar.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163986
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n    { \n    //Erstellt zwei Variablen a und b, die jeweils den Wert von x und y haben.\n    //Danach ruft die Variable c ihren Wert auf.\n    //Dann wird die if-Abfrage getestet.\n    //Pr\u00fcft, ob der Wert von c ein Integer ist.\n    //Wenn ja, wird die Abfrage durchlaufen.\n    //Ansonsten, wird false ausgegeben.\n    float a = x;\n    float b = y;\n    float c = z;\n    if (is_integer!c)\n        {\n        if (a + b == c)\n            {\n            return true;\n            }\n        else if (a + c == b)\n            {\n            return true;\n            }\n        else if (b + c == a)\n            {\n            return true;\n            }\n        else\n            {\n            return false;\n            }\n        }\n    else\n        {\n        return false;\n        }\n    }\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6b1csfe5.d(37): Error: template instance `is_integer!c` template `is_integer` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6b1csfe5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163986
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{ \n    return (long)x + (long)y == (long)z || (long)x + (long)z == (long)y || (long)y + (long)z == (long)x;\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1t1adjg_.d(28): Error: C style cast illegal, use `cast(long)x`\n/tmp/tmp1t1adjg_.d(28): Error: C style cast illegal, use `cast(long)y`\n/tmp/tmp1t1adjg_.d(28): Error: C style cast illegal, use `cast(long)z`\n/tmp/tmp1t1adjg_.d(28): Error: C style cast illegal, use `cast(long)x`\n/tmp/tmp1t1adjg_.d(28): Error: C style cast illegal, use `cast(long)z`\n/tmp/tmp1t1adjg_.d(28): Error: C style cast illegal, use `cast(long)y`\n/tmp/tmp1t1adjg_.d(28): Error: C style cast illegal, use `cast(long)y`\n/tmp/tmp1t1adjg_.d(28): Error: C style cast illegal, use `cast(long)z`\n/tmp/tmp1t1adjg_.d(28): Error: C style cast illegal, use `cast(long)x`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1t1adjg_.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163986
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    if (x + y == z)\n    {\n        return true;\n    }\n    else if (x + z == y)\n    {\n        return true;\n    }\n    else if (y + z == x)\n    {\n        return true;\n    }\n    else \n    {\n        return false;\n    }\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpqg9ajtto.d(51): unittest failure\n----------------\n??:? _d_unittestp [0x427ed5]\n??:? void tmpqg9ajtto.__unittest_L45_C1() [0x427adc]\n??:? void tmpqg9ajtto.__modtest() [0x427c54]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbfb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa8e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa65]\n??:? runModuleUnitTests [0x42b9d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428324]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163986
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    return  (x == (y + z)) || (y == (x + z)) || (z == (x + y));\n    \n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpepa999yn.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427edd]\n??:? void tmpepa999yn.__unittest_L31_C1() [0x427ae4]\n??:? void tmpepa999yn.__modtest() [0x427c5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa96]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300d8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbb5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa6d]\n??:? runModuleUnitTests [0x42b9d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42832c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163986
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n  return (x == y + z) || (y == x + z) || (z == x + y);\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp70smbgdw.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427edd]\n??:? void tmp70smbgdw.__unittest_L30_C1() [0x427ae4]\n??:? void tmp70smbgdw.__modtest() [0x427c5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa96]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300d8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbb5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa6d]\n??:? runModuleUnitTests [0x42b9d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42832c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163986
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    return !(modf(x) != 0.0 || modf(y) != 0.0 || modf(z) != 0.0) &&\n        (x + y == z || x + z == y || y + z == x);\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpdgtqmpso.d(28): Error: function `std.math.modf(real x, ref real i)` is not callable using argument types `(float)`\n/tmp/tmpdgtqmpso.d(28): Error: function `std.math.modf(real x, ref real i)` is not callable using argument types `(float)`\n/tmp/tmpdgtqmpso.d(28): Error: function `std.math.modf(real x, ref real i)` is not callable using argument types `(float)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdgtqmpso.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163986
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    auto sum = x + y + z;\n    //mixin(\"writeln(\\\"x: \\\",x);\");\n    //mixin(\"writeln(\\\"y: \\\",y);\");\n    //mixin(\"writeln(\\\"z: \\\",z);\");\n    //mixin(\"writeln(\\\"sum: \\\",sum);\");\n    auto x_int = int(x);\n    auto y_int = int(y);\n    auto z_int = int(z);\n    auto sum_int = int(sum);\n    //mixin(\"writeln(\\\"x_int: \\\",x_int);\");\n    //mixin(\"writeln(\\\"y_int: \\\",y_int);\");\n    //mixin(\"writeln(\\\"z_int: \\\",z_int);\");\n    //mixin(\"writeln(\\\"sum_int: \\\",sum_int);\");\n    auto a_1 = x_int == sum_int - y_int - z_int;\n    auto a_2 = y_int == sum_int - x_int - z_int;\n    auto a_3 = z_int == sum_int - x_int - y_int;\n    //mixin(\"writeln(\\\"a_1: \\\",a_1);\");\n    //mixin(\"writeln(\\\"a_2: \\\",a_2);\");\n    //mixin(\"writeln(\\\"a_3: \\\",a_3);\");\n    return a_1 || a_2 || a_3;\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpdzt0bdxw.d(33): Error: cannot implicitly convert expression `x` of type `float` to `int`\n/tmp/tmpdzt0bdxw.d(34): Error: cannot implicitly convert expression `y` of type `float` to `int`\n/tmp/tmpdzt0bdxw.d(35): Error: cannot implicitly convert expression `z` of type `float` to `int`\n/tmp/tmpdzt0bdxw.d(36): Error: cannot implicitly convert expression `sum` of type `float` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdzt0bdxw.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163986
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    return (x == y + z) || (y == x + z) || (z == x + y); \n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp83pj157p.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427edd]\n??:? void tmp83pj157p.__unittest_L30_C1() [0x427ae4]\n??:? void tmp83pj157p.__modtest() [0x427c5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa96]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300d8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbb5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa6d]\n??:? runModuleUnitTests [0x42b9d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42832c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163986
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9kx0v5f2.d(283): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9kx0v5f2.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163986
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n  // long types have a constructor that will take a float, and return a long.\n  // if the number has no fractional part, then it is an integer\n  if( (long)x + (long)y == (long)z || (long)x + (long)z == (long)y || (long)y + (long)z == (long)x )\n    return true;\n  else\n    return false;\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpfey6d9bg.d(30): Error: C style cast illegal, use `cast(long)x`\n/tmp/tmpfey6d9bg.d(30): Error: C style cast illegal, use `cast(long)y`\n/tmp/tmpfey6d9bg.d(30): Error: C style cast illegal, use `cast(long)z`\n/tmp/tmpfey6d9bg.d(30): Error: C style cast illegal, use `cast(long)x`\n/tmp/tmpfey6d9bg.d(30): Error: C style cast illegal, use `cast(long)z`\n/tmp/tmpfey6d9bg.d(30): Error: C style cast illegal, use `cast(long)y`\n/tmp/tmpfey6d9bg.d(30): Error: C style cast illegal, use `cast(long)y`\n/tmp/tmpfey6d9bg.d(30): Error: C style cast illegal, use `cast(long)z`\n/tmp/tmpfey6d9bg.d(30): Error: C style cast illegal, use `cast(long)x`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfey6d9bg.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163986
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    long real_x = cast(long)x;\n    long real_y = cast(long)y;\n    long real_z = cast(long)z;\n    return (((real_x + real_y) == real_z) || ((real_y + real_z) == real_x) || ((real_x + real_z) == real_y));\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpg2cdkxg1.d(46): unittest failure\n----------------\n??:? _d_unittestp [0x427ec5]\n??:? void tmpg2cdkxg1.__unittest_L33_C1() [0x427c33]\n??:? void tmpg2cdkxg1.__modtest() [0x427c48]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300c0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb9d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa55]\n??:? runModuleUnitTests [0x42b9c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428314]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163986
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n  return !isNaN(x) && !isNaN(y) && !isNaN(z) && abs(x - (y + z)) < 0.00001;\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvtrubzgh.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428015]\n??:? void tmpvtrubzgh.__unittest_L30_C1() [0x427b70]\n??:? void tmpvtrubzgh.__modtest() [0x427d98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bd5f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42abf2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fd85]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430234]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fd11]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42abc9]\n??:? runModuleUnitTests [0x42bb35]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428464]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163986
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    // write your code here\n    if(x == y + z)\n    {\n        return true;\n    }\n    else if(y == x + z)\n    {\n        return true;\n    }\n    else if(z == x + y)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpzop775ce.d(52): unittest failure\n----------------\n??:? _d_unittestp [0x427edd]\n??:? void tmpzop775ce.__unittest_L46_C1() [0x427ae8]\n??:? void tmpzop775ce.__modtest() [0x427c60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa96]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300d8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbb5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa6d]\n??:? runModuleUnitTests [0x42b9d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42832c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163986
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    return any_int(long(x), long(y), long(z));\n}\n/*\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnw97vtjx.d(30): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnw97vtjx.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163986
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n  return ceil(x) == ceil(y) + ceil(z) || ceil(x) == ceil(z) + ceil(y) || ceil(y) == ceil(x) + ceil(z) || ceil(y) == ceil(z) + ceil(x) || ceil(z) == ceil(x) + ceil(y) || ceil(z) == ceil(y) + ceil(x);\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpu68nj8zi.d(43): unittest failure\n----------------\n??:? _d_unittestp [0x42822d]\n??:? void tmpu68nj8zi.__unittest_L30_C1() [0x427f9b]\n??:? void tmpu68nj8zi.__modtest() [0x427fb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af52]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4300e5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430594]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430071]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af29]\n??:? runModuleUnitTests [0x42be95]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42867c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163986
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    if(x==y+z||y==x+z||z==x+y)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwci1e_85.d(43): unittest failure\n----------------\n??:? _d_unittestp [0x427ed5]\n??:? void tmpwci1e_85.__unittest_L37_C1() [0x427ae0]\n??:? void tmpwci1e_85.__modtest() [0x427c58]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbfb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa8e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa65]\n??:? runModuleUnitTests [0x42b9d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428324]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163986
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    return (x == (y + z) || y == (x + z) || z == (x + y)) && (x == trunc(x) && y == trunc(y) && z == trunc(z));\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpqzff22se.d(43): unittest failure\n----------------\n??:? _d_unittestp [0x427ff5]\n??:? void tmpqzff22se.__unittest_L30_C1() [0x427d63]\n??:? void tmpqzff22se.__modtest() [0x427d78]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bd33]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42abc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fd59]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430208]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fce5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab9d]\n??:? runModuleUnitTests [0x42bb09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428444]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163986
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    return x == y + z || y == x + z || z == x + y;\n}\n \nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpzfndwkfs.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427edd]\n??:? void tmpzfndwkfs.__unittest_L31_C1() [0x427ae4]\n??:? void tmpzfndwkfs.__modtest() [0x427c5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa96]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300d8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbb5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa6d]\n??:? runModuleUnitTests [0x42b9d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42832c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163987
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n   if (x + y == z || x + z == y || y + z == x)\n      return true;\n   else \n      return false;\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpgtza84_j.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x427ecd]\n??:? void tmpgtza84_j.__unittest_L33_C1() [0x427ad4]\n??:? void tmpgtza84_j.__modtest() [0x427c4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300c8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fba5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa5d]\n??:? runModuleUnitTests [0x42b9c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42831c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163987
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    \n    \n    return ((x + y) == z or (x + z) == y or (y + z) == x) and is(typeof(x) == int);\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp920ye0ki.d(30): Error: found `or` when expecting `)`\n/tmp/tmp920ye0ki.d(30): Error: found `or` when expecting `;` following `return` statement\n/tmp/tmp920ye0ki.d(30): Error: found `)` when expecting `;` following statement\n/tmp/tmp920ye0ki.d(30): Error: found `)` when expecting `.` following int\n/tmp/tmp920ye0ki.d(30): Error: found `;` when expecting identifier following `int`.\n/tmp/tmp920ye0ki.d(30): Error: found `}` when expecting `)`\n/tmp/tmp920ye0ki.d(32): Error: found `unittest` when expecting `;` following statement\n/tmp/tmp920ye0ki.d(47): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp920ye0ki.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163986
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    return is(typeof(x+y+z) == int) && ((x+y == z) || (x+z == y) || (y+z == x));\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmppp4x2qel.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427e95]\n??:? void tmppp4x2qel.__unittest_L30_C1() [0x427a38]\n??:? void tmppp4x2qel.__modtest() [0x427c14]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbbb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa4e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbe1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430090]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb6d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa25]\n??:? runModuleUnitTests [0x42b991]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282e4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163987
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    if(is(typeof(x) == long) && is(typeof(y) == long) && is(typeof(z) == long))\n    {\n        return x + y == z || x + z == y || y + z == x;\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp0fgplw79.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x427e95]\n??:? void tmp0fgplw79.__unittest_L34_C1() [0x427a38]\n??:? void tmp0fgplw79.__modtest() [0x427c14]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbbb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa4e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbe1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430090]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb6d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa25]\n??:? runModuleUnitTests [0x42b991]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282e4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163987
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    return ((x - y == z) || (x - z == y) || (y - x == z) || (y - z == x) || (z - x == y) || (z - y == x));\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7kdkwjpp.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427f25]\n??:? void tmp7kdkwjpp.__unittest_L30_C1() [0x427b2c]\n??:? void tmp7kdkwjpp.__modtest() [0x427ca4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aade]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430120]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbfd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aab5]\n??:? runModuleUnitTests [0x42ba21]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428374]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163986
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    float sum = x + y + z;\n    if (sum == x || sum == y || sum == z)\n    {\n        return true;\n    }\n    else \n    {\n        return false;\n    }\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj0a3focu.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x427ed5]\n??:? void tmpj0a3focu.__unittest_L38_C1() [0x427a7c]\n??:? void tmpj0a3focu.__modtest() [0x427c58]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbfb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa8e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa65]\n??:? runModuleUnitTests [0x42b9d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428324]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163986
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    return false;\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp84eotvn7.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427e95]\n??:? void tmp84eotvn7.__unittest_L30_C1() [0x427a38]\n??:? void tmp84eotvn7.__modtest() [0x427c14]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbbb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa4e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbe1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430090]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb6d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa25]\n??:? runModuleUnitTests [0x42b991]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282e4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163987
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{ \n    int i_x = cast(int)x;\n    int i_y = cast(int)y;\n    int i_z = cast(int)z;\n    \n    return ((x + y) == z) || ((x + z) == y) || ((y + z) == x) && (i_x == x) && (i_y == y) && (i_z == z);\n    \n}\n/*\nTests\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6stolxe3.d(35): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6stolxe3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163986
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    \n    \n    \n    \n    \n    \n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpvatgr4p8.d(26): Error: function `tmpvatgr4p8.any_int` has no `return` statement, but is expected to return a value of type `bool`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvatgr4p8.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163985
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    float[] nums = [x, y, z];\n    float sum = 0.0;\n    foreach(idx, val; nums)\n    {\n        if(val == int(val))\n        {\n            nums[idx] = int(val);\n        }\n        else\n        {\n            return false;\n        }\n    }\n    foreach(val; nums)\n    {\n        sum += val;\n    }\n    if(sum == nums[0] || sum == nums[1] || sum == nums[2])\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\n \nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyoyf15mg.d(32): Error: cannot implicitly convert expression `val` of type `float` to `int`\n/tmp/tmpyoyf15mg.d(34): Error: cannot implicitly convert expression `val` of type `float` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyoyf15mg.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163986
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    return (x == y + z) || (y == x + z) || (z == x + y);\n}\n \nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp1ab7qzdg.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427edd]\n??:? void tmp1ab7qzdg.__unittest_L31_C1() [0x427ae4]\n??:? void tmp1ab7qzdg.__modtest() [0x427c5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa96]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300d8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbb5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa6d]\n??:? runModuleUnitTests [0x42b9d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42832c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163987
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    bool isAnyInt = false;\n    float total = x + y + z;\n    bool isSumInt = cast(bool)(modf(total) == 0.0);\n    float[] floatArr = [x, y, z];\n    bool isAnyValueInt = false;\n    foreach(float f; floatArr)\n    {\n        if(modf(f) == 0.0)\n        {\n            isAnyValueInt = true;\n            break;\n        }\n    }\n    if(isSumInt && isAnyValueInt)\n    {\n        isAnyInt = true;\n    }\n    return isAnyInt;\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1wpyufck.d(30): Error: function `std.math.modf(real x, ref real i)` is not callable using argument types `(float)`\n/tmp/tmp1wpyufck.d(35): Error: function `std.math.modf(real x, ref real i)` is not callable using argument types `(float)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1wpyufck.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163986
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    return ((x == y + z) || (y == x + z) || (z == x + y)) && \n        ((int)x == x) && ((int)y == y) && ((int)z == z);\n}\n/*\n    Why is x == y + z necessary?\n    https://github.com/D-Programming-Language/dmd/issues/2415\n*/\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqebqnl0h.d(29): Error: C style cast illegal, use `cast(int)x`\n/tmp/tmpqebqnl0h.d(29): Error: C style cast illegal, use `cast(int)y`\n/tmp/tmpqebqnl0h.d(29): Error: C style cast illegal, use `cast(int)z`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqebqnl0h.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163986
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    if (modf(x) != 0 || modf(y) != 0 || modf(z) != 0)\n        return false;\n    \n    float sum = x + y;\n    if (z == sum)\n        return true;\n    \n    sum = x + z;\n    if (y == sum)\n        return true;\n    \n    sum = y + z;\n    if (x == sum)\n        return true;\n    \n    return false;\n    \n    \n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp5xzinqoh.d(28): Error: function `std.math.modf(real x, ref real i)` is not callable using argument types `(float)`\n/tmp/tmp5xzinqoh.d(28): Error: function `std.math.modf(real x, ref real i)` is not callable using argument types `(float)`\n/tmp/tmp5xzinqoh.d(28): Error: function `std.math.modf(real x, ref real i)` is not callable using argument types `(float)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5xzinqoh.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163986
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    return (x % 1 == 0 || y % 1 == 0 || z % 1 == 0) && (x + y == z || x + z == y || y + z == x);\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7egl_dsj.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427f4d]\n??:? void tmp7egl_dsj.__unittest_L30_C1() [0x427b54]\n??:? void tmp7egl_dsj.__modtest() [0x427ccc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc73]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab06]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc99]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430148]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc25]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aadd]\n??:? runModuleUnitTests [0x42ba49]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42839c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163987
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    x = ceil(x);\n    y = ceil(y);\n    z = ceil(z);\n    Tuple!(float, float, float) s = tuple(x, y, z);\n    float sum = x + y + z;\n    int i;\n    float sum2 = 0;\n    for (i = 0; i < s.length; i++)\n    {\n      sum2 += s[i];\n    }\n    if (sum2 == sum)\n    {\n      return true;\n    }\n    else\n    {\n      return false;\n    }\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpb0b93gs8.d(37): Error: variable `i` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb0b93gs8.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163987
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    return int(x) + int(y) == int(z) || int(x) + int(z) == int(y) || int(y) + int(z) == int(x);\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpwrojekim.d(28): Error: cannot implicitly convert expression `x` of type `float` to `int`\n/tmp/tmpwrojekim.d(28): Error: cannot implicitly convert expression `y` of type `float` to `int`\n/tmp/tmpwrojekim.d(28): Error: cannot implicitly convert expression `z` of type `float` to `int`\n/tmp/tmpwrojekim.d(28): Error: cannot implicitly convert expression `x` of type `float` to `int`\n/tmp/tmpwrojekim.d(28): Error: cannot implicitly convert expression `z` of type `float` to `int`\n/tmp/tmpwrojekim.d(28): Error: cannot implicitly convert expression `y` of type `float` to `int`\n/tmp/tmpwrojekim.d(28): Error: cannot implicitly convert expression `y` of type `float` to `int`\n/tmp/tmpwrojekim.d(28): Error: cannot implicitly convert expression `z` of type `float` to `int`\n/tmp/tmpwrojekim.d(28): Error: cannot implicitly convert expression `x` of type `float` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwrojekim.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163986
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    if(is(typeof(x) == int) && is(typeof(y) == int) && is(typeof(z) == int))\n    {\n        if(x == (y + z) || y == (x + z) || z == (x + y))\n        {\n            return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7hsgybsz.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x427e95]\n??:? void tmp7hsgybsz.__unittest_L37_C1() [0x427a38]\n??:? void tmp7hsgybsz.__modtest() [0x427c14]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbbb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa4e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbe1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430090]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb6d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa25]\n??:? runModuleUnitTests [0x42b991]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282e4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163987
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    auto r = false;\n    int a = typeid(int).init;\n    int b = typeid(int).init;\n    int c = typeid(int).init;\n    a = cast(int)x;\n    b = cast(int)y;\n    c = cast(int)z;\n    if(a == x && b == y && c == z) \n    {\n        if(a == b + c || b == a + c || c == a + b) \n        {\n            r = true;\n        }\n    }\n    return r;\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp0wcibku7.d(29): Error: cannot implicitly convert expression `null` of type `object.TypeInfo` to `int`\n/tmp/tmp0wcibku7.d(30): Error: cannot implicitly convert expression `null` of type `object.TypeInfo` to `int`\n/tmp/tmp0wcibku7.d(31): Error: cannot implicitly convert expression `null` of type `object.TypeInfo` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0wcibku7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163987
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    float sum = x + y + z;\n    if (x == sum - x - y)\n        return true;\n    if (y == sum - x - z)\n        return true;\n    if (z == sum - x - y)\n        return true;\n    return false;\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6r5evjpd.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x427f05]\n??:? void tmp6r5evjpd.__unittest_L37_C1() [0x427ade]\n??:? void tmp6r5evjpd.__modtest() [0x427c88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aabe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430100]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbdd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa95]\n??:? runModuleUnitTests [0x42ba01]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428354]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163987
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    return false;\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp84eotvn7.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427e95]\n??:? void tmp84eotvn7.__unittest_L30_C1() [0x427a38]\n??:? void tmp84eotvn7.__modtest() [0x427c14]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbbb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa4e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbe1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430090]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb6d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa25]\n??:? runModuleUnitTests [0x42b991]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282e4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163987
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    // returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    // returns false in any other cases.\n    return is(typeof(x + y + z) == int) &&\n            (x + y == z || x + z == y || y + z == x);\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp38r9ojr4.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427e95]\n??:? void tmp38r9ojr4.__unittest_L33_C1() [0x427a38]\n??:? void tmp38r9ojr4.__modtest() [0x427c14]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbbb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa4e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbe1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430090]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb6d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa25]\n??:? runModuleUnitTests [0x42b991]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282e4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163987
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{ \n    return (x+y == z) || (x+z == y) || (y+z == x); \n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpt0ap69yu.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427ecd]\n??:? void tmpt0ap69yu.__unittest_L30_C1() [0x427ad8]\n??:? void tmpt0ap69yu.__modtest() [0x427c50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300c8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fba5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa5d]\n??:? runModuleUnitTests [0x42b9c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42831c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163987
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{ \n    x = to!int(x);\n    y = to!int(y);\n    z = to!int(z);\n    \n    //return (x == y + z) || (y == x + z) || (z == x + y);\n    if(x == y + z)\n    {\n        return true;\n    }\n    else if(y == x + z)\n    {\n        return true;\n    }\n    else if(z == x + y)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\n/*\n\tCreate a function that takes 3 arguments.\n\tReturns true if one of the arguments is integer and other two are floats, or one of the arguments is float and other two are integers.\n\tReturns false in any other cases.\n\t\n\tExamples\n\t>>> any_int(5L, 2L, 7L)\n\ttrue\n\t\n\t>>> any_int(3L, 2L, 2L)\n\tfalse\n\t\n\t>>> any_int(3L, -2L, 1L)\n\ttrue\n\t\n\t>>> any_int(3.6, -2.2, 2L)\n\ttrue\n*/\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmphkivuuba.d(28): Error: template instance `to!int` template `to` is not defined, did you mean No?\n/tmp/tmphkivuuba.d(29): Error: template instance `to!int` template `to` is not defined, did you mean No?\n/tmp/tmphkivuuba.d(30): Error: template instance `to!int` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphkivuuba.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163987
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n  return (x == (y + z) || y == (x + z) || z == (x + y));\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpo78v3unm.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427edd]\n??:? void tmpo78v3unm.__unittest_L30_C1() [0x427ae4]\n??:? void tmpo78v3unm.__modtest() [0x427c5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa96]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300d8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbb5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa6d]\n??:? runModuleUnitTests [0x42b9d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42832c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163987
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    return ((z==(x+y)) or (y==(x+z)) or (x==(y+z))) and (is(typeof(x) == int) and is(typeof(y) == int) and is(typeof(z) == int));\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpwkg6w4x4.d(28): Error: found `or` when expecting `)`\n/tmp/tmpwkg6w4x4.d(28): Error: found `or` when expecting `;` following `return` statement\n/tmp/tmpwkg6w4x4.d(28): Error: found `)` when expecting `;` following statement\n/tmp/tmpwkg6w4x4.d(28): Error: found `and` when expecting `,`\n/tmp/tmpwkg6w4x4.d(28): Error: found `and` when expecting `,`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwkg6w4x4.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163987
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    //Tuple!(int,int,int) integers = tuple(cast(int)x, cast(int)y, cast(int)z);\n    return is(typeof(x) : int) && is(typeof(y) : int) && is(typeof(z) : int) && ( x + y == z || x + z == y || y + z == x);\n}\n/*\n    Given a number as an int, return it as a string.\n    If the number is negative, add a '-' in front of it.\n    If the number is positive, add a '+' in front of it.\n    If the number is 0, just return \"0\".\n    \n    >>> number_sign(2)\n    \"+2\"\n    \n    >>> number_sign(-10)\n    \"-10\"\n    \n    >>> number_sign(0)\n    \"0\"\n    \n    Examples\n    >>> number_sign(0)\n    \"0\"\n*/\nstring number_sign(int num) \n{\n    return (num == 0) ? \"0\" : ((num < 0) ? \"-\" ~ abs(num) : \"+\" ~ abs(num));\n}\n/*\n    Given a string, return a new string with the characters in reverse order.\n    \n    >>> reverse_string(\"Hello\")\n    \"olleH\"\n    \n    >>> reverse_string(\"World\")\n    \"dlroW\"\n    \n    >>> reverse_string(\" \")\n    \" \"\n*/\nstring reverse_string(string str) \n{\n    return str.reverse;\n}\n/*\n    Given an integer, return a string representation of the binary form of the number.\n    If the number is negative, it should be in 2's complement.\n    There should be no leading zeros.\n    \n    >>> binary_number(3)\n    \"11\"\n    \n    >>> binary_number(10)\n    \"1010\"\n    \n    >>> binary_number(-3)\n    \"11111111111111111111111111111101\"\n    \n    Examples\n    >>> binary_number(7)\n    \"111\"\n*/\nstring binary_number(int num) \n{\n    string s = \"\";\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_c032rsn.d(91): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_c032rsn.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163987
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    bool result = false;\n    if ((x - y == z || x - z == y || y - x == z || y - z == x || z - x == y || z - y == x) && \n       (cast(long)x == x && cast(long)y == y && cast(long)z == z))\n    {\n        result = true;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmprvkczgdd.d(49): unittest failure\n----------------\n??:? _d_unittestp [0x427f7d]\n??:? void tmprvkczgdd.__unittest_L36_C1() [0x427ce7]\n??:? void tmprvkczgdd.__modtest() [0x427cfc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bca3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fcc9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430178]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab0d]\n??:? runModuleUnitTests [0x42ba79]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283cc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163987
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{ \n    return \n        is(typeof(x) : int)\n        && is(typeof(y) : int)\n        && is(typeof(z) : int)\n        && ((x == y + z) || (y == x + z) || (z == x + y));\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpx1p33nlb.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x427e95]\n??:? void tmpx1p33nlb.__unittest_L34_C1() [0x427a38]\n??:? void tmpx1p33nlb.__modtest() [0x427c14]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbbb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa4e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbe1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430090]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb6d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa25]\n??:? runModuleUnitTests [0x42b991]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282e4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163987
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    bool res = false;\n    if (is(typeof(sum(x, y, z)) == int)) {\n        res = (x == sum(y, z) || y == sum(x, z) || z == sum(x, y));\n    }\n    return res;\n}\n/*\n    Create a function that takes a number.\n    It will iterate from 0 to the input number and multiply each number by 2.\n    It will append the product to a out parameter array.\n    In the end it will return the out array.\n    \n    >>> auto res = get_mult_by_2(3L);\n    >>> res[0]\n    0L\n    >>> res[1]\n    2L\n    >>> res[2]\n    4L\n    >>> res[3]\n    6L\n    >>> res[4]\n    8L\n    \n*/\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp52733p62.d(30): Error: undefined identifier `sum`\n/tmp/tmp52733p62.d(30): Error: undefined identifier `sum`\n/tmp/tmp52733p62.d(30): Error: undefined identifier `sum`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp52733p62.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163987
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    if(is(typeof(x) == long) && is(typeof(y) == long) && is(typeof(z) == long))\n    {\n        int xc = to!int(x);\n        int yc = to!int(y);\n        int zc = to!int(z);\n        if(x == y + z || y == x + z || z == x + y)\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n    else\n    {\n        return false;\n    }\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpz6eqckff.d(30): Error: template instance `to!int` template `to` is not defined, did you mean No?\n/tmp/tmpz6eqckff.d(31): Error: template instance `to!int` template `to` is not defined, did you mean No?\n/tmp/tmpz6eqckff.d(32): Error: template instance `to!int` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz6eqckff.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163987
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    \n    return is(typeof(x + y + z) == int) && (x + y == z || x + z == y || y + z == x);\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp8hlhv7fu.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x427e95]\n??:? void tmp8hlhv7fu.__unittest_L31_C1() [0x427a38]\n??:? void tmp8hlhv7fu.__modtest() [0x427c14]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbbb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa4e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbe1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430090]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb6d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa25]\n??:? runModuleUnitTests [0x42b991]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282e4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163987
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n  import std.math;\n  if(is(typeof(x) == int) && is(typeof(y) == int) && is(typeof(z) == int))\n  {\n    if(x + y == z || y + z == x || x + z == y)\n    {\n      return true;\n    }\n    else\n    {\n      return false;\n    }\n  }\n  else\n  {\n    return false;\n  }\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpyohesh80.d(49): unittest failure\n----------------\n??:? _d_unittestp [0x427e95]\n??:? void tmpyohesh80.__unittest_L45_C1() [0x427a38]\n??:? void tmpyohesh80.__modtest() [0x427c14]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbbb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa4e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbe1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430090]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb6d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa25]\n??:? runModuleUnitTests [0x42b991]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282e4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163987
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    return ( (x+y==z) or (x+z==y) or (y+z==x) ) and (x-floor(x)==0) and (y-floor(y)==0) and (z-floor(z)==0);\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3sc5pq2l.d(28): Error: found `or` when expecting `)`\n/tmp/tmp3sc5pq2l.d(28): Error: found `or` when expecting `;` following `return` statement\n/tmp/tmp3sc5pq2l.d(28): Error: found `)` when expecting `;` following statement\n/tmp/tmp3sc5pq2l.d(28): Error: found `and` when expecting `;` following statement\n/tmp/tmp3sc5pq2l.d(28): Error: found `and` when expecting `;` following statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3sc5pq2l.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163987
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    float a = y + z;\n    float b = x + z;\n    float c = x + y;\n    if ((a == x) || (b == y) || (c == z)) {\n        return true;\n    }\n    else {\n        return false;\n    }\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpomt3yopr.d(37): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpomt3yopr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163987
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{ \n    return (x + y == z) || (x + z == y) || (y + z == x);\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpr8x_v8k0.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427ecd]\n??:? void tmpr8x_v8k0.__unittest_L30_C1() [0x427ad8]\n??:? void tmpr8x_v8k0.__modtest() [0x427c50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300c8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fba5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa5d]\n??:? runModuleUnitTests [0x42b9c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42831c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163987
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    return is(typeof(x) == int && typeof(y) == int && typeof(z) == int && (x + y == z || x + z == y || y + z == x));\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmphmla8wtn.d(28): Error: found `&&` when expecting `)`\n/tmp/tmphmla8wtn.d(28): Error: found `typeof` when expecting `;` following `return` statement\n/tmp/tmphmla8wtn.d(28): Error: found `&&` when expecting `.` following int\n/tmp/tmphmla8wtn.d(28): Error: found `typeof` when expecting identifier following `int`.\n/tmp/tmphmla8wtn.d(28): Error: found `==` when expecting `;` following statement\n/tmp/tmphmla8wtn.d(28): Error: no identifier for declarator `int`\n/tmp/tmphmla8wtn.d(28): Error: found `&&` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphmla8wtn.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163987
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    return (x == y + z) || (y == x + z) || (z == x + y);\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpx2oegioj.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427edd]\n??:? void tmpx2oegioj.__unittest_L30_C1() [0x427ae4]\n??:? void tmpx2oegioj.__modtest() [0x427c5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa96]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300d8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbb5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa6d]\n??:? runModuleUnitTests [0x42b9d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42832c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope void delegate",
      "stdout": "",
      "timestamp": 1660163986
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    float sum_of_two = x + y;\n    float sum_of_three = x + y + z;\n    if(sum_of_two == z)\n    {\n        if(is(typeof(x) == int) && is(typeof(y) == int) && is(typeof(z) == int))\n        {\n            return true;\n        }\n    }\n    else if(sum_of_two == y)\n    {\n        if(is(typeof(x) == int) && is(typeof(y) == int) && is(typeof(z) == int))\n        {\n            return true;\n        }\n    }\n    else if(sum_of_two == x)\n    {\n        if(is(typeof(x) == int) && is(typeof(y) == int) && is(typeof(z) == int))\n        {\n            return true;\n        }\n    }\n    else if(sum_of_three == y)\n    {\n        if(is(typeof(x) == int) && is(typeof(y) == int) && is(typeof(z) == int))\n        {\n            return true;\n        }\n    }\n    else if(sum_of_three == x)\n    {\n        if(is(typeof(x) == int) && is(typeof(y) == int) && is(typeof(z) == int))\n        {\n            return true;\n        }\n    }\n    else if(sum_of_three == z)\n    {\n        if(is(typeof(x) == int) && is(typeof(y) == int) && is(typeof(z) == int))\n        {\n            return true;\n        }\n    }\n    else\n    {\n        return false;\n    }\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpgsz38vn1.d(26): Error: function `tmpgsz38vn1.any_int` no `return exp;` or `assert(0);` at end of function\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgsz38vn1.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163987
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    if(typeid(x) == typeid(int) && typeid(y) == typeid(int) && typeid(z) == typeid(int))\n    {\n        if(x == y + z || y == x + z || z == x + y)\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n    else\n    {\n        return false;\n    }\n    \n    \n    \n    \n    \n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpc7ifwn1y.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x427ff9]\n??:? void tmpc7ifwn1y.__unittest_L49_C1() [0x427af0]\n??:? void tmpc7ifwn1y.__modtest() [0x427ccc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42be17]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42acaa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fe3d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4302ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fdc9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ac81]\n??:? runModuleUnitTests [0x42bbed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428448]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163987
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n  bool res = false;\n  if (x == y + z || y == x + z || z == x + y) {\n    res = true;\n  }\n  return res;\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpb79d5xjf.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427edd]\n??:? void tmpb79d5xjf.__unittest_L34_C1() [0x427ae4]\n??:? void tmpb79d5xjf.__modtest() [0x427c5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa96]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300d8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbb5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa6d]\n??:? runModuleUnitTests [0x42b9d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42832c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163987
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    float sum = x + y + z;\n    if (is(sum, int) && is(x, int) && is(y, int) && is(z, int))\n    {\n        return true;\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp95o1l85_.d(29): Error: found `,` when expecting `)`\n/tmp/tmp95o1l85_.d(29): Error: found `int` when expecting `)`\n/tmp/tmp95o1l85_.d(29): Error: found `)` instead of statement\n/tmp/tmp95o1l85_.d(33): Error: declaration expected, not `return`\n/tmp/tmp95o1l85_.d(34): Error: unrecognized declaration\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp95o1l85_.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163987
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    int xx = cast(int)x;\n    int yy = cast(int)y;\n    int zz = cast(int)z;\n    return (xx == yy + zz) || (yy == xx + zz) || (zz == xx + yy);\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvx28faz6.d(46): unittest failure\n----------------\n??:? _d_unittestp [0x427ebd]\n??:? void tmpvx28faz6.__unittest_L33_C1() [0x427c2b]\n??:? void tmpvx28faz6.__modtest() [0x427c40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbe3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa76]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300b8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa4d]\n??:? runModuleUnitTests [0x42b9b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42830c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163987
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    float x_plus_y = x + y;\n    float y_plus_z = y + z;\n    float x_plus_z = x + z;\n    return (x_plus_y == z || y_plus_z == x || x_plus_z == y);\n}\n//+ more examples\n//+ explain\n//+ point out errors\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpmp79x6ns.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x427ef5]\n??:? void tmpmp79x6ns.__unittest_L36_C1() [0x427b00]\n??:? void tmpmp79x6ns.__modtest() [0x427c78]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aaae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa85]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428344]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163987
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    long x1 = long(x);\n    long y1 = long(y);\n    long z1 = long(z);\n    return (x1 == (y1 + z1) || y1 == (x1 + z1) || z1 == (x1 + y1)) && (x1 == x && y1 == y && z1 == z);\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpjejnieoo.d(28): Error: cannot implicitly convert expression `x` of type `float` to `long`\n/tmp/tmpjejnieoo.d(29): Error: cannot implicitly convert expression `y` of type `float` to `long`\n/tmp/tmpjejnieoo.d(30): Error: cannot implicitly convert expression `z` of type `float` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjejnieoo.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163987
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n\treturn to!int(x) == (to!int(y) + to!int(z)) ||\n\t\t   to!int(y) == (to!int(x) + to!int(z)) ||\n\t\t   to!int(z) == (to!int(x) + to!int(y));\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpzftvh2ag.d(28): Error: template instance `to!int` template `to` is not defined, did you mean No?\n/tmp/tmpzftvh2ag.d(28): Error: template instance `to!int` template `to` is not defined, did you mean No?\n/tmp/tmpzftvh2ag.d(28): Error: template instance `to!int` template `to` is not defined, did you mean No?\n/tmp/tmpzftvh2ag.d(29): Error: template instance `to!int` template `to` is not defined, did you mean No?\n/tmp/tmpzftvh2ag.d(29): Error: template instance `to!int` template `to` is not defined, did you mean No?\n/tmp/tmpzftvh2ag.d(29): Error: template instance `to!int` template `to` is not defined, did you mean No?\n/tmp/tmpzftvh2ag.d(30): Error: template instance `to!int` template `to` is not defined, did you mean No?\n/tmp/tmpzftvh2ag.d(30): Error: template instance `to!int` template `to` is not defined, did you mean No?\n/tmp/tmpzftvh2ag.d(30): Error: template instance `to!int` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzftvh2ag.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163987
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    return (x == y + z || y == x + z || z == x + y);\n}\n/*\n    Create a function that takes three arguments with types \"int\", \"int\" and \"float\".\n    Returns true if two arguments of type \"int\" are equal and the third of type \"float\" is greater than 100.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int_100(1L, 1L, 101.0)\n    true\n    \n    >>> any_int_100(1L, 1L, 99.9)\n    false\n    \n    >>> any_int_100(1L, 2L, 101.0)\n    false\n    \n    >>> any_int_100(1L, 1L, 101.1)\n    false\n    \n    >>> any_int_100(1L, 2L, 99.9)\n    false\n    \n    >>> any_int_100(1L, 2L, 101.1)\n    false\n    \n    >>> any_int_100(1L, 2L, 100.0)\n    false\n*/\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbcpa5pks.d(63): unittest failure\n----------------\n??:? _d_unittestp [0x427edd]\n??:? void tmpbcpa5pks.__unittest_L57_C1() [0x427ae4]\n??:? void tmpbcpa5pks.__modtest() [0x427c5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa96]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300d8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbb5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa6d]\n??:? runModuleUnitTests [0x42b9d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42832c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163987
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    if (x == y + z)\n    {\n        return is(typeof(x) == int) && is(typeof(y) == int) && is(typeof(z) == int);\n    }\n    else if (y == x + z)\n    {\n        return is(typeof(x) == int) && is(typeof(y) == int) && is(typeof(z) == int);\n    }\n    else if (z == x + y)\n    {\n        return is(typeof(x) == int) && is(typeof(y) == int) && is(typeof(z) == int);\n    }\n    else\n    {\n        return false;\n    }\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpp53rwtqj.d(49): unittest failure\n----------------\n??:? _d_unittestp [0x427edd]\n??:? void tmpp53rwtqj.__unittest_L45_C1() [0x427a84]\n??:? void tmpp53rwtqj.__modtest() [0x427c60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa96]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300d8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbb5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa6d]\n??:? runModuleUnitTests [0x42b9d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42832c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163987
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    if ((is(typeof(x) == int) && (is(typeof(y) == int) && (is(typeof(z) == int))))\n        && ((x + y == z) || (x + z == y) || (y + z == x)))\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp5dsqlnok.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x427e95]\n??:? void tmp5dsqlnok.__unittest_L38_C1() [0x427a38]\n??:? void tmp5dsqlnok.__modtest() [0x427c14]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbbb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa4e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbe1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430090]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb6d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa25]\n??:? runModuleUnitTests [0x42b991]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282e4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163987
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    // return (x == (y + z)) && is(int x) && is(int y) && is(int z);\n    return (int)x == (int)y + (int)z;\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpsi_79kl1.d(29): Error: C style cast illegal, use `cast(int)x`\n/tmp/tmpsi_79kl1.d(29): Error: C style cast illegal, use `cast(int)y`\n/tmp/tmpsi_79kl1.d(29): Error: C style cast illegal, use `cast(int)z`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsi_79kl1.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163987
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    if ( ( (x+y) == z || (x+z) == y || (y+z) == x ) && is(typeof(x)==int) && is(typeof(y)==int) && is(typeof(z)==int) )\n    {\n        return true;\n    } else\n    {\n        return false;\n    }\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpzfq30_jc.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e95]\n??:? void tmpzfq30_jc.__unittest_L36_C1() [0x427a38]\n??:? void tmpzfq30_jc.__modtest() [0x427c14]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbbb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa4e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbe1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430090]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb6d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa25]\n??:? runModuleUnitTests [0x42b991]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282e4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163987
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{ \n  return \n      (x + y == z) ||\n      (x + z == y) ||\n      (y + z == x);\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj2ieg_4i.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x427ecd]\n??:? void tmpj2ieg_4i.__unittest_L33_C1() [0x427ad8]\n??:? void tmpj2ieg_4i.__modtest() [0x427c50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300c8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fba5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa5d]\n??:? runModuleUnitTests [0x42b9c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42831c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163987
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    auto is_int = (int)x == x && (int)y == y && (int)z == z;\n    auto sum = x + y;\n    auto sum2 = x + z;\n    auto sum3 = y + z;\n    if (sum == z || sum2 == y || sum3 == x && is_int)\n    {\n        return true;\n    }\n    else \n    {\n        return false;\n    }\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpths3e7ao.d(28): Error: C style cast illegal, use `cast(int)x`\n/tmp/tmpths3e7ao.d(28): Error: C style cast illegal, use `cast(int)y`\n/tmp/tmpths3e7ao.d(28): Error: C style cast illegal, use `cast(int)z`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpths3e7ao.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163987
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n  if (x.is_integral() && y.is_integral() && z.is_integral())\n    return x + y == z || x + z == y || y + z == x;\n  return false;\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpwg8411dd.d(28): Error: no property `is_integral` for type `float`\n/tmp/tmpwg8411dd.d(28): Error: no property `is_integral` for type `float`\n/tmp/tmpwg8411dd.d(28): Error: no property `is_integral` for type `float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwg8411dd.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163987
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    return ((x + y == z) || (x + z == y) || (y + z == x)) && (is(typeof(x) == int) && is(typeof(y) == int) && is(typeof(z) == int));\n    \n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpt3oupxtt.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x427e9d]\n??:? void tmpt3oupxtt.__unittest_L31_C1() [0x427a44]\n??:? void tmpt3oupxtt.__modtest() [0x427c20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbc3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa56]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbe9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430098]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa2d]\n??:? runModuleUnitTests [0x42b999]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282ec]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163987
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    if (is(typeof(x) == int))\n    {\n        if (is(typeof(y) == int))\n        {\n            if (is(typeof(z) == int))\n            {\n                if ((x + y == z) || (x + z == y) || (y + z == x))\n                {\n                    return true;\n                }\n                else\n                {\n                    return false;\n                }\n            }\n            else\n            {\n                return false;\n            }\n        }\n        else\n        {\n            return false;\n        }\n    }\n    else\n    {\n        return false;\n    }\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpikgkqs2r.d(62): unittest failure\n----------------\n??:? _d_unittestp [0x427e95]\n??:? void tmpikgkqs2r.__unittest_L58_C1() [0x427a38]\n??:? void tmpikgkqs2r.__modtest() [0x427c14]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbbb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa4e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbe1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430090]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb6d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa25]\n??:? runModuleUnitTests [0x42b991]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282e4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163987
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    int n = int(x);\n    int m = int(y);\n    int o = int(z);\n    if (n == (m + o) || m == (n + o) || o == (n + m))\n        return true;\n    else\n        return false;\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6nqboyg9.d(28): Error: cannot implicitly convert expression `x` of type `float` to `int`\n/tmp/tmp6nqboyg9.d(29): Error: cannot implicitly convert expression `y` of type `float` to `int`\n/tmp/tmp6nqboyg9.d(30): Error: cannot implicitly convert expression `z` of type `float` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6nqboyg9.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163987
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    return (x == y + z) || (y == x + z) || (z == x + y);\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpx2oegioj.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427edd]\n??:? void tmpx2oegioj.__unittest_L30_C1() [0x427ae4]\n??:? void tmpx2oegioj.__modtest() [0x427c5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa96]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300d8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbb5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa6d]\n??:? runModuleUnitTests [0x42b9d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42832c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope void delegate",
      "stdout": "",
      "timestamp": 1660163986
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    float z1 = z - x;\n    float z2 = z - y;\n    float y1 = y - x;\n    float y2 = y - z;\n    float x1 = x - y;\n    float x2 = x - z;\n    bool z3 = is(typeof(z1) == long);\n    bool z4 = is(typeof(z2) == long);\n    bool y3 = is(typeof(y1) == long);\n    bool y4 = is(typeof(y2) == long);\n    bool x3 = is(typeof(x1) == long);\n    bool x4 = is(typeof(x2) == long);\n    return (z3 || z4 || y3 || y4 || x3 || x4);\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpa1kolhsl.d(46): unittest failure\n----------------\n??:? _d_unittestp [0x427f15]\n??:? void tmpa1kolhsl.__unittest_L42_C1() [0x427ab8]\n??:? void tmpa1kolhsl.__modtest() [0x427c94]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aace]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430110]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aaa5]\n??:? runModuleUnitTests [0x42ba11]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428364]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163987
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    if (is(typeof(x) == int) && is(typeof(y) == int) && is(typeof(z) == int)) \n    {\n        if ((x == y + z) || (y == x + z) || (z == x + y))\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n    else\n    {\n        return false;\n    }\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmphsm50f_z.d(48): unittest failure\n----------------\n??:? _d_unittestp [0x427e95]\n??:? void tmphsm50f_z.__unittest_L44_C1() [0x427a38]\n??:? void tmphsm50f_z.__modtest() [0x427c14]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbbb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa4e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbe1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430090]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb6d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa25]\n??:? runModuleUnitTests [0x42b991]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282e4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163987
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    return cast(bool)(x == y + z || y == x + z || z == x + y);\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpg13lb74c.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427edd]\n??:? void tmpg13lb74c.__unittest_L30_C1() [0x427ae4]\n??:? void tmpg13lb74c.__modtest() [0x427c5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa96]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300d8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbb5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa6d]\n??:? runModuleUnitTests [0x42b9d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42832c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163987
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    if(is(typeof(x)==int) && is(typeof(y)==int) && is(typeof(z)==int)) \n    {\n        if(x == y + z || x == y - z || x == z - y) \n        {\n            return true;\n        }\n        else if(y == x + z || y == x - z || y == z - x) \n        {\n            return true;\n        }\n        else if(z == x + y || z == x - y || z == y - x) \n        {\n            return true;\n        }\n        else \n        {\n            return false;\n        }\n    }\n    else \n    {\n        return false;\n    }\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp755uf_6t.d(56): unittest failure\n----------------\n??:? _d_unittestp [0x427e95]\n??:? void tmp755uf_6t.__unittest_L52_C1() [0x427a38]\n??:? void tmp755uf_6t.__modtest() [0x427c14]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbbb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa4e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbe1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430090]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb6d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa25]\n??:? runModuleUnitTests [0x42b991]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282e4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163988
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    if (is(typeof(x+y+z) == long) && (x+y == z || x+z == y || y+z == x)) return true;\n    else return false;\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmptvtw4n6m.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x427e95]\n??:? void tmptvtw4n6m.__unittest_L31_C1() [0x427a38]\n??:? void tmptvtw4n6m.__modtest() [0x427c14]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbbb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa4e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbe1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430090]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb6d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa25]\n??:? runModuleUnitTests [0x42b991]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282e4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163988
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    return (x == (y + z) || y == (x + z) || z == (x + y)) && is(typeof(x) == int) && is(typeof(y) == int) && is(typeof(z) == int);\n}\n/*\nReturn the sum of the `depth`-th level of nested tuples. The `depth`-th level of the tuple `t` is defined by\n`t`'s depth, depth(t) minus `depth`. The `depth`-th level of `t` is recursively defined as follows:\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpo1s0bk8j.d(30): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo1s0bk8j.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163987
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    long xl = long(x);\n    long yl = long(y);\n    long zl = long(z);\n    if (xl != x || yl != y || zl != z)\n        return false;\n    return (xl == (y + z)) || (yl == (x + z)) || (zl == (x + y));\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9dz0n4kl.d(28): Error: cannot implicitly convert expression `x` of type `float` to `long`\n/tmp/tmp9dz0n4kl.d(29): Error: cannot implicitly convert expression `y` of type `float` to `long`\n/tmp/tmp9dz0n4kl.d(30): Error: cannot implicitly convert expression `z` of type `float` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9dz0n4kl.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163987
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    return \n        is_integral_float(x) \n        && is_integral_float(y) \n        && is_integral_float(z) \n        && (x + y == z || y + z == x || x + z == y);\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1kz5rty6.d(29): Error: undefined identifier `is_integral_float`\n/tmp/tmp1kz5rty6.d(30): Error: undefined identifier `is_integral_float`\n/tmp/tmp1kz5rty6.d(31): Error: undefined identifier `is_integral_float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1kz5rty6.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163987
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    // write your code here\n    // 3 cases: \n    // x + y = z\n    // x + z = y\n    // y + z = x\n    int dx = (int)x;\n    int dy = (int)y;\n    int dz = (int)z;\n    bool res = 0;\n    if (dx + dy == dz)\n        res = 1;\n    if (dx + dz == dy)\n        res = 1;\n    if (dy + dz == dx)\n        res = 1;\n    return res;\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpdkeri2k8.d(33): Error: C style cast illegal, use `cast(int)x`\n/tmp/tmpdkeri2k8.d(34): Error: C style cast illegal, use `cast(int)y`\n/tmp/tmpdkeri2k8.d(35): Error: C style cast illegal, use `cast(int)z`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdkeri2k8.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163987
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n\tfloat max = 0.0;\n\tfloat min = 0.0;\n\t\n\tfloat sum = x + y + z;\n\t\n\tif(x >= y)\n\t{\n\t\tmax = x;\n\t\tmin = y;\n\t}\n\telse\n\t{\n\t\tmax = y;\n\t\tmin = x;\n\t}\n\t\n\tif(max < z)\n\t{\n\t\tmax = z;\n\t}\n\telse if(min > z)\n\t{\n\t\tmin = z;\n\t}\n\t\n\treturn is_even(min) && is_even(sum - min - max) && is_even(max - min) && is_even(sum - max);\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpkhufrybs.d(53): Error: undefined identifier `is_even`\n/tmp/tmpkhufrybs.d(53): Error: undefined identifier `is_even`\n",
      "stdout": "",
      "timestamp": 1660163987
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    //return ((x + y == z) || (x + z == y) || (y + z == x));\n    return ((x + y == z) || (x + z == y) || (y + z == x)) && (is(typeof(x) == long)) && (is(typeof(y) == long)) && (is(typeof(z) == long));\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpex60i82f.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x427e95]\n??:? void tmpex60i82f.__unittest_L31_C1() [0x427a38]\n??:? void tmpex60i82f.__modtest() [0x427c14]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbbb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa4e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbe1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430090]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb6d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa25]\n??:? runModuleUnitTests [0x42b991]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282e4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163988
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    if (is(typeof(x) == int) && is(typeof(y) == int) && is(typeof(z) == int)) \n    {\n        if (x + y == z || x + z == y || y + z == x) \n        {\n            return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpz5ewc_41.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x427e95]\n??:? void tmpz5ewc_41.__unittest_L37_C1() [0x427a38]\n??:? void tmpz5ewc_41.__modtest() [0x427c14]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbbb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa4e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbe1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430090]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb6d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa25]\n??:? runModuleUnitTests [0x42b991]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282e4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163988
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{ \n    if (x == y + z || y == x + z || z == x + y) \n        return true; \n    else\n        return false; \n} \nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpcacstibz.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x427ed5]\n??:? void tmpcacstibz.__unittest_L33_C1() [0x427ae0]\n??:? void tmpcacstibz.__modtest() [0x427c58]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbfb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa8e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa65]\n??:? runModuleUnitTests [0x42b9d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428324]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163988
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n    float sum = 0;\n    if(y + z == x)\n    {\n        return true;\n    }\n    else if(x + z == y)\n    {\n        return true;\n    }\n    else if(x + y == z)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\n/*\nCreate a function that takes two numbers and returns the maximum of the two.\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4m86mln8.d(46): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4m86mln8.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163987
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z) \n{\n   if ( is(typeof(x)) && is(typeof(y)) && is(typeof(z)) )\n   {\n     if ( (x == (y + z)) || (y == (x + z)) || (z == (x + y)) )\n       return true;\n     else\n       return false;\n   }\n   else \n   {\n     return false;\n   } \n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpu6adoyfs.d(46): unittest failure\n----------------\n??:? _d_unittestp [0x427ed5]\n??:? void tmpu6adoyfs.__unittest_L40_C1() [0x427ae0]\n??:? void tmpu6adoyfs.__modtest() [0x427c58]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbfb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa8e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa65]\n??:? runModuleUnitTests [0x42b9d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428324]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163988
    }
  ]
}