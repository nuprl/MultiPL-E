name: HumanEval_98_count_upper
language: d
results:
- program: "import std.math;\n/*\n\n    Given a string s, count the number of uppercase\
    \ vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\"\
    )\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\"\
    )\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long result = 0;\n  \
    \  foreach(immutable index, immutable char c; s) \n    {\n        if(index % 2\
    \ == 0 && (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')) \n     \
    \   {\n            result++;\n        }\n    }\n    return result;\n}\n/*\n  \
    \  Write a function that takes in a set of integers and returns an array of the\
    \ powerset\n    of that set.\nunittest\n{\n    alias candidate = count_upper;\n\
    \n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\")\
    \ == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\"\
    ) == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") ==\
    \ 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi13a7rjh.d(27): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi13a7rjh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given a string s, count the number of uppercase\
    \ vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\"\
    )\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\"\
    )\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long r = 0;\n    foreach(immutable\
    \ c; s)\n    {\n        if((c >= 'A' && c <= 'Z') && (r++ & 1) == 0)\n       \
    \     continue;\n    }\n    return r;\n}\nunittest\n{\n    alias candidate = count_upper;\n\
    \n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\")\
    \ == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\"\
    ) == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") ==\
    \ 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpv6_228b2.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e45]\\n??:? void tmpv6_228b2.__unittest_L25_C1()\
    \ [0x427ab6]\\n??:? void tmpv6_228b2.__modtest() [0x427bc4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb6b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9fe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb91]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430040]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb1d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9d5]\\n??:? runModuleUnitTests [0x42b941]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428294]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42821b]\\n??:? _d_run_main [0x428186]\\n??:? main [0x427bd7]\\\
    n??:? __libc_start_main [0x15190554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a string s, count the number of uppercase\
    \ vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\"\
    )\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\"\
    )\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long count = 0;\n   \
    \ foreach(i, c; s)\n    {\n        if(c == 'A' || c == 'E' || c == 'I' || c ==\
    \ 'O' || c == 'U')\n        {\n            if(i % 2 == 0)\n            {\n   \
    \             count++;\n            }\n        }\n    }\n    return count;\n}\n\
    /*\n    Write a function that returns the count of a given character in a string.\n\
    \    \n    For example:\n    >>> char_count(\"foobar\", 'o')\n    2L\n    >>>\
    \ char_count(\"bazzzzzz\", 'z')\n    5L\n    >>> char_count(\"count\", 'x')\n\
    \    0L\n*/\nlong char_count(string s, char c) \n{\n    long count = 0;\n    foreach(i,\
    \ d; s)\n    {\n        if(d == c)\n        {\n            count++;\n        }\n\
    \    }\n    return count;\n}\n/*\n    Write a function that returns true if the\
    \ first half of a string is the\n    same as the second half, otherwise false.\n\
    \    \n    For example:\n    >>> half_match(\"foobar\")\n    false\n    >>> half_match(\"\
    abcdabcd\")\n    true\n    >>> half_match(\"\")\n    true\n*/\nunittest\n{\n \
    \   alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n\
    \    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") ==\
    \ 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a string s, count the number of uppercase\
    \ vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\"\
    )\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\"\
    )\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long result = 0;\n  \
    \  for (size_t i = 0; i < s.length; i++)\n    {\n        if (i % 2 == 0 && s[i]\
    \ == toupper(s[i]))\n        {\n            result++;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"\
    aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"\
    dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"\
    U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\"\
    ) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyzstpmvh.d(20): Error: undefined identifier `toupper`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyzstpmvh.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given a string s, count the number of uppercase\
    \ vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\"\
    )\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\"\
    )\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    // Your code here\n \
    \   int count = 0;\n    foreach(i, c; s)\n    {\n        if(isUpper(c) && (i %\
    \ 2 == 0))\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\n// NOTE: The following autograder code must remain at the bottom of this file\n\
    //       uncommented so that it can be executed by the autograder.\n//\n// POST\
    \ SUBMISSION: remove all of the code below this line\n//\n/*\nunittest\n{\n  \
    \  alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n\
    \    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") ==\
    \ 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfhdhc2eh.d(33): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfhdhc2eh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given a string s, count the number of uppercase\
    \ vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\"\
    )\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\"\
    )\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long count = 0;\n   \
    \ for (size_t i = 0; i < s.length; i += 2)\n    {\n        if (s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"\
    abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"\
    B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\")\
    \ == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a string s, count the number of uppercase\
    \ vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\"\
    )\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\"\
    )\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long result;\n    long\
    \ i;\n    result = 0L;\n    foreach (c; s)\n    {\n        if (c in ['A', 'E',\
    \ 'I', 'O', 'U'])\n        {\n            i++;\n            if (i % 2L == 0L)\n\
    \            {\n                result++;\n            }\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n   \
    \ assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n\
    \    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n\
    \    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n   \
    \ assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1twngr7b.d(22): Error: incompatible types for `(c) in ([\\'A\\\
    ', \\'E\\', \\'I\\', \\'O\\', \\'U\\'])`: `immutable(char)` and `char[]`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1twngr7b.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given a string s, count the number of uppercase\
    \ vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\"\
    )\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\"\
    )\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long result = 0;\n  \
    \  foreach(index, i; s) \n    {\n        if(index % 2 == 0) \n        {\n    \
    \        foreach(char c; \"AEIOU\") \n            {\n                if(s[i] ==\
    \ c) \n                {\n                    result++;\n                }\n \
    \           }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"\
    abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"\
    B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\")\
    \ == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp9vo323wt.d(24): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x427f56]\\n??:? long tmp9vo323wt.count_upper(immutable(char)[])\
    \ [0x427ab9]\\n??:? void tmp9vo323wt.__unittest_L33_C1() [0x427aff]\\n??:? void\
    \ tmp9vo323wt.__modtest() [0x427c28]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc3f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aad2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aaa9]\\n??:? runModuleUnitTests [0x42ba15]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428368]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282ef]\\n??:? _d_run_main [0x42825a]\\n??:? main [0x427c3b]\\\
    n??:? __libc_start_main [0x51f07554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a string s, count the number of uppercase\
    \ vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\"\
    )\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\"\
    )\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long count = 0;\n   \
    \ foreach(idx, char ch; s) \n    {\n        if((idx & 1) == 0 && isupper(ch))\n\
    \            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"\
    abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"\
    B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\")\
    \ == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuu_8ugkf.d(20): Error: undefined identifier `isupper`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuu_8ugkf.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given a string s, count the number of uppercase\
    \ vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\"\
    )\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\"\
    )\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long sum = 0;\n    for\
    \ (auto i = 0; i < s.length; i++)\n    {\n        if (i % 2 == 0 && s[i] >= 'A'\
    \ && s[i] <= 'Z')\n        {\n            sum++;\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"\
    aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"\
    dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"\
    U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\"\
    ) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpb47h5vak.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e6d]\\n??:? void tmpb47h5vak.__unittest_L27_C1()\
    \ [0x427ae2]\\n??:? void tmpb47h5vak.__modtest() [0x427bf0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc07]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa9a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc2d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4300dc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbb9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa71]\\n??:? runModuleUnitTests [0x42b9dd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428330]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282b7]\\n??:? _d_run_main [0x428222]\\n??:? main [0x427c03]\\\
    n??:? __libc_start_main [0xe3f29554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a string s, count the number of uppercase\
    \ vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\"\
    )\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\"\
    )\n    0L\n    \n*/\nlong count_upper(string s) \n{\n  long result = 0;\n  for\
    \ (size_t i = 0; i < s.length; i++)\n  {\n    if (i % 2 == 0 && (s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'))\n      result++;\n\
    \  }\n  return result;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n\
    \    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") ==\
    \ 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") ==\
    \ 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n\
    \    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a string s, count the number of uppercase\
    \ vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\"\
    )\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\"\
    )\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long count = 0;\n   \
    \ foreach(char c; s[2..$])\n    {\n        // Even indices.\n        if(toupper(c)\
    \ == 'A' || toupper(c) == 'E' || toupper(c) == 'I' || toupper(c) == 'O' || toupper(c)\
    \ == 'U')\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"\
    aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"\
    dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"\
    U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\"\
    ) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpswk3whok.d(21): Error: undefined identifier `toupper`\\n/tmp/tmpswk3whok.d(21):\
    \ Error: undefined identifier `toupper`\\n/tmp/tmpswk3whok.d(21): Error: undefined\
    \ identifier `toupper`\\n/tmp/tmpswk3whok.d(21): Error: undefined identifier `toupper`\\\
    n/tmp/tmpswk3whok.d(21): Error: undefined identifier `toupper`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpswk3whok.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given a string s, count the number of uppercase\
    \ vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\"\
    )\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\"\
    )\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long r;\n    foreach(char\
    \ c; 0 .. s.length)\n    {\n        if(('A' <= c && c <= 'Z') && c.isVowel &&\
    \ c % 2 == 0)\n        {\n            r += 1;\n        }\n    }\n    return r;\n\
    }\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"\
    aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"\
    dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"\
    U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\"\
    ) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9iuwkx7a.d(18): Error: cannot implicitly convert expression `s.length`\
    \ of type `ulong` to `char`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp9iuwkx7a.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given a string s, count the number of uppercase\
    \ vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\"\
    )\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\"\
    )\n    0L\n    \n*/\nlong count_upper(string s) \n{\n  long result = 0;\n  foreach(i,c;\
    \ s)\n  {\n    if(i % 2 == 0 && isupper(c))\n    {\n      result++;\n    }\n \
    \ }\n  return result;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n\
    \    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") ==\
    \ 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") ==\
    \ 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n\
    \    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplx2hpka3.d(20): Error: undefined identifier `isupper`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplx2hpka3.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given a string s, count the number of uppercase\
    \ vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\"\
    )\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\"\
    )\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long count = 0;\n   \
    \ for (long i = 0; i < s.length; i += 2)\n    {\n        if (isVowel(s[i]) &&\
    \ isUpper(s[i]))\n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"\
    aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"\
    dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"\
    U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\"\
    ) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxozr398v.d(20): Error: undefined identifier `isVowel`\\n/tmp/tmpxozr398v.d(20):\
    \ Error: undefined identifier `isUpper`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpxozr398v.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given a string s, count the number of uppercase\
    \ vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\"\
    )\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\"\
    )\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long count = 0;\n   \
    \ foreach(i, e; s) \n    {\n        if (i % 2 == 0 && isupper(e)) \n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\n/*\n    Write a\
    \ function that returns the index of the first negative number in a \n    given\
    \ array. The array is not sorted.\n    \n    For example:\n    >>> index_first_negative([1,\
    \ -2, 3, -4, -5, 6, 7])\n    1L\n    >>> index_first_negative([1, -2, 3, -4, -5,\
    \ 6, 7, -8])\n    1L\n    >>> index_first_negative([1, 2, 3, 4, 5, 6, 7])\n  \
    \  -1L\n*/\nlong index_first_negative(long[] a) \n{\n    long[]::size_type index\
    \ = 0;\n    while (index < a.length && a[index] >= 0) \n    {\n        index++;\n\
    \    }\n    if (index < a.length) \n    {\n        return index;\n    }\n    return\
    \ -1;\n}\n/*\n    Write a function that takes a string s and a double d and returns\
    \ the number \n    of digits in d that exist in s.\n    \n    For example:\n \
    \   >>> count_digits(\"abcdef\", 5.82)\n    2L\n    >>> count_digits(\"jfkaljfd\"\
    , 5.82)\n    0L\n    >>> count_digits(\"jfkal5jfd2\", 5.82)\n    2L\n*/\nlong\
    \ count_digits(string s, double d) \n{\n    long count = 0;\n    foreach(c; s)\
    \ \n    {\n        if (isdigit(c)) \n        {\n            foreach(n; to!string(d))\
    \ \n            {\n                if (c == n) \n                {\n         \
    \           count++;\n                }\n            }\n        }\n    }\n   \
    \ return count;\n}\n/*\n    Write a function that takes two strings s and t and\
    \ returns true if they \n    overlap each other.\n\nunittest\n{\n    alias candidate\
    \ = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"\
    abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"\
    B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\")\
    \ == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmporog50ub.d(41): Error: no identifier for declarator `long[]`\\\
    n/tmp/tmporog50ub.d(41): Error: found `:` instead of statement\\n/tmp/tmporog50ub.d(82):\
    \ Error: unterminated /* */ comment\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmporog50ub.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given a string s, count the number of uppercase\
    \ vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\"\
    )\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\"\
    )\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long l = 0;\n    auto\
    \ c = s.length;\n    for (int i = 0; i < c; i += 2)\n    {\n        if (i % 2\
    \ == 0)\n        {\n            if (toupper(s[i]) == 'A' || toupper(s[i]) == 'E'\
    \ || toupper(s[i]) == 'I' || toupper(s[i]) == 'O' || toupper(s[i]) == 'U')\n \
    \           {\n                l++;\n            }\n        }\n    }\n    return\
    \ l;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"\
    aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"\
    dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"\
    U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\"\
    ) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp28b3iafc.d(23): Error: undefined identifier `toupper`\\n/tmp/tmp28b3iafc.d(23):\
    \ Error: undefined identifier `toupper`\\n/tmp/tmp28b3iafc.d(23): Error: undefined\
    \ identifier `toupper`\\n/tmp/tmp28b3iafc.d(23): Error: undefined identifier `toupper`\\\
    n/tmp/tmp28b3iafc.d(23): Error: undefined identifier `toupper`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp28b3iafc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given a string s, count the number of uppercase\
    \ vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\"\
    )\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\"\
    )\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long sum = 0;\n    for\
    \ (size_t i = 0; i < s.length; i++)\n    {\n        if (i % 2 == 0 && s[i] >=\
    \ 'A' && s[i] <= 'Z')\n        {\n            sum += 1;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"\
    aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"\
    dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"\
    U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\"\
    ) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpxdatrfzy.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e65]\\n??:? void tmpxdatrfzy.__unittest_L27_C1()\
    \ [0x427ada]\\n??:? void tmpxdatrfzy.__modtest() [0x427be8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bbff]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa92]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc25]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4300d4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbb1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa69]\\n??:? runModuleUnitTests [0x42b9d5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428328]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282af]\\n??:? _d_run_main [0x42821a]\\n??:? main [0x427bfb]\\\
    n??:? __libc_start_main [0x85f5d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a string s, count the number of uppercase\
    \ vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\"\
    )\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\"\
    )\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long l = 0;\n    foreach(immutable\
    \ c; s)\n    {\n        if(c >= 'A' && c <= 'Z' && l % 2 == 0)\n            l++;\n\
    \        l++;\n    }\n    return l / 2;\n}\nunittest\n{\n    alias candidate =\
    \ count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"\
    abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"\
    B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\")\
    \ == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp0eploe_z.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e5d]\\n??:? void tmp0eploe_z.__unittest_L26_C1()\
    \ [0x427ad2]\\n??:? void tmp0eploe_z.__modtest() [0x427be0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb83]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa16]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fba9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430058]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9ed]\\n??:? runModuleUnitTests [0x42b959]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282ac]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428233]\\n??:? _d_run_main [0x42819e]\\n??:? main [0x427bf3]\\\
    n??:? __libc_start_main [0x9c4e8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a string s, count the number of uppercase\
    \ vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\"\
    )\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\"\
    )\n    0L\n    \n*/\nlong count_upper(string s) \n{\n  long count = 0;\n  foreach(immutable\
    \ char c; s)\n  {\n    if(isupper(c) && (count % 2 == 0))\n      count++;\n  }\n\
    \  return count;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"\
    aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"\
    dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"\
    U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\"\
    ) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8cxv0i7a.d(20): Error: undefined identifier `isupper`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8cxv0i7a.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
