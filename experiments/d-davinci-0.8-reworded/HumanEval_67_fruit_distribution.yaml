name: HumanEval_67_fruit_distribution
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n\n    In this task, you will\
  \ be given a string that represents a number of apples and oranges \n    that are\
  \ distributed in a basket of fruit this basket contains \n    apples, oranges, and\
  \ mango fruits. Given the string that represents the total number of \n    the oranges\
  \ and apples and an integer that represent the total number of the fruits \n   \
  \ in the basket return the number of the mango fruits in the basket.\n    for examble:\n\
  \    >>> fruit_distribution(\"5 apples and 6 oranges\", 19L)\n    8L\n    >>> fruit_distribution(\"\
  0 apples and 1 oranges\", 3L)\n    2L\n    >>> fruit_distribution(\"2 apples and\
  \ 3 oranges\", 100L)\n    95L\n    >>> fruit_distribution(\"100 apples and 1 oranges\"\
  , 120L)\n    19L\n    \n*/\nlong fruit_distribution(string s, long n) \n"
tests: "unittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"\
  5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\"\
  , 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n\
  \    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"\
  2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3\
  \ oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L)\
  \ == 19L);\n}\nvoid main(){}"
completions: ["{\n    /* \n    1. First we create an Alias-declaration that is a shorter\
    \ version of the tuple \n    type of the std.typecons.Tuple.\n    */\n    alias\
    \ Tuple!(string, string, long) Fruits;\n    /*\n    2. We call the function that\
    \ implements the parsing of the input string and returns a tuple\n    according\
    \ to the format string.\n    */\n    Fruits number_of_fruits = parse!(\"{} {}\
    \ and {} {}\", s);\n    /*\n    3. We convert the number of the fruits to long\
    \ using the std.conv.to method and we calculate\n    the rest of the fruit in\
    \ the basket.\n    */\n    return n - to!long(number_of_fruits[0]) - to!long(number_of_fruits[2]);\n\
    }", "{\n  auto numbers = s.split(\" \");\n  if (numbers.length == 3 && numbers[1]\
    \ == \"apples\" && numbers[3] == \"oranges\") \n  {\n    return n - (to!long(numbers[0])\
    \ + to!long(numbers[2]));\n  }\n  return 0L;\n}\n/*", "{\n    // Your code here!\n\
    \    size_t pos = s.find(\"apples\");\n    size_t offset = pos + 7;\n    int apples\
    \ = stoi(s.substr(0, pos));\n    int oranges = stoi(s.substr(offset, s.size()));\n\
    \    return n - apples - oranges;\n}", "{\n    long apples = 0;\n    long oranges\
    \ = 0;\n    foreach(immutable(r); s.split())\n    {\n        if(r.compare(\"apples\"\
    ) == 0)\n        {\n            apples = to!long(s.split().front);\n        }\n\
    \        else if(r.compare(\"oranges\") == 0)\n        {\n            oranges\
    \ = to!long(s.split().back);\n        }\n    }\n    return n - (apples + oranges);\n\
    }", "{\n    auto sarray = s.split;\n    int num_of_apples = to!int(sarray[0]);\n\
    \    int num_of_oranges = to!int(sarray[3]);\n    return n - num_of_apples - num_of_oranges;\n\
    }", "{\n    immutable pieces = s.split;\n    if (pieces.length != 3)\n       \
    \ throw new Exception(\"The input string is not in the correct format\");\n  \
    \  if (pieces[1] != \"apples\" && pieces[1] != \"oranges\")\n        throw new\
    \ Exception(\"The input string is not in the correct format\");\n    if (pieces[2]\
    \ != \"apples\" && pieces[2] != \"oranges\")\n        throw new Exception(\"The\
    \ input string is not in the correct format\");\n    if (pieces[1] == pieces[2])\n\
    \        throw new Exception(\"The input string is not in the correct format\"\
    );\n    immutable apples = to!long(pieces[0]);\n    immutable oranges = to!long(pieces[2]);\n\
    \    return n - apples - oranges;\n}", "{\n     auto st = new Split(s, \"and\"\
    );\n     auto [a, b] = tuple(st.popFront, st.popFront);\n     auto [c, d] = tuple(a.popFront,\
    \ b.popFront);\n     auto [e, f] = tuple(a.popFront, b.popFront);\n     return\
    \ n - to!long(c) - to!long(f);\n}\n/*\n    >>> fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19L)\n    8L\n    >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3L)\n    2L\n    >>> fruit_distribution(\"2 apples and 3 oranges\", 100L)\n\
    \    95L\n    >>> fruit_distribution(\"100 apples and 1 oranges\", 120L)\n   \
    \ 19L\n*/", "{\n    /* \n        The input is a string and an integer.\n     \
    \   s: The string represents the number of apples and oranges that are distributed\
    \ in a basket of fruit \n        this basket contains apples, oranges, and mango\
    \ fruits.\n        n: The integer represent the total number of the fruits in\
    \ the basket.\n        return: The number of the mango fruits in the basket.\n\
    \    */\n    int a, b;\n    foreach(inout char c; s)\n    {\n        if(isDigit(c))\n\
    \        {\n            int ci = to!int(c);\n            if(a < 0)\n         \
    \       b = ci;\n            else\n                a = ci;\n        }\n      \
    \  else if(c == ' ')\n        {\n            a = -1;\n        }\n    }\n    return\
    \ n - a - b;\n}", "{\n\timport std.array;\n\timport std.conv;\n\timport std.format;\n\
    \timport std.string;\n\timport std.algorithm;\n\timport std.range;\n\timport std.stdio;\n\
    \timport std.typecons;\n\t\n\t\n\tint[string] arr = [ \"0\" : 0, \"1\" : 1, \"\
    2\" : 2, \"3\" : 3, \"4\" : 4, \"5\" : 5, \n\t\t\t\t\t\t\"6\" : 6, \"7\" : 7,\
    \ \"8\" : 8, \"9\" : 9, \"apples\" : 0, \n\t\t\t\t\t\t\"oranges\" : 0, \"and\"\
    \ : 0, \" \" : 0, \"mangoes\" : 0 ];\n\t\n\tint count = 0;\n\t\n\tint[string]\
    \ fruit_count = [ \"apples\" : 0, \"oranges\" : 0 ];\n\t\n\tforeach(i; split(s,\
    \ \" \"))\n\t{\n\t\tif(arr.find(i) == null)\n\t\t{\n\t\t\treturn 0;\n\t\t}\n\t\
    \t\n\t\tif(fruit_count.find(i) != null)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\t\n\t\
    \tif(count == 3)\n\t\t{\n\t\t\tint apples = to!int(i);\n\t\t\tfruit_count[\"apples\"\
    ] = apples;\n\t\t\tcount = 0;\n\t\t}\n\t\telse if(count == 2)\n\t\t{\n\t\t\tint\
    \ oranges = to!int(i);\n\t\t\tfruit_count[\"oranges\"] = oranges;\n\t\t\tcount\
    \ = 0;\n\t\t}\n\t}\n\t\n\tlong mangoes = n - (fruit_count[\"apples\"] + fruit_count[\"\
    oranges\"]);\n\t\n\treturn mangoes;\n}", "{\n    long res=0;\n    long a=0,o=0;\n\
    \    int i=0;\n    while(s[i]!=' ')\n    {\n        a=a*10+s[i]-'0';\n       \
    \ i++;\n    }\n    i=i+8;\n    while(s[i]!=' ')\n    {\n        o=o*10+s[i]-'0';\n\
    \        i++;\n    }\n    res=n-(a+o);\n    return res;\n}", "{ \n    long total\
    \ = n;\n    string[] splitted = split(s);\n    total -= to!long(splitted[0]);\n\
    \    total -= to!long(splitted[4]);\n    return total;\n} \n ", "{\n    int x,\
    \ y;\n    // parse s for x, y\n    {\n        int pos = s.find('a');\n       \
    \ assert(pos != -1);\n        x = to!int(s[0 .. pos - 1]);\n    }\n    {\n   \
    \     int pos = s.find('o');\n        assert(pos != -1);\n        y = to!int(s[pos\
    \ - 1 .. $]);\n    }\n    return cast(long)(n - x - y);\n}\n/*\n    You are given\
    \ a string that represents a number of apples, \n    oranges, and mango fruits.\
    \ Given the string that represents the total number of \n    the fruits and an\
    \ integer that represent the total number of the fruits \n    in the basket return\
    \ the number of the mango fruits in the basket.\n    You can assume that the string\
    \ contain only two kinds of fruits.\n    for examble:\n    >>> fruit_distribution_generic(\"\
    5 apples and 6 oranges\", 19L)\n    8L\n    >>> fruit_distribution_generic(\"\
    5 apples and 6 mango\", 19L)\n    8L\n    >>> fruit_distribution_generic(\"0 apples\
    \ and 1 oranges\", 3L)\n    2L\n    >>> fruit_distribution_generic(\"2 apples\
    \ and 3 oranges\", 100L)\n    95L\n    >>> fruit_distribution_generic(\"100 apples\
    \ and 1 oranges\", 120L)\n    19L\n*/\nlong fruit_distribution_generic(string\
    \ s, long n) \n{\n    int i, j;\n    string a, b;\n    {\n        auto pos = s.find('a');\n\
    \        assert(pos != -1);\n        i = to!int(s[0 .. pos - 1]);\n        a =\
    \ s[pos .. $].split(' ')[1];\n    }\n    {\n        auto pos = s.find(' ');\n\
    \        pos = s[pos .. $].find(' ');\n        assert(pos != -1);\n        j =\
    \ to!int(s[pos .. $]);\n        b = s[pos .. $].split(' ')[1];\n    }\n    return\
    \ cast(long)(n - i - j);\n}\n/*\n    Given a string that represents a game of\
    \ tic-", "{\n    string[] fruits = split(s, \" and \");\n    tuple!(string, string)[]\
    \ values = [];\n    foreach(fruit; fruits)\n    {\n        int i = 0;\n      \
    \  while(i < fruit.length && isDigit(fruit[i]))\n        {\n            i++;\n\
    \        }\n        string num = fruit[0..i];\n        string fruitName = fruit[i..$];\n\
    \        values ~= tuple(num, fruitName);\n    }\n    long total = 0;\n    foreach(tup;\
    \ values)\n    {\n        if(tup[1] == \"apples\")\n        {\n            total\
    \ += to!long(tup[0]);\n        }\n        else if(tup[1] == \"oranges\")\n   \
    \     {\n            total += to!long(tup[0]);\n        }\n    }\n    return n\
    \ - total;\n}", "{\n    auto sum = s.split(' ');\n    auto a = 0.0;\n    auto\
    \ o = 0.0;\n    foreach(b; sum)\n    {\n        if(b.isNumeric)\n        {\n \
    \           a = b.to!long;\n        }\n        else if(b.isNumeric)\n        {\n\
    \            o = b.to!long;\n        }\n    }\n    return n - a - o;\n}", "{\n\
    \    auto start = s.length - 1;\n    auto end = s.length - 1;\n    auto num_fruits\
    \ = 0;\n    while (start > 0)\n    {\n        if (s[start - 1] == ' ')\n     \
    \   {\n            break;\n        }\n        else\n        {\n            start--;\n\
    \        }\n    }\n    num_fruits = to!int(s[start..end]);\n    end = start -\
    \ 1;\n    start--;\n    while (start > 0)\n    {\n        if (s[start - 1] ==\
    \ ' ')\n        {\n            break;\n        }\n        else\n        {\n  \
    \          start--;\n        }\n    }\n    num_fruits += to!int(s[start..end]);\n\
    \    return n - num_fruits;\n}\n// to run the code:\nunittest\n{\n    assert(fruit_distribution(\"\
    5 apples and 6 oranges\", 19L) == 8L);\n    assert(fruit_distribution(\"0 apples\
    \ and 1 oranges\", 3L) == 2L);\n    assert(fruit_distribution(\"2 apples and 3\
    \ oranges\", 100L) == 95L);\n    assert(fruit_distribution(\"100 apples and 1\
    \ oranges\", 120L) == 19L);\n}", "{\n\tsize_t length = s.length;\n\tint* a = new\
    \ int[length];\n\tsize_t f = 0;\n\tfor (size_t i = 0; i < length; i++)\n\t{\n\t\
    \tif (s[i] == ' ')\n\t\t{\n\t\t\tsize_t j = i + 1;\n\t\t\twhile (s[j] != ' ')\
    \ j++;\n\t\t\tf = j - i - 1;\n\t\t\tbreak;\n\t\t}\n\t\ta[i] = s[i] - '0';\n\t\
    }\n\tsize_t t = length - f - 12;\n\tint apples = 0;\n\tint oranges = 0;\n\tint\
    \ p = 1;\n\tfor (size_t i = t - 1; i < t; i--)\n\t{\n\t\tapples += a[i] * p;\n\
    \t\tp *= 10;\n\t}\n\tp = 1;\n\tfor (size_t i = length - 1; i > length - f - 1;\
    \ i--)\n\t{\n\t\toranges += a[i] * p;\n\t\tp *= 10;\n\t}\n\treturn n - (apples\
    \ + oranges);\n}", "{\n    long fruits[2] = [0L, 0L];\n    string fruitNames[2]\
    \ = [\"apples\", \"oranges\"];\n    foreach(index, fruit; fruitNames)\n    {\n\
    \        string[] parts = s.split(fruit);\n        string num = parts[0].split(\"\
    \ \")[2].to!long();\n        fruits[index] = num;\n    }\n    long mango = n -\
    \ fruits[0] - fruits[1];\n    return mango;\n}", "{\n    s=s.replace(\"apples\"\
    , \"\");\n    s=s.replace(\"oranges\", \"\");\n    size_t a=s.indexOf(\"and\"\
    );\n    s=s.replace(\"and\", \"\");\n    int app=to!int(s[0..a]);\n    int oran=to!int(s[a+1..$]);\n\
    \    return n-(app+oran);\n}", "{\n    auto pair = split(s, \" and \");\n    int\
    \ apples = to!int(pair[0][0..$-7]);\n    int oranges = to!int(pair[1][0..$-8]);\n\
    \    return n - apples - oranges;\n}", "{\n    auto a = split(s, \" \");\n   \
    \ return n - to!long(a[0]) - to!long(a[3]);\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
