language: d
name: HumanEval_108_count_nums
results:
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long result = 0L;\n    foreach(i; arr)\n    {\n        if(abs(i) >\
    \ 9)\n        {\n            auto result_sum = tuple(i);\n            while(result_sum[0]\
    \ > 9)\n            {\n                result_sum = tuple(i);\n              \
    \  foreach(j; 0..result_sum.length)\n                {\n                    result_sum[0]\
    \ += result_sum[j];\n                }\n                i = result_sum[0];\n \
    \           }\n        }\n        if(i > 0)\n        {\n            result++;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_nums;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n\
    \    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L,\
    \ 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L,\
    \ 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) ==\
    \ 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L]) ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgaollw7o.d(30): Error: variable `j` cannot be read at compile
    time\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgaollw7o.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long result = 0L;\n    foreach(i; arr)\n    {\n        if(i < 0) i\
    \ = -i;\n        long sum = 0L;\n        while(i != 0)\n        {\n          \
    \  sum += i % 10;\n            i /= 10;\n        }\n        if(sum > 0)\n    \
    \        result++;\n    }\n    return result;\n}\n/*\nunittest\n{\n    alias candidate\
    \ = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz4rwx84w.d(34): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpz4rwx84w.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    return arr.map!((long l) => Math.abs(l)).map!((long l) => l.toString.sum!\"\
    (a, b) => a.to!int + b.to!int\").count!((long l) => l > 0);\n}\n// void test()\n\
    // {\n//     auto arr = [1L, 1L, 2L];\n//     auto arr1 = arr.map!((long l) =>\
    \ Math.abs(l));\n//     long num = arr1.map!((long l) => l.toString.sum!\"(a,\
    \ b) => a.to!int + b.to!int\").count!((long l) => l > 0);\n//     assert(num ==\
    \ 3L);\n// }\n}\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0go4ml8n.d(28): Error: unrecognized declaration\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp0go4ml8n.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n  long count = 0;\n  foreach(long i; arr)\n  {\n    if (i < 0)\n      i\
    \ = -i;\n    long sum = 0;\n    while (i != 0)\n    {\n      sum += i % 10;\n\
    \      i /= 10;\n    }\n    if (sum > 0)\n      count++;\n  }\n  return count;\n\
    }\n/*\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppku2uz9a.d(35): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmppku2uz9a.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n\tlong ret = 0;\n\tforeach(elem; arr) \n\t{\n\t\tif(elem<0) \n\t\t{\n\t\
    \t\telem *= -1;\n\t\t}\n\t\tlong sum = 0;\n\t\twhile(elem>0) \n\t\t{\n\t\t\tsum\
    \ += elem%10;\n\t\t\telem /= 10;\n\t\t}\n\t\tif(sum > 0)\n\t\t{\n\t\t\tret++;\n\
    \t\t}\n\t}\n\treturn ret;\n}\nunittest\n{\n    alias candidate = count_nums;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n\
    \    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L,\
    \ 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L,\
    \ 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) ==\
    \ 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L]) ==\
    \ 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmploboeu_8.d(44): unittest failure\n----------------\n??:?
    _d_unittestp [0x428315]\n??:? void tmploboeu_8.__unittest_L39_C1() [0x427e36]\n??:?
    void tmploboeu_8.__modtest() [0x428098]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c323]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430349]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4307f8]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302d5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b18d]\n??:? runModuleUnitTests [0x42c0f9]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428764]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4286eb]\n??:? _d_run_main [0x428656]\n??:? main [0x4280ab]\n??:?
    __libc_start_main [0xef232554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long counter = 0;\n    foreach(i; arr)\n    {\n        long number\
    \ = i;\n        long total = 0;\n        if(number == 0) \n        {\n       \
    \     counter += 1;\n        }\n        while(number != 0)\n        {\n      \
    \      number = abs(number);\n            total += number % 10;\n            number\
    \ /= 10;\n        }\n        if(total > 0)\n        {\n            counter +=\
    \ 1;\n        }\n    }\n    return counter;\n}\nunittest\n{\n    alias candidate\
    \ = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpknq3vu6l.d(46): unittest failure\n----------------\n??:?
    _d_unittestp [0x428385]\n??:? void tmpknq3vu6l.__unittest_L41_C1() [0x427e8e]\n??:?
    void tmpknq3vu6l.__modtest() [0x428108]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c393]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b226]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303b9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430868]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430345]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1fd]\n??:? runModuleUnitTests [0x42c169]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287d4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42875b]\n??:? _d_run_main [0x4286c6]\n??:? main [0x42811b]\n??:?
    __libc_start_main [0x58cc4554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long count = 0;\n    foreach(num; arr) \n    {\n        if(sum_digits(num)\
    \ > 0) \n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nlong sum_digits(long num) \n{\n    long sum = 0;\n    long num_abs = abs(num);\n\
    \    while(num_abs > 0) \n    {\n        sum += num_abs % 10;\n        num_abs\
    \ /= 10;\n    }\n    return sum;\n}\nlong abs(long num) \n{\n    return (num <\
    \ 0) ? -num : num;\n}\n/*\nunittest\n{\n    alias candidate = count_nums;\n\n\
    \    assert(candidate([]) == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n\
    \    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L,\
    \ 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L,\
    \ 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) ==\
    \ 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L]) ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpf6ns3mtz.d(44): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpf6ns3mtz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long ans = 0L;\n    long k = 0L;\n    long sum = 0L;\n    long temp\
    \ = 0L;\n    long newnum = 0L;\n    long power = 0L;\n    long temp2 = 0L;\n \
    \   tuple(long, long)[] newarr = new tuple(long, long)[0];\n    for (; k < size_t(arr);\
    \ k++)\n    {\n        newarr ~= tuple(long, long)(abs(arr[k]), arr[k]);\n   \
    \ }\n    sort(newarr);\n    foreach (ref x; newarr)\n    {\n        temp = x[0];\n\
    \        while (temp >= 10L)\n        {\n            sum = 0L;\n            power\
    \ = 0L;\n            while (temp != 0L)\n            {\n                newnum\
    \ = temp % 10L;\n                temp /= 10L;\n                sum += newnum *\
    \ pow(10L, power);\n                power++;\n            }\n            temp\
    \ = sum;\n        }\n        x[0] = temp;\n    }\n    sort(newarr);\n    for (k\
    \ = 0L; k < size_t(newarr); k++)\n    {\n        if (x[0] != temp2)\n        {\n\
    \            temp2 = x[0];\n            ans++;\n        }\n    }\n    return ans;\n\
    }\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp19yin62t.d(26): Error: found `,` when expecting `.` following
    long\n/tmp/tmp19yin62t.d(26): Error: found `long` when expecting identifier following
    `long`.\n/tmp/tmp19yin62t.d(26): Error: found `newarr` when expecting `;` following
    statement\n/tmp/tmp19yin62t.d(26): Error: found `=` instead of statement\n/tmp/tmp19yin62t.d(29):
    Error: found `,` when expecting `.` following long\n/tmp/tmp19yin62t.d(29): Error:
    found `long` when expecting identifier following `long`.\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp19yin62t.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n\tlong sum = 0;\n\tforeach(num; arr) \n\t{\n\t\tif(num < 0) \n\t\t{\n\t\
    \t\tnum = -num;\n\t\t}\n\t\t\n\t\tint el = 0;\n\t\twhile(num > 0) \n\t\t{\n\t\t\
    \tel += num % 10;\n\t\t\tnum /= 10;\n\t\t}\n\t\t\n\t\tif(el > 0) \n\t\t{\n\t\t\
    \tsum++;\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = count_nums;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n\
    \    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L,\
    \ 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L,\
    \ 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) ==\
    \ 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L]) ==\
    \ 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpkkko3ja1.d(46): unittest failure\n----------------\n??:?
    _d_unittestp [0x428325]\n??:? void tmpkkko3ja1.__unittest_L41_C1() [0x427e42]\n??:?
    void tmpkkko3ja1.__modtest() [0x4280a4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c333]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430359]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430808]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302e5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b19d]\n??:? runModuleUnitTests [0x42c109]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428774]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4286fb]\n??:? _d_run_main [0x428666]\n??:? main [0x4280b7]\n??:?
    __libc_start_main [0x8f5bf554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    return arr.filter!(a => a.abs.digits.sum > 0).length;\n}\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqj_6eal6.d(19): Error: no property `filter` for type `long[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqj_6eal6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long result = 0L;\n    long[] signed_digits = new long[arr.length];\n\
    \    for (long i = 0L; i < arr.length; i++) \n    {\n        long x = arr[i];\n\
    \        signed_digits[i] = x < 0L ? -x : x;\n    }\n    for (long x in signed_digits)\
    \ \n    {\n        long digits_sum = 0L;\n        while (x != 0L) \n        {\n\
    \            digits_sum += x % 10L;\n            x /= 10L;\n        }\n      \
    \  if (digits_sum > 0L) \n        {\n            result++;\n        }\n    }\n\
    \    return result;\n}\n/*\nunittest\n{\n    alias candidate = count_nums;\n\n\
    \    assert(candidate([]) == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n\
    \    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L,\
    \ 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L,\
    \ 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) ==\
    \ 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L]) ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkdad2xj_.d(26): Error: semicolon expected, not `in`\n/tmp/tmpkdad2xj_.d(26):
    Error: expression expected, not `in`\n/tmp/tmpkdad2xj_.d(26): Error: found `signed_digits`
    when expecting `;` following `for` condition\n/tmp/tmpkdad2xj_.d(41): Error: unterminated
    /* */ comment\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkdad2xj_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n  long counter = 0;\n  int i = 0;\n  foreach(l; arr) \n  {\n    if(l >\
    \ 0)\n    {\n      l = l;\n    }\n    else\n    {\n      l = -l;\n    }\n    long\
    \ sum = 0;\n    while(l > 0)\n    {\n      sum += l % 10;\n      l /= 10;\n  \
    \  }\n    if(sum > 0)\n    {\n      counter++;\n    }\n  }\n  return counter;\n\
    }\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpizbmut1g.d(49): unittest failure\n----------------\n??:?
    _d_unittestp [0x42832d]\n??:? void tmpizbmut1g.__unittest_L44_C1() [0x427e4e]\n??:?
    void tmpizbmut1g.__modtest() [0x4280b0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c33b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430361]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430810]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302ed]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1a5]\n??:? runModuleUnitTests [0x42c111]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42877c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428703]\n??:? _d_run_main [0x42866e]\n??:? main [0x4280c3]\n??:?
    __libc_start_main [0xca1a3554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long[] sums = new long[arr.length];\n    foreach(i, e; arr)\n    {\n\
    \        sums[i] = abs(e).to!string.map!(a => a.to!long - '0'.to!long).sum;\n\
    \    }\n    return sums.filter!(a => a > 0).length;\n}\nunittest\n{\n    alias\
    \ candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptgd30d4w.d(22): Error: no property `to` for type `long`\n/tmp/tmptgd30d4w.d(24):
    Error: no property `filter` for type `long[]`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmptgd30d4w.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long result = 0L;\n    foreach(i;arr) \n    {\n        long sum = 0L;\n\
    \        long j = i;\n        while(j != 0L)\n        {\n            sum += j\
    \ % 10L;\n            j /= 10L;\n        }\n        if(sum > 0L)\n           \
    \ result++;\n    }\n    return result;\n}\n/*\nunittest\n{\n    alias candidate\
    \ = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpd_rgmz_2.d(34): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpd_rgmz_2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long count = 0;\n    foreach(idx, v; arr)\n    {\n        long digit_sum\
    \ = 0;\n        foreach(i, d; v.digits())\n        {\n            digit_sum +=\
    \ (abs(d)).abs;\n        }\n        if(digit_sum > 0)\n        {\n           \
    \ count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzqcyvetm.d(23): Error: no property `digits` for type `long`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzqcyvetm.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    return arr.count!(x => x.abs().digits.sum > 0);\n}\n/*\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvg3nr91v.d(21): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpvg3nr91v.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long res = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n \
    \       long temp = arr[(int)i];\n        if (temp < 0)\n        {\n         \
    \   temp = -temp;\n        }\n        long sum = 0;\n        while (temp != 0)\n\
    \        {\n            sum += temp % 10;\n            temp /= 10;\n        }\n\
    \        if (sum > 0)\n        {\n            res++;\n        }\n    }\n    return\
    \ res;\n}\n/*\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdui8twsv.d(22): Error: C style cast illegal, use `cast(int)i`\n/tmp/tmpdui8twsv.d(40):
    Error: unterminated /* */ comment\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdui8twsv.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    if (arr.length == 0) \n    {\n        return 0;\n    } \n    else if\
    \ (arr.length == 1) \n    {\n        return arr[0] != 0 ? 1 : 0;\n    }\n    auto\
    \ is_positive = arr[0] > 0;\n    long sum = 0;\n    long[] abs_arr = new long[arr.length];\n\
    \    for (long i = 0; i < arr.length; i++) \n    {\n        if (arr[i] != 0) \n\
    \        {\n            sum += abs(arr[i]);\n            abs_arr[i] = abs(arr[i]);\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = count_nums;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n\
    \    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L,\
    \ 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L,\
    \ 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) ==\
    \ 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L]) ==\
    \ 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp_ak20bbi.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x428475]\n??:? void tmp_ak20bbi.__unittest_L40_C1() [0x427f7e]\n??:?
    void tmp_ak20bbi.__modtest() [0x4281f8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c553]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b3e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430671]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b20]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4305fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b3bd]\n??:? runModuleUnitTests [0x42c329]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428938]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4288bf]\n??:? _d_run_main [0x42882a]\n??:? main [0x42820b]\n??:?
    __libc_start_main [0xe9ac4554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long d = 0;\n    foreach(i ; arr)\n    {\n        if (abs(i) < 10)\n\
    \        {\n            d += 1;\n        }\n        else if (abs(i) >= 10)\n \
    \       {\n            d += getDigits(abs(i));\n        }\n    }\n    return d;\n\
    }\nlong getDigits(long num)\n{\n    long sum = 0;\n    while (num > 0)\n    {\n\
    \        sum += num % 10;\n        num /= 10;\n    }\n    return sum;\n}\n// bool\
    \ isPositive(long i)\n// {\n//     return i >= 0;\n// }\n// bool isNegative(long\
    \ i)\n// {\n//     return i < 0;\n// }\n// bool areEqual(long i, long j)\n// {\n\
    //     return i == j;\n// }\n// bool areNotEqual(long i, long j)\n// {\n//   \
    \  return i != j;\n// }\n// bool isGreaterThan(long i, long j)\n// {\n//     return\
    \ i > j;\n// }\n// bool isGreaterThanOrEqual(long i, long j)\n// {\n//     return\
    \ i >= j;\n// }\n// bool isLessThan(long i, long j)\n// {\n//     return i < j;\n\
    // }\n// bool isLessThanOrEqual(long i, long j)\n// {\n//     return i <= j;\n\
    // }\n/*\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwiz3kmf2.d(75): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpwiz3kmf2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long count = 0;\n    int len = arr.length;\n    foreach(i; 0..len)\n\
    \    {\n        long val = arr[i];\n        int sum = 0;\n        while(val !=\
    \ 0)\n        {\n            sum += val % 10;\n            val /= 10;\n      \
    \  }\n        if(sum > 0)\n            count++;\n    }\n    return count;\n}\n\
    unittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy0baa42i.d(20): Error: cannot implicitly convert expression
    `arr.length` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpy0baa42i.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long count = 0;\n    foreach(long i; arr) \n    {\n        long n =\
    \ i;\n        if(n < 0) \n        {\n            n = -n;\n        }\n        long\
    \ sum = 0;\n        while(n != 0) \n        {\n            long r = n % 10;\n\
    \            sum += r;\n            n /= 10;\n        }\n        if(sum > 0) \n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n\
    unittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4t1xfpmy.d(41): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp4t1xfpmy.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long ret = 0L;\n    foreach(long i; arr)\n    {\n        if(abs(i).sumDigits\
    \ > 0L) ret++;\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate =\
    \ count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjryx7f30.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long count = 0L;\n    foreach(i; arr) \n    {\n        auto num = i.abs;\n\
    \        long sum = 0L;\n        while(num != 0L) \n        {\n            sum\
    \ += num % 10L;\n            num /= 10L;\n        }\n        if(sum > 0L) \n \
    \       {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n\
    unittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7lce3cb2.d(36): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp7lce3cb2.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long r = 0L;\n    for (in i = 0; i < arr.length; i++) \n    {\n   \
    \     if (abs(arr[i]).to!string.count.filter!((n) => n > '0').length > 0) \n \
    \       {\n            r += 1L;\n        }\n    }\n    return r;\n}\n \n/*\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3dkxety8.d(20): Error: found \''in\'' instead of statement\n/tmp/tmp3dkxety8.d(30):
    Error: unterminated /* */ comment\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3dkxety8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n  long index = 0;\n  foreach(num; arr)\n  {\n    if(abs(num) >= 10)\n \
    \   {\n      long sum = 0;\n      while(num != 0)\n      {\n        sum += abs(num)\
    \ % 10;\n        num /= 10;\n      }\n      if(sum != 0)\n      {\n        index++;\n\
    \      }\n    }\n    else\n    {\n      if(num != 0)\n      {\n        index++;\n\
    \      }\n    }\n  }\n  return index;\n}\n/*\nunittest\n{\n    alias candidate\
    \ = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_b0zz5b_.d(45): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp_b0zz5b_.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long answer = 0L;\n    for (auto elem: arr) \n    {\n        if (abs(elem).sumDigits\
    \ > 0) \n        {\n            answer++;\n        }\n    }\n    return answer;\n\
    }\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp846nd_r_.d(20): Error: no identifier for declarator elem\n/tmp/tmp846nd_r_.d(20):
    Error: expression expected, not \'':\''\n/tmp/tmp846nd_r_.d(20): Error: found
    \''arr\'' when expecting \'';\'' following for condition\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp846nd_r_.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    /* \n        Solution adapted from:\n        https://stackoverflow.com/questions/36086459/d-sum-digits-of-an-int\n\
    \    */\n    return arr.filter!(x => { \n        auto neg = false; \n        if\
    \ (x < 0) \n        { \n            neg = true; \n            x = -x; \n     \
    \   } \n        auto sum = 0; \n        while (x != 0) \n        { \n        \
    \    sum += x % 10; \n            x /= 10; \n        } \n        return neg ?\
    \ -sum : sum; \n    }).length;\n}\nunittest\n{\n    alias candidate = count_nums;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n\
    \    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L,\
    \ 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L,\
    \ 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) ==\
    \ 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L]) ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpojaitb_o.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    int res = 0;\n    foreach(e; arr)\n    {\n        int su = 0;\n   \
    \     bool negative = false;\n        if(e < 0) \n        {\n            e = -e;\n\
    \            negative = true;\n        }\n        while(e != 0)\n        {\n \
    \           su += e % 10;\n            e /= 10;\n        }\n        if(negative)\
    \ su = -su;\n        if(su > 0) res++;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6juqe_n1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n\tlong result = 0;\n\tforeach(el; arr)\n\t{\n\t\tauto abs = el.abs;\n\t\
    \tlong sum = 0;\n\t\twhile(abs > 0)\n\t\t{\n\t\t\tsum += abs % 10;\n\t\t\tabs\
    \ /= 10;\n\t\t}\n\t\tif(sum > 0)\n\t\t\tresult++;\n\t}\n\treturn result;\n}\n\
    /*\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfzf4ixa4.d(34): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpfzf4ixa4.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long sum = 0;\n    foreach(e; arr)\n    {\n        auto[num, sign]\
    \ = typeof(e).init.init;\n        if(sign == -1)\n        {\n            num *=\
    \ -1;\n        }\n        sum += num;\n    }\n    return sum;\n}\nunittest\n{\n\
    \    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmwvw8itz.d(22): Error: basic type expected, not [\n/tmp/tmpmwvw8itz.d(22):
    Error: found \'',\'' when expecting \'']\''\n/tmp/tmpmwvw8itz.d(22): Error: semicolon
    expected, not \'']\''\n/tmp/tmpmwvw8itz.d(22): Error: found \'']\'' instead of
    statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmwvw8itz.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long count = 0;\n    foreach(i; arr)\n    {\n        int sum = 0;\n\
    \        foreach(j; i.digits)\n        {\n            sum += j;\n        }\n \
    \       if(sum > 0)\n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n/*\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_0fqqd2b.d(34): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp_0fqqd2b.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long acc = 0;\n    foreach(long x; arr)\n    {\n        int sig = x\
    \ < 0 ? -1 : 1;\n        if (sig * sum(digits(sig * x)) > 0)\n            acc++;\n\
    \    }\n    return acc;\n}\nunittest\n{\n    alias candidate = count_nums;\n\n\
    \    assert(candidate([]) == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n\
    \    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L,\
    \ 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L,\
    \ 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) ==\
    \ 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L]) ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzn62lgzn.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    return 0L;\n}\nunittest\n{\n    alias candidate = count_nums;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n\
    \    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L,\
    \ 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L,\
    \ 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) ==\
    \ 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L]) ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwfls_m8_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long sum_of_signed_digits;\n    long sum_of_digits = 0L;\n    long\
    \ count = 0L;\n    auto signed_digits = std.algorithm.map!(long x => abs(x) %\
    \ 10L * sign(x))(arr);\n    foreach(i; signed_digits)\n    {\n        sum_of_signed_digits\
    \ = i;\n        foreach(j; signed_digits)\n        {\n            if(i != j)\n\
    \            {\n                sum_of_signed_digits += j;\n            }\n  \
    \      }\n        if(sum_of_signed_digits > 0L)\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_nums;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n\
    \    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L,\
    \ 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L,\
    \ 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) ==\
    \ 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L]) ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvlf0om40.d(22): Error: found \''x\'' when expecting \''.\''
    following long\n/tmp/tmpvlf0om40.d(22): Error: found \''=>\'' when expecting identifier
    following \''long.\''\n/tmp/tmpvlf0om40.d(22): Error: found \''abs\'' when expecting
    \'')\'' following template argument list\n/tmp/tmpvlf0om40.d(22): Error: semicolon
    expected following auto declaration, not \'')\''\n/tmp/tmpvlf0om40.d(22): Error:
    found \'')\'' instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpvlf0om40.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long result = 0L;\n    foreach(i; arr)\n    {\n        static if(!__traits(compiles,\
    \ i))\n        {\n            continue;\n        }\n        result += abs(i) >\
    \ 0 ? 1L : 0L;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpknx0j9g8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long count = 0;\n    foreach(int i, long num; arr) \n    {\n      \
    \  int sum = 0;\n        if(num < 0) \n        {\n            sum += num % 10;\n\
    \            num = num / 10;\n        }\n        while(num > 0) \n        {\n\
    \            sum += num % 10;\n            num = num / 10;\n        }\n      \
    \  if(sum > 0) \n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj2t8_g0c.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long ret = 0L;\n    foreach(i; arr)\n    {\n        long j = abs(i);\n\
    \        long sum = 0L;\n        while(j > 0L)\n        {\n            sum +=\
    \ j % 10L;\n            j /= 10L;\n        }\n        if(sum > 0L) ret++;\n  \
    \  }\n    return ret;\n}\n/*\nunittest\n{\n    alias candidate = count_nums;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n\
    \    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L,\
    \ 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L,\
    \ 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) ==\
    \ 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L]) ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpokk6zv1g.d(33): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpokk6zv1g.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    int count = 0;\n    foreach( a; arr )\n    {\n        if( a < 0 )\n\
    \            a = -a;\n        long s = 0;\n        for( int t = a; t > 0; t =\
    \ t / 10 )\n            s += t % 10;\n        if( s > 0 )\n            count++;\n\
    \    }\n    return count;\n}\n/*\nunittest\n{\n    alias candidate = count_nums;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n\
    \    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L,\
    \ 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L,\
    \ 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) ==\
    \ 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L]) ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpoc1mavhn.d(32): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpoc1mavhn.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long count = 0;\n    int size = arr.length;\n    for (int i = 0; i\
    \ < size; i++)\n    {\n        long elem = arr[i];\n        long sum = 0;\n  \
    \      while (elem != 0)\n        {\n            sum += abs(elem % 10);\n    \
    \        elem /= 10;\n        }\n        if (sum > 0)\n            count++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_nums;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n\
    \    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L,\
    \ 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L,\
    \ 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) ==\
    \ 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L]) ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplwppugs4.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long count = 0;\n    foreach(i; arr)\n    {\n        if(abs(i) % 10\
    \ > 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\n/*\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp70f17vjh.d(29): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp70f17vjh.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n\tlong[] arrL = arr;\n\tlong sum = 0;\n\tlong count = 0;\n\tforeach(i;\
    \ 0..arrL.length)\n\t{\n\t\tsum = 0;\n\t\tlong a = arrL[i];\n\t\tlong b = abs(a);\n\
    \t\tdo \n\t\t{\n\t\t\tsum += b % 10;\n\t\t\tb /= 10;\n\t\t} while (b > 0);\n\t\
    \tif (sum > 0)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n/*\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6huaaur8.d(39): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp6huaaur8.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long ret = 0L;\n    foreach(elem; arr)\n    {\n        long tmp = elem;\n\
    \        long sum = 0L;\n        while(tmp != 0L)\n        {\n            long\
    \ lastDigit = tmp % 10L;\n            tmp = tmp / 10L;\n            sum += abs(lastDigit);\n\
    \        }\n        if(sum > 0L)\n        {\n            ret++;\n        }\n \
    \   }\n    return ret;\n}\n// Structs\nunittest\n{\n    alias candidate = count_nums;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n\
    \    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L,\
    \ 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L,\
    \ 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) ==\
    \ 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L]) ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprma3owwq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long count = 0L;\n    foreach(num; arr)\n    {\n        if(sum(num.abs.digits)\
    \ > 0L)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\n/*\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwwzvu8g3.d(29): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpwwzvu8g3.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    int result = 0;\n    foreach(x; arr)\n    {\n        long sum = 0;\n\
    \        long t = x;\n        if(t < 0)\n            t = -t;\n        while(t\
    \ != 0)\n        {\n            sum += t % 10;\n            t /= 10;\n       \
    \ }\n        if(sum > 0)\n            result++;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkdus8xzh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long count = 0;\n    foreach(el; arr)\n    {\n        if(el!=0)\n \
    \       {\n            long sum = 0;\n            long el1 = abs(el);\n      \
    \      while(el1 != 0)\n            {\n                sum += el1 % 10;\n    \
    \            el1 /= 10;\n            }\n            if(sum > 0)\n            \
    \    count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6_t05ktp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long count = 0;\n    foreach(i; arr) {\n        count += sum(i.digits);\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_nums;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n\
    \    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L,\
    \ 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L,\
    \ 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) ==\
    \ 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L]) ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnj904ovw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    if (arr.length == 0) \n    {\n        return 0;\n    }\n    long posCount\
    \ = 0;\n    for (long i = 0; i < arr.length; i++) \n    {\n        long val =\
    \ arr[i];\n        if (val < 0) \n        {\n            val = val * -1;\n   \
    \     }\n        if (val == 0) \n        {\n            continue;\n        }\n\
    \        long digitSum = 0;\n        while (val > 0) \n        {\n           \
    \ digitSum += val % 10;\n            val = val / 10;\n        }\n        if (digitSum\
    \ > 0) \n        {\n            posCount++;\n        }\n    }\n    return posCount;\n\
    }\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1etyhnqe.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long num = 0;\n    foreach(i; arr)\n    {\n        if (i < 0)\n   \
    \     {\n            if (digitSum(-i) > 0)\n            {\n                num\
    \ += 1;\n            }\n        }\n        else\n        {\n            if (digitSum(i)\
    \ > 0)\n            {\n                num += 1;\n            }\n        }\n \
    \   }\n    return num;\n}\n/*\nunittest\n{\n    alias candidate = count_nums;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n\
    \    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L,\
    \ 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L,\
    \ 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) ==\
    \ 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L]) ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdv_py48g.d(39): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpdv_py48g.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    const long sz = arr.length;\n    if (sz == 0) \n    {\n        return\
    \ 0;\n    }\n    long count = 0;\n    for (int i = 0; i < sz; i++) \n    {\n \
    \       long x = arr[i];\n        if (x < 0) \n        {\n            x = -x;\n\
    \        }\n        long s = 0;\n        while (x > 0) \n        {\n         \
    \   s += x % 10;\n            x /= 10;\n        }\n        if (s > 0) \n     \
    \   {\n            count++;\n        }\n    }\n    return count;\n}\nstatic assert(count_nums([])\
    \ == 0);\nstatic assert(count_nums([-1L, 11L, -11L]) == 1);\nstatic assert(count_nums([1L,\
    \ 1L, 2L]) == 3);\n/*\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfihy3p7k.d(48): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpfihy3p7k.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    return arr.filter!(a => a.abs.sum_digits != 0)().length;\n}\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzd3xfns0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long counter = 0;\n    foreach(a; arr) \n    {\n        if(a != 0)\
    \ \n        {\n            long sum = 0;\n            long abs = a.abs;\n    \
    \        while(abs != 0) \n            {\n                sum += abs % 10;\n \
    \               abs /= 10;\n            }\n            if(sum > 0)\n         \
    \       counter++;\n        }\n    }\n    return counter;\n}\n/*\nunittest\n{\n\
    \    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk5b7sw4z.d(37): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpk5b7sw4z.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long result = 0L;\n    foreach(val; arr) \n    {\n        if(val <\
    \ 0L) \n        {\n            val = -val;\n        }\n        result += (sum(std.array.split(to!string(val)))\
    \ > 0L) ? 1L : 0L;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe4sln_gj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    import std.math : abs;\n    long cnt = 0;\n    foreach(const n; arr)\
    \ \n    {\n        const digits = n.stringof.split.filter!((n) => n!=\"-\").map!((n)\
    \ => n.to!long).array;\n        if(digits.sum > 0)\n            cnt++;\n    }\n\
    \    return cnt;\n}\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3zo2l7jz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long ret = 0L;\n    foreach(e; arr) \n    {\n        ret += 1L;\n \
    \   }\n    return ret;\n}\n/*\nunittest\n{\n    alias candidate = count_nums;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n\
    \    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L,\
    \ 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L,\
    \ 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) ==\
    \ 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L]) ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8fpsa6av.d(26): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp8fpsa6av.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long num = 0;\n    long[] sign = new long[1];\n    long digit = 0;\n\
    \    foreach(x; arr) \n    {\n        num = sign[0] = x;\n        if(num < 0)\
    \ num = -num;\n        while(num > 0) \n        {\n            digit += num %\
    \ 10;\n            num /= 10;\n        }\n        if(digit > 0 && sign[0] < 0)\
    \ \n        {\n            digit = -digit;\n        }\n        if(digit > 0) \n\
    \        {\n            return digit;\n        }\n    }\n    return digit;\n}\n\
    static assert(count_nums([]) == 0L);\nstatic assert(count_nums([-1L, 11L, -11L])\
    \ == 1L);\nstatic assert(count_nums([1L, 1L, 2L]) == 3L);\n// unittest \n{\n \
    \   bool[] b = new bool[];\n    foreach(n; 0..1_000_000) \n    {\n        long[]\
    \ arr = new long[n];\n        foreach(i; 0..n) \n        {\n            arr[i]\
    \ = i % 2 == 0 ? i : -i;\n        }\n        b ~= count_nums(arr) == n;\n    }\n\
    \    assert(b.all);\n}\nunittest\n{\n    alias candidate = count_nums;\n\n   \
    \ assert(candidate([]) == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n\
    \    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L,\
    \ 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L,\
    \ 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) ==\
    \ 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L]) ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsec7aufs.d(46): Error: Declaration expected, not \''{\''\n/tmp/tmpsec7aufs.d(48):
    Error: Declaration expected, not \''foreach\''\n/tmp/tmpsec7aufs.d(48): Error:
    Declaration expected, not \''0\''\n/tmp/tmpsec7aufs.d(51): Error: Declaration
    expected, not \''foreach\''\n/tmp/tmpsec7aufs.d(51): Error: Declaration expected,
    not \''0\''\n/tmp/tmpsec7aufs.d(54): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsec7aufs.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long[long] map = new long[long];\nunittest\n{\n    alias candidate\
    \ = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptejybv77.d(19): Error: need size of rightmost array, not type
    long\n/tmp/tmptejybv77.d(20): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptejybv77.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long result = 0L;\n    for (i in arr)\n    {\n        if (abs(i) !=\
    \ i)\n        {\n            i = -i;\n        }\n        long sum = 0L;\n    \
    \    while (i != 0L)\n        {\n            sum += i % 10L;\n            i /=\
    \ 10L;\n        }\n        if (sum > 0L)\n        {\n            result++;\n \
    \       }\n    }\n    return result;\n}\n/*\nunittest\n{\n    alias candidate\
    \ = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0nr8a1w6.d(20): Error: found \'')\'' when expecting \'';\''
    following statement\n/tmp/tmp0nr8a1w6.d(37): Error: found \''return\'' when expecting
    \'';\'' following for condition\n/tmp/tmp0nr8a1w6.d(37): Error: found \'';\''
    when expecting \'')\''\n/tmp/tmp0nr8a1w6.d(38): Error: found \''}\'' instead of
    statement\n/tmp/tmp0nr8a1w6.d(39): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0nr8a1w6.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long c = 0;\n    foreach(n; arr)\n    {\n        if(sum_digits(n) >\
    \ 0)\n            c++;\n    }\n    return c;\n}\n/*\nunittest\n{\n    alias candidate\
    \ = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5k8b5m39.d(27): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp5k8b5m39.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    int count = 0;\n    foreach(int i; arr)\n    {\n        int num = std.math.abs(i);\n\
    \        int sum = 0;\n        while(num > 0)\n        {\n            sum += num\
    \ % 10;\n            num /= 10;\n        }\n        if(sum > 0)\n            count++;\n\
    \    }\n    return count;\n}\n/*\nunittest\n{\n    alias candidate = count_nums;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n\
    \    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L,\
    \ 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L,\
    \ 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) ==\
    \ 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L]) ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpekgnk6gt.d(34): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpekgnk6gt.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    /*\n        std.algorithm.map with std.math.abs and std.math.digits\n\
    \        std.math.digits(long[], long)\n    */\n    auto result = arr.map!(x =>\
    \ x < 0 ? x * -1 : x).map!(x => digits(x, 10)).filter!(x => x.length > 0).map!(x\
    \ => x.sum()).filter!(x => x > 0).map!(x => 1L).sum();\n    return result;\n}\n\
    unittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2jn53v5g.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long result = 0L;\n    foreach(i; arr) \n    {\n        long digit_sum\
    \ = 0L;\n        i = abs(i);\n        while(i > 0L) \n        {\n            digit_sum\
    \ += i % 10L;\n            i /= 10L;\n        }\n        if(digit_sum > 0L) \n\
    \        {\n            result++;\n        }\n    }\n    return result;\n}\n/*\n\
    unittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp03asht3j.d(36): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp03asht3j.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long _count_nums = 0L;\n    foreach (l; arr)\n    {\n        if (l.abs.to!string.fold!((a,\
    \ b) => a + b.to!long)(0L) > 0L)\n        {\n            _count_nums += 1L;\n\
    \        }\n    }\n    return _count_nums;\n}\n/*\nunittest\n{\n    alias candidate\
    \ = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp37obl_ta.d(29): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp37obl_ta.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long count = 0;\n    foreach(e; arr)\n    {\n        count += (e <\
    \ 0) ? -e : e;\n    }\n    return count;\n}\n/*\nunittest\n{\n    alias candidate\
    \ = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz88ac7ws.d(26): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpz88ac7ws.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long result = 0L;\n    long curr = 0L;\n    long size = arr.length;\n\
    \    foreach(i; 0..size) \n    {\n        curr = sign(arr[i]) * sum(arr[i].abs.digits);\n\
    \        if (curr > 0L) \n        {\n            result++;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = count_nums;\n\n   \
    \ assert(candidate([]) == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n\
    \    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L,\
    \ 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L,\
    \ 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) ==\
    \ 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L]) ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcw2e078j.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long count = 0;\n    long sign = 0;\n    long reminder = 0;\n    long\
    \ total = 0;\n    foreach(long num; arr)\n    {\n        if(num > 0)\n       \
    \ {\n            total = num;\n        }\n        else if(num < 0)\n        {\n\
    \            total = -num;\n            sign = -1;\n        }\n        else\n\
    \        {\n            count++;\n            continue;\n        }\n        while(total\
    \ != 0)\n        {\n            reminder = total % 10;\n            total = total\
    \ / 10;\n            total += reminder;\n        }\n        if(total != 0)\n \
    \       {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjf31mzj3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    int count = 0;\n    foreach(i; arr)\n    {\n        if(!i.digits.empty)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\n// public\
    \ alias\npublic alias count_nums = count_nums;\nunittest\n{\n    alias candidate\
    \ = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdzvfsdxy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long unsigned_sum = sum(map!(abs)(arr));\n    long signed_sum = sum(arr);\n\
    \    return unsigned_sum - signed_sum;\n}\nunittest\n{\n    alias candidate =\
    \ count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp14ig690h.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long ret = 0L;\n    foreach(i;arr)\n    {\n        ret += (abs(i)%9)%9\
    \ == 0 ? 1L : 0L;\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate\
    \ = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphyqpjype.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    return arr.count!(x => x.abs.reduce!((a,b) => a+b) > 0);\n}\n/*\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpd5bz7ydu.d(21): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpd5bz7ydu.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long result = 0L;\n    foreach(n; arr) \n    {\n        if (sum_digits(n)\
    \ > 0L)\n            result++;\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjfo3aup5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n\tlong count = 0;\n\tforeach(immutable e; arr) \n\t{\n\t\timmutable digits\
    \ = e.digits;\n\t\tlong sum = 0;\n\t\tforeach(immutable d; digits) \n\t\t{\n\t\
    \t\tsum += d;\n\t\t}\n\t\tif(sum > 0) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\t\
    return count;\n}\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7guztjtb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long n = 0L;\n    foreach(long x; arr) \n    {\n        if (x < 0L)\
    \ \n        {\n            x = -x;\n        }\n        long s = 0L;\n        long\
    \ x0 = x;\n        while (x0 > 0L) \n        {\n            s += x0 % 10L;\n \
    \           x0 /= 10L;\n        }\n        if (s > 0L) \n        {\n         \
    \   n += 1L;\n        }\n    }\n    return n;\n}\nunittest\n{\n    alias candidate\
    \ = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt123jxrf.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long ret = 0L;\n    long[] signeddigits;\n    long i;\n    i = 0L;\n\
    \    while ((i < arr.length)) {\n        signeddigits = signeddigits(arr[i]);\n\
    \        if ((sum(signeddigits) > 0L)) {\n            ret += 1L;\n        }\n\
    \        i += 1L;\n    }\n    return ret;\n}\n/*\nunittest\n{\n    alias candidate\
    \ = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyxk73b4_.d(32): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpyxk73b4_.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    return arr.length;\n}\n/*\nunittest\n{\n    alias candidate = count_nums;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n\
    \    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L,\
    \ 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L,\
    \ 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) ==\
    \ 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L]) ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp77dmsmw6.d(21): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp77dmsmw6.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long[] arr1 = arr.map!(x => abs(x)).map!(x => x.to!string).map!(x =>\
    \ x.sumOf!long(\"0..9\".count)).filter!(x => x>0);\n    return arr1.length;\n\
    }\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzne49jle.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long count = 0;\n    if(arr.length == 0)\n    {\n        return count;\n\
    \    }\n    foreach(i; arr)\n    {\n        if(sum_signed_digits(i) > 0)\n   \
    \     {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt3gle7a_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long b = 0;\n    foreach(x; arr)\n    {\n        long a = x;\n    \
    \    if(a < 0)\n        {\n            a = -a;\n        }\n        long c = 0;\n\
    \        for(long i = 0; i < 9 && a > 0; i++)\n        {\n            long j =\
    \ a % 10;\n            a = a / 10;\n            c = c + j;\n        }\n      \
    \  if(c > 0)\n        {\n            b = b + 1;\n        }\n    }\n    return\
    \ b;\n}\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0wt8ur1z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    auto r = reduce!((a, b) => a + abs(b))(arr);\n    return r;\n}\n/*\n\
    unittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw3lvbyhc.d(22): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpw3lvbyhc.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long result = 0L;\n    foreach(num; arr)\n    {\n        long temp\
    \ = 0L;\n        if(num < 0L)\n        {\n            temp += abs(num);\n    \
    \    }\n        else\n        {\n            temp = num;\n        }\n        do\
    \ \n        {\n            long last_digit = temp % 10L;\n            temp /=\
    \ 10L;\n            if(temp == 0L)\n            {\n                break;\n  \
    \          }\n            result += last_digit;\n        }\n        while(true);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_nums;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n\
    \    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L,\
    \ 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L,\
    \ 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) ==\
    \ 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L]) ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb0mn5odh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long sum = 0;\n    for ( int i = 0; i < arr.length; i++ )\n    {\n\
    \        if ( arr[i] > 0 )\n        {\n            int v = arr[i];\n         \
    \   while ( v > 0 )\n            {\n                sum += v % 10;\n         \
    \       v /= 10;\n            }\n        }\n        else\n        {\n        \
    \    int v = -arr[i];\n            while ( v > 0 )\n            {\n          \
    \      sum -= v % 10;\n                v /= 10;\n            }\n        }\n  \
    \  }\n    return (long) ceil(sum / 10.0);\n}\nunittest\n{\n    alias candidate\
    \ = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2jiuxpsz.d(41): Error: C style cast illegal, use cast(long)ceil(sum
    / 10.0000)\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2jiuxpsz.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    /*\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nunittest\n{\n    alias\
    \ candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmph4y5m5m_.d(19): Error: unterminated /* */ comment\n/tmp/tmph4y5m5m_.d(287):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph4y5m5m_.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    return arr.count!((long i) => \n    {\n        long l = 0;\n      \
    \  long c = i;\n        if (c < 0) c = -c;\n        for (; c > 0; c /= 10)\n \
    \       {\n            l += c % 10;\n        }\n        return l > 0;\n    });\n\
    }\n/*\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4zivc83e.d(31): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp4zivc83e.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    //return sum(map!((i)=>(abs(i)).sumDigits().reduce!((a,b)=>a+b))(arr));\n\
    \    return sum(map!((i)=>((i<0)?-i:i).sumDigits().reduce!((a,b)=>a+b))(arr));\n\
    }\nlong sum(Range)(long[] arr) \n{\n    if(arr.length==0) return 0;\n    else\
    \ return arr[0]+sum(arr[1..$]);\n}\nlong abs(long v) \n{\n    return (v<0)?-v:v;\n\
    }\nlong[] range(long start, long count) \n{\n    long[] ret = new long[count];\n\
    \    long i = 0;\n    while(i<count) \n    {\n        ret[i] = start+i;\n    \
    \    i++;\n    }\n    return ret;\n}\nRange sumDigits(long v) \n{\n    return\
    \ v.digits;\n}\nRange digits(long v) \n{\n    import std.algorithm : map;\n  \
    \  import std.conv : to;\n    if(v<0) return map!((i)=>-i.to!long)(to!string(-v).to!long[]);\n\
    \    else return to!string(v).to!long[];\n}\nlong[] map(alias fun, Range)(Range\
    \ r) \n{\n    import std.algorithm : map;\n    return map!fun(r);\n}\nlong reduce(alias\
    \ fun, Range)(Range r) \n{\n    import std.algorithm : reduce;\n    return reduce!fun(r);\n\
    }\nlong[] to(long start, long end) \n{\n    return range(start, end-start);\n\
    }\nlong[] to(long start, long end, long step) \n{\n    long[] ret = new long[(end-start)/step];\n\
    \    long j = 0;\n    long i = start;\n    while(i<end) \n    {\n        ret[j]\
    \ = i;\n        i+=step;\n        j++;\n    }\n    return ret;\n}\nlong[]\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr6a3z3jt.d(81): Error: no identifier for declarator long[]\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr6a3z3jt.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    return 0L;\n}\nunittest\n{\n    alias candidate = count_nums;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n\
    \    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L,\
    \ 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L,\
    \ 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) ==\
    \ 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L]) ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwfls_m8_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long size_t = arr.length;\n    long n = 0;\n    long temp = 0;\n  \
    \  long temp_sum = 0;\n    long[] temp_arr = new long[arr.length];\n    bool[]\
    \ swap_arr = new bool[arr.length];\n    for (long i = 0; i < size_t; i++)\n  \
    \  {\n        temp = arr[i];\n        temp_sum = 0;\n        for (long j = 0;\
    \ j < size_t; j++)\n        {\n            swap_arr[j] = false;\n        }\n \
    \       for (long j = 0; j < size_t; j++)\n        {\n            if (temp ==\
    \ arr[j] && swap_arr[j] == false)\n            {\n                temp_sum +=\
    \ temp;\n                swap_arr[j] = true;\n            }\n        }\n     \
    \   temp_arr[i] = temp_sum;\n    }\n    for (long i = 0; i < size_t; i++)\n  \
    \  {\n        if (temp_arr[i] > 0)\n        {\n            n++;\n        }\n \
    \   }\n    return n;\n}\nunittest\n{\n    alias candidate = count_nums;\n\n  \
    \  assert(candidate([]) == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n\
    \    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L,\
    \ 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L,\
    \ 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) ==\
    \ 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L]) ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoyp3ec48.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long sum = 0;\n    foreach(i; arr)\n    {\n        if(i < 0)\n    \
    \    {\n            i = -i;\n        }\n        while(i > 0)\n        {\n    \
    \        sum += i % 10;\n            i /= 10;\n        }\n    }\n    return arr.length\
    \ - count(arr, (_dummy) => {return sum > 0;});\n}\n/*\nunittest\n{\n    alias\
    \ candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfm28xpay.d(34): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpfm28xpay.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    return arr.filter!(x => abs(x).sumofdigits() > 0).length;\n}\nlong\
    \ sumofdigits(int n) \n{\n    if (n < 0)\n        n = -n;\n    long res = 0;\n\
    \    while (n > 0)\n    {\n        res += n % 10;\n        n /= 10;\n    }\n \
    \   return res;\n}\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwlrdjzee.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long result = 0L;\n    foreach(int i; 0 .. arr.length) \n    {\n  \
    \      if(sum(int[](string(abs(arr[i])))) > 0) \n        {\n            result++;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_nums;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n\
    \    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L,\
    \ 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L,\
    \ 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) ==\
    \ 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L]) ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzc0vvkxd.d(22): Error: found \''[\'' when expecting \''.\''
    following int\n/tmp/tmpzc0vvkxd.d(22): Error: found \'']\'' when expecting identifier
    following \''int.\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzc0vvkxd.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long result = 0L;\n    foreach(i; arr) \n    {\n        if (sum(to!string(i).map!(a\
    \ => i.to!long)) > 0L) \n        {\n            result++;\n        }\n    }\n\
    \    return result;\n}\n/*\nunittest\n{\n    alias candidate = count_nums;\n\n\
    \    assert(candidate([]) == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n\
    \    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L,\
    \ 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L,\
    \ 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) ==\
    \ 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L]) ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjfibp9sd.d(29): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpjfibp9sd.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long n = 0L;\n    foreach(i; arr)\n    {\n        if (abs(i) == 0L)\n\
    \            continue;\n        if (((abs(i) % 10L) + (abs(i) / 10L)) > 0L)\n\
    \            n++;\n    }\n    return n;\n}\nunittest\n{\n    alias candidate =\
    \ count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt6k3lfk_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long sum = 0;\n    for (long i = 0; i < arr.length; i++) \n    {\n\
    \        int n = abs(arr[i]);\n        while (n > 0) \n        {\n           \
    \ sum += n % 10;\n            n /= 10;\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpljt9v2sg.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    import std.algorithm : count;\n    import std.math : abs;\n    import\
    \ std.conv : to;\n    import std.range : chunks;\n    //int c = 0;\n    auto s\
    \ = arr.map!(a => a.to!string).map!(a => a.chunks(1).map!(to!long).reduce!(a,b\
    \ => a+b));\n    auto r = s.count!(a => a > 0);\n    return r;\n    /*\n    for(int\
    \ i = 0; i < arr.length; i++) {\n        \n        auto a = arr[i].to!string;\n\
    \        int res = 0;\n        for(int j = 0; j < a.length; j++) {\n         \
    \   res += to!int(a[j..j+1]);\n        }\n        if(res > 0) {\n            c++;\n\
    \        }\n    }\n    return c;\n    */\n}\n/*\n    Write a function count_vowels\
    \ which takes a string and returns the number\n    of vowels in it.\n    >>> count_vowels(\"\
    \")\n    0L\n    >>> count_vowels(\"abc\")\n    1L\n    >>> count_vowels(\"abcdf\"\
    )\n    2L\n*/\nlong count_vowels(string s) \n{\n    import std.algorithm : count;\n\
    \    auto res = s.count!(a => a == 'a' || a == 'e' || a == 'i' || a == 'o' ||\
    \ a == 'u');\n    return res;\n}\n/*\n    Write a function count_pattern which\
    \ takes a pattern and a string and returns\n    the number of times the pattern\
    \ appears in the string.\n    If the pattern is empty, it should be counted once\
    \ per empty string between\n    characters, e.g. \"abc\" has 3 empty strings.\n\
    \    >>> count_pattern(\"\", \"\")\n    1L\n    >>> count_pattern(\"\", \"a\"\
    )\n    2L\n    >>> count_pattern(\"\", \"ab\")\n    3L\n    >>> count_pattern(\"\
    a\", \"\")\n    0L\n    >>> count_pattern(\"a\", \"a\")\n    1\nunittest\n{\n\
    \    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpd3wyu14w.d(58): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpd3wyu14w.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long count = 0;\n    foreach(int i, long elem; arr)\n    {\n      \
    \  if(abs(elem) >= 0L)\n        {\n            if(abs(elem) / 10L > 0L)\n    \
    \        {\n                int sum = 0;\n                long n = abs(elem);\n\
    \                while(n > 0L)\n                {\n                    sum +=\
    \ cast(int)(n % 10L);\n                    n /= 10L;\n                }\n    \
    \            if(sum > 0)\n                {\n                    count++;\n  \
    \              }\n            }\n            else\n            {\n           \
    \     count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcxr24fkd.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long result = 0L;\n    foreach(n; arr) \n    {\n        long sum =\
    \ 0L;\n        n = n < 0L ? -n : n;\n        while(n > 0L)\n        {\n      \
    \      sum += n % 10L;\n            n /= 10L;\n        }\n        if(sum > 0L)\n\
    \            result++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbimddnd_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long count = 0;\n    foreach(e; arr)\n    {\n        if(digitsum(e)\
    \ > 0)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpze9e7fjs.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long count = 0;\n    foreach(i; arr) {\n        auto tmp = i;\n   \
    \     auto sum = 0;\n        while(tmp != 0) {\n            auto r = tmp % 10;\n\
    \            tmp = tmp / 10;\n            sum += r;\n        }\n        if(sum\
    \ > 0)\n            count++;\n    }\n    return count;\n}\n/*\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpybqf30er.d(33): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpybqf30er.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    auto ret = 0L;\n    auto it = arr.array;\n    for (auto i = 0; i <\
    \ arr.length; i++)\n    {\n        auto x = it[i];\n        ret += ((x < 0) ?\
    \ -1 : 1) * (abs(x) % 10);\n        x /= 10;\n        while (x != 0)\n       \
    \ {\n            ret += (x % 10);\n            x /= 10;\n        }\n    }\n  \
    \  return ret;\n}\n/*\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2zrqfdes.d(34): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp2zrqfdes.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long x, cnt = 0L;\n    foreach(x; arr)\n    {\n        if(x != 0L)\n\
    \        {\n            if(x > 0L && x % 10 == 0L)\n            {\n          \
    \      ++cnt;\n            }\n            else\n            {\n              \
    \  int y = abs(x);\n                while(y > 0)\n                {\n        \
    \            y /= 10;\n                    if(y > 0)\n                    {\n\
    \                        ++cnt;\n                    }\n                }\n  \
    \          }\n        }\n    }\n    return cnt;\n}\n/*\nunittest\n{\n    alias\
    \ candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzohxvbd5.d(44): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpzohxvbd5.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long count = 0;\n    long idx = 0;\n    long val = 0;\n    while(idx\
    \ < arr.length)\n    {\n        val = arr[idx];\n        if(val >= 0)\n      \
    \  {\n            if(val != 0)\n            {\n                count++;\n    \
    \        }\n        }\n        else\n        {\n            count++;\n       \
    \ }\n        idx++;\n    }\n    return count;\n}\n/*\nunittest\n{\n    alias candidate\
    \ = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpycyz2pb1.d(40): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpycyz2pb1.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n\tlong[] signed_digits;\n\tlong result = 0L;\n\tlong sum = 0L;\n\tforeach(elem;\
    \ arr) \n\t{\n\t\tif(elem < 0L) \n\t\t{\n\t\t\tsigned_digits = [-elem % 10L, -(elem\
    \ / 10L) % 10L, -(elem / 100L) % 10L, -(elem / 1000L) % 10L, -(elem / 10000L)\
    \ % 10L, -(elem / 100000L) % 10L, -(elem / 1000000L) % 10L, -(elem / 10000000L)\
    \ % 10L, -(elem / 100000000L) % 10L, -(elem / 1000000000L) % 10L, -(elem / 10000000000L)\
    \ % 10L, -(elem / 100000000000L) % 10L, -(elem / 1000000000000L) % 10L, -(elem\
    \ / 10000000000000L) % 10L, -(elem / 100000000000000L) % 10L, -(elem / 1000000000000000L)\
    \ % 10L, -(elem / 10000000000000000L) % 10L, -(elem / 100000000000000000L) % 10L,\
    \ -(elem / 1000000000000000000L) % 10L];\n\t\t}\n\t\telse \n\t\t{\n\t\t\tsigned_digits\
    \ = [elem % 10L, (elem / 10L) % 10L, (elem / 100L) % 10L, (elem / 1000L) % 10L,\
    \ (elem / 10000L) % 10L, (elem / 100000L) % 10L, (elem / 1000000L) % 10L, (elem\
    \ / 10000000L) % 10L, (elem / 100000000L) % 10L, (elem / 1000000000L) % 10L, (elem\
    \ / 10000000000L) % 10L, (elem / 100000000000L) % 10L, (elem / 1000000000000L)\
    \ % 10L, (elem / 10000000000000L) % 10L, (elem / 100000000000000L) % 10L, (elem\
    \ / 100\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwyg3qn3y.d(30): Error: found \''unittest\'' when expecting \'')\''\n/tmp/tmpwyg3qn3y.d(32):
    Error: found \''{\'' when expecting \'',\''\n/tmp/tmpwyg3qn3y.d(33): Error: expression
    expected, not \''alias\''\n/tmp/tmpwyg3qn3y.d(33): Error: found \''candidate\''
    when expecting \'',\''\n/tmp/tmpwyg3qn3y.d(33): Error: expression expected, not
    \''=\''\n/tmp/tmpwyg3qn3y.d(33): Error: found \''count_nums\'' when expecting
    \'',\''\n/tmp/tmpwyg3qn3y.d(33): Error: expression expected, not \'';\''\n/tmp/tmpwyg3qn3y.d(35):
    Error: found \''assert\'' when expecting \'',\''\n/tmp/tmpwyg3qn3y.d(35): Error:
    found \'';\'' when expecting \'',\''\n/tmp/tmpwyg3qn3y.d(36): Error: found \'';\''
    when expecting \'',\''\n/tmp/tmpwyg3qn3y.d(37): Error: found \'';\'' when expecting
    \'',\''\n/tmp/tmpwyg3qn3y.d(38): Error: found \'';\'' when expecting \'',\''\n/tmp/tmpwyg3qn3y.d(39):
    Error: found \'';\'' when expecting \'',\''\n/tmp/tmpwyg3qn3y.d(40): Error: found
    \'';\'' when expecting \'',\''\n/tmp/tmpwyg3qn3y.d(41): Error: found \'';\'' when
    expecting \'',\''\n/tmp/tmpwyg3qn3y.d(42): Error: found \'';\'' when expecting
    \'',\''\n/tmp/tmpwyg3qn3y.d(43): Error: expression expected, not \''}\''\n/tmp/tmpwyg3qn3y.d(44):
    Error: found \''void\'' when expecting \'',\''\n/tmp/tmpwyg3qn3y.d(44): Error:
    found \''{\'' when expecting \'',\''\n/tmp/tmpwyg3qn3y.d(44): Error: expression
    expected, not \''}\''\n/tmp/tmpwyg3qn3y.d(44): Error: found \''EOF\'' when expecting
    \'',\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwyg3qn3y.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long[] temparr = arr.map!(element => abs(element)).map!(element =>\
    \ element.sumdigits()).filter!(element => element > 0);\n    return temparr.length;\n\
    }\n/*\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbb2efkyr.d(22): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpbb2efkyr.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n\tlong res = 0;\n\tforeach(idx, val; arr) \n\t{\n\t\tif(val == 0) \n\t\t\
    {\n\t\t\tres++;\n\t\t\tcontinue;\n\t\t}\n\t\tint sign = val < 0 ? -1 : 1;\n\t\t\
    val = val < 0 ? -val : val;\n\t\tlong digit_sum = 0;\n\t\twhile(val > 0) \n\t\t\
    {\n\t\t\tdigit_sum += val % 10;\n\t\t\tval /= 10;\n\t\t}\n\t\tif(sign * digit_sum\
    \ > 0) \n\t\t{\n\t\t\tres++;\n\t\t}\n\t}\n\treturn res;\n}\nunittest\n{\n    alias\
    \ candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4oybp5b1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long count = 0;\n    foreach(int a; arr)\n    {\n        long current\
    \ = a;\n        long sum = 0;\n        while(current != 0)\n        {\n      \
    \      sum += abs(current % 10);\n            current /= 10;\n        }\n    \
    \    if(sum > 0)\n            count++;\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz1k3atoy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long count = 0;\n    foreach(i; arr) {\n        long sum = 0;\n   \
    \     long tmp = i < 0 ? -i : i;\n        while(tmp != 0) {\n            sum +=\
    \ tmp % 10;\n            tmp /= 10;\n        }\n        if(sum > 0) {\n      \
    \      count++;\n        }\n    }\n    return count;\n}\n/*\nunittest\n{\n   \
    \ alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv0ympkf8.d(33): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpv0ympkf8.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n  long counter = 0;\n  foreach(n; arr)\n  {\n    int[] digits = to!(int[])(n.text.to!(char[])).map!(a\
    \ => a.to!int - '0'.to!int);\n    counter += (digits.sum > 0) ? 1 : 0;\n  }\n\
    \  return counter;\n}\n/*\nunittest\n{\n    alias candidate = count_nums;\n\n\
    \    assert(candidate([]) == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n\
    \    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L,\
    \ 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L,\
    \ 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) ==\
    \ 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L]) ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplirw20f6.d(27): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmplirw20f6.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long ret = 0L;\n    foreach(index, val; arr)\n    {\n        auto digits\
    \ = new int[](2);\n        auto len = 0;\n        bool isNegative = false;\n \
    \       if(val < 0)\n        {\n            val = abs(val);\n            isNegative\
    \ = true;\n        }\n        while(val > 0)\n        {\n            digits[len]\
    \ = val % 10;\n            val /= 10;\n            len++;\n        }\n       \
    \ if(len == 0)\n        {\n            digits[0] = 0;\n            len = 1;\n\
    \        }\n        auto sum = 0;\n        for(auto i = 0; i < len; i++)\n   \
    \     {\n            sum += digits[i];\n        }\n        if(isNegative)\n  \
    \      {\n            sum *= -1;\n        }\n        if(sum > 0)\n        {\n\
    \            ret++;\n        }\n    }\n    return ret;\n}\n/*\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2uhwl50k.d(57): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp2uhwl50k.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long count = 0;\n    foreach(i; arr)\n    {\n        if(abs(i) < 10)\n\
    \        {\n            count++;\n        }\n        else\n        {\n       \
    \     auto tmp = abs(i);\n            long sum = 0;\n            while(tmp !=\
    \ 0)\n            {\n                sum += tmp % 10;\n                tmp /=\
    \ 10;\n            }\n            if(sum > 0)\n            {\n               \
    \ count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvv0im71f.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long res = 0;\n    foreach(n; arr) {\n        if(n > 0) {\n       \
    \     long sum = 0;\n            foreach(digit; n.digits) {\n                sum\
    \ += digit;\n            }\n            if(sum > 0) {\n                res++;\n\
    \            }\n        } else {\n            long sum = 0;\n            foreach(digit;\
    \ n.digits) {\n                sum += digit;\n            }\n            if(sum\
    \ < 0) {\n                res++;\n            }\n        }\n    }\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpatve7ssd.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n\tlong total = 0;\n\tforeach(e; arr) \n\t{\n\t\tif(e == 0)\n\t\t\tcontinue;\n\
    \t\tif(e < 0)\n\t\t\te = -e;\n\t\tlong curr_digit_sum = 0;\n\t\twhile(e != 0)\
    \ \n\t\t{\n\t\t\tcurr_digit_sum += e % 10;\n\t\t\te /= 10;\n\t\t}\n\t\tif(curr_digit_sum\
    \ > 0)\n\t\t\ttotal++;\n\t}\n\treturn total;\n}\nunittest\n{\n    alias candidate\
    \ = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpowrkqbxf.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long count = 0;\n    foreach(i; arr) {\n        i = i < 0 ? -i : i;\n\
    \        long sum = 0;\n        while(i > 0) {\n            sum += i % 10;\n \
    \           i /= 10;\n        }\n        if(sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_nums;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n\
    \    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L,\
    \ 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L,\
    \ 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) ==\
    \ 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L]) ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfpfo8fog.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n\treturn 0;\n}\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpekoijvx_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long sum = 0;\n    long absNum = 0;\n    long num = 0;\n    foreach(num;\
    \ arr)\n    {\n        absNum = abs(num);\n        do\n        {\n           \
    \ sum += absNum % 10;\n            absNum /= 10;\n        } while(absNum > 0);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = count_nums;\n\n\
    \    assert(candidate([]) == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n\
    \    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L,\
    \ 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L,\
    \ 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) ==\
    \ 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L]) ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo0c0g2ip.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    int sum = 0;\n    foreach(i; arr)\n    {\n        sum += sumOfDigits(i);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = count_nums;\n\n\
    \    assert(candidate([]) == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n\
    \    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L,\
    \ 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L,\
    \ 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) ==\
    \ 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L]) ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq_mu8au4.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long counter = 0;\n    auto temp_signed_digits = new TypeTuple!(int[]);\n\
    \    for (auto n = arr.front; n !is null; n = n.next)\n    {\n        int temp_sum\
    \ = 0;\n        auto signed_digits = signedDigits(n.value);\n        for (auto\
    \ x = signed_digits.front; x !is null; x = x.next)\n        {\n            temp_sum\
    \ += x.value;\n        }\n        if (temp_sum > 0)\n        {\n            counter++;\n\
    \        }\n    }\n    return counter;\n}\nunittest\n{\n    alias candidate =\
    \ count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4kymkt1n.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long count = 0;\n    long sum = 0;\n    foreach(val; arr) \n    {\n\
    \        sum = val < 0 ? -val : val;\n        while(sum > 0) \n        {\n   \
    \         count += sum % 10;\n            sum /= 10;\n        }\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqyqz3ii_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long count = 0;\n    foreach(i; arr) {\n        long sum = 0;\n   \
    \     long num = i < 0 ? i : -i;\n        while(num > 0) {\n            sum +=\
    \ num % 10;\n            num /= 10;\n        }\n        if(sum > 0)\n        \
    \    count++;\n    }\n    return count;\n}\n/*\nunittest\n{\n    alias candidate\
    \ = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyhsumb1t.d(32): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpyhsumb1t.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    return arr.count!(x => x.abs.sumDigits > 0);\n}\nunittest\n{\n    alias\
    \ candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxtpzc72w.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long j = 0;\n    foreach(e; arr)\n    {\n        if (abs(e) >= 10)\
    \ \n        {\n            long sum = 0;\n            while (e != 0) \n      \
    \      {\n                sum += abs(e % 10);\n                e /= 10;\n    \
    \        }\n            if (sum > 0)\n                j++;\n        }\n      \
    \  else if (abs(e) > 0)\n            j++;\n    }\n    return j;\n}\n/*\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8yq3klgt.d(38): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp8yq3klgt.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tint temp = abs(i);\n\t\t\
    while(temp > 0)\n\t\t{\n\t\t\tcount += temp % 10;\n\t\t\ttemp /= 10;\n\t\t}\n\t\
    \tif(count > 0)\n\t\t\tcount = 1;\n\t}\n\treturn count;\n}\n/*\nunittest\n{\n\
    \    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbrpnopz_.d(33): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpbrpnopz_.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long c = 0;\n    foreach(i; arr) {\n        if(abs(i) != i) {\n   \
    \         c += sum(i.digits);\n        } else {\n            c += sum(abs(i).digits);\n\
    \        }\n    }\n    return c;\n}\n/*\nunittest\n{\n    alias candidate = count_nums;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n\
    \    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L,\
    \ 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L,\
    \ 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) ==\
    \ 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L]) ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpj_q_cc8i.d(29): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpj_q_cc8i.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long count = 0;\n    foreach(i;arr)\n    {\n        if(i < 0)\n   \
    \     {\n            i *= -1;\n        }\n        long sum = 0;\n        while(i\
    \ > 0)\n        {\n            sum += i % 10;\n            i /= 10;\n        }\n\
    \        if(sum > 0)\n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n/*\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdejc3ogr.d(39): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpdejc3ogr.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    //auto res = arr.map!(a =>a).filter!(a => a > 0).sum;\n    auto res\
    \ = 0L;\n    foreach(a; arr)\n    {\n        auto sum = 0L;\n        for(auto\
    \ i = 0L; i < a.length; ++i)\n        {\n            sum += a[i];\n        }\n\
    \        if(sum > 0)\n        {\n            res += 1;\n        }\n    }\n   \
    \ return res;\n}\n//long count_nums(long[] arr) { return 0L; }\nunittest\n{\n\
    \    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc63j8sq1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n\tlong count_nums = 0L;\n\tforeach(int num; arr)\n\t{\n\t\tint num_digits\
    \ = num;\n\t\tlong digits_sum = 0L;\n\t\twhile(num_digits != 0)\n\t\t{\n\t\t\t\
    digits_sum += abs(num_digits % 10);\n\t\t\tnum_digits /= 10;\n\t\t}\n\t\tif(digits_sum\
    \ > 0)\n\t\t\tcount_nums++;\n\t}\n\treturn count_nums;\n}\n/*\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbbcrj3a9.d(34): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpbbcrj3a9.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    auto len = arr.length;\n    long count = 0;\n    for (inout(long) num\
    \ : arr) \n    {\n        inout(long) sum = 0;\n        if (num < 0) \n      \
    \  {\n            sum += abs(num % 10);\n            num /= 10;\n        }\n \
    \       while (num > 0) \n        {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if (sum > 0) \n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n/*\nunittest\n{\n    alias candidate\
    \ = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2v73z2ed.d(21): Error: semicolon expected, not \'':\''\n/tmp/tmp2v73z2ed.d(21):
    Error: expression expected, not \'':\''\n/tmp/tmp2v73z2ed.d(21): Error: found
    \''arr\'' when expecting \'';\'' following for condition\n/tmp/tmp2v73z2ed.d(41):
    Error: unterminated /* */ comment\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2v73z2ed.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long count = 0;\n    for (long elem; elem : arr)\n    {\n        long\
    \ sum = 0;\n        if (elem < 0)\n        {\n            sum += -elem % 10;\n\
    \            elem = -elem / 10;\n        }\n        while (elem > 0)\n       \
    \ {\n            sum += elem % 10;\n            elem /= 10;\n        }\n     \
    \   if (sum > 0)\n            count++;\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpubmzsvgm.d(20): Error: found \'':\'' when expecting \'';\''
    following for condition\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpubmzsvgm.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long count = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n\
    \        long a = arr[i];\n        long sum = 0;\n        while (a != 0)\n   \
    \     {\n            sum += a % 10;\n            a /= 10;\n        }\n       \
    \ if (sum > 0) count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzj9nkooo.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    auto new_arr = arr.filter!(n =>\n    {\n        int sum = 0;\n    \
    \    foreach(var digit; n.abs.digits)\n        {\n            sum += digit;\n\
    \        }\n        return sum > 0;\n    });\n    return new_arr.length;\n}\n\
    }\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz3gts7gb.d(30): Error: unrecognized declaration\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpz3gts7gb.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    // Write your implementation here\n    long result = 0;\n    foreach(elt;\
    \ arr)\n    {\n        if(abs(elt) > 0)\n        {\n            int sum = 0;\n\
    \            foreach(signed_digit; tuple(abs(elt).signedDigits))\n           \
    \ {\n                sum += signed_digit;\n            }\n            if(sum >\
    \ 0)\n            {\n                result++;\n            }\n        }\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = count_nums;\n\n\
    \    assert(candidate([]) == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n\
    \    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L,\
    \ 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L,\
    \ 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) ==\
    \ 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L]) ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp16zv0dow.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    return 0L;\n}\nunittest\n{\n    alias candidate = count_nums;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n\
    \    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L,\
    \ 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L,\
    \ 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) ==\
    \ 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L]) ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwfls_m8_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    /*\n        \uC7AC\uADC0\uD568\uC218\uB97C \uC774\uC6A9\uD574 \uAD6C\
    \uD604\uD558\uB294\uAC8C \uC26C\uC6B4\uAC70 \uAC19\uB2E4.\n        \uC74C\uC218\
    \uC778 \uACBD\uC6B0 \uB530\uB85C \uCD94\uAC00\uD574\uC900\uB2E4.\n    */\n   \
    \ long addDigit(long n) \n    {\n        if (n < 0) \n        {\n            n\
    \ = -n;\n        }\n        if (n < 10) \n        {\n            return n;\n \
    \       }\n        return n % 10 + addDigit(n / 10);\n    }\n    return arr.filter!(n\
    \ => addDigit(n) > 0).length;\n}\nunittest\n{\n    alias candidate = count_nums;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n\
    \    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L,\
    \ 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L,\
    \ 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) ==\
    \ 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L]) ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2fumc9l9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long count = 0;\n    foreach(i; arr) {\n        if (abs(i) < 10)\n\
    \            continue;\n        long s = 0;\n        while (i != 0) {\n      \
    \      s += abs(i % 10);\n            i /= 10;\n        }\n        if (s != 0)\n\
    \            count++;\n    }\n    return count;\n}\n/*\nunittest\n{\n    alias\
    \ candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgjiu4r1o.d(33): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpgjiu4r1o.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long counter = 0;\n    foreach(item; arr)\n    {\n        long[] digits\
    \ = item.toString.split(`-`);\n        long sum = 0;\n        foreach(dig; digits)\n\
    \        {\n            sum += dig.sumDigits;\n        }\n        if(sum > 0)\n\
    \        {\n            counter++;\n        }\n    }\n    return counter;\n}\n\
    unittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_klqt363.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    int res = 0;\n    foreach(el; arr) \n    {\n        if(el < 0) el =\
    \ -el;\n        if(el / 10 == 0) res++;\n        else \n        {\n          \
    \  while(el > 0) \n            {\n                res += el % 10;\n          \
    \      el /= 10;\n            }\n            if(res > 0) res++;\n        }\n \
    \   }\n    return res;\n}\nunittest\n{\n    alias candidate = count_nums;\n\n\
    \    assert(candidate([]) == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n\
    \    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L,\
    \ 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L,\
    \ 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) ==\
    \ 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L]) ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvhrz4tn5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long n = 0L;\n    foreach(i; arr) \n    {\n        long x = i < 0L\
    \ ? -i : i;\n        while(x) \n        {\n            n += x % 10L;\n       \
    \     x /= 10L;\n        }\n    }\n    return n;\n}\nunittest\n{\n    alias candidate\
    \ = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcxqju31a.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long res = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n \
    \       if (arr[i] == 0)\n        {\n            continue;\n        }\n      \
    \  else if (arr[i] < 0)\n        {\n            res += abs(arr[i] / 10) + 1;\n\
    \        }\n        else\n        {\n            res += abs(arr[i] / 10);\n  \
    \      }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = count_nums;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n\
    \    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L,\
    \ 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L,\
    \ 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) ==\
    \ 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L]) ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp6xpf7ac.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long ret = 0L;\n    foreach(idx, n; arr) \n    {\n        if(sum(abs(n).digits())\
    \ > 0L) \n        {\n            ret += 1L;\n        }\n    }\n    return ret;\n\
    }\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpopraz8_3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n\tlong f_element;\n\tlong b_element;\n\tlong result;\n\t\n\tresult = 0;\n\
    \t\n\tforeach(f_element; arr)\n\t{\n\t\tif (f_element < 0)\n\t\t{\n\t\t\tb_element\
    \ = f_element * -1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tb_element = f_element;\n\t\t\
    }\n\t\t\n\t\tforeach(char[] c; strip(to!string(b_element)))\n\t\t{\n\t\t\tresult\
    \ += b_element;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate\
    \ = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7xp91xgs.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n\tlong result = 0;\n\tforeach(elem; arr) \n\t{\n\t\tif(abs(elem) != 0)\
    \ \n\t\t{\n\t\t\tlong n = abs(elem);\n\t\t\tlong sum = 0;\n\t\t\twhile(n) \n\t\
    \t\t{\n\t\t\t\tsum += n % 10;\n\t\t\t\tn /= 10;\n\t\t\t}\n\t\t\tif(sum > 0)\n\t\
    \t\t\tresult++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate\
    \ = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf8tbg_o3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long count = 0;\n    foreach(x; arr)\n    {\n        int sum = 0;\n\
    \        long temp = abs(x);\n        while(temp > 0)\n        {\n           \
    \ sum += temp % 10;\n            temp /= 10;\n        }\n        if(sum > 0)\n\
    \            count++;\n    }\n    return count;\n}\n/*\nunittest\n{\n    alias\
    \ candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_bu4dqhb.d(34): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp_bu4dqhb.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long count = 0;\n    for (auto elem : arr) \n    {\n        long sum\
    \ = 0;\n        if (elem < 0) elem = -elem;\n        while (elem != 0) \n    \
    \    {\n            sum += elem % 10;\n            elem /= 10;\n        }\n  \
    \      if (sum > 0) count++;\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfvb95s4c.d(20): Error: no identifier for declarator elem\n/tmp/tmpfvb95s4c.d(20):
    Error: expression expected, not \'':\''\n/tmp/tmpfvb95s4c.d(20): Error: found
    \''arr\'' when expecting \'';\'' following for condition\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpfvb95s4c.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long counter = 0;\n    foreach(elem; arr)\n    {\n        int sum =\
    \ 0;\n        if(elem < 0)\n        {\n            elem = -elem;\n        }\n\
    \        while(elem > 0)\n        {\n            sum += elem % 10;\n         \
    \   elem /= 10;\n        }\n        if(sum > 0)\n        {\n            counter++;\n\
    \        }\n    }\n    return counter;\n}\n/*\nunittest\n{\n    alias candidate\
    \ = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy8m6c7gh.d(39): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpy8m6c7gh.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    import std.math;\n    long[] signed_digits;\n    long count;\n    foreach(int\
    \ i; 0..arr.length)\n    {\n        if(arr[i] < 0)\n        {\n            signed_digits\
    \ ~= -arr[i];\n        }\n        else\n        {\n            signed_digits ~=\
    \ arr[i];\n        }\n    }\n    long sum_digits(long n)\n    {\n        long\
    \ sum;\n        while(n > 0)\n        {\n            sum += n % 10;\n        \
    \    n /= 10;\n        }\n        return sum;\n    }\n    foreach(long j; signed_digits)\n\
    \    {\n        if(sum_digits(j) > 0)\n        {\n            count += 1;\n  \
    \      }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_nums;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n\
    \    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L,\
    \ 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L,\
    \ 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) ==\
    \ 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L]) ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnw6m61jz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long res = 0;\n    foreach(long x; arr) \n    {\n        int i = cast(int)\
    \ x;\n        if (i < 0)\n            i = -i;\n        res += cast(long) i;\n\
    \    }\n    return res;\n}\n/*\nunittest\n{\n    alias candidate = count_nums;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n\
    \    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L,\
    \ 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L,\
    \ 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) ==\
    \ 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L]) ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp732ed_8.d(29): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpp732ed_8.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long cnt = 0L;\n    for (int i = 0; i < arr.length; i++) {\n      \
    \  if (abs(arr[i]).countDigits() > 0) {\n            cnt++;\n        }\n    }\n\
    \    return cnt;\n}\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptn11b0vz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long count = 0;\n    foreach(i; arr) \n    {\n        if (abs(i) !=\
    \ i) \n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsn9zdmka.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    return reduce!q{a+b}(arr.map!q{a.sumdigits()}(filter!q{a!=0}(arr)));\n\
    }\n/*\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqswe5av2.d(21): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpqswe5av2.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n\tlong result = 0;\n\tforeach(elem; arr) \n\t{\n\t\tauto str = elem.to!string;\n\
    \t\tbool isNegative = false;\n\t\tif(str[0] == '-') \n\t\t{\n\t\t\tisNegative\
    \ = true;\n\t\t\tstr = str[1..$];\n\t\t}\n\t\tint sum = 0;\n\t\tforeach(s; str)\
    \ \n\t\t{\n\t\t\tsum += s.to!int;\n\t\t}\n\t\tif(isNegative) \n\t\t{\n\t\t\tsum\
    \ += 1;\n\t\t}\n\t\tif(sum > 0) \n\t\t{\n\t\t\tresult++;\n\t\t}\n\t}\n\treturn\
    \ result;\n}\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfr3exnvc.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    return arr.sum!(n => Math.abs(n)).count!(s => s > 0);\n}\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv3qv2v8y.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    return arr.length;\n}\n/*\nunittest\n{\n    alias candidate = count_nums;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n\
    \    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L,\
    \ 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L,\
    \ 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) ==\
    \ 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L]) ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp77dmsmw6.d(21): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp77dmsmw6.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n\tif (arr.length == 0)\n\t\treturn 0;\n\t\n\tlong count = 0;\n\tforeach\
    \ (x; arr)\n\t{\n\t\tint num = 0;\n\t\tif (x < 0)\n\t\t\tnum = x * -1;\n\t\telse\n\
    \t\t\tnum = x;\n\t\t\n\t\tint sum = 0;\n\t\twhile (num > 0)\n\t\t{\n\t\t\tsum\
    \ += num % 10;\n\t\t\tnum /= 10;\n\t\t}\n\t\t\n\t\tif (sum > 0)\n\t\t\tcount++;\n\
    \t}\n\t\n\treturn count;\n}\n/*\nunittest\n{\n    alias candidate = count_nums;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n\
    \    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L,\
    \ 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L,\
    \ 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) ==\
    \ 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L]) ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdq5lt4rk.d(44): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpdq5lt4rk.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long res = 0L;\n    foreach(n; arr) \n    {\n        long sum = 0L;\n\
    \        long num = abs(n);\n        while(num > 0L) \n        {\n           \
    \ sum += num % 10L;\n            num /= 10L;\n        }\n        if(sum > 0L)\
    \ \n        {\n            res++;\n        }\n    }\n    return res;\n}\n/*\n\
    unittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplmibm9e6.d(36): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmplmibm9e6.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long sum = 0;\n    foreach(x; arr)\n    {\n        if(x < 0)\n    \
    \    {\n            x = x * -1;\n        }\n        while(x > 0)\n        {\n\
    \            sum += x % 10;\n            x /= 10;\n        }\n    }\n    return\
    \ sum;\n}\n/*\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_y93utxj.d(34): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp_y93utxj.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n  long count = 0;\n  for (int i = 0; i < arr.length; i++){\n    long a\
    \ = 0;\n    long b = arr[i];\n    while (b != 0){\n      a += b % 10;\n      b\
    \ /= 10;\n    }\n    if (a > 0){\n      count++;\n    }\n  }\n  return count;\n\
    }\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfws78sak.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    return arr.filter!(a => a.abs().digits.sum > 0).length;\n}\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8ydrumu1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    return arr.length;\n}\n/*\nunittest\n{\n    alias candidate = count_nums;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n\
    \    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L,\
    \ 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L,\
    \ 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) ==\
    \ 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L]) ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp77dmsmw6.d(21): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp77dmsmw6.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    \n    return 0L;\n}\n/*\nunittest\n{\n    alias candidate = count_nums;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n\
    \    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L,\
    \ 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L,\
    \ 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) ==\
    \ 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L]) ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbxwv9flm.d(22): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpbxwv9flm.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long result = 0L;\n    long n = 0L;\n    long i = 0L;\n    long[] tmp\
    \ = new long[10L];\n    long j = 0L;\n    long sum = 0L;\n    long x = 0L;\n \
    \   long y = 0L;\n    long k = 0L;\n    long v = 0L;\n    long z = 0L;\n    long\
    \ l = 0L;\n    long m = 0L;\n    long s = 0L;\n    long t = 0L;\n    long q =\
    \ 0L;\n    long r = 0L;\n    long sign = 0L;\n    long digit = 0L;\n    long sum2\
    \ = 0L;\n    long num = 0L;\n    long sign2 = 0L;\n    n = arr.length;\n    i\
    \ = 0L;\n    while (i < n)\n    {\n        x = arr[i];\n        sum = 0L;\n  \
    \      if (x >= 0L)\n        {\n            sign = 1L;\n        }\n        else\n\
    \        {\n            sign = -1L;\n        }\n        y = x * sign;\n      \
    \  tmp = new long[10L];\n        j = 0L;\n        while (y > 0L)\n        {\n\
    \            digit = y % 10L;\n            sum = sum + digit;\n            tmp[j]\
    \ = digit;\n            y = y / 10L;\n            j = j + 1L;\n        }\n   \
    \     if (sum != 0L)\n        {\n            result = result + 1L;\n        }\n\
    \        i = i + 1L;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2t4kwx8f.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long ret = 0L;\n    for (int i = 0; i < arr.length; i++) {\n      \
    \  if (arr[i] != 0L) {\n            ret++;\n        }\n    }\n    return ret;\n\
    }\n/*\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkp5axjl3.d(27): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpkp5axjl3.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long count = 0;\n    foreach(i; arr)\n    {\n        if(std.math.abs(i)\
    \ > 9)\n        {\n            long t = i;\n            long sum = 0;\n      \
    \      while(t != 0)\n            {\n                sum += abs(t % 10);\n   \
    \             t /= 10;\n            }\n            if(sum > 0)\n             \
    \   count++;\n        }\n        else\n        {\n            if(i != 0)\n   \
    \             count++;\n        }\n    }\n    return count;\n}\n/*\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprpp3ocka.d(42): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmprpp3ocka.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long ret = 0L;\n    foreach(idx, val; arr)\n    {\n        int sum\
    \ = 0;\n        string s = val.to!string;\n        foreach(c; s)\n        {\n\
    \            sum += c.to!int - '0'.to!int;\n        }\n        if(sum > 0)\n \
    \           ret++;\n    }\n    return ret;\n}\n/*\nunittest\n{\n    alias candidate\
    \ = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpct38yog5.d(33): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpct38yog5.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    return arr.length;\n}\nunittest\n{\n    alias candidate = count_nums;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n\
    \    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L,\
    \ 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L,\
    \ 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) ==\
    \ 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L]) ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzigthuy7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    if (arr.length == 0)\n    {\n        return 0;\n    }\n    else\n \
    \   {\n        long res = 0;\n        foreach (long i; arr)\n        {\n     \
    \       if(i<0)\n            {\n                res = res + (abs(i) % 10);\n \
    \           }\n            else\n            {\n                res = res + (i\
    \ % 10);\n            }\n            \n        }\n        return res;\n    }\n\
    \    \n}\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0bqkra5z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n  long result = 0;\n  foreach(elem; arr)\n  {\n    long b = abs(elem);\n\
    \    long sum = 0;\n    while(b != 0)\n    {\n      sum += b % 10;\n      b /=\
    \ 10;\n    }\n    if(sum > 0)\n      result++;\n  }\n  return result;\n}\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvkhpnaea.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long res = 0;\n    foreach(i; arr)\n    {\n        res += (i != 0 &&\
    \ sum((i < 0 ? -i : i).digits) > 0);\n    }\n    return res;\n}\nunittest\n{\n\
    \    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbcz53jtm.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long count = 0;\n    bool isNegative = false;\n    long sum = 0;\n\
    \    foreach(n; arr)\n    {\n        sum = 0;\n        isNegative = false;\n \
    \       if(n < 0)\n        {\n            isNegative = true;\n            n =\
    \ -n;\n        }\n        while(n > 0)\n        {\n            sum += n % 10;\n\
    \            n /= 10;\n        }\n        if(isNegative)\n        {\n        \
    \    sum -= 1;\n        }\n        if(sum > 0)\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_nums;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n\
    \    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L,\
    \ 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L,\
    \ 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) ==\
    \ 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L]) ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpogqedx__.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n  long count = 0;\n  foreach(index, int n; arr)\n  {\n    auto tmp = n;\n\
    \    if(tmp < 0) tmp = -tmp;\n    long sum = 0;\n    while(tmp)\n    {\n     \
    \ sum += tmp % 10;\n      tmp /= 10;\n    }\n    if(sum > 0) count++;\n  }\n \
    \ return count;\n}\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpigcznc2i.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    return arr.length;\n}\n/*\nunittest\n{\n    alias candidate = count_nums;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n\
    \    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L,\
    \ 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L,\
    \ 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) ==\
    \ 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L]) ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp77dmsmw6.d(21): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp77dmsmw6.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long counter = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n\
    \        if (abs(arr[i]) / 10 > 0)\n        {\n            long temp = abs(arr[i]);\n\
    \            long sum = 0;\n            while (temp / 10 > 0)\n            {\n\
    \                long lastDigit = temp % 10;\n                sum += lastDigit;\n\
    \                temp /= 10;\n            }\n            sum += temp;\n      \
    \      if (sum > 0)\n            {\n                counter++;\n            }\n\
    \        }\n        else if (abs(arr[i]) == 0)\n        {\n            continue;\n\
    \        }\n        else\n        {\n            counter++;\n        }\n    }\n\
    \    return counter;\n}\nunittest\n{\n    alias candidate = count_nums;\n\n  \
    \  assert(candidate([]) == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n\
    \    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L,\
    \ 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L,\
    \ 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) ==\
    \ 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L]) ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvad_wawc.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n\tlong n = 0;\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tif (sum_digits(arr[i])\
    \ > 0) \n\t\t{\n\t\t\tn++;\n\t\t}\n\t}\n\treturn n;\n}\n/*\nunittest\n{\n    alias\
    \ candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuue8ghot.d(29): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpuue8ghot.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long result = 0L;\n    foreach(i; arr)\n    {\n        long v = i;\n\
    \        if(v < 0L)\n        {\n            v = abs(v);\n        }\n        while(v\
    \ != 0L)\n        {\n            result += v % 10L;\n            v /= 10L;\n \
    \       }\n    }\n    return result;\n}\n//long count_nums(long[] arr) {\n// \
    \   long[] input = arr.dup;\n//    long result = 0L;\n//    foreach(v; input)\n\
    //    {\n//        if(v < 0L)\n//        {\n//            v = abs(v);\n//    \
    \    }\n//        while(v != 0L)\n//        {\n//            result += v % 10L;\n\
    //            v /= 10L;\n//        }\n//    }\n//    return result;\n//}\n/*\n\
    unittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpelgf7y3y.d(52): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpelgf7y3y.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014682
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n\tlong result = 0;\n\tlong limit = arr.length;\n\tfor (long i = 0; i <\
    \ limit; i++)\n\t{\n\t\tlong a = arr[i];\n\t\tlong sum = 0;\n\t\twhile (a != 0)\n\
    \t\t{\n\t\t\tsum += abs(a % 10);\n\t\t\ta /= 10;\n\t\t}\n\t\tif (sum > 0)\n\t\t\
    {\n\t\t\tresult++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate\
    \ = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpujnal4os.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014683
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long n = 0L;\n    foreach(i; arr)\n    {\n        long k = 0L;\n  \
    \      int sign = 1;\n        if(i < 0)\n        {\n            sign = -1;\n \
    \           i = -i;\n        }\n        int digits = cast(int)log10(i) + 1;\n\
    \        while(digits-- > 0)\n        {\n            long digit = i % 10;\n  \
    \          k += digit;\n            i /= 10;\n        }\n        if(k * sign >\
    \ 0)\n            n++;\n    }\n    return n;\n}\nunittest\n{\n    alias candidate\
    \ = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp10gsfrn7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014683
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long count = 0;\n    /*\n    \n    \n    */\n    return count;\n}\n\
    /*\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplccr5aqy.d(26): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmplccr5aqy.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014683
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long count = 0;\n    for (long i = 0; i < arr.length; i++){\n     \
    \   if (arr[i] > 0)\n            count++;\n        else if (arr[i] < 0)\n    \
    \        count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpny2pyv5n.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014683
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    return arr.filter!(x => x.sumSignedDigits() > 0L).length;\n}\n/*\n\
    unittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppdmv_cjm.d(21): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmppdmv_cjm.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014683
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long sum = 0;\n    foreach(i; arr) \n    {\n        if(i == 0) \n \
    \       {\n            continue;\n        }\n        int sign = signbit(i);\n\
    \        i = abs(i);\n        sum = i % 10;\n        while(i /= 10) \n       \
    \ {\n            sum += i % 10;\n        }\n        if(sum != 0) \n        {\n\
    \            if(sign != 0) \n            {\n                sum = -sum;\n    \
    \        }\n            sum = 1;\n        }\n    }\n    return sum;\n}\n/*\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpluigg02b.d(44): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpluigg02b.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014683
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long counter = 0;\n    foreach(int e; arr) \n    {\n        int absE\
    \ = abs(e);\n        long sumOfDigits = 0;\n        while(absE > 0) \n       \
    \ {\n            sumOfDigits += absE % 10;\n            absE /= 10;\n        }\n\
    \        if(sumOfDigits > 0) \n        {\n            counter++;\n        }\n\
    \    }\n    return counter;\n}\n/*\nunittest\n{\n    alias candidate = count_nums;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n\
    \    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L,\
    \ 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L,\
    \ 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) ==\
    \ 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L]) ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvsdglp3x.d(36): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpvsdglp3x.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014683
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    return arr.filter!(a => a.to!string.map!(a => a.to!long).sum > 0).length;\n\
    }\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7arqc0uf.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014683
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long count = 0;\n    foreach(i; arr)\n    {\n        int sum = 0;\n\
    \        foreach(j; i.tupleof)\n        {\n            sum += j;\n        }\n\
    \        if(sum > 0)\n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2d554vln.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014683
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long count = 0;\n    foreach(i; arr)\n    {\n        if(abs(i) < 10)\n\
    \        {\n            count += 1;\n        }\n        else\n        {\n    \
    \        long sum = 0;\n            int length = std.to!string(abs(i)).length;\n\
    \            for(int j = 0; j < length; j++)\n            {\n                int\
    \ digit = i % 10;\n                sum += digit;\n                i /= 10;\n \
    \           }\n            if(sum > 0)\n            {\n                count +=\
    \ 1;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk1w1jl48.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014683
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long count = 0;\n    foreach(num; arr) \n    {\n        long sum =\
    \ 0;\n        if(num < 0)\n        {\n            sum = -num;\n        }\n   \
    \     else\n        {\n            sum = num;\n        }\n        while(sum >\
    \ 0)\n        {\n            sum -= sum % 10;\n            sum /= 10;\n      \
    \  }\n        if(sum != 0)\n        {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqf1lja35.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014683
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long count = 0;\n    for (size_t i = 0; i < arr.length; i++) \n   \
    \ {\n        long num = arr[i];\n        long sum = 0;\n        if (num < 0) \n\
    \        {\n            num = -num;\n        }\n        for (; num != 0; num /=\
    \ 10) \n        {\n            sum += num % 10;\n        }\n        if (sum >\
    \ 0) \n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\n/*\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1bwzv73r.d(39): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp1bwzv73r.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014683
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    return std.algorithm.count!((long x) => x > 0)(arr);\n}\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsp67sah4.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014683
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long count = 0;\n    foreach(e; arr)\n    {\n        count += (abs(e)\
    \ / 10 == 0) ? (abs(e) % 10 != 0) : 1;\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkslmcwts.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014683
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long c = 0;\n    int i;\n    for (i = 0; i < arr.length; i++) \n  \
    \  {\n        c += (sum(cast(int[])arr[i])) > 0 ? 1 : 0;\n    }\n    return c;\n\
    }\n/*\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpu07vz7b7.d(27): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpu07vz7b7.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014683
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long count = 0;\n    foreach(long i; arr)\n    {\n        if(sum(digits(i))\
    \ > 0)\n            count++;\n    }\n    return count;\n}\n/*\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq1zaf3fl.d(27): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpq1zaf3fl.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014683
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    static struct T (size_t num, size_t sgn) \n    {\n        size_t num;\n\
    \        size_t sgn;\n    }\n    pure nothrow @safe T abs(T x) { \n        if\
    \ (x.sgn) \n            return T(x.num, 0);\n        else \n            return\
    \ x;\n    }\n    pure nothrow @safe T add(T x, T y) { \n        return T(x.num\
    \ + y.num, x.sgn + y.sgn);\n    }\n    pure nothrow @safe T addUnsigned(T x, T\
    \ y) { \n        return T(x.num + y.num, x.sgn);\n    }\n    pure nothrow @safe\
    \ T digits(long num) \n    {\n        return T(num % 10, num < 0 ? 1 : 0);\n \
    \   }\n    pure nothrow @safe long count_nums_rec(T[] arr) \n    {\n        return\
    \ (arr.length ? (abs(arr[0]).num > 0 || count_nums_rec(arr[1 .. $])) : 0);\n \
    \   }\n    return count_nums_rec(arr.map!digits.cumulate!addUnsigned);\n}\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpayqc87m6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014683
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long count = 0;\n    long arr_len = arr.length;\n    long tmp = 0;\n\
    \    while(count < arr_len)\n    {\n        tmp = arr[count];\n        if(tmp\
    \ > 0)\n        {\n            if(tmp % 10 > 0)\n            {\n             \
    \   count += 1;\n            }\n            else\n            {\n            \
    \    tmp = tmp / 10;\n                if(tmp % 10 > 0)\n                {\n  \
    \                  count += 1;\n                }\n                else\n    \
    \            {\n                    tmp = tmp / 10;\n                    if(tmp\
    \ % 10 > 0)\n                    {\n                        count += 1;\n    \
    \                }\n                    else\n                    {\n        \
    \                count += 1;\n                    }\n                }\n     \
    \       }\n        }\n        else\n        {\n            tmp = tmp * -1;\n \
    \           if(tmp % 10 > 0)\n            {\n                count += 1;\n   \
    \         }\n            else\n            {\n                tmp = tmp / 10;\n\
    \                if(tmp % 10 > 0)\n                {\n                    count\
    \ += 1;\n                }\n                else\n                {\n        \
    \            tmp = tmp / 10;\n                    if(tmp % 10 > 0)\n         \
    \           {\n                        count += 1;\n                    }\n  \
    \                  else\n                    {\n                        count\
    \ += 1;\n                    }\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_nums;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n\
    \    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L,\
    \ 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L,\
    \ 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) ==\
    \ 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L]) ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbkz_3dtt.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014683
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    int[] tmp_arr = new int[arr.length];\n    for (int i = 0; i < arr.length;\
    \ i++)\n    {\n        int a = arr[i];\n        while (a != 0)\n        {\n  \
    \          int b = a % 10;\n            tmp_arr[i] += b;\n            a /= 10;\n\
    \        }\n    }\n    return tmp_arr.filter!(n => n > 0).length;\n}\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp32ixtlop.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014683
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long n= 0L;\n    foreach(i; arr)\n    {\n        if(std.math.abs(i)>9L)\n\
    \        {\n            long a=0L;\n            long x= i;\n            do{\n\
    \                a+= x%10L;\n                x/=10L;\n            }while(x!=0L);\n\
    \            if(a>0L)\n                n++;\n        }\n        else\n       \
    \     if(i>0L)\n                n++;\n    }\n    return n;\n}\n/*\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0z_yt005.d(39): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp0z_yt005.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014683
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    int t = arr.length;\n    int i = 0;\n    int d = 0;\n    long result\
    \ = 0;\n    while (i < t) {\n        if (arr[i] < 0) {\n            d = abs(arr[i]);\n\
    \        } else {\n            d = arr[i];\n        }\n        while (d > 0) {\n\
    \            result += d % 10;\n            d /= 10;\n        }\n        if (result\
    \ > 0) {\n            result = 1;\n        } else {\n            result = 0;\n\
    \        }\n        i += 1;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpauda60dx.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014683
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    \n    long[] a = arr.dup;\n    long cnt = 0;\n    long len = a.length;\n\
    \    long tmp;\n    long sum;\n    for (long i = 0; i < len; i++) {\n        tmp\
    \ = a[i];\n        sum = 0;\n        while (tmp != 0) {\n            sum += abs(tmp\
    \ % 10);\n            tmp /= 10;\n        }\n        if (sum > 0) {\n        \
    \    cnt++;\n        }\n    }\n    return cnt;\n}\n//*/\n/*\nunittest\n{\n   \
    \ alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpd6omds84.d(39): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpd6omds84.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014683
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n  long ret = 0;\n  foreach(inout e; arr)\n  {\n    if(sum_signed_digits(e)\
    \ > 0)\n      ret++;\n  }\n  return ret;\n}\nunittest\n{\n    alias candidate\
    \ = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7j15gvoo.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014683
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    return arr.filter!(e => e < 0 ? sumSignedDigits(-e) > 0 : sumDigits(e)\
    \ > 0).length;\n}\nlong sumDigits(long n)\n{\n    long result = 0;\n    while\
    \ (n != 0) {\n        result += n % 10;\n        n /= 10;\n    }\n    return result;\n\
    }\nlong sumSignedDigits(long n)\n{\n    long result = 0;\n    while (n != 0) {\n\
    \        result += n % 10;\n        n /= 10;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdhiezg5u.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014683
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long res = 0L;\n    foreach(index, item; arr) \n    {\n        long\
    \ val = 0L;\n        while(item != 0L) \n        {\n            val += item %\
    \ 10L;\n            item /= 10L;\n        }\n        if(val > 0L)\n          \
    \  res++;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = count_nums;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n\
    \    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L,\
    \ 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L,\
    \ 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) ==\
    \ 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L]) ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe3o0kl22.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014683
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    int[] arr2 = new int[arr.length];\n    foreach(int i,ref long v; arr)\n\
    \    {\n        if(v<0)\n            arr2[i] = -v;\n        else\n           \
    \ arr2[i] = v;\n    }\n    return arr2.count!(x=>x/10!=0);\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcqxhssal.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014683
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long result = 0L;\n    for (long x = 0L; x < arr.length; x++)\n   \
    \ {\n        if (sumDigits(arr[x]) > 0L)\n        {\n            result++;\n \
    \       }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_nums;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n\
    \    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L,\
    \ 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L,\
    \ 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) ==\
    \ 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L]) ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5i32b1f5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014683
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long sum = 0;\n    for (int i = 0; i < arr.length; i++)\n    {\n  \
    \      auto n = arr[i];\n        if (n < 0) n = -n;\n        if (n == 0)\n   \
    \     {\n            return sum;\n        }\n        else\n        {\n       \
    \     long digits_sum = 0;\n            for (; n != 0; n /= 10) digits_sum +=\
    \ n % 10;\n            if (digits_sum > 0) sum++;\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3ebbbusn.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014683
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long count = 0;\n    foreach(a; arr)\n    {\n        long sum = 0;\n\
    \        while(a != 0)\n        {\n            auto m = a % 10;\n            sum\
    \ += abs(m);\n            a /= 10;\n        }\n        if(sum > 0)\n         \
    \   count++;\n    }\n    return count;\n}\n/*\nunittest\n{\n    alias candidate\
    \ = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpd0evxlye.d(34): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpd0evxlye.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014683
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n \
    \   >>> count_nums([1L, 1L, 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr)\
    \ \n{\n    long cnt = 0L;\n    foreach(e; arr)\n    {\n        auto d = e.abs.digits.sum;\n\
    \        if(d)\n            cnt++;\n    }\n    return cnt;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy6zgpule.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014683
