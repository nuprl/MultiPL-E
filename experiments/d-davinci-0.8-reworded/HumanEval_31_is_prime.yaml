name: HumanEval_31_is_prime
language: d
prompt: "import std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n\
  \    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n\
  \    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n\
  \    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool\
  \ is_prime(long n) \n"
tests: "unittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
  \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n\
  \    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n \
  \   assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
  \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n\
  \    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
  \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
completions: ["{ \n    if (n <= 1) \n        return false; \n    if (n <= 3) \n  \
    \      return true; \n    if (n % 2 == 0 || n % 3 == 0) \n        return false;\
    \ \n    for (long i = 5; i * i <= n; i = i + 6) \n        if (n % i == 0 || n\
    \ % (i + 2) == 0) \n            return false; \n    return true; \n} ", "{\n\t\
    if (n==1) return false;\n\tfor (int i=2; i<=n/2; i++)\n\t{\n\t\tif (n%i==0) return\
    \ false;\n\t}\n\treturn true;\n}\n/*\nReturn a list of the primes in a given range.\n\
    \    >>> primes(5L, 10L)\n    [5L, 7L]\n    >>> primes(1L, 2L)\n    [2L]\n   \
    \ >>> primes(1L, 1L)\n    []\n    >>> primes(1L, 10L)\n    [2L, 3L, 5L, 7L]\n\
    \    >>> primes(2L, 11L)\n    [2L, 3L, 5L, 7L, 11L]\n*/\nlong[] primes(long start,\
    \ long end)\n{\n\tlong[] result;\n\tforeach (n; start..end)\n\t{\n\t\tif (is_prime(n))\n\
    \t\t{\n\t\t\tresult ~= n;\n\t\t}\n\t}\n\treturn result;\n}", "{\n    if (n <=\
    \ 1) return false;\n    for (long i = 2; i <= trunc(sqrt(n)); i++) \n    {\n \
    \       if (n % i == 0) return false;\n    }\n    return true;\n}", "{\n    \n\
    \    bool prime = true;\n    foreach(long i; 0L..sqrt(n)) {\n        if (n % i\
    \ == 0) {\n            prime = false;\n            break;\n        }\n    }\n\
    \    return prime;\n}\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
  "{\n\tif (n < 2) return false;\n\tif (n % 2 == 0 && n != 2) return false;\n\tif\
    \ (n % 3 == 0 && n != 3) return false;\n\tif (n % 5 == 0 && n != 5) return false;\n\
    \t\n\tfor (long i = 7; i <= sqrt(n); i += 2) {\n\t\tif (n % i == 0) return false;\n\
    \t}\n\treturn true;\n}", "{\n    if (n <= 1)\n    {\n        return false;\n \
    \   }\n    else if (n <= 3)\n    {\n        return true;\n    }\n    else if (n\
    \ % 2 == 0 || n % 3 == 0)\n    {\n        return false;\n    }\n    else\n   \
    \ {\n        for (int i = 5; i * i <= n; i += 6)\n        {\n            if (n\
    \ % i == 0 || n % (i + 2) == 0)\n            {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n}", "{\n  if (n == 1)\n\
    \    return false;\n  foreach (i; 2 .. n) \n  {\n    if (n % i == 0)\n      return\
    \ false;\n  }\n  return true;\n}", "{\n\tint maxFactor = sqrt(n);\n\tif (n ==\
    \ 1) return false;\n\tfor (int i = 2; i <= maxFactor; i++) {\n\t\tif (n % i ==\
    \ 0) return false;\n\t}\n\treturn true;\n}", "{\n    return is_prime_helper(n,\
    \ 2L);\n}", "{\n  if (n == 1)\n    return false;\n  else if (n == 2)\n    return\
    \ true;\n  else\n  {\n    long x = ceil(sqrt(n));\n    for (int i = 2; i <= x;\
    \ i++)\n    {\n      if (n % i == 0)\n        return false;\n    }\n    return\
    \ true;\n  }\n}", "{\n    if (n == 1) return false;\n    if (n % 2 == 0) return\
    \ false;\n    for (long d = 3; d <= sqrt(n); d += 2) \n    {\n        if (n %\
    \ d == 0) return false;\n    }\n    return true;\n}\n/*\n    Return a list of\
    \ all prime numbers in a given range.\n    >>> get_primes(1L, 10L)\n    [2L, 3L,\
    \ 5L, 7L]\n    >>> get_primes(2L, 3L)\n    [2L, 3L]\n    >>> get_primes(101L,\
    \ 105L)\n    [101L, 103L]\n    >>> get_primes(2L, 1L)\n    []\n*/\nauto get_primes(long\
    \ start, long end) \n{\n    auto p = new List!long;\n    for (long n = start;\
    \ n <= end; n++) \n    {\n        if (is_prime(n)) p.insertBack(n);\n    }\n \
    \   return p;\n}\n/*\n    Return a list of the first n prime numbers, ordered\
    \ by size.\n    >>> get_n_primes(1L)\n    [2L]\n    >>> get_n_primes(2L)\n   \
    \ [2L, 3L]\n    >>> get_n_primes(3L)\n    [2L, 3L, 5L]\n    >>> get_n_primes(4L)\n\
    \    [2L, 3L, 5L, 7L]\n    >>> get_n_primes(5L)\n    [2L, 3L, 5L, 7L, 11L]\n \
    \   >>> get_n_primes(6L)\n    [2L, 3L, 5L, 7L, 11L, 13L]\n    >>> get_n_primes(7L)\n\
    \    [2L, 3L, 5L, 7L, 11L, 13L, 17L]\n    >>> get_n_primes(8L)\n    [2L, 3L, 5L,\
    \ 7L, 11L, 13L, 17L, 19L]\n    >>>", "{\n  // if (n < 2) return false;\n  foreach\
    \ (i; 2..sqrt(n)+1) \n  {\n    if (n % i == 0) return false;\n  }\n  return true;\n\
    }", "{\n    // 1 is a special case.\n    if (n == 1)\n    {\n        return false;\n\
    \    }\n    // 2 is a special case.\n    if (n == 2)\n    {\n        return true;\n\
    \    }\n    // 2 is the only even prime.\n    if (n % 2 == 0)\n    {\n       \
    \ return false;\n    }\n    // All primes can be written as 6k+i,\n    // with\
    \ i = -1,0,1,2,3,4. So, we only\n    // need to test for divisibility by 6k+i,\n\
    \    // with i = -1,1,2,3,4,5.\n    long limit = sqrt(n);\n    for (long i = 3;\
    \ i <= limit; i += 2)\n    {\n        if (n % i == 0)\n        {\n           \
    \ return false;\n        }\n    }\n    return true;\n}", "{\n    import std.math;\n\
    \    if (n <= 1)\n        return false;\n    if (n == 2)\n        return true;\n\
    \    if (n % 2 == 0)\n        return false;\n    for (int i = 3; i <= floor(sqrt(n));\
    \ i+=2)\n    {\n        if (n % i == 0)\n            return false;\n    }\n  \
    \  return true;\n}", "{\n    //return true if n is prime, false otherwise.\n \
    \   //1 and 0 are not primes.\n    if (n <= 1)\n    {\n        return false;\n\
    \    }\n    else if (n == 2)\n    {\n        return true;\n    }\n    else if\
    \ (n % 2 == 0)\n    {\n        return false;\n    }\n    //2 and 3 are primes\n\
    \    else if (n <= 3)\n    {\n        return true;\n    }\n    else\n    {\n \
    \       //check if n divides by any odd number less than sqrt(n)\n        //return\
    \ true if n is prime\n        foreach (i; 3..cast(long)sqrt(n) + 1)\n        {\n\
    \            if (n % i == 0)\n            {\n                return false;\n \
    \           }\n        }\n        return true;\n    }\n}", "{\n    if (n <= 1)\
    \ return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 ==\
    \ 0) return false;\n    long i = 5;\n    while (i * i <= n) {\n        if (n %\
    \ i == 0 || n % (i + 2) == 0) return false;\n        i += 6;\n    }\n    return\
    \ true;\n}", "{\n    long i;\n    foreach( i; 2..floor(sqrt(n)+1)) \n    {\n \
    \       if ( n % i == 0) \n        {\n            return false;\n        }\n \
    \   }\n    return true;\n}", "{\n    if (n < 2)\n        return false;\n    \n\
    \    if (n == 2)\n        return true;\n    \n    if (n % 2 == 0)\n        return\
    \ false;\n    \n    for (int i = 3; i < sqrt(n) + 1; i += 2)\n    {\n        if\
    \ (n % i == 0)\n            return false;\n    }\n    \n    return true;\n}",
  "{\n\tif (n <= 1)\n\t\treturn false;\n\tif (n <= 3)\n\t\treturn true;\n\t\n\tif\
    \ (n % 2 == 0 || n % 3 == 0)\n\t\treturn false;\n\t\n\tfor (long i = 5; i * i\
    \ <= n; i = i + 6)\n\t\tif (n % i == 0 || n % (i + 2) == 0)\n\t\t\treturn false;\n\
    \treturn true;\n}", "{\n  if (n <= 1) \n  {\n    return false;\n  }\n  for (long\
    \ i = 2; i < n / 2; i++) \n  {\n    if (n % i == 0) \n    {\n      return false;\n\
    \    }\n  }\n  return true;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
