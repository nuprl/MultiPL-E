name: HumanEval_31_is_prime
language: d
prompt: "import std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n\
  \    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n\
  \    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n\
  \    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool\
  \ is_prime(long n) \n"
tests: "unittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
  \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n\
  \    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n \
  \   assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
  \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n\
  \    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
  \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
completions: ["{ \n    if (n <= 1) \n        return false; \n    if (n <= 3) \n  \
    \      return true; \n    if (n % 2 == 0 || n % 3 == 0) \n        return false;\
    \ \n    for (long i = 5; i * i <= n; i = i + 6) \n        if (n % i == 0 || n\
    \ % (i + 2) == 0) \n            return false; \n    return true; \n} ", "{\n\t\
    if (n==1) return false;\n\tfor (int i=2; i<=n/2; i++)\n\t{\n\t\tif (n%i==0) return\
    \ false;\n\t}\n\treturn true;\n}\n/*\nReturn a list of the primes in a given range.\n\
    \    >>> primes(5L, 10L)\n    [5L, 7L]\n    >>> primes(1L, 2L)\n    [2L]\n   \
    \ >>> primes(1L, 1L)\n    []\n    >>> primes(1L, 10L)\n    [2L, 3L, 5L, 7L]\n\
    \    >>> primes(2L, 11L)\n    [2L, 3L, 5L, 7L, 11L]\n*/\nlong[] primes(long start,\
    \ long end)\n{\n\tlong[] result;\n\tforeach (n; start..end)\n\t{\n\t\tif (is_prime(n))\n\
    \t\t{\n\t\t\tresult ~= n;\n\t\t}\n\t}\n\treturn result;\n}", "{\n    if (n <=\
    \ 1) return false;\n    for (long i = 2; i <= trunc(sqrt(n)); i++) \n    {\n \
    \       if (n % i == 0) return false;\n    }\n    return true;\n}", "{\n    \n\
    \    bool prime = true;\n    foreach(long i; 0L..sqrt(n)) {\n        if (n % i\
    \ == 0) {\n            prime = false;\n            break;\n        }\n    }\n\
    \    return prime;\n}\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
  "{\n\tif (n < 2) return false;\n\tif (n % 2 == 0 && n != 2) return false;\n\tif\
    \ (n % 3 == 0 && n != 3) return false;\n\tif (n % 5 == 0 && n != 5) return false;\n\
    \t\n\tfor (long i = 7; i <= sqrt(n); i += 2) {\n\t\tif (n % i == 0) return false;\n\
    \t}\n\treturn true;\n}", "{\n    if (n <= 1)\n    {\n        return false;\n \
    \   }\n    else if (n <= 3)\n    {\n        return true;\n    }\n    else if (n\
    \ % 2 == 0 || n % 3 == 0)\n    {\n        return false;\n    }\n    else\n   \
    \ {\n        for (int i = 5; i * i <= n; i += 6)\n        {\n            if (n\
    \ % i == 0 || n % (i + 2) == 0)\n            {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n}", "{\n  if (n == 1)\n\
    \    return false;\n  foreach (i; 2 .. n) \n  {\n    if (n % i == 0)\n      return\
    \ false;\n  }\n  return true;\n}", "{\n\tint maxFactor = sqrt(n);\n\tif (n ==\
    \ 1) return false;\n\tfor (int i = 2; i <= maxFactor; i++) {\n\t\tif (n % i ==\
    \ 0) return false;\n\t}\n\treturn true;\n}", "{\n    return is_prime_helper(n,\
    \ 2L);\n}", "{\n  if (n == 1)\n    return false;\n  else if (n == 2)\n    return\
    \ true;\n  else\n  {\n    long x = ceil(sqrt(n));\n    for (int i = 2; i <= x;\
    \ i++)\n    {\n      if (n % i == 0)\n        return false;\n    }\n    return\
    \ true;\n  }\n}", "{\n    if (n == 1) return false;\n    if (n % 2 == 0) return\
    \ false;\n    for (long d = 3; d <= sqrt(n); d += 2) \n    {\n        if (n %\
    \ d == 0) return false;\n    }\n    return true;\n}\n/*\n    Return a list of\
    \ all prime numbers in a given range.\n    >>> get_primes(1L, 10L)\n    [2L, 3L,\
    \ 5L, 7L]\n    >>> get_primes(2L, 3L)\n    [2L, 3L]\n    >>> get_primes(101L,\
    \ 105L)\n    [101L, 103L]\n    >>> get_primes(2L, 1L)\n    []\n*/\nauto get_primes(long\
    \ start, long end) \n{\n    auto p = new List!long;\n    for (long n = start;\
    \ n <= end; n++) \n    {\n        if (is_prime(n)) p.insertBack(n);\n    }\n \
    \   return p;\n}\n/*\n    Return a list of the first n prime numbers, ordered\
    \ by size.\n    >>> get_n_primes(1L)\n    [2L]\n    >>> get_n_primes(2L)\n   \
    \ [2L, 3L]\n    >>> get_n_primes(3L)\n    [2L, 3L, 5L]\n    >>> get_n_primes(4L)\n\
    \    [2L, 3L, 5L, 7L]\n    >>> get_n_primes(5L)\n    [2L, 3L, 5L, 7L, 11L]\n \
    \   >>> get_n_primes(6L)\n    [2L, 3L, 5L, 7L, 11L, 13L]\n    >>> get_n_primes(7L)\n\
    \    [2L, 3L, 5L, 7L, 11L, 13L, 17L]\n    >>> get_n_primes(8L)\n    [2L, 3L, 5L,\
    \ 7L, 11L, 13L, 17L, 19L]\n    >>>", "{\n  // if (n < 2) return false;\n  foreach\
    \ (i; 2..sqrt(n)+1) \n  {\n    if (n % i == 0) return false;\n  }\n  return true;\n\
    }", "{\n    // 1 is a special case.\n    if (n == 1)\n    {\n        return false;\n\
    \    }\n    // 2 is a special case.\n    if (n == 2)\n    {\n        return true;\n\
    \    }\n    // 2 is the only even prime.\n    if (n % 2 == 0)\n    {\n       \
    \ return false;\n    }\n    // All primes can be written as 6k+i,\n    // with\
    \ i = -1,0,1,2,3,4. So, we only\n    // need to test for divisibility by 6k+i,\n\
    \    // with i = -1,1,2,3,4,5.\n    long limit = sqrt(n);\n    for (long i = 3;\
    \ i <= limit; i += 2)\n    {\n        if (n % i == 0)\n        {\n           \
    \ return false;\n        }\n    }\n    return true;\n}", "{\n    import std.math;\n\
    \    if (n <= 1)\n        return false;\n    if (n == 2)\n        return true;\n\
    \    if (n % 2 == 0)\n        return false;\n    for (int i = 3; i <= floor(sqrt(n));\
    \ i+=2)\n    {\n        if (n % i == 0)\n            return false;\n    }\n  \
    \  return true;\n}", "{\n    //return true if n is prime, false otherwise.\n \
    \   //1 and 0 are not primes.\n    if (n <= 1)\n    {\n        return false;\n\
    \    }\n    else if (n == 2)\n    {\n        return true;\n    }\n    else if\
    \ (n % 2 == 0)\n    {\n        return false;\n    }\n    //2 and 3 are primes\n\
    \    else if (n <= 3)\n    {\n        return true;\n    }\n    else\n    {\n \
    \       //check if n divides by any odd number less than sqrt(n)\n        //return\
    \ true if n is prime\n        foreach (i; 3..cast(long)sqrt(n) + 1)\n        {\n\
    \            if (n % i == 0)\n            {\n                return false;\n \
    \           }\n        }\n        return true;\n    }\n}", "{\n    if (n <= 1)\
    \ return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 ==\
    \ 0) return false;\n    long i = 5;\n    while (i * i <= n) {\n        if (n %\
    \ i == 0 || n % (i + 2) == 0) return false;\n        i += 6;\n    }\n    return\
    \ true;\n}", "{\n    long i;\n    foreach( i; 2..floor(sqrt(n)+1)) \n    {\n \
    \       if ( n % i == 0) \n        {\n            return false;\n        }\n \
    \   }\n    return true;\n}", "{\n    if (n < 2)\n        return false;\n    \n\
    \    if (n == 2)\n        return true;\n    \n    if (n % 2 == 0)\n        return\
    \ false;\n    \n    for (int i = 3; i < sqrt(n) + 1; i += 2)\n    {\n        if\
    \ (n % i == 0)\n            return false;\n    }\n    \n    return true;\n}",
  "{\n\tif (n <= 1)\n\t\treturn false;\n\tif (n <= 3)\n\t\treturn true;\n\t\n\tif\
    \ (n % 2 == 0 || n % 3 == 0)\n\t\treturn false;\n\t\n\tfor (long i = 5; i * i\
    \ <= n; i = i + 6)\n\t\tif (n % i == 0 || n % (i + 2) == 0)\n\t\t\treturn false;\n\
    \treturn true;\n}", "{\n  if (n <= 1) \n  {\n    return false;\n  }\n  for (long\
    \ i = 2; i < n / 2; i++) \n  {\n    if (n % i == 0) \n    {\n      return false;\n\
    \    }\n  }\n  return true;\n}", "{\n    if (n < 2) return false;\n    foreach\
    \ (k; 2 .. (n / 2))\n    {\n        if (n % k == 0) return false;\n    }\n   \
    \ return true;\n}", "{\n    if (n <= 1)\n    {\n        return false;\n    }\n\
    \    else if (n == 2)\n    {\n        return true;\n    }\n    else if (n % 2\
    \ == 0)\n    {\n        return false;\n    }\n    else\n    {\n        for (int\
    \ i = 3; i < sqrt(n) + 1; i += 2)\n        {\n            if (n % i == 0)\n  \
    \          {\n                return false;\n            }\n        }\n      \
    \  return true;\n    }\n}", "{\n    if (n <= 1)\n    {\n        return false;\n\
    \    }\n    long limit = ceil(sqrt(n));\n    foreach (i; 2..limit)\n    {\n  \
    \      if (n % i == 0)\n        {\n            return false;\n        }\n    }\n\
    \    return true;\n}", "{\n    if (n < 2)\n        return false;\n    else if\
    \ (n == 2)\n        return true;\n    else\n    {\n        for (long i = 2; i\
    \ <= sqrt(n); i++)\n        {\n            if (n % i == 0)\n                return\
    \ false;\n        }\n        return true;\n    }\n}", "{\n    if (n == 2L)\n \
    \   {\n        return true;\n    }\n    if (n % 2L == 0L)\n    {\n        return\
    \ false;\n    }\n    long max = (long)sqrt(n);\n    for (long i = 3L; i <= max;\
    \ i += 2L)\n    {\n        if (n % i == 0L)\n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}", "{\n    if (n<=1) return false;\n   \
    \ for (int i=2; i<= int(sqrt(n)); i++) \n        if (n%i==0) return false;\n \
    \   return true;\n}", "{\n\tif (n<=1) return false;\n\tif (n==2) return true;\n\
    \tforeach (i; 2..cast(int)floor(sqrt(n))) \n\t{\n\t\tif (n%i==0) return false;\n\
    \t}\n\treturn true;\n}", "{\n    //  Don't pass 0 and 1 here.\n    if (n <= 1)\
    \ return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 ==\
    \ 0) return false;\n    \n    for (long i = 5; i * i <= n; i += 6)\n    {\n  \
    \      if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n    }\n\
    \    return true;\n}", "{\n  if (n < 2)\n    return false;\n  if (n == 2)\n  \
    \  return true;\n  if (n % 2 == 0)\n    return false;\n  for (long i = 3; i *\
    \ i <= n; i += 2)\n    if (n % i == 0)\n      return false;\n  return true;\n}",
  "{\n\t// If a number is even, it is not prime.\n\tif (n % 2 == 0) \n\t{\n\t\treturn\
    \ false;\n\t}\n\t// If a number is less than or equal to 2, it is not prime.\n\
    \tif (n <= 2) \n\t{\n\t\treturn false;\n\t}\n\t// These variables are used to\
    \ keep track of our numbers\n\t// and the remainder of each iteration.\n\tint\
    \ i = 3;\n\tint remainder = 1;\n\t// We know that prime numbers are odd, so we\
    \ can increment by\n\t// 2. We also know that numbers divisible by 2 are not prime.\n\
    \twhile (i < n) \n\t{\n\t\tremainder = n % i;\n\t\tif (remainder == 0) \n\t\t\
    {\n\t\t\treturn false;\n\t\t}\n\t\ti += 2;\n\t}\n\treturn true;\n}\n/*\nReturn\
    \ the largest prime factor of a given number.", "{\n    if (n == 1)\n        return\
    \ false;\n    for (long i = 2; i <= trunc(sqrt(n)); i++)\n    {\n        if (n\
    \ % i == 0)\n            return false;\n    }\n    return true;\n}", "{\n\tassert(n\
    \ > 0);\n\t//check if n is divisible by 2\n\tif (n % 2 == 0)\n\t\treturn false;\n\
    \t//if not, then just check the odds\n\tfor (long i = 3; i < sqrt(n) + 1; i +=\
    \ 2)\n\t{\n\t\tif (n % i == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}",
  "{\n    if (n < 2)\n        return false;\n    if (n == 2)\n        return true;\n\
    \    if (n % 2 == 0)\n        return false;\n    for (long i = 3; i <= (long)sqrt(n);\
    \ i += 2)\n    {\n        if (n % i == 0)\n            return false;\n    }\n\
    \    return true;\n}", "{\n    long i;\n    foreach(i; 1..n+1) \n    {\n     \
    \   if (n % i == 0 && i != 1 && i != n) \n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n/*\nReturn the maximum element in a given\
    \ array of ints.", "{\n    if (n <= 1) return false;\n    for (long i = 2; i <=\
    \ n / 2; i++)\n    {\n        if (n % i == 0) return false;\n    }\n    return\
    \ true;\n}", "{\n    if (n < 2) return false;\n    if (n == 2) return true;\n\
    \    for (long i = 2; i < sqrt(n) + 1; i += 1)\n    {\n        if (n % i == 0)\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}",
  "{\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 ==\
    \ 0 || n % 3 == 0) return false;\n    for (long i = 5; i*i <= n; i += 6) \n  \
    \      if (n % i == 0 || n % (i+2) == 0) return false;\n    return true;\n}",
  "{\n    if (n < 2) \n        return false;\n    for (long x = 2; x <= sqrt(n); x++)\
    \ \n    {\n        if (n % x == 0) \n            return false;\n    }\n    return\
    \ true;\n}\n/*\nReturn a list of all the prime numbers between 2 and a given limit.\n\
    \    >>> sieve(10)\n    [2, 3, 5, 7]\n    >>> sieve(50)\n    [2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\n*/\nlong[] sieve(long limit) \n{\n\
    \    long[] result = [];\n    for (long x = 2; x <= limit; x++) \n    {\n    \
    \    if (is_prime(x)) \n            result ~= x;\n    }\n    return result;\n\
    }\n/*\nCompute the sum of a given list of numbers.\n    >>> sum([2L,3L,5L,7L])\n\
    \    17L\n    >>> sum([])\n    0L\n*/\nlong sum(long[] nums) \n{\n    long result\
    \ = 0;\n    foreach (long n; nums) \n        result += n;\n    return result;\n\
    }", "{\n    if (n <= 1)\n        return false;\n    for (long i = 2; i < sqrt(n)\
    \ + 1; i++) \n    {\n        if (n % i == 0)\n            return false;\n    }\n\
    \    return true;\n}", "{\n    if (n <= 1) return false;\n    if (n == 2) return\
    \ true;\n    if (n % 2 == 0) return false;\n    if (n < 9) return true;\n    if\
    \ (n % 3 == 0) return false;\n    if (n % 5 == 0) return false;\n    long limit\
    \ = cast(long)sqrt(n);\n    for (long i = 7; i <= limit; i += 2)\n    {\n    \
    \    if (n % i == 0) return false;\n    }\n    return true;\n}\n/*\nReturn the\
    \ smallest prime number larger than a given integer, without using any imports.\n\
    \    >>> next_prime(8L)\n    11L\n    >>> next_prime(12L)\n    13L\n    >>> next_prime(6L)\n\
    \    7L\n    >>> next_prime(100L)\n    101L\n    >>> next_prime(117L)\n    127L\n\
    \    >>> next_prime(1L)\n    2L\n*/\nlong next_prime(long n)\n{\n    if (n < 0)\
    \ return 0;\n    if (n < 2) return 2;\n    if (n == 2) return 3;\n    if (n %\
    \ 2 == 0) n++;\n    while (is_prime(n) == false)\n    {\n        n += 2;\n   \
    \ }\n    return n;\n}", "{\n    if (n <= 1)\n    {\n        return false;\n  \
    \  }\n    else if (n <= 3)\n    {\n        return true;\n    }\n    else if (n\
    \ % 2 == 0 || n % 3 == 0)\n    {\n        return false;\n    }\n    else\n   \
    \ {\n        long i = 5;\n        while (i * i <= n)\n        {\n            if\
    \ (n % i == 0 || n % (i + 2) == 0)\n            {\n                return false;\n\
    \            }\n            i += 6;\n        }\n        return true;\n    }\n}",
  "{\n  if (n == 1) return false;\n  for (long i = 2; i <= cast(long) sqrt(n); i++)\n\
    \  {\n    if (n % i == 0) return false;\n  }\n  return true;\n}\n/*\nReturn the\
    \ first prime number greater than some given value, if the value is\nnegative,\
    \ return the first prime number less than that value.\n    >>> next_prime(1L)\n\
    \    2L\n    >>> next_prime(2L)\n    3L\n    >>> next_prime(3L)\n    5L\n    >>>\
    \ next_prime(8L)\n    11L\n    >>> next_prime(16L)\n    17L\n    >>> next_prime(20L)\n\
    \    23L\n    >>> next_prime(27L)\n    29L\n    >>> next_prime(31L)\n    37L\n\
    \    >>> next_prime(40L)\n    41L\n    >>> next_prime(44L)\n    47L\n    >>> next_prime(47L)\n\
    \    53L\n    >>> next_prime(53L)\n    59L\n    >>> next_prime(59L)\n    61L\n\
    \    >>> next_prime(61L)\n    67L\n    >>> next_prime(77L)\n    79L\n    >>> next_prime(91L)\n\
    \    97L\n    >>> next_prime(100L)\n    101L\n    >>> next_prime(101L)\n    103L\n\
    \    >>> next_prime(103L)\n    107L\n    >>> next_prime(107L)\n    109L\n    >>>\
    \ next_prime(109L)\n    113L\n    >>> next_prime(1234L)\n    1237L\n    >>> next_prime(2999L)\n\
    \    3001L\n    >>> next_prime(4000L)\n    4001L\n    >>> next_prime(9999L)\n\
    \    10007L\n    >>> next_prime(11234L)\n    11239L\n    >>> next_prime(83854L)\n\
    \    83859L\n    >>> next_prime(999999L)\n    1000003L\n    >>> next_prime(99999999L)\n\
    \   ", "{\n    if (n < 2)\n        return false;\n    if (n == 2)\n        return\
    \ true;\n    if (n % 2 == 0)\n        return false;\n    if (n < 9)\n        return\
    \ true;\n    if (n % 3 == 0)\n        return false;\n    if (n % 5 == 0)\n   \
    \     return false;\n    const long lim = (long) sqrt(n);\n    for (long i = 5;\
    \ i <= lim; i += 6) {\n        if (n % i == 0)\n            return false;\n  \
    \      if (n % (i + 2) == 0)\n            return false;\n    }\n    return true;\n\
    }", "{\n    if (n <= 1)\n    {\n        return false;\n    }\n    else if (n <=\
    \ 3)\n    {\n        return true;\n    }\n    else if (n % 2 == 0 || n % 3 ==\
    \ 0)\n    {\n        return false;\n    }\n    int i = 5;\n    while (i * i <=\
    \ n)\n    {\n        if (n % i == 0 || n % (i + 2) == 0)\n        {\n        \
    \    return false;\n        }\n        i = i + 6;\n    }\n    return true;\n}\n\
    /*\nReturn the number of vowels in a given string.\n    >>> count_vowels(\"AeOUuioa\"\
    )\n    6\n    >>> count_vowels(\"aBbC\")\n    1\n    >>> count_vowels(\"\")\n\
    \    0\n    >>> count_vowels(\"HoTdOg\")\n    2\n    >>> count_vowels(\"ooooo\"\
    )\n    5\n    >>> count_vowels(\"CCOuNter\")\n    2\n    >>> count_vowels(\"a\"\
    )\n    1\n*/", "{\n    foreach (i; 2 .. n/2)\n    {\n        if (n % i == 0)\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}",
  "{\n    if (n < 2) return false;\n    else if (n == 2) return true;\n    else if\
    \ (n % 2 == 0) return false;\n    else {\n        bool prime = true;\n       \
    \ long divisor = 3;\n        while (divisor < n) {\n            if (n % divisor\
    \ == 0) {\n                prime = false;\n                break;\n          \
    \  }\n            divisor += 2;\n        }\n        return prime;\n    }\n}",
  "{\n\tif (n == 1L)\n\t\treturn false;\n\telse if (n < 4L)\n\t\treturn true;\n\t\
    else if (n % 2L == 0L)\n\t\treturn false;\n\telse if (n < 9L)\n\t\treturn true;\n\
    \telse if (n % 3L == 0L)\n\t\treturn false;\n\telse\n\t{\n\t\tlong r = floor(sqrt(n));\n\
    \t\tlong f = 5L;\n\t\twhile (f <= r)\n\t\t{\n\t\t\tif (n % f == 0L)\n\t\t\t\t\
    return false;\n\t\t\tif (n % (f + 2L) == 0L)\n\t\t\t\treturn false;\n\t\t\tf +=\
    \ 6L;\n\t\t}\n\t\treturn true;\n\t}\n}", "{\n    foreach (i; 2 .. round(sqrt(n))\
    \ + 1)\n    {\n        if (n % i == 0)\n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}", "{\n    // Precondition: n > 0\n    if\
    \ (n<=1)\n        return false;\n    if (n<=3)\n        return true;\n    // All\
    \ primes except 2 are odd\n    if (n%2==0)\n        return false;\n    // now\
    \ just check through the odds up to sqrt(n)\n    long i = 3;\n    while (i*i <=\
    \ n) {\n        if (n%i==0) \n            return false;\n        i += 2;\n   \
    \ }\n    return true;\n}", "{\n    \n    if (n <= 2)\n        return n == 2;",
  "{\n\tif (n < 2) \n\t{\n\t\treturn false;\n\t}\n\tfor (long i = 2; i <= ceil(sqrt(n));\
    \ i++) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    return true;\n}", "{\n    long x;\n    if (n < 2)\n        return false;\n   \
    \ else if (n == 2)\n        return true;\n    else\n    {\n        // skip even\
    \ numbers\n        if (n % 2 == 0)\n            return false;\n        // only\
    \ need to go up to sqrt(n)\n        x = (long) ceil(sqrt(n));\n        for (int\
    \ i = 3; i <= x; i+=2)\n        {\n            if (n % i == 0)\n             \
    \   return false;\n        }\n        return true;\n    }\n}", "{\n    if (n <\
    \ 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n\
    \    long i = 3;\n    while (i <= sqrt(n)) {\n        if (n % i == 0) {\n    \
    \        return false;\n        }\n        i += 2;\n    }\n    return true;\n}",
  "{\n    if (n == 2L)\n    {\n        return true;\n    }\n    if (n < 2L || n %\
    \ 2L == 0L)\n    {\n        return false;\n    }\n    long s = sqrt(n) + 1L;\n\
    \    for (long i = 3L; i <= s; i += 2L)\n    {\n        if (n % i == 0L)\n   \
    \     {\n            return false;\n        }\n    }\n    return true;\n}", "{\n\
    \    if (n < 2)\n    {\n        return false;\n    }\n    if (n == 2)\n    {\n\
    \        return true;\n    }\n    if (n % 2 == 0)\n    {\n        return false;\n\
    \    }\n    foreach (i; 2 .. trunc(sqrt(n)) + 1)\n    {\n        if (n % i ==\
    \ 0)\n        {\n            return false;\n        }\n    }\n    return true;\n\
    }", "{ \n   if (n <= 1) \n      return false; \n    if (n <= 3) \n        return\
    \ true; \n  \n    if (n % 2 == 0 || n % 3 == 0) \n        return false; \n  \n\
    \    for (long i = 5; i * i <= n; i = i + 6) \n        if (n % i == 0 || n % (i\
    \ + 2) == 0) \n           return false; \n  \n    return true; \n} ", "{\n\tbool\
    \ result = true;\n\tlong i = 2;\n\tlong sqrt = sqrtl(n);\n\t\n\tif (n == 1) {\n\
    \t\tresult = false;\n\t}\n\telse {\n\t\twhile (i <= sqrt) {\n\t\t\tif (n % i ==\
    \ 0) {\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\
    }\n\treturn result;\n}", "{\n\tif (n == 1) return false;\n\t\n\tfor (int i = 2;\
    \ i <= n/2; i++) \n\t{\n\t\tif (n % i == 0) return false;\n\t}\n\treturn true;\n\
    }", "{\n\tif (n <= 1) \n\t{\n\t\treturn false;\n\t}\n\telse if (n <= 3) \n\t{\n\
    \t\treturn true;\n\t}\n\telse if (n % 2 == 0 || n % 3 == 0) \n\t{\n\t\treturn\
    \ false;\n\t}\n\tlong i = 5;\n\twhile (i * i <= n) \n\t{\n\t\tif (n % i == 0 ||\
    \ n % (i + 2) == 0) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\ti = i + 6;\n\t}\n\
    \treturn true;\n}", "{\n    if (n < 2) return false;\n    if (n == 2) return true;\n\
    \    if (n % 2 == 0) return false;\n    for (int i = 3; i * i <= n; i += 2)\n\
    \    {\n        if (n % i == 0) return false;\n    }\n    return true;\n}", "{\n\
    \    if (n <= 1)\n        return false;\n    for (long k = 2; k <= long(sqrt(n));\
    \ k++)\n        if (n % k == 0)\n            return false;\n    return true;\n\
    }", "{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    foreach\
    \ (int i; 2 .. long(sqrt(n)) + 1) \n    {\n        if (n % i == 0) return false;\n\
    \    }\n    return true;\n}", "{\n\tif (n < 2)\n\t\treturn false;\n\tif (n ==\
    \ 2)\n\t\treturn true;\n\tfor (long i = 2; i <= cast(long) sqrt(n); i++)\n\t\t\
    if (n % i == 0)\n\t\t\treturn false;\n\treturn true;\n}", "{\n    if (n == 1)\n\
    \        return false;\n    if (n == 2)\n        return true;\n    if (n % 2 ==\
    \ 0)\n        return false;\n    for (long i = 3; i <= sqrt(n); i += 2) \n   \
    \ {\n        if (n % i == 0)\n            return false;\n    }\n    return true;\n\
    }", "{\n    if (n <= 1) \n    {\n        return false;\n    }\n    else if (n\
    \ == 2) \n    {\n        return true;\n    }\n    else if (n % 2 == 0) \n    {\n\
    \        return false;\n    }\n    else \n    {\n        long i = 3;\n       \
    \ while (i <= sqrt(n)) \n        {\n            if (n % i == 0) \n           \
    \ {\n                return false;\n            }\n            i += 2;\n     \
    \   }\n        return true;\n    }\n}", "{\n\tif (n < 2)\n\t\treturn false;\n\t\
    if (n == 2)\n\t\treturn true;\n\tif (n % 2 == 0)\n\t\treturn false;\n\tif (n ==\
    \ 3)\n\t\treturn true;\n\tif (n % 3 == 0)\n\t\treturn false;\n\tif (n == 5)\n\t\
    \treturn true;\n\tif (n % 5 == 0)\n\t\treturn false;\n\tif (n == 7)\n\t\treturn\
    \ true;\n\tif (n % 7 == 0)\n\t\treturn false;\n\tif (n % 9 == 0)\n\t\treturn false;\n\
    \tif (n % 11 == 0)\n\t\treturn false;\n\t\n\tint r = sqrt(n);\n\tint p = 13;\n\
    \twhile (p <= r)\n\t{\n\t\tif (n % p == 0)\n\t\t\treturn false;\n\t\tp += 2;\n\
    \t\tif (n % p == 0)\n\t\t\treturn false;\n\t\tp += 4;\n\t\tif (n % p == 0)\n\t\
    \t\treturn false;\n\t\tp += 2;\n\t\tif (n % p == 0)\n\t\t\treturn false;\n\t\t\
    p += 4;\n\t\tif (n % p == 0)\n\t\t\treturn false;\n\t\tp += 6;\n\t\tif (n % p\
    \ == 0)\n\t\t\treturn false;\n\t\tp += 2;\n\t\tif (n % p == 0)\n\t\t\treturn false;\n\
    \t\tp += 6;\n\t}\n\treturn true;\n}", "{\n\t\n\tif (n < 2)\n\t\treturn false;\n\
    \tif (n == 2)\n\t\treturn true;\n\tif (n % 2 == 0)\n\t\treturn false;\n\t\n\t\
    long end = (long)sqrt(n) + 1;\n\t\n\tfor (long i = 3; i < end; i += 2)\n\t{\n\t\
    \tif (n % i == 0)\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}", "{\n    if\
    \ (n == 1) return false;\n    else if (n == 2) return true;\n    else if (n %\
    \ 2 == 0) return false;\n    else {\n        bool prime = true;\n        long\
    \ x = 2;\n        long max = sqrt(n);\n        while (x <= max) {\n          \
    \  if (n % x == 0) {\n                prime = false;\n                break;\n\
    \            }\n            x += 1;\n        }\n        return prime;\n    }\n\
    }", "{\n    if (n<=1) \n        return false;\n    else if (n<=3) \n        return\
    \ true;\n    else if (n%2==0 || n%3==0) \n        return false;\n    long i =\
    \ 5;\n    while (i*i <= n) \n    {\n        if (n%i==0 || n%(i+2)==0) \n     \
    \       return false;\n        i = i+6;\n    }\n    return true;\n}\n/*\nFind\
    \ the largest prime factor of a number.", "{\n    if (n <= 1)\n        return\
    \ false;\n    if (n <= 3)\n        return true;\n    if ((n % 2) == 0 || (n %\
    \ 3) == 0)\n        return false;\n    long i = 5;\n    while (i * i <= n)\n \
    \   {\n        if ((n % i) == 0 || (n % (i + 2)) == 0)\n            return false;\n\
    \        i += 6;\n    }\n    return true;\n}\n/*\nReturn a list of the prime numbers\
    \ from 2 to MAX, inclusive.\n    >>> primes(10L)\n    [2L, 3L, 5L, 7L]\n    >>>\
    \ primes(100L)\n    [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L,\
    \ 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]\n    >>> primes(1000L)\n\
    \    [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L,\
    \ 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L, 101L, 103L, 107L, 109L, 113L, 127L,\
    \ 131L, 137L, 139L, 149L, 151L, 157L, 163L, 167L, 173L, 179L, 181L, 191L, 193L,\
    \ 197L, 199L, 211L, 223L, 227L, 229L, 233L, 239L, 241L, 251L, 257L, 263L, 269L,\
    \ 271L, 277L, 281L, 283L, 293L, 307L, 311L, 313L, 317L, 331L, 337L, 347L, 349L,\
    \ 353L, 359L, 367L, 373L, 379L, 383L, 389L, 397L, 401L, 409L, 419L, 421L, 431L,\
    \ 433L, 439L", "{\n    if (n <= 1) return false;\n    if (n == 2) return true;\n\
    \    if (n % 2 == 0) return false;\n    for (int i = 3; i <= sqrt(n); i += 2)\
    \ \n    {\n        if (n % i == 0) return false;\n    }\n    return true;\n}",
  "{\n    if (n <= 1)\n        return false;\n    else if (n <= 3)\n        return\
    \ true;\n    else if (n % 2 == 0 || n % 3 == 0)\n        return false;\n    \n\
    \    int i = 5;\n    while (i * i <= n) {\n        if (n % i == 0 || n % (i +\
    \ 2) == 0)\n            return false;\n        i += 6;\n    }\n    return true;\n\
    }\n/*\nReturn the sum of all prime numbers less than the given number.\n    >>>\
    \ prime_sum(7L)\n    10L\n    >>> prime_sum(50L)\n    328L\n    >>> prime_sum(100L)\n\
    \    1060L\n    >>> prime_sum(1000L)\n    76127L\n    >>> prime_sum(1000000L)\n\
    \    37550402023L\n    >>> prime_sum(10000000000L)\n    4761100092225943560L\n\
    */\nlong prime_sum(long n)\n{\n    long res = 0;\n    for (int i = 0; i < n; i++)\
    \ {\n        if (is_prime(i))\n            res += i;\n    }\n    return res;\n\
    }\n// Tests", "{\n    if (n < 2) \n    {\n\t\treturn false;\n\t}\n    else if\
    \ (n == 2) \n    {\n\t\treturn true;\n\t}\n    for (long i = 2; i <= n/2+1; i++)\
    \ \n    {\n\t\tif (n % i == 0) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n    return\
    \ true;\n}\n/*\nReturn the product of a and b.\n    >>> product(2L, 3L)\n    6L\n\
    \    >>> product(5L, 2L)\n    10L\n    >>> product(4L, 0L)\n    0L\n    >>> product(10L,\
    \ 10L)\n    100L\n*/\nlong product(long a, long b) \n{\n    return a * b;\n}\n\
    /*\nReturn the sum of a and b.\n    >>> sum(2L, 3L)\n    5L\n    >>> sum(5L, -1L)\n\
    \    4L\n    >>> sum(0L, 4L)\n    4L\n    >>> sum(10L, 10L)\n    20L\n*/\nlong\
    \ sum(long a, long b) \n{\n    return a + b;\n}\n/*\nReturn the factorial of n.\n\
    \    >>> factorial(1L)\n    1L\n    >>> factorial(2L)\n    2L\n    >>> factorial(4L)\n\
    \    24L\n    >>> factorial(6L)\n    720L\n*/\nlong factorial(long n) \n{\n  \
    \  long result = 1;\n    for (long i = 2; i <= n; i++) \n    {\n\t\tresult *=\
    \ i;\n\t}\n    return result;\n}\n/*\nReturn the nth Fibonacci number.\n    >>>\
    \ fibonacci(0L)\n    0L\n    >>> fibonacci(1L)\n    1L\n    >>> fibonacci(2L)\n\
    \    1L\n    >>> fibonacci(3L)\n    2L\n    >>> fibonacci(4L)\n    3L\n    >>>\
    \ fibonacci(5L)\n    5L\n", "{\n    if (n <= 1) return false;\n    if (n == 2)\
    \ return true;\n    if (n % 2 == 0) return false;\n    long stop = cast(long)\
    \ floor(sqrt(n));\n    for (long x = 3; x <= stop; x += 2) {\n        if (n %\
    \ x == 0) return false;\n    }\n    return true;\n}", "{\n    if (n <= 1)\n  \
    \      return false;\n    else if (n == 2)\n        return true;\n    else if\
    \ (n % 2 == 0)\n        return false;\n    else \n    {\n        long i = 3;\n\
    \        long max = floor(sqrt(n));\n        for (i; i <= max; i += 2)\n     \
    \   {\n            if (n % i == 0)\n                return false;\n        }\n\
    \        return true;\n    }\n}", "{\n    if (n <= 1) \n        return false;\n\
    \    else if (n <= 3) \n        return true;\n    else if (n % 2 == 0 || n % 3\
    \ == 0) \n        return false;\n    \n    long i = 5;\n    while (i * i <= n)\
    \ \n    {\n        if (n % i == 0 || n % (i + 2) == 0) \n            return false;\n\
    \        i = i + 6;\n    }\n    return true;\n}", "{\n    // TODO: write this\
    \ function\n    return false;\n}", "{\n\tif (n <= 1) return false;\n\tint sq =\
    \ sqrt(n);\n\tfor (int i = 2; i <= sq; i++)\n\t{\n\t\tif (n % i == 0) return false;\n\
    \t}\n\treturn true;\n}", "{\n    if (n <= 1)\n        return false;\n    if (n\
    \ <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 == 0)\n        return\
    \ false;\n    if (n < (1 << 26))\n    {\n        long limit = sqrt(n) + 1;\n \
    \       for (long i = 5; i <= limit; i += 6)\n        {\n            if (n % i\
    \ == 0 || n % (i + 2) == 0)\n                return false;\n        }\n      \
    \  return true;\n    }\n    else\n    {\n        long limit = sqrt(n) + 1;\n \
    \       for (long i = 5; i <= limit; i += 6)\n        {\n            if (n % i\
    \ == 0 || n % (i + 2) == 0)\n                return false;\n        }\n      \
    \  long double qn = n;\n        for (int i = 0; i < 100; i++)\n        {\n   \
    \         long double a = rand() * rand();\n            a *= rand();\n       \
    \     a = fmod(a, qn);\n            if (a < 1.0)\n                a = a + 1.0;\n\
    \            if (pow(a, qn - 1.0) % qn != 1.0)\n                return false;\n\
    \        }\n        return true;\n    }\n}", "{\n    if (n <= 1)\n        return\
    \ false;\n    for (long i = 2; i <= n / 2; i++)\n    {\n        if (n % i == 0)\n\
    \            return false;\n    }\n    return true;\n}", "{\n    bool flag=true;\n\
    \    for(int i=2;i<n/2;i++)\n    {\n        if(n%i==0)\n        {\n          \
    \  flag=false;\n            break;\n        }\n    }\n    return flag;\n}", "{\n\
    \    if (n <= 1) \n    {\n        return false;\n    }\n    else if (n == 2) \n\
    \    {\n        return true;\n    }\n    else if (n % 2 == 0) \n    {\n      \
    \  return false;\n    }\n    else \n    {\n        long i = 3;\n        while\
    \ (i <= sqrt(n)) \n        {\n            if (n % i == 0) \n            {\n  \
    \              return false;\n            }\n            i += 2;\n        }\n\
    \        return true;\n    }\n}", "{\n    if (n < 2)\n        return false;\n\
    \    foreach (long i; 2 .. i * i <= n)\n        if (n % i == 0)\n            return\
    \ false;\n    return true;\n}", "{\n\tif (n == 1) return false;\n\tif (n == 2)\
    \ return true;\n\tif (n % 2 == 0) return false;\n\tfor (long i = 3; i < sqrt(n)\
    \ + 1; i += 2)\n\t{\n\t\tif (n % i == 0) return false;\n\t}\n\treturn true;\n}",
  "{\n  /*if (n == 1) return false;\n  if (n == 2) return true;\n  if (n%2 == 0) return\
    \ false;\n  long s = sqrt(n);\n  for (long i = 3; i < s; i+=2)\n  {\n    if (n%i\
    \ == 0) return false;\n  }\n  return true;*/\n  return n > 1 && all!(i => n %\
    \ i != 0)(iota(2, n));\n}", "{\n    if (n < 2)\n        return false;\n    else\
    \ if (n == 2)\n        return true;\n    else if (n%2 == 0)\n        return false;\n\
    \    else\n    {\n        long sqrtN = cast(long)sqrt(n);\n        for (long i\
    \ = 3; i <= sqrtN; i+=2)\n        {\n            if (n%i == 0)\n             \
    \   return false;\n        }\n        return true;\n    }\n}", "{\n    if (n <\
    \ 2) \n    {\n        return false;\n    }\n    if (n == 2) \n    {\n        return\
    \ true;\n    }\n    for (long i = 2; i <= sqrt(n); i++) \n    {\n        if (n\
    \ % i == 0) \n        {\n            return false;\n        }\n    }\n    return\
    \ true;\n}", "{\n    if (n < 2)\n    {\n        return false;\n    }\n    else\
    \ if (n == 2)\n    {\n        return true;\n    }\n    else if (n % 2 == 0)\n\
    \    {\n        return false;\n    }\n    else\n    {\n        for (long i = 3;\
    \ i < sqrt(n) + 1; i += 2)\n        {\n            if (n % i == 0)\n         \
    \   {\n                return false;\n            }\n        }\n        return\
    \ true;\n    }\n}", "{\n    if (n < 1) \n    {\n        return false;\n    } \n\
    \    else if (n == 2) \n    {\n        return true;\n    } \n    else if (n %\
    \ 2 == 0) \n    {\n        return false;\n    }\n    long n_sqrt = cast(long)sqrt(n);\n\
    \    for (long i = 3; i <= n_sqrt; i += 2) \n    {\n        if (n % i == 0) \n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}",
  "{\n    //long n = 3;\n    if (n < 2L)\n        return false;\n    if (n == 2L)\n\
    \        return true;\n    // long n = 2;\n    long divider = 2L;\n    long limit\
    \ = sqrt(n);\n    if (n % divider == 0L)\n        return false;\n    for (divider\
    \ = 3L; divider <= limit; divider = divider + 2L) {\n        if (n % divider ==\
    \ 0L)\n            return false;\n    }\n    return true;\n}", "{\n    if (n <=\
    \ 3)\n        return n > 1;\n    else if (n % 2 == 0 || n % 3 == 0)\n        return\
    \ false;\n    long i = 5;\n    while (i * i <= n) \n    {\n        if (n % i ==\
    \ 0 || n % (i + 2) == 0)\n            return false;\n        i += 6;\n    }\n\
    \    return true;\n}", "{\n    //TODO fill out this function\n    if (n==1)\n\
    \        return false;\n    else\n    {\n        for (int i=2; i<=sqrt(n); i++)\n\
    \        {\n            if (n%i==0)\n                return false;\n        }\n\
    \        return true;\n    }\n}", "{\n    // NOTE(arjun): The square root of a\
    \ number is always less than\n    // the number divided by 2. This means that\
    \ if we want to test\n    // if a number is a prime, we only need to try dividing\
    \ it\n    // by numbers that are less than or equal to the square root.\n    //\n\
    \    // For instance, if we have a number we know is not prime, like\n    // 12,\
    \ we can be certain that no number less than or equal to\n    // the square root\
    \ of 12 will divide into 12 evenly.\n    //\n    // Because of this, we can save\
    \ a lot of time by not trying to\n    // divide 12 by numbers like 11, 10, 9,\
    \ 8, 7, 6, 5, 4, 3, 2, and 1.\n    //\n    // 6 is the square root of 12, so we\
    \ only need to try to divide\n    // 12 by 6 and lower to be certain we have a\
    \ non-prime number.\n    //\n    // I'm not sure how to calculate the square root\
    \ of a number yet,\n    // so instead I'm going to use the square root of the\
    \ number to\n    // determine how many times to divide.\n    long upper_limit\
    \ = long(sqrt(n));\n    for (long i = 2; i <= upper_limit; i++) {\n        if\
    \ (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n\
    }", "{\n    if (n < 2)\n        return false;\n    if (n % 2 == 0)\n        return\
    \ n == 2;\n    if (n % 3 == 0)\n        return n == 3;\n    long d = 5;\n    while\
    \ (d * d <= n) \n    {\n        if (n % d == 0)\n            return false;\n \
    \       d += 2;\n        if (n % d == 0)\n            return false;\n        d\
    \ += 4;\n    }\n    return true;\n}", "{\n    if (n <= 1) return false;\n    if\
    \ (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n   \
    \ long i = 5;\n    while (i * i <= n) {\n        if (n % i == 0 || n % (i + 2)\
    \ == 0) return false;\n        i += 6;\n    }\n    return true;\n}", "{\n\tif\
    \ (n <= 1) return false;\n\tif (n <= 3) return true;\n\tif (n % 2 == 0 || n %\
    \ 3 == 0) return false;\n\tlong i = 5;\n\twhile (i * i <= n) {\n\t\tif (n % i\
    \ == 0 || n % (i + 2) == 0) return false;\n\t\ti += 6;\n\t}\n\treturn true;\n}",
  "{\n    if (n <= 1) \n    {\n        return false;\n    }\n    else if (n <= 3)\
    \ \n    {\n        return true;\n    }\n    else if (n % 2 == 0 || n % 3 == 0)\
    \ \n    {\n        return false;\n    }\n    long i = 5;\n    while (i * i <=\
    \ n) \n    {\n        if (n % i == 0 || n % (i + 2) == 0) \n        {\n      \
    \      return false;\n        }\n        i = i + 6;\n    }\n    return true;\n\
    }", "{\n    int limit = cast(int) sqrt(cast(double) n);\n    foreach (i; 2 ..\
    \ limit + 1)\n    {\n        if (n % i == 0)\n            return false;\n    }\n\
    \    return true;\n}", "{\n\tif (n <= 1)\n\t\treturn false;\n\tfor (long i = 2;\
    \ i <= n / 2; i++) \n\t{\n\t\tif (n % i == 0)\n\t\t\treturn false;\n\t}\n\treturn\
    \ true;\n}", "{\n    if (n == 2L)\n        return true;\n    if (n == 1L || n\
    \ % 2L == 0L)\n        return false;\n    for (long i = 3L; i <= n/2L; i += 2L)\
    \ {\n        if (n % i == 0L)\n            return false;\n    }\n    return true;\n\
    }", "{\n\tbool isPrime = true;\n\t//2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113,\
    \ 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199,\
    \ 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293,\
    \ 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397,\
    \ 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491,\
    \ 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601,\
    \ 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701,\
    \ 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821,\
    \ 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929,\
    \ 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031,\
    \ 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109,\
    \ 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193,", "{\n    // see\
    \ https://stackoverflow.com/questions/1801391/what-is-the-best-algorithm-for-checking-if-a-number-is-prime\n\
    \    if (n < 2)\n    {\n        return false;\n    }\n    if (n == 2)\n    {\n\
    \        return true;\n    }\n    if (n % 2 == 0)\n    {\n        return false;\n\
    \    }\n    if (n < 9)\n    {\n        return true;\n    }\n    if (n % 3 == 0)\n\
    \    {\n        return false;\n    }\n    if (n % 5 == 0)\n    {\n        return\
    \ false;\n    }\n    long test = 7;\n    while (test < sqrt(n))\n    {\n     \
    \   if (n % test == 0)\n        {\n            return false;\n        }\n    \
    \    test += 2;\n        if (n % test == 0)\n        {\n            return false;\n\
    \        }\n        test += 4;\n    }\n    return true;\n}\n/*\nReturns the maximum\
    \ element in a sequence, which may be a list, tuple,\nor iterable object.\n  \
    \  >>> max_element([1, 6, 7, -5, 3])\n    7\n    >>> max_element((2, 3, 4, 9,\
    \ 1))\n    9\n    >>> max_element(\"python\")\n    'y'\n    \n*/\nlong max_element(T)(T\
    \ seq) \n{\n    if (seq.length == 0)\n    {\n        throw new Exception(\"Empty\
    \ sequence passed to max_element\");\n    }\n    long max = -9223372036854775807;\n\
    \    foreach (elem; seq)\n    {\n        if (elem > max)\n        {\n        \
    \    max = elem;\n        }\n    }\n    return max;\n}\n/*\nCompute the sum of\
    \ all the positive integers smaller than or equal to a number.\n    >>> sum_positive_integers(3)\n\
    \    6\n    >>> sum_positive_integers(5)\n    15\n    >>> sum_positive_integers(10)\n\
    \    55\n    >>> sum_positive_integ", "{\n    if (n <= 1) return false;\n    if\
    \ (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n   \
    \ \n    long i = 5;\n    while (i * i <= n) {\n        if (n % i == 0 || n % (i\
    \ + 2) == 0) return false;\n        i += 6;\n    }\n    return true;\n}", "{\n\
    \    if (n<2) return false;\n    long root=sqrt(n);\n    if (n%2==0 && n!=2) return\
    \ false;\n    for (long i=3; i<=root; i+=2)\n        if (n%i==0) return false;\n\
    \    return true;\n}", "{\n    if (n == 1L) \n    {\n        return false;\n \
    \   } \n    else if (n == 2L) \n    {\n        return true;\n    } \n    else\
    \ if (n == 3L) \n    {\n        return true;\n    } \n    else if (n == 4L) \n\
    \    {\n        return false;\n    } \n    else if (n == 5L) \n    {\n       \
    \ return true;\n    } \n    else if (n == 6L) \n    {\n        return false;\n\
    \    } \n    else if (n == 7L) \n    {\n        return true;\n    } \n    else\
    \ if (n == 8L) \n    {\n        return false;\n    } \n    else if (n == 9L) \n\
    \    {\n        return false;\n    } \n    else if (n == 10L) \n    {\n      \
    \  return false;\n    } \n    else if (n == 11L) \n    {\n        return true;\n\
    \    } \n    else if (n == 12L) \n    {\n        return false;\n    } \n    else\
    \ if (n == 13L) \n    {\n        return true;\n    } \n    else if (n == 14L)\
    \ \n    {\n        return false;\n    } \n    else if (n == 15L) \n    {\n   \
    \     return false;\n    } \n    else if (n == 16L) \n    {\n        return false;\n\
    \    } \n    else if (n == 17L) \n    {\n        return true;\n    } \n    else\
    \ if (n == 18L) \n    {\n        return false;\n    } \n    else if (n == 19L)\
    \ \n    {\n        return true;\n    } \n    else if (n == 20L) \n    {\n    \
    \    return false;\n    } \n    else if (n == 21L) \n    {\n        return false;\n\
    \    } \n    else if (n == 22L) \n    {\n        return false;\n    } \n    else\
    \ if (", "{\n    if (n <= 1)\n        return false;\n    else if (n <= 3)\n  \
    \      return true;\n    else if (n % 2 == 0 || n % 3 == 0)\n        return false;\n\
    \    long i = 5;\n    while (i * i <= n) \n    {\n        if (n % i == 0 || n\
    \ % (i + 2) == 0)\n            return false;\n        i = i + 6;\n    }\n    return\
    \ true;\n}", "{\n    long i = 2;\n    foreach( i; i<=sqrt(n) )\n    {\n      \
    \  if( n%i == 0 ) return false;\n    }\n    return true;\n}", "{\n    if (n <=\
    \ 1) return false;\n    for (long d = 2; d < n; d++) {\n        if (n % d == 0)\
    \ return false;\n    }\n    return true;\n}", "{\n  if (n < 2)\n  {\n    return\
    \ false;\n  }\n  else if (n == 2)\n  {\n    return true;\n  }\n  else if (n %\
    \ 2 == 0)\n  {\n    return false;\n  }\n  else\n  {\n    for (long i = 3; i <\
    \ long(sqrt(n)) + 1; i += 2)\n    {\n      if (n % i == 0)\n      {\n        return\
    \ false;\n      }\n    }\n    return true;\n  }\n}", "{\n    if (n < 2)\n    \
    \    return false;\n    for (long i = 2; i < n; i++) \n    {\n        if (n %\
    \ i == 0)\n            return false;\n    }\n    return true;\n}", "{\n    if\
    \ (n <= 1) \n    {\n        return false;\n    }\n    if (n <= 3) \n    {\n  \
    \      return true;\n    }\n    if (n % 2 == 0 || n % 3 == 0) \n    {\n      \
    \  return false;\n    }\n    long i = 5;\n    while (i * i <= n) \n    {\n   \
    \     if (n % i == 0 || n % (i + 2) == 0) \n        {\n            return false;\n\
    \        }\n        i = i + 6;\n    }\n    return true;\n}\n/*\nReturn the nth\
    \ prime.\n    >>> nth_prime(0)\n    Traceback (most recent call last):\n     \
    \ ...\n    ValueError: `n` must be positive and non-zero\n    >>> nth_prime(1)\n\
    \    2\n    >>> nth_prime(2)\n    3\n    >>> nth_prime(6)\n    13\n    >>> nth_prime(3)\n\
    \    5\n    >>> nth_prime(7)\n    17\n    >>> nth_prime(4)\n    7\n    >>> nth_prime(5)\n\
    \    11\n    >>> nth_prime(8)\n    19\n    >>> nth_prime(10)\n    29\n    >>>\
    \ nth_prime(1000)\n    7919\n    >>> nth_prime(10000)\n    104729\n    >>> nth_prime(100000)\n\
    \    1299709\n    >>> nth_prime(1000000)\n    15485863\n*/\nlong nth_prime(long\
    \ n) \n{\n    if (n < 1) \n    {\n        throw new Error(\"`n` must be positive\
    \ and non-zero\");\n    }\n    long nth_prime = 2;\n    long count = 0;\n    while\
    \ (count < n) \n    {\n        nth_prime++;\n        if (is_prime(nth_prime))\
    \ \n        {\n            count++;\n        }\n    }\n    return nth_prime;\n\
    }\n/*\nReturn all primes less than or equal to n.\n    >>> primes_upto(10)", "{\n\
    \    if (n <= 1)\n        return false;\n    if (n == 2)\n        return true;\n\
    \    if (n % 2 == 0)\n        return false;\n    for (long d = 3; d * d <= n;\
    \ d += 2)\n        if (n % d == 0)\n            return false;\n    return true;\n\
    }", "{\n    long i;\n    if (n <= 1) return false;\n    if (n == 2) return true;\n\
    \    if (n % 2 == 0) return false;\n    for (i = 3; i < sqrt(n) + 1; i += 2) {\n\
    \        if (n % i == 0) return false;\n    }\n    return true;\n}", "{\n    if\
    \ (n<2)\n        return false;\n    else \n    {\n        for (long i=2; i<sqrt(n);\
    \ i++)\n        {\n            if (n%i==0)\n                return false;\n  \
    \      }\n        return true;\n    }\n}", "{\n    if (n <= 1)\n        return\
    \ false;\n    else if (n <= 3)\n        return true;\n    else if (n % 2 == 0\
    \ || n % 3 == 0)\n        return false;\n    long i = 5;\n    while (i * i <=\
    \ n) \n    {\n        if (n % i == 0 || n % (i + 2) == 0)\n            return\
    \ false;\n        i = i + 6;\n    }\n    return true;\n}\n/*\nGiven a list of\
    \ integers, return a list of those integers in\n    increasing order. For example:\n\
    \    >>> sort([4, 2, 6, 1, 3])\n    [1, 2, 3, 4, 6]\n    >>> sort([3, 4, 7, 1,\
    \ 5, 8, 9, 2, 6])\n    [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    >>> sort([1, 2, 3, 4,\
    \ 4, 4, 4, 4, 4])\n    [1, 2, 3, 4]\n    >>> sort([8, 8, 8, 9, 9, 10, 11, 11,\
    \ -9])\n    [-9, 8, 8, 8, 9, 9, 10, 11, 11]\n*/\nlong[] sort(long[] int_list)\n\
    {\n    long[] sorted_list = new long[int_list.length];\n    for (long i = 0; i\
    \ < int_list.length; i++)\n    {\n        long j = i;\n        while (j > 0 &&\
    \ sorted_list[j - 1] > int_list[i])\n        {\n            sorted_list[j] = sorted_list[j\
    \ - 1];\n            j--;\n        }\n        sorted_list[j] = int_list[i];\n\
    \    }\n    return sorted_list;\n}\n/*\nWrite a function that takes in a real\
    \ number and prints out the number\n    rounded to the nearest integer. For example:\n\
    \    >>> round_to_int(10.2345)\n    10\n    >>> round_to_int(0.0)\n    0\n   \
    \ >>> round_to_int(10.5)\n    11\n    >>> round_to", "{\n    if (n < 2) return\
    \ false;\n    long i = 2;\n    for (i = 2; i <= sqrt(n); i++)\n    {\n       \
    \ if (n % i == 0)\n        {\n            return false;\n        }\n    }\n  \
    \  return true;\n}", "{\n    if (n == 1)\n        return false;\n    else if (n\
    \ < 4)\n        return true;\n    else if (n % 2 == 0)\n        return false;\n\
    \    else if (n < 9)\n        return true;\n    else if (n % 3 == 0)\n       \
    \ return false;\n    else\n    {\n        long r = floor(sqrt(n));\n        long\
    \ f = 5;\n        while (f <= r)\n        {\n            if (n % f == 0)\n   \
    \             return false;\n            if (n % (f + 2) == 0)\n             \
    \   return false;\n            f += 6;\n        }\n        return true;\n    }\n\
    }\n/*\nReturn a list of the first n prime numbers.\n    >>> primes(0)\n    []\n\
    \    >>> primes(1)\n    [2]\n    >>> primes(4)\n    [2, 3, 5, 7]\n    >>> primes(10)\n\
    \    [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n*/\nlong[] primes(long n) \n{\n   \
    \ int count = 0;\n    long number = 1;\n    long[] primes = new long[n];\n   \
    \ while (count < n)\n    {\n        number += 1;\n        if (is_prime(number))\n\
    \        {\n            primes[count] = number;\n            count += 1;\n   \
    \     }\n    }\n    return primes;\n}\n/*\nReturn the first prime number greater\
    \ than a given number.\n    >>> next_prime(1)\n    2\n    >>> next_prime(5)\n\
    \    7\n    >>> next_prime(10)\n    11\n    >>> next_prime(30)\n    31\n    >>>\
    \ next_prime(100)\n    101\n*/\nlong next_prime(long n) \n{\n    n += 1;\n   \
    \ while (true)\n    {\n        if (is_prime(n))\n            return n;\n     \
    \   n += 1;\n    }\n}\n/*\nReturn the largest prime factor of a given number.\n\
    \    >>> largest_prime_factor(12)\n    3\n    >>> largest_", "{\n    if (n < 2)\
    \ \n    {\n        return false;\n    }\n    if (n % 2 == 0) \n    {\n       \
    \ return n == 2;\n    }\n    if (n % 3 == 0) \n    {\n        return n == 3;\n\
    \    }\n    if (n % 5 == 0) \n    {\n        return n == 5;\n    }\n    for (auto\
    \ i = 7; (i * i) <= n; i += 30) \n    {\n        if (n % i == 0) \n        {\n\
    \            return false;\n        }\n        if (n % (i + 4) == 0) \n      \
    \  {\n            return false;\n        }\n        if (n % (i + 6) == 0) \n \
    \       {\n            return false;\n        }\n        if (n % (i + 10) == 0)\
    \ \n        {\n            return false;\n        }\n        if (n % (i + 12)\
    \ == 0) \n        {\n            return false;\n        }\n        if (n % (i\
    \ + 16) == 0) \n        {\n            return false;\n        }\n        if (n\
    \ % (i + 22) == 0) \n        {\n            return false;\n        }\n       \
    \ if (n % (i + 24) == 0) \n        {\n            return false;\n        }\n \
    \   }\n    return true;\n}", "{\n    if (n < 2)\n        return false;\n    else\
    \ if (n == 2)\n        return true;\n    else if (n % 2 == 0)\n        return\
    \ false;\n    else {\n        long i = 3;\n        while (i <= (long)sqrt(n))\
    \ {\n            if (n % i == 0)\n                return false;\n            i\
    \ = i + 2;\n        }\n        return true;\n    }\n}", "{\n    if (n==1) return\
    \ false;\n    if (n==2) return true;\n    else\n    {\n        for (long i=2;\
    \ i<=sqrt(n); i++)\n        {\n            if (n%i==0) return false;\n       \
    \ }\n        return true;\n    }\n}", "{\n    foreach (l; 2L..(long)sqrt(n) +\
    \ 1L) \n    {\n        if (n % l == 0L)\n            return false;\n    }\n  \
    \  return true;\n}", "{\n    if (n == 1)\n        return false;\n    foreach (i;\
    \ iota(2, (int)sqrt(n)))\n    {\n        if (n % i == 0)\n            return false;\n\
    \    }\n    return true;\n}\n/*\nReturns the sum of all prime numbers below the\
    \ given number.\n    >>> sum_of_primes(10L)\n    17L\n    >>> sum_of_primes(2L)\n\
    \    2L\n    >>> sum_of_primes(3L)\n    5L\n    >>> sum_of_primes(7L)\n    10L\n\
    \    >>> sum_of_primes(20L)\n    77L\n*/\nlong sum_of_primes(long n) \n{\n   \
    \ if (n == 1)\n        return 0;\n    long sum = 0;\n    foreach (i; iota(1, n))\n\
    \    {\n        if (is_prime(i))\n            sum += i;\n    }\n    return sum;\n\
    }", "{\n    if (n < 2) \n    {\n        return false;\n    }\n    for (long i\
    \ = 2; i <= n / 2; i++) \n    {\n        if (n % i == 0) \n        {\n       \
    \     return false;\n        }\n    }\n    return true;\n}\n/*\nReturn the greatest\
    \ common divisor of a and b.\n    >>> gcd(12L, 12L)\n    12\n    >>> gcd(2L, 3L)\n\
    \    1\n    >>> gcd(12L, 6L)\n    6\n    >>> gcd(8L, 12L)\n    4\n    >>> gcd(3L,\
    \ 3L)\n    3\n*/\nlong gcd(long a, long b) \n{\n    a = abs(a);\n    b = abs(b);\n\
    \    while (b != 0) \n    {\n        long temp = a;\n        a = b;\n        b\
    \ = temp % b;\n    }\n    return a;\n}\n/*\nReturn the least common multiple of\
    \ a and b.\n    >>> lcm(4L, 6L)\n    12\n    >>> lcm(4L, 16L)\n    16\n    >>>\
    \ lcm(4L, 12L)\n    12\n    >>> lcm(3L, 3L)\n    3\n    >>> lcm(1L, 1L)\n    1\n\
    */\nlong lcm(long a, long b) \n{\n    return (a * b) / gcd(a, b);\n}", "{\n  \
    \  if (n < 2)\n        return false;\n    else if (n == 2)\n        return true;\n\
    \    else if (n % 2 == 0)\n        return false;\n    else\n    {\n        foreach\
    \ (i; 2..cast(int)sqrt(n) + 1)\n        {\n            if (n % i == 0)\n     \
    \           return false;\n        }\n        return true;\n    }\n}\n/*\nReturn\
    \ the number of primes in a list of longs.\n    >>> count_primes([4L, 6L, 13L,\
    \ 11L])\n    3\n    >>> count_primes([4L, 6L, 2L, 13L, 11L])\n    3\n    >>> count_primes([4L,\
    \ 6L, 2L, 1L, 13L, 11L])\n    3\n    >>> count_primes([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L, 9L, 10L])\n    4\n    >>> count_primes([1L, 4L, 6L, 2L, 3L, 5L, 7L,\
    \ 8L, 9L, 10L])\n    4\n*/", "{ \n    if (n <= 1) \n        return false; \n \
    \ \n    // Check from 2 to n-1 \n    for (long i = 2; i < n; i++) \n        if\
    \ (n % i == 0) \n            return false; \n  \n    return true; \n} \n  \n/*\n\
    Return an array with the first n primes, i.e.\n    >>> first_n_primes(0)\n   \
    \ []\n    >>> first_n_primes(1)\n    [2]\n    >>> first_n_primes(3)\n    [2, 3,\
    \ 5]\n    >>> first_n_primes(4)\n    [2, 3, 5, 7]\n    >>> first_n_primes(5)\n\
    \    [2, 3, 5, 7, 11]\n    \n*/\nlong[] first_n_primes(long n) \n{ \n    long[]\
    \ res = new long[n];\n    long count = 0; \n    long num = 2; \n  \n    // Repeatedly\
    \ find prime numbers \n    while (count < n) { \n        if (is_prime(num)) {\
    \ \n            res[count] = num; \n            count++; \n        } \n      \
    \  num++; \n    } \n  \n    return res; \n} \n  \n/*\nReturn an array with the\
    \ first n primes which are larger than the\ngiven minimum. If the minimum is negative\
    \ or 0, return the first n\nprimes.\n    >>> primes_from_min(0, 0)\n    []\n \
    \   >>> primes_from_min(0, 1)\n    [2]\n    >>> primes_from_min(0, 3)\n    [2,\
    \ 3, 5]\n    >>> primes_from_min(0, 4)\n    [2, 3, 5, 7]\n    >>> primes_from_min(0,\
    \ 5)\n    [2, 3, 5, 7, 11]\n    >>> primes_from_min(3, 5)\n    [5, 7, 11, 13,\
    \ 17]\n    >>> primes_from_min(5, 5)\n    [11,", "{\n    assert(n >= 1);\n   \
    \ if (n <= 3) \n    {\n        return n > 1;\n    }\n    else if (n % 2 == 0 ||\
    \ n % 3 == 0) \n    {\n        return false;\n    }\n    long i = 5;\n    while\
    \ (i * i <= n) \n    {\n        if (n % i == 0 || n % (i + 2) == 0) \n       \
    \ {\n            return false;\n        }\n        i = i + 6;\n    }\n    return\
    \ true;\n}\n/*\nReturn the largest prime factor of n.\n    >>> largest_prime_factor(12L)\n\
    \    3L\n    >>> largest_prime_factor(13L)\n    13L\n    >>> largest_prime_factor(21L)\n\
    \    7L\n    >>> largest_prime_factor(5L)\n    5L\n    >>> largest_prime_factor(1L)\n\
    \    1L\n    >>> largest_prime_factor(2L)\n    2L\n    >>> largest_prime_factor(3L)\n\
    \    3L\n*/\nlong largest_prime_factor(long n) \n{\n    long i = 2;\n    long\
    \ factorial = n;\n    while (i <= factorial) \n    {\n        if (is_prime(i)\
    \ == true && factorial % i == 0) \n        {\n            factorial = factorial\
    \ / i;\n        }\n        else \n        {\n            i++;\n        }\n   \
    \ }\n    return i;\n}\n/*\nReturn the smallest prime factor of n.\n    >>> smallest_prime_factor(12L)\n\
    \    2L\n    >>> smallest_prime_factor(13L)\n    13L\n    >>> smallest_prime_factor(21L)\n\
    \    3L\n    >>> smallest_prime_factor(5L)\n    5L\n    >>> smallest_prime_factor(1L)\n\
    \    1L\n    >>> smallest_prime_factor(2L)\n    2L\n    >>> smallest_prime_factor(3L)\n\
    \    3L\n*/\nlong smallest_prime_factor(long n) \n{\n    long i = 2;\n    long\
    \ factorial =", "{\n\tif (n == 1)\n\t\treturn false;\n\tif (n == 2)\n\t\treturn\
    \ true;\n\tif (n % 2 == 0)\n\t\treturn false;\n\tif (n < 9)\n\t\treturn true;\n\
    \tif (n % 3 == 0)\n\t\treturn false;\n\tif (n % 5 == 0)\n\t\treturn false;\n\t\
    for (long x = 5L; x < cast(long) sqrt(n) + 1; x += 6) \n\t{\n\t\tif (n % x ==\
    \ 0)\n\t\t\treturn false;\n\t\tif (n % (x + 2) == 0)\n\t\t\treturn false;\n\t\
    }\n\treturn true;\n}", "{\n    if (n < 2) return false;\n    long upper = sqrt(n);\n\
    \    for (long i = 2; i <= upper; i++) {\n        if (n % i == 0) return false;\n\
    \    }\n    return true;\n}", "{\n    if (n <= 1)\n    {\n        return false;\n\
    \    }\n    if (n == 2)\n    {\n        return true;\n    }\n    foreach (int\
    \ i; 2 .. sqrt(n) + 1)\n    {\n        if (n % i == 0)\n        {\n          \
    \  return false;\n        }\n    }\n    return true;\n}", "{\n    if (n <= 1)\n\
    \    {\n        return false;\n    }\n    else\n    {\n        long i;\n     \
    \   for (i = 2; i < n; i++)\n        {\n            if (n % i == 0)\n        \
    \    {\n                return false;\n            }\n        }\n        return\
    \ true;\n    }\n}", "{\n\t//Iterate from 2 to n-1, and find out if n is divisible\
    \ by any of them\n\tif (n <= 1) return false;\n\tif (n <= 3) return true;\n\t\n\
    \tfor (int i = 2; i <= sqrt(n); i++)\n\t{\n\t\tif (n % i == 0) return false;\n\
    \t}\n\treturn true;\n}", "{\n    if (n == 1) \n    {\n        return false;\n\
    \    }\n    if (n < 4) \n    {\n        return true;\n    }\n    if (n % 2 ==\
    \ 0) \n    {\n        return false;\n    }\n    if (n < 9) \n    {\n        return\
    \ true;\n    }\n    if (n % 3 == 0) \n    {\n        return false;\n    }\n  \
    \  long r = sqrt(n);\n    long f = 5;\n    while (f <= r) \n    {\n        if\
    \ (n % f == 0) \n        {\n            return false;\n        }\n        if (n\
    \ % (f + 2) == 0) \n        {\n            return false;\n        }\n        f\
    \ += 6;\n    }\n    return true;\n}", "{\n    if (n < 2)\n        return false;\n\
    \    foreach (int i; 2 .. cast(int) sqrt(n) + 1)\n        if (n % i == 0)\n  \
    \          return false;\n    return true;\n}\n ", "{\n    if (n < 2)\n    {\n\
    \        return false;\n    }\n    else\n    {\n        long d = n - 1;\n    \
    \    while (d > 1)\n        {\n            if (n % d == 0)\n            {\n  \
    \              return false;\n            }\n            d--;\n        }\n   \
    \     return true;\n    }\n}", "{\n    if (n < 2) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    bool result = true;\n\
    \    long sqrt_n = sqrt(n);\n    foreach (i; 3..=sqrt_n) {\n        if (n % i\
    \ == 0) {\n            result = false;\n            break;\n        }\n    }\n\
    \    return result;\n}", "{\n\tif (n < 2)\n\t\treturn false;\n\tfor (long i =\
    \ 2; i <= sqrt(n); i++)\n\t{\n\t\tif (n % i == 0)\n\t\t\treturn false;\n\t}\n\t\
    return true;\n}", "{\n    if (n == 2) return true;\n    if (n == 1 || n % 2 ==\
    \ 0) return false;\n    foreach (int i; 2 .. sqrt(n)) {\n        if (n % i ==\
    \ 0) return false;\n    }\n    return true;\n}", "{\n    if (n<2)\n    {\n   \
    \     return false;\n    }\n    long i;\n    for (i=2; i<=sqrt(n); i++)\n    {\n\
    \        if (n%i==0)\n        {\n            return false;\n        }\n    }\n\
    \    return true;\n}", "{\n    if (n < 2) return false;", "{\n    if (n <= 1)\n\
    \        return false;\n    else if (n <= 3)\n        return true;\n    else if\
    \ (n % 2 == 0 || n % 3 == 0)\n        return false;\n    else {\n        int i\
    \ = 5;\n        while (i * i <= n) {\n            if (n % i == 0 || n % (i + 2)\
    \ == 0)\n                return false;\n            i += 6;\n        }\n     \
    \   return true;\n    }\n}\n/*\nReturn the nearest prime number to a given number.\n\
    \    >>> nearest_prime(6L)\n    7L\n    >>> nearest_prime(101L)\n    101L\n  \
    \  >>> nearest_prime(11L)\n    11L\n    >>> nearest_prime(13441L)\n    13441L\n\
    \    >>> nearest_prime(61L)\n    61L\n    >>> nearest_prime(4L)\n    5L\n    >>>\
    \ nearest_prime(1L)\n    2L\n*/\nlong nearest_prime(long n) \n{\n    while (!is_prime(n))\n\
    \        n++;\n    return n;\n}\n/*\nReturn the nth prime number, where n is given.\
    \ \nAssume that n is greater than or equal to 0.\n    >>> nth_prime(0L)\n    2L\n\
    \    >>> nth_prime(4L)\n    11L\n    >>> nth_prime(13L)\n    41L\n    >>> nth_prime(1000L)\n\
    \    7919L\n    >>> nth_prime(2000L)\n    17389L\n    >>> nth_prime(5000L)\n \
    \   48611L\n    >>> nth_prime(10000L)\n    104729L\n    >>> nth_prime(20000L)\n\
    \    235713L\n*/\nlong nth_prime(long n) \n{\n    long i = 0;\n    long j = 2;\n\
    \    while (i != n) {\n        if (is_prime(j))\n            i++;\n        j++;\n\
    \    }\n    return j - 1;\n}\n/*\nReturn the greatest common divisor of two given\
    \ numbers.\n    >>> gcd(", "{\n\tif (n <= 1) \n\t{\n\t\treturn false;\n\t}\n\t\
    for (long i = 2; i < n; i++) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\treturn true;\n}\n/*\nReturn the next prime greater than\
    \ or equal to the given number.\n    >>> next_prime(6L)\n    7L\n    >>> next_prime(8L)\n\
    \    11L\n    >>> next_prime(101L)\n    101L\n    >>> next_prime(13441L)\n   \
    \ 13451L\n*/\nlong next_prime(long n) \n{\n\tlong i = n + 1;\n\twhile (!is_prime(i))\
    \ \n\t{\n\t\ti++;\n\t}\n\treturn i;\n}", "{\n    if (n <= 2)\n        return true;\n\
    \    if (n % 2 == 0)\n        return false;\n    for (long i = 3; i < n / 2; i++)\n\
    \    {\n        if (n % i == 0)\n            return false;\n    }\n    return\
    \ true;\n}", "{\n    // bool prime = true;\n    // bool is_even = n % 2 == 0;\n\
    \    // // check if n is a multiple of 2\n    // if (is_even)\n    // {\n    //\
    \     return false;\n    // }\n    // for (long i = 3; i <= n/2; i += 2)\n   \
    \ // {\n    //     if (n % i == 0)\n    //     {\n    //         prime = false;\n\
    \    //         break;\n    //     }\n    // }\n    // return prime;\n    return\
    \ n > 1 && !(n % 2 == 0 || n % 3 == 0 || n % 5 == 0 || n % 7 == 0);\n}\n/*\nReturn\
    \ the number of primes between 1 and n inclusive.\n*/", "{\n    int i;\n    bool\
    \ prime = false;\n    if(n==2)\n        prime = true;\n    if(n>2)\n    {\n  \
    \      for(i=2;i<sqrt(n);i++)\n        {\n            if(n%i==0)\n           \
    \ {\n                prime = false;\n                break;\n            }\n \
    \           else\n                prime = true;\n        }\n    }\n    return\
    \ prime;\n}", "{\n    if (n <= 1) return false;\n    if (n == 2) return true;\n\
    \    if (n % 2 == 0) return false;\n    foreach (int i; 2..sqrt(n)) {\n      \
    \  if (n % i == 0) return false;\n    }\n    return true;\n}", "{\n    if (n <=\
    \ 1)\n        return false;\n    else if (n == 2)\n        return true;\n    else\n\
    \    {\n        for (long i = 2; i <= sqrt(n); i++)\n        {\n            if\
    \ (n % i == 0)\n                return false;\n        }\n        return true;\n\
    \    }\n}\n/*\nReturn a list of primes less than or equal to n.\n>>> eratosthenes(25L)\n\
    [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L]\n*/\nauto eratosthenes(long n) \n{\n\
    \    long[] prime;\n    prime.length = n;\n    prime = true;\n    prime[0] = false;\n\
    \    prime[1] = false;\n    auto index = 0;\n    for (long i = 2; i <= n; i++)\n\
    \    {\n        if (prime[i] == true)\n        {\n            prime[index] = i;\n\
    \            index++;\n            for (long j = i * i; j <= n; j += i)\n    \
    \        {\n                prime[j] = false;\n            }\n        }\n    }\n\
    \    prime.length = index;\n    return prime;\n}\n/*\nReturn a list of the first\
    \ n primes.\n>>> primes(10L)\n[2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L]\n\
    */\nauto primes(long n) \n{\n    auto prime = eratosthenes(n * n);\n    prime.length\
    \ = n;\n    return prime;\n}\n/*\nReturn the nth prime.\n>>> nth_prime(5L)\n11L\n\
    */\nlong nth_prime(long n) \n{\n    return primes(n)[n - 1];\n}\n/*\nReturn the\
    \ largest prime factor of n.\n>>> largest_prime_factor(21L)\n7L\n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    auto prime = eratosthenes(n);\n    long max_prime_factor = 0", "{\n\
    \    assert(n >= 0L);\n    if (n < 2L) \n    {\n        return false;\n    }\n\
    \    for (long i = 2L; i <= n/2L; i++) \n    {\n        if (n % i == 0L) \n  \
    \      {\n            return false;\n        }\n    }\n    return true;\n}", "{\n\
    \    if (n <= 1) return false;\n    if (n == 2) return true;\n    if (n % 2 ==\
    \ 0) return false;\n    if (n < 9) return true;\n    if (n % 3 == 0) return false;\n\
    \    if (n % 5 == 0) return false;\n    size_t r = (size_t)sqrt(n);\n    size_t\
    \ f = 5;\n    while (f <= r) {\n        if (n % f == 0) return false;\n      \
    \  if (n % (f + 2) == 0) return false;\n        f += 6;\n    }\n    return true;\n\
    }", "{\n\tint i;\n\tfor (i = 2; i < n; i++) \n\t{\n\t\tif (n % i == 0)\n\t\t{\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}", "{\n\tif (n==1)\n\t\treturn\
    \ false;\n\tif (n == 2)\n\t\treturn true;\n\tif (n % 2 == 0)\n\t\treturn false;\n\
    \tfor (int i = 3; i < n/2; i+=2) {\n\t\tif (n % i == 0)\n\t\t\treturn false;\n\
    \t}\n\treturn true;\n}", "{\n    long m = cast(long)ceil(sqrt(n));\n    foreach\
    \ (i; 2 .. m + 1)\n    {\n        if (n % i == 0)\n        {\n            return\
    \ false;\n        }\n    }\n    return true;\n}", "{\n\tif (n<2) \n\t\treturn\
    \ false;\n\tif (n%2==0) \n\t\treturn false;\n\tlong sqrt_n = cast(long) sqrt(n);\n\
    \tfor (long i=3; i<=sqrt_n; i+=2) \n\t{\n\t\tif (n%i==0) \n\t\t\treturn false;\n\
    \t}\n\treturn true;\n}", "{\n    if (n == 1)\n        return false;\n    for (long\
    \ i = 2; i < n; i++)\n    {\n        if (n % i == 0)\n            return false;\n\
    \    }\n    return true;\n}\n/*\nReturn a list of all the prime numbers up to\
    \ a given integer.\n    >>> gen_primes(12L)\n    [2L, 3L, 5L, 7L, 11L]\n    >>>\
    \ gen_primes(24L)\n    [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L]\n    >>> gen_primes(1L)\n\
    \    []\n    >>> gen_primes(2L)\n    [2L]\n*/\nlist* gen_primes(long n)\n{\n \
    \   list* result = list_new();\n    if (n < 2)\n        return result;\n    list_append(result,\
    \ 2L);\n    if (n == 2)\n        return result;\n    for (long i = 3; i <= n;\
    \ i++)\n    {\n        if (is_prime(i))\n            list_append(result, i);\n\
    \    }\n    return result;\n}\n/*\nReturn the integer which is the greatest common\
    \ denominator for two given", "{\n    if (n <= 1) \n        return false;", "{\n\
    \tif (n < 2) \n\t{\n\t\treturn false;\n\t}\n\tfor (long i = 2; i < n; i++) \n\t\
    {\n\t\tif (n % i == 0) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n\
    }\n/*\nReturn a list of the first n primes.\n    \n    >>> first_n_primes(1)\n\
    \    [2L]\n    >>> first_n_primes(2)\n    [2L, 3L]\n    >>> first_n_primes(5)\n\
    \    [2L, 3L, 5L, 7L, 11L]\n    >>> first_n_primes(0)\n    []\n    >>> first_n_primes(10)\n\
    \    [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L]\n    >>> first_n_primes(15)\n\
    \    [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L]\n\
    */\nlong [] first_n_primes(long n) \n{\n\tlong [] arr = new long[n];\n\tlong i\
    \ = 0;\n\tlong number = 2;\n\twhile (i < n) \n\t{\n\t\tif (is_prime(number)) \n\
    \t\t{\n\t\t\tarr[i] = number;\n\t\t\ti++;\n\t\t}\n\t\tnumber++;\n\t}\n\treturn\
    \ arr;\n}\n/*\nReturn the sum of a list of numbers.\n    >>> sum([])\n    0\n\
    \    >>> sum([5])\n    5\n    >>> sum([5, 5])\n    10\n    >>> sum([1, 2, 3, 4,\
    \ 5])\n    15\n    >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    55\n    >>> sum([1.25,\
    \ 2.5, 3.75, 4.125])\n    11.625\n*/\ndouble sum(double", "{\n    assert(n >=\
    \ 0L);\n    if (n == 0L || n == 1L) return false;\n    for (long i = 2L; i < n;\
    \ i += 1L) \n    {\n        if (n % i == 0L) return false;\n    }\n    return\
    \ true;\n}", "{\n    if (n <= 2) return n == 2;", "{\n    if (n <= 1) \n     \
    \   return false;", "{\n    if (n == 1) return false;\n    for (long i = 2; i\
    \ <= sqrt(n); i++)\n    {\n        if (n % i == 0) return false;\n    }\n    return\
    \ true;\n}", "{\n    if (n < 2)\n        return false;\n    else if (n == 2)\n\
    \        return true;\n    else if (n % 2 == 0)\n        return false;\n    else\n\
    \    {\n        long k = 3;\n        while (k * k <= n)\n        {\n         \
    \   if (n % k == 0)\n                return false;\n            k += 2;\n    \
    \    }\n        return true;\n    }\n}\n/*\nGiven a list of ints and a number,\
    \ return a list of the numbers from the given list that are smaller than the given\
    \ number.\n    >>> lt_n([1, 2, 3, 4, 5], 4)\n    [1, 2, 3]\n    >>> lt_n([1, 2,\
    \ 3, 4, 5], 10)\n    [1, 2, 3, 4, 5]\n    >>> lt_n([1, 2, 3, 4, 5], 0)\n    []\n\
    \    >>> lt_n([], 5)\n    []\n    >>> lt_n([10, 9, 8, 7, 6], 7)\n    [6]\n   \
    \ >>> lt_n([10, 9, 8, 7, 6], 5)\n    []\n*/", "{\n    if (n == 1)\n        return\
    \ false;\n    \n    for (long x = 2; x <= sqrt(n); x += 1)\n    {\n        if\
    \ (n % x == 0)\n            return false;\n    }\n    return true;\n}", "{\n \
    \   for (int i = 2; i < n; i++)\n    {\n        if (n % i == 0) \n        {\n\
    \            return false;\n        }\n    }\n    return true;\n}", "{\n    if\
    \ (n < 2)\n    {\n        return false;\n    }\n    if (n == 2)\n    {\n     \
    \   return true;\n    }\n    for (int i = 2; i < sqrt(n); i++)\n    {\n      \
    \  if (n % i == 0)\n        {\n            return false;\n        }\n    }\n \
    \   return true;\n}", "{\n    bool result = true;\n    long i;\n    if (n < 2)\
    \ \n    {\n        result = false;\n    }\n    else \n    {\n        for (i =\
    \ 2; i < sqrt(n) + 1; i++) \n        {\n            if (n % i == 0) \n       \
    \     {\n                result = false;\n                break;\n           \
    \ }\n        }\n    }\n    return result;\n}", "{\n    if (n < 2)\n        return\
    \ false;\n    if (n == 2)\n        return true;\n    if (n % 2 == 0)\n       \
    \ return false;\n    for (long i = 3; i < sqrt(n); i += 2)\n    {\n        if\
    \ (n % i == 0)\n            return false;\n    }\n    return true;\n}", "{\n \
    \   if (n <= 1) \n    {\n        return false;\n    }\n    else if (n <= 3) \n\
    \    {\n        return true;\n    }\n    else if (n % 2 == 0 || n % 3 == 0) \n\
    \    {\n        return false;\n    }\n    for (long i = 5; i * i <= n; i += 6)\
    \ \n    {\n        if (n % i == 0 || n % (i + 2) == 0) \n        {\n         \
    \   return false;\n        }\n    }\n    return true;\n}\n/*\nReturn a string\
    \ listing all of the prime numbers less than or equal to n.\n    >>> prime_factors(10L)\n\
    \    2, 3, 5, 7\n    >>> prime_factors(11L)\n    2, 3, 5, 7, 11\n    >>> prime_factors(2L)\n\
    \    2\n    >>> prime_factors(1L)\n    \"\"\"\n*/\nstring prime_factors(long n)\n\
    {\n    string output = \"\";\n    for (long i = 1; i <= n; i++)\n    {\n     \
    \   if (is_prime(i))\n        {\n            output += longToString(i) + \", \"\
    ;\n        }\n    }\n    return output;\n}", "{\n    if (n <= 1)\n        return\
    \ false;\n    else if (n <= 3)\n        return true;\n    else if (n % 2 == 0\
    \ || n % 3 == 0)\n        return false;\n    int i = 5;\n    while (i * i <= n)\n\
    \    {\n        if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n\
    \        i += 6;\n    }\n    return true;\n}", "{\n    if (n <= 1) return false;\n\
    \    long s = long(sqrt(double(n)));\n    for (long i = 2; i <= s; i++)\n    \
    \    if (n % i == 0) return false;\n    return true;\n}\n// return integer part\
    \ of logarithm of n to base b\nlong log_int(long n, long b)\n{\n    long k = 0;\n\
    \    while (n >= b) { n /= b; k++; }\n    return k;\n}\n// return n^exp mod base\n\
    long pow_mod(long n, long exp, long base)\n{\n    long m = n;\n    long k = 1;\n\
    \    while (exp > 0) {\n        if (exp % 2 == 1) k = (k * m) % base;\n      \
    \  m = (m * m) % base;\n        exp /= 2;\n    }\n    return k;\n}\n/*\n    Given\
    \ a number n, test to see if it is a Fermat pseudoprime to base b.\n    If yes,\
    \ return true, and false otherwise.\n    >>> fermat_prime(13441L, 5L)\n    true\n\
    \    >>> fermat_prime(13441L, 7L)\n    true\n    >>> fermat_prime(2465L, 11L)\n\
    \    true\n    >>> fermat_prime(91L, 7L)\n    false\n    >>> fermat_prime(91L,\
    \ 13L)\n    false\n*/", "{\n\tlong N = abs(n);\n\tif (N <= 1)\n\t\treturn false;\n\
    \tif (N <= 3)\n\t\treturn true;\n\tif (N % 2 == 0 || N % 3 == 0)\n\t\treturn false;\n\
    \tfor (long i = 5; i * i <= N; i += 6) \n\t{\n\t\tif (N % i == 0 || N % (i + 2)\
    \ == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}", "{\n    if (n <= 1) \n\
    \    {\n        return false;\n    }\n    else if (n <= 3) \n    {\n        return\
    \ true;\n    }\n    else if (n % 2 == 0 || n % 3 == 0) \n    {\n        return\
    \ false;\n    }\n    long i = 5;\n    while (i * i <= n) \n    {\n        if (n\
    \ % i == 0 || n % (i + 2) == 0) \n        {\n            return false;\n     \
    \   }\n        i = i + 6;\n    }\n    return true;\n}", "{\n\tif (n<2)\n\t\treturn\
    \ false;\n\tif (n==2 || n==3)\n\t\treturn true;\n\tif ((n%2==0) || (n%3==0))\n\
    \t\treturn false;\n\telse\n\t{\n\t\tauto i = cast(long)sqrt(n);\n\t\twhile (i>3)\n\
    \t\t{\n\t\t\tif (n%i==0)\n\t\t\t\treturn false;\n\t\t\ti--;\n\t\t}\n\t\treturn\
    \ true;\n\t}\n}", "{\n\tif (n == 1) \n\t{\n\t\treturn false;\n\t}\n\tfor (long\
    \ i = 2; i < sqrt(n); i++) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;\n}", "{\n    if (n <= 1) \n    {\n        return false;\n\
    \    }\n    for (int i = 2; i < sqrt(n); i++) \n    {\n        if (n % i == 0)\
    \ \n        {\n            return false;\n        }\n    }\n    return true;\n\
    }", "{\n    if (n == 1) \n    {\n        return false;\n    }\n    if (n % 2 ==\
    \ 0) \n    {\n        return n == 2;\n    }\n    if (n % 3 == 0) \n    {\n   \
    \     return n == 3;\n    }\n    if (n % 5 == 0) \n    {\n        return n ==\
    \ 5;\n    }\n    if (n % 7 == 0) \n    {\n        return n == 7;\n    }\n    if\
    \ (n % 11 == 0) \n    {\n        return n == 11;\n    }\n    if (n % 13 == 0)\
    \ \n    {\n        return n == 13;\n    }\n    if (n % 17 == 0) \n    {\n    \
    \    return n == 17;\n    }\n    if (n % 19 == 0) \n    {\n        return n ==\
    \ 19;\n    }\n    if (n % 23 == 0) \n    {\n        return n == 23;\n    }\n \
    \   for (long i = 31; i <= long(sqrt(n)); i += 2) \n    {\n        if (n % i ==\
    \ 0) \n        {\n            return false;\n        }\n    }\n    return true;\n\
    }", "{\n    if (n < 2)\n    {\n        return false;\n    }\n    for (int i =\
    \ 2; i < ceil(sqrt(n)); i++)\n    {\n        if (n % i == 0)\n        {\n    \
    \        return false;\n        }\n    }\n    return true;\n}", "{\n    if (n\
    \ < 2) return false;\n    for (long j = 2; j < n; j++) \n    {\n        if (n\
    \ % j == 0) return false;\n    }\n    return true;\n}", "{\n    if (n<2) \n  \
    \      return false;\n    for (long i=2; i<n; i++) \n    {\n        if (n%i==0)\n\
    \            return false;\n    }\n    return true;\n}", "{\n\t// is_prime returns\
    \ true if n is prime, false otherwise\n\t// pre: n is a positive integer\n\t//\
    \ post: return value is true if n is prime, false otherwise\n\tif (n < 2)\n\t\t\
    return false;\n\tif (n == 2)\n\t\treturn true;\n\tif (n % 2 == 0)\n\t\treturn\
    \ false;\n\tlong limit = long(sqrt(n));\n\tfor (long i = 3; i <= limit; i += 2)\n\
    \t\tif (n % i == 0)\n\t\t\treturn false;\n\treturn true;\n}", "{\n    if (n <=\
    \ 1)\n    {\n        return false;\n    }\n    else if (n <= 3)\n    {\n     \
    \   return true;\n    }\n    else if (n % 2 == 0 || n % 3 == 0)\n    {\n     \
    \   return false;\n    }\n    int i = 5;\n    while (i * i <= n)\n    {\n    \
    \    if (n % i == 0 || n % (i + 2) == 0)\n        {\n            return false;\n\
    \        }\n        i = i + 6;\n    }\n    return true;\n}", "{\n    if (n <=\
    \ 1)\n    {\n        return false;\n    }\n    else if (n == 2)\n    {\n     \
    \   return true;\n    }\n    else if (n % 2 == 0)\n    {\n        return false;\n\
    \    }\n    else \n    {\n        for (int i = 3; i < (int)sqrt(n) + 1; i+=2)\n\
    \        {\n            if (n % i == 0)\n            {\n                return\
    \ false;\n            }\n        }\n        return true;\n    }\n}", "{\n    //\
    \ square root of n\n    long sqrt_n = long(sqrt(n));\n    foreach (d; 1L..sqrt_n)\n\
    \    {\n        if (n % d == 0)\n        {\n            return false;\n      \
    \  }\n    }\n    return true;\n}", "{\n\tif (n < 0) n = -n;\n\tif (n <= 1) return\
    \ false;\n\tif (n == 2) return true;\n\tif (n % 2 == 0) return false;\n\tfor (long\
    \ i = 3; i <= (long)ceil(sqrt(n)); i += 2) {\n\t\tif (n % i == 0) return false;\n\
    \t}\n\treturn true;\n}", "{\n\tif (n <= 1) return false;\n\tif (n == 2) return\
    \ true;\n\tif (n % 2 == 0) return false;\n\tfor (long i = 3; i <= sqrt(n); i +=\
    \ 2)\n\t{\n\t\tif (n % i == 0) return false;\n\t}\n\treturn true;\n}", "{\n  \
    \  if (n <= 1) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0)\
    \ return false;\n    for (long i = 3; i < sqrt(n) + 1; i += 2) \n    {\n     \
    \   if (n % i == 0) return false;\n    }\n    return true;\n}", "{\n    if (n\
    \ < 2) \n    {\n        return false;\n    }\n    long maxi = (long)floor(sqrt(n));\n\
    \    for (long i = 2; i <= maxi; i++) \n    {\n        if (n % i == 0) \n    \
    \    {\n            return false;\n        }\n    }\n    return true;\n}", "{\n\
    \    if (n <= 1) return false;\n    if (n == 2) return true;\n    if (n % 2 ==\
    \ 0) return false;\n    // if we make it this far, n is odd\n    long i;\n   \
    \ long sqrtn = (long)sqrt(n);\n    for (i = 3; i <= sqrtn; i+=2) {\n        if\
    \ (n % i == 0) return false;\n    }\n    return true;\n}", "{\n    if (n == 2)\
    \ return true;\n    if (n == 1 || n % 2 == 0) return false;\n    for (long i =\
    \ 3; i < long(sqrt(n)) + 1; i += 2) \n    {\n        if (n % i == 0) return false;\n\
    \    }\n    return true;\n}", "{\n    if (n == 1)\n    {\n        return false;\n\
    \    }\n    else\n    {\n        foreach (i; 2 .. cast(int) sqrt(n) + 1)\n   \
    \     {\n            if (n % i == 0)\n            {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n}", "{\n    if (n <= 1)\
    \ \n        return false;\n    if (n <= 3) \n        return true;\n    if (n %\
    \ 2 == 0 || n % 3 == 0) \n        return false;\n    long i = 5;\n    while (i\
    \ * i <= n) \n    {\n        if (n % i == 0 || n % (i + 2) == 0) \n          \
    \  return false;\n        i = i + 6;\n    }\n    return true;\n}", "{\n    if\
    \ (n <= 1) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return\
    \ false;\n    foreach (i; 2..sqrt(n)) {\n        if (n % i == 0) {\n         \
    \   return false;\n        }\n    }\n    return true;\n}", "{\n    if (n == 1)\
    \ return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n\
    \    if (n == 3) return true;\n    if (n % 3 == 0) return false;\n    if (n ==\
    \ 5) return true;\n    if (n % 5 == 0) return false;\n    if (n == 7) return true;\n\
    \    if (n % 7 == 0) return false;\n    if (n == 11) return true;\n    if (n %\
    \ 11 == 0) return false;\n    if (n == 13) return true;\n    if (n % 13 == 0)\
    \ return false;\n    if (n == 17) return true;\n    if (n % 17 == 0) return false;\n\
    \    if (n == 19) return true;\n    if (n % 19 == 0) return false;\n    if (n\
    \ == 23) return true;\n    if (n % 23 == 0) return false;\n    if (n == 29) return\
    \ true;\n    if (n % 29 == 0) return false;\n    if (n == 31) return true;\n \
    \   if (n % 31 == 0) return false;\n    if (n == 37) return true;\n    if (n %\
    \ 37 == 0) return false;\n    if (n == 41) return true;\n    if (n % 41 == 0)\
    \ return false;\n    if (n == 43) return true;\n    if (n % 43 == 0) return false;\n\
    \    if (n == 47) return true;\n    if (n % 47 == 0) return false;\n    if (n\
    \ == 53) return true;\n    if (n % 53 == 0) return false;\n    if (n == 59) return\
    \ true;\n    if (n % 59 == 0) return false;\n    if (n == 61) return true;\n \
    \   if (n % 61 == 0) return false;\n    if (n == 67) return true;\n    if (n %\
    \ 67 == 0) return false;\n    if (n == 71) return true;\n    if (n % 71 == 0)\
    \ return false;\n    if (n == 73) return true;\n    if (n % 73 ==", "{\n    for\
    \ (int i = 2; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n     \
    \       return false;\n        }\n    }\n    return true;\n}", "{\n    if (n <\
    \ 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n\
    \    long max = cast(long) sqrt(n);\n    for (long i = 3; i <= max; i += 2) {\n\
    \        if (n % i == 0) return false;\n    }\n    return true;\n}", "{\n    if\
    \ (n <= 1) \n    {\n        return false;\n    }\n    else if (n <= 3) \n    {\n\
    \        return true;\n    }\n    else if (n % 2 == 0 || n % 3 == 0) \n    {\n\
    \        return false;\n    }\n    else\n    {\n        for (size_t i = 5; i <\
    \ sqrt(n) + 1; i += 6) \n        {\n            if (n % i == 0 || n % (i + 2)\
    \ == 0) \n            {\n                return false;\n            }\n      \
    \  }\n        return true;\n    }\n}", "{\n    if (n == 2L)\n    {\n        return\
    \ true;\n    }\n    for (int i = 2; i <= sqrt(n); i++)\n    {\n        if (n %\
    \ i == 0)\n        {\n            return false;\n        }\n    }\n    return\
    \ true;\n}", "{\n    return n != 1 && n != 2 && n != 3 && n != 5 && n != 7 &&\
    \ n != 11 && n != 13 && n != 17 && n != 19 && n != 23 && n != 29 && n != 31 &&\
    \ n != 37 && n != 41 && n != 43 && n != 47 && n != 53 && n != 59 && n != 61 &&\
    \ n != 67 && n != 71 && n != 73 && n != 79 && n != 83 && n != 89 && n != 97 &&\
    \ n != 101 && n != 103 && n != 107 && n != 109 && n != 113 && n != 127 && n !=\
    \ 131 && n != 137 && n != 139 && n != 149 && n != 151 && n != 157 && n != 163\
    \ && n != 167 && n != 173 && n != 179 && n != 181 && n != 191 && n != 193 && n\
    \ != 197 && n != 199 && n != 211 && n != 223 && n != 227 && n != 229 && n != 233\
    \ && n != 239 && n != 241 && n != 251 && n != 257 && n != 263 && n != 269 && n\
    \ != 271 && n != 277 && n != 281 && n != 283 && n != 293 && n != 307 && n != 311\
    \ && n != 313 && n != 317 && n != 331 && n != 337 && n != 347 && n != 349 && n\
    \ != 353 && n != 359 && n != 367 && n != 373 && n != 379 && n != 383 && n != 389\
    \ && n != 397 && n != 401 && n != 409 && n != 419 && n != 421 && n != 431 && n\
    \ != 433 && n != 439 && n != 443 && n != 449 && n != 457 && n != 461 && n != 463\
    \ && n != 467 && n != 479 && n != 487 && n != 491 && n != 499 && n != 503 && n\
    \ != 509 && n != 521 && n != 523 && n != 541 && n != 547 && n != 557 && n != 563\
    \ && n != 569 && n != 571 && n != 577 && n != 587 && n != 593 && n != 599 && n\
    \ != 601 && n != 607 && n != 613 && n != 617 && n != 619 && n != 631 && n != 641\
    \ && n != 643 && n != 647 &&", "{\n    if (n <= 1)\n        return false;\n  \
    \  if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 == 0)\n    \
    \    return false;\n    long i = 5;\n    while (i * i <= n)\n    {\n        if\
    \ (n % i == 0 || n % (i + 2) == 0)\n            return false;\n        i += 6;\n\
    \    }\n    return true;\n}", "{\n    if (n <= 1) return false;\n    if (n <=\
    \ 3) return true;\n    long upper_bound = cast(long)sqrt(n);\n    for (long i\
    \ = 2; i <= upper_bound; i++)\n    {\n        if (n % i == 0)\n        {\n   \
    \         return false;\n        }\n    }\n    return true;\n}", "{\n    return\
    \ n > 1 && all!(i => (n % i) != 0, iota(2L, cast(long)sqrt(n) + 1L));\n}", "{\n\
    \    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 ==\
    \ 0 || n % 3 == 0) return false;\n    long i = 5;\n    while (i * i <= n) \n \
    \   {\n        if (n % i == 0 || n % (i + 2) == 0) return false;\n        i +=\
    \ 6;\n    }\n    return true;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
