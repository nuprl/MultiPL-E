name: HumanEval_52_below_threshold
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\nReturn true if all numbers in\
  \ the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L],\
  \ 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n\
  \    \n*/\nbool below_threshold(long[] l, long t) \n"
tests: "unittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L,\
  \ 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) ==\
  \ false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L,\
  \ 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) ==\
  \ true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}"
completions: ["{\n    bool result = true;\n    foreach(i; l) {\n        if (i >= t)\
    \ {\n            result = false;\n            break;\n        }\n    }\n    return\
    \ result;\n}\n// \n// return true if all numbers in the list are prime numbers\n\
    // ", "{\n    int index = 0;\n    while (index < l.length)\n    {\n        if\
    \ (l[index] > t)\n        {\n            return false;\n        }\n        index\
    \ = index + 1;\n    }\n    return true;\n}", "{\n    assert(l.length > 0);\n \
    \   long sum = 0;\n    foreach (long x; l) {\n        sum += x;\n    }\n    return\
    \ sum < t;\n}", "{\n    foreach(il; l) \n    {\n        if(il > t)\n         \
    \   return false;\n    }\n    return true;\n}\n/*\nReturn true if all the elements\
    \ of a are below the threshold.\n    >>> below_threshold_2d([[1L, 2L, 3L], [4L,\
    \ 5L, 6L]], 10L)\n    true\n    >>> below_threshold_2d([[1L, 2L, 3L], [14L, 5L,\
    \ 6L]], 10L)\n    false\n*/", "{\n\t\n\tforeach(k;l)\n\t{\n\t\tif(k>t)\n\t\t{\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n/*\nReturn an array of the\
    \ same size as l with all the elements in the array \nl replaced by the minimum\
    \ value in l.\n    >>> min_in_list([1L, 2L, 4L, 10L])\n    [1L, 1L, 1L, 1L]\n\
    \    >>> min_in_list([2L, 4L, 8L, 16L])\n    [2L, 2L, 2L, 2L]\n*/\nlong[] min_in_list(long[]\
    \ l) \n{\n\tlong[] list1=new long[l.length];\n\tauto mini=min(l);\n\tforeach(k;list1)\n\
    \t{\n\t\tlist1[k]=mini;\n\t}\n\treturn list1;\n}\n/*\nReturn an array of the same\
    \ size as l with all the elements in the array \nl replaced by the maximum value\
    \ in l.\n    >>> max_in_list([1L, 2L, 4L, 10L])\n    [10L, 10L, 10L, 10L]\n  \
    \  >>> max_in_list([2L, 4L, 8L, 16L])\n    [16L, 16L, 16L, 16L]\n*/\nlong[] max_in_list(long[]\
    \ l) \n{\n\tlong[] list1=new long[l.length];\n\tauto maxi=max(l);\n\tforeach(k;list1)\n\
    \t{\n\t\tlist1[k]=maxi;\n\t}\n\treturn list1;\n}\n/*\nReturn a new array, of size\
    \ l.length, with all values in the array l that are \nbelow threshold t removed.\n\
    \    >>> remove_below_threshold([1L, 2L, 4L, 10L], 100L)\n    [1L, 2L, 4L, 10L]\n\
    \    >>> remove_below_threshold([1L, 20L, 4L, 10L], 5L)\n    [20L, 10L]\n*/",
  "    in (len(l) > 0)\n    out (result == (exists k in range(0, len(l)): l[k] < t))\n\
    \    //out (forall k in range(0, len(l)): l[k] < t)\n{\n    bool res = true;\n\
    \    long idx = 0;\n    while(res && idx < len(l)) \n    //while(res && idx <\
    \ len(l)) \n    {\n\t\tres = res && (l[idx] < t);\n\t\tidx++;\n    }\n    return\
    \ res;\n}", "{\n    foreach(i; l)\n    {\n        if(i > t) return false;\n  \
    \  }\n    return true;\n}", "{\n    assert(t > 0);\n    foreach(x; l)\n    {\n\
    \        if(x > t)\n        {\n            return false;\n        }\n    }\n \
    \   return true;\n}", "{\n    foreach(long i; l)\n    {\n        if(i > t)\n \
    \           return false;\n    }\n    return true;\n}\n/*\nAdd 1 to each number\
    \ in the array and return the array.\n    >>> add_one([1L, 2L, 4L, 10L])\n   \
    \ [2L, 3L, 5L, 11L]\n    >>> add_one([])\n    []\n*/\nlong[] add_one(long[] l)\
    \ \n{\n    long[] ret = new long[0];\n    foreach(long i; l)\n    {\n        ret\
    \ ~= i + 1;\n    }\n    return ret;\n}\n/*\nThe sum of the numbers in l. Return\
    \ zero if the array is empty.\n    >>> sum_numbers([1L, 2L, 4L, 10L])\n    17L\n\
    \    >>> sum_numbers([])\n    0L\n*/\nlong sum_numbers(long[] l) \n{\n    long\
    \ sum = 0;\n    foreach(long i; l)\n    {\n        sum += i;\n    }\n    return\
    \ sum;\n}\n/*\nReturn the element e of the array a at index i.\n    >>> get_element([1L,\
    \ 2L, 4L, 10L], 2)\n    4L\n    >>> get_element([1L, 2L, 4L, 10L], 0)\n    1L\n\
    */\nlong get_element(long[] a, long i) \n{\n    return a[i];\n}\n/*\nReturn the\
    \ index of e in the array a.\n    >>> get_index(4L, [1L, 2L, 4L, 10L])\n    2L\n\
    \    >>> get_index(1L, [1L, 2L, 4L, 10L])\n    0L\n*/\nlong get_index(long e,\
    \ long[] a) \n{\n    return a.indexOf(e);\n}\n/*\nCreate an array with the Fibonacci\
    \ sequence. The sequence starts with 1, 1. Every following element is the sum\
    \ of the two previous elements. The array should have n elements.\n    >>> fibonacci(8)\n\
    \    [1L, 1L", "{\n  foreach(a; l)\n    if(a > t) return false;\n  return true;\n\
    }\n/*\nReturn true if all strings in the array l are shorter than the length of\
    \ string s.\n    >>> below_length([\"aa\", \"bb\", \"c\"], \"cc\")\n    true\n\
    \    >>> below_length([\"aa\", \"bb\", \"c\"], \"a\")\n    false\n    \n*/", "{\n\
    \    foreach(i; l) \n    {\n        if(i >= t) \n        {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n/*\nsum all elements in the array\
    \ l.\n    >>> sum_array([1L, 2L, 4L, 10L])\n    17L\n    >>> sum_array([1L, 2L,\
    \ 4L, 10L, 10L])\n    27L\n*/\nlong sum_array(long[] l) \n{\n    long acc = 0L;\n\
    \    foreach(i; l) \n    {\n        acc += i;\n    }\n    return acc;\n}\n/*\n\
    Return the element from the array l with the highest value.\n    >>> max_array([1L,\
    \ 2L, 4L, 10L])\n    10L\n    >>> max_array([1L, 2L, 4L, 10L, 10L])\n    10L\n\
    \    >>> max_array([1L, -2L, 4L, -10L, 10L])\n    10L\n*/\nlong max_array(long[]\
    \ l) \n{\n    long acc = l[0];\n    foreach(i; l) \n    {\n        if(i > acc)\
    \ \n        {\n            acc = i;\n        }\n    }\n    return acc;\n}\n/*\n\
    Return the element from the array l with the lowest value.\n    >>> min_array([1L,\
    \ 2L, 4L, 10L])\n    1L\n    >>> min_array([1L, 2L, 4L, 10L, 10L])\n    1L\n \
    \   >>> min_array([1L, -2L, 4L, -10L, 10L])\n    -10L\n*/\nlong min_array(long[]\
    \ l) \n{\n    long acc = l[0];\n    foreach(i; l) \n    {\n        if(i < acc)\
    \ \n        {\n            acc = i;\n        }\n    }\n    return acc;\n}\n/*\n\
    Return the array l minus the first element.\n    >>> tail([1L, 2L, 4L, 10L])\n\
    \    [2L", "{\n    foreach(int i; l) \n    {\n        if(l[i] >= t) \n       \
    \ {\n            return false;\n        }\n    }\n    return true;\n}", "in\n\
    {\n    assert(t > 0);\n    bool[] result = new bool[l.length];\n    foreach (i,\
    \ ref x; l) \n    {\n        result[i] = x < t;\n    }\n    return all(result);\n\
    }", "{\n    foreach(x; l) \n    {\n        if(x >= t) \n        {\n          \
    \  return false;\n        }\n    }\n    return true;\n}\n/*", "{\n    // Return\
    \ true if all numbers in the array l are below threshold t.\n    foreach(n; l)\n\
    \    {\n        if(n >= t)\n        {\n            return false;\n        }\n\
    \    }\n    return true;\n}", "{\n  foreach(i; l) \n  {\n    if(i > t) \n    {\n\
    \      return false;\n    }\n  }\n  return true;\n}", "{\n\tint i = 0;\n\tfor\
    \ (i=0; i<l.length; i++) \n\t{\n\t\tif (l[i] >= t) \n\t\t{\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;\n}", "in\n{\n    foreach (i; l)\n    {\n        assert(i\
    \ >= 0L);\n    }\n}\nout\n{\n    assert(foreach((long i; l)) (i < t));\n}\n{\n\
    \    foreach (i; l)\n    {\n        if (!(i < t)) \n        {\n            return\
    \ false;\n        }\n    }\n    return true;\n}", "{\n    return all(l.map!(x\
    \ => x < t));\n}\n/*\nReturn true if any element of l is equal to e.\n    >>>\
    \ any_eq([\"cat\", \"dog\", \"pig\"], \"dog\")\n    true\n    >>> any_eq([\"cat\"\
    , \"dog\", \"pig\"], \"monkey\")\n    false\n*/", "{\n    foreach(x; l) \n   \
    \ {\n        if(x > t) \n        {\n            return false;\n        }\n   \
    \ }\n    return true;\n}", "{\n    foreach(x; l)\n    {\n        if(x > t) return\
    \ false;\n    }\n    return true;\n}\n/*\nReturn true if there exists at least\
    \ one number in the array l that \nis the sum of two numbers in the array l.\n\
    \    >>> has_sum_in_list([1L, 2L, 3L, 4L], 3L)\n    true\n    >>> has_sum_in_list([1L,\
    \ 2L, 3L, 4L], 5L)\n    false\n    >>> has_sum_in_list([1L, 2L, 3L, 4L], 10L)\n\
    \    false\n    >>> has_sum_in_list([1L, 2L, 3L, 4L], 9L)\n    true\n    \n*/",
  "{\n    foreach(long x; l) \n    {\n        if(x >= t) \n        {\n           \
    \ return false;\n        }\n    }\n    return true;\n}", "{\n    foreach(long\
    \ li; l)\n    {\n        if(li >= t)\n            return false;\n    }\n    return\
    \ true;\n}", "{\n    foreach(i; l)\n    {\n        if(i > t)\n            return\
    \ false;\n    }\n    return true;\n}", "{\n    foreach(item; l)\n    {\n     \
    \   if(item>t)\n            return false;\n    }\n    return true;\n}\n/*\n\t\
    Where()\n\t\n\tReturn all the numbers in the array l that are greater than min\
    \ and less than max.\n\t    >>> where(3L, 100L, [1L, 20L, 4L, 30L, 2L, 100L])\n\
    \t    [20L, 30L]\n\t    >>> where(1L, 100L, [1L, 20L, 4L, 30L, 2L, 100L])\n\t\
    \    [20L, 4L, 30L, 2L]\n\t    >>> where(100L, 200L, [1L, 20L, 4L, 30L, 2L, 100L])\n\
    \t    []\n\t    >>> where(0L, 10L, [1L, 20L, 4L, 30L, 2L, 100L])\n\t    [1L, 4L,\
    \ 2L]\n\t    \n*/\nlong[] where(long min, long max, long[] l)\n{\n    l = [1L,\
    \ 20L, 4L, 30L, 2L, 100L];\n    if( min > max )\n    {\n        return [];\n \
    \   }\n    else\n    {\n        long[] result;\n        for(int i = 0; i < l.length;\
    \ i++)\n        {\n            if(l[i]>min && l[i]<max)\n            {\n     \
    \           result ~= l[i];\n            }\n        }\n        return result;\n\
    \    }\n}\n/*\n\tIndexes\n\t\n\tReturn all the indexes in the array where the\
    \ value is True.\n\t    >>> indexes([false, true, false, true])\n\t    [1L, 3L]\n\
    \t    >>> indexes([false, false, false, false])\n\t    []\n\t    >>> indexes([true,\
    \ true, true, true])\n\t    [0L, 1L, 2L, 3L]\n\t    \n*/\nlong[] indexes(bool[]\
    \ b)\n{\n    long[] result;\n    for(int i = 0; i < b.length; i++)\n    {\n  \
    \     ", "{\n\t\n\tforeach( i; l )\n\t{\n\t\tif( i > t )\n\t\t\treturn false;\n\
    \t}\n\treturn true;\n}\n/*\nReturn true if the given list of integers is actually\
    \ a range.\n    >>> is_range([1L, 2L, 3L, 4L])\n    true\n    >>> is_range([1L,\
    \ 2L, 4L])\n    false\n    \n*/", "{\n    // YUCK!!!\n    int sz = l.length;\n\
    \    for (int i = 0; i < sz; i++)\n    {\n        if (l[i] >= t)\n           \
    \ return false;\n    }\n    return true;\n}", "{\n    //return all(x < t for x\
    \ in l);\n    foreach(long x; l)\n    {\n        if(!(x < t))\n            return\
    \ false;\n    }\n    return true;\n}\n/*\nReturn true if all numbers in the array\
    \ l are prime.\n    >>> is_prime([2L, 3L, 5L, 7L])\n    true\n    >>> is_prime([1L,\
    \ 4L, 6L, 8L])\n    false\n*/", "{\n    foreach(ll; l) \n    {\n        if(ll\
    \ > t) \n        {\n            return false;\n        }\n    }\n    return true;\n\
    }\n/*\nReturn a list of numbers that are below the threshold in the array l.\n\
    >>> below_threshold_values([1L, 2L, 4L, 10L], 100L)\n[1L, 2L, 4L, 10L]\n>>> below_threshold_values([1L,\
    \ 20L, 4L, 10L], 5L)\n[1L, 4L]\n*/\nlong[] below_threshold_values(long[] l, long\
    \ t) \n{\n    auto result = [];\n    foreach(ll; l) \n    {\n        if(ll < t)\
    \ \n        {\n            result ~= ll;\n        }\n    }\n    return result;\n\
    }\n/*\nCompare two numbers.\n>>> compare(1L, 2L)\n-1\n>>> compare(1L, 1L)\n0\n\
    >>> compare(2L, 1L)\n1\n*/", "{\n    return all(l, (x) => x < t);\n}", "{\n  \
    \  foreach(x; l) \n    {\n        if(x >= t) \n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n/*\n    Return the power of 3's all_below_threshold\
    \ takes.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>>\
    \ below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n*/\nlong count_powers_of_three(long[]\
    \ l)\n{\n    int count = 0;\n    long three = 1;\n    while(below_threshold(l,\
    \ three)) \n    {\n        count += 1;\n        three *= 3;\n    }\n    return\
    \ count;\n}\n/*\n    Return the largest element in l.\n    >>> maximum([1L, 2L,\
    \ 4L, 8L])\n    8L\n    >>> maximum([1L, 4L, 2L, 8L])\n    8L\n*/\nlong maximum(long[]\
    \ l) \n{\n    long max = 0;\n    foreach(x; l) \n    {\n        if(x > max) \n\
    \        {\n            max = x;\n        }\n    }\n    return max;\n}\n/*\n \
    \   Return true if l1 and l2 are identical lists\n    >>> identical([1L, 2L, 3L],\
    \ [1L, 2L, 3L])\n    true\n    >>> identical([1L, 2L, 3L], [3L, 2L, 1L])\n   \
    \ false\n*/", "{\n    return all!((n) => n < t)(l);\n}\n/*\nReturn an array of\
    \ the elements in l1 and l2.\n    >>> union([1L, 2L, 4L, 8L], [2L, 3L, 5L])\n\
    \    [1L, 2L, 4L, 8L, 2L, 3L, 5L]\n    >>> union([1L, 2L, 3L], [3L, 4L, 5L])\n\
    \    [1L, 2L, 3L, 3L, 4L, 5L]\n*/\nlong[] union(long[] l1, long[] l2)\n{\n   \
    \ return l1 ~ l2;\n}\n/*\nGet the total number of items in the nested array l.\n\
    \    >>> total_in_nested_array([[1L, 2L, 3L], [4L, 5L], [6L]])\n    6\n    >>>\
    \ total_in_nested_array([[1L, 2L, 3L], [4L, 5L, 6L], [6L, 7L, 8L, 9L]])\n    9\n\
    */\nlong total_in_nested_array(long[][] l)\n{\n    return l.map!(a => a.length).sum;\n\
    }\n/*\nReturn true if the elements in l1 are the same as the elements in l2.\n\
    \    >>> same_elements([1L, 2L, 3L], [1L, 2L, 3L])\n    true\n    >>> same_elements([1L,\
    \ 2L, 3L], [1L, 2L, 4L])\n    false\n*/", "{\n    bool r = true;\n    foreach(i;\
    \ l)\n    {\n        r = r && (i < t);\n    }\n    return r;\n}\n/*\nTake a list\
    \ of objects and for each object return a list of objects\n    >>> object_to_list([1,\
    \ 2, 3, 4])\n    [[1], [2], [3], [4]]\n*/\nauto object_to_list(A[] l)\n{\n   \
    \ B[][] r;\n    foreach(i; l)\n    {\n        r ~= [i];\n    }\n    return r;\n\
    }\n/*\nTake a list of pairs and return a list of first components.\n    >>> pairs_to_list([[1,\
    \ 2], [3, 4]])\n    [1, 3]\n*/\nauto pairs_to_list(A[B][] l)\n{\n    A[] r;\n\
    \    foreach(i; l)\n    {\n        r ~= i[0];\n    }\n    return r;\n}\n/*\nTake\
    \ a list of pairs and return a list of second components.\n    >>> pairs_to_list([[1,\
    \ 2], [3, 4]])\n    [2, 4]\n*/\nauto pairs_to_second_list(A[B][] l)\n{\n    B[]\
    \ r;\n    foreach(i; l)\n    {\n        r ~= i[1];\n    }\n    return r;\n}\n\
    /*\nAdd all numbers in a list of numbers.\n    >>> sum_numbers([1, 2, 3, 4])\n\
    \    10\n*/\nlong sum_numbers(long[] l)\n{\n    long r = 0;\n    foreach(i; l)\n\
    \    {\n        r += i;\n    }\n    return r;\n}\n/*\nReturn true if the first\
    \ list has all elements from the second list.\n    >>> list_contains([1, 2, 3,\
    \ 4], [2, 4])\n    true\n    >>> list_contains([1, 2, 3, 4], [2, 3, 4, 5])\n \
    \   false\n*/", "{\n    foreach(i; l) \n    {\n        if(i >= t) \n        {\n\
    \            return false;\n        }\n    }\n    return true;\n}", "{\n    bool\
    \ all_below_threshold = true;\n    foreach(long x; l)\n    {\n        if(x >=\
    \ t)\n        {\n            all_below_threshold = false;\n            break;\n\
    \        }\n    }\n    return all_below_threshold;\n}\n/*\nReturn true if all\
    \ numbers in the array l are below threshold t.\n    >>> below_threshold([1L,\
    \ 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n\
    \    false\n*/", "  in \n  {\n    for (l.mutable.iterator it = l.mutable.iterator();\
    \ it.valid(); it.next())\n      assert it.current > 0L;\n    assert t > 0L;\n\
    \  }\n  ensures \n  {\n    bool result = true;\n    for (int i = 0; i < l.length;\
    \ i++)\n      if (l[i] >= t)\n        result = false;\n    return result;\n  }\n\
    {\n  long count = 0L;\n  long i = 0L;\n  while (i < l.length)\n    invariant \n\
    \    {\n      count == i;\n      i <= l.length;\n      forall (int j; 0 <= j &&\
    \ j < i; l[j] < t);\n    }\n    decreases l.length - i;\n  {\n    if (l[i] >=\
    \ t)\n      return false;\n    count = count + 1L;\n    i = i + 1L;\n  }\n  return\
    \ true;\n}\n \n/*\nReturn true if all numbers in the array l are below threshold\
    \ t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L,\
    \ 20L, 4L, 10L], 5L)\n    false\n    \n*/", "in {\n  foreach(int k; 0..l.length)\n\
    \    assert(l[k] >= 0);\n}\nout {\n  foreach(int k; 0..l.length)\n    assert(l[k]\
    \ >= 0);\n}\n{\n  foreach(int k; 0..l.length)\n    if(l[k] >= t)\n      return\
    \ false;\n  return true;\n}\n/*\nReturn the n-th element of a list.\n    >>> element_at([0L,\
    \ 1L, 2L, 3L], 2L)\n    2L\n    >>> element_at([0L, 1L, 2L, 3L], 5L)\n    -1L\n\
    */\nlong element_at(long[] l, long n) \nin {\n  foreach(int k; 0..l.length)\n\
    \    assert(l[k] >= 0);\n  assert(n >= 0);\n}\nout {\n  foreach(int k; 0..l.length)\n\
    \    assert(l[k] >= 0);\n  assert(n >= 0);\n}\n{\n  if(n >= l.length)\n    return\
    \ -1;\n  return l[n];\n}\n/*\nReturn the number of times a value v occurs in a\
    \ list l.\n    >>> count_occurrences([0L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 1L], 1L)\n\
    \    3L\n    >>> count_occurrences([0L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 1L], 0L)\n\
    \    1L\n    >>> count_occurrences([0L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 1L], 10L)\n\
    \    0L\n*/\nlong count_occurrences(long[] l, long v) \nin {\n  foreach(int k;\
    \ 0..l.length)\n    assert(l[k] >= 0);\n  assert(v >= 0);\n}\nout {\n  foreach(int\
    \ k; 0..l.length)\n    assert(l[k] >=", "{\n    foreach(n; l)\n    {\n       \
    \ if(n >= t)\n            return false;\n    }\n    return true;\n}", "{\n   \
    \ return l.filter!(e => e < t).length == l.length;\n}\n/*\nReturn true if the\
    \ array l is sorted in increasing order.\n    >>> is_sorted([1L, 2L, 4L, 10L])\n\
    \    true\n    >>> is_sorted([1L, 20L, 3L, 10L])\n    false\n*/", "{\n    int\
    \ length = l.length;\n    foreach(int i; 0..length)\n    {\n        if(l[i] >\
    \ t)\n        {\n            return false;\n        }\n    }\n    return true;\n\
    }", "{\n    foreach(i; l) \n    {\n        if(l[i] >= t) \n        {\n       \
    \     return false;\n        }\n    }\n    return true;\n}", "{\n    foreach(l;\
    \ n => n < t) \n    {\n        return false;\n    }\n    return true;\n}", "{\n\
    \    foreach(n; l)\n    {\n        if(n > t)\n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n/*\nReturn true if all numbers in the\
    \ array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n\
    \    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n\
    */", "{\n    for (int i = 0; i < l.length; i++) \n    {\n        if (l[i] > t)\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}",
  "{\n    foreach(item; l)\n    {\n        if(item > t)\n            return false;\n\
    \    }\n    return true;\n}", "{\n     if (l.empty) return true;\n     return\
    \ l[0] < t && below_threshold(l[1..$], t);\n}\n/*\nFind the index of the first\
    \ element in the list l that is equal to e.\n    >>> index_equal_to([1L, 2L, 4L,\
    \ 10L], 10L)\n    3\n    \n*/\nlong index_equal_to(long[] l, long e) \n{\n   \
    \ if (l.empty) return -1;\n    return l[0] == e ? 0 : (index_equal_to(l[1..$],\
    \ e) + 1);\n}\n/*\nReturn true if the numbers in the list l1 are in ascending\
    \ order.\n    >>> is_sorted([1L, 2L, 4L, 10L])\n    true\n    >>> is_sorted([2L,\
    \ 1L, 4L, 10L])\n    false\n    \n*/", "{\n    long sum = 0L;\n    for (long i\
    \ = 0L; i < l.length; i++) \n    {\n        sum += l[i];\n    }\n    return sum\
    \ < t;\n}", "{\n    bool allBelow = true;\n    foreach(i; l) \n    {\n       \
    \ if(i >= t)\n        {\n            allBelow = false;\n            break;\n \
    \       }\n    }\n    return allBelow;\n}", "{\n    foreach(num; l) \n    {\n\
    \        if(num >= t)\n            return false;\n    }\n    return true;\n}\n\
    /*\n    Write a function scalar_product that takes two lists of numbers of\n \
    \   the same length and returns the sum of the products of the numbers\n    at\
    \ each position.\n    >>> scalar_product([1L, 2L, 3L], [4L, 5L, 6L])\n    32L\n\
    */\nlong scalar_product(long[] l1, long[] l2) \n{\n    long sum = 0;\n    foreach(i,\
    \ num; l1) \n    {\n        sum += num * l2[i];\n    }\n    return sum;\n}", "{\n\
    \    foreach(i; l) \n    {\n        if(i > t) \n        {\n            return\
    \ false;\n        }\n    }\n    return true;\n}", "  in(t > 0 && foreach(l; elt\
    \ => elt > 0)) \n  out(result == foreach(l; elt => elt < t))\n{\n  bool all_below\
    \ = true;\n  foreach(item; l) {\n    all_below = all_below && item < t;\n  }\n\
    \  return all_below;\n}", "{\n    foreach(i; l)\n    {\n        if(l[i] >= t)\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    /*\nWrite a function which takes an array of integers and returns the smallest\
    \ one.\n    >>> smallest([1L, 2L, 3L, 4L])\n    1L\n    >>> smallest([4L, 3L,\
    \ 2L, 1L])\n    1L\n    >>> smallest([1L, 1L, 4L, 3L])\n    1L\n*/\nlong smallest(long[]\
    \ l) \n{\n    long s = l[0];\n    foreach(i; l)\n    {\n        if(l[i] < s)\n\
    \        {\n            s = l[i];\n        }\n    }\n    return s;\n}\n/*\nWrite\
    \ a function that calculates the sum of all numbers in an array.\n    >>> sum([1L,\
    \ 2L, 3L, 4L])\n    10L\n    >>> sum([1L, -2L, 3L, 4L])\n    6L\n    >>> sum([1L,\
    \ 0L, 0L, 0L])\n    1L\n    >>> sum([1L, 2L, 3L, 4L, -8L])\n    2L\n*/\nlong sum(long[]\
    \ l) \n{\n    long s = 0;\n    foreach(i; l)\n    {\n        s += l[i];\n    }\n\
    \    return s;\n}\n/*\nWrite a function that calculates the product of all numbers\
    \ in an array.\n    >>> product([1L, 2L, 3L, 4L])\n    24L\n    >>> product([1L,\
    \ -2L, 3L, 4L])\n    -24L\n    >>> product([1L, 0L, 0L, 0L])\n    0L\n    >>>\
    \ product([1L, 2L, 3L, 4L, -8L])\n    -384L\n*/\nlong product(long[] l) \n{\n\
    \    long s = 1;\n    foreach(i; l)\n    {\n        s *= l[i];\n    }\n    return\
    \ s;\n}\n", "{\n    foreach(i; l)\n    {\n        if(i > t)\n            return\
    \ false;\n    }\n    return true;\n}", "{\n    return all!(x => x < t)(l);\n}",
  "{\n    foreach(i;l) \n    {\n        if(i>t) \n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}", "{\n    return all!(a => a < t)(l);\n\
    }\n/*\nReturn the sum of all numbers in the array l.\n    >>> sum_list([1L, 2L,\
    \ 4L, 10L])\n    17L\n    >>> sum_list([])\n    0L\n    \n*/\nlong sum_list(long[]\
    \ l) \n{\n    return reduce!((a, b) => a + b)(l);\n}\n/*\nReturn the sum of all\
    \ numbers in the array l.\n    >>> sum_floats([1.0, 2.0, 4.0, 10.0])\n    17.0\n\
    \    >>> sum_floats([])\n    0.0\n    \n*/\ndouble sum_floats(double[] l) \n{\n\
    \    return reduce!((a, b) => a + b)(l);\n}\n/*\nReturn the sum of all numbers\
    \ in the array l.\n    >>> sum_intlist([1, 2, 4, 10])\n    17\n    >>> sum_intlist([])\n\
    \    0\n    \n*/", "{\n    foreach(item; l) \n    {\n        if(item >= t) \n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}",
  "{\n    bool result;\n    foreach(val; l)\n    {\n        if(val < t)\n        {\n\
    \            result = true;\n        }\n        else \n        {\n           \
    \ result = false;\n            break;\n        }\n    }\n    return result;\n\
    }\n/*\nAdd 1 to each number in the list l.\n    >>> add_one_to_all([1L, 2L, 4L,\
    \ 10L])\n    [2L, 3L, 5L, 11L]\n*/\nlong[] add_one_to_all(long[] l) \n{\n    long[]\
    \ result;\n    foreach(val; l)\n    {\n        result ~= val + 1;\n    }\n   \
    \ return result;\n}\n/*\nReturn the sum of the numbers in the list l.\n    >>>\
    \ sum_all([1L, 2L, 4L, 10L])\n    17L\n*/\nlong sum_all(long[] l) \n{\n    long\
    \ sum = 0;\n    foreach(val; l)\n    {\n        sum += val;\n    }\n    return\
    \ sum;\n}\n/*\nReturn the mean of the numbers in the list l.\n    >>> mean([1L,\
    \ 2L, 4L, 10L])\n    4.25L\n*/\nlong mean(long[] l) \n{\n    long mean;\n    long\
    \ sum = 0;\n    foreach(val; l)\n    {\n        sum += val;\n    }\n    mean =\
    \ sum / l.length;\n    return mean;\n}\n/*\n Return the standard deviation of\
    \ the numbers in the list l.\n    >>> stddev([1L, 2L, 4L, 10L])\n    4.0L\n */\n\
    long stddev(long[] l) \n{\n    long std;\n    long sum = 0;\n    long mean_value\
    \ = mean(l);\n    foreach(val; l)\n    {\n        sum += pow(val - mean_value,\
    \ 2);\n    }\n    std = sqrt(sum / l.length);\n    return std;\n}\n/*\n Return\
    \ a list of the numbers in the list l, squared.\n    >>> square_", "{\n    bool\
    \ val = true;\n    foreach(x; l)\n    {\n        if(x > t)\n        {\n      \
    \      val = false;\n            break;\n        }\n    }\n    return val;\n}",
  "{\n    long n = l.length;\n    long i = 0L;\n    while (i < n)\n    {\n       \
    \ if (l[i] >= t) return false;\n        i += 1L;\n    }\n    return true;\n}",
  "{\n    bool r = true;\n    foreach(i; l)\n    {\n        if(i > t)\n        {\n\
    \            r = false;\n            break;\n        }\n    }\n    return r;\n\
    }", "{\n    if (l.length == 0) return true;\n    long x = l[0];\n    if (x >=\
    \ t) return false;\n    else return below_threshold(l[1..$], t);\n}", "{\n   \
    \ foreach(l; e; i)\n    {\n        if(e > t)\n            return false;\n    }\n\
    \    return true;\n}\n/*\nCompare the array l with a, then return true if l is\
    \ a permutation of a. \n    >>> is_permutation([1L, 2L, 4L, 10L], [1L, 2L, 4L,\
    \ 10L])\n    true\n    >>> is_permutation([1L, 2L, 4L, 10L], [4L, 2L, 1L, 10L])\n\
    \    true\n    >>> is_permutation([1L, 2L, 4L, 10L], [4L, 2L, 10L, 1L])\n    false\n\
    */", "{\n  foreach(n; l) \n  {\n    if(n >= t) \n    {\n      return false;\n\
    \    }\n  }\n  return true;\n}", "{\n    bool result = true;\n    foreach(a; l)\n\
    \    {\n        if(a >= t)\n        {\n            result = false;\n         \
    \   break;\n        }\n    }\n    return result;\n}", "{\n    for (long x in l)\
    \ \n    {\n        if (x >= t)\n            return false;\n    }\n    return true;\n\
    }", "{\n\tforeach(var n; l) \n\t{\n\t\tif(n > t) \n\t\t{\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;\n}\n/*\nFind the indices of all occurrences of the\
    \ substring needle in the string haystack.\n    >>> find_all_indexes(\"aaaaa\"\
    , \"aa\")\n    [0, 1, 2, 3]\n    >>> find_all_indexes(\"aaaaa\", \"a\")\n    [0,\
    \ 1, 2, 3, 4]\n    >>> find_all_indexes(\"aaaaa\", \"\")\n    [0, 1, 2, 3, 4]\n\
    \    >>> find_all_indexes(\"abcabcabc\", \"abc\")\n    [0, 3, 6]\n*/", "{\n  \
    \  bool b = true;\n    foreach(i; 0 .. l.length)\n    {\n        if(t < l[i])\n\
    \        {\n            b = false;\n        }\n    }\n    return b;\n}", "{\n\
    \  bool ret = true;\n  foreach(long el; l)\n    ret = ret && el < t;\n  return\
    \ ret;\n}", "{\n    bool ret = true;\n    foreach(li; l)\n    {\n        if( li\
    \ >= t)\n        {\n            ret = false;\n            break;\n        }\n\
    \    }\n    return ret;\n}", "{\n    for (int i = 0; i < l.length; i++)\n    {\n\
    \        if (l[i] >= t)\n        {\n            return false;\n        }\n   \
    \ }\n    return true;\n}", "{\n    foreach(i; l)\n    {\n        if(i > t)\n \
    \           return false;\n    }\n    return true;\n}\n/*\nReturn true if all\
    \ numbers in the array l are below threshold t.\n    >>> below_threshold([1L,\
    \ 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n\
    \    false\n    \n*/", "{\n    return all(l, (c) => c < t);\n}", "in {\n    forall(int\
    \ i; 0 <= i && i < l.length) \n    l[i] >= 0L;\n}\nout {\n    forall(int i; 0\
    \ <= i && i < l.length) \n    l[i] >= 0L;\n}\n{\n  bool r = true;\n  for(int i\
    \ = 0; i < l.length; i++) {\n    r = r && l[i] < t;\n  }\n  return r;\n}\n/*\n\
    Return true if all numbers in the array l are equal.\n    >>> all_equal([1L, 1L,\
    \ 1L, 1L])\n    true\n    >>> all_equal([1L, 2L, 3L, 4L])\n    false\n*/", "{\n\
    \    return all!(e => e < t)(l);\n}\n///*\n//Return the sum of all numbers in\
    \ the array l. \n//    >>> sum([1L, 20L, 4L, 10L])\n//    35L\n//    >>> sum([])\n\
    //    0L\n//*/\nlong sum(long[] l) \n{\n    return reduce!(\"a + b\")(0L, l);\n\
    }\n///*\n//Return the products of all numbers in the array l. \n//    >>> product([1L,\
    \ 2L, 4L, 10L])\n//    80L\n//    >>> product([])\n//    1L\n//*/\nlong product(long[]\
    \ l) \n{\n    return reduce!(\"a * b\")(1L, l);\n}\n///*\n//Return a new array\
    \ that contains the elements of the array l,\n//except the element at position\
    \ n.\n//    >>> remove_at([1L, 2L, 3L, 4L], 2)\n//    [1L, 2L, 4L]\n//    >>>\
    \ remove_at([1L, 2L, 3L, 4L], -1)\n//    [1L, 2L, 3L]\n//*/\nlong[] remove_at(long[]\
    \ l, long n) \n{\n    return remove!(e => e == l[n])(l);\n}\n///*\n//Return a\
    \ new array that contains the first n elements of the array l.\n//    >>> take([1L,\
    \ 2L, 3L, 4L], 2)\n//    [1L, 2L]\n//    >>> take([1L, 2L, 3L, 4L], 0)\n//   \
    \ []\n//*/\nlong[] take(long[] l, long n) \n{\n    if (n > l.length) return l;\n\
    \    long[] r;\n    r.length = n;\n    foreach (ref elem; r) \n    {\n       \
    \ elem = l[__index];\n    }\n    return r;\n}\n///*\n//Return the last element\
    \ of the array l. \n//    >>> last([1L, 2L, 3L, 4L])\n//", "{\n    foreach(e;\
    \ l)\n    {\n        if(e >= t) return false;\n    }\n    return true;\n}\n/*\n\
    Return true if all numbers in the array l are greater than threshold t.\n    >>>\
    \ above_threshold([1L, 2L, 4L, 10L], 100L)\n    false\n    >>> above_threshold([1L,\
    \ 20L, 4L, 10L], 5L)\n    true\n    \n*/", "{\n    return all!\"a < b\"(l, t);\n\
    }", "{\n    bool b = true;\n    int i = 0;\n    while(i < l.length)\n    {\n \
    \     b = b && (l[i] < t);\n      i = i + 1;\n    }\n    return b;\n}", "{\n \
    \   foreach( long i; l)\n    {\n        if(i>t)\n            return false;\n \
    \   }\n    return true;\n}\n/*\nReturn a copy of l with all characters changed\
    \ to upper case.\n    >>> to_upper([\"silly\", \"little\", \"weasel\"])\n    [\"\
    SILLY\", \"LITTLE\", \"WEASEL\"]\n*/\nstring[] to_upper(string[] l) \n{\n    string[]\
    \ result;\n    foreach(string s; l)\n    {\n        result ~= s.toUpper();\n \
    \   }\n    return result;\n}\n/*\nReturn the number of unique elements in l.\n\
    \    >>> num_unique([5L, 2L, 1L, 4L, 3L, 3L, 1L])\n    4\n*/\nlong num_unique(long[]\
    \ l) \n{\n    long result = 0;\n    foreach(long i; l)\n    {\n        bool IsNumContain\
    \ = false;\n        foreach( long j; l)\n        {\n            if(i==j)\n   \
    \         {\n                IsNumContain = true;\n                break;\n  \
    \          }\n        }\n        if(IsNumContain)\n            result++;\n   \
    \ }\n    return result;\n}\n/*\nReturn true if l1 and l2 have the same contents,\
    \ possibly in a different order.\n    >>> same_contents([1L, 2L, 3L], [3L, 2L,\
    \ 1L])\n    true\n    >>> same_contents([1L, 2L, 3L], [3L, 4L, 1L])\n    false\n\
    */", "{\n    return all(l.map!(elem => elem < t));\n}", "{\n    foreach(x; l)\n\
    \    {\n        if(x > t)\n            return false;\n    }\n    return true;\n\
    }\n/*\nReturn the number of even numbers in the array l.\n    >>> count_evens([2L,\
    \ 1L, 2L, 3L, 4L])\n    3\n    >>> count_evens([2L, 2L, 0L])\n    3\n    >>> count_evens([1L,\
    \ 3L, 5L])\n    0\n*/\nlong count_evens(long[] l) \n{\n    long count = 0;\n \
    \   foreach(x; l)\n    {\n        if(x % 2 == 0)\n            count++;\n    }\n\
    \    return count;\n}\n/*\nCount the number of odd elements in the array l.\n\
    \    >>> count_odds([2L, 1L, 2L, 3L, 4L])\n    2\n    >>> count_odds([2L, 2L,\
    \ 0L])\n    0\n    >>> count_odds([1L, 3L, 5L])\n    3\n*/\nlong count_odds(long[]\
    \ l) \n{\n    long count = 0;\n    foreach(x; l)\n    {\n        if(x % 2 != 0)\n\
    \            count++;\n    }\n    return count;\n}\n/*\nReturn the difference\
    \ between the largest and smallest element of the array l.\n    >>> difference_max_min([10L,\
    \ 3L, 5L, 6L])\n    7\n    >>> difference_max_min([7L, 2L, 10L, 9L])\n    8\n\
    \    >>> difference_max_min([2L, 10L, 7L, 2L])\n    8\n*/\nlong difference_max_min(long[]\
    \ l) \n{\n    long max = l[0];\n    long min = l[0];\n    foreach(x; l)\n    {\n\
    \        if(x > max)\n            max = x;\n        if(x < min)\n            min\
    \ = x;\n    }\n    return max - min;\n}\n/*\nReturn the sum of all the elements\
    \ in the array l.\n    >>> sum_of", "{\n    return all!(a => a < t)(l);\n}", "{\n\
    \    bool result = true;\n    foreach(x; l) {\n        if (x > t) {\n        \
    \    result = false;\n            break;\n        }\n    }\n    return result;\n\
    }", "{\n    foreach(i;l)\n    {\n        if(i>t) return false;\n    }\n    return\
    \ true;\n}\n/*\nDivide all numbers in the array l by t.\n    >>> modify_all([1L,\
    \ 2L, 4L, 10L], 2L)\n    [0L, 1L, 2L, 5L]\n    >>> modify_all([1L, 2L, 4L, 10L],\
    \ 1L)\n    [1L, 2L, 4L, 10L]\n*/\nlong[] modify_all(long[] l, long t) \n{\n  \
    \  foreach(i;l)\n    {\n        i=i/t;\n    }\n    return l;\n}\n/*\nInsert the\
    \ contents of array t at the specified index of array l.\n    >>> insert_array([1L,\
    \ 2L, 3L, 4L], 1L, [2L, 2L])\n    [1L, 2L, 2L, 2L, 3L, 4L]\n    >>> insert_array([1L,\
    \ 2L, 3L, 4L], 0L, [0L, 0L])\n    [0L, 0L, 1L, 2L, 3L, 4L]\n    >>> insert_array([1L,\
    \ 2L, 3L, 4L], 3L, [3L, 3L])\n    [1L, 2L, 3L, 3L, 3L, 4L]\n*/\nlong[] insert_array(long[]\
    \ l, long t, long[] arr) \n{\n    long[] ret=new long[l.length+arr.length];\n\
    \    for(long i=0;i<l.length;i++)\n    {\n        if(i<t)\n        {\n       \
    \     ret[i]=l[i];\n        }\n        else if(i>=t)\n        {\n            ret[i+arr.length]=l[i];\n\
    \        }\n    }\n    for(long i=0;i<arr.length;i++)\n    {\n        ret[t+i]=arr[i];\n\
    \    }\n    return ret;\n}\n/*\nRemove the item at index i from the array l.",
  "{\n    return all!\"a < t\"(l);\n}\n/*\nReturn true if all numbers in the array\
    \ l are below the average of elements\nin the array.\n    >>> below_average([1L,\
    \ 2L, 4L, 10L])\n    true\n    >>> below_average([1L, 2L, 4L, 10L, 100L])\n  \
    \  false\n*/", "{\n    long sum = 0L;\n    foreach (i; l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}", "{\n    foreach(m; l) \n    {\n        if(m >\
    \ t)\n            return false;\n    }\n    return true;\n}\n/*\n    >>> numbers_below_threshold([1L,\
    \ 20L, 4L, 10L], 5L)\n    [1L, 4L]\n    >>> numbers_below_threshold([1L, 2L, 4L,\
    \ 10L], 100L)\n    [1L, 2L, 4L, 10L]\n*/\nlong[] numbers_below_threshold(long[]\
    \ l, long t) \n{\n    long[] y;\n    foreach(m; l) \n    {\n        if(m < t)\n\
    \            y ~= m;\n    }\n    return y;\n}\n/*\n    >>> numbers_above_threshold([1L,\
    \ 20L, 4L, 10L], 5L)\n    [20L, 10L]\n    >>> numbers_above_threshold([1L, 2L,\
    \ 4L, 10L], 100L)\n    []\n*/\nlong[] numbers_above_threshold(long[] l, long t)\
    \ \n{\n    long[] y;\n    foreach(m; l) \n    {\n        if(m > t)\n         \
    \   y ~= m;\n    }\n    return y;\n}\n/*\n    >>> numbers_within_threshold([1L,\
    \ 20L, 4L, 10L], 5L, 15L)\n    [5L, 10L]\n    >>> numbers_within_threshold([1L,\
    \ 2L, 4L, 10L], 100L, 200L)\n    []\n*/\nlong[] numbers_within_threshold(long[]\
    \ l, long tl, long th) \n{\n    long[] y;\n    foreach(m; l) \n    {\n       \
    \ if(m >= tl && m <= th)\n            y ~= m;\n    }\n    return y;\n}\n/*\n \
    \   >>> numbers_outside_threshold([1L, 20L, 4L, 10L], 5L, 15L)\n    [1L, 4L, 20L]\n\
    \    >>> numbers_outside_threshold([1L, 2L", "{\n    foreach(e; l)\n    {\n  \
    \      if(e > t)\n            return false;\n    }\n    return true;\n}\n/*\n\
    Return the number of unique characters in s.\n    >>> unique_chars(\"mama\")\n\
    \    3\n    >>> unique_chars(\"abracadabra\")\n    5\n*/\nlong unique_chars(string\
    \ s) \n{\n    string res;\n    foreach(c; s)\n    {\n        if(c !in res)\n \
    \           res ~= c;\n    }\n    return res.length;\n}\n/*\nGiven a list of numbers\
    \ and a number k, return whether any two numbers from the list add up to k.\n\
    For example, given [10, 15, 3, 7] and k of 17, return true since 10 + 7 is 17.\n\
    Bonus: Can you do this in one pass?\n*/", "    in {\n        assert(forall(l,\
    \ x -> x > 0L));\n        assert(t > 0L);\n    } \n    out {\n        assert(forall(l,\
    \ x -> result <==> x < t));\n    }\n{\n    bool b = true;\n    foreach (i; 0 ..\
    \ l.length) {\n        if (l[i] >= t) {\n            b = false;\n            break;\n\
    \        }\n    }\n    return b;\n}\n/*\nReturn the position of the element in\
    \ the array a.\n    >>> find_pos(2L, [1L, 2L, 4L, 10L])\n    1\n    >>> find_pos(3L,\
    \ [1L, 2L, 4L, 10L])\n    -1\n    >>> find_pos(0L, [1L, 2L, 4L, 10L])\n    -1\n\
    */\nlong find_pos(long k, long[] a)\n    in {\n        assert(forall(a, x -> x\
    \ > 0L));\n        assert(k > 0L);\n    }\n    out {\n        assert((0 <= result\
    \ < a.length) <==> (k == a[result]));\n    }\n{\n    long pos = -1L;\n    foreach\
    \ (i; 0 .. a.length) {\n        if (a[i] == k) {\n            pos = i;\n     \
    \       break;\n        }\n    }\n    return pos;\n}\n/*\nCheck if the element\
    \ k appears in the array a.\n    >>> present(2L, [1L, 2L, 4L, 10L])\n    true\n\
    \    >>> present(3L, [1L, 2L, 4L, 10L])\n    false\n    >>> present(0L, [1L, 2L,\
    \ 4L, 10L])\n    false\n*/", "{\n    //for (long e in l)\n    foreach(long e;\
    \ l)\n    {\n        if (e >= t)\n            return false;\n    }\n    return\
    \ true;\n}", "{\n    foreach(x; l)\n    {\n        if(x>t)\n            return\
    \ false;\n    }\n    return true;\n}", "{\n    return all!(a => a < t)(l);\n}\n\
    \ \n/*\nReturn true if all numbers in the array l are below the threshold t.\n\
    \    \n    >>> below_threshold_all([1L, 2L, 4L, 10L], 100L)\n    true\n    >>>\
    \ below_threshold_all([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/", "in \n  assert(all!(a\
    \ => a >= 0L)(l));\n  assert(t >= 0L);\ndo\n  return all!(a => a < t)(l);", "{\n\
    \tforeach(num; l)\n\t{\n\t\tif(num > t)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\treturn true;\n}\n/*\nReturn the smallest number in the list l.\n    >>> min_list([1L,\
    \ 2L, 3L, 4L])\n    1L\n    >>> min_list([3L, 2L, 1L, 0L])\n    0L\n*/\nlong min_list(long[]\
    \ l) \n{\n\tauto m = l[0];\n\tforeach(num; l)\n\t{\n\t\tif(num < m)\n\t\t{\n\t\
    \t\tm = num;\n\t\t}\n\t}\n\treturn m;\n}\n/*\nReturn the average of the numbers\
    \ in l.\n    >>> avg_list([1L, 2L, 3L, 4L])\n    2.5\n    >>> avg_list([2L, 3L,\
    \ 5L, 7L])\n    4.0\n*/\ndouble avg_list(long[] l) \n{\n\tauto a = 0.0;\n\tforeach(num;\
    \ l)\n\t{\n\t\ta += num;\n\t}\n\treturn a / l.length;\n}\n/*\nGiven a list of\
    \ strings l, return a string like the following:\n    \"Here is a list of strings:\
    \ ['l[0]', 'l[1]', 'l[2]', ..., 'l[n]']\"\n    where l[0], l[1], l[2], ..., l[n]\
    \ are the strings in the list l.\n*/\nstring make_string(string[] l) \n{\n\tauto\
    \ s = \"Here is a list of strings: [\";\n\tforeach(str; l)\n\t{\n\t\ts ~= \"'\"\
    \ ~ str ~ \"'\";\n\t\tif(str != l[$-1])\n\t\t{\n\t\t\ts ~= \", \";\n\t\t}\n\t\
    }\n\ts ~= \"]\";\n\treturn s;\n}\n/*\nGiven a list of numbers l, return a string\
    \ like the following:\n    \"Here is a list of numbers: [l[0", "{\n\tbool ret;\n\
    \tint i;\n\tif (l == null)\n\t\treturn false;\n\tret = true;\n\tforeach (int n;\
    \ l) {\n\t\tif (n >= t) {\n\t\t\tret = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn\
    \ ret;\n}", "{\n    foreach(i; l)\n    {\n        if(i > t)\n            return\
    \ false;\n    }\n    return true;\n}", "{\n    long total = 0L;\n    foreach (x;\
    \ l) \n    {\n        total += x;\n    }\n    return total < t;\n}", "{\n    for\
    \ (int i = 0; i < l.length; i++) \n    {\n        if (l[i] >= t) \n        {\n\
    \            return false;\n        }\n    }\n    return true;\n}\n/*\nMaximum\
    \ of a list of numbers.\n    >>> max_list([1L, 2L, 10L, 20L])\n    20L\n    >>>\
    \ max_list([-1L, -2L, -10L, -20L])\n    -1L\n    >>> max_list([0L])\n    0L\n\
    */\nlong max_list(long[] l) \n{\n    // can't use max or min from std.math because\
    \ it requires a T : TotallOrd\n    if (l.length == 0) \n    {\n        throw new\
    \ Exception(\"max_list requires at least one item\");\n    }\n    long x = l[0];\n\
    \    for (int i = 1; i < l.length; i++) \n    {\n        if (l[i] > x) \n    \
    \    {\n            x = l[i];\n        }\n    }\n    return x;\n}\n/*\nReturn\
    \ the sum of a list of numbers.\n    >>> sum_list([1L, 2L, 10L, 20L])\n    33L\n\
    \    >>> sum_list([-1L, -2L, -10L, -20L])\n    -33L\n    >>> sum_list([0L])\n\
    \    0L\n*/\nlong sum_list(long[] l) \n{\n    long x = 0;\n    for (int i = 0;\
    \ i < l.length; i++) \n    {\n        x += l[i];\n    }\n    return x;\n}\n/*\n\
    \    Function to get the sum of the squares of numbers in a list\n        >>>\
    \ sum_squares([1L, 2L, 10L, 20L])\n        441L\n        >>> sum_squares([-1L,\
    \ -2L, -10L, -20L])\n        441L\n        >>> sum_squares([0L])\n        0L\n\
    \    */\nlong sum_squares(long[] l) \n{\n    long x =", "{\n    for (auto e :\
    \ l) \n    {\n        if (e >= t) \n        {\n            return false;\n   \
    \     }\n    }\n    return true;\n}", "{\n    foreach(index,e; l) \n    {\n  \
    \      if(e >= t) \n        {\n            return false;\n        }\n    }\n \
    \   return true;\n}", "{\n  foreach(i;l)\n  {\n      if(t < i) return false;\n\
    \  }\n  return true;\n}\n/*\nReturn true if all numbers in the array l are below\
    \ threshold t.\n    >>> below_threshold2([1L, 2L, 4L, 10L], 100L)\n    true\n\
    \    >>> below_threshold2([1L, 20L, 4L, 10L], 5L)\n    false\n*/", "{\n\tfor (long\
    \ element : l)\n\t{\n\t\tif (element > t) return false;\n\t}\n\treturn true;\n\
    }", "{\n    // PUT YOUR CODE HERE\n    return false;\n}", "{\n    foreach(i; l)\
    \ \n    {\n        if(i >= t) \n        {\n            return false;\n       \
    \ }\n    }\n    return true;\n}", "{\n\tforeach(i; l)\n\t{\n\t\tif(i >= t)\n\t\
    \t\treturn false;\n\t}\n\treturn true;\n}", "{\n  long[] elements = l;\n  long\
    \ threshold = t;\n  foreach(long i; elements) \n  {\n    if(i > threshold)\n \
    \     return false;\n  }\n  return true;\n}\n/*\nCreate a list with the first\
    \ n powers of a number x.\n    >>> powers(2L, 3L)\n    [1L, 2L, 4L]\n    >>> powers(0L,\
    \ 10L)\n    [1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L]\n    >>> powers(1L, 10L)\n\
    \    [1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]\n    >>> powers(2L, 0L)\n    []\n\
    */\nlong[] powers(long x, long n) \n{\n  long base = x;\n  long count = n;\n \
    \ long[] result = [];\n  while(count > 0) \n  {\n    result ~= base;\n    base\
    \ *= x;\n    count--;\n  }\n  return result;\n}\n/*\nCount the elements in the\
    \ list x.\n    >>> length([1L, 2L, 3L])\n    3\n    >>> length([])\n    0\n*/\n\
    long length(long[] x) \n{\n  long[] elements = x;\n  return x.length;\n}\n/*\n\
    Return the maximum of x and y.\n    >>> max(1L, 2L)\n    2L\n    >>> max(2L, 1L)\n\
    \    2L\n    >>> max(1L, 1L)\n    1L\n*/\nlong max(long x, long y) \n{\n  long\
    \ a = x;\n  long b = y;\n  if(a >= b)\n    return a;\n  else\n    return b;\n\
    }\n/*\nReturn the minimum of x and y.\n    >>> min(1L, 2L)\n    1L\n    >>> min(2L,\
    \ 1L)\n    1L\n    >>> min(1L, 1L)\n    1L\n*/\nlong min(long x", "{\n    foreach(x;\
    \ l)\n    {\n        if(x > t)\n            return false;\n    }\n    return true;\n\
    }", "{\n    foreach(l; i; v)\n    {\n        if(v > t) return false;\n    }\n\
    \    return true;\n}", "{\n    foreach(e; l) \n    {\n        if(e > t) \n   \
    \     {\n            return false;\n        }\n    }\n    return true;\n}", "{\n\
    \    foreach(num; l)\n    {\n        if(num >= t)\n        {\n            return\
    \ false;\n        }\n    }\n    return true;\n}", "    in(l.length == 5);\n{\n\
    \    long t1, t2, t3, t4, t5;\n    t1 = l[0];\n    t2 = l[1];\n    t3 = l[2];\n\
    \    t4 = l[3];\n    t5 = l[4];\n    return t1 < t && t2 < t && t3 < t && t4 <\
    \ t && t5 < t;\n}\n/*\nReturn true if the array l contains a prime.\n    >>> has_prime([1L,\
    \ 3L, 5L, 7L])\n    true\n    >>> has_prime([1L, 2L, 4L, 6L])\n    false\n   \
    \ >>> has_prime([11L, 12L, 14L, 16L])\n    true\n    >>> has_prime([11L, 22L,\
    \ 34L, 46L])\n    false\n*/", "{\n    bool result = true;\n    foreach(long i;\
    \ l) \n    {\n        if( i >= t ) \n        {\n            result = false;\n\
    \            break;\n        }\n    }\n    return result;\n}", "{\n    foreach(item;\
    \ l)\n    {\n        if(item >= t)\n            return false;\n    }\n    return\
    \ true;\n}", "{\n    int i;\n    for (i = 0; i < l.length; i++) \n    {\n    \
    \    if (l[i] >= t) \n        {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n/*\n    Return a new list consisting of the elements of\
    \ l in sorted order.\n    >>> sort_list([3L, 2L, 1L])\n    [1L, 2L, 3L]\n    >>>\
    \ sort_list([4L, 2L, 1L, 5L])\n    [1L, 2L, 4L, 5L]\n    >>> sort_list([])\n \
    \   []\n    \n*/\nlong[] sort_list(long[] l) \n{\n    long[] r = new long[l.length];\n\
    \    int i;\n    for (i = 0; i < l.length; i++) \n    {\n        r[i] = l[i];\n\
    \    }\n    int a;\n    int b;\n    for (a = 0; a < r.length; a++) \n    {\n \
    \       for (b = a; b < r.length; b++) \n        {\n            if (r[a] > r[b])\
    \ \n            {\n                int temp = r[a];\n                r[a] = r[b];\n\
    \                r[b] = temp;\n            }\n        }\n    }\n    return r;\n\
    }\n/*\nReturn a pair containing two arrays, xs and ys, where xs and ys are the\
    \ arguments of l in sorted order.\n    >>> sort_pairs([(4L, 2L), (1L, 3L), (2L,\
    \ 1L)])\n    ([1L, 2L, 4L], [3L, 1L, 2L])\n    >>> sort_pairs([(4L, 2L), (1L,\
    \ 3L), (2L, 1L), (0L, 0L)])\n    ([0L, 1L, 2L, 4L], [0L, 3L, 1L, 2L])\n    >>>\
    \ sort_pairs([])\n    ([], [])\n    \n*/\ntuple!(long[], long[]) sort", "{\n \
    \   foreach(num; l)\n    {\n        if(num > t)\n        {\n            return\
    \ false;\n        }\n    }\n    return true;\n}", "{\n    foreach(el; l) \n  \
    \  {\n        if(el > t) \n        {\n            return false;\n        }\n \
    \   }\n    return true;\n}", "{\n    bool cond = true;\n    foreach(int i, long\
    \ x; l) \n    {\n        if (x >= t) \n        {\n            cond = false;\n\
    \            break;\n        }\n    }\n    return cond;\n}", "{\n    for (long\
    \ ll : l) \n    {\n        if (ll > t) \n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}", "{\n    return all(i -> i < t, l);\n}",
  "{\n    foreach(i; l)\n    {\n        if(i >= t)\n            return false;\n  \
    \  }\n    return true;\n}\n// const(long[])\n/*\nCalculate the average of all\
    \ numbers in the array l.\n    >>> average([1L, 2L, 4L, 10L])\n    4L\n    >>>\
    \ average([1L, 1L, 1L, 1L])\n    1L\n    \n*/\nlong average(long[] l) \n{\n  \
    \  long total = 0;\n    foreach(i; l)\n    {\n        total += i;\n    }\n   \
    \ return total / l.length;\n}\n/*\nReturn the first two digits of the given number.\n\
    \    >>> first_two_digits(12345L)\n    12L\n    >>> first_two_digits(100L)\n \
    \   1L\n    \n*/\nlong first_two_digits(long n) \n{\n    if(n >= 100)\n      \
    \  return n/100;\n    return n;\n}\n// const(long[])\n/*\nCalculate the final\
    \ price given the price, tax and discount.\n    >>> final_price(123L, 100L, 10L)\n\
    \    111L\n    >>> final_price(55L, 20L, 30L)\n    39L\n    \n*/\nlong final_price(long\
    \ price, long tax, long discount) \n{\n    return (price * (100L - discount))\
    \ / 100L + tax;\n}\n// const(long[])\n/*\nReturn the last digit of the given number.\n\
    \    >>> last_digit(12345L)\n    5L\n    >>> last_digit(100L)\n    0L\n    \n\
    */\nlong last_digit(long n) \n{\n    return n%10;\n}\n// const(long[])\n/*\nCalculate\
    \ the maximum of all numbers in the array l.\n    >>> maximum([1L, 2L, 4L, 10L])\n\
    \    10L\n    >>> maximum([1L, 1L, 1L, 1L])\n    1L\n    \n*/\nlong maximum(long[]\
    \ l) \n{\n    long max = l[0", "{\n    foreach(x; l) if (x >= t) return false;\n\
    \    return true;\n}\n/*\nReturn a list of digits of the given number n.\n   \
    \ >>> digits(1234)\n    [1, 2, 3, 4]\n    \n*/\nimmutable(int)[] digits(int n)\
    \ \n{\n    immutable(int)[] result;\n    for ( ; n; n /= 10) result ~= n % 10;\n\
    \    return result.reverse;\n}\n/*\nGiven a list of entries, produce a list of\
    \ tuples grouping entries together\nif their first element is the same.\n    >>>\
    \ group_by_first([[1, 2], [2, 3], [1, 7], [2, 4]])\n    [[1, [2, 7]], [2, [3,\
    \ 4]]]\n    >>> group_by_first([[1, 2], [2, 3], [2, 1], [2, 4]])\n    [[1, [2]],\
    \ [2, [3, 1, 4]]]\n    \n*/\nauto group_by_first(T)(T[] list)\n{\n    return list.groupBy!((a)\
    \ => a[0]);\n}\n/*\n    Return an array with the same length as l. Each element\
    \ of the result is\n    the product of all elements of l except for the element\
    \ at that position.\n    >>> product_except_self([1, 2, 3, 4])\n    [24, 12, 8,\
    \ 6]\n    >>> product_except_self([1, 2, 0, 4])\n    [0, 0, 8, 0]\n    \n*/\n\
    long[] product_except_self(long[] l) \n{\n    immutable(long) product = l.reduce!(\"\
    a * b\");\n    return l.map!((x) => product / x);\n}\n/*\n    Return the second\
    \ largest number in a.\n    >>> second_largest([1, 2, 3, 4])\n    3\n    >>> second_largest([1,\
    \ 2, 3, 1])\n    2\n    >>> second_largest([3, 3, 3, 1])\n    3\n    \n*/\nauto\
    \ second_largest(alias pred = \"a > b", "{\n    return all((x) => x < t, l);\n\
    }", "    in (l.length > 0) \n    out (result)\n{\n    long s = 0L;\n    foreach\
    \ (i; 0 .. l.length) {\n        s += l[i];\n    }\n    return s < t;\n}\n/*\n\
    Return true if the last element of the array is equal to the first.\n    \n  \
    \  >>> first_last([1L, 2L, 3L, 4L, 5L])\n    false\n    >>> first_last([1L, 2L,\
    \ 3L, 4L, 1L])\n    true\n*/", "{\n  return l.all!(x => x < t);\n}\n/*\nReturn\
    \ the first element of the given array l.\n    >>> first([1L, 2L, 3L])\n    1L\n\
    \    >>> first([])\n    0L\n*/\nlong first(long[] l) \n{\n  return l.length >\
    \ 0 ? l[0] : 0L;\n}\n/*\nGiven a pair of indices (i, j), return true iff i < j.\n\
    */", "{\n    bool b = true;\n    foreach(lval; l)\n    {\n        b = b && lval\
    \ < t;\n    }\n    return b;\n}", "{\n    bool result = true;\n    foreach(long\
    \ i; l)\n    {\n        if(i > t)\n        {\n            result = false;\n  \
    \          break;\n        }\n    }\n    return result;\n}\n/*\nReturn an array\
    \ holding the elements of l in reverse order.\n    >>> reverse([1L, 2L, 3L])\n\
    \    [3L, 2L, 1L]\n*/\nlong[] reverse(long[] l) \n{\n    int size = l.length;\n\
    \    long[] result = new long[size];\n    for(int i = 0; i < size; i++)\n    {\n\
    \        result[i] = l[size - i - 1];\n    }\n    return result;\n}\n/*\nReturn\
    \ the sum of the elements of l or 0 if the array is empty.\n    >>> sum([3L, 2L,\
    \ 1L])\n    6L\n    >>> sum([])\n    0L\n    >>> sum([1L, 2L, 3L, 4L, 5L])\n \
    \   15L\n*/\nlong sum(long[] l) \n{\n    long result = 0;\n    foreach(long i;\
    \ l)\n    {\n        result += i;\n    }\n    return result;\n}\n/*\nReturn true\
    \ if all numbers in the array l are above threshold t.\n    >>> above_threshold([1L,\
    \ 2L, 4L, 10L], 0L)\n    true\n    >>> above_threshold([1L, 20L, 4L, 10L], 15L)\n\
    \    false\n    >>> above_threshold([1L, 20L, 4L, 10L], 5L)\n    true\n*/", "{\n\
    \    bool b = true;\n    foreach(i; l) b = b && i < t;\n    return b;\n}\n/*\n\
    Return true if all numbers in the array l are below threshold t.\n\t>>> below_threshold([1.0,\
    \ 2.0, 4.0, 10.0], 100.0)\n\ttrue\n\t>>> below_threshold([1.0, 20.0, 4.0, 10.0],\
    \ 5.0)\n\tfalse\n\t\n*/", "    pure\n{\n    for (size_t i = 0; i < l.length; i++)\n\
    \    {\n        if (l[i] > t) return false;\n    }\n    return true;\n}", "in\
    \ {\n    foreach(immutable v; l)\n        assert(v >= 0);\n}\nout(result) {\n\
    \    if (result)\n        foreach(immutable v; l)\n            assert(v < t);\n\
    }\nbody {\n    foreach(immutable v; l) {\n        if (v >= t) return false;\n\
    \    }\n    return true;\n}", "{\n    int size = l.length;\n    for (int i = 0;\
    \ i < size; i++)\n    {\n        if (l[i] >= t)\n        {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n/*\nReturn the number of numbers\
    \ in the list that are between low and high, inclusive.\n    >>> count_between([1L,\
    \ 2L, 3L, 4L, 5L], 1L, 3L)\n    3\n    >>> count_between([3L, 5L, 7L, 9L], 1L,\
    \ 8L)\n    2\n*/", "{\n    bool result = true;\n    foreach(l) \n    {\n     \
    \   if(l > t) \n        {\n            result = false;\n            break;\n \
    \       }\n    }\n    return result;\n}", "{\n    bool all_below = true;\n   \
    \ foreach(n; l)\n    {\n        if(n >= t)\n        {\n            all_below =\
    \ false;\n            break;\n        }\n    }\n    return all_below;\n}\n/*\n\
    Return the sum of all even numbers below the threshold t.\n    >>> sum_even_below(10L)\n\
    \    20L\n    >>> sum_even_below(4L)\n    6L\n    >>> sum_even_below(0L)\n   \
    \ 0L\n    >>> sum_even_below(5L)\n    4L\n    \n*/\nlong sum_even_below(long t)\
    \ \n{\n    long sum = 0;\n    foreach(i; 0 .. t)\n    {\n        if(i % 2 == 0)\n\
    \        {\n            sum += i;\n        }\n    }\n    return sum;\n}\n/*\n\
    Return true if there is a number in the list l that is greater than the threshold\
    \ t.\n    >>> has_number_greater_than([1L, 2L, 4L, 10L], 100L)\n    false\n  \
    \  >>> has_number_greater_than([1L, 20L, 4L, 10L], 5L)\n    true\n    \n*/", "{\n\
    \    foreach(long i; l) {\n\tif (i >= t) return false;\n    }\n    return true;\n\
    }\n/*\nReturn true if all numbers in the array l are above threshold t.\n    >>>\
    \ above_threshold([1L, 2L, 4L, 10L], 5L)\n    true\n    >>> above_threshold([1L,\
    \ 20L, 4L, 10L], 10L)\n    false\n*/", "{\n  foreach(item; l)\n  {\n    if(item\
    \ >= t)\n      return false;\n  }\n  return true;\n}", "{\n    bool temp = true;\n\
    \    foreach(i; l) \n    {\n        if(i > t) \n        {\n            temp =\
    \ false;\n        }\n    }\n    return temp;\n}\n/*\nReturn the sum of the numbers\
    \ in a.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([1L, 0L, 0L])\n    1L\n\
    */\nlong sum(long[] a) \n{\n    long temp = 0;\n    foreach(i; a) \n    {\n  \
    \      temp += i;\n    }\n    return temp;\n}\n/*\nReturn the maximum of the elements\
    \ in a.\n    >>> max([]L)\n    0L\n    >>> max([1L, 2L, 4L, 10L])\n    10L\n*/\n\
    long max(long[] a) \n{\n    return reduce!max(a);\n}\n/*\nReturn the minimum of\
    \ the elements in a.\n    >>> min([]L)\n    0L\n    >>> min([1L, 2L, 4L, 10L])\n\
    \    1L\n*/\nlong min(long[] a) \n{\n    return reduce!min(a);\n}\n/*\nImplement\
    \ the merge operation on sorted arrays.\n    >>> merge([1L, 3L, 4L], [2L, 4L,\
    \ 6L])\n    [1L, 2L, 3L, 4L, 4L, 6L]\n    >>> merge([1L, 2L, 3L], [4L, 5L, 6L])\n\
    \    [1L, 2L, 3L, 4L, 5L, 6L]\n    >>> merge([], [4L, 5L, 6L])\n    [4L, 5L, 6L]\n\
    \    >>> merge([1L, 2L, 3L], [])\n    [1L, 2L, 3L]\n*/\nlong[] merge(long[] a,\
    \ long[] b) \n{\n    long[] temp = new long[];\n    while(a.length != 0 && b.length\
    \ != 0) \n    {\n        if(a[0] <= b[0]) \n        {\n", "in {\n    assert(l.length\
    \ >= 0);\n}\nout(result) {\n    assert(result ==> (l.length == 0 || l[0] < t));\n\
    }\n{\n    if (l.length == 0) {\n        return true;\n    } else {\n        return\
    \ l[0] < t && below_threshold(l[1..$], t);\n    }\n}", "{\n    if (empty(l)) return\
    \ true;\n    else if (l[0] < t) return below_threshold(l[1..$], t);\n    else\
    \ return false;\n}\n/*\nReturn true if all numbers in the array l are below threshold\
    \ t.\n    >>> sum_below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>>\
    \ sum_below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/", "{\n    foreach(var\
    \ x; l) \n    {\n        if(x >= t) \n        {\n            return false;\n \
    \       }\n    }\n    return true;\n}\n/*\nGiven a 2d square array of Booleans,\
    \ return the number of connected subarrays of True.\nA connected subarray is any\
    \ collection of horizontally or vertically neighboring elements in the array,\
    \ \ni.e. any subarray that is contained in a connected component of the array.\n\
    \    >>> above_threshold([[true, false], [false, true]])\n    2\n    >>> above_threshold([[true,\
    \ false], [true, true]])\n    1\n    >>> above_threshold([[false, false], [false,\
    \ false]])\n    0\n*/\nlong above_threshold(bool[][] x) \n{\n    long height =\
    \ x.length;\n    long width = x[0].length;\n    long[][] nums = new long[height][width];\n\
    \    long c = 0;\n    for(long y = 0; y < height; y++) \n    {\n        for(long\
    \ x = 0; x < width; x++) \n        {\n            if(x[y][x]) \n            {\n\
    \                nums[y][x] = -1;\n            }\n        }\n    }\n    for(long\
    \ y = 0; y < height; y++) \n    {\n        for(long x = 0; x < width; x++) \n\
    \        {\n            if(nums[y][x] == -1) \n            {\n               \
    \ ++c;\n                nums[y][x] = c;\n                auto q = new std.typecons.Queue!(Tuple!(long,\
    \ long));\n                q.push(Tuple!(long, long)(y, x));\n               \
    \ while(!q.empty) \n                {\n                    auto t = q.front;\n\
    \                    q.pop;\n                    long y1 = t[0];\n           \
    \         long x1 = t[1];\n                    long[][] adj = [[y1-1, x1], [y1+1,\
    \ x1], [y1, x1-1], [y1, x1", "{\n    foreach(q; l) \n    {\n        if(q > t)\
    \ \n        {\n            return false;\n        }\n    }\n    return true;\n\
    }\n/*\nReturn the sum of squares of elements in the list l.\n    >>> sum_of_squares([1L,\
    \ 2L, 3L])\n    14L\n    >>> sum_of_squares([1L, 4L, 6L])\n    55L\n*/\nlong sum_of_squares(long[]\
    \ l) \n{\n    long res = 0L;\n    foreach(q; l) \n    {\n        res += q * q;\n\
    \    }\n    return res;\n}\n/*\nGiven a list of tuples, where each tuple is represented\
    \ as a pair of elements, sum all numbers in all tuples.\n    >>> sum_tuple([(1L,\
    \ 2L), (3L, 4L)])\n    10L\n    >>> sum_tuple([(10L, 20L), (30L, 40L)])\n    100L\n\
    */\nlong sum_tuple(Tuple!(long, long)[] t) \n{\n    long res = 0L;\n    foreach(q;\
    \ t) \n    {\n        res += q[0] + q[1];\n    }\n    return res;\n}\n/*\nGiven\
    \ a function f, return a function that applies the function f twice.\n    >>>\
    \ double_function((long x) => x * x, 2L)\n    16L\n    >>> double_function((long\
    \ x) => x * x, 4L)\n    256L\n*/\nlong double_function(long delegate(long) f,\
    \ long x) \n{\n    return f(f(x));\n}\n/*\nGiven a list of tuples, where each\
    \ tuple is represented as a pair of elements, return the list of second elements.\n\
    \    >>> get_second([(1L, 2L), (3L, 4L)])\n    [2L, 4L]\n    >>> get_second([(1L,\
    \ 200L), (3L, 400L)])\n    [200L, 400L]\n*/\nlong[] get_second(Tuple!(long,",
  "{\n    foreach(i; l)\n    {\n        if(i > t)\n            return false;\n   \
    \ }\n    return true;\n}\n/*\nReturn true if all numbers in the array l are below\
    \ threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n \
    \   >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n*/", "{\n    foreach(n;\
    \ l)\n    {\n        if(n > t)\n        {\n            return false;\n       \
    \ }\n    }\n    return true;\n}", "{\n    foreach(index, item; l)\n    {\n   \
    \     if(item >= t)\n            return false;\n    }\n    return true;\n}\n/*\n\
    Given a dictionary with keys 1 to 100 and values 0, compute and return the sum\
    \ of values for keys 50 to 100.\n    >>> sum_values({k: 0 for k in range(1, 101)})\n\
    \    0\n    >>> v = {k: 1 for k in range(1, 101)}\n    >>> sum_values(v)\n   \
    \ 50\n    \n*/\nlong sum_values(int[long] v) \n{\n    long result = 0;\n    foreach(index,\
    \ item; v)\n    {\n        if(index >= 50)\n            result += item;\n    }\n\
    \    return result;\n}\n/*\nReturn true if all values in the dictionary l are\
    \ equal.\n    >>> all_values_equal({'a': 1L, 'b': 1L, 'c': 1L})\n    true\n  \
    \  >>> all_values_equal({'a': 1L, 'b': 1L, 'c': 2L})\n    false\n    \n*/", "{\n\
    \    foreach(i;l)\n    {\n        if(i>t) return false;\n    }\n    return true;\n\
    }", "{\n    foreach(i; l)\n    {\n        if(i >= t)\n            return false;\n\
    \    }\n    return true;\n}\n/*\nReturn a list of size s where the i-th element\
    \ is i.\n    >>> make_range(3)\n    [0, 1, 2]\n    >>> make_range(0)\n    []\n\
    \    >>> make_range(2)\n    [0, 1]\n*/\nlong[] make_range(size_t s) \n{\n    long[]\
    \ l;\n    foreach(i; 0..s)\n    {\n        l ~= i;\n    }\n    return l;\n}\n\
    /*\nReturn the number of positive numbers in the array l.\n    >>> positive_count([1L,\
    \ -2L, 4L, -10L])\n    2\n    >>> positive_count([])\n    0\n    >>> positive_count([-1L,\
    \ -2L, -4L, -10L])\n    0\n*/\nsize_t positive_count(long[] l) \n{\n    size_t\
    \ c = 0;\n    foreach(i; l)\n    {\n        if(i > 0)\n            c++;\n    }\n\
    \    return c;\n}\n/*\nAssign the first `n` elements of the array `l` to `b`.\n\
    \    >>> l = make_range(10L)\n    >>> b = []\n    >>> assign_first(b, l, 3L)\n\
    \    >>> b\n    [0, 1, 2]\n    >>> assign_first(b, l, 12L)\n    >>> b\n    [0,\
    \ 1, 2, 0, 1, 2, 3, 4, 5, 6, 7, 8]\n*/", "{\n    foreach(idx, val; l)\n    {\n\
    \        if(val >= t) return false;\n    }\n    return true;\n}", "{\n    return\
    \ std.all!(a => a < t)(l);\n}\n/*\nReturn a list of prime numbers below the given\
    \ threshold.", "{\n    return all(map!((x) => x < t)(l));\n}", "{\n\tforeach(x;\
    \ l)\n\t{\n\t\tif(x >= t)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\n/*\nReturn\
    \ the n-th element of a list l.\n    >>> nth(1, [1,2,3])\n    2\n    >>> nth(2,\
    \ ['a', 'b', 'c'])\n    'c'\n    >>> nth(3, [true, false, false])\n    false\n\
    */\nT nth(size_t n, T)(T[] l) \n{\n\treturn l[n];\n}\n/*\nReturn all but the n-th\
    \ element of a list l.\n    >>> all_but_nth(1, [1,2,3])\n    [1, 3]\n    >>> all_but_nth(2,\
    \ ['a', 'b', 'c'])\n    ['a', 'b']\n    >>> all_but_nth(3, [true, false, false])\n\
    \    [true, false]\n*/\nT[] all_but_nth(size_t n, T)(T[] l) \n{\n\tT[] result;\n\
    \tforeach(i, e; l)\n\t{\n\t\tif(i != n)\n\t\t\tresult ~= e;\n\t}\n\treturn result;\n\
    }\n/*\nReturn the first element of a list l.\n    >>> first([1,2,3])\n    1\n\
    \    >>> first(['a', 'b', 'c'])\n    'a'\n    >>> first([true, false, false])\n\
    \    true\n*/\nT first(T)(T[] l) \n{\n\treturn l[0];\n}\n/*\nReturn all but the\
    \ first element of a list l.\n    >>> rest([1,2,3])\n    [2, 3]\n    >>> rest(['a',\
    \ 'b', 'c'])\n    ['b', 'c']\n    >>> rest([true, false, false])\n    [false,\
    \ false]\n*/\nT[] rest(T)(T[] l) \n{\n\tT[] result;\n\tforeach(i, e; l)\n\t{\n\
    \t\tif", "{\n    foreach(long item; l) {\n        if(item >= t) {\n          \
    \  return false;\n        }\n    }\n    return true;\n}\n/*\nReturn the index\
    \ of the first element in sequence l that is equal to value v.\n    >>> index_of([1L,\
    \ 2L, 4L, 10L], 10L)\n    3\n    >>> index_of([1L, 2L, 4L, 10L], -1L)\n    -1\n\
    \    \n*/\nlong index_of(long[] l, long v) \n{\n    long i = 0;\n    foreach(long\
    \ item; l) {\n        if(item == v) {\n            return i;\n        }\n    \
    \    i++;\n    }\n    return -1;\n}\n/*\nGiven a list of numbers, return the cumulative\
    \ sum of the elements.\n    >>> cumulative_sum([1L, 2L, 4L, 10L])\n    [1L, 3L,\
    \ 7L, 17L]\n    \n*/\nlong[] cumulative_sum(long[] l) \n{\n    long[] result =\
    \ new long[l.length];\n    long sum = 0;\n    long i = 0;\n    foreach(long item;\
    \ l) {\n        sum += item;\n        result[i] = sum;\n        i++;\n    }\n\
    \    return result;\n}\n/*\nGiven a list of numbers, return the cumulative product\
    \ of the elements.\n    >>> cumulative_product([1L, 2L, 4L, 10L])\n    [1L, 2L,\
    \ 8L, 80L]\n    \n*/\nlong[] cumulative_product(long[] l) \n{\n    long[] result\
    \ = new long[l.length];\n    long prod = 1;\n    long i = 0;\n    foreach(long\
    \ item; l) {\n        prod *= item;\n        result[i] = prod;\n        i++;\n\
    \    }\n    return result;\n}\n/*\nReturn the unique elements of a list.\n   \
    \ >>> unique([1L, 2L, 3L, 1L, 2L, 5L])\n    [1L, 2L, 3L, 5L]\n    \n*/\nlong[]\
    \ unique", "{\n    return all!(l, l => l < t);\n}\n/*\nReturn true if any number\
    \ in the array l is below threshold t.\n    >>> some_below_threshold([1L, 2L,\
    \ 4L, 10L], 100L)\n    true\n    >>> some_below_threshold([1L, 20L, 4L, 10L],\
    \ 5L)\n    true\n    >>> some_below_threshold([11L, 20L, 4L, 100L], 5L)\n    false\n\
    \    \n*/", "{\n    foreach(i; l) \n    {\n        if(i > t) \n        {\n   \
    \         return false;\n        }\n    }\n    return true;\n}", "{\n    foreach(v;\
    \ l) \n    {\n        if(v >= t)\n            return false;\n    }\n    return\
    \ true;\n}\n/*\nReturn true if all numbers in the array l are below any of the\
    \ threshold given in t.\n    >>> below_threshold_2([1L, 2L, 4L, 10L], [100L, 10L,\
    \ 40L, 1000L])\n    true\n    >>> below_threshold_2([1L, 20L, 4L, 10L], [5L, 10L,\
    \ 40L, 100L])\n    false\n    >>> below_threshold_2([1L, 20L, 40L, 100L], [5L,\
    \ 10L, 40L, 100L])\n    false\n    \n*/", "  pure nothrow @safe\n{\n  bool bl\
    \ = true;\n  foreach(el; l)\n  {\n    if(el>t)\n    {\n      bl = false;\n   \
    \   break;\n    }\n  }\n  return bl;\n}", "{\n\tbool is_below_threshold = true;\n\
    \tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] >= t)\n\t\t{\n\t\t\tis_below_threshold\
    \ = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn is_below_threshold;\n}", "{\n \
    \   foreach(x; l) {\n        if(x >= t) {\n            return false;\n       \
    \ }\n    }\n    return true;\n}\n/*\nReturn a new array containing just the values\
    \ at the even index of l.\n    >>> even_indexes([1L, 3L, 4L, 7L, 8L])\n    [1L,\
    \ 4L, 8L]\n    >>> even_indexes([1L, 3L, 4L, 6L, 8L])\n    [1L, 4L, 8L]\n    >>>\
    \ even_indexes([1L, 3L, 4L, 5L, 8L])\n    [1L, 4L, 8L]\n*/\nlong[] even_indexes(long[]\
    \ l) \n{\n    long[] newArray;\n    for(int i = 0; i < l.length; i++) {\n    \
    \    if(i % 2 == 0) {\n            newArray ~= l[i];\n        }\n    }\n    return\
    \ newArray;\n}\n/*\nReturn a new array containing the values of the original array\
    \ l with the duplicates removed.\n    >>> unique([1L, 2L, 2L, 4L, 5L, 5L, 7L])\n\
    \    [1L, 2L, 4L, 5L, 7L]\n    >>> unique([1L, 2L, 2L, 4L, 5L, 7L])\n    [1L,\
    \ 2L, 4L, 5L, 7L]\n    >>> unique([1L, 2L, 2L, 4L, 5L, 5L, 7L, 7L])\n    [1L,\
    \ 2L, 4L, 5L, 7L]\n    >>> unique([1L, 2L, 2L, 4L, 5L, 7L, 7L])\n    [1L, 2L,\
    \ 4L, 5L, 7L]\n*/\nlong[] unique(long[] l) \n{\n    long[] newArray;\n    foreach(x;\
    \ l) {\n        if(x !in newArray) {\n            newArray ~= x;\n        }\n\
    \    }\n    return newArray;\n}\n/*\nReturn the first and second index of the\
    \ smallest", "    in \n    {\n        foreach (i, _; l)\n            in i < t;\n\
    \    }\n    body\n    {\n        bool valid = true;\n        foreach (i; l)\n\
    \            valid = valid && i < t;\n        return valid;\n    }\n \n/*\nReturn\
    \ true if all numbers in the array l are above threshold t.\n    >>> above_threshold([100L,\
    \ 2000L, 4000L, 10000L], 100L)\n    true\n    >>> above_threshold([1L, 2L, 4L,\
    \ 10L], 5L)\n    false\n*/", "{\n    bool b = true;\n    foreach(x; l) {\n   \
    \     if(x >= t) {\n            b = false;\n            break;\n        }\n  \
    \  }\n    return b;\n}\n/*\nReturn the sum of all numbers in l.\n    >>> sum([1L,\
    \ 2L, 3L])\n    6L\n    >>> sum([1L, -2L, 3L])\n    2L\n    >>> sum([])\n    0L\n\
    */\nlong sum(long[] l) \n{\n    long s = 0;\n    foreach(x; l) {\n        s +=\
    \ x;\n    }\n    return s;\n}\n/*\nReturn the average of all numbers in l.\n \
    \   >>> avg([1L, 2L, 3L])\n    2L\n    >>> avg([1L, -2L, 3L])\n    1L\n    >>>\
    \ avg([])\n    0L\n*/\nlong avg(long[] l) \n{\n    return sum(l) / long(l.length);\n\
    }\n/*\nReturn the sum of all squares of numbers in l.\n    >>> squares_sum([1L,\
    \ 2L, 3L])\n    14L\n    >>> squares_sum([1L, -2L, 3L])\n    10L\n    >>> squares_sum([])\n\
    \    0L\n*/\nlong squares_sum(long[] l) \n{\n    long s = 0;\n    foreach(x; l)\
    \ {\n        s += x * x;\n    }\n    return s;\n}\n/*\nReturn the sum of all cubes\
    \ of numbers in l.\n    >>> cubes_sum([1L, 2L, 3L])\n    36L\n    >>> cubes_sum([1L,\
    \ -2L, 3L])\n    10L\n    >>> cubes_sum([])\n    0L\n*/\nlong cubes_sum(long[]\
    \ l) \n{\n    long s = 0;\n    foreach(x; l) {\n        s += x * x * x;\n    }\n\
    \    return s;\n}\n/*\nReturn the sum of all factorials of numbers in l.\n   \
    \ >>> factorials_sum([1L, 2L, 3", "{\n    bool result = true;\n    foreach(v;\
    \ l)\n    {\n        if( v > t)\n        {\n            result = false;\n    \
    \        break;\n        }\n    }\n    return result;\n}", "{\n    foreach(m;\
    \ l) \n    {\n        if(m > t) \n        {\n            return false;\n     \
    \   }\n    }\n    return true;\n}", "{\n    /*\n    l.foreach!(w => if (w > t)\
    \ return false; );\n    return true;\n    */\n    return l.all!(w => w < t)();\n\
    }\n/*\nAdd all the numbers in the array arr.\n    >>> add_numbers([2L, 3L, 4L])\n\
    \    9L\n*/\nlong add_numbers(long[] arr) \n{\n    long s = 0L;\n    foreach (e;\
    \ arr) \n    {\n        s += e;\n    }\n    return s;\n}\n/*\nAdd all the numbers\
    \ in the array arr.\n    >>> add_numbers([2L, 3L, 4L])\n    9L\n*/\nlong add_numbers_foreach(long[]\
    \ arr) \n{\n    long s = 0L;\n    foreach (e; arr) \n    {\n        s += e;\n\
    \    }\n    return s;\n}\n/*\nAdd all the numbers in the array arr.\n    >>> add_numbers([2L,\
    \ 3L, 4L])\n    9L\n*/\nlong add_numbers_map(long[] arr) \n{\n    long s = 0L;\n\
    \    foreach (e; arr) \n    {\n        s += e;\n    }\n    return s;\n}\n/*\n\
    Return true if the sum of the first n elements of array l is less than s.\n  \
    \  >>> less_than_sum([2L, 3L, 4L], 5L, 2L)\n    true\n    >>> less_than_sum([2L,\
    \ 3L, 4L], 1L, 2L)\n    false\n*/", "{\n    foreach(i; l)\n    {\n        if(i\
    \ >= t)\n            return false;\n    }\n    return true;\n}", "{\n    foreach(val;\
    \ l) \n    {\n        if(val >= t) \n        {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n// Return true if the number n is prime.",
  "{\n  for (int i = 0; i < l.length; i++)\n    if (l[i] >= t)\n      return false;\n\
    \  return true;\n}\n/*\nReturn true if all numbers in the array l are below threshold\
    \ t,\nand return false if one or more of the numbers in l are above threshold\
    \ t.\n    >>> all_same([1L, 1L, 1L, 1L])\n    true\n    >>> all_same([1L, 2L,\
    \ 1L, 1L])\n    false\n    >>> all_same([])\n    true\n*/", "{\n    foreach(i;l)\n\
    \    {\n        if(i>t) return false;\n    }\n    return true;\n}\n/*\nConcatenate\
    \ array xs with array ys and return the result.\n    >>> concat([1, 2, 3], [4,\
    \ 5, 6])\n    [1, 2, 3, 4, 5, 6]\n    >>> concat([1, 2, 3], [])\n    [1, 2, 3]\n\
    \    >>> concat([], [4, 5, 6])\n    [4, 5, 6]\n    >>> concat([], [])\n    []\n\
    \    \n*/\nlong[] concat(long[] xs, long[] ys)\n{\n    long[] result;\n    foreach(x;xs)\n\
    \    {\n        result ~= x;\n    }\n    foreach(y;ys)\n    {\n        result\
    \ ~= y;\n    }\n    return result;\n}\n/*\nReturn the length of the string s.\n\
    \    >>> str_length(\"Hello, World!\")\n    13\n    \n*/\nlong str_length(string\
    \ s)\n{\n    return s.length;\n}\n/*\nReturn the size of the file with name s.\n\
    \    >>> size_of_file(\"tests.cpp\")\n    # Unknown, but probably large...\n \
    \   \n*/\nlong size_of_file(string s)\n{\n    import std.file;\n    return s.size;\n\
    }\n/*\nFind the minimum number of elements in the array l.\n    >>> min_length([1,\
    \ 2, 3])\n    1\n    >>> min_length([])\n    0\n    >>> min_length([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10])\n    10\n    \n*/\nlong min_length(long[] l)\n{\n    long\
    \ result = 0;\n    foreach(x;l)\n    {\n        result += 1;\n    }\n    return\
    \ result;\n}\n/*\nFind the maximum element in the array l.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([-7, -5, -3, -1])", "{\n    bool ret = true;\n\
    \    foreach(i, a; l) {\n        if (a >= t) {\n            ret = false;\n   \
    \         break;\n        }\n    }\n    return ret;\n}", "{\n    foreach(long\
    \ i; l) \n    {\n        if(i > t) \n        {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n/*\nReturn true if a < b < c < d.\n    >>>\
    \ four_a_row([1L, 2L, 3L, 4L])\n    true\n    >>> four_a_row([1L, 2L, 4L, 3L])\n\
    \    false\n    >>> four_a_row([1L, 2L, 3L, 4L, 5L])\n    false\n*/", "{\n   \
    \ foreach(long x; l)\n    {\n        if(x > t)\n            return false;\n  \
    \  }\n    return true;\n}", "{\n    foreach(i; l) \n    {\n        if(i > t)\n\
    \            return false;\n    }\n    return true;\n}\n/*\n    >>> below_threshold(tuple(long)(),\
    \ 100L)\n    true\n    >>> below_threshold([1L, 2L, 3L], 100L)\n    true\n   \
    \ >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    >>> below_threshold([1L,\
    \ 2L, 4L, 10L], 1L)\n    false\n    >>> below_threshold([1L, 2L, 4L, 10L], 10L)\n\
    \    false\n*/\nunittest \n{\n    assert(below_threshold(tuple(long)(), 100L));\n\
    \    assert(below_threshold([1L, 2L, 3L], 100L));\n    assert(!below_threshold([1L,\
    \ 20L, 4L, 10L], 5L));\n    assert(!below_threshold([1L, 2L, 4L, 10L], 1L));\n\
    \    assert(!below_threshold([1L, 2L, 4L, 10L], 10L));\n}", "{\n    for (auto\
    \ i = 0L; i < l.length; i++)\n    {\n        if (l[i] >= t)\n        {\n     \
    \       return false;\n        }\n    }\n    return true;\n}\n/*\nReturn the sum\
    \ of all numbers in the array, as long as they are below threshold t.\n    >>>\
    \ sum_below_threshold([1L, 2L, 4L, 10L], 100L)\n    7L\n    >>> sum_below_threshold([1L,\
    \ 20L, 4L, 10L], 5L)\n    5L\n*/\nlong sum_below_threshold(long[] l, long t) \n\
    {\n    return l.filter!(x => x < t).sum;\n}\n/*\nReturn the sum of all numbers\
    \ in the array, as long as they are below threshold t.\n    >>> sum_below_threshold([1L,\
    \ 2L, 4L, 10L], 100L)\n    7L\n    >>> sum_below_threshold([1L, 20L, 4L, 10L],\
    \ 5L)\n    5L\n*/\nlong sum_below_threshold(long[] l, long t) \n{\n    long sum\
    \ = 0L;\n    for (auto i = 0L; i < l.length; i++)\n    {\n        if (l[i] < t)\n\
    \        {\n            sum += l[i];\n        }\n    }\n    return sum;\n}\n/*\n\
    Return the sum of all numbers in the array.\n    >>> sum_no_threshold([1L, 2L,\
    \ 4L, 10L])\n    17L\n*/\nlong sum_no_threshold(long[] l) \n{\n    return l.sum;\n\
    }\n/*\nReturn the sum of all numbers in the array.\n    >>> sum_no_threshold([1L,\
    \ 2L, 4L, 10L])\n    17L\n*/\nlong sum_no_threshold(long[] l) \n{\n    long sum\
    \ = 0L;\n    for (auto i = 0L; i < l.length; i++)\n    {\n        sum += l[i];\n\
    \    }\n    return sum;\n}\n/*\n", "{\n    long a;\n    foreach(a; l) \n    {\n\
    \        if(a >= t)\n            return false;\n    }\n    return true;\n}\n/*\n\
    Return a new array containing the numbers of l multiplied by m.\n    >>> mult_numbers([1L,\
    \ 2L, 4L, 10L], 5L)\n    [5L, 10L, 20L, 50L]\n*/\nlong[] mult_numbers(long[] l,\
    \ long m) \n{\n    auto ret = new long[];\n    long a;\n    foreach(a; l) \n \
    \   {\n        ret ~= a * m;\n    }\n    return ret;\n}\n/*\nReturn the average\
    \ of l's numbers.\n    >>> average([1L, 2L, 4L, 10L])\n    4L\n*/\nlong average(long[]\
    \ l) \n{\n    long sum = 0L;\n    long a;\n    foreach(a; l) \n    {\n       \
    \ sum += a;\n    }\n    return sum / long(l.length);\n}\n/*\nReturn the most common\
    \ element in l.\n    >>> most_common([1L, 2L, 4L, 4L, 10L])\n    4L\n*/\nlong\
    \ most_common(long[] l) \n{\n    long[] result;\n    long[] count;\n    long a;\n\
    \    foreach(a; l) \n    {\n        if(a in result) \n        {\n            count[a]++;\n\
    \        } \n        else \n        {\n            result ~= a;\n            count[a]\
    \ = 1;\n        }\n    }\n    long[] counts;\n    foreach(a; result) \n    {\n\
    \        counts ~= count[a];\n    }\n    return result[std.algorithm.maxElement(counts)];\n\
    }\n/*\nReturn the distance between the two given points.\n    >>> Point(1L, 1L).distance(Point(2L,\
    \ 2L))\n    1.4142135623730951\n*/\nstruct Point(long x, long y) \n{\n    long\
    \ distance(Point that) {\n        return sq", "{\n    foreach(x; l) \n    {\n\
    \        if(x > t) \n        {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n/*\nWrite a function below_threshold2 that takes a type\
    \ Array and a type\n    Long (or the type they are instantiated with) as template\
    \ parameters.\n    This function should behave like below_threshold, but using\
    \ the passed\n    in type instead of the type long.\n    >>> below_threshold2!(ulong,\
    \ Ulong)([1LU, 2LU, 4LU, 10LU], 100LU)\n    true\n    >>> below_threshold2!(uint,\
    \ Uint)([1U, 20U, 4U, 10U], 5U)\n    false\n    >>> below_threshold2!(real, Real)([1.0,\
    \ 2.0, 4.0, 10.0], 100.0)\n    true\n    >>> below_threshold2!(real, Real)([1.0,\
    \ 20.0, 4.0, 10.0], 5.0)\n    false\n*/\ntemplate below_threshold2(Array,Real)\
    \ \n{\n    bool below_threshold2(Array!Real l, Real t) \n    {\n        foreach(x;\
    \ l) \n        {\n            if(x > t) \n            {\n                return\
    \ false;\n            }\n        }\n        return true;\n    }\n}\n/*\nWrite\
    \ a function below_threshold3 that can be used with arrays that are\n    not known\
    \ at compile time, i.e. arrays passed to a function. It should\n    take a runtime\
    \ parameter of the array and a template parameter of the\n    type of the threshold.\n\
    \    The function should return true if all numbers in the array are below\n \
    \   the threshold.\n    >>> below_threshold3([1, 2, 4, 10], 100)\n    true\n \
    \   >>> below_threshold3([1, 20, 4, 10], 5)\n    false\n*/", "{\n    return all(map!(x\
    \ => x < t)(l));\n}\n//", "{\n    foreach(l, x => x<t) return true;\n    return\
    \ false;\n}", "{\n    /*\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n \
    \   true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    */\n\
    \    bool result = true;\n    foreach(long e; l)\n    {\n        result = result\
    \ && e < t;\n    }\n    return result;\n}", "  in (l.length > 0)\n  out (result\
    \ == (l[0 .. l.length].all!((a) => a < t)));", "{\n    if (l.length == 0)\n  \
    \  {\n        return true;\n    }\n    else\n    {\n        return l[0] < t &&\
    \ below_threshold(l[1..$], t);\n    }\n}", "{\n    foreach(elem; l)\n    {\n \
    \       if(elem >= t)\n            return false;\n    }\n    return true;\n}",
  "{\n    foreach(x; l) \n    {\n        if(x > t) \n        {\n            return\
    \ false;\n        }\n    }\n    return true;\n}", "{\n    return all(x => x <\
    \ t, l);\n}\n/*\nReturn true if any numbers in the array l are divisible by n.\n\
    \    >>> divisible_by_any([2L, 3L, 4L, 7L], 2L)\n    true\n    >>> divisible_by_any([2L,\
    \ 3L, 4L, 7L], 5L)\n    false\n*/", "{\n    foreach(i;l) if(t < i) return false;\n\
    \    return true;\n}", "{\n    bool rc = true;\n    for (int i = 0; i < l.length;\
    \ i++)\n    {\n        if (l[i] > t)\n        {\n            rc = false;\n   \
    \         break;\n        }\n    }\n    return rc;\n}\n/*\nReturn the nth fibonacci\
    \ number.\n    >>> fib(0)\n    0\n    >>> fib(1)\n    1\n    >>> fib(2)\n    1\n\
    \    >>> fib(3)\n    2\n    >>> fib(4)\n    3\n    >>> fib(5)\n    5\n    >>>\
    \ fib(6)\n    8\n    >>> fib(10)\n    55\n*/\nlong fib(long n)\n{\n    long num\
    \ = 0;\n    long num1 = 0;\n    long num2 = 1;\n    for (int i = 0; i < n; i++)\n\
    \    {\n        num = num1 + num2;\n        num1 = num2;\n        num2 = num;\n\
    \    }\n    return num;\n}\n/*\nCount and return the number of space separated\
    \ words in the given string.\n    >>> count_words(\"This is a test.\")\n    4\n\
    \    >>> count_words(\"What an easy task, right?\")\n    5\n*/\nlong count_words(string\
    \ s)\n{\n    long num = 0;\n    int index = 0;\n    while (index < s.length)\n\
    \    {\n        while (index < s.length && s[index] == ' ')\n        {\n     \
    \       index++;\n        }\n        if (index < s.length)\n        {\n      \
    \      num++;\n        }\n        while (index < s.length && s[index] != ' ')\n\
    \        {\n            index++;\n        }\n    }\n    return num;\n}\n/*\nReturn\
    \ the list of all prime numbers less than or equal to the given integer.\n   \
    \ >>> prime_numbers(10)\n    [2, 3, 5, 7]\n    >>> prime_numbers(7)\n    [2, 3,\
    \ 5, 7]\n*/\nlong[] prime_numbers(long n)\n{\n    long[] rc = new long[];\n  \
    \  for (int", "{\n    foreach(idx, v; l)\n    {\n        if(v > t)\n         \
    \   return false;\n    }\n    return true;\n}", "in {\n  foreach(a; l) \n    in\
    \ {\n      assert(a <= t);\n    }\n}\nbody {\n  foreach(a; l) \n    body {\n \
    \     if (a > t) return false;\n    }\n  return true;\n}", "{\n    foreach(i;l)\n\
    \    {\n        if(i>t)\n            return false;\n    }\n    return true;\n}",
  "{\n\tauto res = true;\n\tforeach(idx, el; l)\n\t{\n\t\tif(el > t)\n\t\t{\n\t\t\t\
    res = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn res;\n}", "{\n    bool below\
    \ = true;\n    foreach(e; l)\n    {\n        if(e >= t)\n        {\n         \
    \   below = false;\n            break;\n        }\n    }\n    return below;\n}",
  "{\n    foreach(int i, long v; l) \n    {\n        if(t < v) \n        {\n     \
    \       return false;\n        }\n    }\n    return true;\n}\n/*", "{\n    foreach(i;\
    \ l)\n    {\n        if(i >= t)\n            return false;\n    }\n    return\
    \ true;\n}\n/*\nReturn the map m with all numbers in it minus n.\n    >>> minus_all({},\
    \ 1L)\n    {}\n    >>> minus_all({1L:2L, 3L:4L}, 2L)\n    {1L: 0L, 3L: 2L}\n*/\n\
    Map!long minus_all(Map!long m, long n)\n{\n    Map!long result;\n    foreach(key,\
    \ value; m)\n    {\n        result[key] = value - n;\n    }\n    return result;\n\
    }\n/*\nThe result of the call to the function should be the same as f(a, b).\n\
    \    >>> print_map(2L, 3L)\n    {2L: 3L}\n    >>> print_map(4L, 5L)\n    {4L:\
    \ 5L}\n*/\nMap!long print_map(long a, long b)\n{\n    return [a:b];\n}\n/*\nPrint\
    \ the value of the argument.\n    >>> print_argument(1L)\n    1L\n    >>> print_argument(2L)\n\
    \    2L\n*/", "{\n    bool ret = true;\n    foreach( long i; l) {\n        if\
    \ (i > t) {\n            ret = false;\n            break;\n        }\n    }\n\
    \    return ret;\n}", "{\n    foreach(i; l) \n    {\n        if(i > t) \n    \
    \    {\n            return false;\n        }\n    }\n    return true;\n}\n//all\
    \ the coordinates of the point p are below the threshold t\n/*\nReturn true if\
    \ all the coordinates of the point p are below the threshold t.\n    >>> below_threshold((1L,\
    \ 1L), 100L)\n    true\n    >>> below_threshold((1L, 20L), 5L)\n    false\n  \
    \  >>> below_threshold((1L, 0L, 0L), 5L)\n    true\n*/", "{\n    foreach(x; l)\
    \ \n    {\n        if(t < x)\n            return false;\n    }\n    return true;\n\
    }\n/*\nReturn the indices of the first and last elements in the array l which\
    \ are equal to the target value t. If the target is not in the array, return [-1,\
    \ -1].\n    >>> find_first_last([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L)\n\
    \    [4L, 4L]\n    >>> find_first_last([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L],\
    \ 15L)\n    [-1L, -1L]\n    >>> find_first_last([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L,\
    \ 9L, 10L], 1L)\n    [0L, 0L]\n*/\nTuple!(long, long) find_first_last(long[] l,\
    \ long t) \n{\n    long first = -1L;\n    long last = -1L;\n    for(int i = 0;\
    \ i < l.length; i++) \n    {\n        if(l[i] == t) \n        {\n            if(first\
    \ == -1L)\n                first = i;\n            last = i;\n        }\n    }\n\
    \    return tuple(first, last);\n}\n/*\nReturn the sum of the elements in the\
    \ array a.\n    >>> sum_array([1L, 2L, 3L, 4L, 5L])\n    15L\n    >>> sum_array([])\n\
    \    0L\n*/\nlong sum_array(long[] a) \n{\n    long sum = 0L;\n    foreach(x;\
    \ a) \n    {\n        sum += x;\n    }\n    return sum;\n}\n/*\nReturn the sum\
    \ of the squares of the elements in the array a.\n    >>> sum_squares([1L, 2L,\
    \ 3L, 4L, 5L])\n    55L\n    >>> sum_squares([])\n   ", "{\n    foreach(x; l)\n\
    \    {\n        if(x > t)\n            return false;\n    }\n    return true;\n\
    }\n/*\nReturn true if all numbers in the vector v are below threshold t.\n   \
    \ >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L,\
    \ 20L, 4L, 10L], 5L)\n    false\n*/", "{\n    foreach(long n; l) {\n        if\
    \ (n >= t) return false;\n    }\n    return true;\n}", "{\n    for (auto x: l)\n\
    \    {\n        if (x >= t)\n        {\n            return false;\n        }\n\
    \    }\n    return true;\n}", "{\n    foreach(i;l)\n    {\n        if(i>t) return\
    \ false;\n    }\n    return true;\n}", "{\n    foreach(index, value; l)\n    {\n\
    \        if(value > t)\n            return false;\n    }\n    return true;\n}\n\
    /*\nReturn the position of the first occurrence of the value v in the list l,\
    \ \nor -1 if v is not in l.\n    >>> find_first_positive([0L, -2L, 4L, -3L], 0L)\n\
    \    0\n    >>> find_first_positive([0L, -2L, 4L, -3L], 4L)\n    2\n    >>> find_first_positive([0L,\
    \ -2L, 4L, -3L], -1L)\n    -1\n*/\nlong find_first_positive(long[] l, long v)\
    \ \n{\n    foreach(index, value; l)\n    {\n        if(value == v)\n         \
    \   return index;\n    }\n    return -1;\n}\n/*\nReturn the position of the first\
    \ negative value in the list l, \nor the length of l if there are no negative\
    \ values.\n    >>> find_first_negative([0L, -2L, 4L, -3L])\n    1\n    >>> find_first_negative([0L,\
    \ 2L, 4L, 3L])\n    4\n*/\nlong find_first_negative(long[] l) \n{\n    foreach(index,\
    \ value; l)\n    {\n        if(value < 0)\n            return index;\n    }\n\
    \    return l.length;\n}\n/*\nReturn true if the first number in the list l is\
    \ smaller than all the \nother numbers in the list, and false otherwise.\n   \
    \ >>> is_min([1L, 2L, 0L, 3L])\n    true\n    >>> is_min([1L, 1L, 0L, 3L])\n \
    \   false\n*/", "{\n    foreach(long i; l) {\n        if(i > t)\n            return\
    \ false;\n    }\n    return true;\n}\n/*\nReturn a new array, with all numbers\
    \ l greater than t removed.\n    >>> remove_above_threshold([1L, 2L, 4L, 10L],\
    \ 100L)\n    [1L, 2L, 4L, 10L]\n    >>> remove_above_threshold([1L, 20L, 4L, 10L],\
    \ 5L)\n    [1L, 4L, 10L]\n*/\nlong[] remove_above_threshold(long[] l, long t)\
    \ \n{\n    long[] ret = [];\n    foreach(long i; l) {\n        if(i <= t)\n  \
    \          ret ~= i;\n    }\n    return ret;\n}\n/*\nReturn the index of the first\
    \ element in l greater than t.\n    >>> find_above_threshold([1L, 2L, 4L, 10L],\
    \ 100L)\n    -1\n    >>> find_above_threshold([1L, 20L, 4L, 10L], 5L)\n    1\n\
    */", "{\n    foreach(i; l)\n    {\n        if(l[i] > t)\n        {\n         \
    \   return false;\n        }\n    }\n    return true;\n}", "    pure \n{\n   \
    \ return l.all!(x => x < t);\n}", "{\n    foreach(long n; l)\n        if(n >=\
    \ t)\n            return false;\n    return true;\n}\n/*\nFor each element l of\
    \ the list l, return a tuple (l[0], l[-1])\n    >>> first_last([[1, 2, 3], [4,\
    \ 5], [6]])\n    [[1, 3], [4, 5], [6, 6]]\n*/\nlong[][] first_last(long[][] l)\n\
    {\n    long[][] r;\n    foreach(long[] x; l)\n        r ~= [x[0], x[$-1]];\n \
    \   return r;\n}\n/*\nReturn the sum of the numbers in l, or 0 if the list is\
    \ empty.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([])\n    0\n*/\nlong sum(long[]\
    \ l)\n{\n    long s = 0;\n    foreach(long x; l)\n        s += x;\n    return\
    \ s;\n}\n/*\nReturn the product of all elements in l, or 1 if the list is empty.\n\
    \    >>> product([1, 2, 3])\n    6\n    >>> product([])\n    1\n*/\nlong product(long[]\
    \ l)\n{\n    long p = 1;\n    foreach(long x; l)\n        p *= x;\n    return\
    \ p;\n}\n/*\nReturn the largest number in l.\n    >>> largest([1, 3, 2])\n   \
    \ 3\n*/\nlong largest(long[] l)\n{\n    long m = l[0];\n    foreach(long x; l)\n\
    \        if(x > m)\n            m = x;\n    return m;\n}\n/*\nReturn the smallest\
    \ number in l.\n    >>> smallest([1, 3, 2])\n    1\n*/\nlong smallest(long[] l)\n\
    {\n    long m = l[0];\n    foreach(long x; l)\n        if(x < m)\n           \
    \ m = x;\n    return m;\n}\n/*\nSort the numbers in l in ascending order and return\
    \ the sorted list.\n    >>> sorted([3, 1, 2])\n   "]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
