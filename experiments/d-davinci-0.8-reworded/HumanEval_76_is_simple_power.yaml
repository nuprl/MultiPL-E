name: HumanEval_76_is_simple_power
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\nYour task is to write a function\
  \ that returns true if a number x is a simple\n    power of n and false in other\
  \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L,\
  \ 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L,\
  \ 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L,\
  \ 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long\
  \ x, long n) \n"
tests: "unittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
  \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
  \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
  \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
  \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
  \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
completions: ["{\n    if (n == 1L)\n        return x == 1L;\n    if (x == 0L)\n  \
    \      return false;\n    if (x == 1L)\n        return true;\n    if (n == 0L)\n\
    \        return x == 0L;\n    if (n == 2L)\n        return true;\n    if (n %\
    \ 2 == 0L)\n        return false;\n    for (long i = 3L; i <= n; i += 2L)\n  \
    \  {\n        if (x % i == 0L)\n            return false;\n    }\n    return (x\
    \ % n == 0L) && is_simple_power(x / n, n);\n}", "{\n    if (x < 1)\n        return\
    \ false;\n    if (n == 1)\n        return x == 1;\n    if (n == 0)\n        return\
    \ x == 0;\n    if (x == 1)\n        return true;\n    if (n == 1)\n        return\
    \ false;\n    long exponent = 1;\n    long temp = n;\n    while (temp * n <= x)\n\
    \    {\n        temp *= n;\n        exponent++;\n    }\n    return temp == x;\n\
    }\n/*\n Your task is to write a function that returns true if a number x is a\
    \ power of n and false in other cases.\n    x is a power of n if n**i=x, where\
    \ i is a natural number\n    For example:\n    >>> is_power(1L, 4L)\n    true\n\
    \    >>> is_power(2L, 2L)\n    true\n    >>> is_power(8L, 2L)\n    true\n    >>>\
    \ is_power(3L, 2L)\n    false\n    >>> is_power(3L, 1L)\n    false\n    >>> is_power(5L,\
    \ 3L)\n    false\n*/", "{\n    if(x==1) return true;\n    if(n==1) return false;\n\
    \    if(x==n) return true;\n    return is_simple_power(x, cast(long)log(cast(real)x)/log(cast(real)n));\n\
    }", "{\n    bool res;\n    long result=0;\n    if( x==1L || x==n )\n    {\n  \
    \      res=true;\n    }\n    else\n    {\n        result=log2(x)/log2(n);\n  \
    \      res= ( n**result == x) ? true : false;\n    }\n    return res;\n}\n \n\
    \ \n/*\n    https://www.daniweb.com/programming/software-development/threads/252679/c-program-to-check-whether-a-number-is-a-power-of-another\n\
    \    http://stackoverflow.com/questions/101439/the-most-efficient-way-to-implement-an-integer-based-power-function-powint-int\n\
    \    http://stackoverflow.com/questions/10030783/fast-and-elegant-integer-power-function-in-c-c\n\
    */\n \n \nlong power(long n,long p)\n{\n    long res;\n    res=pow(n,p);\n   \
    \ return res;\n}", "{\n    const double xt = x;\n    const double nt = n;\n  \
    \  const double num = log(xt) / log(nt);\n    const uint numi = num;\n    const\
    \ double numt = numi;\n    return numt == num;\n}\nstatic assert(is_simple_power(1L,\
    \ 4L));\nstatic assert(is_simple_power(2L, 2L));\nstatic assert(is_simple_power(8L,\
    \ 2L));\nstatic assert(!is_simple_power(3L, 2L));\nstatic assert(!is_simple_power(3L,\
    \ 1L));\nstatic assert(!is_simple_power(5L, 3L));\n/*\nfrom std.typecons:\n  \
    \  auto tup(T1)(T1 x1) { return tuple(x1); }\n    auto tup(T1, T2)(T1 x1, T2 x2)\
    \ { return tuple(x1, x2); }\n    auto tup(T1, T2, T3)(T1 x1, T2 x2, T3 x3) { return\
    \ tuple(x1, x2, x3); }\n    auto tup(T1, T2, T3, T4)(T1 x1, T2 x2, T3 x3, T4 x4)\
    \ { return tuple(x1, x2, x3, x4); }\n    auto tup(T1, T2, T3, T4, T5)(T1 x1, T2\
    \ x2, T3 x3, T4 x4, T5 x5) { return tuple(x1, x2, x3, x4, x5); }\n    auto tup(T1,\
    \ T2, T3, T4, T5, T6)(T1 x1, T2 x2, T3 x3, T4 x4, T5 x5, T6 x6) { return tuple(x1,\
    \ x2, x3, x4, x5, x6); }\n    auto tup(T1, T2, T3, T4, T5, T6, T7)(T1 x1, T2 x2,\
    \ T3 x3, T", "{\n    immutable long num = x;\n    immutable long pow = n;\n  \
    \  return x != 0 && n != 0 && num != 1 ? x != 1 && n != 1 && pow != 1 ? num %\
    \ n == 0 ? x % n == 0 ? log(num) / log(n) % 1 == 0 ? true : false : false : false\
    \ : false : false;\n}", "{\n    return x > 0 && (x==1 || (n != 1 && x % n == 0\
    \ && is_simple_power(x/n, n)));\n}", "{\n    return x==1?true:is_simple_power(x,n,\
    \ 1);\n}", "{\n\t \n\treturn false;\n}", "{\n    if(x == 1)\n        return true;\n\
    \    else if(x == 0 || n == 0)\n        return false;\n    else if(n == 1)\n \
    \       return false;\n    else\n    {\n        bool res = false;\n        double\
    \ result = 1;\n        for(long i = 0; i <= x; i++)\n        {\n            result\
    \ = pow(n, i);\n            if(result == x)\n            {\n                res\
    \ = true;\n                break;\n            }\n        }\n        return res;\n\
    \    }\n}", "{\n    if(n==0L)return x==1L;\n    if(n==1L)return x==1L;\n    while(true)\n\
    \    {\n        auto r = x % n;\n        if(r == 0L)\n        {\n            x\
    \ = x / n;\n            if(x == 1L)\n                return true;\n        }\n\
    \        else\n            return false;\n    }\n}", "{\n\treturn x == (long)pow(n,(int)log(x)/(int)log(n));\n\
    }", "{\n    immutable int_ = (int)log(x) / log(n);\n    return pow(n, int_) ==\
    \ x;\n}", "{\n\tdouble result = log(x)/log(n);\n\tif(result == int(result)){\n\
    \t\treturn true;\n\t}\n\treturn false;\n}", "{\n    if ( x == 1 || x == n)\n \
    \   {\n        return true;\n    }\n    else if (x < n)\n    {\n        return\
    \ false;\n    }\n    else\n    {\n        bool retVal = false;\n        bool loopFlag\
    \ = true;\n        int i = 2;\n        while (loopFlag)\n        {\n         \
    \   if ( (n ** i) == x)\n            {\n                retVal = true;\n     \
    \           loopFlag = false;\n            }\n            else if ( (n ** i) >\
    \ x)\n            {\n                loopFlag = false;\n            }\n      \
    \      else\n            {\n                i++;\n            }\n        }\n \
    \       return retVal;\n    }\n}", "{\n    enum x = x;\n    enum n = n;\n    if(n\
    \ == 1 && x == 1)\n        return true;\n    if(n > x)\n        return false;\n\
    \    long left = n;\n    long right = x;\n    while(left < right)\n    {\n   \
    \     left *= n;\n        if(left == right)\n            return true;\n    }\n\
    \    return false;\n}\n/*\nYou have a lot of apples (1.5 kg) and you want to distribute\
    \ them among a number of your colleagues.\n    The only condition is that the\
    \ colleague with the smallest number of apples is at least three times less than\
    \ the colleague with the largest number of apples.\n    Your task is to find such\
    \ a number of colleagues. If there is no such number return 0.\n    >>> distribute_apples(1.5)\n\
    \    2\n    >>> distribute_apples(9)\n    3\n    >>> distribute_apples(6)\n  \
    \  3\n    >>> distribute_apples(0)\n    0\n    >>> distribute_apples(2)\n    0\n\
    \    >>> distribute_apples(11)\n    5\n    >>> distribute_apples(24)\n    10\n\
    \    >>> distribute_apples(80)\n    28\n    >>> distribute_apples(103)\n    31\n\
    \    >>> distribute_apples(30)\n    10\n    >>> distribute_apples(102)\n    31\n\
    \    >>> distribute_apples(9.5)\n    3\n    >>> distribute_apples(24.5)\n    10\n\
    */", "{\n    long nn = long.abs(n);\n    long xx = long.abs(x);\n    if (nn ==\
    \ 0)\n        return xx == 1;\n    if (xx < 1)\n        return false;\n    long\
    \ i = 1;\n    long pow = nn;\n    long last_pow = pow;\n    while (pow <= xx)\n\
    \    {\n        if (pow == xx)\n            return true;\n        last_pow = pow;\n\
    \        pow *= nn;\n    }\n    return false;\n}", "{\n  //x=n**i\n  //i=log(x)/log(n)\n\
    \  static long double log_n=log(n);\n  long double log_x=log(x);\n  long double\
    \ i=log_x/log_n;\n  if (i==(long long)i && i>0)\n    return true;\n  return false;\n\
    }", "{\n    return n == 1 || x == n || (x > 1 && x % n == 0 && is_simple_power(x\
    \ / n, n));\n}", "{\n    int p = 1;\n    long r = 1;\n    while (r < x)\n    {\n\
    \        p++;\n        r = power(n, p);\n    }\n    return (r == x) ? true : false;\n\
    }"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
