name: HumanEval_63_fibfib
language: d
results:
- program: "import std.math;\nimport std.typecons;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 3)\n        return n == 2;\n    // Will create\
    \ problem for overflow\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n -\
    \ 3);\n}\nunittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L)\
    \ == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L)\
    \ == 274L);\n    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 0) \n    {\n        throw new Exception(\"n\
    \ must be a positive number\");\n    }\n    else if (n == 0) \n    {\n       \
    \ return 0;\n    }\n    else if (n == 1) \n    {\n        return 0;\n    }\n \
    \   else if (n == 2) \n    {\n        return 1;\n    }\n    else\n    {\n    \
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n    }\n}\nunittest\n{\n\
    \    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 0) \n    {\n        throw new Exception(\"n\
    \ must be non-negative.\");\n    }\n    if (n == 0) \n    {\n        return 0;\n\
    \    }\n    if (n == 1) \n    {\n        return 0;\n    }\n    if (n == 2) \n\
    \    {\n        return 1;\n    }\n    auto s = tuple(0L, 0L, 1L);\n    foreach\
    \ (i; 2 .. n) \n    {\n        s = tuple(s[2], s[0], s[1] + s[0] + s[2]);\n  \
    \  }\n    return s[2];\n}\n/*\nunittest\n{\n    alias candidate = fibfib;\n\n\
    \    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjjkqmtkk.d(43): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjjkqmtkk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0) return 0;\n    else if (n == 1) return 0;\n\
    \    else if (n == 2) return 1;\n    else return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n/*\nThe FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2)\
    \ == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please\
    \ write a function to efficiently compute the n-th element of the fibfib number\
    \ sequence.\n    >>> fibfib(1L)\n    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n\
    \    24L\n    \n*/\nlong fibfib1(long n)\n{\n    if (n <= 2) return n-1;\n   \
    \ else\n    {\n        long a = 0;\n        long b = 1;\n        long c = 1;\n\
    \        for (size_t i = 3; i < n; i++)\n        {\n            a = b;\n     \
    \       b = c;\n            c = a + b + c;\n        }\n        return c;\n   \
    \ }\n}\nunittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L)\
    \ == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L)\
    \ == 274L);\n    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n  if (n < 2) \n  {\n    return 0;\n  }\n  if (n == 2) \n\
    \  {\n    return 1;\n  }\n  long a = 0;\n  long b = 0;\n  long c = 1;\n  long\
    \ result = 0;\n  foreach (i; 2..n) \n  {\n    result = a + b + c;\n    a = b;\n\
    \    b = c;\n    c = result;\n  }\n  return result;\n}\n/*\nGiven a sequence of\
    \ elements, find the first element that repeats itself (first-in-first-out basis)\
    \ or report that there's no repetition.\n    >>> hasRepetition([1,2,3,2,1])\n\
    \    2\n    >>> hasRepetition([1,2,3,4])\n    0\n    >>> hasRepetition([4,4,4,4])\n\
    \    4\n    \n*/\nlong hasRepetition(int[] seq) \n{\n  auto s = new std.typecons.Map!(int,\
    \ int)();\n  foreach (element; seq) \n  {\n    if (s.count ! is(element)) \n \
    \   {\n      s[element] = 0;\n    }\n    else \n    {\n      return element;\n\
    \    }\n  }\n  return 0;\n}\n/*\nGiven an array of elements, return how many times\
    \ those elements appear in order. For example:\n    >>> orderedCount([1, 2, 2,\
    \ 3])\n    [Tuple!(int, \"1\")(1, 1), Tuple!(int, \"2\")(2, 2), Tuple!(int, \"\
    3\")(3, 1)]\n    >>> orderedCount([1, 1, 2, 2, 3])\n    [Tuple!(int, \"1\")(1,\
    \ 2), Tuple!(int, \"2\")(2, 2), Tuple!(int, \"3\")(3, 1)]\n    >>> orderedCount([42])\n\
    \    [Tuple!(int, \"42\")(42, 1)]\n    \n*/\nauto orderedCount(int[] a) \n{\n\
    \  auto s = new std.typecons.Map!(\nunittest\n{\n    alias candidate = fibfib;\n\
    \n    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp_rttyq8.d(80): Error: expression expected, not `unittest`\\\
    n/tmp/tmpp_rttyq8.d(81): Error: found `{` when expecting `)` following template\
    \ argument list\\n/tmp/tmpp_rttyq8.d(82): Error: semicolon expected following\
    \ auto declaration, not `alias`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpp_rttyq8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n\tif (n <= 1)\n\t{\n\t\treturn 0;\n\t}\n\tif (n == 2)\n\t\
    {\n\t\treturn 1;\n\t}\n\telse\n\t{\n\t\treturn fibfib(n - 1) + fibfib(n - 2) +\
    \ fibfib(n - 3);\n\t}\n\t\t\n}\nunittest\n{\n    alias candidate = fibfib;\n\n\
    \    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 3) return n - 1;\nunittest\n{\n    alias candidate\
    \ = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n\
    \    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L)\
    \ == 81L);\n    assert(candidate(12L) == 274L);\n    assert(candidate(14L) ==\
    \ 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo7130x85.d(21): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo7130x85.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0)\n        return 0;\n    else if (n == 1)\n\
    \        return 0;\n    else if (n == 2)\n        return 1;\n    else if (n >\
    \ 2)\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nunittest\n{\n\
    \    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2l0pr1gc.d(18): Error: function `tmp2l0pr1gc.fibfib` no `return\
    \ exp;` or `assert(0);` at end of function\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmp2l0pr1gc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n\tlong x = 0L;\n\tlong y = 0L;\n\tlong z = 1L;\n\tauto prev\
    \ = tuple(x, y, z);\n\tfor (long i = 0L; i < n; i++) \n\t{\n\t\ty = get!1(prev);\n\
    \t\tz = get!2(prev);\n\t\tx = y + z + get!0(prev);\n\t\tprev = tuple(y, z, x);\n\
    \t}\n\treturn y;\n}\nunittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L)\
    \ == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L)\
    \ == 274L);\n    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjebnawl6.d(26): Error: template `object.get` cannot deduce function\
    \ from argument types `!(1)(Tuple!(long, long, long))`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/druntime/import/object.d(3094):\
    \        `object.get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)`\\\
    n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/druntime/import/object.d(3100):\
    \        `object.get(K, V)(inout(V[K])* aa, K key, lazy inout(V) defaultValue)`\\\
    n/tmp/tmpjebnawl6.d(27): Error: template `object.get` cannot deduce function from\
    \ argument types `!(2)(Tuple!(long, long, long))`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/druntime/import/object.d(3094):\
    \        `object.get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)`\\\
    n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/druntime/import/object.d(3100):\
    \        `object.get(K, V)(inout(V[K])* aa, K key, lazy inout(V) defaultValue)`\\\
    n/tmp/tmpjebnawl6.d(28): Error: template `object.get` cannot deduce function from\
    \ argument types `!(0)(Tuple!(long, long, long))`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/druntime/import/object.d(3094):\
    \        `object.get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)`\\\
    n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/druntime/import/object.d(3100):\
    \        `object.get(K, V)(inout(V[K])* aa, K key, lazy inout(V) defaultValue)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjebnawl6.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0)\n        return 0;\n    else if (n == 1)\n\
    \        return 0;\n    else if (n == 2)\n        return 1;\n    else\n      \
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nunittest\n{\n    alias\
    \ candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n  import std.typecons : Tuple;\n  long fn1 = 0, fn2 = 0,\
    \ fn3 = 1;\n  Tuple!(long, long, long) fibs = tuple(fn1, fn2, fn3);\n  foreach\
    \ (i; 0..n)\n    fibs = tuple(fibs[2], fibs[0] + fibs[1] + fibs[2], fibs[1]);\n\
    \  return fibs[1];\n}\n// /usr/include/dmd/phobos/std/typecons.d\n// class tuple(T...)\n\
    // {\n//     private T[] data;\n//     // ...\n//     void opIndexAssign(R, U)(U\
    \ value) if (is(typeof(data[R] = value)));\n//     // ...\n// }\nunittest\n{\n\
    \    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpqdqg9hvc.d(39): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428c9d]\\n??:? void tmpqdqg9hvc.__unittest_L35_C1()\
    \ [0x42810c]\\n??:? void tmpqdqg9hvc.__modtest() [0x428704]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d8b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c7c6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4310ed]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43159c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x431079]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42c79d]\\n??:? runModuleUnitTests [0x42d68d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429178]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4290ff]\\n??:? _d_run_main [0x42906a]\\n??:? main [0x428717]\\\
    n??:? __libc_start_main [0x187d0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0) \n    {\n        return 0;\n    }\n    else\
    \ if (n == 1) \n    {\n        return 0;\n    }\n    else if (n == 2) \n    {\n\
    \        return 1;\n    }\n    else \n    {\n        long a = 0;\n        long\
    \ b = 0;\n        long c = 1;\n        long res = 0;\n        for (int i = 2;\
    \ i < n; i++) \n        {\n            res = a + b + c;\n            a = b;\n\
    \            b = c;\n            c = res;\n        }\n        return res;\n  \
    \  }\n}\nunittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L)\
    \ == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L)\
    \ == 274L);\n    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0)\n        return 0;\n    if (n == 1)\n  \
    \      return 0;\n    if (n == 2)\n        return 1;\n    return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n}\n/*\nFibFib(n) = fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    FibFib(n-1) = fibfib(n-2) + fibfib(n-3) + fibfib(n-4)\nFibFib(n-2) = fibfib(n-3)\
    \ + fibfib(n-4) + fibfib(n-5)\nFibFib(n-3) = fibfib(n-4) + fibfib(n-5) + fibfib(n-6)\n\
    FibFib(n-4) = fibfib(n-5) + fibfib(n-6) + fibfib(n-7)\nFibFib(n-5) = fibfib(n-6)\
    \ + fibfib(n-7) + fibfib(n-8)\nunittest\n{\n    alias candidate = fibfib;\n\n\
    \    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptth_tu_6.d(28): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptth_tu_6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 3) \n    {\n        return n;\n    } \n    else\
    \ \n    {\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n   \
    \ }\n}\nunittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L)\
    \ == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L)\
    \ == 274L);\n    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpc1ut1odk.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427de5]\\n??:? void tmpc1ut1odk.__unittest_L29_C1()\
    \ [0x427a88]\\n??:? void tmpc1ut1odk.__modtest() [0x427b64]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb0b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a99e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb31]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fabd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a975]\\n??:? runModuleUnitTests [0x42b8e1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428234]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281bb]\\n??:? _d_run_main [0x428126]\\n??:? main [0x427b77]\\\
    n??:? __libc_start_main [0x86ee3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 0) \n    {\n        return -1;\n    }\n    if\
    \ (n == 0 || n == 1) \n    {\n        return 0;\n    }\n    if (n == 2) \n   \
    \ {\n        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\nunittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L)\
    \ == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L)\
    \ == 274L);\n    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0L)\n        return 0L;\n    if (n == 1L)\n\
    \        return 0L;\n    if (n == 2L)\n        return 1L;\n    return fibfib(n\
    \ - 1L) + fibfib(n - 2L) + fibfib(n - 3L);\n}\nunittest\n{\n    alias candidate\
    \ = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n\
    \    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L)\
    \ == 81L);\n    assert(candidate(12L) == 274L);\n    assert(candidate(14L) ==\
    \ 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    //The best answer will use dynamic programming.\n  \
    \  long [] arr = new long[n+1];\n    arr[0] = 0;\n    arr[1] = 0;\n    arr[2]\
    \ = 1;\n    foreach(i;3..n+1)\n    {\n        arr[i] = arr[i-1] + arr[i-2] + arr[i-3];\n\
    \    }\n    return arr[n];\n}\n/*\nA graph is a collection of vertices (nodes)\
    \ and edges. \nIn a graph, edges are undirected (you can go from v1 to v2, or\
    \ you can go from v2 to v1).\nunittest\n{\n    alias candidate = fibfib;\n\n \
    \   assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp54rzo7ni.d(31): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp54rzo7ni.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    long a = 0L;\n    long b = 0L;\n    long c = 1L;\n \
    \   long i = 2L;\n    long fib = 0L;\n    while (i <= n) \n    {\n        fib\
    \ = a + b + c;\n        a = b;\n        b = c;\n        c = fib;\n        i++;\n\
    \    }\n    return fib;\n}\nunittest\n{\n    alias candidate = fibfib;\n\n   \
    \ assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpjq28fjdd.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ddd]\\n??:? void tmpjq28fjdd.__unittest_L35_C1()\
    \ [0x427ac5]\\n??:? void tmpjq28fjdd.__modtest() [0x427b60]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb03]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a996]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb29]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a96d]\\n??:? runModuleUnitTests [0x42b8d9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42822c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281b3]\\n??:? _d_run_main [0x42811e]\\n??:? main [0x427b73]\\\
    n??:? __libc_start_main [0x14f81554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n <= 1)\n        return 0;\n    if (n == 2)\n  \
    \      return 1;\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n\
    }\nunittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n\
    \    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n\
    \    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 2)\n        return 0;\n    if (n == 2)\n   \
    \     return 1;\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\
    unittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n\
    \    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n\
    \    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
