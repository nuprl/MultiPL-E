language: d
name: HumanEval_86_anti_shuffle
results:
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string[] arr = splitter(s);\n    string res = \"\";\n    foreach(i;\
    \ 0 .. arr.length)\n    {\n        if(i == arr.length - 1) res ~= sorting(arr[i]);\n\
    \        else res ~= sorting(arr[i]) ~ \" \";\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\"\
    );\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\"\
    ) == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyego9le4.d(22): Error: undefined identifier `splitter`

    /tmp/tmpyego9le4.d(26): Error: undefined identifier `sorting`

    /tmp/tmpyego9le4.d(27): Error: undefined identifier `sorting`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyego9le4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string[] words = split(s, \" \");\n    string joined;\n    foreach(word;\
    \ words)\n    {\n        joined ~= array(word).opSlice.sort().implode;\n     \
    \   joined ~= \" \";\n    }\n    return joined.stripRight();\n}\nunittest\n{\n\
    \    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\"\
    );\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\"\
    ) == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6z9mae1k.d(22): Error: undefined identifier `split`

    /tmp/tmp6z9mae1k.d(26): Error: undefined identifier `array`

    /tmp/tmp6z9mae1k.d(29): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6z9mae1k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    // YOUR CODE GOES HERE\n}\n/*\nunittest\n{\n    alias candidate = anti_shuffle;\n\
    \n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") ==\
    \ \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"\
    abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    );\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuhhv_fss.d(24): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuhhv_fss.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        char[] array = word.toChars();\n        sort(array);\n\
    \        array = array.dup;\n        string new_word = to!string(array);\n   \
    \     result ~= new_word ~ \" \";\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\"\
    );\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\"\
    ) == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcppllh9e.d(22): Error: no property `split` for type `string`

    /tmp/tmpcppllh9e.d(26): Error: no property `toChars` for type `string`

    /tmp/tmpcppllh9e.d(27): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmpcppllh9e.d(29): Error: template instance `to!string` template `to` is
    not defined, did you mean No?

    /tmp/tmpcppllh9e.d(32): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcppllh9e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    int i = 0;\n    string s2;\n    foreach(char c; s)\n    {\n       \
    \ if(c == ' ')\n        {\n            s2 ~= c;\n            i = 0;\n        }\n\
    \        else\n        {\n            string s3;\n            foreach(char c2;\
    \ s[0..i])\n            {\n                if(c2 > c)\n                {\n   \
    \                 s3 ~= c;\n                    break;\n                }\n  \
    \              else\n                {\n                    s3 ~= c2;\n      \
    \          }\n            }\n            if(i == s.length - 1)\n            {\n\
    \                s3 ~= c;\n            }\n            foreach(char c2; s[0..i])\n\
    \            {\n                if(c2 <= c)\n                {\n             \
    \       continue;\n                }\n                else\n                {\n\
    \                    s3 ~= c2;\n                }\n            }\n           \
    \ s2 ~= s3;\n            i++;\n        }\n    }\n    return s2;\n}\nunittest\n\
    {\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\"\
    );\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\"\
    ) == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8tr5v4xe.d(72): unittest failure

    ----------------

    ??:? _d_unittestp [0x42829d]

    ??:? void tmp8tr5v4xe.__unittest_L67_C1() [0x427df1]

    ??:? void tmp8tr5v4xe.__modtest() [0x42801c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ca57]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b966]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43028d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43073c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430219]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b93d]

    ??:? runModuleUnitTests [0x42c82d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428760]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    import std.algorithm;\n    import std.algorithm.comparison;\n    import\
    \ std.array;\n    import std.range;\n    import std.stdio;\n    import std.typecons;\n\
    \    import std.functional;\n    import std.math;\n    import std.array;\n   \
    \ import std.typecons;\n    import std.range;\n    import std.algorithm;\n   \
    \ import std.algorithm.comparison;\n    import std.algorithm.mutation;\n    import\
    \ std.range;\n    import std.string;\n    import std.conv;\n    import std.stdio;\n\
    \    import std.exception;\n    import std.traits;\n    import std.algorithm;\n\
    \    import std.range;\n    import std.array;\n    import std.algorithm.comparison;\n\
    \    import std.datetime;\n    import std.math;\n    import std.algorithm;\n \
    \   import std.ascii;\n    import std.array;\n    import std.algorithm.comparison;\n\
    \    import std.algorithm.mutation;\n    import std.range;\n    import std.algorithm;\n\
    \    import std.array;\n    import std.typecons;\n    import std.range;\n    import\
    \ std.algorithm;\n    import std.range;\n    import std.algorithm.comparison;\n\
    \    import std.algorithm.mutation;\n    import std.conv;\n    import std.typecons;\n\
    \    import std.algorithm;\n    import std.range;\n    import std.ascii;\n   \
    \ import std.array;\n    import std.algorithm.comparison;\n    import std.algorithm.mutation;\n\
    \    import std.algorithm;\n    import std.range;\n    import std.array;\n   \
    \ import std.ascii;\n    import std.algorithm.comparison;\n    import std.algorithm.mutation;\n\
    \    import std.algorithm;\n    import std.range;\n    import std.array;\n   \
    \ import std.algorithm.comparison;\n    import std.algorithm.mutation;\n    import\
    \ std.datetime;\n\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"\
    Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"\
    number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0hq1uwib.d(83): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0hq1uwib.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    auto strs = s.split;\n    string result;\n    for (size_t i = 0; i\
    \ < strs.length; i++) \n    {\n        result ~= strs[i].sort;\n        if (i\
    \ != strs.length - 1)\n            result ~= \" \";\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"\
    Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"\
    number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkj0cb_41.d(22): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkj0cb_41.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n  string result;\n  foreach(immutable word; s.split(\" \")) \n  {\n   \
    \ string new_word;\n    foreach(immutable ch; sort!(\"a < b\", \"a\", \"b\")(word))\
    \ \n    {\n      new_word ~= ch;\n    }\n    result ~= new_word ~ \" \";\n  }\n\
    \  return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n   \
    \ assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"\
    ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"\
    abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    );\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_sdor9ik.d(23): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_sdor9ik.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    auto x = s.split;\n    foreach(i; 0 .. x.length) \n    {\n        x[i]\
    \ = sorted(x[i]);\n    }\n    return join(x, ' ');\n}\nunittest\n{\n    alias\
    \ candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"\
    hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n  \
    \  assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplwi_yjgm.d(22): Error: no property `split` for type `string`

    /tmp/tmplwi_yjgm.d(27): Error: undefined identifier `join`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplwi_yjgm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    auto words = map!(a => to!string(a.sorted()) )(split(s, \" \"));\n\
    \    return join(words, \" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\
    \n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") ==\
    \ \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"\
    abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    );\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp00teohl2.d(22): Error: template instance `map!((a) => to!string(a.sorted()))`
    template `map` is not defined

    /tmp/tmp00teohl2.d(23): Error: undefined identifier `join`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp00teohl2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    char[] result;\n    string[] arr = split(s);\n    foreach(string word;\
    \ arr)\n    {\n        char[] tmp = to!(char[])(word);\n        sort(tmp);\n \
    \       result ~= tmp;\n    }\n    return result.join(\"\");\n}\nunittest\n{\n\
    \    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\"\
    );\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\"\
    ) == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0vn7nozg.d(23): Error: undefined identifier `split`

    /tmp/tmp0vn7nozg.d(26): Error: template instance `to!(char[])` template `to` is
    not defined, did you mean No?

    /tmp/tmp0vn7nozg.d(27): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmp0vn7nozg.d(30): Error: no property `join` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0vn7nozg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    /* \n     * Function that takes a string and returns an ordered version\
    \ of it.\n     * Ordered version of string, is a string where all words (separated\
    \ by space)\n     * are replaced by a new word where all the characters arranged\
    \ in\n     * ascending order based on ascii value.\n     * Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n     * \n     * @params:\
    \ \n     * string s: The original string\n     * \n     * @returns:\n     * string:\
    \ Ordered version of it.\n     */\n    auto words = split(s, \" \");\n    string\
    \ res = \"\";\n    foreach(word; words) {\n        res ~= join(sort!((a, b) =>\
    \ a < b)(word), \"\");\n        res ~= \" \";\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\"\
    );\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\"\
    ) == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm8zi3xqf.d(35): Error: undefined identifier `split`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm8zi3xqf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    auto tmp = s.splitter.each.tupleof.map!(x => to!string(x).array.sort.retro.joiner);\n\
    \    return tmp.joiner.idup;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\
    \n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") ==\
    \ \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"\
    abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    );\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpal653v50.d(22): Error: no property `splitter` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpal653v50.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string res;\n    immutable arr = s.toUpperz.split();\n    foreach(a;\
    \ arr)\n    {\n        string t;\n        foreach(c; a)\n        {\n         \
    \   typeof(return) x = t ~ c;\n            foreach(a1; x.toUpperz)\n         \
    \   {\n                t ~= a1;\n            }\n        }\n        res ~= t ~\
    \ \" \";\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\
    \n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") ==\
    \ \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"\
    abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    );\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6xbua3ff.d(23): Error: no property `toUpperz` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6xbua3ff.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    immutable ascii_value = map!(a => a[0])(s.split(\" \")).map!(a => a.map!(a\
    \ => a[0]).transversal.sort.join(\"\")).join(\" \");\n    return ascii_value;\n\
    }\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"\
    Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"\
    number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1eod6cn0.d(22): Error: template instance `map!((a) => a[0])` template
    `map` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1eod6cn0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    /* 1. Split given string into words\n       2. Sort letters of each\
    \ word\n       3. Add result to new string\n       4. Return result\n    */\n\
    \    string new_str = \"\";\n    string[] words = split(s);\n    foreach(word;\
    \ words)\n    {\n        char[] letters = to!(char[])(word);\n        sort(letters);\n\
    \        new_str ~= to!string(letters);\n    }\n    return new_str;\n}\nunittest\n\
    {\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\"\
    );\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\"\
    ) == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe7ve07y2.d(28): Error: undefined identifier `split`

    /tmp/tmpe7ve07y2.d(31): Error: template instance `to!(char[])` template `to` is
    not defined, did you mean No?

    /tmp/tmpe7ve07y2.d(32): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmpe7ve07y2.d(33): Error: template instance `to!string` template `to` is
    not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe7ve07y2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string[] sentence = split(s);\n    string res = \"\";\n    foreach(itm;\
    \ sentence) \n    {\n        sort(itm);\n        res ~= itm;\n    }\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"\
    Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"\
    number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfa8kdtw3.d(22): Error: undefined identifier `split`

    /tmp/tmpfa8kdtw3.d(26): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa8kdtw3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    int\
    \ len = words.length;\n    foreach(word; words)\n    {\n        char[] chars =\
    \ to!(char[])(word);\n        std.algorithm.sort(chars);\n        if(len-- > 1)\n\
    \            result ~= chars.idup ~ \" \";\n        else\n            result ~=\
    \ chars.idup;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"\
    hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n  \
    \  assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplyg2iq66.d(22): Error: no property `split` for type `string`

    /tmp/tmplyg2iq66.d(24): Error: cannot implicitly convert expression `words.length`
    of type `ulong` to `int`

    /tmp/tmplyg2iq66.d(27): Error: template instance `to!(char[])` template `to` is
    not defined, did you mean No?

    /tmp/tmplyg2iq66.d(28): Error: undefined identifier `algorithm` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplyg2iq66.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    auto result = \"\";\n    auto length = s.length;\n    auto word = \"\
    \";\n    foreach(i; 0..length)\n    {\n        if(s[i] != ' ')\n        {\n  \
    \          word ~= s[i];\n        }\n        else\n        {\n            result\
    \ ~= word.sort;\n            result ~= ' ';\n            word = \"\";\n      \
    \  }\n    }\n    result ~= word.sort;\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n\
    \    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\"\
    ) == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbm58_5fd.d(33): Error: no property `sort` for type `string`

    /tmp/tmpbm58_5fd.d(38): Error: no property `sort` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbm58_5fd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string[] arr;\n    arr = split(s, \" \");\n    foreach(i; 0 .. arr.length)\n\
    \    {\n        arr[i] = sort(arr[i]);\n    }\n    string res = join(arr, \" \"\
    );\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n \
    \   assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"\
    ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"\
    abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    );\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3906a96r.d(23): Error: undefined identifier `split`

    /tmp/tmp3906a96r.d(26): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmp3906a96r.d(28): Error: undefined identifier `join`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3906a96r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string result = \"\";\n    string word = \"\";\n    foreach(char c;\
    \ s)\n    {\n        if(c == ' ')\n        {\n            result ~= word ~ \"\
    \ \";\n            word = \"\";\n        }\n        else\n        {\n        \
    \    word ~= c;\n        }\n    }\n    result ~= word;\n    return result;\n}\n\
    unittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\"\
    ) == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"\
    number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmphnf_6dt1.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4280c5]

    ??:? void tmphnf_6dt1.__unittest_L39_C1() [0x427c19]

    ??:? void tmphnf_6dt1.__modtest() [0x427e44]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c953]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b862]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430041]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4304f0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ffcd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b839]

    ??:? runModuleUnitTests [0x42c729]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428514]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string[] res = split(s, \" \");\n    foreach(i, value; res)\n    {\n\
    \        res[i] = join(map!(ch => ch[0], sort!(\"a\" < b, map!(ch => ch[0], value.dup))));\n\
    \    }\n    return join(res, \" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\
    \n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") ==\
    \ \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"\
    abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    );\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8ufql8o9.d(22): Error: undefined identifier `split`

    /tmp/tmp8ufql8o9.d(25): Error: undefined identifier `join`, did you mean function
    `main`?

    /tmp/tmp8ufql8o9.d(27): Error: undefined identifier `join`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8ufql8o9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    auto result = new string[];\n    foreach(mutable word; s.split)\n \
    \   {\n        auto wordChars = new string[];\n        foreach(ch; word)\n   \
    \     {\n            wordChars ~= ch;\n        }\n        sort(wordChars);\n \
    \       string sortedWord = \"\";\n        foreach(ch; wordChars)\n        {\n\
    \            sortedWord ~= ch;\n        }\n        result ~= sortedWord;\n   \
    \ }\n    return result.joiner.join;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\
    \n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") ==\
    \ \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"\
    abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    );\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3mrzb_sv.d(22): Error: new can only create structs, dynamic arrays
    or class objects, not `string[]`''s

    /tmp/tmp3mrzb_sv.d(23): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3mrzb_sv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{ \n    import std.array;\n    import std.range;\n    import std.conv;\n \
    \   import std.algorithm;\n    import std.math;\n    import std.typecons;\n  \
    \  string[] words = to!string[](s.split(\" \"));\n    string rs;\n    foreach(word;\
    \ words)\n    {\n        if(word.length > 1)\n        {\n            string sortWord\
    \ = to!string(word.sort);\n            rs ~= sortWord;\n        }\n        else\n\
    \        {\n            rs ~= word;\n        }\n    }\n    return rs;\n}\nunittest\n\
    {\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\"\
    );\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\"\
    ) == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplvdzf80u.d(28): Error: only one index allowed to index `void`

    /tmp/tmplvdzf80u.d(34): Error: template `std.algorithm.sorting.sort` cannot deduce
    function from argument types `!()(string)`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/algorithm/sorting.d(1847):        `std.algorithm.sorting.sort(alias
    less = "a < b", SwapStrategy ss = SwapStrategy.unstable, Range)(Range r) if ((ss
    == SwapStrategy.unstable && (hasSwappableElements!Range || hasAssignableElements!Range)
    || ss != SwapStrategy.unstable && hasAssignableElements!Range) && isRandomAccessRange!Range
    && hasSlicing!Range && hasLength!Range)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplvdzf80u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    auto words = split(s);\n    string r;\n    int n = 0;\n    foreach(word;\
    \ words)\n    {\n        r ~= sort!((a, b) => a > b)(word);\n        n += 1;\n\
    \        if (n < words.length)\n            r ~= \" \";\n    }\n    return r;\n\
    }\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"\
    Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"\
    number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1f_efm00.d(22): Error: undefined identifier `split`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1f_efm00.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string[] words = split(s);\n    string[] res;\n    foreach(string word;\
    \ words) {\n        sort(word);\n        res ~= word;\n    }\n    return join(res);\n\
    }\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"\
    Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"\
    number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz4ti5zko.d(22): Error: undefined identifier `split`

    /tmp/tmpz4ti5zko.d(25): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmpz4ti5zko.d(28): Error: undefined identifier `join`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz4ti5zko.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    int len = s.length;\n    if (len == 0) return \"\";\n    string res\
    \ = \"\";\n    char[] tmp = new char[len];\n    int i = 0;\n    while (i < len)\n\
    \    {\n        char c = s[i];\n        if (c != ' ')\n        {\n           \
    \ int j = 0;\n            for (j = 0; i < len && s[i] != ' '; ++i)\n         \
    \   {\n                tmp[j++] = s[i];\n            }\n            if (j > 0)\n\
    \            {\n                sort(tmp[0..j]);\n                foreach (char\
    \ t; tmp[0..j])\n                {\n                    res ~= t;\n          \
    \      }\n            }\n        }\n        else\n        {\n            res ~=\
    \ ' ';\n            ++i;\n        }\n    }\n    return res;\n}\nunittest\n{\n\
    \    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\"\
    );\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\"\
    ) == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpctiqdwqj.d(22): Error: cannot implicitly convert expression `s.length`
    of type `ulong` to `int`

    /tmp/tmpctiqdwqj.d(39): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpctiqdwqj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string[] words = split(s, \" \");\n    string[] sorted_words;\n   \
    \ foreach(word; words)\n    {\n        sorted_words ~= sort(word);\n    }\n  \
    \  return join(sorted_words, \" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\
    \n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") ==\
    \ \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"\
    abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    );\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6umjaomo.d(22): Error: undefined identifier `split`

    /tmp/tmp6umjaomo.d(26): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmp6umjaomo.d(28): Error: undefined identifier `join`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6umjaomo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    static if(is(ElementType!string == char))\n    {\n        string[]\
    \ words = s.split;\n        return [map!(a => sort(a), words)].join;\n    }\n\
    \    else\n    {\n        string[] words = split(s);\n        return [map!(a =>\
    \ sort(a), words)].join;\n    }\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\
    \n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") ==\
    \ \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"\
    abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    );\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe1h128gd.d(29): Error: undefined identifier `split`

    /tmp/tmpe1h128gd.d(30): Error: template instance `map!((a) => sort(a), words)`
    template `map` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe1h128gd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string[] s_arr = split(s, \" \");\n    string r = \"\";\n    foreach(word;\
    \ s_arr) {\n        r ~= sort(word);\n        r ~= \" \";\n    }\n    return r[0..$-1];\n\
    }\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"\
    Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"\
    number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkksdoxp0.d(22): Error: undefined identifier `split`

    /tmp/tmpkksdoxp0.d(25): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkksdoxp0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    // Your code goes here\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\
    \n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") ==\
    \ \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"\
    abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    );\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmbn_u4en.d(20): Error: function `tmpmbn_u4en.anti_shuffle` has
    no `return` statement, but is expected to return a value of type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmbn_u4en.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{ \n    string[] words = s.split;\n    string result = \"\";\n    foreach(inout\
    \ word; words)\n    {\n        // For every word create an array from chars and\
    \ then sort it\n        char[] sorted = word.dup.sort;\n        // Join the chars\
    \ back to a string.\n        result ~= sorted.join;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"\
    Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"\
    number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyxdrenan.d(22): Error: no property `split` for type `string`

    /tmp/tmpyxdrenan.d(24): Error: variable `tmpyxdrenan.anti_shuffle.word` `inout`
    variables can only be declared inside `inout` functions

    /tmp/tmpyxdrenan.d(27): Error: no property `sort` for type `char[]`

    /tmp/tmpyxdrenan.d(29): Error: no property `join` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyxdrenan.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string[] words = s.split;\n    string[] ret = new string[words.length];\n\
    \    foreach(i, word; words)\n    {\n        ret[i] = sort(word.dup);\n    }\n\
    \    return ret.join(\" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\
    \n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") ==\
    \ \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"\
    abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    );\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzm60xqo2.d(22): Error: no property `split` for type `string`

    /tmp/tmpzm60xqo2.d(26): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmpzm60xqo2.d(28): Error: no property `join` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzm60xqo2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string[] words = s.split(\" \");\n    string[] words_sorted = new string[words.length];\n\
    \    foreach(int i, word; words)\n    {\n        char[] tmp = word.dup;\n    \
    \    std.sort(tmp);\n        string tmp_s = tmp.idup;\n        words_sorted[i]\
    \ = tmp_s;\n    }\n    string result = \"\";\n    foreach(int i, word; words)\n\
    \    {\n        result ~= words_sorted[i];\n        if(i+1 < words.length) result\
    \ ~= \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"\
    hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n  \
    \  assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm0fjqgae.d(22): Error: no property `split` for type `string`

    /tmp/tmpm0fjqgae.d(27): Error: undefined identifier `sort` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm0fjqgae.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string result;\n    string word;\n    foreach(char ch; s)\n    {\n\
    \        if(ch == ' ')\n        {\n            sort(word);\n            result\
    \ ~= word ~ \" \";\n            word = \"\";\n        }\n        else\n      \
    \  {\n            word ~= ch;\n        }\n    }\n    sort(word);\n    result ~=\
    \ word;\n    return result;\n}\nstring anti_shuffle1(string s) \n{\n    string\
    \ result;\n    bool was_space = true;\n    string word;\n    foreach(char ch;\
    \ s)\n    {\n        if(ch == ' ')\n        {\n            sort(word);\n     \
    \       result ~= word ~ \" \";\n            word = \"\";\n            was_space\
    \ = true;\n        }\n        else\n        {\n            if(was_space)\n   \
    \         {\n                result ~= ch;\n                was_space = false;\n\
    \            }\n            else\n            {\n                word ~= ch;\n\
    \            }\n        }\n    }\n    sort(word);\n    result ~= word;\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"\
    Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"\
    number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyht8rwet.d(28): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpyht8rwet.d(37): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmpyht8rwet.d(50): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmpyht8rwet.d(68): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyht8rwet.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string[] parts = split(s);\n    string result = \"\";\n    foreach(string\
    \ part; parts)\n    {\n        result ~= anti_shuffle_word(part);\n    }\n   \
    \ return result;\n}\nstring anti_shuffle_word(string s)\n{\n    if(s.length <=\
    \ 1)\n        return s;\n    // <sum, string> tuple will be sortable\n    // sum\
    \ is the sum of ascii values of string\n    auto strings = map!((string str) =>\
    \ tuple(str.sum, str))(to!string[](s));\n    // sort by sum\n    sort!((a, b)\
    \ => a[0] < b[0])(strings);\n    // extract the string\n    return unaryFun!(a\
    \ => a[1])(map!(a => a[1])(strings)).join(\"\");\n}\nunittest\n{\n    alias candidate\
    \ = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"\
    hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n  \
    \  assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpulhux71y.d(22): Error: undefined identifier `split`

    /tmp/tmpulhux71y.d(36): Error: template instance `map!((string str) => tuple(str.sum,
    str))` template `map` is not defined

    /tmp/tmpulhux71y.d(38): Error: template instance `sort!((a, b) => a[0] < b[0])`
    template `sort` is not defined, did you mean sqrt?

    /tmp/tmpulhux71y.d(40): Error: template instance `unaryFun!((a) => a[1])` template
    `unaryFun` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpulhux71y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    return sort!((a, b) => a < b)(s);\n}\nunittest\n{\n    alias candidate\
    \ = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"\
    hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n  \
    \  assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd44re6ng.d(22): Error: template instance `sort!((a, b) => a < b)`
    template `sort` is not defined, did you mean sqrt?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd44re6ng.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    return \"not implemented\";\n}\nunittest\n{\n    alias candidate =\
    \ anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"\
    hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n  \
    \  assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqbn6ff59.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427fbd]

    ??:? void tmpqbn6ff59.__unittest_L24_C1() [0x427aca]

    ??:? void tmpqbn6ff59.__modtest() [0x427d40]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc67]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab76]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc8d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43013c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc19]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab4d]

    ??:? runModuleUnitTests [0x42ba3d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42840c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    return \"Hello\";\n}\nunittest \n{\n    assert(anti_shuffle(\"Hi\"\
    ) == \"Hi\");\n    assert(anti_shuffle(\"hello\") == \"ehllo\");\n    assert(anti_shuffle(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n}\n \n \n \n \n \n \n \n \n \n \n/*\
    \ \n    Solution Hint:\n    Use the following algorithm:\n    1. Create an array\
    \ from the string with the spaces.\n    2. Split each word and sort them in ascending\
    \ order.\n    3. Create a new string from the array using join.\n*/\nunittest\n\
    {\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\"\
    );\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\"\
    ) == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpc6wclxj4.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x4280f5]

    ??:? void tmpc6wclxj4.__unittest_L24_C1() [0x427b0a]

    ??:? void tmpc6wclxj4.__modtest() [0x427e70]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bd9f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42acae]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fdc5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430274]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fd51]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ac85]

    ??:? runModuleUnitTests [0x42bb75]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428544]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    auto words = split(s);\n    string new_s;\n    foreach(ref word; words)\
    \ {\n        string new_word;\n        foreach(char c; word) {\n            new_word\
    \ ~= c;\n        }\n        sort(new_word);\n        new_s ~= new_word;\n    \
    \    new_s ~= \" \";\n    }\n    return new_s;\n}\nunittest\n{\n    alias candidate\
    \ = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"\
    hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n  \
    \  assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpumndh8zy.d(22): Error: undefined identifier `split`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpumndh8zy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string[] words = split(s);\n    foreach(string i; words)\n    {\n \
    \       sort(i.begin(), i.end());\n    }\n    return join(words);\n}\nunittest\n\
    {\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\"\
    );\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\"\
    ) == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm3tls6rr.d(22): Error: undefined identifier `split`

    /tmp/tmpm3tls6rr.d(25): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmpm3tls6rr.d(27): Error: undefined identifier `join`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm3tls6rr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    int i = 0;\n    string res = \"\";\n    foreach(uword; s.split(' '))\n\
    \    {\n        int leng = uword.length;\n        int j = 0;\n        string str\
    \ = \"\";\n        while(j < leng)\n        {\n            char min = uword[j];\n\
    \            foreach(ch; uword[j..$])\n            {\n                if(ch <\
    \ min)\n                {\n                    min = ch;\n                }\n\
    \            }\n            str ~= min;\n            uword = uword.replace(min,\
    \ '*');\n            j++;\n        }\n        res ~= \" \" ~ str;\n    }\n   \
    \ return res.strip(\" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\
    \n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") ==\
    \ \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"\
    abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    );\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj5xi5uo1.d(24): Error: no property `split` for type `string`

    /tmp/tmpj5xi5uo1.d(45): Error: no property `strip` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj5xi5uo1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string res = \"\";\n    immutable words = split(s);\n    foreach(immutable\
    \ word; words) \n    {\n        res ~= d_array!char(word).sort();\n    }\n   \
    \ return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"\
    Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"\
    number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx2kervhy.d(23): Error: undefined identifier `split`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx2kervhy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    int len = s.length;\n    char[] buffer = new char[len];\n    s.copy(buffer);\n\
    \    int[] charOrder = new int[len];\n    for (int i = 0; i < len; i++)\n    {\n\
    \        charOrder[i] = buffer[i];\n    }\n    sort(charOrder);\n    string result\
    \ = \"\";\n    foreach (ch; buffer)\n    {\n        foreach (n; charOrder)\n \
    \       {\n            if (n == ch)\n            {\n                result ~=\
    \ n.toString;\n                break;\n            }\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"\
    Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"\
    number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpix1wxgya.d(22): Error: cannot implicitly convert expression `s.length`
    of type `ulong` to `int`

    /tmp/tmpix1wxgya.d(24): Error: no property `copy` for type `string`

    /tmp/tmpix1wxgya.d(30): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmpix1wxgya.d(38): Error: no property `toString` for type `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpix1wxgya.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    auto parts = s.split(\" \");\n    auto shuffled = map!(s => s.array.sort.array,\
    \ parts);\n    return concatenate(shuffled);\n}\nunittest\n{\n    alias candidate\
    \ = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"\
    hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n  \
    \  assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpja7ao6j9.d(22): Error: no property `split` for type `string`

    /tmp/tmpja7ao6j9.d(23): Error: template instance `map!((s) => s.array.sort.array,
    parts)` template `map` is not defined

    /tmp/tmpja7ao6j9.d(24): Error: undefined identifier `concatenate`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpja7ao6j9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(string\
    \ word; words) {\n        typeof(word[0])[] characters = word.dup;\n        std.algorithm.sort(characters);\n\
    \        foreach(char c; characters) {\n            result ~= c;\n        }\n\
    \        result ~= \" \";\n    }\n    return result.idup;\n}\nunittest\n{\n  \
    \  alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n\
    \    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\"\
    ) == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzbhn08s1.d(22): Error: no property `split` for type `string`

    /tmp/tmpzbhn08s1.d(26): Error: undefined identifier `algorithm` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzbhn08s1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    // string[] words = s.split;\n    // foreach(string word; words) {\n\
    \    //     word.sort;\n    // }\n    // return words.join(\" \");\n    // \n\
    \    // Note: concatenation is done in O(n) if using string\n    //\n    string\
    \ result = \"\";\n    string[] words = s.split;\n    foreach(string word; words)\
    \ {\n        word.sort;\n        result ~= word;\n        result ~= \" \";\n \
    \   }\n    return result[0..$-1];\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\
    \n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") ==\
    \ \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"\
    abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    );\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgf40u2zf.d(31): Error: no property `split` for type `string`

    /tmp/tmpgf40u2zf.d(33): Error: no property `sort` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgf40u2zf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string[] words = splitter(s, ' ');\n    string result = \"\";\n   \
    \ for (i in 0 .. words.length - 1)\n    {\n        result ~= sortedString(words[i]);\n\
    \        if (i != words.length - 1)\n            result ~= \" \";\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"\
    Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"\
    number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5kgl5_sb.d(24): Error: found `..` when expecting `;` following
    statement

    /tmp/tmp5kgl5_sb.d(24): Error: found `)` when expecting `;` following `for` condition

    /tmp/tmp5kgl5_sb.d(30): Error: found `return` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5kgl5_sb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string result;\n    //1. split string in words and save them in array\n\
    \    string[] words = s.split(\" \");\n    foreach(word; words)\n    {\n     \
    \   //2. save characters of each word in array\n        char[] chars = word.array;\n\
    \        //3. sort chars\n        sort(chars);\n        //4. save sorted chars\
    \ in new word\n        string new_word = chars.idup;\n        //5. put new word\
    \ in result\n        result ~= new_word;\n        //6. insert space\n        result\
    \ ~= \" \";\n    }\n    //7. return result\n    return result;\n}\nunittest\n\
    {\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\"\
    );\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\"\
    ) == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8v5bgek8.d(24): Error: no property `split` for type `string`

    /tmp/tmp8v5bgek8.d(28): Error: no property `array` for type `string`

    /tmp/tmp8v5bgek8.d(30): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8v5bgek8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    auto words = filter!(a => a.length)(split(s));\n    foreach(w; words)\n\
    \    {\n        sort(w);\n    }\n    return join(words);\n}\nunittest\n{\n   \
    \ alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n\
    \    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\"\
    ) == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe5vom6qg.d(22): Error: template instance `filter!((a) => a.length)`
    template `filter` is not defined

    /tmp/tmpe5vom6qg.d(27): Error: undefined identifier `join`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe5vom6qg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string[] tokens = split(s, \" \");\n    auto result = appender!string();\n\
    \    foreach(string word; tokens)\n    {\n        auto chars = appender!(dchar[])();\n\
    \        foreach(dchar c; word)\n        {\n            chars.put(c);\n      \
    \  }\n        std.algorithm.sort(chars.data[], (dchar lhs, dchar rhs) { return\
    \ lhs < rhs; });\n        result.put(string(chars.data));\n        result.put(\"\
    \ \");\n    }\n    return to!string(result.data);\n}\nunittest\n{\n    alias candidate\
    \ = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"\
    hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n  \
    \  assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzhqvvllv.d(22): Error: undefined identifier `split`

    /tmp/tmpzhqvvllv.d(23): Error: template instance `appender!string` template `appender`
    is not defined

    /tmp/tmpzhqvvllv.d(26): Error: template instance `appender!(dchar[])` template
    `appender` is not defined

    /tmp/tmpzhqvvllv.d(31): Error: undefined identifier `algorithm` in package `std`

    /tmp/tmpzhqvvllv.d(35): Error: template instance `to!string` template `to` is
    not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzhqvvllv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    return s;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n\
    \    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") ==\
    \ \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"\
    abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    );\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\
    );\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp1hox40wf.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427fc5]

    ??:? void tmp1hox40wf.__unittest_L24_C1() [0x427b1d]

    ??:? void tmp1hox40wf.__modtest() [0x427d48]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc6f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab7e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc95]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430144]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc21]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab55]

    ??:? runModuleUnitTests [0x42ba45]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428414]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{ \n    string words[]; \n    s.split(\" \", words); \n    size_t n = words.length;\
    \ \n    foreach (i, word; words) \n    { \n        words[i] = anti_shuffle(word);\
    \ \n    } \n    return join(words); \n} \n \nstring anti_shuffle(string s) \n\
    { \n    s.dup.sort; \n    return s; \n} \nunittest\n{\n    alias candidate = anti_shuffle;\n\
    \n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") ==\
    \ \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"\
    abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    );\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy3zoqtgs.d(22): Deprecation: instead of C-style syntax, use D-style
    syntax `string[] words`

    /tmp/tmpy3zoqtgs.d(23): Error: no property `split` for type `string`

    /tmp/tmpy3zoqtgs.d(27): Error: `tmpy3zoqtgs.anti_shuffle` called with argument
    types `(string)` matches both:

    /tmp/tmpy3zoqtgs.d(20):     `tmpy3zoqtgs.anti_shuffle(string s)`

    and:

    /tmp/tmpy3zoqtgs.d(32):     `tmpy3zoqtgs.anti_shuffle(string s)`

    /tmp/tmpy3zoqtgs.d(29): Error: undefined identifier `join`, did you mean function
    `main`?

    /tmp/tmpy3zoqtgs.d(34): Error: no property `sort` for type `char[]`

    /tmp/tmpy3zoqtgs.d(41): Error: `tmpy3zoqtgs.anti_shuffle` called with argument
    types `(string)` matches both:

    /tmp/tmpy3zoqtgs.d(20):     `tmpy3zoqtgs.anti_shuffle(string s)`

    and:

    /tmp/tmpy3zoqtgs.d(32):     `tmpy3zoqtgs.anti_shuffle(string s)`

    /tmp/tmpy3zoqtgs.d(42): Error: `tmpy3zoqtgs.anti_shuffle` called with argument
    types `(string)` matches both:

    /tmp/tmpy3zoqtgs.d(20):     `tmpy3zoqtgs.anti_shuffle(string s)`

    and:

    /tmp/tmpy3zoqtgs.d(32):     `tmpy3zoqtgs.anti_shuffle(string s)`

    /tmp/tmpy3zoqtgs.d(43): Error: `tmpy3zoqtgs.anti_shuffle` call'
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n     string[] ss = s.split;\n     string result;\n     foreach(string word;\
    \ ss)\n     {\n         string[] chars = word.split;\n         foreach(string\
    \ c; chars)\n         {\n             result ~= c;\n         }\n         result\
    \ ~= \" \";\n     }\n     return result;\n}\nunittest\n{\n    alias candidate\
    \ = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"\
    hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n  \
    \  assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6b8k99cy.d(22): Error: no property `split` for type `string`

    /tmp/tmp6b8k99cy.d(26): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6b8k99cy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n  auto words = s.split(\" \");\n  foreach(word; words)\n    word.sort();\n\
    \  string result = to!string(map!(to!string)(words));\n  return result;\n}\nunittest\n\
    {\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\"\
    );\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\"\
    ) == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp775gksg7.d(22): Error: no property `split` for type `string`

    /tmp/tmp775gksg7.d(25): Error: template instance `to!string` template `to` is
    not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp775gksg7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    // TODO: Implement Me!\n    return \"\";\n}\nunittest\n{\n    alias\
    \ candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"\
    hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n  \
    \  assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmppbaudw4k.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427fbd]

    ??:? void tmppbaudw4k.__unittest_L25_C1() [0x427ac6]

    ??:? void tmppbaudw4k.__modtest() [0x427d3c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc67]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab76]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc8d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43013c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc19]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab4d]

    ??:? runModuleUnitTests [0x42ba3d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42840c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    auto words = split(s);\n    string result;\n    foreach(word; words)\n\
    \    {\n        result ~= sort(word);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\"\
    );\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\"\
    ) == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp583_2k3i.d(22): Error: undefined identifier `split`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp583_2k3i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n  string [] arr = split(s);\n  foreach(e;arr)\n  {\n    e = chomp(e);\n\
    \    string temp = e;\n    temp = temp.sort;\n    s = s.replace(e,temp);\n  }\n\
    \  return s;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"\
    Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"\
    number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8om9mjr0.d(22): Error: undefined identifier `split`

    /tmp/tmp8om9mjr0.d(25): Error: undefined identifier `chomp`, did you mean template
    `cmp(T)(const(T) x, const(T) y) if (isFloatingPoint!T)`?

    /tmp/tmp8om9mjr0.d(27): Error: no property `sort` for type `string`

    /tmp/tmp8om9mjr0.d(28): Error: no property `replace` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8om9mjr0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    /*\n        Input string: \"Hello World!!!\"\n        Output string:\
    \ \"Hello !!!Wdlor\"\n        \n        Solution:\n            - Split the string\
    \ into a sequence of words using .split\n            - Map the sequence of words\
    \ to a sequence of words where all\n              characters are in ascending\
    \ order.\n            - Return the result of a join of the mapped sequence of\
    \ words.\n            - Use std.ascii to order characters.\n    */\n    return\
    \ s.split.map!((string word) => word.ascii.sort.join).join;\n}\nunittest\n{\n\
    \    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\"\
    );\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\"\
    ) == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_q914phx.d(33): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_q914phx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    // we're going to re-implement what std.algorithm.sort would do\n \
    \   // but with a custom predicate. We could use std.algorithm.sort with\n   \
    \ // a predicate, but it will be better to implement the whole thing\n    // to\
    \ understand the process better.\n    // The whole thing is a bit simpler, since\
    \ we're sorting strings,\n    // and strings are already ordered by their characters.\n\
    \    // We just have to be careful with non-alphabetic chars (.,;:- etc...)\n\
    \    // and decide how to order them...\nunittest\n{\n    alias candidate = anti_shuffle;\n\
    \n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") ==\
    \ \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"\
    abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    );\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6_mt0ht1.d(30): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6_mt0ht1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    auto x = s.split();\n    return x.map!(x => x.sort).join(\" \");\n\
    }\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"\
    Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"\
    number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr784hkt4.d(22): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr784hkt4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n\t// Version 1:\n\t// T O(n*log(n))\n\t// S O(n)\n\t\n\tauto words = split(s,\
    \ ' ');\n\tstring result;\n\tforeach(word; words) {\n\t\tresult ~= ssort(word)\
    \ ~ ' ';\n\t}\n\treturn result[0..$-1];\n\t\n\t\n\t//Version 2:\n\t// T O(n*log(n))\n\
    \t// S O(n)\n\t// import std.algorithm, std.range;\n\t// string result;\n\t//\
    \ foreach(word; s.split.map!(a => a.sort())) {\n\t//     result ~= word ~ ' ';\n\
    \t// }\n\t// return result[0..$-1];\n\t\n\t\n\t//Version 3:\n\t// T O(n*log(n))\n\
    \t// S O(n)\n\t// auto res = s.split.map!(a => a.sort()).join(\" \");\n\t// return\
    \ res;\n\t\n\t\n\t//Version 4:\n\t// T O(n)\n\t// S O(n)\n\t// import std.typecons;\n\
    \t// import std.algorithm : sort;\n\t// import std.range : sorted;\n\t// string\
    \ result;\n\t// string[string[]] temp;\n\t// foreach(word; s.split) {\n\t//  \
    \   temp[word] = word.sort();\n\t// }\n\t// foreach(word; s.split) {\n\t//   \
    \  result ~= temp[word] ~ ' ';\n\t// }\n\t// return result[0..$-1];\n\t\n\t\n\t\
    //Version 5:\n\t// T O(n*log(n))\n\t// S O(n)\n\t// import std.algorithm;\n\t\
    // import std.range;\n\t// string[] words = s.split;\n\t// string[] sortedWords\
    \ = map!(word => word.sort())(words);\n\t// string result = zip(words, sortedWords).map!(t\
    \ => t[0]).join(\" \");\n\t// return result;\n\t\n\t\n\t//Version 6:\nunittest\n\
    {\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\"\
    );\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\"\
    ) == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppdbn158p.d(81): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppdbn158p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string temp = \"\";\n    foreach(c; s)\n    {\n        if(c == ' ')\n\
    \        {\n            temp ~= \" \";\n        }\n        else\n        {\n \
    \           ubyte[] arr;\n            arr ~= c;\n            std.algorithm.sort(arr);\n\
    \            foreach(c; arr)\n            {\n                temp ~= c;\n    \
    \        }\n        }\n    }\n    return temp;\n}\nunittest\n{\n    alias candidate\
    \ = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"\
    hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n  \
    \  assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptcyl5t7_.d(33): Error: undefined identifier `algorithm` in package
    `std`

    /tmp/tmptcyl5t7_.d(34): Error: variable `c` is shadowing variable `tmptcyl5t7_.anti_shuffle.c`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptcyl5t7_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    auto words = s.split;\n    auto new_words = words.map!(x => x.chars.sort.array.join).array;\n\
    \    return new_words.join(\" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\
    \n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") ==\
    \ \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"\
    abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    );\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp10izjvm3.d(22): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp10izjvm3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string[] words = split(s, \" \");\n    string new_s = \"\";\n    foreach(string\
    \ word; words) {\n        char[] c_arr = to!(char[])(word);\n        sort(c_arr);\n\
    \        new_s ~= to!string(c_arr);\n        new_s ~= \" \";\n    }\n    return\
    \ new_s;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"\
    Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"\
    number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphhn_3lk8.d(22): Error: undefined identifier `split`

    /tmp/tmphhn_3lk8.d(25): Error: template instance `to!(char[])` template `to` is
    not defined, did you mean No?

    /tmp/tmphhn_3lk8.d(26): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmphhn_3lk8.d(27): Error: template instance `to!string` template `to` is
    not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphhn_3lk8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string result = \"\";\n    int wordStart = 0;\n    for (int i = 0;\
    \ i < s.length; i++) \n    {\n        if (s[i] == ' ') \n        {\n         \
    \   string word = s[wordStart..i];\n            result ~= anti_shuffle_word(word);\n\
    \            result ~= ' ';\n            wordStart = i + 1;\n        }\n    }\n\
    \    result ~= anti_shuffle_word(s[wordStart..$]);\n    return result;\n}\nstring\
    \ anti_shuffle_word(string s) \n{\n    string result = \"\";\n    string sorted_letters\
    \ = sort(s.dup);\n    for (char c : s) \n    {\n        int letter_index = sorted_letters.indexOf(c);\n\
    \        char letter = sorted_letters[letter_index];\n        sorted_letters =\
    \ sorted_letters[0..letter_index] ~ sorted_letters[letter_index + 1..$];\n   \
    \     result ~= letter;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"\
    hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n  \
    \  assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1cntfmno.d(41): Error: semicolon expected, not `:`

    /tmp/tmp1cntfmno.d(41): Error: expression expected, not `:`

    /tmp/tmp1cntfmno.d(41): Error: found `s` when expecting `;` following `for` condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1cntfmno.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string res;\n    for (string w : s.split(\" \")) \n    {\n        int\
    \ w_length = w.length;\n        res ~= w.sort().front(w_length);\n        res\
    \ ~= \" \";\n    }\n    return res.strip();\n}\nunittest\n{\n    alias candidate\
    \ = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"\
    hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n  \
    \  assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdanqty5c.d(23): Error: found `w` when expecting `;` following statement

    /tmp/tmpdanqty5c.d(23): Error: expression expected, not `:`

    /tmp/tmpdanqty5c.d(23): Error: found `s` when expecting `;` following `for` condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdanqty5c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string[] a = s.split(\" \");\n    string result = \"\";\n    foreach(string\
    \ x; a)\n    {\n        string t = x.dup;\n        t.sort();\n        result ~=\
    \ t;\n        result ~= \" \";\n    }\n    return result.chomp;\n}\nunittest\n\
    {\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\"\
    );\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\"\
    ) == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn4hlm354.d(22): Error: no property `split` for type `string`

    /tmp/tmpn4hlm354.d(27): Error: no property `sort` for type `string`

    /tmp/tmpn4hlm354.d(31): Error: no property `chomp` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn4hlm354.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string[] splitted = s.split(\" \");\n    auto mapped = splitted.map!(a\
    \ => a.sort!q{a < b});\n    return mapped.join(\" \");\n}\nunittest\n{\n    alias\
    \ candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"\
    hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n  \
    \  assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv4f8r7vv.d(22): Error: no property `split` for type `string`

    /tmp/tmpv4f8r7vv.d(23): Error: no property `map` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv4f8r7vv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    auto words = s.split(\" \");\n    string result;\n    foreach(word;\
    \ words)\n    {\n        foreach(c; word)\n        {\n            auto min = minElement(word);\n\
    \            result ~= min;\n            word = word.replace(min, \"\");\n   \
    \     }\n        result ~= \" \";\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\"\
    );\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\"\
    ) == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcicb0er_.d(22): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcicb0er_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string newstr;\n    string[] strs = split(s);\n    auto i = 0;\n  \
    \  foreach(str; strs)\n    {\n        newstr ~= sort(str);\n        if(i != strs.length\
    \ - 1)\n            newstr ~= \" \";\n        i++;\n    }\n    return newstr;\n\
    }\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"\
    Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"\
    number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpysqdp010.d(23): Error: undefined identifier `split`

    /tmp/tmpysqdp010.d(27): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpysqdp010.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    // YOUR CODE HERE\n    //\n    // NOTE: You can access the individual\
    \ words of a string\n    // by using the split function.\n    //\n    // string\
    \ str = \"Hello World!!!\";\n    // string[] words = str.split(\" \");\n    //\
    \ \n    // words is now an array with [\"Hello\", \"World!!!\", \"\"]\n    //\n\
    \    // To get the ascii value of a string, you can use the\n    // at function.\n\
    \    //\n    // char c = 'a';\n    // int value = c.at(0);\n    //\n    // value\
    \ is now 97.\n    //\n    // To create a string from an array of chars, you can\
    \ use\n    // the function std.array.array.\n    //\n    // char[] array = ['a',\
    \ 'b', 'c'];\n    // string s = std.array.array(array);\n    //\n    // s is now\
    \ \"abc\".\n    //\n    return s;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\
    \n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") ==\
    \ \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"\
    abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    );\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\
    );\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpos1b4ok3.d(55): unittest failure

    ----------------

    ??:? _d_unittestp [0x427fc5]

    ??:? void tmpos1b4ok3.__unittest_L50_C1() [0x427b1d]

    ??:? void tmpos1b4ok3.__modtest() [0x427d48]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc6f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab7e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc95]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430144]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc21]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab55]

    ??:? runModuleUnitTests [0x42ba45]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428414]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    auto ret = \"\";\n    foreach(char[] word; s.split()) \n    {\n   \
    \     word.sort;\n        ret ~= word;\n    }\n    return ret;\n}\nunittest\n\
    {\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\"\
    );\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\"\
    ) == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4u7cdz1g.d(23): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4u7cdz1g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n\tstring result;\n\tstring[] words = s.split(\" \");\n\tforeach(w; words)\n\
    \t{\n\t\tstring[] chars = w.toString().split(\"\");\n\t\tstd.algorithm.sort(chars);\n\
    \t\tresult ~= chars.join;\n\t\tresult ~= \" \";\n\t}\n\tresult = result.stripRight;\n\
    \treturn result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"\
    Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"\
    number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4rmlx_ee.d(23): Error: no property `split` for type `string`

    /tmp/tmp4rmlx_ee.d(26): Error: no property `toString` for type `string`

    /tmp/tmp4rmlx_ee.d(27): Error: undefined identifier `algorithm` in package `std`

    /tmp/tmp4rmlx_ee.d(28): Error: no property `join` for type `string[]`

    /tmp/tmp4rmlx_ee.d(31): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4rmlx_ee.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string anti_shuffled = \"\";\n    string word = \"\";\n    char[] word_chars;\n\
    \    foreach(ch; s)\n    {\n        if(ch == ' ')\n        {\n            if(word.length\
    \ != 0)\n            {\n                word_chars = to!(char[])(word);\n    \
    \            sort(word_chars);\n                word = to!string(word_chars);\n\
    \                anti_shuffled ~= word;\n                word = \"\";\n      \
    \      }\n            anti_shuffled ~= \" \";\n        }\n        else\n     \
    \   {\n            word ~= ch;\n        }\n    }\n    if(word.length != 0)\n \
    \   {\n        word_chars = to!(char[])(word);\n        sort(word_chars);\n  \
    \      word = to!string(word_chars);\n        anti_shuffled ~= word;\n    }\n\
    \    return anti_shuffled;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\
    \n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") ==\
    \ \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"\
    abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    );\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp51q7ib_i.d(31): Error: template instance `to!(char[])` template
    `to` is not defined, did you mean No?

    /tmp/tmp51q7ib_i.d(32): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmp51q7ib_i.d(33): Error: template instance `to!string` template `to` is
    not defined, did you mean No?

    /tmp/tmp51q7ib_i.d(46): Error: template instance `to!(char[])` template `to` is
    not defined, did you mean No?

    /tmp/tmp51q7ib_i.d(47): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmp51q7ib_i.d(48): Error: template instance `to!string` template `to` is
    not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp51q7ib_i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string[] words = split(s);\n    string ans = \"\";\n    foreach(string\
    \ word; words)\n    {\n        ans = ans ~ sort(word);\n    }\n    return ans;\n\
    }\n/*\n    \n    Write a function that takes a string and returns True if the\n\
    \    string is a palindrome and False otherwise.\n    Note: A palindrome is a\
    \ word that reads the same forwards and backwards.\n    \n    For example:\n \
    \   >>> is_palindrome(\"kayak\")\n    true\n    >>> is_palindrome(\"hello\")\n\
    \    false\n    >>> is_palindrome(\"bob\")\n    true\n    \n*/\nunittest\n{\n\
    \    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\"\
    );\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\"\
    ) == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7b1e9wlt.d(22): Error: undefined identifier `split`

    /tmp/tmp7b1e9wlt.d(26): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    // Your code here.\n    int [string] result;\n    int [string] substrings;\n\
    \    string s2;\n    int i;\n    auto words = s.split();\n    //string [] words\
    \ = split(s, ' ');\n    foreach(w; words)\n    {\n        result[w] = w;\n   \
    \     w.sort();\n        //substrings.insert(w);\n        substrings[w] = w;\n\
    \    }\n    foreach(w; words)\n    {\n        s2 ~= substrings[w];\n        s2\
    \ ~= \" \";\n    }\n    return s2;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\
    \n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") ==\
    \ \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"\
    abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    );\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprfzysslq.d(27): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprfzysslq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    import std.algorithm;\n    import std.array;\n    import std.ascii;\n\
    \    import std.conv;\n    import std.functional;\n    import std.range;\n   \
    \ import std.regex;\n    import std.string;\n    import std.typecons;\n    import\
    \ std.uni;\n    import std.utf;\n    import std.math;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.algorithm;\n    import std.array;\n\
    \    import std.ascii;\n    import std.conv;\n    import std.functional;\n   \
    \ import std.range;\n    import std.regex;\n    import std.string;\n    import\
    \ std.typecons;\n    import std.uni;\n    import std.utf;\n    import std.math;\n\
    \    import std.typecons;\n    import std.typecons;\n    import std.algorithm;\n\
    \    import std.array;\n    import std.ascii;\n    import std.conv;\n    import\
    \ std.functional;\n    import std.range;\n    import std.regex;\n    import std.string;\n\
    \    import std.typecons;\n    import std.uni;\n    import std.utf;\n    import\
    \ std.math;\n    import std.typecons;\n    import std.typecons;\n    import std.algorithm;\n\
    \    import std.array;\n    import std.ascii;\n    import std.conv;\n    import\
    \ std.functional;\n    import std.range;\n    import std.regex;\n    import std.string;\n\
    \    import std.typecons;\n    import std.uni;\n    import std.utf;\n    import\
    \ std.math;\n    import std.typecons;\n    import std.typecons;\n    import std.algorithm;\n\
    \    import std.array;\n    import std.ascii;\n    import std.conv;\n    import\
    \ std.functional;\n    import std.range;\n    import std.regex;\n    import std.string;\n\
    \    import std.typecons;\n    import std.uni;\n    import std.utf;\n    import\
    \ std.math;\n\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"\
    Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"\
    number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps9f2g_ch.d(91): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps9f2g_ch.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    return s;\n}\nunittest\n\
    {\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\"\
    );\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\"\
    ) == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpeqpzc0z9.d(49): unittest failure

    ----------------

    ??:? _d_unittestp [0x427fc5]

    ??:? void tmpeqpzc0z9.__unittest_L44_C1() [0x427b1d]

    ??:? void tmpeqpzc0z9.__modtest() [0x427d48]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc6f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab7e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc95]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430144]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc21]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab55]

    ??:? runModuleUnitTests [0x42ba45]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428414]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string[] words = split(s, \" \");\n    string[] alphabets_only_words;\n\
    \    foreach(i, word; words)\n    {\n        alphabets_only_words ~= sort(word);\n\
    \    }\n    string anti_shuffled_string = join(alphabets_only_words, \" \");\n\
    \    return anti_shuffled_string;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\
    \n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") ==\
    \ \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"\
    abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    );\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9xkmyqh5.d(22): Error: undefined identifier `split`

    /tmp/tmp9xkmyqh5.d(26): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmp9xkmyqh5.d(28): Error: undefined identifier `join`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9xkmyqh5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    immutable words = s.split();\n    return zip(\n        words, \n  \
    \      map!(x => sort(x.to!string().dup).array).array(map!(x => x.to!string())(words))\n\
    \    ).reduce!(a, b => a ~ \" \" ~ b).to!string();\n}\nunittest\n{\n    alias\
    \ candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"\
    hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n  \
    \  assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj3r_f4qq.d(22): Error: no property `split` for type `string`

    /tmp/tmpj3r_f4qq.d(23): Error: undefined identifier `zip`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj3r_f4qq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n\tauto words = s.split(\" \");\nunittest\n{\n    alias candidate = anti_shuffle;\n\
    \n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") ==\
    \ \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"\
    abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    );\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp107ghw_8.d(23): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp107ghw_8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    char[string] dict = new char[string];\n    auto w = split(s);\n   \
    \ foreach(string i; w)\n    {\n        if(i == \"\") \n            continue;\n\
    \        auto j = sort(i);\n        if(dict.find(j) is null)\n            dict[j]\
    \ = i;\n    }\n    return join(w, \" \").replace(dict);\n}\nunittest\n{\n    alias\
    \ candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"\
    hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n  \
    \  assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8wtlo4q5.d(22): Error: cannot pass type `string` as a function
    argument

    /tmp/tmp8wtlo4q5.d(23): Error: undefined identifier `split`

    /tmp/tmp8wtlo4q5.d(32): Error: undefined identifier `join`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8wtlo4q5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    const(char)[] str = s.dup;\n    immutable int len = str.length;\n \
    \   immutable int i = 0;\n    immutable int j = 0;\n    immutable int k = 0;\n\
    \    const(char)[len] temp;\n    const(char)[len] result;\n    while(j < len)\n\
    \    {\n        k = 0;\n        while(str[j] != ' ' && j < len)\n        {\n \
    \           temp[k] = str[j];\n            j++;\n            k++;\n        }\n\
    \        result[i..j] = sort(temp[0..k]);\n        i = j;\n        j++;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n \
    \   assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"\
    ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"\
    abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    );\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpof4ffwy5.d(23): Error: cannot implicitly convert expression `str.length`
    of type `ulong` to `immutable(int)`

    /tmp/tmpof4ffwy5.d(31): Error: cannot modify `immutable` expression `k`

    /tmp/tmpof4ffwy5.d(35): Error: cannot modify `immutable` expression `0`

    /tmp/tmpof4ffwy5.d(36): Error: cannot modify `immutable` expression `0`

    /tmp/tmpof4ffwy5.d(39): Error: cannot modify `immutable` expression `i`

    /tmp/tmpof4ffwy5.d(40): Error: cannot modify `immutable` expression `0`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpof4ffwy5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    auto words = split(s);\n    string ret = \"\";\n    foreach(word; words)\n\
    \    {\n        char[] chars = word.dup;\n        sort(chars);\n        ret ~=\
    \ \" \" ~ chars;\n    }\n    return ret.retreat;\n}\nunittest\n{\n    alias candidate\
    \ = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"\
    hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n  \
    \  assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3r5bahyk.d(22): Error: undefined identifier `split`

    /tmp/tmp3r5bahyk.d(30): Error: no property `retreat` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3r5bahyk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string t = \"\";\n    bool isWord = false;\n    bool isBlank = false;\n\
    \    size_t startWord = 0;\n    size_t endWord = 0;\n    foreach(i, ch; s)\n \
    \   {\n        if(ch != ' ')\n        {\n            if(!isWord)\n           \
    \ {\n                isWord = true;\n                startWord = i;\n        \
    \    }\n            endWord = i;\n        }\n        else\n        {\n       \
    \     if(isWord)\n            {\n                string word = s[startWord..endWord+1];\n\
    \                t ~= std.array.array(chars(word)).sort().array;\n           \
    \     isWord = false;\n            }\n            t ~= \" \";\n        }\n   \
    \ }\n    if(isWord)\n    {\n        string word = s[startWord..endWord+1];\n \
    \       t ~= std.array.array(chars(word)).sort().array;\n    }\n    return t;\n\
    }\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"\
    Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"\
    number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqtmqrixn.d(43): Error: undefined identifier `array` in package
    `std`

    /tmp/tmpqtmqrixn.d(52): Error: undefined identifier `array` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqtmqrixn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    // --- insert your code here ---\n}\nunittest\n{\n    alias candidate\
    \ = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"\
    hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n  \
    \  assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpervk27vw.d(20): Error: function `tmpervk27vw.anti_shuffle` has
    no `return` statement, but is expected to return a value of type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpervk27vw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    // ascii: 97 to 122\n    //int[] asciiArr = new int[26];\n    int[,]\
    \ asciiArr = new int[2, 26];\n    int index = 0;\n    int i = 0;\n    int y =\
    \ 0;\n    int count = 0;\n    string sss = \"\";\n    string result = \"\";\n\
    \    string[] ss = s.split(\" \");\n    string[][] ss2 = new string[ss.length][];\n\
    \    string s2 = \"\";\n    foreach(z; ss)\n    {\n        foreach(c; z)\n   \
    \     {\n            index = c - 97;\n            if(asciiArr[0, index] == 0)\n\
    \            {\n                asciiArr[0, index] = c;\n                asciiArr[1,\
    \ index] = 1;\n            }\n            else\n            {\n              \
    \  asciiArr[1, index]++;\n            }\n        }\n        foreach(x; asciiArr)\n\
    \        {\n            if(x[1] != 0)\n            {\n                s2 ~= x[0];\n\
    \                x[1]--;\n            }\n        }\n        ss2[i] = new string[s2.length];\n\
    \        foreach(x; s2)\n        {\n            ss2[i][y] = x;\n            y++;\n\
    \        }\n        i++;\n        y = 0;\n        s2 = \"\";\n        asciiArr\
    \ = new int[2, 26];\n    }\n    foreach(x; ss2)\n    {\n        foreach(y; x)\n\
    \        {\n            sss ~= y;\n        }\n        result ~= sss ~ \" \";\n\
    \        sss = \"\";\n    }\n    return result.stripRight;\n}\nunittest \n{\n\
    \    assert(anti_shuffle(\"Hi\") == \"Hi\");\n    assert(anti_shuffle(\"hello\"\
    ) == \"ehllo\");\n    assert(anti_shuffle(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    );\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"\
    Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"\
    number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3ouetdpm.d(24): Error: expression expected, not `,`

    /tmp/tmp3ouetdpm.d(24): Error: found `,` when expecting `]`

    /tmp/tmp3ouetdpm.d(24): Error: semicolon expected, not `26`

    /tmp/tmp3ouetdpm.d(24): Error: found `]` when expecting `;` following statement

    /tmp/tmp3ouetdpm.d(24): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmp3ouetdpm.d(66): Error: found `,` when expecting `]`

    /tmp/tmp3ouetdpm.d(66): Error: found `26` when expecting `;` following statement

    /tmp/tmp3ouetdpm.d(66): Error: found `]` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3ouetdpm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string result = \"\";\n    auto ss = s.split;\n    foreach(w; ss) \n\
    \    {\n        result ~= to!string(w.sort);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\"\
    );\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\"\
    ) == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp05ja1pqn.d(23): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp05ja1pqn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string w[] = s.split(\" \");\n    string r[];\n    foreach(string a;\
    \ w)\n    {\n        if(a != \"\")\n        {\n            r ~= a.assign(a.sort());\n\
    \        }\n        else\n        {\n            r ~= \" \";\n        }\n    }\n\
    \    return r.join(\"\");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\
    \n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") ==\
    \ \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"\
    abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    );\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxne4tgoc.d(22): Deprecation: instead of C-style syntax, use D-style
    syntax `string[] w`

    /tmp/tmpxne4tgoc.d(23): Deprecation: instead of C-style syntax, use D-style syntax
    `string[] r`

    /tmp/tmpxne4tgoc.d(22): Error: no property `split` for type `string`

    /tmp/tmpxne4tgoc.d(28): Error: no property `assign` for type `string`

    /tmp/tmpxne4tgoc.d(35): Error: no property `join` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxne4tgoc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string[] words = split(s, \" \");\n    string[] result_words;\n   \
    \ foreach(string word; words)\n    {\n        result_words ~= sort(word);\n  \
    \  }\n    return join(result_words, \" \");\n}\nunittest\n{\n    alias candidate\
    \ = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"\
    hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n  \
    \  assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwip66kzf.d(22): Error: undefined identifier `split`

    /tmp/tmpwip66kzf.d(26): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmpwip66kzf.d(28): Error: undefined identifier `join`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwip66kzf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    auto result = Appender!string();\n    foreach(it; s.splitter())\n \
    \   {\n        if(it.length > 1)\n        {\n            it.sort!(a, b => a.ascii\
    \ < b.ascii);\n        }\n        result.put(it);\n    }\n    return result.data;\n\
    }\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"\
    Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"\
    number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmrspbld_.d(22): Error: template instance `Appender!string` template
    `Appender` is not defined

    /tmp/tmpmrspbld_.d(23): Error: no property `splitter` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmrspbld_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    // your solution goes here\n    size_t start=0;\n    string result=\"\
    \";\n    for(size_t i=0;i<s.length();i++)\n    {\n        if(s[i]==' ')\n    \
    \    {\n            string tmp=s[start..i];\n            sort(tmp.begin(),tmp.end());\n\
    \            result+=tmp;\n            start=i+1;\n        }\n    }\n    string\
    \ tmp=s[start..s.length()];\n    sort(tmp.begin(),tmp.end());\n    result+=tmp;\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n \
    \   assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"\
    ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"\
    abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    );\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpercrqa_k.d(25): Error: no property `length` for type `string`

    /tmp/tmpercrqa_k.d(30): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmpercrqa_k.d(31): Error: slice `result` is not mutable

    /tmp/tmpercrqa_k.d(35): Error: no property `length` for type `string`

    /tmp/tmpercrqa_k.d(36): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmpercrqa_k.d(37): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpercrqa_k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    // TODO: return ordered version of input string\n    string[] tokens\
    \ = s.split;\n    string ordered = \"\";\n    foreach(t; tokens)\n    {\n    \
    \    char[] chars = t.dup;\n        std.sort(chars);\n        ordered ~= chars;\n\
    \    }\n    return ordered;\n}\n// BEGIN TESTS\nunittest\n{\n    string s = \"\
    Hello World!!!\";\n    assert(anti_shuffle(s) == \"Hello !!!Wdlor\");\n}\n// END\
    \ TESTS\n// TODO: use foreach on arrays\nunittest\n{\n    alias candidate = anti_shuffle;\n\
    \n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") ==\
    \ \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"\
    abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    );\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbd779il7.d(23): Error: no property `split` for type `string`

    /tmp/tmpbd779il7.d(28): Error: undefined identifier `sort` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbd779il7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    auto output = \"\";\n    auto temp = \"\";\n    for (int i = 0; i <\
    \ s.length; i++) \n    {\n        if (s[i] == ' ') \n        {\n            output\
    \ ~= temp ~ \" \";\n            temp = \"\";\n        }\n        else \n     \
    \   {\n            temp ~= s[i];\n        }\n    }\n    if (temp.length != 0)\
    \ \n    {\n        output ~= temp;\n    }\n    output = replace(output, \" \"\
    , \"\").sort;\n    temp = \"\";\n    int j = 0;\n    for (int i = 0; i < s.length;\
    \ i++) \n    {\n        if (s[i] == ' ') \n        {\n            temp ~= \" \"\
    ;\n            j++;\n        }\n        else \n        {\n            temp ~=\
    \ output[j];\n            j++;\n        }\n    }\n    return temp;\n}\nunittest\n\
    {\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\"\
    );\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\"\
    ) == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3ok3sd0g.d(40): Error: undefined identifier `replace`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3ok3sd0g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    import std.algorithm : sort;\n    import std.functional : binaryFun;\n\
    \    import std.range : map;\n    import std.string : strip;\n    import std.array\
    \ : chunk;\n    auto words = strip(s, \" \").split(\" \");\n    auto result =\
    \ words.map!(w => w.sort).chunk(1).map!(a => a[0]).join(\" \");\n    return result;\n\
    }\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"\
    Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"\
    number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9ngcv00z.d(24): Error: module `std.range` import `map` not found

    /tmp/tmp9ngcv00z.d(26): Error: module `std.array` import `chunk` not found

    /tmp/tmp9ngcv00z.d(27): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9ngcv00z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164432
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string[] pieces = split(s, \" \");\n    string result = \"\";\n   \
    \ foreach(string word; pieces) {\n        string sorted = word.idup;\n       \
    \ sort(sorted);\n        result ~= sorted;\n    }\n    return result;\n}\n//+-+-+-+-\n\
    //int[string] counter (string data)\n//{\n//    int[string] ret = [\n//      \
    \  [\"a\", 0],\n//        [\"b\", 0],\n//        [\"c\", 0],\n//        [\"d\"\
    , 0],\n//        [\"e\", 0],\n//        [\"f\", 0],\n//        [\"g\", 0],\n//\
    \        [\"h\", 0],\n//        [\"i\", 0],\n//        [\"j\", 0],\n//       \
    \ [\"k\", 0],\n//        [\"l\", 0],\n//        [\"m\", 0],\n//        [\"n\"\
    , 0],\n//        [\"o\", 0],\n//        [\"p\", 0],\n//        [\"q\", 0],\n//\
    \        [\"r\", 0],\n//        [\"s\", 0],\n//        [\"t\", 0],\n//       \
    \ [\"u\", 0],\n//        [\"v\", 0],\n//        [\"w\", 0],\n//        [\"x\"\
    , 0],\n//        [\"y\", 0],\n//        [\"z\", 0],\n//    ];\n//    int len =\
    \ data.length;\n//    foreach(i; 0..len) {\n//        char letter = data[i];\n\
    //        string chr;\n//        chr ~= letter;\n//        chr = chr.toLower;\n\
    //        int[string]::length++;\n//        ret[chr]++;\n//    }\n//    return\
    \ ret;\n//}\n//\n//string anti_shuffle(string data) \n//{\n//    int[string] freq\
    \ = counter(data);\n//    int total_chars = freq.length;\n//    string out = \"\
    \";\n//    foreach(chr; freq) {\n//        int count = freq[chr];\n//        foreach(i;\
    \ 0..count) {\n//            out ~= chr;\n//        }\n//    }\n//\nunittest\n\
    {\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\"\
    );\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\"\
    ) == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph3t8mn24.d(22): Error: undefined identifier `split`

    /tmp/tmph3t8mn24.d(26): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph3t8mn24.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    return typeof(s).split(s, \" \")\n        .map!(a => a.map!(b => b).array.sort().join)\n\
    \        .join(\" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n\
    \    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") ==\
    \ \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"\
    abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    );\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0itgd1mc.d(22): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0itgd1mc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string[] s_array = split(s, \" \");\n    string result;\n    for (int\
    \ i = 0; i < s_array.length; i++)\n    {\n        s_array[i] = sort(s_array[i]);\n\
    \        if (i == 0)\n        {\n            result = s_array[i];\n        }\n\
    \        else\n        {\n            result = result ~ \" \" ~ s_array[i];\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\
    \n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") ==\
    \ \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"\
    abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    );\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsm7m_lq0.d(22): Error: undefined identifier `split`

    /tmp/tmpsm7m_lq0.d(26): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsm7m_lq0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    static auto key = q{'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',\
    \ 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};\n\
    \    auto m = map!(string)(char[]);\n    auto tmp = [];\n    foreach(i; 0 .. s.length)\
    \ \n    {\n        if(s[i] != ' ') \n        {\n            tmp ~= s[i];\n   \
    \     }\n        else \n        {\n            m[tmp.join] = tmp;\n          \
    \  tmp = [];\n        }\n    }\n    m[tmp.join] = tmp;\n    auto res = [];\n \
    \   foreach(i; 0 .. s.length) \n    {\n        if(s[i] != ' ') \n        {\n \
    \           res ~= m[tmp.join].front;\n            m[tmp.join].popFront;\n   \
    \     }\n        else \n        {\n            res ~= ' ';\n            tmp =\
    \ [];\n        }\n    }\n    return res.join;\n}\nunittest\n{\n    alias candidate\
    \ = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"\
    hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n  \
    \  assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptjkj5t6t.d(23): Error: found `[` when expecting `.` following char

    /tmp/tmptjkj5t6t.d(23): Error: found `]` when expecting identifier following `char`.

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptjkj5t6t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    import std.algorithm : sort;\n    import std.array : appender;\n  \
    \  import std.string : split;\n    import std.conv : to;\n    auto app = appender!string();\n\
    \    foreach(word; s.split)\n    {\n        auto a = to!(char[])(word);\n    \
    \    a.sort;\n        app.put(a);\n    }\n    return app.data;\n}\nstatic assert(anti_shuffle(\"\
    Hi\") == \"Hi\");\nstatic assert(anti_shuffle(\"hello\") == \"ehllo\");\nstatic\
    \ assert(anti_shuffle(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n```\nunittest\n\
    {\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\"\
    );\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\"\
    ) == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp57co6wdg.d(38): Error: declaration expected, not `""`

    /tmp/tmp57co6wdg.d(38): Error: unterminated string constant starting at /tmp/tmp57co6wdg.d(38)

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp57co6wdg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    auto words = split(s);\n    string ret;\n    foreach(w; words)\n  \
    \  {\n        sort(w.begin, w.end);\n        ret ~= w;\n    }\n    return ret;\n\
    }\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"\
    Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"\
    number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp68ahdl3x.d(22): Error: undefined identifier `split`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp68ahdl3x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    // YOUR CODE HERE\n    static if (is(typeof(s[0]) == dchar))\n    {\n\
    \        return std.algorithm.map!(a => a.sort().array.idup)(s.split).joiner.data;\n\
    \    }\n    else\n    {\n        return std.algorithm.map!(a => sort(a).array.idup)(s.split).joiner.data;\n\
    \    }\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"\
    Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"\
    number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf5hpu5r3.d(29): Error: undefined identifier `algorithm` in package
    `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf5hpu5r3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string ret;\n    uint n = s.length;\n    string[] words = s.split;\n\
    \    uint m = words.length;\n    uint[char[]] sorted_words;\n    sorted_words.length\
    \ = m;\n    foreach(i, word; words)\n    {\n        foreach(j, c; word)\n    \
    \    {\n            sorted_words[i] ~= c;\n        }\n        sorted_words[i].sort!(a,\
    \ b => a < b);\n    }\n    string[] sorted_words_str;\n    sorted_words_str.length\
    \ = m;\n    foreach(i, sw; sorted_words)\n    {\n        foreach(c; sw)\n    \
    \    {\n            sorted_words_str[i] ~= c;\n        }\n    }\n    uint idx\
    \ = 0;\n    foreach(i, word; words)\n    {\n        foreach(j, c; word)\n    \
    \    {\n            ret ~= sorted_words_str[i][j];\n            ++idx;\n     \
    \   }\n        while(s[idx] == ' ')\n        {\n            ret ~= ' ';\n    \
    \        ++idx;\n        }\n    }\n    return ret;\n}\n/*\nunittest\n{\n    alias\
    \ candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"\
    hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n  \
    \  assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6tukcj4o.d(61): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6tukcj4o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string temp =\"\";\n    string word =\"\";\n    string result =\"\"\
    ;\n    bool wordFound = false;\n    foreach(c; s)\n    {\n        if(c != ' ')\n\
    \        {\n            temp = c;\n            word = word ~ c;\n            wordFound\
    \ = true;\n        }\n        else if(c == ' ')\n        {\n            if(wordFound)\n\
    \            {\n                temp = temp.sort();\n                result =\
    \ result ~ temp;\n                wordFound = false;\n            }\n        \
    \    result = result ~ c;\n        }\n    }\n    if(wordFound)\n    {\n      \
    \  temp = temp.sort();\n        result = result ~ temp;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"\
    Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"\
    number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu79951ng.d(30): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmpu79951ng.d(38): Error: no property `sort` for type `string`

    /tmp/tmpu79951ng.d(47): Error: no property `sort` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu79951ng.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    auto words = s.split();\n    string result;\n    foreach(word; words)\n\
    \    {\n        char[] chars = word.dup;\n        sort(chars);\n        result\
    \ ~= chars;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"\
    hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n  \
    \  assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaw4ipf75.d(22): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaw4ipf75.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string[] words = s.split();\n    foreach(w; words)\n    {\n       \
    \ sort(w.begin(), w.end());\n    }\n    return join(words, \" \");\n}\nunittest\n\
    {\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\"\
    );\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\"\
    ) == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsbh83d_x.d(22): Error: no property `split` for type `string`

    /tmp/tmpsbh83d_x.d(25): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmpsbh83d_x.d(27): Error: undefined identifier `join`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsbh83d_x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    auto str = split(s, \" \");\n    string result;\n    foreach(word;\
    \ str)\n    {\n        result ~= join(sort(word.split(\"\")), \"\");\n       \
    \ result ~= \" \";\n    }\n    return result.trimRight();\n}\nunittest\n{\n  \
    \  alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n\
    \    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\"\
    ) == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpadjbrmo_.d(22): Error: undefined identifier `split`

    /tmp/tmpadjbrmo_.d(29): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpadjbrmo_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    import std.algorithm;\n    import std.array;\n    import std.conv;\n\
    \    import std.math;\n    import std.range;\n    import std.string;\n    import\
    \ std.typecons;\n    string[] words = s.split;\n    string[] result;\n    foreach(i,\
    \ word; words) \n    {\n        string[] letters = word.map!(a => a.toString).array;\n\
    \        letters.sort;\n        string temp = \"\";\n        foreach(j, elem;\
    \ letters) \n        {\n            temp ~= elem;\n        }\n        result ~=\
    \ temp;\n    }\n    return result.join(\" \");\n}\n/*\n    findMaxSubSequence\
    \ is a simple function that takes an integer array,\n    and return the maximum\
    \ sub-sequence.\n    A sub-sequence is the elements that are in ascending order.\n\
    \    i.e. {5, 2, 4, 1, 3} sub-sequences are [5], [2], [2, 4], [1], [1, 3], [1,\
    \ 3, 5]\n    Note that the length of the sub-sequence is not necessary the length\
    \ of the array.\n    The sub-sequence can be as small as 1 element.\n    Your\
    \ task is to write the findMaxSubSequence function.\nunittest\n{\n    alias candidate\
    \ = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"\
    hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n  \
    \  assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4j0zmz30.d(44): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4j0zmz30.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    assert(isInputString(s));\n    string r = \"\";\n    foreach(word;\
    \ split(s))\n    {\n        string r2 = \"\";\n        foreach(char ch; word)\n\
    \        {\n            r2 ~= ch;\n        }\n        r ~= sort(r2);\n       \
    \ r ~= \" \";\n    }\n    return r;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\
    \n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") ==\
    \ \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"\
    abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    );\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkrzurgyd.d(22): Error: undefined identifier `isInputString`

    /tmp/tmpkrzurgyd.d(24): Error: undefined identifier `split`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkrzurgyd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    static if(is(typeof(s[0]) == dchar))\n    {\n        string[] words\
    \ = split(s, \" \");\n        string[] result = new string[words.length];\n  \
    \      for(size_t i = 0; i < words.length; i++)\n        {\n            char[]\
    \ word_chars = to!(char[])(words[i]);\n            std.algorithm.sort(word_chars);\n\
    \            result[i] = to!string(word_chars);\n        }\n        return join(result,\
    \ \" \");\n    }\n    else\n    {\n        immutable(char)[] words = split(s,\
    \ \" \");\n        immutable(char)[] result = new immutable(char)[words.length];\n\
    \        for(size_t i = 0; i < words.length; i++)\n        {\n            immutable(char)[]\
    \ word_chars = to!(immutable(char)[]) (words[i]);\n            std.algorithm.sort(word_chars);\n\
    \            result[i] = to!string(word_chars);\n        }\n        return join(result,\
    \ \" \");\n    }\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"\
    Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"\
    number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr5ucmn4q.d(36): Error: undefined identifier `split`

    /tmp/tmpr5ucmn4q.d(40): Error: template instance `to!(string)` template `to` is
    not defined, did you mean No?

    /tmp/tmpr5ucmn4q.d(41): Error: undefined identifier `algorithm` in package `std`

    /tmp/tmpr5ucmn4q.d(42): Error: template instance `to!string` template `to` is
    not defined, did you mean No?

    /tmp/tmpr5ucmn4q.d(44): Error: undefined identifier `join`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr5ucmn4q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    auto anti_order = [](string s) {\n        // Given a string, return\
    \ a string where all\n        // characters are ordered according to their\n \
    \       // ascii value.\n        string ret;\n        foreach(ch; s)\n       \
    \     if(!ret.empty && ret.back > ch)\n                ret = ret[0..$-1] ~ ch\
    \ ~ ret[$-1..$];\n            else\n                ret ~= ch;\n        return\
    \ ret;\n    };\n    string ret;\n    bool space_prev = true;\n    foreach(ch;\
    \ s)\n    {\n        if(ch == ' ')\n        {\n            space_prev = true;\n\
    \            ret ~= ch;\n        }\n        else\n        {\n            if(space_prev)\n\
    \            {\n                space_prev = false;\n                ret ~= anti_order(ch);\n\
    \            }\n            else\n                ret ~= ch;\n        }\n    }\n\
    \    return ret;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"\
    Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"\
    number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy_b8osqg.d(22): Error: found `s` when expecting `,`

    /tmp/tmpy_b8osqg.d(22): Error: semicolon expected following auto declaration,
    not `{`

    /tmp/tmpy_b8osqg.d(33): Deprecation: use `{ }` for an empty statement, not `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy_b8osqg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string[] words = split(s);\n    string [] res = new string[words.length];\n\
    \    for (size_t i = 0; i < words.length; i++)\n    {\n        char[] a = to!(char[])(words[i]);\n\
    \        sort(a);\n        res[i] = to!string(a);\n    }\n    return join(res);\n\
    }\n/*\n    Write a function that takes a string, and a tuple with the\n    key\
    \ value pairs (int, char), and returns a tuple with the string\n    contents that\
    \ matches the key, and the value of the mapping.\nunittest\n{\n    alias candidate\
    \ = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"\
    hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n  \
    \  assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbx60abyy.d(32): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbx60abyy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    auto words = s.split();\n    auto shuffled_words = map!((string word)\
    \ => sort(word))(words);\n    return zip(words, shuffled_words).join();\n}\nunittest\n\
    {\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\"\
    );\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\"\
    ) == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8u8di1ed.d(22): Error: no property `split` for type `string`

    /tmp/tmp8u8di1ed.d(23): Error: template instance `map!((string word) => sort(word))`
    template `map` is not defined

    /tmp/tmp8u8di1ed.d(24): Error: undefined identifier `zip`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8u8di1ed.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n\tstring result = \"\";\n\tstring[] words = s.split(\" \");\n\tforeach(word;\
    \ words)\n\t{\n\t\tstring new_word = word.sort();\n\t\tresult ~= new_word;\n\t\
    \tif(word != words[$-1])\n\t\t\tresult ~= \" \";\n\t}\n\treturn result;\n}\nunittest\n\
    {\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\"\
    );\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\"\
    ) == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpccsjx1t_.d(23): Error: no property `split` for type `string`

    /tmp/tmpccsjx1t_.d(26): Error: no property `sort` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpccsjx1t_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string word;\n    string result;\n    foreach(ch; s)\n    {\n     \
    \   if(ch == ' ')\n        {\n            result ~= word;\n            result\
    \ ~= ' ';\n            word = \"\";\n        }\n        else\n        {\n    \
    \        word ~= ch;\n        }\n    }\n    result ~= word;\n    return result;\n\
    }\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"\
    Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"\
    number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp73u3ki8m.d(45): unittest failure

    ----------------

    ??:? _d_unittestp [0x4280d5]

    ??:? void tmp73u3ki8m.__unittest_L40_C1() [0x427c2d]

    ??:? void tmp73u3ki8m.__modtest() [0x427e58]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c81b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b72a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430051]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430500]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ffdd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b701]

    ??:? runModuleUnitTests [0x42c5f1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428524]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    auto tokens = s.split(\" \");\n    string result;\n    foreach(str;\
    \ tokens)\n    {\n        result ~= str.chunks!(a => a.isAlpha).map!(a => a.sort).join;\n\
    \        result ~= \" \";\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\"\
    );\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\"\
    ) == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2oe2nv0n.d(22): Error: no property `split` for type `string`

    /tmp/tmp2oe2nv0n.d(29): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2oe2nv0n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string[] words = split(s);\n    string new_string = \"\";\n    foreach(string\
    \ word; words) {\n        string sorted_word = sort(word);\n        new_string\
    \ ~= sorted_word;\n    }\n    return new_string;\n}\nunittest\n{\n    alias candidate\
    \ = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"\
    hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n  \
    \  assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8fb3jssp.d(22): Error: undefined identifier `split`

    /tmp/tmp8fb3jssp.d(25): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8fb3jssp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    return \"\";\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\
    \n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") ==\
    \ \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"\
    abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    );\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\
    );\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp1udl14oy.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427fbd]

    ??:? void tmp1udl14oy.__unittest_L24_C1() [0x427ac6]

    ??:? void tmp1udl14oy.__modtest() [0x427d3c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc67]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab76]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc8d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43013c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc19]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab4d]

    ??:? runModuleUnitTests [0x42ba3d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42840c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    import std.algorithm.comparison : equal;\n    string[] words = s.split(\"\
    \ \");\n    string res = \"\";\n    foreach(i, word; words) {\n        string\
    \ sorted_word = word.dup;\n        std.algorithm.sort(sorted_word);\n        string\
    \ sorted_letters = word.filter!(c => c.isLetter).dup;\n        std.algorithm.sort(sorted_letters);\n\
    \        if (equal(sorted_word, sorted_letters))\n            res ~= sorted_word;\n\
    \        else\n            res ~= word;\n        if (i < words.length - 1)\n \
    \           res ~= \" \";\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"\
    hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n  \
    \  assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7fnioemd.d(23): Error: no property `split` for type `string`

    /tmp/tmp7fnioemd.d(27): Deprecation: package `std.algorithm` is not accessible
    here

    /tmp/tmp7fnioemd.d(27): Error: undefined identifier `sort` in package `std.algorithm`

    /tmp/tmp7fnioemd.d(28): Error: no property `filter` for type `string`

    /tmp/tmp7fnioemd.d(29): Deprecation: package `std.algorithm` is not accessible
    here

    /tmp/tmp7fnioemd.d(29): Error: undefined identifier `sort` in package `std.algorithm`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7fnioemd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    return \"\".idup.sort.join;\n}\n/*\n    Write a function that takes\
    \ an order and returns the total of a\n    lunch order. The order will be a dictionary\
    \ where the keys are the\n    item, and the value is the amount.\n    The total\
    \ cost of the order should be a formatted price, e.g. $12.50.\nunittest\n{\n \
    \   alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\"\
    );\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\"\
    ) == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsfeggvvn.d(24): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsfeggvvn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string result = \"\";\n    int count = 0;\n    string[] arr;\n    foreach(c;\
    \ s)\n    {\n        if(c == ' ')\n        {\n            count++;\n        }\n\
    \    }\n    string[] arr = new string[count + 1];\n    int i = 0;\n    foreach(c;\
    \ s)\n    {\n        if(c == ' ')\n        {\n            i++;\n        }\n  \
    \      else\n        {\n            arr[i] ~= c;\n        }\n    }\n    foreach(e;\
    \ arr)\n    {\n        e.sort;\n        result ~= e;\n        result ~= ' ';\n\
    \    }\n    return result[0..$-1];\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\
    \n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") ==\
    \ \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"\
    abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    );\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyr4cbv8y.d(32): Error: declaration `tmpyr4cbv8y.anti_shuffle.arr`
    is already defined

    /tmp/tmpyr4cbv8y.d(47): Error: no property `sort` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyr4cbv8y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    auto words = split(s);\n    string out;\n    foreach(word; words)\n\
    \    {\n        ubyte[] w = to!ubyte(word);\n        sort(w);\n        out ~=\
    \ to!string(w);\n    }\n    return out;\n}\nunittest\n{\n    alias candidate =\
    \ anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"\
    hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n  \
    \  assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppaz4rjf6.d(23): Error: found `out` when expecting `;` following
    statement

    /tmp/tmppaz4rjf6.d(23): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmppaz4rjf6.d(28): Error: found `out` instead of statement

    /tmp/tmppaz4rjf6.d(30): Error: expression expected, not `out`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppaz4rjf6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    import std.algorithm : iota, sort;\n    import std.conv : to;\n   \
    \ import std.string : splitter, split;\n    stringBuilder result;\n    foreach(word;\
    \ splitter(s, splitter.words))\n    {\n        if(word.length == 1)\n        {\n\
    \            result ~= word;\n            continue;\n        }\n        else\n\
    \        {\n            int[] sorted = word.iota.sort;\n            foreach(i;\
    \ sorted)\n            {\n                result ~= word[i];\n            }\n\
    \        }\n    }\n    return result.toString();\n}\nunittest\n{\n    assert(anti_shuffle(\"\
    Hi\") == \"Hi\");\n    assert(anti_shuffle(\"hello\") == \"ehllo\");\n    assert(anti_shuffle(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n}\nunittest\n{\n    alias candidate\
    \ = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"\
    hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n  \
    \  assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi7qkyp1c.d(22): Error: module `std.algorithm` import `iota` not
    found

    /tmp/tmpi7qkyp1c.d(24): Error: module `std.string` import `splitter` not found

    /tmp/tmpi7qkyp1c.d(25): Error: undefined identifier `stringBuilder`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi7qkyp1c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164432
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    /*\n    char[] dchar = s.dup.chars;\n    auto chars = appender!(dchar[]);\n\
    \    int length = s.length;\n    foreach(dchar; s)\n    {\n        if(dchar ==\
    \ ' ')\n        {\n            chars.put(dchar);\n        }\n        else\n  \
    \      {\n            auto sorted_dchar = std.algorithm.sort(dchar);\n       \
    \     chars.put(sorted_dchar);\n        }\n    }\n    return chars.data;\n   \
    \ */\n    auto spaces = appender!(bool[]);\n    string[] words = s.split;\n  \
    \  foreach(word; words)\n    {\n        spaces.put(false);\n        foreach(c;\
    \ word)\n        {\n            if(c == ' ')\n            {\n                spaces.put(true);\n\
    \            }\n        }\n    }\n    writeln(spaces.data);\n    \n    return\
    \ s;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"\
    Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"\
    number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnd9jwrbu.d(40): Error: template instance `appender!(bool[])` template
    `appender` is not defined

    /tmp/tmpnd9jwrbu.d(41): Error: no property `split` for type `string`

    /tmp/tmpnd9jwrbu.d(53): Error: `writeln` is not defined, perhaps `import std.stdio;`
    is needed?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnd9jwrbu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string result;\n    foreach(word; s.split(\" \")) \n    {\n       \
    \ if(word.length > 1) \n        {\n            auto tuple = sort(word.dup);\n\
    \            result ~= tuple[0];\n        } \n        else \n        {\n     \
    \       result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\"\
    );\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\"\
    ) == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpibxvkvdf.d(23): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpibxvkvdf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    import std.range : sort;\n    import std.algorithm : map;\n    import\
    \ std.algorithm : joiner;\n    import std.array : array;\n    import std.conv\
    \ : to;\n    import std.string : split;\n    import std.array : sort;\n    import\
    \ std.range : iota;\n    auto x = s.split;\n    /////////////////////////////////\n\
    \    auto y = x.map!(a => a.to!string.sort).joiner(\"\").array;\n    foreach(ref\
    \ x; iota(0, y.length))\n    {\n        if(y[x].length == 1)\n        {\n    \
    \        continue;\n        }\n        else\n        {\n            if(y[x][0]\
    \ == ' ')\n            {\n                y[x] = \" \"+y[x][1..$];\n         \
    \   }\n        }\n    }\n    /////////////////////////////////\n    return y.joiner(\"\
    \");\n}\n//Example test run\nunittest\n{\n    alias candidate = anti_shuffle;\n\
    \n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") ==\
    \ \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"\
    abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    );\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpifnzpbiu.d(22): Error: module `std.range` import `sort` not found

    /tmp/tmpifnzpbiu.d(28): Error: module `std.array` import `sort` not found

    /tmp/tmpifnzpbiu.d(32): Error: template `std.algorithm.iteration.joiner` cannot
    deduce function from argument types `!()(MapResult!(__lambda2, string[]), string)`,
    candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/algorithm/iteration.d(2155):        `std.algorithm.iteration.joiner(RoR,
    Separator)(RoR r, Separator sep) if (isInputRange!RoR && isInputRange!(ElementType!RoR)
    && isForwardRange!Separator && is(ElementType!Separator : ElementType!(ElementType!RoR)))`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/algorithm/iteration.d(2474):        `std.algorithm.iteration.joiner(RoR)(RoR
    r) if (isInputRange!RoR && isInputRange!(ElementType!RoR))`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpifnzpbiu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164432
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    \n    string[] words = s.split();\n    string result = \"\";\n    foreach(string\
    \ word; words)\n    {\n        string line = \"\";\n        foreach(string letter;\
    \ word.split)\n        {\n            line ~= letter;\n        }\n        line.sort!(a,\
    \ b => a < b);\n        result ~= line ~ \" \";\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"\
    Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"\
    number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp06hgjbaw.d(23): Error: no property `split` for type `string`

    /tmp/tmp06hgjbaw.d(28): Error: no property `split` for type `string`

    /tmp/tmp06hgjbaw.d(32): Error: no property `sort` for type `string`

    /tmp/tmp06hgjbaw.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp06hgjbaw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    char[] arr = to!char[](s);\n    int cursor = 0;\n    char[] word_buffer;\n\
    \    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] == ' ')\n\
    \        {\n            char[] res = to!char[](s[0..cursor]);\n            res\
    \ ~= word_buffer;\n            res ~= arr[i..$];\n            return to!string(res);\n\
    \        }\n        else\n        {\n            word_buffer ~= arr[i];\n    \
    \        word_buffer.sort();\n            cursor++;\n        }\n    }\n    char[]\
    \ res = to!char[](s[0..cursor]);\n    res ~= word_buffer;\n    return to!string(res);\n\
    }\n/*\n    Write a function that takes a string and returns true if it's\n   \
    \ a palindrome or false if it isn't. \n    Note: You should ignore spaces and\
    \ capitalization.\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"\
    Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"\
    number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp14whn9fe.d(45): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp14whn9fe.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string r;\n    foreach(ss; s.split(\" \"))\n    {\n        string[]\
    \ temp;\n        foreach(s2; ss)\n        {\n            temp ~= s2;\n       \
    \ }\n        std.algorithm.sort(temp);\n        foreach(ss2; temp)\n        {\n\
    \            r ~= ss2;\n        }\n        r ~= \" \";\n    }\n    return r;\n\
    }\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"\
    Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"\
    number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphw_49re3.d(23): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphw_49re3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string[] words = split(s);\n    foreach(string w; words) \n    {\n\
    \        w = w.sort().array();\n    }\n    return join(words, \" \");\n}\nunittest\n\
    {\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\"\
    );\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\"\
    ) == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpflzuh1g0.d(22): Error: undefined identifier `split`

    /tmp/tmpflzuh1g0.d(25): Error: no property `sort` for type `string`

    /tmp/tmpflzuh1g0.d(27): Error: undefined identifier `join`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpflzuh1g0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    auto words = split(s);\n    string ans = \"\";\n    foreach(char[]\
    \ word; words)\n    {\n        char[] w = word;\n        sort(w);\n        append(ans,\
    \ w);\n    }\n    return ans;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\
    \n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") ==\
    \ \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"\
    abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    );\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkg1dfb4b.d(22): Error: undefined identifier `split`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkg1dfb4b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    return std.algorithm.sort.sort(s);\n}\nunittest\n{\n    alias candidate\
    \ = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"\
    hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n  \
    \  assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplna41arq.d(22): Error: undefined identifier `algorithm` in package
    `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplna41arq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    s = s.toLowerCase;\n    string[] words = s.split(\" \");\n    string[]\
    \ sortedWords = words.dup;\n    foreach(w; words)\n    {\n        auto sorted\
    \ = w.dup;\n        sort(sorted);\n        sortedWords[w] = sorted;\n    }\n \
    \   return sortedWords.join(\" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\
    \n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") ==\
    \ \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"\
    abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    );\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6f2erdif.d(22): Error: no property `toLowerCase` for type `string`

    /tmp/tmp6f2erdif.d(23): Error: no property `split` for type `string`

    /tmp/tmp6f2erdif.d(28): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmp6f2erdif.d(29): Error: cannot implicitly convert expression `w` of type
    `string` to `ulong`

    /tmp/tmp6f2erdif.d(31): Error: no property `join` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6f2erdif.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    auto words = split(s);\n    string result;\n    for (int i = 0; i <\
    \ words.length; i++) \n    {\n        auto current = words[i];\n        auto ary\
    \ = current.array;\n        sort(ary);\n        result ~= ary.join;\n        if\
    \ (i < words.length - 1) \n        {\n            result ~= \" \";\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\
    \n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") ==\
    \ \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"\
    abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    );\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpthiop1dy.d(22): Error: undefined identifier `split`

    /tmp/tmpthiop1dy.d(28): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpthiop1dy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    auto myString = split(s);\n    string result;\n    foreach(i; myString)\n\
    \    {\n        string tmp;\n        foreach(j; i)\n        {\n            tmp\
    \ ~= j;\n        }\n        sort(tmp);\n        result ~= tmp;\n    }\n    return\
    \ result;\n}\n/*\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"\
    Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"\
    number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvq7k4a8_.d(36): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvq7k4a8_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    // Write your code here\n    string result = \"\";\n    foreach(auto\
    \ word; s.split(\" \"))\n    {\n        auto wordArray = word.dup;\n        sort(wordArray);\n\
    \        result ~= wordArray;\n        result ~= \" \";\n    }\n    return result[0..$-1];\n\
    }\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"\
    Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"\
    number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw43_b05e.d(24): Error: basic type expected, not `auto`

    /tmp/tmpw43_b05e.d(24): Error: no identifier for declarator `_error_`

    /tmp/tmpw43_b05e.d(24): Error: found `auto` when expecting `;`

    /tmp/tmpw43_b05e.d(24): Error: found `;` when expecting `)`

    /tmp/tmpw43_b05e.d(24): Error: found `)` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw43_b05e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string c;\n    foreach(word;splitter(s,\" \"))\n    {\n        foreach(c;\
    \ sort(word))\n        {\n            c ~= c;\n        }\n        c ~= \" \";\n\
    \    }\n    return c;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n\
    \    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") ==\
    \ \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"\
    abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    );\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0omvclar.d(23): Error: undefined identifier `splitter`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0omvclar.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    return \"\";\n}\nunittest\n{\n    alias candidate\
    \ = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"\
    hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n  \
    \  assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmps5y838z2.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x427fbd]

    ??:? void tmps5y838z2.__unittest_L40_C1() [0x427ac6]

    ??:? void tmps5y838z2.__modtest() [0x427d3c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc67]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab76]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc8d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43013c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc19]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab4d]

    ??:? runModuleUnitTests [0x42ba3d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42840c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164432
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string res = \"\";\n    foreach(immutable word; s.split())\n    {\n\
    \        string[char] chars = new string[char];\n        int i = 0;\n        foreach(immutable\
    \ c; word)\n        {\n            chars[i] = c;\n            i++;\n        }\n\
    \        i = 0;\n        std.algorithm.sort(chars);\n        foreach(immutable\
    \ c; chars)\n        {\n            res ~= c;\n        }\n        res ~= \" \"\
    ;\n    }\n    return res;\n}\n/*\n    Write a function that takes a string and\
    \ returns a tuple where\n    the first element is a list of the unique words\n\
    \    and the second element is a list of the unique words that can be found\n\
    \    in the Shuffled dictionary.\nunittest\n{\n    alias candidate = anti_shuffle;\n\
    \n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") ==\
    \ \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"\
    abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    );\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfosgbx4t.d(25): Error: need size of rightmost array, not type `char`

    /tmp/tmpfosgbx4t.d(42): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfosgbx4t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string res = \"\";\n    foreach(immutable w; s.split)\n    {\n    \
    \    string sorted_w = w.array;\n        sort(sorted_w);\n        res ~= sorted_w;\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\
    \n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") ==\
    \ \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"\
    abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    );\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaoxwomwm.d(23): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaoxwomwm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    // YOUR CODE GOES HERE\n    \n    return s;\n}\nunittest\n{\n    alias\
    \ candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"\
    hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n  \
    \  assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvjwkd71g.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x427fc5]

    ??:? void tmpvjwkd71g.__unittest_L26_C1() [0x427b1d]

    ??:? void tmpvjwkd71g.__modtest() [0x427d48]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc6f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab7e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc95]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430144]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc21]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab55]

    ??:? runModuleUnitTests [0x42ba45]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428414]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164432
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    import std.conv;\n    auto result = \"\";\n    foreach(word; s.split(\"\
    \ \"))\n    {\n        auto sorted = word.to!string().dup.sort;\n        result\
    \ ~= sorted ~ \" \";\n    }\n    return result.stripRight;\n}\nunittest\n{\n \
    \   alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\"\
    );\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\"\
    ) == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpopqabugl.d(24): Error: no property `split` for type `string`

    /tmp/tmpopqabugl.d(29): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpopqabugl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string r;\n    int i = 0;\n    for (auto c : s)\n    {\n        if\
    \ (c != ' ')\n        {\n            r ~= c;\n        }\n        else \n     \
    \   {\n            sort(r.begin(), r.end());\n            s[i..i+r.length] = r;\n\
    \            r = \"\";\n            i++;\n        }\n        i++;\n    }\n   \
    \ return s;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"\
    Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"\
    number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv17j9eaq.d(24): Error: no identifier for declarator `c`

    /tmp/tmpv17j9eaq.d(24): Error: expression expected, not `:`

    /tmp/tmpv17j9eaq.d(24): Error: found `s` when expecting `;` following `for` condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv17j9eaq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string result = \"\";\n    string temp = \"\";\n    char[] new_word;\n\
    \    foreach(c; s) \n    {\n        if(c == ' ') \n        {\n            new_word\
    \ = temp.dup;\n            sort(new_word);\n            result ~= new_word;\n\
    \            result ~= c;\n            temp = \"\";\n        } \n        else\
    \ \n        {\n            temp ~= c;\n        }\n    }\n    if(temp != \"\")\
    \ \n    {\n        new_word = temp.dup;\n        sort(new_word);\n        result\
    \ ~= new_word;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"\
    hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n  \
    \  assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphw1v4mwk.d(30): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmphw1v4mwk.d(43): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphw1v4mwk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string res;\n    int i = 0;\n    foreach(ch;s)\n    {\n        if(ch\
    \ == ' ')\n        {\n            res ~= ' ';\n            i = 0;\n        }\n\
    \        else\n        {\n            int current = char.to!int(ch);\n       \
    \     if(i > 0)\n            {\n                foreach(j, char;res)\n       \
    \         {\n                    if(char == ' ')\n                        break;\n\
    \                    int val = char.to!int;\n                    if(current <\
    \ val)\n                    {\n                        res = res[0..j] ~ ch ~\
    \ res[j..$];\n                        current = -1;\n                        break;\n\
    \                    }\n                }\n            }\n            if(current\
    \ != -1)\n                res ~= ch;\n            i++;\n        }\n    }\n   \
    \ return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"\
    Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"\
    number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6v4rmrjl.d(33): Error: semicolon expected, not `!`

    /tmp/tmp6v4rmrjl.d(36): Error: no identifier for declarator `char`

    /tmp/tmp6v4rmrjl.d(38): Error: found `==` when expecting `.` following char

    /tmp/tmp6v4rmrjl.d(38): Error: found `32U` when expecting identifier following
    `char`.

    /tmp/tmp6v4rmrjl.d(40): Error: semicolon expected, not `!`

    /tmp/tmp6v4rmrjl.d(40): Error: found `;` when expecting `.` following int

    /tmp/tmp6v4rmrjl.d(41): Error: found `if` when expecting identifier following
    `int`.

    /tmp/tmp6v4rmrjl.d(42): Error: found `{` when expecting `;` following statement

    /tmp/tmp6v4rmrjl.d(54): Error: declaration expected, not `return`

    /tmp/tmp6v4rmrjl.d(55): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6v4rmrjl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    auto lower = toLower(s);\n    string anti_shuffled;\n    auto words\
    \ = split(lower, \" \");\n    foreach(word; words)\n    {\n        auto sorted\
    \ = sort(to!(dchar[])(word));\n        auto new_word = to!string(sorted);\n  \
    \      anti_shuffled ~= new_word ~ \" \";\n    }\n    return anti_shuffled;\n\
    }\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"\
    Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"\
    number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx69ave65.d(22): Error: undefined identifier `toLower`

    /tmp/tmpx69ave65.d(24): Error: undefined identifier `split`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx69ave65.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    if (s.length == 0) return \"\";\n    auto a = s.split(\" \");\n   \
    \ string res = \"\";\n    foreach (it; a)\n    {\n        string x = *it;\n  \
    \      sort!(\"a < b\")(x);\n        res ~= x ~ \" \";\n    }\n    return res.stripRight;\n\
    }\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"\
    Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"\
    number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvssu47k1.d(23): Error: no property `split` for type `string`

    /tmp/tmpvssu47k1.d(31): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvssu47k1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    auto words = split(s);\n    string result;\n    foreach(word; words)\
    \ {\n        result ~= join(sort(word));\n    }\n    return result;\n}\n//  \n\
    //  v2\n//\nstring anti_shuffle(string s) \n{\n    string result;\n    foreach(word;\
    \ split(s)) {\n        result ~= join(sort(word));\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"\
    Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"\
    number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvi4zr9_c.d(22): Error: undefined identifier `split`

    /tmp/tmpvi4zr9_c.d(35): Error: undefined identifier `split`

    /tmp/tmpvi4zr9_c.d(44): Error: `tmpvi4zr9_c.anti_shuffle` called with argument
    types `(string)` matches both:

    /tmp/tmpvi4zr9_c.d(20):     `tmpvi4zr9_c.anti_shuffle(string s)`

    and:

    /tmp/tmpvi4zr9_c.d(32):     `tmpvi4zr9_c.anti_shuffle(string s)`

    /tmp/tmpvi4zr9_c.d(45): Error: `tmpvi4zr9_c.anti_shuffle` called with argument
    types `(string)` matches both:

    /tmp/tmpvi4zr9_c.d(20):     `tmpvi4zr9_c.anti_shuffle(string s)`

    and:

    /tmp/tmpvi4zr9_c.d(32):     `tmpvi4zr9_c.anti_shuffle(string s)`

    /tmp/tmpvi4zr9_c.d(46): Error: `tmpvi4zr9_c.anti_shuffle` called with argument
    types `(string)` matches both:

    /tmp/tmpvi4zr9_c.d(20):     `tmpvi4zr9_c.anti_shuffle(string s)`

    and:

    /tmp/tmpvi4zr9_c.d(32):     `tmpvi4zr9_c.anti_shuffle(string s)`

    /tmp/tmpvi4zr9_c.d(47): Error: `tmpvi4zr9_c.anti_shuffle` called with argument
    types `(string)` matches both:

    /tmp/tmpvi4zr9_c.d(20):     `tmpvi4zr9_c.anti_shuffle(strin'
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string[] words = s.split(\" \");\n    string ordered_string = \"\"\
    ;\n    foreach(word; words)\n    {\n        foreach(char c; word)\n        {\n\
    \            if (c == ' ')\n            {\n                ordered_string ~= \"\
    \ \";\n            }\n            else\n            {\n                ordered_string\
    \ ~= c;\n            }\n        }\n        ordered_string ~= \" \";\n    }\n \
    \   return ordered_string;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\
    \n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") ==\
    \ \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"\
    abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    );\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxe8jmgq7.d(22): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxe8jmgq7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    static auto sortChars = (string s) {\n        return s.sort();\n  \
    \  };\n    static auto sortWords = (string s) {\n        return s.split.map!sortChars.join;\n\
    \    };\n    return sortWords(s);\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\
    \n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") ==\
    \ \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"\
    abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    );\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpulgxcyt4.d(23): Error: no property `sort` for type `string`

    /tmp/tmpulgxcyt4.d(26): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpulgxcyt4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string result;\n    foreach(auto word; s.split(\" \"))\n    {\n   \
    \     auto chars = word.dup;\n        // sort in place\n        std.algorithm.sort(chars);\n\
    \        result ~= chars;\n        result ~= \" \";\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"\
    Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"\
    number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmbltusmx.d(23): Error: basic type expected, not `auto`

    /tmp/tmpmbltusmx.d(23): Error: no identifier for declarator `_error_`

    /tmp/tmpmbltusmx.d(23): Error: found `auto` when expecting `;`

    /tmp/tmpmbltusmx.d(23): Error: found `;` when expecting `)`

    /tmp/tmpmbltusmx.d(23): Error: found `)` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmbltusmx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    // TODO\n    auto newString = \"\";\n    auto words = split(s);\n \
    \   foreach(n, x; words)\n    {\n        newString ~= x.toUpper().sort;\n    \
    \    if(n != words.length - 1)\n            newString ~= \" \";\n    }\n    return\
    \ newString;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"\
    Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"\
    number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp55_zgpyv.d(24): Error: undefined identifier `split`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp55_zgpyv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{ \n    // Write your code here\n    // ...\n    return \"\";\n}\nunittest\n\
    {\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\"\
    );\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\"\
    ) == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp36gym71n.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x427fbd]

    ??:? void tmp36gym71n.__unittest_L26_C1() [0x427ac6]

    ??:? void tmp36gym71n.__modtest() [0x427d3c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc67]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab76]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc8d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43013c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc19]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab4d]

    ??:? runModuleUnitTests [0x42ba3d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42840c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164432
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string out;\n    auto chars = s.split(\" \");\n    foreach(word; chars)\n\
    \    {\n        if(word.length == 1)\n        {\n            out ~= word;\n  \
    \      }\n        else if(word.length == 2)\n        {\n            out ~= word[0]\
    \ ~ word[1];\n        }\n        else\n        {\n            char temp;\n   \
    \         auto wc = to!(wchar[])(word);\n            auto w = to!(wchar[])(word);\n\
    \            foreach( i; 1..w.length-1)\n            {\n                if(w[i]\
    \ < w[i-1])\n                {\n                    temp = w[i];\n           \
    \         w[i] = w[i-1];\n                    w[i-1] = temp;\n               \
    \     for(int j = i; j>0; j--)\n                    {\n                      \
    \  if(w[j] < w[j-1])\n                        {\n                            temp\
    \ = w[j];\n                            w[j] = w[j-1];\n                      \
    \      w[j-1] = temp;\n                        }\n                    }\n    \
    \            }\n            }\n            out ~= to!string(w);\n        }\n \
    \       out ~= \" \";\n    }\n    return out[0..$-1];\n}\nunittest\n{\n    alias\
    \ candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"\
    hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n  \
    \  assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprh2ha1n4.d(22): Error: found `out` when expecting `;` following
    statement

    /tmp/tmprh2ha1n4.d(22): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmprh2ha1n4.d(28): Error: found `out` instead of statement

    /tmp/tmprh2ha1n4.d(32): Error: found `out` instead of statement

    /tmp/tmprh2ha1n4.d(57): Error: found `out` instead of statement

    /tmp/tmprh2ha1n4.d(59): Error: found `out` instead of statement

    /tmp/tmprh2ha1n4.d(61): Error: expression expected, not `out`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprh2ha1n4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    auto str = split(s);\n    string result;\n    foreach(i,a;str)\n  \
    \  {\n        string tmp=\"\";\n        foreach(j,b;a)\n        {\n          \
    \  tmp~=b;\n        }\n        sort(tmp);\n        result~=tmp;\n        result~=\"\
    \ \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\
    \n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") ==\
    \ \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"\
    abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    );\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwn5k54pw.d(22): Error: undefined identifier `split`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwn5k54pw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    immutable uint[] n = sort!((uint l, uint r) => l < r)(s.byGrapheme.map!(w\
    \ => w.ord));\n    return n.byGrapheme.map!(g => cast(dchar)g).joiner.toString();\n\
    }\n/*\n    Write a function that takes a string and returns an ordered version\
    \ of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\nunittest\n{\n    alias candidate\
    \ = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"\
    hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n  \
    \  assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_sgbc0wn.d(25): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_sgbc0wn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string[] result;\n    foreach(element; s.split())\n    {\n        element.sort();\n\
    \        result ~= element;\n    }\n    return result.join(\" \");\n}\nunittest\n\
    {\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\"\
    );\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\"\
    ) == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6il6l20w.d(23): Error: no property `split` for type `string`

    /tmp/tmp6il6l20w.d(28): Error: no property `join` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6il6l20w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{ \n    string ret=\"\"; \n    string[] words = split(s); \n    foreach(word;\
    \ words) \n    { \n        ret ~= \" \" ~ sort(word); \n    } \n    return ret[1..$];\
    \ \n} \nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"\
    Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"\
    number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzj096_ob.d(23): Error: undefined identifier `split`

    /tmp/tmpzj096_ob.d(26): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzj096_ob.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string[] input_words = s.split;\nunittest\n{\n    alias candidate =\
    \ anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"\
    hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n  \
    \  assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5936vjm3.d(23): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5936vjm3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{ \n    //Your code goes here\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\
    \n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") ==\
    \ \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"\
    abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    );\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp809whrmw.d(20): Error: function `tmp809whrmw.anti_shuffle` has
    no `return` statement, but is expected to return a value of type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp809whrmw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164432
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string res = \"\";\n    //assert(s.length() > 0);\n    string[] words\
    \ = s.split(\" \");\n    foreach(word; words)\n    {\n        word = word.chomp(\"\
    \\n\");\n        word = word.chomp(\"\\r\");\n        word = word.chomp(\"\\t\"\
    );\n        word = word.chomp(\" \");\n        string tmp = word;\n        string\
    \ tmp2 = word;\n        int i = 0;\n        char[] res_char;\n        foreach(char\
    \ c; tmp)\n        {\n            if(c == ' ')\n            {\n              \
    \  res_char ~= ' ';\n                ++i;\n                continue;\n       \
    \     }\n            else\n            {\n                res_char ~= c;\n   \
    \             tmp2 = tmp2.replaceFirst(c.toString(), \"\");\n                ++i;\n\
    \            }\n        }\n        while(tmp2.length() > 0)\n        {\n     \
    \       char c = tmp2[0];\n            res_char[minElement(res_char).index] =\
    \ c;\n            tmp2 = tmp2.replaceFirst(c.toString(), \"\");\n        }\n \
    \       foreach(char c; res_char)\n        {\n            res ~= c;\n        }\n\
    \        res ~= \" \";\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"\
    hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n  \
    \  assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq91bobfp.d(24): Error: no property `split` for type `string`

    /tmp/tmpq91bobfp.d(27): Error: no property `chomp` for type `string`

    /tmp/tmpq91bobfp.d(28): Error: no property `chomp` for type `string`

    /tmp/tmpq91bobfp.d(29): Error: no property `chomp` for type `string`

    /tmp/tmpq91bobfp.d(30): Error: no property `chomp` for type `string`

    /tmp/tmpq91bobfp.d(46): Error: no property `replaceFirst` for type `string`

    /tmp/tmpq91bobfp.d(50): Error: no property `length` for type `string`

    /tmp/tmpq91bobfp.d(53): Error: undefined identifier `minElement`

    /tmp/tmpq91bobfp.d(54): Error: no property `replaceFirst` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq91bobfp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164432
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string[] words = split(s);\n    string result = \"\";\n    foreach(string\
    \ w; words)\n    {\n        string orderedWord = \"\";\n        foreach(char c;\
    \ w)\n        {\n            orderedWord ~= c;\n        }\n        sort(orderedWord);\n\
    \        result ~= orderedWord;\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\"\
    );\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\"\
    ) == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp15cjxtqn.d(22): Error: undefined identifier `split`

    /tmp/tmp15cjxtqn.d(31): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp15cjxtqn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164432
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    //Get the words in an array\n    string[] words = s.split(\" \");\n\
    \    string[] anti_shuffled_words;\n    string anti_shuffled_s;\n    foreach(word;\
    \ words)\n    {\n        //sort the characters\n        //make a new string\n\
    \        anti_shuffled_words ~= word.sort();\n        //append the spaces if there\
    \ are any\n    }\n    //Join the words again\n    anti_shuffled_s = anti_shuffled_words.join(\"\
    \ \");\n    return anti_shuffled_s;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\
    \n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") ==\
    \ \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"\
    abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    );\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqn_shry7.d(23): Error: no property `split` for type `string`

    /tmp/tmpqn_shry7.d(30): Error: no property `sort` for type `string`

    /tmp/tmpqn_shry7.d(34): Error: no property `join` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqn_shry7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164432
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n\tstring[] words = split(s);\n\tstring ret = words[0];\n\tforeach(i, word;\
    \ words[1..$])\n\t{\n\t\tstring t = \"\";\n\t\tforeach(c; word)\n\t\t\tt ~= min(c,\
    \ t[0..$]);\n\t\tret ~= \" \" ~ t;\n\t}\n\treturn ret;\n}\n/*\n    Write a function\
    \ that takes a string, and returns the most frequent character\n    in the string.\
    \ If there is a tie for the most frequent character return the\n    character\
    \ with the lowest ascii value.\nunittest\n{\n    alias candidate = anti_shuffle;\n\
    \n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") ==\
    \ \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"\
    abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    );\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp5at67cb.d(33): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp5at67cb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164432
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string result;\n    foreach(element; s.split(\" \")) \n    {\n    \
    \    element.sort!((a, b) => a < b);\n        result ~= element;\n        result\
    \ ~= \" \";\n    }\n    return result.stripRight;\n}\n/*\nunittest\n{\n    alias\
    \ candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"\
    hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n  \
    \  assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi4hjjmvj.d(31): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi4hjjmvj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164432
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    auto first_word = \"\";\n    auto second_word = \"\";\n    auto arr\
    \ = s.split(\" \");\n    for (int i = 0; i < arr.length; i++) \n    {\n      \
    \  for (int j = 0; j < arr[i].length; j++) \n        {\n            if (j % 2\
    \ == 0) \n            {\n                first_word ~= arr[i][j];\n          \
    \  } \n            else \n            {\n                second_word ~= arr[i][j];\n\
    \            }\n        }\n        arr[i] = first_word ~ second_word;\n      \
    \  first_word = \"\";\n        second_word = \"\";\n    }\n    return arr.join(\"\
    \ \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"\
    Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"\
    number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa2oopalg.d(24): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa2oopalg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164432
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    // Your code goes here.\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\
    \n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") ==\
    \ \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"\
    abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    );\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpczrlpymr.d(20): Error: function `tmpczrlpymr.anti_shuffle` has
    no `return` statement, but is expected to return a value of type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpczrlpymr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164432
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string[] words = split(s);\n    string result = \"\";\n    foreach(word;\
    \ words) \n    {\n        result ~= sort(word);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\"\
    ) == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"\
    number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb_17qf38.d(22): Error: undefined identifier `split`

    /tmp/tmpb_17qf38.d(26): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb_17qf38.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164432
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string ret_str;\n    string[] words = s.split();\n    string[] ret_words;\n\
    \    for (int i = 0; i < words.length; i++)\n    {\n        ret_words[i] = sort(words[i]);\n\
    \    }\n    return join(ret_words);\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\
    \n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") ==\
    \ \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"\
    abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    );\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3losj7ox.d(23): Error: no property `split` for type `string`

    /tmp/tmp3losj7ox.d(27): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmp3losj7ox.d(29): Error: undefined identifier `join`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3losj7ox.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164432
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n  auto splitted = split(s, ' ');\n  typeof(return) ret;\n  foreach(c; splitted)\n\
    \  {\n    auto sorted = sort(splitted[c]);\n    ret ~= sorted;\n    if(c < splitted.length\
    \ - 1) ret ~= \" \";\n  }\n  return ret;\n}\n/*\n    Write a function that takes\
    \ a string, and converts it to a float if it is a number,\n    and leaves it as\
    \ it is otherwise. This function is meant to be applied on\n    every element\
    \ of a string array, so you should use std.algorithm.map.\n    The function to\
    \ use for the mapping is to!float.\n    If the input string is not a number you\
    \ should put the string \"NAN\"\n    (not a number) instead.\nunittest\n{\n  \
    \  alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n\
    \    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\"\
    ) == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5cs280wh.d(32): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5cs280wh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164432
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    int[] tokenStart;\n    int[] tokenEnd;\n    int tokenCount = 0;\n \
    \   int tokenStart = 0;\n    string result = \"\";\n    bool start = true;\n \
    \   for (int i = 0; i < s.length; i++)\n    {\n        char c = s[i];\n      \
    \  if (c == ' ')\n        {\n            if (start)\n            {\n         \
    \       tokenStart[tokenCount] = i;\n                start = false;\n        \
    \    }\n            else\n            {\n                tokenEnd[tokenCount]\
    \ = i;\n                tokenCount++;\n                start = true;\n       \
    \     }\n        }\n    }\n    for (int i = 0; i < tokenCount; i++)\n    {\n \
    \       int tokenStart = tokenStart[i];\n        int tokenEnd = tokenEnd[i];\n\
    \        string token = s[tokenStart..tokenEnd];\n        sort(token.byChar);\n\
    \        result = result ~ token;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\"\
    );\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\"\
    ) == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp1r1fyi0.d(25): Error: declaration `tmpp1r1fyi0.anti_shuffle.tokenStart`
    is already defined

    /tmp/tmpp1r1fyi0.d(48): Error: variable `tokenStart` is shadowing variable `tmpp1r1fyi0.anti_shuffle.tokenStart`

    /tmp/tmpp1r1fyi0.d(49): Error: variable `tokenEnd` is shadowing variable `tmpp1r1fyi0.anti_shuffle.tokenEnd`

    /tmp/tmpp1r1fyi0.d(51): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp1r1fyi0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164432
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string[] words = split(s);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        result ~= word[0];\n        foreach(char; word[1..$])\n\
    \        {\n            result ~= minElement(word[1..$]);\n            erase(word,\
    \ minElement(word[1..$]));\n        }\n        result ~= \" \";\n    }\n    return\
    \ chomp(result);\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"\
    Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"\
    number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5plj09oh.d(27): Error: no identifier for declarator `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5plj09oh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164432
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    int n = s.length();\n    string str;\n    int i = 0;\n    while(i <\
    \ n)\n    {\n        char start = s[i];\n        char end = s[i];\n        int\
    \ j = i;\n        for(; j < n; j++)\n        {\n            if(s[j] == ' ')\n\
    \            {\n                end = s[j - 1];\n                break;\n    \
    \        }\n        }\n        if(j == n)\n        {\n            end = s[j -\
    \ 1];\n        }\n        string tstr = s[i..$];\n        string tstr1 = s[i..j];\n\
    \        int n1 = tstr1.length();\n        string str1;\n        while(n1--)\n\
    \        {\n            str1 ~= min(tstr1);\n            tstr1 = tstr1.erase(tstr1.indexOf(min(tstr1)),\
    \ 1);\n        }\n        str ~= str1;\n        i = j + 1;\n    }\n    return\
    \ str;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"\
    Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"\
    number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg6_g5b4u.d(22): Error: no property `length` for type `string`

    /tmp/tmpg6_g5b4u.d(44): Error: no property `length` for type `string`

    /tmp/tmpg6_g5b4u.d(48): Error: undefined identifier `min`, did you mean function
    `main`?

    /tmp/tmpg6_g5b4u.d(49): Error: no property `erase` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg6_g5b4u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164432
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string[] words = split(s, \" \");\n    string[] res;\n    foreach(immutable\
    \ i, immutable w; words)\n    {\n        res ~= sort!((a, b) => a < b)(w);\n \
    \   }\n    return join(res, \" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\
    \n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") ==\
    \ \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"\
    abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    );\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt00x4s6o.d(22): Error: undefined identifier `split`

    /tmp/tmpt00x4s6o.d(26): Error: template instance `sort!((a, b) => a < b)` template
    `sort` is not defined, did you mean sqrt?

    /tmp/tmpt00x4s6o.d(28): Error: undefined identifier `join`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt00x4s6o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164432
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string res = \"\";\n    int word_start = 0;\n    int word_end = 0;\n\
    \    bool word_end_reached = false;\n    bool word_start_reached = false;\n  \
    \  bool word_end_reached_once = false;\n    uint word_start_index = 0;\n    uint\
    \ word_end_index = 0;\n    foreach(i, ch; s) {\n        if(!word_start_reached\
    \ && !isAlpha(ch)) {\n            word_start = i;\n            word_start_reached\
    \ = true;\n        } else if(word_start_reached && isAlpha(ch)) {\n          \
    \  word_end = i;\n            word_end_reached = true;\n        }\n        if(word_end_reached)\
    \ {\n            if(word_end_reached_once) {\n                auto tmp = s[word_start_index..word_end_index];\n\
    \                char[] new_word;\n                foreach(ch1; tmp) {\n     \
    \               new_word ~= ch1;\n                }\n                std.sort(new_word);\n\
    \                foreach(ch2; new_word) {\n                    res ~= ch2;\n \
    \               }\n                word_start_index = word_end + 1;\n        \
    \        word_end_index = word_end + 1;\n                word_start_reached =\
    \ false;\n                word_end_reached = false;\n            } else {\n  \
    \              word_start_index = word_start;\n                word_end_index\
    \ = word_end;\n                word_end_reached_once = true;\n            }\n\
    \        }\n    }\n    auto tmp = s[word_start_index..word_end_index];\n    char[]\
    \ new_word;\n    foreach(ch1; tmp) {\n        new_word ~= ch1;\n    }\n    std.sort(new_word);\n\
    \    foreach(ch2; new_word) {\n        res ~= ch2;\n    }\n    return res;\n}\n\
    unittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\"\
    ) == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"\
    number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprkkw6t4g.d(31): Error: undefined identifier `isAlpha`

    /tmp/tmprkkw6t4g.d(32): Error: cannot implicitly convert expression `i` of type
    `ulong` to `int`

    /tmp/tmprkkw6t4g.d(34): Error: undefined identifier `isAlpha`

    /tmp/tmprkkw6t4g.d(35): Error: cannot implicitly convert expression `i` of type
    `ulong` to `int`

    /tmp/tmprkkw6t4g.d(45): Error: undefined identifier `sort` in package `std`

    /tmp/tmprkkw6t4g.d(65): Error: undefined identifier `sort` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprkkw6t4g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164432
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    auto words = split(s, \" \");\n    immutable word_count = words.length;\n\
    \    string[] rv = new string[word_count];\n    foreach(i, word; words)\n    {\n\
    \        immutable chars = split(word, \"\");\n        immutable char_count =\
    \ chars.length;\n        char[] new_word = new char[char_count];\n        foreach(j,\
    \ char; chars)\n        {\n            new_word[j] = char;\n        }\n      \
    \  quickSort(new_word);\n        rv[i] = to!string(new_word);\n    }\n    return\
    \ join(rv, \" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n  \
    \  assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"\
    ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"\
    abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    );\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1gbskzcu.d(30): Error: no identifier for declarator `char`

    /tmp/tmp1gbskzcu.d(32): Error: found `;` when expecting `.` following char

    /tmp/tmp1gbskzcu.d(33): Error: found `}` when expecting identifier following `char`.

    /tmp/tmp1gbskzcu.d(34): Error: found `quickSort` when expecting `;` following
    statement

    /tmp/tmp1gbskzcu.d(39): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1gbskzcu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164432
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string[] str;\n    string result;\n    int i, j;\n    char tmp;\n \
    \   str = split(s);\n    foreach(word; str)\n    {\n        foreach(val; word)\n\
    \        {\n            i = 0;\n            while(i < word.length)\n         \
    \   {\n                j = i + 1;\n                while(j < word.length)\n  \
    \              {\n                    if(word[i] > word[j])\n                \
    \    {\n                        tmp = word[i];\n                        word[i]\
    \ = word[j];\n                        word[j] = tmp;\n                    }\n\
    \                    j++;\n                }\n                i++;\n         \
    \   }\n        }\n        result ~= word;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\"\
    );\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\"\
    ) == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzv62m9j8.d(26): Error: undefined identifier `split`

    /tmp/tmpzv62m9j8.d(40): Error: cannot modify `immutable` expression `word[cast(ulong)i]`

    /tmp/tmpzv62m9j8.d(41): Error: cannot modify `immutable` expression `word[cast(ulong)j]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzv62m9j8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164432
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string[] words = split(s, \" \");\n    string result = \"\";\n    foreach(string\
    \ word; words)\n    {\n        string sorted_word = sort(word);\n        result\
    \ ~= sorted_word ~ \" \";\n    }\n    return result.stripRight;\n}\n// void main()\n\
    // {\n//     assert(anti_shuffle(\"Hi\") == \"Hi\");\n//     assert(anti_shuffle(\"\
    hello\") == \"ehllo\");\n//     assert(anti_shuffle(\"Hello World!!!\") == \"\
    Hello !!!Wdlor\");\n// }\nunittest\n{\n    alias candidate = anti_shuffle;\n\n\
    \    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") ==\
    \ \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"\
    abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    );\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphsekarcv.d(22): Error: undefined identifier `split`

    /tmp/tmphsekarcv.d(26): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmphsekarcv.d(29): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphsekarcv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164432
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string[] splitted = split(s);\n    string result;\n    foreach(var\
    \ word; splitted)\n    {\n        string anti = antiWord(word);\n        result\
    \ ~= anti;\n        result ~= \" \";\n    }\n    return result;\n}\nstring antiWord(string\
    \ word)\n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string\
    \ result;\n    foreach(auto letter; word)\n    {\n        size_t letterIndex =\
    \ alphabet.find(letter);\n        result ~= alphabet[letterIndex];\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n   \
    \ assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"\
    ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"\
    abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    );\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0o45sogu.d(36): Error: basic type expected, not `auto`

    /tmp/tmp0o45sogu.d(36): Error: no identifier for declarator `_error_`

    /tmp/tmp0o45sogu.d(36): Error: found `auto` when expecting `;`

    /tmp/tmp0o45sogu.d(36): Error: found `;` when expecting `)`

    /tmp/tmp0o45sogu.d(36): Error: found `)` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0o45sogu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164432
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{ \n  string s_arr[] = split(s);\n  string result;\n  foreach(word; s_arr)\n\
    \  {\n    char[] chars = word.dup;\n    sort(chars);\n    result ~= chars;\n \
    \ }\n  return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n\
    \    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") ==\
    \ \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"\
    abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    );\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp75okqo_r.d(22): Deprecation: instead of C-style syntax, use D-style
    syntax `string[] s_arr`

    /tmp/tmp75okqo_r.d(22): Error: undefined identifier `split`

    /tmp/tmp75okqo_r.d(27): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp75okqo_r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164432
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string result;\n    static if (is(ElementType!string == dchar))\n \
    \   {\n        foreach (word; s.split(\" \"))\n        {\n            static if\
    \ (is(typeof(word.sort()) == string))\n                result ~= word.sort() ~\
    \ \" \";\n            else\n                result ~= word.sort.idup.idup ~ \"\
    \ \";\n        }\n    }\n    else\n    {\n        foreach (word; s.split(\" \"\
    ))\n        {\n            result ~= word.sort.idup.idup ~ \" \";\n        }\n\
    \    }\n    return result.idup.idup;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\
    \n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") ==\
    \ \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"\
    abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    );\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp96tppy6k.d(35): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp96tppy6k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164432
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{ \n    string[] words = split(s, \" \");\n    string new_string = \"\";\n\
    \    foreach(word; words)\n    {\n        char[] chars = word.dup;\n        sort(chars);\n\
    \        new_string ~= new string(chars);\n        new_string ~= \" \";\n    }\n\
    \    new_string = chomp(new_string);\n    return new_string;\n}\nunittest\n{\n\
    \    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\"\
    );\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\"\
    ) == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmkc1eghl.d(22): Error: undefined identifier `split`

    /tmp/tmpmkc1eghl.d(27): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmpmkc1eghl.d(28): Error: cannot implicitly convert expression `chars` of
    type `char[]` to `ulong`

    /tmp/tmpmkc1eghl.d(31): Error: undefined identifier `chomp`, did you mean template
    `cmp(T)(const(T) x, const(T) y) if (isFloatingPoint!T)`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmkc1eghl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164432
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    auto append(T)(T c)\n    {\n        return c ~ ' ';\n    }\n    auto\
    \ filter(T)(T c)\n    {\n        return c.isAlpha;\n    }\n    auto getLowercase(T)(T\
    \ c)\n    {\n        return c.toLower;\n    }\n    auto sort(T)(T c)\n    {\n\
    \        return c.sort!((a, b) => a > b);\n    }\n    auto toArray(T)(T c)\n \
    \   {\n        return c.toArray;\n    }\n    string [] words = s.split;\n    string\
    \ result = \"\";\n    foreach(i, word; words)\n    {\n        if(word.length ==\
    \ 1)\n        {\n            result ~= word;\n            continue;\n        }\n\
    \        word = word.filter!filter.map!getLowercase.map!toArray.map!sort.map!toString.map!getLowercase.map!append.reduce!(a,\
    \ b => a ~ b).toString;\n        result ~= word;\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    assert(anti_shuffle(\"hi\") == \"hi\");\n    assert(anti_shuffle(\"\
    hello\") == \"ehllo\");\n    assert(anti_shuffle(\"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"\
    Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"\
    number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpurmeqh29.d(42): Error: no property `split` for type `string`

    /tmp/tmpurmeqh29.d(51): Error: no property `filter` for type `string`

    /tmp/tmpurmeqh29.d(54): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpurmeqh29.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164432
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    // Fill in here\n    string[] words;\n    string[] new_words;\n   \
    \ string new_string;\n    words = s.split;\n    foreach(string w; words)\n   \
    \ {\n        w.sort();\n        new_words ~= w;\n    }\n    new_string = appender!string();\n\
    \    foreach(string w; new_words)\n    {\n        new_string ~= w;\n        new_string\
    \ ~= \" \";\n    }\n    return new_string;\n}\nunittest\n{\n    alias candidate\
    \ = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"\
    hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n  \
    \  assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu6x9gyfx.d(26): Error: no property `split` for type `string`

    /tmp/tmpu6x9gyfx.d(29): Error: no property `sort` for type `string`

    /tmp/tmpu6x9gyfx.d(32): Error: template instance `appender!string` template `appender`
    is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu6x9gyfx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164432
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string[char[]] wordList;\n    foreach(word; s.split(\" \"))\n    {\n\
    \        wordList ~= word.sort();\n    }\n    return wordList.join(\" \");\n}\n\
    unittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\"\
    ) == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"\
    number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmkzsutnk.d(23): Error: no property `split` for type `string`

    /tmp/tmpmkzsutnk.d(27): Error: no property `join` for type `string[const(char)[]]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmkzsutnk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164432
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{ \n    string s2 = \"\";\n    string s3 = \"\";\n    foreach(word; split(s,\
    \ \" \"))\n    {\n        foreach(letter; word)\n        {\n            s2 ~=\
    \ letter;\n        }\n        s2 = sort!((a, b) => a < b)(s2);\n        s3 ~=\
    \ s2 ~ \" \";\n        s2 = \"\";\n    }\n    s3 = s3[0..$-1];\n    return s3;\n\
    }\nunittest\n{\n    writeln(anti_shuffle(\"Hi\"));\n    writeln(anti_shuffle(\"\
    hello\"));\n    writeln(anti_shuffle(\"Hello World!!!\"));\n}\nunittest\n{\n \
    \   alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\"\
    );\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\"\
    ) == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp51uduhjt.d(24): Error: undefined identifier `split`

    /tmp/tmp51uduhjt.d(39): Error: `writeln` is not defined, perhaps `import std.stdio;`
    is needed?

    /tmp/tmp51uduhjt.d(40): Error: `writeln` is not defined, perhaps `import std.stdio;`
    is needed?

    /tmp/tmp51uduhjt.d(41): Error: `writeln` is not defined, perhaps `import std.stdio;`
    is needed?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp51uduhjt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164432
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    //string s = \"Hello World!!!\";\n    auto arr = s.split;\n    string\
    \ ret;\n    foreach(i;0..arr.length)\n    {\n        if(arr[i].length == 1)\n\
    \        {\n            ret ~= arr[i];\n        }\n        else\n        {\n \
    \           auto res = arr[i].to!(dchar[]);\n            std.algorithm.sort(res);\n\
    \            ret ~= res.to!string;\n        }\n        if(i!=arr.length-1)\n \
    \       {\n            ret ~= \" \";\n        }\n    }\n    return ret;\n}\nunittest\n\
    {\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\"\
    );\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\"\
    ) == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9or_at4s.d(23): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9or_at4s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164432
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string[] words = split(s, \" \");\n    string[] sorted = new string[words.length];\n\
    \    for (int i = 0; i < words.length; i++) {\n        sorted[i] = sort(words[i]);\n\
    \    }\n    return join(sorted, \" \");\n}\nunittest\n{\n    alias candidate =\
    \ anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"\
    hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n  \
    \  assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd58990wj.d(22): Error: undefined identifier `split`

    /tmp/tmpd58990wj.d(25): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmpd58990wj.d(27): Error: undefined identifier `join`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd58990wj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164432
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    struct SortedStr(T)\n    {\n        T[] value;\n        bool opEquals(SortedStr\
    \ rhs)\n        {\n            if (value.length != rhs.value.length) return false;\n\
    \            foreach (i, v; value)\n            {\n                if (v != rhs.value[i])\
    \ return false;\n            }\n            return true;\n        }\n        bool\
    \ opCmp(SortedStr rhs)\n        {\n            return this.value < rhs.value;\n\
    \        }\n    }\n    string[] words = s.split(\" \");\n    SortedStr!(char)[]\
    \ ordered_words;\n    foreach (word; words)\n    {\n        ordered_words ~= SortedStr!(char)(word.dup.sort);\n\
    \    }\n    ordered_words.sort;\n    string result;\n    foreach (word; ordered_words)\n\
    \    {\n        result ~= word.value.join(\"\");\n        result ~= \" \";\n \
    \   }\n    return result[0..$-1];\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\
    \n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") ==\
    \ \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"\
    abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    );\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvq0x7qmn.d(39): Error: no property `split` for type `string`

    /tmp/tmpvq0x7qmn.d(43): Error: no property `sort` for type `char[]`

    /tmp/tmpvq0x7qmn.d(45): Error: no property `sort` for type `SortedStr!char[]`

    /tmp/tmpvq0x7qmn.d(49): Error: no property `join` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvq0x7qmn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164432
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    // Your code goes here.\n    string ret;\n    auto sep = 0;\n    foreach(i,\
    \ word; s.split(\" \")) {\n        ret ~= word.sort.join(\"\") ~ \" \";\n    }\n\
    \    return ret;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"\
    Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"\
    number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoetucbhz.d(25): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoetucbhz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164432
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string[] words = split(s);\n    string[] antiShuffledWords = [];\n\
    \    foreach(word; words) \n    {\n        antiShuffledWords ~= sort!((x, y) =>\
    \ x.to!char() < y.to!char())(word);\n    }\n    return join(antiShuffledWords);\n\
    }\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"\
    Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"\
    number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbvgwk8nf.d(22): Error: undefined identifier `split`

    /tmp/tmpbvgwk8nf.d(26): Error: template instance `sort!((x, y) => x.to!char()
    < y.to!char())` template `sort` is not defined, did you mean sqrt?

    /tmp/tmpbvgwk8nf.d(28): Error: undefined identifier `join`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbvgwk8nf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164432
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    immutable arr = s.split(\" \");\n    string res = \"\";\n    foreach(word;\
    \ arr)\n    {\n        res ~= sort(word).array();\n        res ~= \" \";\n   \
    \ }\n    return res.stripRight;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\
    \n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") ==\
    \ \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"\
    abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    );\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz4luappj.d(22): Error: no property `split` for type `string`

    /tmp/tmpz4luappj.d(29): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz4luappj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164432
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string[] arr = split(s, \" \");\n    string result = \"\";\n    for\
    \ (int i = 0; i < arr.length; i++) \n    {\n        char[] temp = arr[i].dup;\n\
    \        sort(temp);\n        result ~= temp;\n        if (i < arr.length - 1)\n\
    \            result ~= \" \";\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n\
    \    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\"\
    ) == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwiyt48j_.d(22): Error: undefined identifier `split`

    /tmp/tmpwiyt48j_.d(27): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwiyt48j_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164432
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n\tstring[] words = s.split(\" \");\n\tstring result = \"\";\n\tforeach(word;\
    \ words)\n\t{\n\t\tTuple!(char[], uint[]) arrange = anti_sort(word);\n\t\tforeach(index;\
    \ arrange[1])\n\t\t{\n\t\t\tresult ~= arrange[0][index];\n\t\t}\n\t\tresult ~=\
    \ \" \";\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\
    \n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") ==\
    \ \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"\
    abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    );\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi2bl8flc.d(22): Error: no property `split` for type `string`

    /tmp/tmpi2bl8flc.d(26): Error: undefined identifier `anti_sort`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi2bl8flc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164432
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n  auto upperStr = s.toUpper;\n  string[] words = upperStr.split;\n  string[]\
    \ newWords;\n  string newStr;\n  foreach(word; words)\n  {\n    newWords ~= word.sort;\n\
    \  }\n  newStr = newWords.join(\" \");\n  return newStr;\n}\nunittest\n{\n   \
    \ alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n\
    \    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\"\
    ) == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0g2p1ny9.d(22): Error: no property `toUpper` for type `string`

    /tmp/tmp0g2p1ny9.d(28): Error: no property `sort` for type `string`

    /tmp/tmp0g2p1ny9.d(30): Error: no property `join` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0g2p1ny9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164432
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string ret = \"\";\n    int currentStart = 0;\n    for (int i = 0;\
    \ i < s.length; i++)\n    {\n        if (s[i] == ' ')\n        {\n           \
    \ ret ~= sort(s[currentStart..i]);\n            ret ~= \" \";\n            currentStart\
    \ = i + 1;\n        }\n    }\n    ret ~= sort(s[currentStart..$]);\n    return\
    \ ret;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"\
    Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"\
    number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxwz513lk.d(28): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpxwz513lk.d(33): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxwz513lk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164432
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    if (s.size == 0)\n        return s;\n    \n    string[] words = split(s,\
    \ \" \");\n    string shuffled_words[];\n    foreach (word; words)\n    {\n  \
    \      foreach (c; word)\n        {\n            stringBuilder.add(c);\n     \
    \   }\n        stringBuilder.add(\" \");\n    }\n    auto words_list = stringBuilder.data;\n\
    \    foreach (i, word; words_list)\n    {\n        words_list[i] = sort(word);\n\
    \    }\n    return join(words_list, \" \");\n}\n \n void main()\n {\n    assert(anti_shuffle(\"\
    Hi\") == \"Hi\");\n    assert(anti_shuffle(\"hello\") == \"ehllo\");\n    assert(anti_shuffle(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n }\nunittest\n{\n    alias candidate\
    \ = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"\
    hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n  \
    \  assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpag_w53_y.d(26): Deprecation: instead of C-style syntax, use D-style
    syntax `string[] shuffled_words`

    /tmp/tmpag_w53_y.d(22): Error: no property `size` for type `string`

    /tmp/tmpag_w53_y.d(25): Error: undefined identifier `split`

    /tmp/tmpag_w53_y.d(31): Error: undefined identifier `stringBuilder`

    /tmp/tmpag_w53_y.d(33): Error: undefined identifier `stringBuilder`

    /tmp/tmpag_w53_y.d(35): Error: undefined identifier `stringBuilder`

    /tmp/tmpag_w53_y.d(40): Error: undefined identifier `join`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpag_w53_y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164432
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    auto words = split(s, ' ');\n    string ret = \"\";\n    foreach(word;\
    \ words)\n    {\n        ret ~= filter!(a => a != ' ')(sort!((a, b) => a > b)(word))\
    \ ~ \" \";\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\
    \n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") ==\
    \ \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"\
    abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    );\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmv48rme9.d(22): Error: undefined identifier `split`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmv48rme9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164432
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\
    \n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello\
    \ World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s)\
    \ \n{\n    string[] words;\n    foreach(word; split(s, \" \"))\n    {\n      \
    \  words ~= sort!(\"a < b\")(word);\n    }\n    return join(words, \" \");\n}\n\
    unittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\"\
    ) == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"\
    number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8eaxv_m0.d(23): Error: undefined identifier `split`

    /tmp/tmp8eaxv_m0.d(27): Error: undefined identifier `join`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8eaxv_m0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164432
