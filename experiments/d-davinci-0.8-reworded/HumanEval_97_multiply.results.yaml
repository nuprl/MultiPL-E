language: d
name: HumanEval_97_multiply
results:
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return ((a % 10) * (b % 10));\n}\nunittest\n{\n    alias candidate\
    \ = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp06th984c.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427de5]

    ??:? void tmp06th984c.__unittest_L22_C1() [0x427ac4]

    ??:? void tmp06th984c.__modtest() [0x427b68]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a99e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fabd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]

    ??:? runModuleUnitTests [0x42b8e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428234]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164304
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    long r1 = (abs(a) % 10);\n    long r2 = (abs(b) % 10);\n  \
    \  return r1 * r2;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L,\
    \ 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L,\
    \ 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L,\
    \ 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164304
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    long c = a%10;\n    long d = b%10;\n    return c*d;\n}\nunittest\n\
    {\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n\
    \    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) ==\
    \ 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L)\
    \ == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmph95psfv0.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ddd]

    ??:? void tmph95psfv0.__unittest_L24_C1() [0x427ab8]

    ??:? void tmph95psfv0.__modtest() [0x427b5c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb03]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a996]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb29]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fab5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]

    ??:? runModuleUnitTests [0x42b8d9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42822c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164304
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return (a%10) * (b%10);\n}\nunittest\n{\n    alias candidate\
    \ = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmlbf2bsi.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427de5]

    ??:? void tmpmlbf2bsi.__unittest_L22_C1() [0x427ac4]

    ??:? void tmpmlbf2bsi.__modtest() [0x427b68]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a99e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fabd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]

    ??:? runModuleUnitTests [0x42b8e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428234]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164304
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    //Remove the minus sign if it exists.\n    auto isPositive\
    \ = (a < 0 ? -1 : 1) * (b < 0 ? -1 : 1);\n    a = abs(a);\n    b = abs(b);\n \
    \   return isPositive * (a % 10) * (b % 10);\n}\nunittest\n{\n    alias candidate\
    \ = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprs3jei36.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e8d]

    ??:? void tmprs3jei36.__unittest_L26_C1() [0x427b54]

    ??:? void tmprs3jei36.__modtest() [0x427c10]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbb3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa46]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbd9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430088]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb65]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa1d]

    ??:? runModuleUnitTests [0x42b989]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282dc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164304
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    long [] arr1 = ((a < 0L) ? (-a).toString.map!(c => (c - '0').to!long)\
    \ : a.toString.map!(c => (c - '0').to!long)).array;\n    long [] arr2 = ((b <\
    \ 0L) ? (-b).toString.map!(c => (c - '0').to!long) : b.toString.map!(c => (c -\
    \ '0').to!long)).array;\n    return arr1[$-1] * arr2[$-1];\n}\nunittest\n{\n \
    \   alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n\
    \    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) ==\
    \ 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L)\
    \ == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdxgfz_6n.d(20): Error: no property `toString` for type `long`

    /tmp/tmpdxgfz_6n.d(20): Error: no property `toString` for type `long`

    /tmp/tmpdxgfz_6n.d(21): Error: no property `toString` for type `long`

    /tmp/tmpdxgfz_6n.d(21): Error: no property `toString` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdxgfz_6n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164304
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    long val = 0;\n    int i;\n    a = abs(a);\n    b = abs(b);\n\
    \    val = mod(a, 10) * mod(b, 10);\n    return val;\n}\nunittest\n{\n    alias\
    \ candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo3h1h6yd.d(24): Error: undefined identifier `mod`, did you mean
    function `fmod`?

    /tmp/tmpo3h1h6yd.d(24): Error: undefined identifier `mod`, did you mean function
    `fmod`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo3h1h6yd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164304
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    // your code here\n    return abs(a % 10) * abs(b % 10);\n\
    }\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L,\
    \ 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L,\
    \ 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L,\
    \ 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164304
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return (long)(abs(a%10) * abs(b%10));\n}\nunittest\n{\n   \
    \ alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n \
    \   assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) ==\
    \ 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L)\
    \ == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7lpblvw7.d(20): Error: C style cast illegal, use `cast(long)(abs(a
    % 10) * abs(b % 10))`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7lpblvw7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164303
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return ((a % 10) * (b % 10));\n}\npublic class MultiplyDigits\n\
    {\n    public static void Main()\n    {\n        Console.WriteLine(multiply(148L,\
    \ 412L));//expected 16L\n        Console.WriteLine(multiply(19L, 28L));//expected\
    \ 72L\n        Console.WriteLine(multiply(2020L, 1851L));//expected 0L\n     \
    \   Console.WriteLine(multiply(14L, -15L));//expected 20L\n    }\n}\nunittest\n\
    {\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n\
    \    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) ==\
    \ 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L)\
    \ == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfnkzib0t.d(26): Error: undefined identifier `Console`

    /tmp/tmpfnkzib0t.d(27): Error: undefined identifier `Console`

    /tmp/tmpfnkzib0t.d(28): Error: undefined identifier `Console`

    /tmp/tmpfnkzib0t.d(29): Error: undefined identifier `Console`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfnkzib0t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164304
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return abs(a) % 10 * abs(b) % 10;\n}\nunittest\n{\n    alias\
    \ candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpx6av7zwa.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e55]

    ??:? void tmpx6av7zwa.__unittest_L22_C1() [0x427aa9]

    ??:? void tmpx6av7zwa.__modtest() [0x427bd8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb7b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa0e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fba1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430050]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb2d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9e5]

    ??:? runModuleUnitTests [0x42b951]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282a4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164304
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return a.getUnits() * b.getUnits();\n}\nunittest\n{\n    alias\
    \ candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbd3gsbsq.d(20): Error: no property `getUnits` for type `long`

    /tmp/tmpbd3gsbsq.d(20): Error: no property `getUnits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbd3gsbsq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164304
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return ((a%10)*(b%10));\n}\nunittest\n{\n    alias candidate\
    \ = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8jwjln9y.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427de5]

    ??:? void tmp8jwjln9y.__unittest_L22_C1() [0x427ac4]

    ??:? void tmp8jwjln9y.__modtest() [0x427b68]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a99e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fabd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]

    ??:? runModuleUnitTests [0x42b8e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428234]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164304
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    long aa = a % 10;\n    long bb = b % 10;\n    long cc = aa\
    \ * bb;\n    return cc;\n}\nunittest\n{\n    alias candidate = multiply;\n\n \
    \   assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n\
    \    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) ==\
    \ 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L)\
    \ == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L)\
    \ == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu83g_vlp.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427de5]

    ??:? void tmpu83g_vlp.__unittest_L25_C1() [0x427ac4]

    ??:? void tmpu83g_vlp.__modtest() [0x427b68]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a99e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fabd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]

    ??:? runModuleUnitTests [0x42b8e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428234]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164304
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    long c = abs(a%10) * abs(b%10);\n    return c;\n}\nunittest\n\
    {\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n\
    \    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) ==\
    \ 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L)\
    \ == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164304
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    immutable auto aAbs = a >= 0 ? a : -a;\n    immutable auto\
    \ bAbs = b >= 0 ? b : -b;\n    return (aAbs % 10) * (bAbs % 10);\n}\nunittest\n\
    {\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n\
    \    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) ==\
    \ 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L)\
    \ == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164304
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    Tuple!(long, long) unitDigits(long a)\n    {\n        immutable\
    \ long len = a.length;\n        immutable long tenPower = std.math.pow(10, len\
    \ - 1);\n        return (a / tenPower, a % 10);\n    }\n    auto a_tup = unitDigits(a);\n\
    \    auto b_tup = unitDigits(b);\n    return a_tup[1] * b_tup[1];\n}\nunittest\n\
    {\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n\
    \    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) ==\
    \ 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L)\
    \ == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu_sjhfk5.d(22): Error: no property `length` for type `long`

    /tmp/tmpu_sjhfk5.d(24): Error: Using the result of a comma expression is not allowed

    /tmp/tmpu_sjhfk5.d(24): Error: cannot implicitly convert expression `a % 10L`
    of type `long` to `Tuple!(long, long)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu_sjhfk5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164304
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return a%10 * b%10;\n}\nunittest\n{\n    alias candidate =\
    \ multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjf1swd11.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ddd]

    ??:? void tmpjf1swd11.__unittest_L22_C1() [0x427a45]

    ??:? void tmpjf1swd11.__modtest() [0x427b5c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb03]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a996]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb29]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fab5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]

    ??:? runModuleUnitTests [0x42b8d9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42822c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164304
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return abs(a%10) * abs(b%10);\n}\nunittest\n{\n    alias candidate\
    \ = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164304
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    /*\n    long num1 = a % 10;\n    long num2 = b % 10;\n    auto\
    \ result = num1 * num2;\n    return result;\n    */\n    long result = a % 10\
    \ * b % 10;\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\
    \n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) ==\
    \ 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmppsvv8_n9.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ddd]

    ??:? void tmppsvv8_n9.__unittest_L29_C1() [0x427a45]

    ??:? void tmppsvv8_n9.__modtest() [0x427b5c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb03]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a996]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb29]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fab5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]

    ??:? runModuleUnitTests [0x42b8d9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42822c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164304
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    int out = 0;\n    return out;\n}\nunittest\n{\n    alias candidate\
    \ = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyy1mgm0p.d(20): Error: no identifier for declarator `int`

    /tmp/tmpyy1mgm0p.d(20): Error: found `out` instead of statement

    /tmp/tmpyy1mgm0p.d(21): Error: expression expected, not `out`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyy1mgm0p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164303
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    long r = a % 10;\n    long l = b % 10;\n    return r * l;\n\
    }\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L,\
    \ 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L,\
    \ 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L,\
    \ 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4pv7ep22.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ddd]

    ??:? void tmp4pv7ep22.__unittest_L24_C1() [0x427ab8]

    ??:? void tmp4pv7ep22.__modtest() [0x427b5c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb03]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a996]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb29]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fab5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]

    ??:? runModuleUnitTests [0x42b8d9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42822c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164304
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return a % 10 * b % 10;\n}\nunittest\n{\n    alias candidate\
    \ = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpf4tgx0a3.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ddd]

    ??:? void tmpf4tgx0a3.__unittest_L22_C1() [0x427a45]

    ??:? void tmpf4tgx0a3.__modtest() [0x427b5c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb03]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a996]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb29]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fab5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]

    ??:? runModuleUnitTests [0x42b8d9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42822c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164304
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    int aa = a % 10;\n    int bb = b % 10;\n    return aa * bb;\n\
    }\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L,\
    \ 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L,\
    \ 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L,\
    \ 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp18_jpln8.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ddd]

    ??:? void tmp18_jpln8.__unittest_L24_C1() [0x427ab8]

    ??:? void tmp18_jpln8.__modtest() [0x427b5c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb03]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a996]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb29]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fab5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]

    ??:? runModuleUnitTests [0x42b8d9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42822c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164304
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return abs(a)%10*abs(b)%10;\n}\nunittest\n{\n    alias candidate\
    \ = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpf136vaqy.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e55]

    ??:? void tmpf136vaqy.__unittest_L22_C1() [0x427aa9]

    ??:? void tmpf136vaqy.__modtest() [0x427bd8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb7b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa0e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fba1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430050]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb2d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9e5]

    ??:? runModuleUnitTests [0x42b951]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282a4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164304
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return abs(a % 10) * abs(b % 10);\n}\nunittest\n{\n    alias\
    \ candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164304
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return a%10 * b%10;\n}\nunittest\n{\n    alias candidate =\
    \ multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjf1swd11.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ddd]

    ??:? void tmpjf1swd11.__unittest_L22_C1() [0x427a45]

    ??:? void tmpjf1swd11.__modtest() [0x427b5c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb03]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a996]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb29]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fab5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]

    ??:? runModuleUnitTests [0x42b8d9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42822c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164304
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    long mod_a = abs(a) % 10;\n    long mod_b = abs(b) % 10;\n\
    \    long result = mod_a * mod_b;\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164304
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    //long prod = (a % 10) * (b % 10);\n    return (a % 10) * (b\
    \ % 10);\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L,\
    \ 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L,\
    \ 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L,\
    \ 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmptd7zoqdm.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x427de5]

    ??:? void tmptd7zoqdm.__unittest_L23_C1() [0x427ac4]

    ??:? void tmptd7zoqdm.__modtest() [0x427b68]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a99e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fabd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]

    ??:? runModuleUnitTests [0x42b8e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428234]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164304
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return (a % 10) * (b % 10);\n}\n//   =====>  \nlong multiply(long\
    \ a, long b) \n{\n    return (a % 10) * (b % 10);\n}\n//   =====>  \nlong multiply(long\
    \ a, long b) \n{\n    return (a % 10) * (b % 10);\n}\n//   =====>  \nlong multiply(long\
    \ a, long b) \n{\n    return (a % 10) * (b % 10);\n}\n//   =====>  \nlong multiply(long\
    \ a, long b) \n{\n    return (a % 10) * (b % 10);\n}\n//   =====>  \nlong multiply(long\
    \ a, long b) \n{\n    return (a % 10) * (b % 10);\n}\n//   =====>  \nlong multiply(long\
    \ a, long b) \n{\n    return (a % 10) * (b % 10);\n}\n//   =====>  \nlong multiply(long\
    \ a, long b) \n{\n    return (a % 10) * (b % 10);\n}\n//   =====>  \nlong multiply(long\
    \ a, long b) \n{\n    return (a % 10) * (b % 10);\n}\n//   =====>  \nlong multiply(long\
    \ a, long b) \n{\n    return (a % 10) * (b % 10);\n}\n//   =====>  \nlong multiply(long\
    \ a, long b) \n{\n    return (a % 10) * (b % 10);\n}\n//   =====>  \nlong multiply(long\
    \ a, long b) \n{\n    return (a % 10) * (b % 10);\n}\n//   =====>  \nlong multiply(long\
    \ a, long b) \n{\n    return (a % 10) * (b % 10);\n}\n//   =====>  \nlong multiply(long\
    \ a, long b) \n{\n    return (a % 10) * (b % 10);\n}\n//   =====>  \nlong multiply(long\
    \ a, long b) \n{\n    return (a % 10) * (b % 10);\n}\n//   =====\nunittest\n{\n\
    \    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n\
    \    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) ==\
    \ 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L)\
    \ == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8qkpyile.d(97): Error: `tmp8qkpyile.multiply` called with argument
    types `(long, long)` matches both:

    /tmp/tmp8qkpyile.d(18):     `tmp8qkpyile.multiply(long a, long b)`

    and:

    /tmp/tmp8qkpyile.d(88):     `tmp8qkpyile.multiply(long a, long b)`

    /tmp/tmp8qkpyile.d(98): Error: `tmp8qkpyile.multiply` called with argument types
    `(long, long)` matches both:

    /tmp/tmp8qkpyile.d(18):     `tmp8qkpyile.multiply(long a, long b)`

    and:

    /tmp/tmp8qkpyile.d(88):     `tmp8qkpyile.multiply(long a, long b)`

    /tmp/tmp8qkpyile.d(99): Error: `tmp8qkpyile.multiply` called with argument types
    `(long, long)` matches both:

    /tmp/tmp8qkpyile.d(18):     `tmp8qkpyile.multiply(long a, long b)`

    and:

    /tmp/tmp8qkpyile.d(88):     `tmp8qkpyile.multiply(long a, long b)`

    /tmp/tmp8qkpyile.d(100): Error: `tmp8qkpyile.multiply` called with argument types
    `(long, long)` matches both:

    /tmp/tmp8qkpyile.d(18):     `tmp8qkpyile.multiply(long a, long b)`

    and:

    /tmp/tmp8qkpyile.d(88):     `tmp8qkpyile.multiply(long a, long b)`

    /tmp/tmp8qkpyile.d(101): Er'
  stdout: ''
  timestamp: 1660164304
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    long res;\n    res = a % 10;\n    res *= b % 10;\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L,\
    \ 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L,\
    \ 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L,\
    \ 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmphfqkr02s.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427de5]

    ??:? void tmphfqkr02s.__unittest_L25_C1() [0x427ac4]

    ??:? void tmphfqkr02s.__modtest() [0x427b68]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a99e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fabd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]

    ??:? runModuleUnitTests [0x42b8e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428234]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164304
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return abs(a % 10 * b % 10);\n}\nunittest\n{\n    alias candidate\
    \ = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmppn37no5z.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e35]

    ??:? void tmppn37no5z.__unittest_L22_C1() [0x427a89]

    ??:? void tmppn37no5z.__modtest() [0x427bb8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb5b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9ee]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb81]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430030]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb0d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9c5]

    ??:? runModuleUnitTests [0x42b931]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428284]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164304
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    a = abs(a);\n    b = abs(b);\n    auto aa = to!(string)(a);\n\
    \    auto bb = to!(string)(b);\n    a = cast(long)aa[$-1];\n    b = cast(long)bb[$-1];\n\
    \    return a * b;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L,\
    \ 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L,\
    \ 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L,\
    \ 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwrlgh4qs.d(22): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpwrlgh4qs.d(23): Error: template instance `to!string` template `to` is
    not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwrlgh4qs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164304
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    auto temp = a > 0 ? a : a * -1;\n    auto unit = temp % 10;\n\
    \    temp = b > 0 ? b : b * -1;\n    unit *= temp % 10;\n    return unit;\n}\n\
    unittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L)\
    \ == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L,\
    \ 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L,\
    \ 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164304
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    long productOfUnitDigits = 0;\n    if(a < 0)\n    {\n     \
    \   a = -a;\n    }\n    if(b < 0)\n    {\n        b = -b;\n    }\n    productOfUnitDigits\
    \ = (a % 10) * (b % 10);\n    return productOfUnitDigits;\n}\nunittest\n{\n  \
    \  alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n\
    \    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) ==\
    \ 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L)\
    \ == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164304
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    // Don't forget the type of the result\n    const(long) result;\n\
    \    // Don't forget that the product of digits is a product of numbers\n    return\
    \ (a.unitDigit * b.unitDigit);\n}\nunittest\n{\n    alias candidate = multiply;\n\
    \n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) ==\
    \ 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaq8l0xel.d(23): Error: no property `unitDigit` for type `long`

    /tmp/tmpaq8l0xel.d(23): Error: no property `unitDigit` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaq8l0xel.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164304
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    /*\n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nunittest\n{\n \
    \   alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n\
    \    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) ==\
    \ 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L)\
    \ == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm8izo8a9.d(20): Error: unterminated /* */ comment

    /tmp/tmpm8izo8a9.d(288): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm8izo8a9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164304
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    long a_new = abs(a);\n    long b_new = abs(b);\n    return\
    \ (a_new % 10) * (b_new % 10);\n}\nunittest\n{\n    alias candidate = multiply;\n\
    \n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) ==\
    \ 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164304
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return a % 10 * b % 10;\n}\nunittest\n{\n    alias candidate\
    \ = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpf4tgx0a3.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ddd]

    ??:? void tmpf4tgx0a3.__unittest_L22_C1() [0x427a45]

    ??:? void tmpf4tgx0a3.__modtest() [0x427b5c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb03]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a996]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb29]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fab5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]

    ??:? runModuleUnitTests [0x42b8d9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42822c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164304
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    long result = 0;\n    string strA = a.to!string;\n    string\
    \ strB = b.to!string;\n    int lengthA = strA.length;\n    int lengthB = strB.length;\n\
    \    if(a == 0 || b == 0)\n    {\n        return 0;\n    }\n    if(a < 0)\n  \
    \  {\n        a = -a;\n    }\n    if(b < 0)\n    {\n        b = -b;\n    }\n \
    \   if(lengthA == 1 && lengthB == 1)\n    {\n        result = a * b;\n    }\n\
    \    else if(lengthA > 1 && lengthB == 1)\n    {\n        strA = strA[$-1..$];\n\
    \        result = to!long(strA) * b;\n    }\n    else if(lengthA == 1 && lengthB\
    \ > 1)\n    {\n        strB = strB[$-1..$];\n        result = a * to!long(strB);\n\
    \    }\n    else\n    {\n        strA = strA[$-1..$];\n        strB = strB[$-1..$];\n\
    \        result = to!long(strA) * to!long(strB);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L,\
    \ 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L,\
    \ 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L,\
    \ 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd7skkxxt.d(21): Error: no property `to` for type `long`

    /tmp/tmpd7skkxxt.d(22): Error: no property `to` for type `long`

    /tmp/tmpd7skkxxt.d(23): Error: cannot implicitly convert expression `strA.length`
    of type `ulong` to `int`

    /tmp/tmpd7skkxxt.d(24): Error: cannot implicitly convert expression `strB.length`
    of type `ulong` to `int`

    /tmp/tmpd7skkxxt.d(44): Error: template instance `to!long` template `to` is not
    defined, did you mean No?

    /tmp/tmpd7skkxxt.d(49): Error: template instance `to!long` template `to` is not
    defined, did you mean No?

    /tmp/tmpd7skkxxt.d(55): Error: template instance `to!long` template `to` is not
    defined, did you mean No?

    /tmp/tmpd7skkxxt.d(55): Error: template instance `to!long` template `to` is not
    defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd7skkxxt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164304
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    auto sa = to!string(a);\n    auto sb = to!string(b);\n    return\
    \ sa.length > 1 && sb.length > 1 ? (to!int(sa[$-1..$]) * to!int(sb[$-1..$])) :\
    \ (a * b);\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L,\
    \ 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L,\
    \ 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L,\
    \ 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjyysukll.d(20): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpjyysukll.d(21): Error: template instance `to!string` template `to` is
    not defined, did you mean No?

    /tmp/tmpjyysukll.d(22): Error: template instance `to!int` template `to` is not
    defined, did you mean No?

    /tmp/tmpjyysukll.d(22): Error: template instance `to!int` template `to` is not
    defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjyysukll.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164304
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    long r = 1;\n    r *= a > 0 ? a % 10 : -(a % 10);\n    r *=\
    \ b > 0 ? b % 10 : -(b % 10);\n    return r;\n}\nunittest\n{\n    alias candidate\
    \ = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164304
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n  a = (a<0) ? -a : a;\n  b = (b<0) ? -b : b;\n  return (a%10L)*(b%10L);\n\
    }\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L,\
    \ 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L,\
    \ 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L,\
    \ 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164304
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return abs(a % 10) * abs(b % 10);\n}\nunittest\n{\n    alias\
    \ candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164304
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    auto sum = 0;\n    for(;a>0; a/=10)\n    {\n        auto temp\
    \ = a%10;\n        for(;b>0; b/=10)\n        {\n            sum += temp * (b%10);\n\
    \        }\n    }\n    return sum;\n}\n/*\ngiven an input integer, return the\
    \ sum of all integers that are factors of the number.\nthe number will be positive,\
    \ in the range of 1 to 100,000.\n*/\nlong int FactorSum(long int n) \n{\n    return\
    \ 0;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L,\
    \ 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L,\
    \ 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L,\
    \ 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph9dc3x6a.d(35): Error: no identifier for declarator `long`

    /tmp/tmph9dc3x6a.d(35): Error: found `int` when expecting `)`

    /tmp/tmph9dc3x6a.d(35): Error: semicolon expected following function declaration

    /tmp/tmph9dc3x6a.d(35): Error: no identifier for declarator `n`

    /tmp/tmph9dc3x6a.d(35): Error: declaration expected, not `)`

    /tmp/tmph9dc3x6a.d(38): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph9dc3x6a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164304
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    auto a1 = std.string.format(\"%d\", a);\n    auto b1 = std.string.format(\"\
    %d\", b);\n    auto a2 = std.typecons.Tuple!(char, char)(a1[$-1], a1[$-2]);\n\
    \    auto b2 = std.typecons.Tuple!(char, char)(b1[$-1], b1[$-2]);\n    auto a3\
    \ = std.string.format(\"%d\", a2[0]-'0');\n    auto b3 = std.string.format(\"\
    %d\", b2[0]-'0');\n    auto a4 = std.string.format(\"%d\", a2[1]-'0');\n    auto\
    \ b4 = std.string.format(\"%d\", b2[1]-'0');\n    auto a5 = std.string.format(\"\
    %d\", a3.to!ulong * b3.to!ulong);\n    auto b5 = std.string.format(\"%d\", a4.to!ulong\
    \ * b4.to!ulong);\n    auto c = a5[$-1].to!ulong * b5[$-1].to!ulong;\n    return\
    \ c;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L,\
    \ 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L,\
    \ 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L,\
    \ 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjaylahf1.d(20): Error: undefined identifier `string` in package
    `std`

    /tmp/tmpjaylahf1.d(21): Error: undefined identifier `string` in package `std`

    /tmp/tmpjaylahf1.d(24): Error: undefined identifier `string` in package `std`

    /tmp/tmpjaylahf1.d(25): Error: undefined identifier `string` in package `std`

    /tmp/tmpjaylahf1.d(26): Error: undefined identifier `string` in package `std`

    /tmp/tmpjaylahf1.d(27): Error: undefined identifier `string` in package `std`

    /tmp/tmpjaylahf1.d(28): Error: undefined identifier `string` in package `std`

    /tmp/tmpjaylahf1.d(29): Error: undefined identifier `string` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjaylahf1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164304
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return (a % 10) * (b % 10);\n}\nunittest\n{\n    alias candidate\
    \ = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4be3vd8e.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427de5]

    ??:? void tmp4be3vd8e.__unittest_L22_C1() [0x427ac4]

    ??:? void tmp4be3vd8e.__modtest() [0x427b68]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a99e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fabd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]

    ??:? runModuleUnitTests [0x42b8e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428234]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164304
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return (a % 10) * (b % 10);\n}\nunittest\n{\n    alias candidate\
    \ = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4be3vd8e.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427de5]

    ??:? void tmp4be3vd8e.__unittest_L22_C1() [0x427ac4]

    ??:? void tmp4be3vd8e.__modtest() [0x427b68]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a99e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fabd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]

    ??:? runModuleUnitTests [0x42b8e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428234]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164304
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return (a % 10) * (b % 10);\n}\nunittest\n{\n    alias candidate\
    \ = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4be3vd8e.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427de5]

    ??:? void tmp4be3vd8e.__unittest_L22_C1() [0x427ac4]

    ??:? void tmp4be3vd8e.__modtest() [0x427b68]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a99e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fabd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]

    ??:? runModuleUnitTests [0x42b8e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428234]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164304
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    long aa = abs(a);\n    long bb = abs(b);\n    long unitDigitA\
    \ = aa % 10;\n    long unitDigitB = bb % 10;\n    return unitDigitA * unitDigitB;\n\
    }\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L,\
    \ 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L,\
    \ 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L,\
    \ 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164304
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return to!long(abs(a % 10) * abs(b % 10));\n}\nunittest\n{\n\
    \    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n\
    \    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) ==\
    \ 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L)\
    \ == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsgmunj7x.d(20): Error: template instance `to!long` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsgmunj7x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164304
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return abs(a % 10) * abs(b % 10);\n}\nunittest\n{\n    alias\
    \ candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164304
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    auto ua = a.abs();\n    auto ub = b.abs();\n    auto res =\
    \ ua * ub;\n    auto ures = res.units;\n    return (a < 0 && b < 0) || (a > 0\
    \ && b > 0) ? ures : -ures;\n}\nunittest\n{\n    alias candidate = multiply;\n\
    \n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) ==\
    \ 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxzjrwmfz.d(23): Error: no property `units` for type `long`

    '
  stdout: ''
  timestamp: 1660164304
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return a % 10 * b % 10;\n}\nunittest\n{\n    alias candidate\
    \ = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpf4tgx0a3.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ddd]

    ??:? void tmpf4tgx0a3.__unittest_L22_C1() [0x427a45]

    ??:? void tmpf4tgx0a3.__modtest() [0x427b5c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb03]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a996]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb29]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fab5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]

    ??:? runModuleUnitTests [0x42b8d9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42822c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164304
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    a %= 10;\n    b %= 10;\n    return a * b;\n}\nunittest\n{\n\
    \    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n\
    \    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) ==\
    \ 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L)\
    \ == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvbq22mfx.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ded]

    ??:? void tmpvbq22mfx.__unittest_L24_C1() [0x427ac8]

    ??:? void tmpvbq22mfx.__modtest() [0x427b6c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb13]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9a6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb39]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fac5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a97d]

    ??:? runModuleUnitTests [0x42b8e9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42823c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164304
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n  return (a * b) % 10;\n}\nunittest\n{\n    alias candidate = multiply;\n\
    \n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) ==\
    \ 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpxrge9_z2.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dd5]

    ??:? void tmpxrge9_z2.__unittest_L22_C1() [0x427a3d]

    ??:? void tmpxrge9_z2.__modtest() [0x427b54]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bafb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a98e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb21]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42faad]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]

    ??:? runModuleUnitTests [0x42b8d1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428224]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164304
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return (a % 10) * (b % 10);\n}\nunittest\n{\n    alias candidate\
    \ = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4be3vd8e.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427de5]

    ??:? void tmp4be3vd8e.__unittest_L22_C1() [0x427ac4]

    ??:? void tmp4be3vd8e.__modtest() [0x427b68]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a99e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fabd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]

    ??:? runModuleUnitTests [0x42b8e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428234]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164304
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return abs(a % 10) * abs(b % 10);\n}\nunittest\n{\n    alias\
    \ candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164304
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    long r = 0;\n    r = abs(a % 10) * abs(b % 10);\n    return\
    \ r;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L,\
    \ 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L,\
    \ 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L,\
    \ 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164304
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return a%10*b%10;\n}\nunittest\n{\n    alias candidate = multiply;\n\
    \n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) ==\
    \ 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpxd3yo_an.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ddd]

    ??:? void tmpxd3yo_an.__unittest_L22_C1() [0x427a45]

    ??:? void tmpxd3yo_an.__modtest() [0x427b5c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb03]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a996]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb29]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fab5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]

    ??:? runModuleUnitTests [0x42b8d9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42822c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164304
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n  // your code goes here!\n  // First get the unit digit of each\
    \ input\n  // Multiply them together\n  // return the result\n  // You can use\
    \ std.math.mod or you can use %\n  // The integer division operator is //\n  //\
    \ Don't use std.math.div unless you are prepared\n  // for floor division!\n \
    \ return 0L;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L,\
    \ 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L,\
    \ 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L,\
    \ 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpoz84xcwl.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x427db5]

    ??:? void tmpoz84xcwl.__unittest_L30_C1() [0x427a21]

    ??:? void tmpoz84xcwl.__modtest() [0x427b38]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42badb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a96e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb01]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffb0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa8d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a945]

    ??:? runModuleUnitTests [0x42b8b1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428204]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164304
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    enum a = a;\n    enum b = b;\n    return abs(a % 10) * abs(b\
    \ % 10);\n}\n// long multiply(long a, long b) => std.math.abs(a % 10) * std.math.abs(b\
    \ % 10);\n/*\nThe class you are going to test is available on Codewars.\n    Test.assertEquals(sum(1,\
    \ 2), 3);\n    Test.assertEquals(sum(5, 2), 7);\nTest.describe(\"Basic tests\"\
    , _ => {\n    Test.assertEquals(sum(1, 2), 3);\n    Test.assertEquals(sum(5, 2),\
    \ 7);\n});\n*/\ndouble sum(double a, double b) \n{\n    return a + b;\n}\n/*\n\
    You get an array of numbers, return the sum of all of the positives ones.\nExample\
    \ [1,-4,7,12] => 1 + 7 + 12 = 20\nNote: if there is nothing to sum, the sum is\
    \ default to 0.\n*/\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L,\
    \ 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L,\
    \ 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L,\
    \ 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpohwahxve.d(20): Error: variable `a` cannot be read at compile time

    /tmp/tmpohwahxve.d(20): Error: variable `a` is shadowing variable `tmpohwahxve.multiply.a`

    /tmp/tmpohwahxve.d(21): Error: variable `b` cannot be read at compile time

    /tmp/tmpohwahxve.d(21): Error: variable `b` is shadowing variable `tmpohwahxve.multiply.b`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpohwahxve.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164304
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    a = abs(a);\n    b = abs(b);\n    return (a % 10) * (b % 10);\n\
    }\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L,\
    \ 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L,\
    \ 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L,\
    \ 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164305
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    if (a < 0)\n        a = -a;\n    if (b < 0)\n        b = -b;\n\
    \    return (a % 10) * (b % 10);\n}\nunittest\n{\n    alias candidate = multiply;\n\
    \n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) ==\
    \ 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164304
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    long num1 = abs(a);\n    long num2 = abs(b);\n    long result\
    \ = num1%10 * num2%10;\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvyj3io1l.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e4d]

    ??:? void tmpvyj3io1l.__unittest_L25_C1() [0x427aa1]

    ??:? void tmpvyj3io1l.__modtest() [0x427bd0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb73]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa06]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb99]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430048]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb25]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9dd]

    ??:? runModuleUnitTests [0x42b949]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42829c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164304
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return (a < 0 ? -a : a) % 10 * (b < 0 ? -b : b) % 10;\n}\n\
    //*****************************************************\nlong multiply(long a,\
    \ long b) \n{\n    return (a % 10) * (b % 10);\n}\n//*****************************************************\n\
    long multiply(long a, long b) \n{\n    return std.math.abs(a % 10) * std.math.abs(b\
    \ % 10);\n}\n//*****************************************************\nlong multiply(long\
    \ a, long b) \n{\n    return std.typecons.Tuple(a, b).map!(a => a % 10).product;\n\
    }\n//*****************************************************\nlong multiply(long\
    \ a, long b) \n{\n    return (a % 10) * (b % 10);\n}\n//*****************************************************\n\
    long multiply(long a, long b) \n{\n    return ((a % 10) * (b % 10)) % 10;\n}\n\
    //*****************************************************\nimport std.algorithm;\n\
    import std.range;\nimport std.stdio;\nunittest\n{\n    alias candidate = multiply;\n\
    \n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) ==\
    \ 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp20p6_mhk.d(35): Error: struct `std.typecons.Tuple` cannot deduce
    function from argument types `!()(long, long)`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(460):        `std.typecons.Tuple(Specs...)
    if (distinctFieldNames!Specs)`

    /tmp/tmp20p6_mhk.d(55): Error: `tmp20p6_mhk.multiply` called with argument types
    `(long, long)` matches both:

    /tmp/tmp20p6_mhk.d(18):     `tmp20p6_mhk.multiply(long a, long b)`

    and:

    /tmp/tmp20p6_mhk.d(43):     `tmp20p6_mhk.multiply(long a, long b)`

    /tmp/tmp20p6_mhk.d(56): Error: `tmp20p6_mhk.multiply` called with argument types
    `(long, long)` matches both:

    /tmp/tmp20p6_mhk.d(18):     `tmp20p6_mhk.multiply(long a, long b)`

    and:

    /tmp/tmp20p6_mhk.d(43):     `tmp20p6_mhk.multiply(long a, long b)`

    /tmp/tmp20p6_mhk.d(57): Error: `tmp20p6_mhk.multiply` called with argument types
    `(long, long)` matches both:

    /tmp/tmp20p6_mhk.d(18):     `tmp20p6_mhk.multiply(long a, long b)`

    and:

    /tmp/tmp20p6_mhk.d(43):     `tmp20p6_mhk.multiply(long a, long b)`

    /tmp/tmp20p6_mhk.d(58): Error: `tmp20p6_mhk.multiply` called with argument types
    `(long, long)` matches both:

    /tmp/tmp20p6_mhk.d(18):     `tmp20p6_mhk.multiply(long a, long b)`

    and:

    /tmp/tmp20p6_mhk.d(43):     `tmp20p6_mhk.multiply(long a, long b)`

    /tmp/tmp20p6_mhk.d(59): Error: `tmp20p6_mhk.multiply` called with argument types
    `(long, long)` matches both:

    /tmp/tmp20p6_mhk.d(18):     `tmp20p6_mhk.multiply(long a, long b)`

    and:

    /tmp/tmp20p6_mhk.d(43):     `tmp20p6_mhk.multiply(long a, long b)`

    /tmp/tmp20p6_mhk.d(60): Error: `tmp20p6_mhk.multiply` called with argument types
    `(long, long)` matches both:

    /tmp/tmp20p6_mhk.d(18):     `tmp20p6_mhk.multiply(long a, long b)`

    and:

    /tmp/tmp20p6_mhk.d(43):     `tmp20p6_mhk.multiply(long a, long b)`

    /tmp/tmp20p6_mhk.d(61): Error: `tmp20p6_mhk.multiply` called with argument types
    `(long, long)` matches both:

    /tmp/tmp20p6_mhk.d(18):     `tmp20p6_mhk.multiply(long a, long b)`

    and:

    /tmp/'
  stdout: ''
  timestamp: 1660164306
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    auto aProduct = cast(int) std.math.abs(a) % 10;\n    auto bProduct\
    \ = cast(int) std.math.abs(b) % 10;\n    return aProduct * bProduct;\n}\nunittest\n\
    {\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n\
    \    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) ==\
    \ 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L)\
    \ == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164305
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    auto tuple = tuple(a, b);\n    return reduce!((a, b) => a *\
    \ b)(map!(abs)(tuple));\n}\nunittest\n{\n    alias candidate = multiply;\n\n \
    \   assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n\
    \    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) ==\
    \ 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L)\
    \ == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L)\
    \ == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpshll94f6.d(21): Error: template instance `reduce!((a, b) => a *
    b)` template `reduce` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpshll94f6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164304
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    a = abs(a);\n    b = abs(b);\n    return (a * b) % 10;\n}\n\
    \ \nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L,\
    \ 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L,\
    \ 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L,\
    \ 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_jz8j00b.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e4d]

    ??:? void tmp_jz8j00b.__unittest_L25_C1() [0x427a9d]

    ??:? void tmp_jz8j00b.__modtest() [0x427bcc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb73]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa06]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb99]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430048]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb25]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9dd]

    ??:? runModuleUnitTests [0x42b949]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42829c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164305
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return abs(a % 10) * abs(b % 10);\n}\nunittest\n{\n    alias\
    \ candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164304
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    long x = a % 10L;\n    long y = b % 10L;\n    return x * y;\n\
    }\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L,\
    \ 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L,\
    \ 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L,\
    \ 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy6dv0ltc.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ddd]

    ??:? void tmpy6dv0ltc.__unittest_L24_C1() [0x427ab8]

    ??:? void tmpy6dv0ltc.__modtest() [0x427b5c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb03]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a996]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb29]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fab5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]

    ??:? runModuleUnitTests [0x42b8d9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42822c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164305
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return (a % 10) * (b % 10);\n}\nunittest\n{\n    alias candidate\
    \ = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4be3vd8e.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427de5]

    ??:? void tmp4be3vd8e.__unittest_L22_C1() [0x427ac4]

    ??:? void tmp4be3vd8e.__modtest() [0x427b68]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a99e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fabd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]

    ??:? runModuleUnitTests [0x42b8e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428234]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164304
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    auto result = a % 10 * b % 10;\n    return result;\n}\nunittest\n\
    {\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n\
    \    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) ==\
    \ 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L)\
    \ == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpdex_0_7n.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ddd]

    ??:? void tmpdex_0_7n.__unittest_L23_C1() [0x427a45]

    ??:? void tmpdex_0_7n.__modtest() [0x427b5c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb03]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a996]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb29]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fab5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]

    ??:? runModuleUnitTests [0x42b8d9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42822c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164305
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    a %= 10;\n    b %= 10;\n    return a * b;\n}\nunittest\n{\n\
    \    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n\
    \    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) ==\
    \ 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L)\
    \ == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvbq22mfx.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ded]

    ??:? void tmpvbq22mfx.__unittest_L24_C1() [0x427ac8]

    ??:? void tmpvbq22mfx.__modtest() [0x427b6c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb13]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9a6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb39]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fac5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a97d]

    ??:? runModuleUnitTests [0x42b8e9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42823c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164304
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    auto c = a*b;\n    return (c%10)*(c/10%10);\n}\nunittest\n\
    {\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n\
    \    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) ==\
    \ 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L)\
    \ == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7mmwb2tr.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427df5]

    ??:? void tmp7mmwb2tr.__unittest_L23_C1() [0x427a61]

    ??:? void tmp7mmwb2tr.__modtest() [0x427b78]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb1b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9ae]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb41]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42fff0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42facd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a985]

    ??:? runModuleUnitTests [0x42b8f1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428244]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164305
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return (abs(a) % 10) * (abs(b) % 10);\n}\nunittest\n{\n   \
    \ alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n \
    \   assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) ==\
    \ 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L)\
    \ == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164305
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    import std.traits;\n    import std.conv;\n    if (a < 0)\n\
    \        a = -a;\n    if (b < 0)\n        b = -b;\n    string aa = a.to!string;\n\
    \    string bb = b.to!string;\n    char a1 = aa[aa.length - 1];\n    char b1 =\
    \ bb[bb.length - 1];\n    long result = 0;\n    if (a1.isDigit && b1.isDigit)\n\
    \    {\n        result = (a1.to!long) * (b1.to!long);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L,\
    \ 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L,\
    \ 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L,\
    \ 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuz2ncduo.d(31): Error: no property `isDigit` for type `char`

    /tmp/tmpuz2ncduo.d(31): Error: no property `isDigit` for type `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuz2ncduo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164304
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    long res = 0;\n    long a_mod = 0;\n    long b_mod = 0;\n \
    \   int a_sign = 0;\n    int b_sign = 0;\n    if (a < 0)\n    {\n        a_sign\
    \ = 1;\n        a = a*-1;\n    }\n    if (b < 0)\n    {\n        b_sign = 1;\n\
    \        b = b*-1;\n    }\n    a_mod = a % 10;\n    b_mod = b % 10;\n    res =\
    \ a_mod * b_mod;\n    if (a_sign == 1)\n    {\n        res = res * -1;\n    }\n\
    \    return res;\n}\n// top! \nlong multiply(long a, long b) \n{\n    return (a\
    \ % 10) * (b % 10);\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L,\
    \ 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L,\
    \ 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L,\
    \ 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdfdp656b.d(53): Error: `tmpdfdp656b.multiply` called with argument
    types `(long, long)` matches both:

    /tmp/tmpdfdp656b.d(18):     `tmpdfdp656b.multiply(long a, long b)`

    and:

    /tmp/tmpdfdp656b.d(45):     `tmpdfdp656b.multiply(long a, long b)`

    /tmp/tmpdfdp656b.d(54): Error: `tmpdfdp656b.multiply` called with argument types
    `(long, long)` matches both:

    /tmp/tmpdfdp656b.d(18):     `tmpdfdp656b.multiply(long a, long b)`

    and:

    /tmp/tmpdfdp656b.d(45):     `tmpdfdp656b.multiply(long a, long b)`

    /tmp/tmpdfdp656b.d(55): Error: `tmpdfdp656b.multiply` called with argument types
    `(long, long)` matches both:

    /tmp/tmpdfdp656b.d(18):     `tmpdfdp656b.multiply(long a, long b)`

    and:

    /tmp/tmpdfdp656b.d(45):     `tmpdfdp656b.multiply(long a, long b)`

    /tmp/tmpdfdp656b.d(56): Error: `tmpdfdp656b.multiply` called with argument types
    `(long, long)` matches both:

    /tmp/tmpdfdp656b.d(18):     `tmpdfdp656b.multiply(long a, long b)`

    and:

    /tmp/tmpdfdp656b.d(45):     `tmpdfdp656b.multiply(long a, long b)`

    /tmp/tmpdfdp656b.d(57): Erro'
  stdout: ''
  timestamp: 1660164304
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return (a % 10) * (b % 10);\n}\nunittest\n{\n    alias candidate\
    \ = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4be3vd8e.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427de5]

    ??:? void tmp4be3vd8e.__unittest_L22_C1() [0x427ac4]

    ??:? void tmp4be3vd8e.__modtest() [0x427b68]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a99e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fabd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]

    ??:? runModuleUnitTests [0x42b8e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428234]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164304
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return a * b * 10;\n}\nunittest\n{\n    alias candidate = multiply;\n\
    \n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) ==\
    \ 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpw799khwr.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dcd]

    ??:? void tmpw799khwr.__unittest_L22_C1() [0x427a35]

    ??:? void tmpw799khwr.__modtest() [0x427b4c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baf3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a986]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb19]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffc8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42faa5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]

    ??:? runModuleUnitTests [0x42b8c9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42821c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164305
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return (abs(a)%10) * (abs(b)%10);\n}\nunittest\n{\n    alias\
    \ candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164305
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    long ret;\n    a = abs(a);\n    b = abs(b);\n    ret = (a %\
    \ 10) * (b % 10);\n    return ret;\n}\nunittest\n{\n    alias candidate = multiply;\n\
    \n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) ==\
    \ 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164305
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return a.abs().pow(b.abs()[$-1]);\n}\nunittest\n{\n    alias\
    \ candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6sxsqz97.d(20): Error: only one index allowed to index `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6sxsqz97.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164305
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n  return abs(a % 10) * abs(b % 10);\n}\nunittest\n{\n    alias\
    \ candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164305
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    auto tempA = a;\n    auto tempB = b;\n    if(tempA < 0)\n \
    \       tempA = tempA * -1;\n    if(tempB < 0)\n        tempB = tempB * -1;\n\
    \    if(tempA > 9)\n        tempA = tempA % 10;\n    if(tempB > 9)\n        tempB\
    \ = tempB % 10;\n    return tempA * tempB;\n}\nunittest\n{\n    alias candidate\
    \ = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164305
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return std.typecons.tuple(a%10, b%10).product;\n}\nunittest\n\
    {\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n\
    \    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) ==\
    \ 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L)\
    \ == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm4iqn099.d(20): Error: no property `product` for type `Tuple!(long,
    long)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm4iqn099.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164305
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    long r;\n    int ad, bd;\n    r = (long)a * b;\n    if (r <\
    \ 0)\n    {\n        r = -r;\n    }\n    ad = to!int(r) % 10;\n    r = r / 10;\n\
    \    bd = to!int(r) % 10;\n    r = ad * bd;\n    return r;\n}\nunittest\n{\n \
    \   alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n\
    \    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) ==\
    \ 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L)\
    \ == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9pakyqdr.d(22): Error: C style cast illegal, use `cast(long)a`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9pakyqdr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164305
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return (a%10)*(b%10);\n}\nunittest\n{\n    alias candidate\
    \ = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpinx5n_od.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427de5]

    ??:? void tmpinx5n_od.__unittest_L22_C1() [0x427ac4]

    ??:? void tmpinx5n_od.__modtest() [0x427b68]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a99e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fabd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]

    ??:? runModuleUnitTests [0x42b8e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428234]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164305
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n  return (a%10) * (b%10);\n}\nunittest\n{\n    alias candidate\
    \ = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpps4u96z7.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427de5]

    ??:? void tmpps4u96z7.__unittest_L22_C1() [0x427ac4]

    ??:? void tmpps4u96z7.__modtest() [0x427b68]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a99e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fabd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]

    ??:? runModuleUnitTests [0x42b8e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428234]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164305
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return abs(a)%10 * abs(b)%10;\n}\nunittest\n{\n    alias candidate\
    \ = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpzbi9le4a.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e55]

    ??:? void tmpzbi9le4a.__unittest_L22_C1() [0x427aa9]

    ??:? void tmpzbi9le4a.__modtest() [0x427bd8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb7b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa0e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fba1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430050]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb2d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9e5]

    ??:? runModuleUnitTests [0x42b951]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282a4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164305
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n  return (a%10)*(b%10);\n}\nunittest\n{\n    alias candidate =\
    \ multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpx0ig10td.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427de5]

    ??:? void tmpx0ig10td.__unittest_L22_C1() [0x427ac4]

    ??:? void tmpx0ig10td.__modtest() [0x427b68]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a99e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fabd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]

    ??:? runModuleUnitTests [0x42b8e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428234]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164305
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    auto f = [](long x) {\n        int num;\n        auto has_minus\
    \ = (x < 0) ? 1 : 0;\n        auto x_abs = abs(x);\n        if (x_abs < 10) return\
    \ x_abs;\n        else if (x_abs < 100) num = x_abs % 10;\n        else if (x_abs\
    \ < 1000) num = x_abs % 100;\n        else if (x_abs < 10000) num = x_abs % 1000;\n\
    \        else if (x_abs < 100000) num = x_abs % 10000;\n        else if (x_abs\
    \ < 1000000) num = x_abs % 100000;\n        else if (x_abs < 10000000) num = x_abs\
    \ % 1000000;\n        else if (x_abs < 100000000) num = x_abs % 10000000;\n  \
    \      else if (x_abs < 1000000000) num = x_abs % 100000000;\n        else num\
    \ = x_abs % 1000000000;\n        return (has_minus) ? -num : num;\n    };\n  \
    \  auto lhs = f(a);\n    auto rhs = f(b);\n    return lhs * rhs;\n}\n/*\nComplete\
    \ the function that takes three numbers x, y and k (where x \u2264 y), \n    and\
    \ returns the number of integers within the range [x..y] (both ends included)\
    \ \n    that are divisible by k. More scientifically: { i : x \u2264 i \u2264\
    \ y, i mod k = 0 }\n    Example:\n    >>> divisibleCount(6, 11, 2)\n    3\n  \
    \  >>> divisibleCount(6, 11, 3)\n    2\n    >>> divisibleCount(6, 11, 1)\n   \
    \ 6\n    >>> divisibleCount(6, 11, 12)\n    0\n    >>> divisibleCount(6, 11, 10)\n\
    \    1\n    >>> divisibleCount(6, 11, 0)\n    1\n    >>> divisibleCount(6, 11,\
    \ -1)\n    1\n    >>> divisibleCount(6, 11, -10)\n    1\n    >>> divisibleCount(6,\
    \ 11, -12)\n    0\n    >>> divisibleCount(6\nunittest\n{\n    alias candidate\
    \ = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8efm9sr6.d(20): Error: found `x` when expecting `.` following long

    /tmp/tmp8efm9sr6.d(20): Error: found `)` when expecting identifier following `long`.

    /tmp/tmp8efm9sr6.d(20): Error: found `{` when expecting `,`

    /tmp/tmp8efm9sr6.d(21): Error: found `num` when expecting `.` following int

    /tmp/tmp8efm9sr6.d(21): Error: found `;` when expecting identifier following `int`.

    /tmp/tmp8efm9sr6.d(22): Error: found `auto` when expecting `,`

    /tmp/tmp8efm9sr6.d(22): Error: found `;` when expecting `,`

    /tmp/tmp8efm9sr6.d(23): Error: expression expected, not `auto`

    /tmp/tmp8efm9sr6.d(23): Error: found `x_abs` when expecting `,`

    /tmp/tmp8efm9sr6.d(23): Error: expression expected, not `=`

    /tmp/tmp8efm9sr6.d(23): Error: found `abs` when expecting `,`

    /tmp/tmp8efm9sr6.d(23): Error: found `;` when expecting `,`

    /tmp/tmp8efm9sr6.d(24): Error: expression expected, not `if`

    /tmp/tmp8efm9sr6.d(24): Error: found `return` when expecting `,`

    /tmp/tmp8efm9sr6.d(24): Error: found `;` when expecting `,`

    /tmp/tmp8efm9sr6.d(25): Er'
  stdout: ''
  timestamp: 1660164305
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return a%10 * b%10;\n}\nunittest\n{\n    alias candidate =\
    \ multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjf1swd11.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ddd]

    ??:? void tmpjf1swd11.__unittest_L22_C1() [0x427a45]

    ??:? void tmpjf1swd11.__modtest() [0x427b5c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb03]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a996]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb29]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fab5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]

    ??:? runModuleUnitTests [0x42b8d9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42822c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164304
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return abs(a) % 10 * abs(b) % 10;\n}\nunittest\n{\n    alias\
    \ candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpx6av7zwa.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e55]

    ??:? void tmpx6av7zwa.__unittest_L22_C1() [0x427aa9]

    ??:? void tmpx6av7zwa.__modtest() [0x427bd8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb7b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa0e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fba1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430050]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb2d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9e5]

    ??:? runModuleUnitTests [0x42b951]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282a4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164304
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    auto one = a % 10L;\n    auto two = b % 10L;\n    return one\
    \ * two;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L,\
    \ 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L,\
    \ 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L,\
    \ 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpgpn_ftx5.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ddd]

    ??:? void tmpgpn_ftx5.__unittest_L24_C1() [0x427ab8]

    ??:? void tmpgpn_ftx5.__modtest() [0x427b5c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb03]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a996]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb29]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fab5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]

    ??:? runModuleUnitTests [0x42b8d9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42822c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164305
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    long  aa = abs(a);\n    long  bb = abs(b);\n    return (aa\
    \ % 10) * (bb % 10);\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L,\
    \ 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L,\
    \ 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L,\
    \ 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164305
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return a%10*b%10;\n}\nunittest\n{\n    alias candidate = multiply;\n\
    \n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) ==\
    \ 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpxd3yo_an.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ddd]

    ??:? void tmpxd3yo_an.__unittest_L22_C1() [0x427a45]

    ??:? void tmpxd3yo_an.__modtest() [0x427b5c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb03]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a996]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb29]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fab5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]

    ??:? runModuleUnitTests [0x42b8d9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42822c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164304
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return (a%10)*(b%10);\n}\nunittest\n{\n    alias candidate\
    \ = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpinx5n_od.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427de5]

    ??:? void tmpinx5n_od.__unittest_L22_C1() [0x427ac4]

    ??:? void tmpinx5n_od.__modtest() [0x427b68]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a99e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fabd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]

    ??:? runModuleUnitTests [0x42b8e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428234]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164305
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return ((a%10)*(b%10));\n}\nunittest\n{\n    alias candidate\
    \ = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8jwjln9y.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427de5]

    ??:? void tmp8jwjln9y.__unittest_L22_C1() [0x427ac4]

    ??:? void tmp8jwjln9y.__modtest() [0x427b68]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a99e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fabd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]

    ??:? runModuleUnitTests [0x42b8e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428234]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164304
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n\treturn (a%10)*(b%10);\n}\nunittest\n{\n    alias candidate =\
    \ multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpja41h0pp.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427de5]

    ??:? void tmpja41h0pp.__unittest_L22_C1() [0x427ac4]

    ??:? void tmpja41h0pp.__modtest() [0x427b68]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a99e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fabd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]

    ??:? runModuleUnitTests [0x42b8e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428234]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164305
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return (a%10) * (b%10);\n}\nunittest\n{\n    alias candidate\
    \ = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmlbf2bsi.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427de5]

    ??:? void tmpmlbf2bsi.__unittest_L22_C1() [0x427ac4]

    ??:? void tmpmlbf2bsi.__modtest() [0x427b68]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a99e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fabd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]

    ??:? runModuleUnitTests [0x42b8e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428234]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164304
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return (a*b)%10;\n}\nstatic test()\n{\n    auto x=multiply(148L,\
    \ 412L);\n    assert(x==16L);\n    auto y=multiply(19L, 28L);\n    assert(y==72L);\n\
    \    auto z=multiply(2020L, 1851L);\n    assert(z==0L);\n    auto w=multiply(14L,\
    \ -15L);\n    assert(w==20L);\n}\nunittest\n{\n    alias candidate = multiply;\n\
    \n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) ==\
    \ 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpr23h5h3t.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f89]

    ??:? void tmpr23h5h3t.__unittest_L33_C1() [0x427b3d]

    ??:? void tmpr23h5h3t.__modtest() [0x427c54]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bcaf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab42]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fcd5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430184]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc61]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab19]

    ??:? runModuleUnitTests [0x42ba85]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4283d8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164305
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return abs(a * b) % 10;\n}\nunittest\n{\n    alias candidate\
    \ = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpcfc_1zbc.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e2d]

    ??:? void tmpcfc_1zbc.__unittest_L22_C1() [0x427a81]

    ??:? void tmpcfc_1zbc.__modtest() [0x427bb0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb53]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9e6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb79]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430028]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb05]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9bd]

    ??:? runModuleUnitTests [0x42b929]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42827c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164305
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return a.unitDigit() * b.unitDigit();\n}\nunittest\n{\n   \
    \ alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n \
    \   assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) ==\
    \ 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L)\
    \ == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp606rw56m.d(20): Error: no property `unitDigit` for type `long`

    /tmp/tmp606rw56m.d(20): Error: no property `unitDigit` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp606rw56m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164305
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return abs(a)%10*abs(b)%10;\n}\nlong[] multiply(long a, long\
    \ b)\n{\n    auto result = tuple(a,b);\n    return result.expand;\n}\nlong multiply(long\
    \ a, long b)\n{\n    return (a%10)*(b%10);\n}\nlong multiply(long a, long b)\n\
    {\n    return ((a % 10) * (b % 10));\n}\nlong multiply(long a, long b)\n{\n  \
    \  return (a%10) * (b%10);\n}\nlong multiply(long a, long b)\n{\n    return (a/10).remainder(10)*(b/10).remainder(10);\n\
    }\nlong multiply(long a, long b)\n{\n    return (a % 10) * (b % 10);\n}\nlong\
    \ multiply(long a, long b)\n{\n    return (a%10)*(b%10);\n}\nlong multiply(long\
    \ a, long b)\n{\n    return a%10*b%10;\n}\nlong multiply(long a, long b)\n{\n\
    \    return (a%10)*(b%10);\n}\nlong multiply(long a, long b)\n{\n    return (a%10)*(b%10);\n\
    }\nlong multiply(long a, long b)\n{\n    return (a % 10) * (b % 10);\n}\nlong\
    \ multiply(long a, long b)\n{\n    return (a%10)*(b%10);\n}\nlong multiply(long\
    \ a, long b)\n{\n    return (a % 10) * (b % 10);\n}\nlong multiply(long a, long\
    \ b)\n{\n    return (a%10)*(b%10);\n}\nlong multiply(long a, long b)\n{\n    return\
    \ (a % 10) * (b % 10);\n}\nlong multiply(long a, long b)\n{\n    return (a%10)*(b%10);\n\
    }\nlong multiply(long a, long b)\n{\n    return (a % 10) * (b % 10);\n}\nlong\
    \ multiply(long a, long\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L,\
    \ 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L,\
    \ 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L,\
    \ 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6zummeni.d(92): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6zummeni.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164305
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return (a * b) % 10;\n}\nunittest\n{\n    alias candidate =\
    \ multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpeuo1h02a.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dd5]

    ??:? void tmpeuo1h02a.__unittest_L22_C1() [0x427a3d]

    ??:? void tmpeuo1h02a.__modtest() [0x427b54]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bafb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a98e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb21]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42faad]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]

    ??:? runModuleUnitTests [0x42b8d1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428224]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164305
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return (abs(a) % 10) * (abs(b) % 10);\n}\nunittest\n{\n   \
    \ alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n \
    \   assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) ==\
    \ 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L)\
    \ == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164305
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    long a_unit_digit = a % 10;\n    long b_unit_digit = b % 10;\n\
    \    return a_unit_digit * b_unit_digit;\n}\nunittest\n{\n    alias candidate\
    \ = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_y6i1xlt.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ddd]

    ??:? void tmp_y6i1xlt.__unittest_L24_C1() [0x427ab8]

    ??:? void tmp_y6i1xlt.__modtest() [0x427b5c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb03]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a996]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb29]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fab5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]

    ??:? runModuleUnitTests [0x42b8d9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42822c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164305
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n  return a*b%10;\n}\nunittest\n{\n    alias candidate = multiply;\n\
    \n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) ==\
    \ 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpxgd_k7f2.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dd5]

    ??:? void tmpxgd_k7f2.__unittest_L22_C1() [0x427a3d]

    ??:? void tmpxgd_k7f2.__modtest() [0x427b54]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bafb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a98e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb21]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42faad]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]

    ??:? runModuleUnitTests [0x42b8d1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428224]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164305
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    long[] A = std.typecons.Tuple!(long[])\n    (\n        (a/10L,\
    \ a%10L),\n        (b/10L, b%10L)\n    );\n    return A[0][1] * A[1][1];\n}\n\
    unittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L)\
    \ == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L,\
    \ 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L,\
    \ 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptbo26iq4.d(22): Error: Using the result of a comma expression is
    not allowed

    /tmp/tmptbo26iq4.d(23): Error: Using the result of a comma expression is not allowed

    /tmp/tmptbo26iq4.d(21): Error: none of the overloads of `this` are callable using
    argument types `(long, long)`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(668):        `std.typecons.Tuple!(long[]).Tuple.this(long[]
    _param_0)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(689):        `std.typecons.Tuple!(long[]).Tuple.__ctor(U,
    ulong n)(U[n] values) if (n == Types.length && allSatisfy!(isBuildableFrom!U,
    Types))`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(715):        `std.typecons.Tuple!(long[])'
  stdout: ''
  timestamp: 1660164305
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n\tif (b < 0) \n\t{\n\t\ta = -a;\n\t\tb = -b;\n\t}\n\tif (a < 0)\
    \ \n\t{\n\t\treturn ((-a) % 10) * (b % 10);\n\t}\n\treturn (a % 10) * (b % 10);\n\
    }\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L,\
    \ 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L,\
    \ 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L,\
    \ 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164305
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    a = abs(a);\n    b = abs(b);\n    return (a%10)*(b%10);\n}\n\
    unittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L)\
    \ == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L,\
    \ 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L,\
    \ 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164305
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return to!long(abs(a) % 10) * to!long(abs(b) % 10);\n}\nunittest\n\
    {\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n\
    \    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) ==\
    \ 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L)\
    \ == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvh1kw2e_.d(20): Error: template instance `to!long` template `to`
    is not defined, did you mean No?

    /tmp/tmpvh1kw2e_.d(20): Error: template instance `to!long` template `to` is not
    defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvh1kw2e_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164305
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n  return abs(a % 10 * b % 10);\n}\nunittest\n{\n    alias candidate\
    \ = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3amci108.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e35]

    ??:? void tmp3amci108.__unittest_L22_C1() [0x427a89]

    ??:? void tmp3amci108.__modtest() [0x427bb8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb5b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9ee]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb81]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430030]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb0d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9c5]

    ??:? runModuleUnitTests [0x42b931]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428284]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164305
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    a = abs(a);\n    b = abs(b);\n    return (cast(long)(a % 10)\
    \ * cast(long)(b % 10));\n}\nunittest\n{\n    alias candidate = multiply;\n\n\
    \    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) ==\
    \ 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164305
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    auto aDigits = staticMap!(aDigit, map!(to!string, split(to!string(a),\
    \ \"\")));\n    auto bDigits = staticMap!(bDigit, map!(to!string, split(to!string(b),\
    \ \"\")));\n    return aDigits[$-1] * bDigits[$-1];\n}\nunittest\n{\n    alias\
    \ candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp82d_zge9.d(20): Error: template instance `staticMap!(aDigit, map!(to!string,
    split(to!string(a), "")))` template `staticMap` is not defined

    /tmp/tmp82d_zge9.d(21): Error: template instance `staticMap!(bDigit, map!(to!string,
    split(to!string(b), "")))` template `staticMap` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp82d_zge9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164305
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    long iA = a;\n    long iB = b;\n    if (abs(a) > 9)\n    {\n\
    \        iA = a % 10;\n    }\n    if (abs(b) > 9)\n    {\n        iB = b % 10;\n\
    \    }\n    return iA * iB;\n}\n//\nlong multiply2(long a, long b) \n{\n    return\
    \ (abs(a) % 10) * (abs(b) % 10);\n}\nunittest\n{\n    alias candidate = multiply;\n\
    \n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) ==\
    \ 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpj6bzshhu.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x427efd]

    ??:? void tmpj6bzshhu.__unittest_L37_C1() [0x427bc4]

    ??:? void tmpj6bzshhu.__modtest() [0x427c80]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc23]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aab6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc49]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300f8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbd5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa8d]

    ??:? runModuleUnitTests [0x42b9f9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42834c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164305
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    immutable aunit = a % 10;\n    immutable bunit = b % 10;\n\
    \    immutable result = aunit * bunit;\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n\
    \    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) ==\
    \ 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L)\
    \ == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4ysxi0hv.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ded]

    ??:? void tmp4ysxi0hv.__unittest_L25_C1() [0x427ac8]

    ??:? void tmp4ysxi0hv.__modtest() [0x427b6c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb13]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9a6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb39]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fac5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a97d]

    ??:? runModuleUnitTests [0x42b8e9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42823c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164305
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    long c = a % 10 * b % 10;\n    return c;\n}\nunittest\n{\n\
    \    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n\
    \    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) ==\
    \ 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L)\
    \ == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpx6fcmvn_.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ddd]

    ??:? void tmpx6fcmvn_.__unittest_L23_C1() [0x427a45]

    ??:? void tmpx6fcmvn_.__modtest() [0x427b5c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb03]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a996]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb29]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fab5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]

    ??:? runModuleUnitTests [0x42b8d9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42822c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164305
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return a % 10 * b % 10;\n}\nunittest\n{\n    alias candidate\
    \ = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpf4tgx0a3.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ddd]

    ??:? void tmpf4tgx0a3.__unittest_L22_C1() [0x427a45]

    ??:? void tmpf4tgx0a3.__modtest() [0x427b5c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb03]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a996]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb29]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fab5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]

    ??:? runModuleUnitTests [0x42b8d9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42822c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164304
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    auto x = (cast(int)abs(a % 10));\n    auto y = (cast(int)abs(b\
    \ % 10));\n    return x * y;\n}\nunittest\n{\n    alias candidate = multiply;\n\
    \n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) ==\
    \ 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164305
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    auto str = to!string(a);\n    auto str2 = to!string(b);\n \
    \   int num1 = 0;\n    int num2 = 0;\n    int product = 0;\n    for(int i = 0;\
    \ i < str.length; i++)\n    {\n        if(str[i] == '-')\n        {\n        \
    \    continue;\n        }\n        else\n        {\n            num1 = str[i]\
    \ - '0';\n            break;\n        }\n    }\n    for(int i = 0; i < str2.length;\
    \ i++)\n    {\n        if(str2[i] == '-')\n        {\n            continue;\n\
    \        }\n        else\n        {\n            num2 = str2[i] - '0';\n     \
    \       break;\n        }\n    }\n    product = num1 * num2;\n    return product;\n\
    }\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L,\
    \ 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L,\
    \ 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L,\
    \ 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqcrsm1k2.d(20): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpqcrsm1k2.d(21): Error: template instance `to!string` template `to` is
    not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqcrsm1k2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164305
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return (a%10L)*(b%10L);\n}\nunittest\n{\n    alias candidate\
    \ = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_4f7f404.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427de5]

    ??:? void tmp_4f7f404.__unittest_L22_C1() [0x427ac4]

    ??:? void tmp_4f7f404.__modtest() [0x427b68]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a99e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fabd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]

    ??:? runModuleUnitTests [0x42b8e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428234]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164305
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    // Write your code here\n    return (a%10) * (b%10);\n}\nunittest\n\
    {\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n\
    \    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) ==\
    \ 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L)\
    \ == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp07o44xlq.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x427de5]

    ??:? void tmp07o44xlq.__unittest_L23_C1() [0x427ac4]

    ??:? void tmp07o44xlq.__modtest() [0x427b68]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a99e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fabd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]

    ??:? runModuleUnitTests [0x42b8e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428234]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164305
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return (a*b)%10;\n}\nunittest\n{\n    alias candidate = multiply;\n\
    \n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) ==\
    \ 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvkr7v4tg.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dd5]

    ??:? void tmpvkr7v4tg.__unittest_L22_C1() [0x427a3d]

    ??:? void tmpvkr7v4tg.__modtest() [0x427b54]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bafb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a98e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb21]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42faad]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]

    ??:? runModuleUnitTests [0x42b8d1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428224]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164305
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    long x = abs(a % 10);\n    long y = abs(b % 10);\n    return\
    \ x * y;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L,\
    \ 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L,\
    \ 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L,\
    \ 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164305
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return a%10*b%10;\n}\n/*\nYour task is to sort a given string.\
    \ Each word in the string will contain a single number. \nThis number is the position\
    \ the word should have in the result.\nunittest\n{\n    alias candidate = multiply;\n\
    \n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) ==\
    \ 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1hka18ks.d(22): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1hka18ks.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164305
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    long x=abs(a)%10;\n    long y=abs(b)%10;\n    return x*y;\n\
    }\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L,\
    \ 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L,\
    \ 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L,\
    \ 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164305
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    auto p = a*b;\n    if(p<0) return -p % 10;\n    return p %\
    \ 10;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L,\
    \ 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L,\
    \ 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L,\
    \ 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpn_cxlqpl.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dfd]

    ??:? void tmpn_cxlqpl.__unittest_L24_C1() [0x427a69]

    ??:? void tmpn_cxlqpl.__modtest() [0x427b80]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb23]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9b6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb49]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42fff8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fad5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a98d]

    ??:? runModuleUnitTests [0x42b8f9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42824c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164306
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    long aa = a < 0 ? -a : a;\n    long bb = b < 0 ? -b : b;\n\
    \    return (aa % 10) * (bb % 10);\n}\nunittest\n{\n    alias candidate = multiply;\n\
    \n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) ==\
    \ 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164305
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return (abs(a)%10)*(abs(b)%10);\n}\nunittest\n{\n    alias\
    \ candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164305
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return a%10*b%10;\n}\nunittest\n{\n    alias candidate = multiply;\n\
    \n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) ==\
    \ 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpxd3yo_an.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ddd]

    ??:? void tmpxd3yo_an.__unittest_L22_C1() [0x427a45]

    ??:? void tmpxd3yo_an.__modtest() [0x427b5c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb03]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a996]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb29]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fab5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]

    ??:? runModuleUnitTests [0x42b8d9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42822c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164304
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return (a%10)*(b%10);\n}\nunittest\n{\n    alias candidate\
    \ = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpinx5n_od.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427de5]

    ??:? void tmpinx5n_od.__unittest_L22_C1() [0x427ac4]

    ??:? void tmpinx5n_od.__modtest() [0x427b68]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a99e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fabd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]

    ??:? runModuleUnitTests [0x42b8e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428234]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164305
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    auto strA = to!string(a).strip();\n    auto strB = to!string(b).strip();\n\
    \    auto lastOfA = strA[$-1].to!long;\n    auto lastOfB = strB[$-1].to!long;\n\
    \    return lastOfA * lastOfB;\n}\nunittest\n{\n    alias candidate = multiply;\n\
    \n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) ==\
    \ 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpby3meeqa.d(20): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpby3meeqa.d(21): Error: template instance `to!string` template `to` is
    not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpby3meeqa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164305
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    // your code here\n    //return 0;\n    return ((a>0)? a%10\
    \ : -a%10) * ((b>0)? b%10 : -b%10);\n}\nunittest\n{\n    alias candidate = multiply;\n\
    \n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) ==\
    \ 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164306
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return (abs(a)%10) * (abs(b)%10);\n}\nunittest\n{\n    alias\
    \ candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164305
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    auto r = a < 0 && b > 0 || a > 0 && b < 0;\n    auto c = a\
    \ * b;\n    return r ? -(((c / 10L) % 10L) * (c % 10L)) : ((c / 10L) % 10L) *\
    \ (c % 10L);\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L,\
    \ 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L,\
    \ 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L,\
    \ 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpftyzsjfq.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e4d]

    ??:? void tmpftyzsjfq.__unittest_L24_C1() [0x427ab5]

    ??:? void tmpftyzsjfq.__modtest() [0x427bcc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb73]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa06]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb99]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430048]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb25]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9dd]

    ??:? runModuleUnitTests [0x42b949]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42829c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164305
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    a %= 10;\n    b %= 10;\n    return abs(a * b);\n}\nunittest\n\
    {\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n\
    \    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) ==\
    \ 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L)\
    \ == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164306
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    // get the absolute values of each\n    long A = abs(a);\n\
    \    long B = abs(b);\n    // get the unit digits of each\n    return A % 10 *\
    \ B % 10;\n}\n// Tests\nstatic assert(multiply(148L, 412L) == 16L);\nstatic assert(multiply(19L,\
    \ 28L) == 72L);\nstatic assert(multiply(2020L, 1851L) == 0L);\nstatic assert(multiply(14L,\
    \ -15L) == 20L);\n// Now for the actual kata\nunittest\n{\n    alias candidate\
    \ = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0b3840ff.d(27): Error: static assert:  `multiply(148L, 412L) ==
    16L` is false

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0b3840ff.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164305
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return abs(a % 10) * abs(b % 10);\n}\nunittest\n{\n    alias\
    \ candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164304
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    if(a == 0 || b == 0) return 0;\n    return abs(a % 10) * abs(b\
    \ % 10);\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L,\
    \ 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L,\
    \ 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L,\
    \ 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164306
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    a = abs(a) % 10;\n    b = abs(b) % 10;\n    return a * b;\n\
    }\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L,\
    \ 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L,\
    \ 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L,\
    \ 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpral8g62n.d(24): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpral8g62n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164305
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return abs(a) % 10 * abs(b) % 10;\n}\nunittest\n{\n    alias\
    \ candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpx6av7zwa.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e55]

    ??:? void tmpx6av7zwa.__unittest_L22_C1() [0x427aa9]

    ??:? void tmpx6av7zwa.__modtest() [0x427bd8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb7b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa0e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fba1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430050]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb2d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9e5]

    ??:? runModuleUnitTests [0x42b951]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282a4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164304
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    long ret = 1;\n    if(a < 0)\n        a = -a;\n    if(b < 0)\n\
    \        b = -b;\n    int moda = a % 10;\n    int modb = b % 10;\n    ret = moda\
    \ * modb;\n    return ret;\n}\nunittest\n{\n    alias candidate = multiply;\n\n\
    \    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) ==\
    \ 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164306
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return abs(a % 10) * abs(b % 10);\n}\nunittest\n{\n    alias\
    \ candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164304
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    if(a < 0L) a = -a;\n    if(b < 0L) b = -b;\n    return (a%10L)*(b%10L);\n\
    }\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L,\
    \ 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L,\
    \ 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L,\
    \ 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164306
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return (a%10L) * (b%10L);\n}\n/*\n    >>> repeat(\"*\", 3L)\n\
    \    \"***\"\n    >>> repeat(\"abc\", 2L)\n    \"abcabc\"\n    >>> repeat(\"abc\"\
    , 0L)\n    \"\"\n    >>> repeat(\"*\", 1L)\n    \"*\"\n*/\nstring repeat(string\
    \ s, long n) \n{\n    auto const N = std.typecons.Yes();\n    return s.dup(n,\
    \ N);\n}\n/*\n    >>> integer_to_string(4L)\n    \"4\"\n    >>> integer_to_string(121L)\n\
    \    \"121\"\n    >>> integer_to_string(1234567890L)\n    \"1234567890\"\n*/\n\
    string integer_to_string(long n) \n{\n    return std.conv.to!string(n);\n}\n/*\n\
    \    >>> modulo(0L, 1L)\n    0L\n    >>> modulo(1L, 0L)\n    Infinity\n    >>>\
    \ modulo(1L, 2L)\n    1L\n    >>> modulo(9L, 3L)\n    0L\n    >>> modulo(1234L,\
    \ 567L)\n    690L\n*/\nlong modulo(long a, long b) \n{\n    return a % b;\n}\n\
    /*\n    >>> gcf(2L, 3L)\n    1L\n    >>> gcf(12L, 8L)\n    4L\n    >>> gcf(1234567890L,\
    \ 9876543210L)\n    10L\n*/\nlong gcf(long a, long b) \n{\n    while (b != 0L)\n\
    \    {\n        auto const c = a % b;\n        a = b;\n        b = c;\n    }\n\
    \    return a;\n}\n/*\n    >>> lcm(2L, 3L)\n    6L\n    >>> lcm(12L, 8L)\n   \
    \ 24L\n    >>> lcm(1234567890L, 9876543210L)\n    11930287302670L\n*/\nlong lcm(long\
    \ a, long\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L,\
    \ 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L,\
    \ 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L,\
    \ 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz1_vucho.d(92): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz1_vucho.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164305
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    auto ret = to!string(a).to!(long[])[$-1] * to!string(b).to!(long[])[$-1];\n\
    \    return ret;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L,\
    \ 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L,\
    \ 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L,\
    \ 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy0n8ayd4.d(20): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpy0n8ayd4.d(20): Error: template instance `to!string` template `to` is
    not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy0n8ayd4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164305
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    //return a % 10 * b % 10;\n    return std.modf.modf(a, 10)\
    \ * std.modf.modf(b, 10);\n}\nunittest\n{\n    alias candidate = multiply;\n\n\
    \    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) ==\
    \ 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfnaye_y7.d(21): Error: undefined identifier `modf` in package `std`

    /tmp/tmpfnaye_y7.d(21): Error: undefined identifier `modf` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfnaye_y7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164306
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    auto count = 0L;\n    auto first = 0L;\n    auto second = 0L;\n\
    \    auto tol = 0L;\n    if(a < 0)\n    {\n        a = abs(a);\n        tol +=\
    \ 1;\n    }\n    if(b < 0)\n    {\n        b = abs(b);\n        tol += 1;\n  \
    \  }\n    while(a/10)\n    {\n        a /= 10;\n    }\n    while(b/10)\n    {\n\
    \        b /= 10;\n    }\n    if(tol % 2 == 0)\n    {\n        return a * b;\n\
    \    }\n    else\n    {\n        return (a * b) * -1;\n    }\n}\nunittest\n{\n\
    \    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n\
    \    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) ==\
    \ 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L)\
    \ == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpf0ok8ep1.d(55): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ecd]

    ??:? void tmpf0ok8ep1.__unittest_L51_C1() [0x427b1d]

    ??:? void tmpf0ok8ep1.__modtest() [0x427c4c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbf3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa86]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc19]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300c8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fba5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa5d]

    ??:? runModuleUnitTests [0x42b9c9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42831c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164306
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n\treturn abs(a%10 * b%10);\n}\nunittest\n{\n    alias candidate\
    \ = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpclwh5wci.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e35]

    ??:? void tmpclwh5wci.__unittest_L22_C1() [0x427a89]

    ??:? void tmpclwh5wci.__modtest() [0x427bb8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb5b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9ee]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb81]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430030]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb0d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9c5]

    ??:? runModuleUnitTests [0x42b931]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428284]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164306
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    ulong absA = abs(a);\n    ulong absB = abs(b);\n    tuple!(ulong,\
    \ ulong)(x, y) = tuple(absA % 10, absB % 10);\n    return long(x) * long(y);\n\
    }\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L,\
    \ 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L,\
    \ 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L,\
    \ 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7nuprfdw.d(22): Error: undefined identifier `x`

    /tmp/tmp7nuprfdw.d(22): Error: undefined identifier `y`

    /tmp/tmp7nuprfdw.d(23): Error: undefined identifier `x`

    /tmp/tmp7nuprfdw.d(23): Error: undefined identifier `y`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7nuprfdw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164306
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    //// \n    //// \n    //// \n    //// \n    long _a = (a >\
    \ 0) ? a : -a;\n    long _b = (b > 0) ? b : -b;\n    return (_a % 10L) * (_b %\
    \ 10L);\n    //// \n    //// \n    //// \n    //// \n}\nunittest\n{\n    alias\
    \ candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164306
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return abs(a % 10) * abs(b % 10);\n}\nunittest\n{\n    alias\
    \ candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164304
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n\tlong c = 1;\n\tlong sum = 0;\n\tint i = 0;\n\tint j = 0;\n\t\
    int arr1[20];\n\tint arr2[20];\n\twhile (a)\n\t{\n\t\tarr1[i] = a % 10;\n\t\t\
    a /= 10;\n\t\ti++;\n\t}\n\twhile (b)\n\t{\n\t\tarr2[j] = b % 10;\n\t\tb /= 10;\n\
    \t\tj++;\n\t}\n\tfor (int i = 0; i < 20; i++)\n\t{\n\t\tif (arr1[i] == -1)\n\t\
    \t{\n\t\t\tarr1[i] = 1;\n\t\t}\n\t\tif (arr2[i] == -1)\n\t\t{\n\t\t\tarr2[i] =\
    \ 1;\n\t\t}\n\t}\n\tfor (int i = 0; i < 20; i++)\n\t{\n\t\tfor (int j = 0; j <\
    \ 20; j++)\n\t\t{\n\t\t\tif (arr1[i] * arr2[j] != 0)\n\t\t\t{\n\t\t\t\tsum +=\
    \ arr1[i] * arr2[j];\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n   \
    \ alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n \
    \   assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) ==\
    \ 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L)\
    \ == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplvzem2qo.d(24): Deprecation: instead of C-style syntax, use D-style
    syntax `int[20] arr1`

    /tmp/tmplvzem2qo.d(25): Deprecation: instead of C-style syntax, use D-style syntax
    `int[20] arr2`

    /tmp/tmplvzem2qo.d(38): Error: variable `i` is shadowing variable `tmplvzem2qo.multiply.i`

    /tmp/tmplvzem2qo.d(49): Error: variable `i` is shadowing variable `tmplvzem2qo.multiply.i`

    /tmp/tmplvzem2qo.d(51): Error: variable `j` is shadowing variable `tmplvzem2qo.multiply.j`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplvzem2qo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164306
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return abs(a % 10) * abs(b % 10);\n}\nunittest\n{\n    alias\
    \ candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164304
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return (a % 10) * (b % 10);\n}\nunittest\n{\n    alias candidate\
    \ = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4be3vd8e.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427de5]

    ??:? void tmp4be3vd8e.__unittest_L22_C1() [0x427ac4]

    ??:? void tmp4be3vd8e.__modtest() [0x427b68]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a99e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fabd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]

    ??:? runModuleUnitTests [0x42b8e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428234]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164304
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return (a % 10) * (b % 10);\n}\nunittest\n{\n    alias candidate\
    \ = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4be3vd8e.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427de5]

    ??:? void tmp4be3vd8e.__unittest_L22_C1() [0x427ac4]

    ??:? void tmp4be3vd8e.__modtest() [0x427b68]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a99e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fabd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]

    ??:? runModuleUnitTests [0x42b8e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428234]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164304
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return (a % 10) * (b % 10);\n}\n/*\n    >>> multiply(148L,\
    \ 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L,\
    \ 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n*/\nunittest\n{\n    alias\
    \ candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpbnsyf0aj.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x427de5]

    ??:? void tmpbnsyf0aj.__unittest_L32_C1() [0x427ac4]

    ??:? void tmpbnsyf0aj.__modtest() [0x427b68]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a99e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fabd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]

    ??:? runModuleUnitTests [0x42b8e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428234]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164306
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    long res = (abs(a)%10) * (abs(b)%10);\n    return res;\n}\n\
    unittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L)\
    \ == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L,\
    \ 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L,\
    \ 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164306
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    long aUnit = a%10;\n    long bUnit = b%10;\n    return aUnit*bUnit;\n\
    }\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L,\
    \ 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L,\
    \ 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L,\
    \ 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpae93proh.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ddd]

    ??:? void tmpae93proh.__unittest_L24_C1() [0x427ab8]

    ??:? void tmpae93proh.__modtest() [0x427b5c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb03]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a996]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb29]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fab5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]

    ??:? runModuleUnitTests [0x42b8d9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42822c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164306
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    //long c = (a * b) % 10; // Failed Test #9\n    long c = (a\
    \ % 10) * (b % 10);\n    return c;\n}\n/*\n    void main(string[] args)\n    {\n\
    \        import std.stdio;\n        writefln(\"enter two integers\");\n      \
    \  long a, b;\n        readf(\"%s %s\", &a, &b);\n        writefln(\"the product\
    \ of their unit digits: %s\", multiply(a, b));\n    }\n*/\nunittest\n{\n    alias\
    \ candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprzcfo3hh.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x427de5]

    ??:? void tmprzcfo3hh.__unittest_L34_C1() [0x427ac4]

    ??:? void tmprzcfo3hh.__modtest() [0x427b68]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a99e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fabd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]

    ??:? runModuleUnitTests [0x42b8e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428234]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164306
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    long result = a * b;\n    if (result < 0)\n    {\n        result\
    \ = -result;\n    }\n    string str = to!string(result);\n    if (str.length <\
    \ 2)\n    {\n        return result;\n    }\n    return str[str.length - 1].to!long\
    \ * str[str.length - 2].to!long;\n}\nunittest\n{\n    alias candidate = multiply;\n\
    \n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) ==\
    \ 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0c8541hj.d(25): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmp0c8541hj.d(30): Error: no property `to` for type `immutable(char)`

    /tmp/tmp0c8541hj.d(30): Error: no property `to` for type `immutable(char)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0c8541hj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164306
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return (a%10)*(b%10);\n}\n/*\nXor-Sum\nTask\nYour task is to\
    \ calculate a ^ b, where a and b are two given integers.\nunittest\n{\n    alias\
    \ candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp59oa_rnh.d(22): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp59oa_rnh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164306
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return abs(a%10 * b%10);\n}\nunittest\n{\n    alias candidate\
    \ = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpj1mq1sfe.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e35]

    ??:? void tmpj1mq1sfe.__unittest_L22_C1() [0x427a89]

    ??:? void tmpj1mq1sfe.__modtest() [0x427bb8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb5b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9ee]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb81]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430030]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb0d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9c5]

    ??:? runModuleUnitTests [0x42b931]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428284]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164306
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return (abs(a) % 10) * (abs(b) % 10);\n}\nunittest\n{\n   \
    \ alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n \
    \   assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) ==\
    \ 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L)\
    \ == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164305
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    if(a > b)\n    {\n        return (a % 10) * (b % 10);\n   \
    \ }\n    else\n    {\n        return (b % 10) * (a % 10);\n    }\n}\nunittest\n\
    {\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n\
    \    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) ==\
    \ 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L)\
    \ == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpj_5jbor8.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e1d]

    ??:? void tmpj_5jbor8.__unittest_L29_C1() [0x427af8]

    ??:? void tmpj_5jbor8.__modtest() [0x427b9c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9d6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb69]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430018]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42faf5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]

    ??:? runModuleUnitTests [0x42b919]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42826c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164306
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    auto aa = a < 0 ? -a : a;\n    auto bb = b < 0 ? -b : b;\n\
    \    return (aa % 10) * (bb % 10);\n}\nunittest\n{\n    alias candidate = multiply;\n\
    \n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) ==\
    \ 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164306
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    immutable _a = abs(a) % 10L;\n    immutable _b = abs(b) % 10L;\n\
    \    return _a * _b;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L,\
    \ 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L,\
    \ 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L,\
    \ 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164306
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return ((a%10)*(b%10));\n}\nunittest\n{\n    alias candidate\
    \ = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8jwjln9y.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427de5]

    ??:? void tmp8jwjln9y.__unittest_L22_C1() [0x427ac4]

    ??:? void tmp8jwjln9y.__modtest() [0x427b68]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a99e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fabd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]

    ??:? runModuleUnitTests [0x42b8e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428234]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164304
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return mul(a, b);\n}\nunittest\n{\n    alias candidate = multiply;\n\
    \n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) ==\
    \ 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeg22mu4l.d(20): Error: undefined identifier `mul`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeg22mu4l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164306
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return cast(long)(abs(a%10) * abs(b%10));\n}\nunittest\n{\n\
    \    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n\
    \    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) ==\
    \ 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L)\
    \ == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164306
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return (abs(a) % 10) * (abs(b) % 10);\n}\nunittest\n{\n   \
    \ alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n \
    \   assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) ==\
    \ 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L)\
    \ == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164305
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    const (long) unitDigit = to!long(reduce!((x, y) => 10 * x +\
    \ y)(map!((y) => y % 10)(to!(int[])(a))));\n    const (long) unitDigitB = to!long(reduce!((x,\
    \ y) => 10 * x + y)(map!((y) => y % 10)(to!(int[])(b))));\n    return unitDigit\
    \ * unitDigitB;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L,\
    \ 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L,\
    \ 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L,\
    \ 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg6gza73v.d(20): Error: template instance `to!long` template `to`
    is not defined, did you mean No?

    /tmp/tmpg6gza73v.d(21): Error: template instance `to!long` template `to` is not
    defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg6gza73v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164306
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return (abs(a%10) * abs(b%10));\n}\nunittest\n{\n    alias\
    \ candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164306
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return (abs(a) % 10) * (abs(b) % 10);\n}\nunittest\n{\n   \
    \ alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n \
    \   assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) ==\
    \ 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L)\
    \ == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164305
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return a%10 * b%10;\n}\nunittest\n{\n    alias candidate =\
    \ multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjf1swd11.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ddd]

    ??:? void tmpjf1swd11.__unittest_L22_C1() [0x427a45]

    ??:? void tmpjf1swd11.__modtest() [0x427b5c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb03]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a996]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb29]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fab5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]

    ??:? runModuleUnitTests [0x42b8d9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42822c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164304
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return (abs(a)%10) * (abs(b)%10);\n}\nunittest\n{\n    alias\
    \ candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164305
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return a % 10 * b % 10;\n}\nunittest\n{\n    alias candidate\
    \ = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpf4tgx0a3.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ddd]

    ??:? void tmpf4tgx0a3.__unittest_L22_C1() [0x427a45]

    ??:? void tmpf4tgx0a3.__modtest() [0x427b5c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb03]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a996]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb29]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fab5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]

    ??:? runModuleUnitTests [0x42b8d9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42822c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164304
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    auto unit = (a%10) * (b%10);\n    return unit;\n}\nunittest\n\
    {\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n\
    \    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) ==\
    \ 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L)\
    \ == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpe94edcqj.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x427de5]

    ??:? void tmpe94edcqj.__unittest_L23_C1() [0x427ac4]

    ??:? void tmpe94edcqj.__modtest() [0x427b68]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a99e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fabd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]

    ??:? runModuleUnitTests [0x42b8e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428234]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164306
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return a % 10 * b % 10;\n}\nunittest\n{\n    alias candidate\
    \ = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpf4tgx0a3.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ddd]

    ??:? void tmpf4tgx0a3.__unittest_L22_C1() [0x427a45]

    ??:? void tmpf4tgx0a3.__modtest() [0x427b5c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb03]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a996]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb29]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fab5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]

    ??:? runModuleUnitTests [0x42b8d9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42822c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164304
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return a % 10 * b % 10;\n}\nunittest\n{\n    alias candidate\
    \ = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpf4tgx0a3.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ddd]

    ??:? void tmpf4tgx0a3.__unittest_L22_C1() [0x427a45]

    ??:? void tmpf4tgx0a3.__modtest() [0x427b5c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb03]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a996]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb29]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fab5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]

    ??:? runModuleUnitTests [0x42b8d9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42822c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164304
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return (a%10)*(b%10);\n}\nunittest\n{\n    alias candidate\
    \ = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpinx5n_od.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427de5]

    ??:? void tmpinx5n_od.__unittest_L22_C1() [0x427ac4]

    ??:? void tmpinx5n_od.__modtest() [0x427b68]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a99e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fabd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]

    ??:? runModuleUnitTests [0x42b8e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428234]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164305
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    long ans = 0;\n    if (a < 0) {\n        a = -a;\n    }\n \
    \   if (b < 0) {\n        b = -b;\n    }\n    long i = 1;\n    long j = 1;\n \
    \   while (a / i != 0) {\n        i *= 10;\n    }\n    while (b / j != 0) {\n\
    \        j *= 10;\n    }\n    ans = (a / (i / 10)) * (b / (j / 10));\n    return\
    \ ans;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L,\
    \ 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L,\
    \ 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L,\
    \ 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpox9p18lr.d(42): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e75]

    ??:? void tmpox9p18lr.__unittest_L38_C1() [0x427add]

    ??:? void tmpox9p18lr.__modtest() [0x427bf4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430070]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb4d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa05]

    ??:? runModuleUnitTests [0x42b971]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164306
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return (a % 10L) * (b % 10L);\n}\nunittest\n{\n    alias candidate\
    \ = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpbfcfo2ky.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427de5]

    ??:? void tmpbfcfo2ky.__unittest_L22_C1() [0x427ac4]

    ??:? void tmpbfcfo2ky.__modtest() [0x427b68]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a99e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fabd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]

    ??:? runModuleUnitTests [0x42b8e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428234]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164306
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return abs(a%10 * b%10);\n}\nunittest\n{\n    alias candidate\
    \ = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpj1mq1sfe.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e35]

    ??:? void tmpj1mq1sfe.__unittest_L22_C1() [0x427a89]

    ??:? void tmpj1mq1sfe.__modtest() [0x427bb8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb5b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9ee]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb81]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430030]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb0d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9c5]

    ??:? runModuleUnitTests [0x42b931]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428284]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164306
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    alias UnitDigit = Tuple!(long,long);\n    UnitDigit r = new\
    \ UnitDigit(0L,0L);\n    if(a>=0L)\n    {\n        r[0] = a%10L;\n    }\n    else\n\
    \    {\n        r[0] = a%10L*-1L;\n    }\n    if(b>=0L)\n    {\n        r[1] =\
    \ b%10L;\n    }\n    else\n    {\n        r[1] = b%10L*-1L;\n    }\n    return\
    \ r[0]*r[1];\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L,\
    \ 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L,\
    \ 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L,\
    \ 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsn6_8con.d(21): Error: cannot implicitly convert expression `new
    Tuple!(long, long)(0L, 0L)` of type `Tuple!(long, long)*` to `Tuple!(long, long)`

    /tmp/tmpsn6_8con.d(21):        Perhaps remove the `new` keyword?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsn6_8con.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164306
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n\ta = abs(a);\n\tb = abs(b);\n\ta %= 10;\n\tb %= 10;\n\treturn\
    \ a * b;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L,\
    \ 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L,\
    \ 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L,\
    \ 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164306
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    import std.math;\n    import std.conv;\n    import std.typecons;\n\
    \    //help us find the unit digit of each number.\n    auto getUnitDigit = (x)\n\
    \        {\n            if(x < 0)\n                x = abs(x);\n            return\
    \ x % 10;\n        };\n    auto result = getUnitDigit(a) * getUnitDigit(b);\n\
    \    //abs only works with ints, so we'll have to convert the result to a long.\n\
    \    return cast(long) abs(result);\n}\nunittest\n{\n    alias candidate = multiply;\n\
    \n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) ==\
    \ 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc300jvkz.d(24): Error: variable `tmpc300jvkz.multiply.getUnitDigit`
    type `void` is inferred from initializer `(x)

    {

    if (x < 0)

    x = abs(x);

    return x % 10;

    }

    `, and variables cannot be of type `void`

    /tmp/tmpc300jvkz.d(24): Error: template lambda has no value

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc300jvkz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164306
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    long i = 0L;\n    long j = 0L;\n    long k = 0L;\n    long\
    \ l = 0L;\n    long m = 0L;\n    long x = 0L;\n    long y = 0L;\n    if (a < 0)\n\
    \    {\n        i = -1;\n        x = -a;\n    }\n    else\n    {\n        i =\
    \ 1;\n        x = a;\n    }\n    if (b < 0)\n    {\n        j = -1;\n        y\
    \ = -b;\n    }\n    else\n    {\n        j = 1;\n        y = b;\n    }\n    k\
    \ = i * j;\n    l = x % 10;\n    m = y % 10;\n    return l * m * k;\n}\nunittest\n\
    {\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n\
    \    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) ==\
    \ 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L)\
    \ == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpamfy3ho7.d(59): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e55]

    ??:? void tmpamfy3ho7.__unittest_L52_C1() [0x427b30]

    ??:? void tmpamfy3ho7.__modtest() [0x427bd4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb7b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa0e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fba1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430050]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb2d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9e5]

    ??:? runModuleUnitTests [0x42b951]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282a4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164306
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    auto [x,y] = tuple(a,b);\n    return x < 0 ? -1 * (abs(x) %\
    \ 10) * (abs(y) % 10) : \n                    (x % 10) * (y % 10);\n}\nunittest\n\
    {\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n\
    \    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) ==\
    \ 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L)\
    \ == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb58qeyj4.d(20): Error: basic type expected, not `[`

    /tmp/tmpb58qeyj4.d(20): Error: found `,` when expecting `]`

    /tmp/tmpb58qeyj4.d(20): Error: semicolon expected, not `]`

    /tmp/tmpb58qeyj4.d(20): Error: found `]` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb58qeyj4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164306
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    auto v = [](long a){return a < 0 ? a * -1 : a;};\n    a = v(a);\n\
    \    b = v(b);\n    while(a >= 10L)\n        a /= 10L;\n    while(b >= 10L)\n\
    \        b /= 10L;\n    return a * b;\n}\nunittest\n{\n    alias candidate = multiply;\n\
    \n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) ==\
    \ 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwwfy9u2u.d(20): Error: found `a` when expecting `.` following long

    /tmp/tmpwwfy9u2u.d(20): Error: found `)` when expecting identifier following `long`.

    /tmp/tmpwwfy9u2u.d(20): Error: found `{` when expecting `,`

    /tmp/tmpwwfy9u2u.d(20): Error: expression expected, not `return`

    /tmp/tmpwwfy9u2u.d(20): Error: found `a` when expecting `,`

    /tmp/tmpwwfy9u2u.d(20): Error: expression expected, not `<`

    /tmp/tmpwwfy9u2u.d(20): Error: found `0` when expecting `,`

    /tmp/tmpwwfy9u2u.d(20): Error: expression expected, not `?`

    /tmp/tmpwwfy9u2u.d(20): Error: found `a` when expecting `,`

    /tmp/tmpwwfy9u2u.d(20): Error: found `:` when expecting `,`

    /tmp/tmpwwfy9u2u.d(20): Error: found `;` when expecting `,`

    /tmp/tmpwwfy9u2u.d(20): Error: expression expected, not `}`

    /tmp/tmpwwfy9u2u.d(20): Error: found `;` when expecting `,`

    /tmp/tmpwwfy9u2u.d(21): Error: found `;` when expecting `,`

    /tmp/tmpwwfy9u2u.d(22): Error: found `;` when expecting `,`

    /tmp/tmpwwfy9u2u.d(23): Error: expression expected, not `while`

    /tmp/tmpwwfy9u2'
  stdout: ''
  timestamp: 1660164306
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    long aa = abs(a);\n    long bb = abs(b);\n    long result =\
    \ aa * bb;\n    long firstNum = result % 10;\n    return firstNum;\n}\nunittest\n\
    {\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n\
    \    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) ==\
    \ 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L)\
    \ == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpg4qdycla.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e4d]

    ??:? void tmpg4qdycla.__unittest_L26_C1() [0x427a9d]

    ??:? void tmpg4qdycla.__modtest() [0x427bcc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb73]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa06]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb99]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430048]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb25]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9dd]

    ??:? runModuleUnitTests [0x42b949]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42829c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164306
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    long unitA = std.typecons.Tuple!(long, string)(a).field[0];\n\
    \    long unitB = std.typecons.Tuple!(long, string)(b).field[0];\n    return unitA\
    \ * unitB;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L,\
    \ 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L,\
    \ 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L,\
    \ 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprpqd443v.d(20): Error: none of the overloads of `this` are callable
    using argument types `(long)`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(668):        `std.typecons.Tuple!(long,
    string).Tuple.this(long _param_0, string _param_1)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(689):        `std.typecons.Tuple!(long,
    string).Tuple.__ctor(U, ulong n)(U[n] values) if (n == Types.length && allSatisfy!(isBuildableFrom!U,
    Types))`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(715):        `std.typecons.Tuple!(long,
    string).Tuple.__ctor(U)(U another) if (areBuildCompatibleTuples!(typeof(this),
    U))`

    /tmp/tmprpqd443v.d(21): Error: none of the overloads of `this` are callable using
    argument types `(long)`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(668):        `std.typecons.Tuple!(long,
    string).Tuple.this(long _param_0, string _param_1)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(689):        `std.typecons.Tuple!(long,
    string).Tuple.__ctor(U, ulong n)(U[n] values) if (n == Types.length && allSatisfy!(isBuildableFrom!U,
    Types))`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(715):        `std.typecons.Tuple!(long,
    string).Tuple.__ctor(U)(U another) if (areBuildCompatibleTuples!(typeof(this),
    U))`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprpqd443v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164306
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    auto x = a.to!string.filter!(c => c.isDigit).front.to!long;\n\
    \    auto y = b.to!string.filter!(c => c.isDigit).front.to!long;\n    return x\
    \ * y;\n}\n/*\npublic class MultiplyUnitDigits {\n    public static long multiply(long\
    \ a, long b) {\n        return Character.getNumericValue(Long.toString(a).charAt(0))\
    \ * Character.getNumericValue(Long.toString(b).charAt(0));\n    }\n}\nunittest\n\
    {\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n\
    \    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) ==\
    \ 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L)\
    \ == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnei05bnc.d(24): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnei05bnc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164306
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return (a % 10) * (b % 10);\n}\nunittest\n{\n    alias candidate\
    \ = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4be3vd8e.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427de5]

    ??:? void tmp4be3vd8e.__unittest_L22_C1() [0x427ac4]

    ??:? void tmp4be3vd8e.__modtest() [0x427b68]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a99e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fabd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]

    ??:? runModuleUnitTests [0x42b8e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428234]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164304
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return (a%10) * (b%10);\n}\nunittest\n{\n    alias candidate\
    \ = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmlbf2bsi.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427de5]

    ??:? void tmpmlbf2bsi.__unittest_L22_C1() [0x427ac4]

    ??:? void tmpmlbf2bsi.__modtest() [0x427b68]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a99e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fabd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]

    ??:? runModuleUnitTests [0x42b8e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428234]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164304
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    return (Math.abs(a) % 10) * (Math.abs(b) % 10);\n}\nunittest\n\
    {\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n\
    \    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) ==\
    \ 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L)\
    \ == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf7s9yvzs.d(20): Error: undefined identifier `Math`

    /tmp/tmpf7s9yvzs.d(20): Error: undefined identifier `Math`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf7s9yvzs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164306
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    long x = a%10;\n    long y = b%10;\n    return x*y;\n}\nunittest\n\
    {\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n\
    \    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) ==\
    \ 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L)\
    \ == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpxbhsdz08.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ddd]

    ??:? void tmpxbhsdz08.__unittest_L24_C1() [0x427ab8]

    ??:? void tmpxbhsdz08.__modtest() [0x427b5c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb03]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a996]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb29]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fab5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]

    ??:? runModuleUnitTests [0x42b8d9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42822c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164306
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n\
    \    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n\
    \    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a,\
    \ long b) \n{\n    auto aDigits = splitEach!\"\"\"\".split(std.typecons.to!string(a));\n\
    \    auto bDigits = splitEach!\"\"\"\".split(std.typecons.to!string(b));\n   \
    \ return std.typecons.to!int(std.string.format(\"%s%s\", aDigits[$-1], bDigits[$-1]));\n\
    }\n```\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L,\
    \ 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L,\
    \ 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L,\
    \ 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjwzd5u46.d(20): Error: Implicit string concatenation is deprecated,
    use "" ~ "" instead

    /tmp/tmpjwzd5u46.d(21): Error: Implicit string concatenation is deprecated, use
    "" ~ "" instead

    /tmp/tmpjwzd5u46.d(24): Error: declaration expected, not `""`

    /tmp/tmpjwzd5u46.d(24): Error: unterminated string constant starting at /tmp/tmpjwzd5u46.d(24)

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjwzd5u46.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164306
