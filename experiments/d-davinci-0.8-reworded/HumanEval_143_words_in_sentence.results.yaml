name: HumanEval_143_words_in_sentence
language: d
results:
- program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    static auto is_prime = [](int x) \n    {\n        if (x <= 1) return false;\n\
    \        for (int i = 2; i * i <= x; ++i) \n        {\n            if (x % i ==\
    \ 0) return false;\n        }\n        return true;\n    };\n    string result;\n\
    \    foreach (index, word; split(sentence, \" \")) \n    {\n        if (is_prime(word.length))\
    \ \n        {\n            if (result.length) result ~= \" \";\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}\n// @end:  \n/*\n    tests:\n\
    */\nstatic assert(words_in_sentence(\"This is a test\") == \"is\");\nstatic assert(words_in_sentence(\"\
    lets go for swimming\") == \"go for\");\nstatic assert(words_in_sentence(\"Hello\
    \ from ankara\") == \"from\");\nstatic assert(words_in_sentence(\"Oh, this is\
    \ a huge test\") == \"Oh, is\");\nstatic assert(words_in_sentence(\"what is a\
    \ prime number\") == \"what is a\");\n// @exclude\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsv3ew90s.d(26): Error: found `x` when expecting `.` following\
    \ int\\n/tmp/tmpsv3ew90s.d(26): Error: found `)` when expecting identifier following\
    \ `int`.\\n/tmp/tmpsv3ew90s.d(27): Error: found `{` when expecting `,`\\n/tmp/tmpsv3ew90s.d(28):\
    \ Error: expression expected, not `if`\\n/tmp/tmpsv3ew90s.d(28): Error: found\
    \ `return` when expecting `,`\\n/tmp/tmpsv3ew90s.d(28): Error: found `;` when\
    \ expecting `,`\\n/tmp/tmpsv3ew90s.d(29): Error: expression expected, not `for`\\\
    n/tmp/tmpsv3ew90s.d(29): Error: found `i` when expecting `.` following int\\n/tmp/tmpsv3ew90s.d(29):\
    \ Error: found `=` when expecting identifier following `int`.\\n/tmp/tmpsv3ew90s.d(29):\
    \ Error: found `2` when expecting `,`\\n/tmp/tmpsv3ew90s.d(29): Error: expression\
    \ expected, not `;`\\n/tmp/tmpsv3ew90s.d(29): Error: found `i` when expecting\
    \ `,`\\n/tmp/tmpsv3ew90s.d(29): Error: found `;` when expecting `,`\\n/tmp/tmpsv3ew90s.d(30):\
    \ Error: found `{` when expecting `,`\\n/tmp/tmpsv3ew90s.d(31): Error: expression\
    \ expected, not `if`\\n/tmp/tmpsv3ew90s.d(31): Error: found `return` when expecting\
    \ `,`\\n/tmp/tmpsv3ew90s.d(31): Error: found `;` when expecting `,`\\n/tmp/tmpsv3ew90s.d(32):\
    \ Error: expression expected, not `}`\\n/tmp/tmpsv3ew90s.d(33): Error: found `return`\
    \ when expecting `,`\\n/tmp/tmpsv3ew90s.d(33): Error: found `;` when expecting\
    \ `,`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsv3ew90s.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    // Calculate Primes\n    int max_length = 0;\n    foreach(token; sentence.split)\n\
    \    {\n        max_length = max(max_length, token.length);\n    }\n    enum isPrime\
    \ = true;\n    int[] primes = new int[];\n    for(int i = 2; i <= max_length;\
    \ i++)\n    {\n        isPrime = true;\n        foreach(n; primes)\n        {\n\
    \            if(i % n == 0)\n            {\n                isPrime = false;\n\
    \                break;\n            }\n        }\n        if(isPrime)\n     \
    \   {\n            primes ~= i;\n        }\n    }\n    // Select Primes\n    string[]\
    \ tokens = sentence.split;\n    string result = \"\";\n    foreach(token; tokens)\n\
    \    {\n        foreach(prime; primes)\n        {\n            if(token.length\
    \ == prime)\n            {\n                result ~= token ~ \" \";\n       \
    \         break;\n            }\n        }\n    }\n    return result.trimRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8p85pcam.d(28): Error: no property `split` for type `string`\\\
    n/tmp/tmp8p85pcam.d(33): Error: new can only create structs, dynamic arrays or\
    \ class objects, not `int[]`\\'s\\n/tmp/tmp8p85pcam.d(36): Error: cannot modify\
    \ constant `isPrime`\\n/tmp/tmp8p85pcam.d(41): Error: cannot modify constant `isPrime`\\\
    n/tmp/tmp8p85pcam.d(51): Error: no property `split` for type `string`\\n/tmp/tmp8p85pcam.d(64):\
    \ Error: no property `trimRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp8p85pcam.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    static auto is_prime = typeof(is_prime)([](int x) {\n        for (int i\
    \ = 2; i <= (int)sqrt(x); i++)\n            if (x % i == 0)\n                return\
    \ false;\n        return true;\n    });\n    auto words = to!string[](split(sentence,\
    \ \" \"));\n    return join(join(words.filter!(w => w.length.is_prime)), \" \"\
    );\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphc9pq_hk.d(26): Error: found `x` when expecting `.` following\
    \ int\\n/tmp/tmphc9pq_hk.d(26): Error: found `)` when expecting identifier following\
    \ `int`.\\n/tmp/tmphc9pq_hk.d(26): Error: found `{` when expecting `,`\\n/tmp/tmphc9pq_hk.d(27):\
    \ Error: expression expected, not `for`\\n/tmp/tmphc9pq_hk.d(27): Error: found\
    \ `i` when expecting `.` following int\\n/tmp/tmphc9pq_hk.d(27): Error: found\
    \ `=` when expecting identifier following `int`.\\n/tmp/tmphc9pq_hk.d(27): Error:\
    \ found `2` when expecting `,`\\n/tmp/tmphc9pq_hk.d(27): Error: expression expected,\
    \ not `;`\\n/tmp/tmphc9pq_hk.d(27): Error: found `i` when expecting `,`\\n/tmp/tmphc9pq_hk.d(27):\
    \ Error: expression expected, not `<=`\\n/tmp/tmphc9pq_hk.d(27): Error: found\
    \ `)` when expecting `.` following int\\n/tmp/tmphc9pq_hk.d(27): Error: found\
    \ `;` when expecting `,`\\n/tmp/tmphc9pq_hk.d(28): Error: found `if` when expecting\
    \ `,`\\n/tmp/tmphc9pq_hk.d(29): Error: found `return` when expecting `,`\\n/tmp/tmphc9pq_hk.d(29):\
    \ Error: found `;` when expecting `,`\\n/tmp/tmphc9pq_hk.d(30): Error: expression\
    \ expected, not `return`\\n/tmp/tmphc9pq_hk.d(30): Error: found `true` when expecting\
    \ `,`\\n/tmp/tmphc9pq_hk.d(30): Error: expression expected, not `;`\\n/tmp/tmphc9pq_hk.d(31):\
    \ Error: found `}` when expecting `,`\\n/tmp/tmphc9pq_hk.d(31): Error: found `;`\
    \ when expecting `,`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphc9pq_hk.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    // NOTE: isPrime uses lazy iterators, which are not supported\n    // by\
    \ the hackerrank Python interpreter.\n    // static if (__ctfe)\n    static assert\
    \ (false);\n    auto words = split(sentence, \" \");\n    auto isPrime = (int\
    \ n) => \n    {\n        if (n <= 1)\n            return false;\n        if (n\
    \ % 2 == 0)\n            return n == 2;\n        foreach (i; 3 .. ceil(sqrt(n)))\n\
    \            if (n % i == 0)\n                return false;\n        return true;\n\
    \    };\n    string res = \"\";\n    foreach (word; words)\n    {\n        if\
    \ (isPrime(word.length))\n            res ~= \" \" ~ word;\n    }\n    return\
    \ res[1 .. $];\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n \
    \   assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7s6f9ce1.d(29): Error: static assert:  `false` is false\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7s6f9ce1.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string ret;\n    foreach(w; split(sentence, \" \"))\n    {\n        //\
    \ if the length of the word is a prime, add it to the return string\n        if(isPrime(w.length))\n\
    \            ret ~= w ~ \" \";\n    }\n    // remove the last space character\n\
    \    return ret[0..$-1];\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk8r69rvf.d(27): Error: undefined identifier `split`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk8r69rvf.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence, \" \");\n    string prime_words = \"\"\
    ;\n    foreach(word; words)\n    {\n        if(std.math.isPrime(word.length))\n\
    \        {\n            prime_words ~= word ~ \" \";\n        }\n    }\n    return\
    \ chomp(prime_words);\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpupf7e00i.d(26): Error: undefined identifier `split`\\n/tmp/tmpupf7e00i.d(30):\
    \ Error: undefined identifier `isPrime` in module `std.math`\\n/tmp/tmpupf7e00i.d(35):\
    \ Error: undefined identifier `chomp`, did you mean template `cmp(T)(const(T)\
    \ x, const(T) y) if (isFloatingPoint!T)`?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpupf7e00i.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    static const bool is_prime[] = { false, false, true, true, false, true,\
    \ false, true, false, false, false, true, false, true, false, false, false, true,\
    \ false, true, false, false, false, true, false, false, false, false, false, true,\
    \ false, true, false, false, false, false, false, false, true, false, true, false,\
    \ false, false, false, false, false, false, false, false, true, false, true, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ true, false, true, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, true, false, true, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, true, false, true, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, true,\
    \ false, true, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ true, false, true, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, true, false, true, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, true, false, true, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, true, false, true, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphvwb8lo3.d(26): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `bool[] is_prime`\\n/tmp/tmphvwb8lo3.d(27): Error: comma expected separating\
    \ field initializers\\n/tmp/tmphvwb8lo3.d(27): Error: expression expected, not\
    \ `unittest`\\n/tmp/tmphvwb8lo3.d(28): Error: comma expected separating field\
    \ initializers\\n/tmp/tmphvwb8lo3.d(39): Error: comma expected separating field\
    \ initializers\\n/tmp/tmphvwb8lo3.d(39): Error: found `main` when expecting `.`\
    \ following void\\n/tmp/tmphvwb8lo3.d(39): Error: found `(` when expecting identifier\
    \ following `void`.\\n/tmp/tmphvwb8lo3.d(39): Error: comma expected separating\
    \ field initializers\\n/tmp/tmphvwb8lo3.d(39): Error: expression expected, not\
    \ `)`\\n/tmp/tmphvwb8lo3.d(39): Error: comma expected separating field initializers\\\
    n/tmp/tmphvwb8lo3.d(39): Error: found end of file instead of initializer\\n/tmp/tmphvwb8lo3.d(39):\
    \ Error: semicolon expected, not `End of File`\\n/tmp/tmphvwb8lo3.d(39): Error:\
    \ found `End of File` when expecting `}` following compound statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphvwb8lo3.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    import std.string;\n    import std.algorithm;\n    import std.range;\n\
    \    import std.conv;\n    import std.typecons;\n    import std.array;\n    import\
    \ std.math;\n    import std.traits;\n    auto splittedSentence = to!(string[])(split(sentence));\n\
    \    auto str = \"\";\n    foreach(word; splittedSentence)\n    {\n        if(word.length\
    \ % 2 != 0 && word.length > 1)\n        {\n            str ~= word;\n        \
    \    str ~= \" \";\n        }\n    }\n    return str.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp36356oq1.d(50): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x44ba35]\\n??:? void tmp36356oq1.__unittest_L46_C1()\
    \ [0x43b9f2]\\n??:? void tmp36356oq1.__modtest() [0x449870]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x455477]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x44b062]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4511d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x451264]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x451161]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x44b039]\\n??:? runModuleUnitTests [0x45524d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x44c970]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x44c8f7]\\n??:? _d_run_main [0x44c862]\\n??:? main [0x44988f]\\\
    n??:? __libc_start_main [0x9316d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    int[] prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    enum is_prime = int[string]{};\n\
    \    foreach(i; prime_numbers) is_prime[to!string(i)] = i;\n    auto words = sentence.split();\n\
    \    string[] result;\n    foreach(word; words) {\n        if(is_prime.find(to!string(word.length)))\n\
    \            result ~= word;\n    }\n    return result.join(\" \");\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzfkpvyax.d(27): Error: found `[` when expecting `.` following\
    \ int\\n/tmp/tmpzfkpvyax.d(27): Error: semicolon expected following auto declaration,\
    \ not `]`\\n/tmp/tmpzfkpvyax.d(27): Error: found `]` instead of statement\\n/tmp/tmpzfkpvyax.d(28):\
    \ Error: declaration expected, not `foreach`\\n/tmp/tmpzfkpvyax.d(28): Error:\
    \ no identifier for declarator `prime_numbers`\\n/tmp/tmpzfkpvyax.d(28): Error:\
    \ declaration expected, not `)`\\n/tmp/tmpzfkpvyax.d(31): Error: declaration expected,\
    \ not `foreach`\\n/tmp/tmpzfkpvyax.d(31): Error: no identifier for declarator\
    \ `words`\\n/tmp/tmpzfkpvyax.d(31): Error: declaration expected, not `)`\\n/tmp/tmpzfkpvyax.d(34):\
    \ Error: unrecognized declaration\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpzfkpvyax.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence, \" \");\n    string result = \"\";\n \
    \   foreach(string word; words)\n    {\n        if(isPrime(strlen(word)))\n  \
    \      {\n            result ~= (result.length == 0 ? \"\" : \" \") ~ word;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuytc802j.d(26): Error: undefined identifier `split`\\n/tmp/tmpuytc802j.d(30):\
    \ Error: undefined identifier `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpuytc802j.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    auto w = split(sentence, \" \");\n    string ret;\n    foreach(i, word;\
    \ w)\n    {\n        if(isPrime(i.length))\n        {\n            ret ~= i;\n\
    \            ret ~= \" \";\n        }\n    }\n    ret = ret[0..$-1];\n    return\
    \ ret;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplr01wt0b.d(26): Error: undefined identifier `split`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplr01wt0b.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    // if the sentence is empty there is nothing to do...\n    if (sentence.empty)\n\
    \        return \"\";\n    \n    // copy the sentence so we can modify it...\n\
    \    string prime_words = sentence;\n    \n    // we will be modifying the string\
    \ so it is easiest\n    // to work with it as an array...\n    char[] word_array\
    \ = prime_words.dup;\n    \n    // we need to keep track of the index of the first\n\
    \    // character of the current word, and the index\n    // of the first character\
    \ of the next word...\n    int current_word_begin = 0;\n    int next_word_begin\
    \ = 0;\n    \n    // we need to keep track of the length of the current\n    //\
    \ word...\n    int word_length = 0;\n    \n    // keep track of the number of\
    \ characters we have\n    // removed from the sentence...\n    int num_chars_removed\
    \ = 0;\n    \n    // we will loop through the characters in the sentence\n   \
    \ // until we reach the end of the array...\n    while (current_word_begin < word_array.length)\n\
    \    {\n        // determine the number of characters in the\n        // current\
    \ word...\n        word_length = next_word_begin - current_word_begin;\n     \
    \   \n        // if the word length is prime, then skip over\n        // it and\
    \ continue on to the next word...\n        if (isPrime(word_length))\n       \
    \ {\n            current_word_begin = next_word_begin;\n            next_word_begin\
    \ = current_word_begin + 1;\n            continue;\n        }\n        \n    \
    \    // otherwise, if the word length is not prime,\n        // then we need to\
    \ remove the current word from\n        // the sentence...\n        else\n   \
    \     {\n            // to do this, we need to shift all of the\n            //\
    \ characters to the right of the current\n            // word to the left by word_length...\n\
    \            int i = current_word_begin;\n            while (i < word_array.length\
    \ - word_length)\n            {\n                word_array[i] = word_array[i\
    \ + word_length];\n                i++;\n            }\n            \n\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8w5xn6qp.d(84): Error: found `unittest` instead of statement\\\
    n/tmp/tmp8w5xn6qp.d(96): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmp8w5xn6qp.d(96): Error: found `End of File` when\
    \ expecting `}` following compound statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp8w5xn6qp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    /*\n        s.split(' ') returns a string[]\n        a.filter!(prime) returns\
    \ a string[]\n        a.join(' ') returns a string\n    */\n    return sentence.split('\
    \ ').filter!(prime).join(' ');\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpail4u3i7.d(31): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpail4u3i7.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence, \" \");\n    string res = \"\";\n    int\
    \ cnt = 0;\n    for (int i = 0; i < words.length; i++) {\n        int word_len\
    \ = words[i].length;\n        if (word_len <= 2) {\n            if (word_len ==\
    \ 2) {\n                if (words[i][0] == words[i][1]) {\n                  \
    \  continue;\n                }\n            }\n            res += words[i];\n\
    \            cnt++;\n        } else {\n            bool flag = true;\n       \
    \     for (int j = 2; j <= sqrt(word_len); j++) {\n                if (word_len\
    \ % j == 0) {\n                    flag = false;\n                    break;\n\
    \                }\n            }\n            if (flag) {\n                res\
    \ += words[i];\n                cnt++;\n            }\n        }\n        if (cnt\
    \ < words.length) {\n            res += \" \";\n        }\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxx2pvirw.d(26): Error: undefined identifier `split`\\n/tmp/tmpxx2pvirw.d(30):\
    \ Error: cannot implicitly convert expression `words[cast(ulong)i].length` of\
    \ type `ulong` to `int`\\n/tmp/tmpxx2pvirw.d(37): Error: slice `res` is not mutable\\\
    n/tmp/tmpxx2pvirw.d(41): Error: `std.math.sqrt` called with argument types `(int)`\
    \ matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\n/tmp/tmpxx2pvirw.d(48): Error: slice `res` is\
    \ not mutable\\n/tmp/tmpxx2pvirw.d(53): Error: slice `res` is not mutable\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxx2pvirw.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence, \" \");\n    string answer = \"\";\n \
    \   for (int i = 0; i < words.length; i++) {\n        if (isPrime(words[i].length))\
    \ {\n            answer = answer ~ \" \" ~ words[i];\n        }\n    }\n    return\
    \ answer.trim;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n \
    \   assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4hc844sk.d(26): Error: undefined identifier `split`\\n/tmp/tmp4hc844sk.d(29):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmp4hc844sk.d(33): Error: no property\
    \ `trim` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp4hc844sk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence, \" \");\n    string res = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            res\
    \ ~= word ~ \" \";\n        }\n    }\n    res = res.trimRight();\n    return res;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdxqjv074.d(26): Error: undefined identifier `split`\\n/tmp/tmpdxqjv074.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpdxqjv074.d(35): Error: no property\
    \ `trimRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpdxqjv074.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    import std.algorithm : filter, map;\n    import std.range : chunk;\n  \
    \  import std.stdio : writeln;\n    import std.string : to!int;\n    import std.conv\
    \ : to;\n    //return sentence.split(\" \").filter!(a => isPrime(a.to!int())).join(\"\
    \ \");\n    auto words = sentence.split(\" \");\n    auto primes = words.map!(w\
    \ => w.to!int()).filter!(isPrime);\n    writeln(words);\n    writeln(primes);\n\
    \    return words.zip(primes).filter!(a => a[1]).map!(a => a[0]).join(\" \");\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmmdpsz19.d(29): Error: `;` expected\\n/tmp/tmpmmdpsz19.d(29):\
    \ Error: no identifier for declarator `int`\\n/tmp/tmpmmdpsz19.d(29): Deprecation:\
    \ use `{ }` for an empty statement, not `;`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpmmdpsz19.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string ret = \"\";\n    foreach(auto s; split(sentence, \" \")) \n    {\n\
    \        if(allPrimes(s))\n            ret ~= s ~ \" \";\n    }\n    return ret.trimRight();\n\
    }\nunittest \n{\n    import std.algorithm;\n    import std.array;\n    import\
    \ std.algorithm;\n    import std.typecons;\n    import std.range;\n    import\
    \ std.conv;\n    import std.stdio;\n    writeln(typeof(words_in_sentence(\"This\
    \ is a test\")));\n    assert(words_in_sentence(\"This is a test\") == \"is\"\
    );\n    assert(words_in_sentence(\"lets go for swimming\") == \"go for\");\n \
    \   assert(words_in_sentence(\"This is a list: a, b, c, d, e, f, g.\") == \"is\
    \ a c e g\");\n    writeln(typeof(words_in_sentence(\"This is a list: a, b, c,\
    \ d, e, f, g.\")));\n    writeln(words_in_sentence(\"This is a list: a, b, c,\
    \ d, e, f, g.\"));\n    writeln(words_in_sentence(\"This is a list: a, b, c, d,\
    \ e, f, g.\").length);\n    writeln(words_in_sentence(\"This is a list: a, b,\
    \ c, d, e, f, g.\").zip(\"isac eg\").fold!((a, b) => a ~ \" \" ~ b)());\n    assert(words_in_sentence(\"\
    This is a list: a, b, c, d, e, f, g.\").zip(\"isac eg\").fold!((a, b) => a ~ \"\
    \ \" ~ b)() == \"is a c e g\");\n    assert(words_in_sentence(\"This is a list:\
    \ a, b, c, d, e, f, g.\").zip(\"isac eg\").fold!((a, b) => a ~ \" \" ~ b)() ==\
    \ \"is a c e g\");\n    assert(words_in_sentence(\"\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpien5ulun.d(27): Error: basic type expected, not `auto`\\n/tmp/tmpien5ulun.d(27):\
    \ Error: no identifier for declarator `_error_`\\n/tmp/tmpien5ulun.d(27): Error:\
    \ found `auto` when expecting `;`\\n/tmp/tmpien5ulun.d(27): Error: found `;` when\
    \ expecting `)`\\n/tmp/tmpien5ulun.d(27): Error: found `)` when expecting `;`\
    \ following statement\\n/tmp/tmpien5ulun.d(58): Error: found `This` when expecting\
    \ `,`\\n/tmp/tmpien5ulun.d(58): Error: `type identifier : specialization` expected\
    \ following `is`\\n/tmp/tmpien5ulun.d(58): Error: found `test` when expecting\
    \ `,`\\n/tmp/tmpien5ulun.d(59): Error: found `lets` when expecting `,`\\n/tmp/tmpien5ulun.d(59):\
    \ Error: found `for` when expecting `,`\\n/tmp/tmpien5ulun.d(59): Error: found\
    \ `\") == \"` when expecting `,`\\n/tmp/tmpien5ulun.d(59): Error: found `for`\
    \ when expecting `,`\\n/tmp/tmpien5ulun.d(60): Error: found `there` when expecting\
    \ `,`\\n/tmp/tmpien5ulun.d(60): Error: `type identifier : specialization` expected\
    \ following `is`\\n/tmp/tmpien5ulun.d(60): Error: found `place` when expecting\
    \ `,`\\n/tmp/tmpien5ulun.d(60): Error: found `here` when expecting `,`\\n/tmp/tmpien5ulun.d(60):\
    \ Error: found `there` when expecting `,`\\n/tmp/tmpien5ulun.d(60): Error: `type\
    \ identifier : specialization` expected following `is`\\n/tmp/tmpien5ulun.d(60):\
    \ Error: found `place` when expecting `,`\\n/tmp/tmpien5ulun.d(61): Error: found\
    \ `Hi` when expecting `,`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\",\
    \ \"/tmp/tmpien5ulun.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    int[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101];\n    string words = sentence.split(\"\
    \ \");\n    string solution = \"\";\n    foreach(word; words)\n    {\n       \
    \ foreach(prime; primes)\n        {\n            if(word.length == prime)\n  \
    \          {\n                solution ~= word ~ \" \";\n            }\n     \
    \   }\n    }\n    return solution.trimRight();\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt9efygnl.d(27): Error: no property `split` for type `string`\\\
    n/tmp/tmpt9efygnl.d(33): Error: no property `length` for type `immutable(char)`\\\
    n/tmp/tmpt9efygnl.d(39): Error: no property `trimRight` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt9efygnl.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    // TODO - Add your solution here.\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(inout word; words)\n    {\n\
    \        if(isPrime(word.length)) result ~= word ~ \" \";\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp50w6z0j8.d(27): Error: undefined identifier `split`\\n/tmp/tmp50w6z0j8.d(29):\
    \ Error: variable `tmp50w6z0j8.words_in_sentence.word` `inout` variables can only\
    \ be declared inside `inout` functions\\n/tmp/tmp50w6z0j8.d(31): Error: undefined\
    \ identifier `isPrime`\\n/tmp/tmp50w6z0j8.d(33): Error: no property `trimRight`\
    \ for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp50w6z0j8.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
