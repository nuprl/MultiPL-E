language: d
name: HumanEval_143_words_in_sentence
results:
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    static auto is_prime = [](int x) \n    {\n        if (x <= 1) return false;\n\
    \        for (int i = 2; i * i <= x; ++i) \n        {\n            if (x % i ==\
    \ 0) return false;\n        }\n        return true;\n    };\n    string result;\n\
    \    foreach (index, word; split(sentence, \" \")) \n    {\n        if (is_prime(word.length))\
    \ \n        {\n            if (result.length) result ~= \" \";\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}\n// @end:  \n/*\n    tests:\n\
    */\nstatic assert(words_in_sentence(\"This is a test\") == \"is\");\nstatic assert(words_in_sentence(\"\
    lets go for swimming\") == \"go for\");\nstatic assert(words_in_sentence(\"Hello\
    \ from ankara\") == \"from\");\nstatic assert(words_in_sentence(\"Oh, this is\
    \ a huge test\") == \"Oh, is\");\nstatic assert(words_in_sentence(\"what is a\
    \ prime number\") == \"what is a\");\n// @exclude\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8x_wfv2w.d(26): Error: found `x` when expecting `.` following int

    /tmp/tmp8x_wfv2w.d(26): Error: found `)` when expecting identifier following `int`.

    /tmp/tmp8x_wfv2w.d(27): Error: found `{` when expecting `,`

    /tmp/tmp8x_wfv2w.d(28): Error: expression expected, not `if`

    /tmp/tmp8x_wfv2w.d(28): Error: found `return` when expecting `,`

    /tmp/tmp8x_wfv2w.d(28): Error: found `;` when expecting `,`

    /tmp/tmp8x_wfv2w.d(29): Error: expression expected, not `for`

    /tmp/tmp8x_wfv2w.d(29): Error: found `i` when expecting `.` following int

    /tmp/tmp8x_wfv2w.d(29): Error: found `=` when expecting identifier following `int`.

    /tmp/tmp8x_wfv2w.d(29): Error: found `2` when expecting `,`

    /tmp/tmp8x_wfv2w.d(29): Error: expression expected, not `;`

    /tmp/tmp8x_wfv2w.d(29): Error: found `i` when expecting `,`

    /tmp/tmp8x_wfv2w.d(29): Error: found `;` when expecting `,`

    /tmp/tmp8x_wfv2w.d(30): Error: found `{` when expecting `,`

    /tmp/tmp8x_wfv2w.d(31): Error: expression expected, not `if`

    /tmp/tmp8x_wfv2w.d(31): Error: found `r'
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    // Calculate Primes\n    int max_length = 0;\n    foreach(token; sentence.split)\n\
    \    {\n        max_length = max(max_length, token.length);\n    }\n    enum isPrime\
    \ = true;\n    int[] primes = new int[];\n    for(int i = 2; i <= max_length;\
    \ i++)\n    {\n        isPrime = true;\n        foreach(n; primes)\n        {\n\
    \            if(i % n == 0)\n            {\n                isPrime = false;\n\
    \                break;\n            }\n        }\n        if(isPrime)\n     \
    \   {\n            primes ~= i;\n        }\n    }\n    // Select Primes\n    string[]\
    \ tokens = sentence.split;\n    string result = \"\";\n    foreach(token; tokens)\n\
    \    {\n        foreach(prime; primes)\n        {\n            if(token.length\
    \ == prime)\n            {\n                result ~= token ~ \" \";\n       \
    \         break;\n            }\n        }\n    }\n    return result.trimRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp33g5kwjw.d(28): Error: no property `split` for type `string`

    /tmp/tmp33g5kwjw.d(33): Error: new can only create structs, dynamic arrays or
    class objects, not `int[]`''s

    /tmp/tmp33g5kwjw.d(36): Error: cannot modify constant `isPrime`

    /tmp/tmp33g5kwjw.d(41): Error: cannot modify constant `isPrime`

    /tmp/tmp33g5kwjw.d(51): Error: no property `split` for type `string`

    /tmp/tmp33g5kwjw.d(64): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp33g5kwjw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    static auto is_prime = typeof(is_prime)([](int x) {\n        for (int i\
    \ = 2; i <= (int)sqrt(x); i++)\n            if (x % i == 0)\n                return\
    \ false;\n        return true;\n    });\n    auto words = to!string[](split(sentence,\
    \ \" \"));\n    return join(join(words.filter!(w => w.length.is_prime)), \" \"\
    );\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc5v60vzv.d(26): Error: found `x` when expecting `.` following int

    /tmp/tmpc5v60vzv.d(26): Error: found `)` when expecting identifier following `int`.

    /tmp/tmpc5v60vzv.d(26): Error: found `{` when expecting `,`

    /tmp/tmpc5v60vzv.d(27): Error: expression expected, not `for`

    /tmp/tmpc5v60vzv.d(27): Error: found `i` when expecting `.` following int

    /tmp/tmpc5v60vzv.d(27): Error: found `=` when expecting identifier following `int`.

    /tmp/tmpc5v60vzv.d(27): Error: found `2` when expecting `,`

    /tmp/tmpc5v60vzv.d(27): Error: expression expected, not `;`

    /tmp/tmpc5v60vzv.d(27): Error: found `i` when expecting `,`

    /tmp/tmpc5v60vzv.d(27): Error: expression expected, not `<=`

    /tmp/tmpc5v60vzv.d(27): Error: found `)` when expecting `.` following int

    /tmp/tmpc5v60vzv.d(27): Error: found `;` when expecting `,`

    /tmp/tmpc5v60vzv.d(28): Error: found `if` when expecting `,`

    /tmp/tmpc5v60vzv.d(29): Error: found `return` when expecting `,`

    /tmp/tmpc5v60vzv.d(29): Error: found `;` when expecting `,`

    /tmp/tmpc5v60vzv.d(30): E'
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    // NOTE: isPrime uses lazy iterators, which are not supported\n    // by\
    \ the hackerrank Python interpreter.\n    // static if (__ctfe)\n    static assert\
    \ (false);\n    auto words = split(sentence, \" \");\n    auto isPrime = (int\
    \ n) => \n    {\n        if (n <= 1)\n            return false;\n        if (n\
    \ % 2 == 0)\n            return n == 2;\n        foreach (i; 3 .. ceil(sqrt(n)))\n\
    \            if (n % i == 0)\n                return false;\n        return true;\n\
    \    };\n    string res = \"\";\n    foreach (word; words)\n    {\n        if\
    \ (isPrime(word.length))\n            res ~= \" \" ~ word;\n    }\n    return\
    \ res[1 .. $];\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n \
    \   assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6d7p98wt.d(29): Error: static assert:  `false` is false

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6d7p98wt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string ret;\n    foreach(w; split(sentence, \" \"))\n    {\n        //\
    \ if the length of the word is a prime, add it to the return string\n        if(isPrime(w.length))\n\
    \            ret ~= w ~ \" \";\n    }\n    // remove the last space character\n\
    \    return ret[0..$-1];\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_l5zf2s4.d(27): Error: undefined identifier `split`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_l5zf2s4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence, \" \");\n    string prime_words = \"\"\
    ;\n    foreach(word; words)\n    {\n        if(std.math.isPrime(word.length))\n\
    \        {\n            prime_words ~= word ~ \" \";\n        }\n    }\n    return\
    \ chomp(prime_words);\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwnc7yl_0.d(26): Error: undefined identifier `split`

    /tmp/tmpwnc7yl_0.d(30): Error: undefined identifier `isPrime` in module `std.math`

    /tmp/tmpwnc7yl_0.d(35): Error: undefined identifier `chomp`, did you mean template
    `cmp(T)(const(T) x, const(T) y) if (isFloatingPoint!T)`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwnc7yl_0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    static const bool is_prime[] = { false, false, true, true, false, true,\
    \ false, true, false, false, false, true, false, true, false, false, false, true,\
    \ false, true, false, false, false, true, false, false, false, false, false, true,\
    \ false, true, false, false, false, false, false, false, true, false, true, false,\
    \ false, false, false, false, false, false, false, false, true, false, true, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ true, false, true, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, true, false, true, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, true, false, true, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, true,\
    \ false, true, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ true, false, true, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, true, false, true, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, true, false, true, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, true, false, true, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5_rtvy4i.d(26): Deprecation: instead of C-style syntax, use D-style
    syntax `bool[] is_prime`

    /tmp/tmp5_rtvy4i.d(27): Error: comma expected separating field initializers

    /tmp/tmp5_rtvy4i.d(27): Error: expression expected, not `unittest`

    /tmp/tmp5_rtvy4i.d(28): Error: comma expected separating field initializers

    /tmp/tmp5_rtvy4i.d(39): Error: comma expected separating field initializers

    /tmp/tmp5_rtvy4i.d(39): Error: found `main` when expecting `.` following void

    /tmp/tmp5_rtvy4i.d(39): Error: found `(` when expecting identifier following `void`.

    /tmp/tmp5_rtvy4i.d(39): Error: comma expected separating field initializers

    /tmp/tmp5_rtvy4i.d(39): Error: expression expected, not `)`

    /tmp/tmp5_rtvy4i.d(39): Error: comma expected separating field initializers

    /tmp/tmp5_rtvy4i.d(39): Error: found end of file instead of initializer

    /tmp/tmp5_rtvy4i.d(39): Error: semicolon expected, not `End of File`

    /tmp/tmp5_rtvy4i.d(39): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd'
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    import std.string;\n    import std.algorithm;\n    import std.range;\n\
    \    import std.conv;\n    import std.typecons;\n    import std.array;\n    import\
    \ std.math;\n    import std.traits;\n    auto splittedSentence = to!(string[])(split(sentence));\n\
    \    auto str = \"\";\n    foreach(word; splittedSentence)\n    {\n        if(word.length\
    \ % 2 != 0 && word.length > 1)\n        {\n            str ~= word;\n        \
    \    str ~= \" \";\n        }\n    }\n    return str.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpchavz45h.d(50): unittest failure

    ----------------

    ??:? _d_unittestp [0x44ba35]

    ??:? void tmpchavz45h.__unittest_L46_C1() [0x43b9f2]

    ??:? void tmpchavz45h.__modtest() [0x449870]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x455477]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x44b062]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4511d5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x451264]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x451161]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x44b039]

    ??:? runModuleUnitTests [0x45524d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x44c970]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    int[] prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    enum is_prime = int[string]{};\n\
    \    foreach(i; prime_numbers) is_prime[to!string(i)] = i;\n    auto words = sentence.split();\n\
    \    string[] result;\n    foreach(word; words) {\n        if(is_prime.find(to!string(word.length)))\n\
    \            result ~= word;\n    }\n    return result.join(\" \");\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkrm85_a1.d(27): Error: found `[` when expecting `.` following int

    /tmp/tmpkrm85_a1.d(27): Error: semicolon expected following auto declaration,
    not `]`

    /tmp/tmpkrm85_a1.d(27): Error: found `]` instead of statement

    /tmp/tmpkrm85_a1.d(28): Error: declaration expected, not `foreach`

    /tmp/tmpkrm85_a1.d(28): Error: no identifier for declarator `prime_numbers`

    /tmp/tmpkrm85_a1.d(28): Error: declaration expected, not `)`

    /tmp/tmpkrm85_a1.d(31): Error: declaration expected, not `foreach`

    /tmp/tmpkrm85_a1.d(31): Error: no identifier for declarator `words`

    /tmp/tmpkrm85_a1.d(31): Error: declaration expected, not `)`

    /tmp/tmpkrm85_a1.d(34): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkrm85_a1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence, \" \");\n    string result = \"\";\n \
    \   foreach(string word; words)\n    {\n        if(isPrime(strlen(word)))\n  \
    \      {\n            result ~= (result.length == 0 ? \"\" : \" \") ~ word;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpivqhyn38.d(26): Error: undefined identifier `split`

    /tmp/tmpivqhyn38.d(30): Error: undefined identifier `isPrime`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpivqhyn38.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    auto w = split(sentence, \" \");\n    string ret;\n    foreach(i, word;\
    \ w)\n    {\n        if(isPrime(i.length))\n        {\n            ret ~= i;\n\
    \            ret ~= \" \";\n        }\n    }\n    ret = ret[0..$-1];\n    return\
    \ ret;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph63p_rgs.d(26): Error: undefined identifier `split`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph63p_rgs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    // if the sentence is empty there is nothing to do...\n    if (sentence.empty)\n\
    \        return \"\";\n    \n    // copy the sentence so we can modify it...\n\
    \    string prime_words = sentence;\n    \n    // we will be modifying the string\
    \ so it is easiest\n    // to work with it as an array...\n    char[] word_array\
    \ = prime_words.dup;\n    \n    // we need to keep track of the index of the first\n\
    \    // character of the current word, and the index\n    // of the first character\
    \ of the next word...\n    int current_word_begin = 0;\n    int next_word_begin\
    \ = 0;\n    \n    // we need to keep track of the length of the current\n    //\
    \ word...\n    int word_length = 0;\n    \n    // keep track of the number of\
    \ characters we have\n    // removed from the sentence...\n    int num_chars_removed\
    \ = 0;\n    \n    // we will loop through the characters in the sentence\n   \
    \ // until we reach the end of the array...\n    while (current_word_begin < word_array.length)\n\
    \    {\n        // determine the number of characters in the\n        // current\
    \ word...\n        word_length = next_word_begin - current_word_begin;\n     \
    \   \n        // if the word length is prime, then skip over\n        // it and\
    \ continue on to the next word...\n        if (isPrime(word_length))\n       \
    \ {\n            current_word_begin = next_word_begin;\n            next_word_begin\
    \ = current_word_begin + 1;\n            continue;\n        }\n        \n    \
    \    // otherwise, if the word length is not prime,\n        // then we need to\
    \ remove the current word from\n        // the sentence...\n        else\n   \
    \     {\n            // to do this, we need to shift all of the\n            //\
    \ characters to the right of the current\n            // word to the left by word_length...\n\
    \            int i = current_word_begin;\n            while (i < word_array.length\
    \ - word_length)\n            {\n                word_array[i] = word_array[i\
    \ + word_length];\n                i++;\n            }\n            \n\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5b8aa421.d(84): Error: found `unittest` instead of statement

    /tmp/tmp5b8aa421.d(96): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp5b8aa421.d(96): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5b8aa421.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    /*\n        s.split(' ') returns a string[]\n        a.filter!(prime) returns\
    \ a string[]\n        a.join(' ') returns a string\n    */\n    return sentence.split('\
    \ ').filter!(prime).join(' ');\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsg83hxo4.d(31): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsg83hxo4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence, \" \");\n    string res = \"\";\n    int\
    \ cnt = 0;\n    for (int i = 0; i < words.length; i++) {\n        int word_len\
    \ = words[i].length;\n        if (word_len <= 2) {\n            if (word_len ==\
    \ 2) {\n                if (words[i][0] == words[i][1]) {\n                  \
    \  continue;\n                }\n            }\n            res += words[i];\n\
    \            cnt++;\n        } else {\n            bool flag = true;\n       \
    \     for (int j = 2; j <= sqrt(word_len); j++) {\n                if (word_len\
    \ % j == 0) {\n                    flag = false;\n                    break;\n\
    \                }\n            }\n            if (flag) {\n                res\
    \ += words[i];\n                cnt++;\n            }\n        }\n        if (cnt\
    \ < words.length) {\n            res += \" \";\n        }\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxpzlswps.d(26): Error: undefined identifier `split`

    /tmp/tmpxpzlswps.d(30): Error: cannot implicitly convert expression `words[cast(ulong)i].length`
    of type `ulong` to `int`

    /tmp/tmpxpzlswps.d(37): Error: slice `res` is not mutable

    /tmp/tmpxpzlswps.d(41): Error: `std.math.sqrt` called with argument types `(int)`
    matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    /tmp/tmpxpzlswps.d(48): Error: slice `res` is not mutable

    /tmp/tmpxpzlswps.d(53): Error: slice `res` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxpzlswps.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence, \" \");\n    string answer = \"\";\n \
    \   for (int i = 0; i < words.length; i++) {\n        if (isPrime(words[i].length))\
    \ {\n            answer = answer ~ \" \" ~ words[i];\n        }\n    }\n    return\
    \ answer.trim;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n \
    \   assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdyce2knz.d(26): Error: undefined identifier `split`

    /tmp/tmpdyce2knz.d(29): Error: undefined identifier `isPrime`

    /tmp/tmpdyce2knz.d(33): Error: no property `trim` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdyce2knz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence, \" \");\n    string res = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            res\
    \ ~= word ~ \" \";\n        }\n    }\n    res = res.trimRight();\n    return res;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp547rpmok.d(26): Error: undefined identifier `split`

    /tmp/tmp547rpmok.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp547rpmok.d(35): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp547rpmok.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    import std.algorithm : filter, map;\n    import std.range : chunk;\n  \
    \  import std.stdio : writeln;\n    import std.string : to!int;\n    import std.conv\
    \ : to;\n    //return sentence.split(\" \").filter!(a => isPrime(a.to!int())).join(\"\
    \ \");\n    auto words = sentence.split(\" \");\n    auto primes = words.map!(w\
    \ => w.to!int()).filter!(isPrime);\n    writeln(words);\n    writeln(primes);\n\
    \    return words.zip(primes).filter!(a => a[1]).map!(a => a[0]).join(\" \");\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5ow6fcqo.d(29): Error: `;` expected

    /tmp/tmp5ow6fcqo.d(29): Error: no identifier for declarator `int`

    /tmp/tmp5ow6fcqo.d(29): Deprecation: use `{ }` for an empty statement, not `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5ow6fcqo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string ret = \"\";\n    foreach(auto s; split(sentence, \" \")) \n    {\n\
    \        if(allPrimes(s))\n            ret ~= s ~ \" \";\n    }\n    return ret.trimRight();\n\
    }\nunittest \n{\n    import std.algorithm;\n    import std.array;\n    import\
    \ std.algorithm;\n    import std.typecons;\n    import std.range;\n    import\
    \ std.conv;\n    import std.stdio;\n    writeln(typeof(words_in_sentence(\"This\
    \ is a test\")));\n    assert(words_in_sentence(\"This is a test\") == \"is\"\
    );\n    assert(words_in_sentence(\"lets go for swimming\") == \"go for\");\n \
    \   assert(words_in_sentence(\"This is a list: a, b, c, d, e, f, g.\") == \"is\
    \ a c e g\");\n    writeln(typeof(words_in_sentence(\"This is a list: a, b, c,\
    \ d, e, f, g.\")));\n    writeln(words_in_sentence(\"This is a list: a, b, c,\
    \ d, e, f, g.\"));\n    writeln(words_in_sentence(\"This is a list: a, b, c, d,\
    \ e, f, g.\").length);\n    writeln(words_in_sentence(\"This is a list: a, b,\
    \ c, d, e, f, g.\").zip(\"isac eg\").fold!((a, b) => a ~ \" \" ~ b)());\n    assert(words_in_sentence(\"\
    This is a list: a, b, c, d, e, f, g.\").zip(\"isac eg\").fold!((a, b) => a ~ \"\
    \ \" ~ b)() == \"is a c e g\");\n    assert(words_in_sentence(\"This is a list:\
    \ a, b, c, d, e, f, g.\").zip(\"isac eg\").fold!((a, b) => a ~ \" \" ~ b)() ==\
    \ \"is a c e g\");\n    assert(words_in_sentence(\"\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo8oy9ujh.d(27): Error: basic type expected, not `auto`

    /tmp/tmpo8oy9ujh.d(27): Error: no identifier for declarator `_error_`

    /tmp/tmpo8oy9ujh.d(27): Error: found `auto` when expecting `;`

    /tmp/tmpo8oy9ujh.d(27): Error: found `;` when expecting `)`

    /tmp/tmpo8oy9ujh.d(27): Error: found `)` when expecting `;` following statement

    /tmp/tmpo8oy9ujh.d(58): Error: found `This` when expecting `,`

    /tmp/tmpo8oy9ujh.d(58): Error: `type identifier : specialization` expected following
    `is`

    /tmp/tmpo8oy9ujh.d(58): Error: found `test` when expecting `,`

    /tmp/tmpo8oy9ujh.d(59): Error: found `lets` when expecting `,`

    /tmp/tmpo8oy9ujh.d(59): Error: found `for` when expecting `,`

    /tmp/tmpo8oy9ujh.d(59): Error: found `") == "` when expecting `,`

    /tmp/tmpo8oy9ujh.d(59): Error: found `for` when expecting `,`

    /tmp/tmpo8oy9ujh.d(60): Error: found `there` when expecting `,`

    /tmp/tmpo8oy9ujh.d(60): Error: `type identifier : specialization` expected following
    `is`

    /tmp/tmpo8oy9ujh.d(60): Error: found `place` when expecting `,`

    /'
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    int[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101];\n    string words = sentence.split(\"\
    \ \");\n    string solution = \"\";\n    foreach(word; words)\n    {\n       \
    \ foreach(prime; primes)\n        {\n            if(word.length == prime)\n  \
    \          {\n                solution ~= word ~ \" \";\n            }\n     \
    \   }\n    }\n    return solution.trimRight();\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjerfe7zn.d(27): Error: no property `split` for type `string`

    /tmp/tmpjerfe7zn.d(33): Error: no property `length` for type `immutable(char)`

    /tmp/tmpjerfe7zn.d(39): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjerfe7zn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    // TODO - Add your solution here.\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(inout word; words)\n    {\n\
    \        if(isPrime(word.length)) result ~= word ~ \" \";\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8ivb_ap4.d(27): Error: undefined identifier `split`

    /tmp/tmp8ivb_ap4.d(29): Error: variable `tmp8ivb_ap4.words_in_sentence.word` `inout`
    variables can only be declared inside `inout` functions

    /tmp/tmp8ivb_ap4.d(31): Error: undefined identifier `isPrime`

    /tmp/tmp8ivb_ap4.d(33): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8ivb_ap4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] result;\n    string[] words = split(sentence, \" \");\n    foreach(int\
    \ i, string word; words) {\n        if(isPrime(strlen(word))) {\n            result\
    \ ~= word;\n        }\n    }\n    return join(result, \" \");\n}\nunittest\n{\n\
    \    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a\
    \ test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go\
    \ for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6tugmcpn.d(27): Error: undefined identifier `split`

    /tmp/tmp6tugmcpn.d(29): Error: undefined identifier `isPrime`

    /tmp/tmp6tugmcpn.d(33): Error: undefined identifier `join`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6tugmcpn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    auto prime_words = new string[];\n    foreach(word; split(sentence, \"\
    \ \"))\n    {\n        if(isPrime(word.length))\n        {\n            prime_words\
    \ ~= word;\n        }\n    }\n    return join(prime_words, \" \");\n}\n \n//isPrime\
    \ test\nenum isPrime(size_t n)\n{\n    enum true_false = n <= 1 ? false : n ==\
    \ 2 ? true : isPrime!(n, cast(size_t) sqrt(n));\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptwnaltup.d(26): Error: new can only create structs, dynamic arrays
    or class objects, not `string[]`''s

    /tmp/tmptwnaltup.d(27): Error: undefined identifier `split`

    /tmp/tmptwnaltup.d(34): Error: undefined identifier `join`, did you mean function
    `main`?

    /tmp/tmptwnaltup.d(40): Error: template instance `isPrime!(n, cast(size_t)sqrt(n))`
    `isPrime` is not a template declaration, it is a function

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptwnaltup.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    import std.math : isPrime;\n    import std.algorithm : filter;\n    import\
    \ std.conv : to;\n    import std.typecons : tuple;\n    return sentence.split(\"\
    \ \")\n        .filter!(word => word.length.isPrime)\n        .map!(word => to!string(word))\n\
    \        .join(\" \");\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq1rcsjpr.d(26): Error: module `std.math` import `isPrime` not found

    /tmp/tmpq1rcsjpr.d(30): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq1rcsjpr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    bool is_prime(size_t v) {\n        if (v < 2) return false;\n        for\
    \ (auto i = size_t(2); i < v; ++i) {\n            if (v % i == 0) return false;\n\
    \        }\n        return true;\n    }\n    auto words = sentence.split(\" \"\
    );\n    return words.filter!(w => is_prime(w.length)).join(\" \");\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuvq1b76n.d(33): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuvq1b76n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    // filter words that contains prime\
    \ number of characters\n    auto prime_words = words.filter!(word => isPrime(word.length));\n\
    \    // join the words and return the string\n    return join(prime_words, \"\
    \ \");\n}\n/*\n    Test\n*/\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7t0gcxvd.d(26): Error: undefined identifier `split`

    /tmp/tmp7t0gcxvd.d(28): Error: no property `filter` for type `string[]`

    /tmp/tmp7t0gcxvd.d(30): Error: undefined identifier `join`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7t0gcxvd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    auto words = sentence.split(\" \");\n    string result;\n    foreach(word;\
    \ words) {\n        if(isPrime(word.length)) {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight;\n}\n/*\n    1. Split the\
    \ sentence into words\n    2. Iterate the words\n    3. If the word length is\
    \ prime, add the word to the result string\n    4. Strip right the result string\
    \ and return it\n*/\nunittest\n{\n    alias candidate = words_in_sentence;\n\n\
    \    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk7gsr5pf.d(26): Error: no property `split` for type `string`

    /tmp/tmpk7gsr5pf.d(33): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk7gsr5pf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n\tstring result = \"\";\n\tstring[] words = sentence.split();\n\tforeach(word;\
    \ words)\n\t{\n\t\tif( isPrime(word.length) )\n\t\t{\n\t\t\tresult ~= \" \" ~\
    \ word;\n\t\t}\n\t}\n\treturn result.stripLeft();\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3t6r2nkw.d(27): Error: no property `split` for type `string`

    /tmp/tmp3t6r2nkw.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp3t6r2nkw.d(35): Error: no property `stripLeft` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3t6r2nkw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n  string[] words = split(sentence, \" \");\n  string result = \"\";\n  foreach(word;\
    \ words) {\n    if(isPrime(word.length)) {\n      result ~= word ~ \" \";\n  \
    \  }\n  }\n  return result.stripRight();\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxr2m4xrj.d(26): Error: undefined identifier `split`

    /tmp/tmpxr2m4xrj.d(29): Error: undefined identifier `isPrime`

    /tmp/tmpxr2m4xrj.d(33): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxr2m4xrj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    bool is_prime(int n) \n    {\n        return n > 1 && all!(i => n % i !=\
    \ 0)(2 .. (n - 1));\n    }\n    auto [n, words] = split(sentence);\n    string\
    \ result;\n    for (auto w; w = n.front; n.popFront()) \n    {\n        if (is_prime(w.length))\
    \ \n        {\n            result ~= w ~ ' ';\n        }\n    }\n    return result.idup;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk4_cr9b1.d(28): Error: found `..` when expecting `,`

    /tmp/tmpk4_cr9b1.d(30): Error: basic type expected, not `[`

    /tmp/tmpk4_cr9b1.d(30): Error: found `,` when expecting `]`

    /tmp/tmpk4_cr9b1.d(30): Error: semicolon expected, not `]`

    /tmp/tmpk4_cr9b1.d(30): Error: found `]` instead of statement

    /tmp/tmpk4_cr9b1.d(32): Error: no identifier for declarator `w`

    /tmp/tmpk4_cr9b1.d(32): Error: found `;` when expecting `)`

    /tmp/tmpk4_cr9b1.d(32): Error: found `)` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk4_cr9b1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    auto words = split(sentence, ' ');\n    auto result = \"\";\n    foreach(w;\
    \ words)\n    {\n        auto len = w.length;\n        if(len > 1)\n        {\n\
    \            for(auto i = 2; i < len; i++)\n            {\n                if(len\
    \ % i == 0)\n                {\n                    goto outer;\n            \
    \    }\n            }\n            result ~= \" \" ~ w;\n        }\n        outer:\
    \ continue;\n    }\n    return result.trimLeft();\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt4_rq8ek.d(26): Error: undefined identifier `split`

    /tmp/tmpt4_rq8ek.d(44): Error: no property `trimLeft` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt4_rq8ek.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n\tstring[] words = split(sentence, \" \");\n\tauto has_prime_length = [](string\
    \ word) {\n\t\tsize_t length = word.length;\n\t\tfor (size_t factor = 2; factor\
    \ < length / 2; factor++)\n\t\t\tif (length % factor == 0)\n\t\t\t\treturn false;\n\
    \t\treturn true;\n\t};\n\treturn join(filter!has_prime_length(words), \" \");\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps6hugylz.d(27): Error: found `word` when expecting `,`

    /tmp/tmps6hugylz.d(27): Error: semicolon expected following auto declaration,
    not `{`

    /tmp/tmps6hugylz.d(33): Deprecation: use `{ }` for an empty statement, not `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps6hugylz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    enum is_prime = size_t is_prime_f = 1;\n    for (size_t i = 2; i * i <=\
    \ is_prime_f; ++i)\n        if (is_prime_f % i == 0)\n            return 0;\n\
    \    return 1;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n \
    \   assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwtd87qho.d(26): Error: semicolon expected following auto declaration,
    not `is_prime_f`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwtd87qho.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    int[] primes = [\n        2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127,\
    \ 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211,\
    \ 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307,\
    \ 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401,\
    \ 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499,\
    \ 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607,\
    \ 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709,\
    \ 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823,\
    \ 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937,\
    \ 941, 947, 953, 967, 971, 977, 983, 991, 997\n    ];\n    string result = \"\"\
    ;\n    foreach(int wordLen; primes) {\n        foreach(string word; split(sentence,\
    \ \" \")) {\n            if(word.length == wordLen)\n                result ~=\
    \ word ~ \" \";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppje4fqv1.d(31): Error: undefined identifier `split`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppje4fqv1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = std.split(sentence, ' ');\n    string new_sentence = \"\
    \";\n    foreach(word; words)\n    {\n        if(is_prime(word.length))\n    \
    \    {\n            new_sentence ~= word ~= \" \";\n        }\n    }\n    return\
    \ new_sentence.idup;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwyv37_h4.d(26): Error: undefined identifier `split` in package
    `std`

    /tmp/tmpwyv37_h4.d(30): Error: undefined identifier `is_prime`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwyv37_h4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    static immutable primes = tuple(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97);\n    string result\
    \ = \"\";\n    foreach(word; sentence.split)\n    {\n        if(word.length in\
    \ primes)\n        {\n            result ~= word;\n            result ~= \" \"\
    ;\n        }\n    }\n    return result.trimRight;\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaf1gspu4.d(28): Error: no property `split` for type `string`

    /tmp/tmpaf1gspu4.d(36): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaf1gspu4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    import std.algorithm;\n    import std.range;\n    import std.array;\n \
    \   auto isPrime = (int n) {\n        if (n <= 1) return false;\n        if (n\
    \ == 2) return true;\n        if (n % 2 == 0) return false;\n        foreach (i;\
    \ 2 .. n / 2 + 1)\n            if (n % i == 0)\n                return false;\n\
    \        return true;\n    };\n    string[] words = split(sentence);\n    return\
    \ join(map!(a => a.idup)(filter!(a => isPrime(a.length))(words)));\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpedf3q69i.d(39): Error: function pointer `isPrime(int n)` is not
    callable using argument types `(ulong)`

    /tmp/tmpedf3q69i.d(39):        cannot pass argument `a.length` of type `ulong`
    to parameter `int n`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/algorithm/iteration.d(1122):        instantiated
    from here: `FilterResult!(__lambda4, string[])`

    /tmp/tmpedf3q69i.d(39):        instantiated from here: `filter!(string[])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpedf3q69i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    import std.array : array;\n    import std.typecons : tuple;\n    import\
    \ std.algorithm : filter, map;\n    import std.range : iota;\n    import std.numeric\
    \ : isPrime;\n    import std.conv : to;\n    /*\n        Returns the words in\
    \ the sentence whose length are prime numbers\n    */\n    auto is_prime_word(string\
    \ word) => isPrime(word.length);\n    /*\n        Helper function that splits\
    \ the sentence into words\n    */\n    auto split_into_words(string s)\n    {\n\
    \        return s.split(\" \").array;\n    }\n    /*\n        Helper function\
    \ that concatenates strings with a space in between\n    */\n    auto concat_words(string[]\
    \ words)\n    {\n        return to!string(words.map!(word => word ~ \" \").join);\n\
    \    }\n    return concat_words(split_into_words(sentence).filter!is_prime_word);\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxs31x4r1.d(35): Error: function declaration without return type.
    (Note that constructors are always named `this`)

    /tmp/tmpxs31x4r1.d(35): Error: no identifier for declarator `is_prime_word(string
    word)`

    /tmp/tmpxs31x4r1.d(35): Error: semicolon expected following function declaration

    /tmp/tmpxs31x4r1.d(35): Error: found `=>` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxs31x4r1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string result = \"\";\n    bool first_word = true;\n    size_t space_index\
    \ = sentence.find(' ');\n    if (space_index == string::npos) \n    {\n      \
    \  // sentence has only one word\n        if (is_prime(sentence.length())) \n\
    \        {\n            return sentence;\n        }\n        else \n        {\n\
    \            return \"\";\n        }\n    }\n    else \n    {\n        while (space_index\
    \ != string::npos) \n        {\n            string word = sentence.substr(0, space_index);\n\
    \            sentence = sentence.substr(space_index + 1);\n            space_index\
    \ = sentence.find(' ');\n            if (is_prime(word.length())) \n         \
    \   {\n                if (first_word) \n                {\n                 \
    \   result += word;\n                    first_word = false;\n               \
    \ }\n                else \n                {\n                    result += \"\
    \ \" + word;\n                }\n            }\n        }\n        if (is_prime(sentence.length()))\
    \ \n        {\n            if (first_word) \n            {\n                result\
    \ += sentence;\n            }\n            else \n            {\n            \
    \    result += \" \" + sentence;\n            }\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1ps6yte_.d(29): Error: found `:` when expecting `)`

    /tmp/tmp1ps6yte_.d(29): Error: found `:` instead of statement

    /tmp/tmp1ps6yte_.d(36): Error: declaration expected, not `else`

    /tmp/tmp1ps6yte_.d(39): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1ps6yte_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    size_t len = sentence.length;\n    size_t pos = 0;\n    string list_words[100];\n\
    \    size_t index = 0;\n    while (pos < len)\n    {\n        size_t space = 0;\n\
    \        while (pos + space < len && sentence[pos + space] != ' ')\n        {\n\
    \            space++;\n        }\n        list_words[index] = sentence[pos ..\
    \ pos + space];\n        index++;\n        pos += space + 1;\n    }\n    string\
    \ result;\n    bool first = true;\n    for (size_t i = 0; i < index; i++)\n  \
    \  {\n        size_t len = list_words[i].length;\n        bool is_prime = true;\n\
    \        for (size_t d = 2; d <= len / 2; d++)\n        {\n            if (len\
    \ % d == 0)\n            {\n                is_prime = false;\n              \
    \  break;\n            }\n        }\n        if (is_prime)\n        {\n      \
    \      if (!first)\n            {\n                result ~= \" \";\n        \
    \    }\n            result ~= list_words[i];\n            first = false;\n   \
    \     }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeknk6xdc.d(28): Deprecation: instead of C-style syntax, use D-style
    syntax `string[100] list_words`

    /tmp/tmpeknk6xdc.d(45): Error: variable `len` is shadowing variable `tmpeknk6xdc.words_in_sentence.len`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeknk6xdc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    immutable primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    immutable sentence_items =\
    \ sentence.split();\n    immutable is_item_in_primes = primes.length <= sentence_items.length\n\
    \                                        ? sentence_items.zip(primes).map!(a =>\
    \ a[0].length == a[1])\n                                        : sentence_items.map!(a\
    \ => primes.canFind(a.length));\n    string result = \"\";\n    foreach(i, is_prime;\
    \ is_item_in_primes)\n    {\n        if(is_prime)\n        {\n            result\
    \ ~= sentence_items[i] ~ \" \";\n        }\n    }\n    return result.strip();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeefmvgzq.d(27): Error: no property `split` for type `string`

    /tmp/tmpeefmvgzq.d(39): Error: no property `strip` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeefmvgzq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    int[] words_indexes = [ 0 ];\n    for (int i = 0; i < sentence.length;\
    \ i++)\n    {\n        if (sentence[i] == ' ')\n        {\n            words_indexes\
    \ ~= i;\n        }\n    }\n    words_indexes ~= sentence.length;\n    string words_prime_length;\n\
    \    for (int i = 0; i < words_indexes.length - 1; i++)\n    {\n        string\
    \ word = sentence[words_indexes[i]..words_indexes[i + 1]];\n        int word_length\
    \ = word.length;\n        bool is_prime = true;\n        for (int i = 2; i < word_length;\
    \ i++)\n        {\n            if (word_length % i == 0)\n            {\n    \
    \            is_prime = false;\n                break;\n            }\n      \
    \  }\n        if (is_prime)\n        {\n            words_prime_length ~= \" \"\
    \ ~ word;\n        }\n    }\n    return words_prime_length.trim;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp17z25tis.d(34): Error: cannot append type `ulong` to type `int[]`

    /tmp/tmp17z25tis.d(39): Error: cannot implicitly convert expression `word.length`
    of type `ulong` to `int`

    /tmp/tmp17z25tis.d(41): Error: variable `i` is shadowing variable `tmp17z25tis.words_in_sentence.i`

    /tmp/tmp17z25tis.d(54): Error: no property `trim` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp17z25tis.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    struct word_count\n    {\n        bool is_prime = false;\n        uint\
    \ count = 0;\n    };\n    auto words = sentence.split;\n    auto word_counts =\
    \ words.assocArray!(x => x, word_count)();\n    foreach(word; word_counts.keys)\n\
    \    {\n        auto count = word.length;\n        for(uint d = 2; d <= cast(uint)sqrt(count);\
    \ d++)\n        {\n            if(count % d == 0)\n            {\n           \
    \     word_counts[word].is_prime = false;\n                break;\n          \
    \  }\n            else\n            {\n                word_counts[word].is_prime\
    \ = true;\n            }\n        }\n    }\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(word_counts[word].is_prime)\n        {\n         \
    \   result ~= word ~ \" \";\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpofilok9c.d(30): Deprecation: use `{ }` for an empty statement,
    not `;`

    /tmp/tmpofilok9c.d(31): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpofilok9c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    static string[] words = split(sentence, \" \");\n    static string[] primes\
    \ = map!(word => \n            isPrime(word.length) ? word : \"\", words);\n \
    \   return join(primes, \" \");\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpig0wvsfz.d(26): Error: undefined identifier `split`

    /tmp/tmpig0wvsfz.d(27): Error: template instance `map!((word) => isPrime(word.length)
    ? word : "", words)` template `map` is not defined

    /tmp/tmpig0wvsfz.d(29): Error: undefined identifier `join`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpig0wvsfz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    // 1. split the sentence into an array of words\n    auto words = split(sentence,\
    \ \" \");\n    /*\n    for (int i = 0; i < words.length; i++)\n    {\n       \
    \ writefln(\"%s\", words[i]);\n    }\n    */\n    string result = \"\";\n    //\
    \ 2. loop through the array to check if each word is a prime number\n    foreach\
    \ (w; words)\n    {\n        //writefln(\"%s\", w);\n        // 3. if word is\
    \ a prime number, append it to the result string\n        if (isPrime(w.length))\n\
    \        {\n            result ~= w ~ \" \";\n        }\n    }\n    return strip(result);\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu7dp5xbj.d(27): Error: undefined identifier `split`

    /tmp/tmpu7dp5xbj.d(45): Error: undefined identifier `strip`, did you mean alias
    `string`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu7dp5xbj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    import std.conv;\n    import std.range;\n    import std.algorithm;\n  \
    \  import std.array;\n    import std.math;\n    auto parts = sentence.split;\n\
    \    string result = \"\";\n    for (auto word; parts) {\n        if (word.length.isPrime)\
    \ {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trimRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxmnubpoa.d(33): Error: no identifier for declarator `word`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxmnubpoa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    enum primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    string res = \"\";\n    foreach(immutable\
    \ word; sentence.split())\n    {\n        if(primes.canFind(word.length))\n  \
    \      {\n            res ~= word ~ \" \";\n        }\n    }\n    return res.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu8vesdad.d(28): Error: no property `split` for type `string`

    /tmp/tmpu8vesdad.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu8vesdad.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    import std.algorithm : find, filter;\n    import std.range : all;\n   \
    \ import std.conv : to;\n    import std.array : array;\n    import std.math :\
    \ isPrime;\n    import std.range : cycle;\n    import std.range : take;\n    import\
    \ std.range : iota;\n    import std.string : splitter;\n    import std.stdio :\
    \ writeln;\n    return sentence.splitter.split(\" \").filter!(word => word.length.isPrime).array.join(\"\
    \ \");\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4dntbz8j.d(27): Error: module `std.range` import `all` not found

    /tmp/tmp4dntbz8j.d(30): Error: module `std.math` import `isPrime` not found

    /tmp/tmp4dntbz8j.d(34): Error: module `std.string` import `splitter` not found

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4dntbz8j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence, \" \");\n    string result = \"\";\n \
    \   foreach(string word; words)\n    {\n        if(isPrime(word.length))\n   \
    \     {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0q6_axd9.d(26): Error: undefined identifier `split`

    /tmp/tmp0q6_axd9.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp0q6_axd9.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0q6_axd9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] arr = split(sentence);\n    auto result = appender!string();\n\
    \    foreach(i, word; arr)\n    {\n        auto len = word.length;\n        bool\
    \ flag = true;\n        for(int j = 2; j <= len / 2; j++)\n        {\n       \
    \     if(len % j == 0)\n            {\n                flag = false;\n       \
    \         break;\n            }\n        }\n        if(flag)\n        {\n    \
    \        result.put(word);\n        }\n    }\n    return result.data;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnj1q86h_.d(26): Error: undefined identifier `split`

    /tmp/tmpnj1q86h_.d(27): Error: template instance `appender!string` template `appender`
    is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnj1q86h_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    auto is_prime = [](ulong x) {\n        if (x < 2) return false;\n     \
    \   if (x == 2) return true;\n        foreach (i; 2 .. cast(ulong) sqrt(x) + 1)\
    \ {\n            if (x % i == 0) return false;\n        }\n        return true;\n\
    \    };\n    string[] words = split(sentence);\n    string[] result;\n    foreach\
    \ (word; words) {\n        if (is_prime(word.length)) result ~= word;\n    }\n\
    \    return join(result, \" \");\n}\n/*\n    Testing;\n*/\nunittest {\n    assert(words_in_sentence(\"\
    This is a test\") == \"is\");\n    assert(words_in_sentence(\"lets go for swimming\"\
    ) == \"go for\");\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n\
    \    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx80rqele.d(26): Error: found `x` when expecting `.` following ulong

    /tmp/tmpx80rqele.d(26): Error: found `)` when expecting identifier following `ulong`.

    /tmp/tmpx80rqele.d(26): Error: found `{` when expecting `,`

    /tmp/tmpx80rqele.d(27): Error: expression expected, not `if`

    /tmp/tmpx80rqele.d(27): Error: found `return` when expecting `,`

    /tmp/tmpx80rqele.d(27): Error: found `;` when expecting `,`

    /tmp/tmpx80rqele.d(28): Error: expression expected, not `if`

    /tmp/tmpx80rqele.d(28): Error: found `return` when expecting `,`

    /tmp/tmpx80rqele.d(28): Error: found `;` when expecting `,`

    /tmp/tmpx80rqele.d(29): Error: expression expected, not `foreach`

    /tmp/tmpx80rqele.d(29): Error: found `;` when expecting `,`

    /tmp/tmpx80rqele.d(29): Error: found `..` when expecting `,`

    /tmp/tmpx80rqele.d(29): Error: found `{` when expecting `,`

    /tmp/tmpx80rqele.d(30): Error: expression expected, not `if`

    /tmp/tmpx80rqele.d(30): Error: found `return` when expecting `,`

    /tmp/tmpx80rqele.d(30): Error: found `;` when expecting `'
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    import std.algorithm;\n    import std.range;\n    import std.array;\n \
    \   import std.stdio;\n    immutable arr = sentence.split(\" \");\n    immutable\
    \ ret = arr.filter!(a => isPrime(a.length)).join(\" \");\n    return ret;\n}\n\
    pragma(inline, true);\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphj8v6jvo.d(31): Error: undefined identifier `isPrime`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/algorithm/iteration.d(1122):        instantiated
    from here: `FilterResult!(__lambda2, immutable(string)[])`

    /tmp/tmphj8v6jvo.d(31):        instantiated from here: `filter!(immutable(string)[])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphj8v6jvo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string new_sentence = \"\";\n    foreach(word; split(sentence))\n    {\n\
    \        if(word.length >= 1 && word.length <= 100)\n        {\n            int\
    \ index = 0;\n            bool isPrime = true;\n            for(int i = 2; i <=\
    \ word.length/2; i++)\n            {\n                if(word.length % i == 0)\n\
    \                {\n                    isPrime = false;\n                   \
    \ break;\n                }\n            }\n            if(isPrime == true)\n\
    \            {\n                new_sentence ~= word ~ \" \";\n            }\n\
    \        }\n    }\n    return strip(new_sentence);\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxz3ig5l0.d(27): Error: undefined identifier `split`

    /tmp/tmpxz3ig5l0.d(47): Error: undefined identifier `strip`, did you mean alias
    `string`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxz3ig5l0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    immutable std.range.primerange prime_range = 0..500;\n    immutable std.range.booleanrange\
    \ boolean_range = 0..500;\n    immutable std.range.charsrange chars_range = 0..500;\n\
    \    immutable std.range.integersrange integers_range = 0..500;\n    immutable\
    \ std.range.bytessrange bytess_range = 0..500;\n    immutable std.range.doublesrange\
    \ doubles_range = 0..500;\n    immutable std.range.floatsrange floats_range =\
    \ 0..500;\n    immutable std.range.exponentsrange exponents_range = 0..500;\n\
    \    immutable std.range.longsrange longs_range = 0..500;\n    immutable std.range.shortrange\
    \ short_range = 0..500;\n    immutable std.range.realsrange reals_range = 0..500;\n\
    \    immutable std.range.uintegersrange uintegers_range = 0..500;\n    immutable\
    \ std.range.ulongsrange ulongs_range = 0..500;\n    immutable std.range.ushortrange\
    \ ushort_range = 0..500;\n    immutable std.range.stringsrange strings_range =\
    \ 0..500;\n    immutable std.range.rangesrange ranges_range = 0..500;\n    immutable\
    \ std.range.boolrangesrange boolranges_range = 0..500;\n    immutable std.range.charsrangesrange\
    \ charsranges_range = 0..500;\n    immutable std.range.integersrangesrange integersranges_range\
    \ = 0..500;\n    immutable std.range.bytessrangesrange bytessranges_range = 0..500;\n\
    \    immutable std.range.doublesrangesrange doublesranges_range = 0..500;\n  \
    \  immutable std.range.floatsrangesrange floatsranges_range = 0..500;\n    immutable\
    \ std.range.exponentsrangesrange exponentsranges_range = 0..500;\n    immutable\
    \ std.range.longsrangesrange longsranges_range = 0..500;\n    immutable std.range.shortrangesrange\
    \ shortranges_range = 0..500;\n    immutable std.range.realsr\nunittest\n{\n \
    \   alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\"\
    ) == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n\
    \    assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwo3rc721.d(26): Error: semicolon expected, not `..`

    /tmp/tmpwo3rc721.d(26): Error: found `..` instead of statement

    /tmp/tmpwo3rc721.d(27): Error: semicolon expected, not `..`

    /tmp/tmpwo3rc721.d(27): Error: found `..` instead of statement

    /tmp/tmpwo3rc721.d(28): Error: semicolon expected, not `..`

    /tmp/tmpwo3rc721.d(28): Error: found `..` instead of statement

    /tmp/tmpwo3rc721.d(29): Error: semicolon expected, not `..`

    /tmp/tmpwo3rc721.d(29): Error: found `..` instead of statement

    /tmp/tmpwo3rc721.d(30): Error: semicolon expected, not `..`

    /tmp/tmpwo3rc721.d(30): Error: found `..` instead of statement

    /tmp/tmpwo3rc721.d(31): Error: semicolon expected, not `..`

    /tmp/tmpwo3rc721.d(31): Error: found `..` instead of statement

    /tmp/tmpwo3rc721.d(32): Error: semicolon expected, not `..`

    /tmp/tmpwo3rc721.d(32): Error: found `..` instead of statement

    /tmp/tmpwo3rc721.d(33): Error: semicolon expected, not `..`

    /tmp/tmpwo3rc721.d(33): Error: found `..` instead of statement

    /tmp/tmpwo3rc721.d(34): Error: semicolon'
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence, \" \");\n    bool[] is_prime = is_prime_numbers(10000);\n\
    \    string answer = \"\";\n    foreach(word; words)\n    {\n        if(is_prime[word.length])\n\
    \        {\n            answer ~= word ~ \" \";\n        }\n    }\n    return\
    \ answer.trimRight();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo5r_f90r.d(26): Error: undefined identifier `split`

    /tmp/tmpo5r_f90r.d(27): Error: undefined identifier `is_prime_numbers`

    /tmp/tmpo5r_f90r.d(36): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo5r_f90r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    enum b = false;\n    enum w = true;\n    auto word = split(sentence, \"\
    \ \");\n    string res = \"\";\n    foreach(w; word)\n    {\n        auto s =\
    \ unaryFun!(isPrime)(w.length);\n        if(s)\n        {\n            res ~=\
    \ w ~ \" \";\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprfw0wzn3.d(28): Error: undefined identifier `split`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprfw0wzn3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    int[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101];\n    string res = \"\";\n    int\
    \ i = 0;\n    while (i < sentence.length)\n    {\n        string word = \"\";\n\
    \        while (i < sentence.length && sentence[i] != ' ')\n        {\n      \
    \      word ~= sentence[i];\n            i++;\n        }\n        i++;\n     \
    \   if (find(primes.dup, word.length))\n        {\n            res ~= word ~ \"\
    \ \";\n        }\n    }\n    return res[0..$-1];\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7b43gogb.d(38): Error: undefined identifier `find`, did you mean
    template `Bind(alias Template, args1...)`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7b43gogb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    auto words = appender;\n    auto is_prime = isPrime;\n    foreach(word;\
    \ sentence.split())\n    {\n        if(is_prime(word.length))\n        {\n   \
    \         words.put(word ~ \" \");\n        }\n    }\n    return words.data.idup;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuudz543t.d(26): Error: undefined identifier `appender`

    /tmp/tmpuudz543t.d(27): Error: undefined identifier `isPrime`

    /tmp/tmpuudz543t.d(28): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuudz543t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    static immutable is_prime = (int x) {\n        if (x <= 3)\n          \
    \  return x > 1;\n        if (x % 2 == 0 || x % 3 == 0)\n            return false;\n\
    \        for (int i = 5; i * i <= x; i += 6)\n            if (x % i == 0 || x\
    \ % (i + 2) == 0)\n                return false;\n        return true;\n    };\n\
    \    string result = \"\";\n    foreach (word; split(sentence))\n        if (is_prime(word.length))\n\
    \            result ~= \" \" ~ word;\n    return result.popFront();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptagmjczd.d(37): Error: undefined identifier `split`

    /tmp/tmptagmjczd.d(40): Error: no property `popFront` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptagmjczd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    int[] prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    string[] words = split(sentence,\
    \ \" \");\n    string s;\n    foreach(w; words)\n    {\n        if(find(prime_numbers,\
    \ strlen(w)))\n        {\n            s ~= w ~ \" \";\n        }\n    }\n    return\
    \ s.trimRight();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n\
    \    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeoyfzv5l.d(27): Error: undefined identifier `split`

    /tmp/tmpeoyfzv5l.d(31): Error: undefined identifier `find`, did you mean template
    `Bind(alias Template, args1...)`?

    /tmp/tmpeoyfzv5l.d(36): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeoyfzv5l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = tokenize(sentence);\n    string sentence;\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            sentence\
    \ ~= \" \" ~ word;\n        }\n    }\n    return sentence.trim();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyo4izqn5.d(26): Error: undefined identifier `tokenize`

    /tmp/tmpyo4izqn5.d(27): Error: variable `sentence` is shadowing variable `tmpyo4izqn5.words_in_sentence.sentence`

    /tmp/tmpyo4izqn5.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpyo4izqn5.d(35): Error: no property `trim` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyo4izqn5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    immutable is_prime = (size_t value) => \n    {\n        if (value < 2)\
    \ return false;\n        for (size_t i = 2; i <= sqrt(value); i++)\n         \
    \   if (value % i == 0) return false;\n        return true;\n    };\n    \n  \
    \  import std.algorithm : filter, map, joiner;\n    import std.range.primitives\
    \ : copy;\n    import std.conv : to;\n    import std.string : splitter;\n    \n\
    \    return sentence.splitter.map!(to!string).filter!is_prime.joiner(\" \");\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqc24064t.d(29): Error: `std.math.sqrt` called with argument types
    `(ulong)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    /tmp/tmpqc24064t.d(35): Error: module `std.range.primitives` import `copy` not
    found

    /tmp/tmpqc24064t.d(37): Error: module `std.string` import `splitter` not found

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqc24064t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    import std.array;\n    auto parts = sentence.split(\" \");\n    enum isPrime\
    \ = true;\n    parts = parts.filter!(a => {\n        foreach(i; 2..(a.length/2\
    \ + 1))\n        {\n            if(a.length % i == 0)\n            {\n       \
    \         isPrime = false;\n                break;\n            }\n        }\n\
    \        if(isPrime)\n            return a;\n        isPrime = true;\n    });\n\
    \    return parts.join(\" \");\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkmkqz7x0.d(29): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkmkqz7x0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    enum len = find(sentence, ' ');\n    immutable res = sentence[0..len];\n\
    \    immutable len_word = res.length;\n    immutable is_prime = len_word > 1 &&\
    \ all!((val){return len_word % val != 0;})(iota(2,len_word));\n    return is_prime\
    \ ? res : \"\";\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n\
    \    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpft98zl28.d(26): Error: undefined identifier `find`, did you mean
    template `Bind(alias Template, args1...)`?

    /tmp/tmpft98zl28.d(29): Error: template instance `all!((val)

    {

    return len_word % val != 0;

    }

    )` template `all` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpft98zl28.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    // The original sentence contains only letters, so split on spaces.\n \
    \   immutable(char)[] words = splitter(sentence, ' ');\n    immutable(char)[]\
    \ res;\n    foreach(immutable(char)[] word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            res ~= word;\n        }\n    }\n    return res.join(\"\
    \ \");\n}\n/*\n    Here's a function that determines if an integer is prime.\n\
    unittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbhmw4lbh.d(38): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbhmw4lbh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    auto words = sentence.split;\n    auto result = words.filter!isPrime;\n\
    \    return result.join(\" \");\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxbwj6c1f.d(26): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxbwj6c1f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] arr = split(sentence);\n    string result = \"\";\n    foreach(string\
    \ word; arr)\n    {\n        uint len = word.length;\n        if(isPrime(len))\n\
    \        {\n            result ~= \" \" ~ word;\n        }\n    }\n    return\
    \ result[1..];\n}\n/*\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzfyhsspu.d(36): Error: expression expected, not `]`

    /tmp/tmpzfyhsspu.d(36): Error: found `;` when expecting `,`

    /tmp/tmpzfyhsspu.d(37): Error: expression expected, not `}`

    /tmp/tmpzfyhsspu.d(38): Error: unterminated /* */ comment

    /tmp/tmpzfyhsspu.d(51): Error: found `End of File` when expecting `,`

    /tmp/tmpzfyhsspu.d(51): Error: found `End of File` when expecting `]`

    /tmp/tmpzfyhsspu.d(51): Error: found `End of File` when expecting `;` following
    `return` statement

    /tmp/tmpzfyhsspu.d(51): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzfyhsspu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    auto words = split(sentence);\n    //@assert(not words.empty);\n    auto\
    \ max_word_length = words.map!(a => a.length).max;\n    //@assert(max_word_length\
    \ > 0);\n    return words.filter!(a => isPrime(a.length)).join(\" \");\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpobplq72g.d(26): Error: undefined identifier `split`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpobplq72g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    // Split the sentence by spaces\n    auto words = split(sentence, \" \"\
    );\n    // We accumulate the words with prime lengths into a string.\n    string\
    \ result;\n    foreach(word; words)\n    {\n        // Only add words with prime\
    \ lengths to result.\n        if(isPrime(word.length))\n        {\n          \
    \  result ~= word ~ \" \";\n        }\n    }\n    // If there were no words with\
    \ prime lengths, return \"\".\n    if(result.length == 0)\n    {\n        return\
    \ \"\";\n    }\n    else\n    {\n        // Otherwise, remove the trailing space\
    \ and return result.\n        return result[0..$-1];\n    }\n}\n/*\n    This function\
    \ determines if n is prime or not.\n    It is based on the sieve of Eratosthenes.\n\
    \    >>> https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\n*/\nunittest\n{\n\
    \    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a\
    \ test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go\
    \ for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpalc561hd.d(27): Error: undefined identifier `split`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpalc561hd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    import std.math;\n    import std.algorithm;\n    import std.array;\n  \
    \  import std.conv;\n    import std.string;\n    import std.range;\n    import\
    \ std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\
    \ std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\
    \ std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\
    \ std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\
    \ std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\
    \ std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\
    \ std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\
    \ std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\
    \ std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\
    \ std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\
    \ std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\
    \ std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\
    \ std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\
    \ std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\
    \ std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\
    \ std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\
    \ std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\
    \ std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\
    \ std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\
    \ std.typecons;\n    import\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy58ayj4p.d(91): Error: identifier expected following `import`

    /tmp/tmpy58ayj4p.d(91): Error: `;` expected

    /tmp/tmpy58ayj4p.d(103): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy58ayj4p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    enum primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    string result = \"\";\n    int\
    \ len = 0;\n    foreach(word; split(sentence, \" \"))\n    {\n        len = word.length;\n\
    \        if (primes.count > 0 && len == primes[0])\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpncpzl9hq.d(29): Error: undefined identifier `split`

    /tmp/tmpncpzl9hq.d(37): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpncpzl9hq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    auto words = split(sentence, \" \");\n    auto is_prime = (int n) {\n \
    \       if (n < 2) return false;\n        for (int i = 2; i < sqrt(n); i++)\n\
    \            if (n % i == 0) return false;\n        return true;\n    };\n   \
    \ auto result = words.filter!(is_prime).join(\" \");\n    return result;\n}\n\
    unittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsggomi7p.d(26): Error: undefined identifier `split`

    /tmp/tmpsggomi7p.d(29): Error: `std.math.sqrt` called with argument types `(int)`
    matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsggomi7p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n  string[] words = split(sentence, \" \");\n  string filteredWords = \"\";\n\
    \  foreach(word; words)\n  {\n    if(isPrime(word.length))\n    {\n      filteredWords\
    \ ~= word ~ \" \";\n    }\n  }\n  return strip(filteredWords);\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzln7cjbl.d(26): Error: undefined identifier `split`

    /tmp/tmpzln7cjbl.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpzln7cjbl.d(35): Error: undefined identifier `strip`, did you mean alias
    `string`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzln7cjbl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    auto words = split(sentence, \" \");\n    string result;\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= \" \" ~ word;\n        }\n    }\n    return result.length > 0 ? result[1..]\
    \ : \"\";\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2jd3jch_.d(35): Error: expression expected, not `]`

    /tmp/tmp2jd3jch_.d(35): Error: found `:` when expecting `,`

    /tmp/tmp2jd3jch_.d(35): Error: found `;` when expecting `,`

    /tmp/tmp2jd3jch_.d(36): Error: expression expected, not `}`

    /tmp/tmp2jd3jch_.d(37): Error: found `unittest` when expecting `,`

    /tmp/tmp2jd3jch_.d(49): Error: found `void` when expecting `,`

    /tmp/tmp2jd3jch_.d(49): Error: found `{` when expecting `,`

    /tmp/tmp2jd3jch_.d(49): Error: expression expected, not `}`

    /tmp/tmp2jd3jch_.d(49): Error: found `End of File` when expecting `,`

    /tmp/tmp2jd3jch_.d(49): Error: found `End of File` when expecting `]`

    /tmp/tmp2jd3jch_.d(49): Error: found `End of File` when expecting `:`

    /tmp/tmp2jd3jch_.d(49): Error: expression expected, not `End of File`

    /tmp/tmp2jd3jch_.d(49): Error: found `End of File` when expecting `;` following
    `return` statement

    /tmp/tmp2jd3jch_.d(49): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2jd3j'
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    import std.stdio;\n    import std.conv;\n    import std.array;\n    import\
    \ std.typecons;\n    import std.string;\n    import std.algorithm;\n    auto words\
    \ = sentence.split(\" \");\n    auto result = words.filter!(word => isPrime(word.length));\n\
    \    return result.map!(word => word ~ \" \").joiner.join;\n}\nunittest\n{\n \
    \   alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\"\
    ) == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n\
    \    assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4owatagy.d(33): Error: undefined identifier `isPrime`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/algorithm/iteration.d(1122):        instantiated
    from here: `FilterResult!(__lambda2, string[])`

    /tmp/tmp4owatagy.d(33):        instantiated from here: `filter!(string[])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4owatagy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    immutable is_prime = prime[0..100];\n    string[] words = split(sentence);\n\
    \    return join(filter!(w => is_prime[w.length])(words));\n}\n/*\n    This is\
    \ a list of words with the same length\n    >>> list_words_same_length(\"Test\
    \ test2 longest_word test_test test_test_test\")\n    [[\"Test\", \"test2\"],\
    \ [\"longest_word\"], [\"test_test\", \"test_test_test\"]]\n*/\nalias length_words\
    \ = string[];\nalias words_by_length = length_words[];\nimmutable words_by_length\
    \ list_words_same_length(string sentence) \n{\n    string[] words = split(sentence);\n\
    \    length_words[] list_words;\n    int i = 0;\n    foreach(word; words)\n  \
    \  {\n        if(list_words.length <= word.length)\n        {\n            list_words\
    \ ~= repeat(length_words.init, word.length - list_words.length + 1);\n       \
    \ }\n        list_words[word.length] ~= word;\n    }\n    return filter!(a =>\
    \ a.length > 0)(list_words);\n}\n/*\n    Given a number, list all the factors\
    \ of that number\n    >>> list_factors(60)\n    [1, 2, 3, 4, 5, 6, 10, 12, 15,\
    \ 20, 30, 60]\n*/\nunittest\n{\n    alias candidate = words_in_sentence;\n\n \
    \   assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpauuba7ti.d(37): Error: function `tmpauuba7ti.list_words_same_length`
    without `this` cannot be `immutable`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpauuba7ti.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    import std.string : split;\n    import std.range : filter;\n    import\
    \ std.math : isPrime;\n    string[] words = sentence.split(\" \");\n    return\
    \ words.filter!isPrime.join(\" \");\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptlvioc7c.d(27): Error: module `std.range` import `filter` not found,
    did you mean template `std.meta.Filter(alias pred, TList...)`?

    /tmp/tmptlvioc7c.d(28): Error: module `std.math` import `isPrime` not found

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptlvioc7c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    auto words = split(sentence, ' ');\n    auto primes = filter!(x => isPrime(x))(map!(w\
    \ => w.length)(words));\n    return join(filter!(x => primes.canFind(x.length))(words),\
    \ \" \");\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp37e5jsg2.d(26): Error: undefined identifier `split`

    /tmp/tmp37e5jsg2.d(27): Error: template instance `filter!((x) => isPrime(x))`
    template `filter` is not defined

    /tmp/tmp37e5jsg2.d(28): Error: undefined identifier `join`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp37e5jsg2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    immutable prime = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    string[] s = sentence.split();\n\
    \    string ans = \"\";\n    foreach(p; s)\n    {\n        foreach(q; prime)\n\
    \        {\n            if(p.length == q)\n            {\n                ans\
    \ ~= p;\n                ans ~= \" \";\n            }\n        }\n    }\n    return\
    \ ans.strip();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n \
    \   assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsq_7pgka.d(27): Error: no property `split` for type `string`

    /tmp/tmpsq_7pgka.d(40): Error: no property `strip` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsq_7pgka.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = sentence.split(\" \");\n    string[] prime_words;\n  \
    \  foreach(string word; words)\n    {\n        if(isPrime(word.length))\n    \
    \    {\n            prime_words ~= word;\n        }\n    }\n    return prime_words.join(\"\
    \ \");\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg_7u5vke.d(26): Error: no property `split` for type `string`

    /tmp/tmpg_7u5vke.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpg_7u5vke.d(35): Error: no property `join` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg_7u5vke.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    import std.algorithm : filter, map;\n    import std.array : array;\n  \
    \  import std.math : isPrime;\n    import std.typecons : tuple;\n    import std.range\
    \ : takeWhile;\n    import std.string : strip;\n    \n    sentence = sentence.strip();\n\
    \    auto all_words = sentence.split(\" \");\n    auto word_lens = all_words.map!(w\
    \ => w.length).array;\n    auto is_prime = word_lens.filter!(w => isPrime(w));\n\
    \    auto word_index = word_lens.takeWhile!(w => w == is_prime[0]).length;\n \
    \   return all_words[word_index .. all_words.length].array.join(\" \");\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd9irc3fr.d(28): Error: module `std.math` import `isPrime` not found

    /tmp/tmpd9irc3fr.d(30): Error: module `std.range` import `takeWhile` not found

    /tmp/tmpd9irc3fr.d(34): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd9irc3fr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    import std.conv;\n    import std.string;\n    import std.array;\n    import\
    \ std.algorithm;\n    import std.range;\n    bool isPrime(size_t n)\n    {\n \
    \       if (n < 2)\n            return false;\n        if (n == 2)\n         \
    \   return true;\n        else if (n % 2 == 0)\n            return false;\n  \
    \      else\n        {\n            for (size_t i = 3; i <= ceil(sqrt(n)); i++)\n\
    \            {\n                if (n % i == 0)\n                    return false;\n\
    \            }\n            return true;\n        }\n    }\n    return join(map!(a\
    \ => a[1])(filter!(a => isPrime(a[1].length))(zip(iota(0),split(sentence, \" \"\
    )))));\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbxrd017i.d(41): Error: `std.math.sqrt` called with argument types
    `(ulong)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbxrd017i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    // Get words from sentence\n    auto words = split(sentence, \" \");\n\
    \    // Initialize empty string to store words of prime length\n    string prime_words\
    \ = \"\";\n    // If a word length is prime, then prime_words += current word\n\
    \    foreach(word; words) {\n        if(word.length.isPrime) {\n            prime_words\
    \ ~= word ~ \" \";\n        }\n    }\n    // Remove last space\n    prime_words\
    \ = prime_words[0..prime_words.length-1];\n    return prime_words;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpezg9p8cd.d(27): Error: undefined identifier `split`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpezg9p8cd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    bool is_prime(int n)\n    {\n        if (n <= 1) return false;\n      \
    \  if (n == 2) return true;\n        if (n % 2 == 0) return false;\n        foreach\
    \ (i; 3..n)\n        {\n            if (n % i == 0)\n                return false;\n\
    \        }\n        return true;\n    }\n    string[] tokens = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach (token; tokens)\n    {\n   \
    \     if (is_prime(token.length))\n            result ~= token ~ \" \";\n    }\n\
    \    return result.trimRight();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp10oc_5_a.d(38): Error: undefined identifier `split`

    /tmp/tmp10oc_5_a.d(42): Error: function `tmp10oc_5_a.words_in_sentence.is_prime(int
    n)` is not callable using argument types `(ulong)`

    /tmp/tmp10oc_5_a.d(42):        cannot pass argument `token.length` of type `ulong`
    to parameter `int n`

    /tmp/tmp10oc_5_a.d(45): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp10oc_5_a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n\tauto words = split(sentence, \" \");\n\tauto result = \"\";\n\tauto size\
    \ = words.length;\n\tfor (int i = 0; i < size; i++) {\n\t\tauto word = words[i];\n\
    \t\tif (isPrime(word.length))\n\t\t\tresult ~= word ~ \" \";\n\t}\n\treturn result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpircxpmj4.d(26): Error: undefined identifier `split`

    /tmp/tmpircxpmj4.d(31): Error: undefined identifier `isPrime`

    /tmp/tmpircxpmj4.d(34): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpircxpmj4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = sentence.split(\" \");\n    immutable uint[] prime_lengths\
    \ = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97];\n    bool is_prime = false;\n    string new_sentence =\
    \ \"\";\n    foreach(w; words)\n    {\n        is_prime = false;\n        foreach(prime;\
    \ prime_lengths)\n        {\n            if(w.length == prime)\n            {\n\
    \                is_prime = true;\n                break;\n            }\n   \
    \     }\n        if(is_prime)\n        {\n            new_sentence ~= w ~ \" \"\
    ;\n        }\n    }\n    return new_sentence.strip();\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcb_oqbwl.d(26): Error: no property `split` for type `string`

    /tmp/tmpcb_oqbwl.d(46): Error: no property `strip` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcb_oqbwl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    immutable is_prime = isPrime;\n    immutable split_to_words = split;\n\
    \    auto primes = filter!(is_prime)(map!(length)(split_to_words(sentence)));\n\
    \    return \"\".join(map!((a, b) => a ~ \" \" ~ b)(split_to_words(sentence))(primes));\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0fj1q7t1.d(26): Error: undefined identifier `isPrime`

    /tmp/tmp0fj1q7t1.d(27): Error: undefined identifier `split`

    /tmp/tmp0fj1q7t1.d(28): Error: template instance `filter!is_prime` template `filter`
    is not defined

    /tmp/tmp0fj1q7t1.d(29): Error: no property `join` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0fj1q7t1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = sentence.split();\n    string result = \"\";\n    foreach(string\
    \ word; words)\n    {\n        if(!isPrimeNumber(word.length))\n            continue;\n\
    \        result ~= word ~ \" \";\n    }\n    return result.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk1edyyj9.d(26): Error: no property `split` for type `string`

    /tmp/tmpk1edyyj9.d(30): Error: undefined identifier `isPrimeNumber`

    /tmp/tmpk1edyyj9.d(34): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk1edyyj9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence, \" \");\n    string result = \"\";\n \
    \   foreach(w; words)\n    {\n        int word_length = w.length;\n        int\
    \ flag = 1;\n        if(word_length > 1)\n        {\n            for(int i = 2;\
    \ i <= word_length / 2; ++i)\n            {\n                if(word_length %\
    \ i == 0)\n                {\n                    flag = 0;\n                \
    \    break;\n                }\n            }\n        }\n        if(flag == 1)\n\
    \        {\n            result ~= w ~ \" \";\n        }\n    }\n    return strip(result);\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgawo5ko_.d(26): Error: undefined identifier `split`

    /tmp/tmpgawo5ko_.d(30): Error: cannot implicitly convert expression `w.length`
    of type `ulong` to `int`

    /tmp/tmpgawo5ko_.d(48): Error: undefined identifier `strip`, did you mean alias
    `string`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgawo5ko_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    auto prime_word = [] (string word) {\n        auto word_len = word.length;\n\
    \        auto i = 2;\n        while (i < word_len)\n        {\n            if\
    \ (word_len % i == 0)\n                return false;\n            i++;\n     \
    \   }\n        return true;\n    };\n    auto sentence_words = sentence.split;\n\
    \    string[] prime_words;\n    foreach (word; sentence_words)\n    {\n      \
    \  if (prime_word(word))\n            prime_words ~= word;\n    }\n    return\
    \ prime_words.join(\" \");\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvgjlmnco.d(26): Error: found `word` when expecting `,`

    /tmp/tmpvgjlmnco.d(26): Error: semicolon expected following auto declaration,
    not `{`

    /tmp/tmpvgjlmnco.d(36): Deprecation: use `{ }` for an empty statement, not `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvgjlmnco.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    if(!sentence.length) return sentence;\n    string[] words = sentence.split(\"\
    \ \");\n    auto is_prime = [](int n) -> bool {\n        if(n < 2) return false;\n\
    \        if(n == 2) return true;\n        for(int i = 2; i <= cast(int)sqrt(n);\
    \ i++) if(n % i == 0) return false;\n        return true;\n    };\n    return\
    \ appender!string.joiner(\" \").apply(words.filter!(is_prime).retro);\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu_mvy_w3.d(28): Error: found `n` when expecting `.` following int

    /tmp/tmpu_mvy_w3.d(28): Error: found `)` when expecting identifier following `int`.

    /tmp/tmpu_mvy_w3.d(28): Error: expression expected, not `>`

    /tmp/tmpu_mvy_w3.d(28): Error: found `bool` when expecting `,`

    /tmp/tmpu_mvy_w3.d(33): Error: found `;` when expecting `,`

    /tmp/tmpu_mvy_w3.d(34): Error: expression expected, not `return`

    /tmp/tmpu_mvy_w3.d(34): Error: found `appender` when expecting `,`

    /tmp/tmpu_mvy_w3.d(34): Error: found `;` when expecting `,`

    /tmp/tmpu_mvy_w3.d(35): Error: expression expected, not `}`

    /tmp/tmpu_mvy_w3.d(36): Error: found `unittest` when expecting `,`

    /tmp/tmpu_mvy_w3.d(48): Error: found `void` when expecting `,`

    /tmp/tmpu_mvy_w3.d(48): Error: found `{` when expecting `,`

    /tmp/tmpu_mvy_w3.d(48): Error: expression expected, not `}`

    /tmp/tmpu_mvy_w3.d(48): Error: found `End of File` when expecting `,`

    /tmp/tmpu_mvy_w3.d(48): Error: found `End of File` when expecting `)`

    /tmp/tmpu_mvy_w3.d(48): Error: semicolon '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    // init\n    string[] words = split(sentence);\n    string[] new_words;\n\
    \    string result;\n    // check every word\n    foreach(var word; words)\n \
    \   {\n        if(isPrime(length(word)))\n        {\n            new_words ~=\
    \ word;\n        }\n    }\n    // make new sentence\n    foreach(var word; new_words)\n\
    \    {\n        result ~= word ~ ' ';\n    }\n    // return\n    return chomp(result);\n\
    }\n// check if num is prime\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfcje5oxs.d(27): Error: undefined identifier `split`

    /tmp/tmpfcje5oxs.d(31): Error: undefined identifier `var`

    /tmp/tmpfcje5oxs.d(33): Error: undefined identifier `isPrime`

    /tmp/tmpfcje5oxs.d(39): Error: undefined identifier `var`

    /tmp/tmpfcje5oxs.d(44): Error: undefined identifier `chomp`, did you mean template
    `cmp(T)(const(T) x, const(T) y) if (isFloatingPoint!T)`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfcje5oxs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return strip(result);\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp62993465.d(26): Error: undefined identifier `split`

    /tmp/tmp62993465.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp62993465.d(35): Error: undefined identifier `strip`, did you mean alias
    `string`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp62993465.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    static import std.algorithm : filter, joiner;\n    static import std.array\
    \ : splitter;\n    static import std.math : isPrime;\n    static import std.range\
    \ : iota;\n    // first split the string by space\n    // the output of splitter\
    \ is a lazy range,\n    // so we have to force it to materialize into an array\n\
    \    auto words = sentence.splitter!((x) => x == ' ').array;\n    auto result\
    \ = iota(0, words.length)\n        .filter!(i => isPrime(words[i].length))\n \
    \       .map!(i => words[i])\n        .joiner(\" \");\n    return result;\n}\n\
    unittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr_ou0g5g.d(26): Error: static import `std` cannot have an import
    bind list

    /tmp/tmpr_ou0g5g.d(26): Error: static import `std` cannot have an import bind
    list

    /tmp/tmpr_ou0g5g.d(27): Error: static import `std` cannot have an import bind
    list

    /tmp/tmpr_ou0g5g.d(28): Error: static import `std` cannot have an import bind
    list

    /tmp/tmpr_ou0g5g.d(29): Error: static import `std` cannot have an import bind
    list

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr_ou0g5g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    bool is_prime(size_t n)\n    {\n        if (n <= 1) return false;\n   \
    \     else if (n <= 3) return true;\n        else if (n % 2 == 0 || n % 3 == 0)\
    \ return false;\nunittest\n{\n    alias candidate = words_in_sentence;\n\n   \
    \ assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets\
    \ go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmploj3l_8f.d(31): Error: found `unittest` instead of statement

    /tmp/tmploj3l_8f.d(43): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmploj3l_8f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[string] dictionary;\n    string word;\n    string tmp;\n    foreach(i;\
    \ 0 .. sentence.length)\n    {\n        if(sentence[i] == ' ')\n        {\n  \
    \          tmp = i.to!string();\n            //writefln(\"%s\\n\", tmp);\n   \
    \         dictionary[word] = tmp;\n            word = \"\";\n        }\n     \
    \   else\n        {\n            word ~= sentence[i];\n        }\n    }\n    dictionary[word]\
    \ = sentence.length.to!string();\n    /*\n    foreach(i; dictionary)\n    {\n\
    \        writefln(\"%s %s\\n\", i.key, i.value);\n    }\n    */\n    string final_sentence;\n\
    \    ulong num;\n    bool isPrime;\n    foreach(i; dictionary)\n    {\n      \
    \  num = i.value.to!ulong();\n        isPrime = true;\n        foreach(j; 2 ..\
    \ num)\n        {\n            if(num % j == 0)\n            {\n             \
    \   isPrime = false;\n                break;\n            }\n        }\n     \
    \   if(isPrime)\n        {\n            final_sentence ~= i.key ~ \" \";\n   \
    \     }\n    }\n    return final_sentence.stripRight;\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvvfhl9hy.d(33): Error: no property `to` for type `ulong`

    /tmp/tmpvvfhl9hy.d(43): Error: no property `to` for type `ulong`

    /tmp/tmpvvfhl9hy.d(55): Error: no property `value` for type `string`

    /tmp/tmpvvfhl9hy.d(67): Error: no property `key` for type `string`

    /tmp/tmpvvfhl9hy.d(70): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvvfhl9hy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    auto is_prime = [](int n) \n    {\n        if (n <= 1) \n            return\
    \ false;\n        for (int i = 2; i <= sqrt(n); i++) \n            if (n % i ==\
    \ 0) \n                return false;\n        return true;\n    };\n    auto words\
    \ = sentence.split(\" \");\n    auto res = \"\";\n    foreach (idx, word; words)\
    \ \n    {\n        if (is_prime(word.length)) \n            res ~= word ~ \" \"\
    ;\n    }\n    res = res.stripRight;\n    return res;\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0o7434le.d(26): Error: found `n` when expecting `.` following int

    /tmp/tmp0o7434le.d(26): Error: found `)` when expecting identifier following `int`.

    /tmp/tmp0o7434le.d(27): Error: found `{` when expecting `,`

    /tmp/tmp0o7434le.d(28): Error: expression expected, not `if`

    /tmp/tmp0o7434le.d(29): Error: found `return` when expecting `,`

    /tmp/tmp0o7434le.d(29): Error: found `;` when expecting `,`

    /tmp/tmp0o7434le.d(30): Error: expression expected, not `for`

    /tmp/tmp0o7434le.d(30): Error: found `i` when expecting `.` following int

    /tmp/tmp0o7434le.d(30): Error: found `=` when expecting identifier following `int`.

    /tmp/tmp0o7434le.d(30): Error: found `2` when expecting `,`

    /tmp/tmp0o7434le.d(30): Error: expression expected, not `;`

    /tmp/tmp0o7434le.d(30): Error: found `i` when expecting `,`

    /tmp/tmp0o7434le.d(30): Error: expression expected, not `<=`

    /tmp/tmp0o7434le.d(30): Error: found `sqrt` when expecting `,`

    /tmp/tmp0o7434le.d(30): Error: found `;` when expecting `,`

    /tmp/tmp0o7434le.d(31): Error: found'
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    import std.algorithm;\n    import std.array;\n    import std.range;\n \
    \   import std.stdio;\n    import std.string;\n    import std.typecons;\n    import\
    \ std.math;\n    auto words = split(sentence);\n    return join(words.filter!(w\
    \ => w.length.isPrime));\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgqappzc9.d(34): Error: no property `isPrime` for type `ulong`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/algorithm/iteration.d(1122):        instantiated
    from here: `FilterResult!(__lambda2, string[])`

    /tmp/tmpgqappzc9.d(34):        instantiated from here: `filter!(string[])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgqappzc9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    // `words` is an array of `std.array.array`s\n    auto words = sentence.split(\"\
    \ \");\n    // `clean_words` is an array of the words whose lengths are prime\
    \ numbers.\n    auto clean_words = words.map!(\n    w => w.length.isPrime()? w\
    \ : \"\");\n    // `words_sentence` is a string.\n    auto words_sentence = clean_words.join(\"\
    \ \");\n    return words_sentence;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwv_6vw3b.d(27): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwv_6vw3b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    import std.algorithm;\n    import std.typecons;\n    import std.math;\n\
    \    import std.array;\n    import std.range;\n    import std.typecons;\n    import\
    \ std.conv;\n    import std.math;\n    import std.bigint;\n    import std.array;\n\
    \    import std.range;\n    import std.typecons;\n    import std.conv;\n    import\
    \ std.math;\n    import std.bigint;\n    auto is_prime = false;\n    string result\
    \ = \"\";\n    auto sentence_splitted = sentence.split(\" \");\n    foreach(word;\
    \ sentence_splitted)\n    {\n        is_prime = word.length > 2 && word.length\
    \ < 100 && !word.any!(a => word.length % a == 0 && a != 1 && a != word.length);\n\
    \        result ~= (is_prime && word.length > 2) ? word + \" \" : \"\";\n    }\n\
    \    return result.trimRight();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp653resa1.d(47): Error: invalid array operation `word + " "` (possible
    missing [])

    /tmp/tmp653resa1.d(49): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp653resa1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    immutable primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    auto words = split(sentence,\
    \ \" \");\n    string prime_words = \"\";\n    for (uint i = 0; i < words.length;\
    \ i++) {\n        if (words[i].length in primes) {\n            prime_words ~=\
    \ words[i] ~ \" \";\n        }\n    }\n    return prime_words;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp56e7kax.d(27): Error: undefined identifier `split`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp56e7kax.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    auto words = split(sentence);\n    string result;\n    foreach(word; words)\
    \ {\n        if(isPrime(word.length)) {\n            result ~= word ~= \" \";\n\
    \        }\n    }\n    return strip(result);\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpigojggzn.d(26): Error: undefined identifier `split`

    /tmp/tmpigojggzn.d(33): Error: undefined identifier `strip`, did you mean alias
    `string`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpigojggzn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n\tstring[] words = sentence.split(\" \");\n\tstring result = \"\";\n\tforeach(word;\
    \ words)\n\t{\n\t\tint count = 0;\n\t\tfor(int i = 1; i <= word.length; i++)\n\
    \t\t{\n\t\t\tif(word.length % i == 0)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\
    }\n\t\tif(count == 2)\n\t\t{\n\t\t\tresult = result ~ word ~ \" \";\n\t\t}\n\t\
    }\n\treturn result.stripRight;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprw4abmil.d(26): Error: no property `split` for type `string`

    /tmp/tmprw4abmil.d(43): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprw4abmil.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string result;\n    string[] words = split(sentence, \" \");\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\"\
    ) == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n\
    \    assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuqz7zaai.d(27): Error: undefined identifier `split`

    /tmp/tmpuqz7zaai.d(30): Error: undefined identifier `isPrime`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuqz7zaai.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    auto words = split(sentence, \" \");\n    auto primes = [](long n) {\n\
    \        enum bool is_prime = true;\n        foreach (i; 2 .. trunc(sqrt(n)) +\
    \ 1) {\n            if (n % i == 0) {\n                is_prime = false;\n   \
    \             break;\n            }\n        }\n        return is_prime;\n   \
    \ };\n    string result = \"\";\n    foreach (word; words) {\n        if (primes(word.length))\
    \ {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7wgnlqq2.d(27): Error: found `n` when expecting `.` following long

    /tmp/tmp7wgnlqq2.d(27): Error: found `)` when expecting identifier following `long`.

    /tmp/tmp7wgnlqq2.d(27): Error: found `{` when expecting `,`

    /tmp/tmp7wgnlqq2.d(28): Error: expression expected, not `enum`

    /tmp/tmp7wgnlqq2.d(28): Error: found `bool` when expecting `,`

    /tmp/tmp7wgnlqq2.d(28): Error: found `;` when expecting `,`

    /tmp/tmp7wgnlqq2.d(29): Error: expression expected, not `foreach`

    /tmp/tmp7wgnlqq2.d(29): Error: found `;` when expecting `,`

    /tmp/tmp7wgnlqq2.d(29): Error: found `..` when expecting `,`

    /tmp/tmp7wgnlqq2.d(29): Error: found `{` when expecting `,`

    /tmp/tmp7wgnlqq2.d(30): Error: expression expected, not `if`

    /tmp/tmp7wgnlqq2.d(30): Error: found `{` when expecting `,`

    /tmp/tmp7wgnlqq2.d(31): Error: found `;` when expecting `,`

    /tmp/tmp7wgnlqq2.d(32): Error: expression expected, not `break`

    /tmp/tmp7wgnlqq2.d(32): Error: found `;` when expecting `,`

    /tmp/tmp7wgnlqq2.d(33): Error: expression expected, not `}`

    /tmp/t'
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    import std.algorithm : filter, map;\n    import std.array : array;\n  \
    \  import std.math : isPrime;\n    import std.range : take;\n    import std.string\
    \ : split;\n    import std.typecons : tuple;\n    \n    immutable string[] words\
    \ = sentence.split(\" \");\n    return words\n            .filter!(w => w.length.isPrime())\n\
    \            .join(\" \");\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnwqnl2t3.d(28): Error: module `std.math` import `isPrime` not found

    /tmp/tmpnwqnl2t3.d(36): Error: no property `join` for type `FilterResult!(__lambda2,
    immutable(string)[])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnwqnl2t3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    // TODO: complete this function\n    return \"\";\n}\nstatic assert(words_in_sentence(\"\
    This is a test\") == \"is\");\nstatic assert(words_in_sentence(\"lets go for swimming\"\
    ) == \"go for\");\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpttahyk6w.d(29): Error: static assert:  `words_in_sentence("This
    is a test") == "is"` is false

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpttahyk6w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string[] result;\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result.join(\" \");\n}\nunittest\n{\n\
    \    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a\
    \ test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go\
    \ for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptu_bc3ex.d(26): Error: undefined identifier `split`

    /tmp/tmptu_bc3ex.d(30): Error: undefined identifier `isPrime`

    /tmp/tmptu_bc3ex.d(35): Error: no property `join` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptu_bc3ex.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    // Store all words in the sentence\n    auto words = split(sentence, \"\
    \ \");\n    // Store the resulting string that contains only words with prime\
    \ length\n    string result = \"\";\n    // For each word in words\n    foreach(index,\
    \ word; words) {\n        // If the length of the word is prime\n        if(isPrime(word.length))\n\
    \            // Add it to the result\n            result ~= word ~ \" \";\n  \
    \  }\n    // Return the result without the trailing space\n    return chomp(result);\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmn0u89mk.d(27): Error: undefined identifier `split`

    /tmp/tmpmn0u89mk.d(38): Error: undefined identifier `chomp`, did you mean template
    `cmp(T)(const(T) x, const(T) y) if (isFloatingPoint!T)`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmn0u89mk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string[] prime_words;\n    string\
    \ output;\n    bool is_prime = true;\n    foreach(word; words)\n    {\n      \
    \  is_prime = true;\n        if(word.length() == 1)\n        {\n            is_prime\
    \ = false;\n        }\n        else\n        {\n            foreach(i; 2..word.length())\n\
    \            {\n                if(word.length() % i == 0)\n                {\n\
    \                    is_prime = false;\n                    break;\n         \
    \       }\n            }\n        }\n        if(is_prime)\n        {\n       \
    \     prime_words ~= word;\n        }\n    }\n    foreach(word; prime_words)\n\
    \    {\n        output ~= word ~ \" \";\n    }\n    output = output.length() ==\
    \ 0 ? \"\" : output[0..$-1];\n    return output;\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpouurmssl.d(26): Error: undefined identifier `split`

    /tmp/tmpouurmssl.d(33): Error: no property `length` for type `string`

    /tmp/tmpouurmssl.d(39): Error: no property `length` for type `string`

    /tmp/tmpouurmssl.d(57): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpouurmssl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string result = \"\";\n    foreach(string\
    \ word; words)\n    {\n        auto length = to!int(word.length);\n        if(isPrime(length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.stripRight;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnlgjj590.d(26): Error: undefined identifier `split`

    /tmp/tmpnlgjj590.d(30): Error: template instance `to!int` template `to` is not
    defined, did you mean No?

    /tmp/tmpnlgjj590.d(31): Error: undefined identifier `isPrime`

    /tmp/tmpnlgjj590.d(36): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnlgjj590.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    return sentence.split()\n        .filter!(i => isPrime(i.length))\n   \
    \     .joiner(\" \");\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9v_92lck.d(26): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9v_92lck.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    import std.algorithm;\n    import std.range;\n    import std.typecons;\n\
    \    import std.math;\n    string[] words = sentence.split;\n    string[] result\
    \ = words.filter!(w => w.length.isPrime()).join(\",\");\n    return result;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfom6wc4k.d(31): Error: no property `isPrime` for type `ulong`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/algorithm/iteration.d(1122):        instantiated
    from here: `FilterResult!(__lambda2, string[])`

    /tmp/tmpfom6wc4k.d(31):        instantiated from here: `filter!(string[])`

    /tmp/tmpfom6wc4k.d(32): Error: cannot implicitly convert expression `result` of
    type `string[]` to `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfom6wc4k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    import std.algorithm : filter, map;\n    import std.array : array;\n  \
    \  import std.range : chain, iota;\n    import std.conv : to;\n    import std.math\
    \ : isPrime;\n    import std.typecons : tuple;\n    import std.stdio : writeln;\n\
    \    \n    auto words = sentence.split();\n    auto filtered = words.filter!(word\
    \ =>\n    {\n        size_t length = word.length;\n        return length != 0\
    \ && length != 1 && isPrime(length);\n    });\n    return filtered.join(\" \"\
    );\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd8jzzdh_.d(30): Error: module `std.math` import `isPrime` not found

    /tmp/tmpd8jzzdh_.d(34): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd8jzzdh_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    auto words = split(sentence, ' ');\n    return join(filter!((w) { return\
    \ w.length.isPrime(); })(words), ' ');\n}\nunittest\n{\n    alias candidate =\
    \ words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd54wousb.d(26): Error: undefined identifier `split`

    /tmp/tmpd54wousb.d(27): Error: undefined identifier `join`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd54wousb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    alias const_array = immutable(string[]);\n    auto is_prime = (int i) {\n\
    \        if (i <= 1) return false;\n        if (i == 2) return true;\n       \
    \ for (int j = 2; j < i; j++)\n            if (i % j == 0) return false;\n   \
    \     return true;\n    };\n    auto to_words = (string str) {\n        const_array\
    \ result;\n        foreach (word; str.split(\" \")) {\n            if (is_prime(word.length))\n\
    \                result ~= word;\n        }\n        return result;\n    };\n\
    \    return to_words(sentence).join(\" \");\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwfmkxa85.d(36): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwfmkxa85.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string [] arr = sentence.split(\" \");\n    string result = \"\";\n   \
    \ foreach(i; 0 .. arr.length)\n    {\n        if(isPrime(arr[i].length))\n   \
    \     {\n            result ~= arr[i] ~ \" \";\n        }\n    }\n    return result.trim();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwqdrqn8n.d(26): Error: no property `split` for type `string`

    /tmp/tmpwqdrqn8n.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpwqdrqn8n.d(35): Error: no property `trim` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwqdrqn8n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    auto nums = filter!(x => isPrime(x.length))(sentence.split);\n    return\
    \ joiner(nums, \" \");\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9xcx1sqy.d(26): Error: template instance `filter!((x) => isPrime(x.length))`
    template `filter` is not defined

    /tmp/tmp9xcx1sqy.d(27): Error: undefined identifier `joiner`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9xcx1sqy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    auto primes = [](int n) \n    {\n        int[] result;\n        for (int\
    \ i = 2; i <= n; i++) \n        {\n            bool is_prime = true;\n       \
    \     for (int j = 2; j < i; j++) \n            {\n                if (i % j ==\
    \ 0) \n                {\n                    is_prime = false;\n            \
    \        break;\n                }\n            }\n            if (is_prime) \n\
    \            {\n                result ~= i;\n            }\n        }\n     \
    \   return result;\n    }\n    auto words = sentence.split(\" \");\n    int[]\
    \ prime_len = primes(20);\n    string res = \"\";\n    foreach (word; words) \n\
    \    {\n        if (prime_len.canFind(word.length)) \n        {\n            res\
    \ ~= word ~ \" \";\n        }\n    }\n    return res.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp49csfkrs.d(26): Error: found `n` when expecting `.` following int

    /tmp/tmp49csfkrs.d(26): Error: found `)` when expecting identifier following `int`.

    /tmp/tmp49csfkrs.d(27): Error: found `{` when expecting `,`

    /tmp/tmp49csfkrs.d(28): Error: found `[` when expecting `.` following int

    /tmp/tmp49csfkrs.d(28): Error: found `]` when expecting identifier following `int`.

    /tmp/tmp49csfkrs.d(28): Error: found `result` when expecting `,`

    /tmp/tmp49csfkrs.d(28): Error: expression expected, not `;`

    /tmp/tmp49csfkrs.d(29): Error: found `for` when expecting `,`

    /tmp/tmp49csfkrs.d(29): Error: found `i` when expecting `.` following int

    /tmp/tmp49csfkrs.d(29): Error: found `=` when expecting identifier following `int`.

    /tmp/tmp49csfkrs.d(29): Error: found `2` when expecting `)`

    /tmp/tmp49csfkrs.d(29): Error: found `;` when expecting `,`

    /tmp/tmp49csfkrs.d(29): Error: found `;` when expecting `,`

    /tmp/tmp49csfkrs.d(30): Error: semicolon expected following auto declaration,
    not `{`

    /tmp/tmp49csfkrs.d(50): Error: declar'
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    int i = 0;\n    string result = \"\";\n    string temp = \"\";\n    auto\
    \ words = new string[sentence.length];\n    for (size_t j = 0; j < sentence.length;\
    \ j++)\n    {\n        words[j] = \"\";\n    }\n    foreach (c; sentence)\n  \
    \  {\n        if (c == ' ')\n        {\n            i++;\n        }\n        else\n\
    \        {\n            words[i] ~= c;\n        }\n    }\n    i++;\n    for (int\
    \ j = 0; j < i; j++)\n    {\n        temp = words[j];\n        int n = temp.length;\n\
    \        bool flag = true;\n        for (int k = 2; k <= n / 2; k++)\n       \
    \ {\n            if (n % k == 0)\n            {\n                flag = false;\n\
    \                break;\n            }\n        }\n        if (flag)\n       \
    \ {\n            result ~= temp ~ \" \";\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc0ss16v7.d(49): Error: cannot implicitly convert expression `temp.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc0ss16v7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    struct is_prime\n    {\n        bool opCall(int i)\n        {\n       \
    \     if (i <= 1)\n                return false;\n            for (int j = 2;\
    \ j <= sqrt(i); j++)\n                if (i % j == 0)\n                    return\
    \ false;\n            return true;\n        }\n    } is_prime;\n    \n    auto\
    \ data = map!(a => a.idup, sentence.split);\n    string result;\n    foreach (word;\
    \ data)\n    {\n        if (is_prime(word.length))\n            result ~= word\
    \ ~ \" \";\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8s_1gokq.d(32): Error: `std.math.sqrt` called with argument types
    `(int)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    /tmp/tmp8s_1gokq.d(37): Error: `is_prime` has no effect

    /tmp/tmp8s_1gokq.d(39): Error: template instance `map!((a) => a.idup, sentence.split)`
    template `map` is not defined

    /tmp/tmp8s_1gokq.d(46): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8s_1gokq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    auto words = split(sentence);\n    return join(filter!(w => isPrime(w.length))(words));\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_txbtj4o.d(26): Error: undefined identifier `split`

    /tmp/tmp_txbtj4o.d(27): Error: undefined identifier `join`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_txbtj4o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence, \" \");\n    string result = \"\";\n \
    \   foreach(word; words)\n    {\n        if(isPrime(word.length))\n        {\n\
    \            if(result.length != 0)\n                result ~= \" \";\n      \
    \      result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a\
    \ test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go\
    \ for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8wawpwjm.d(26): Error: undefined identifier `split`

    /tmp/tmp8wawpwjm.d(30): Error: undefined identifier `isPrime`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8wawpwjm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] splitSentence = split(sentence, \" \");\n    string result = \"\
    \";\n    foreach(i, word; splitSentence)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_l640j73.d(26): Error: undefined identifier `split`

    /tmp/tmp_l640j73.d(30): Error: undefined identifier `isPrime`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_l640j73.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    bool[] is_prime = new bool[sentence.length + 1];\n    is_prime[0] = false;\n\
    \    is_prime[1] = false;\n    is_prime[2] = true;\n    for (int i = 3; i < is_prime.length;\
    \ i++)\n    {\n        if (i % 2 == 0)\n        {\n            is_prime[i] = false;\n\
    \        }\n        else\n        {\n            bool is = true;\n           \
    \ for (int j = 3; j < i / 2; j++)\n            {\n                if (i % j ==\
    \ 0)\n                {\n                    is = false;\n                   \
    \ break;\n                }\n            }\n            is_prime[i] = is;\n  \
    \      }\n    }\n    string result = \"\";\n    foreach (word; sentence.split(\"\
    \ \"))\n    {\n        if (is_prime[word.length])\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.rstrip();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9sf54spc.d(38): Error: no identifier for declarator `bool`

    /tmp/tmp9sf54spc.d(38): Error: `type identifier : specialization` expected following
    `is`

    /tmp/tmp9sf54spc.d(38): Error: found `true` when expecting `;` following statement

    /tmp/tmp9sf54spc.d(38): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmp9sf54spc.d(43): Error: `type identifier : specialization` expected following
    `is`

    /tmp/tmp9sf54spc.d(43): Error: found `false` when expecting `;` following statement

    /tmp/tmp9sf54spc.d(43): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmp9sf54spc.d(47): Error: `type identifier : specialization` expected following
    `is`

    /tmp/tmp9sf54spc.d(48): Error: found `}` when expecting `;` following statement

    /tmp/tmp9sf54spc.d(60): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9sf54spc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    auto words = split(sentence, \" \");\n    bool[] is_prime = new bool[words.length];\n\
    \    foreach (word; words)\n    {\n        is_prime[] = word.length.isPrime;\n\
    \    }\n    string result = filter!((word, b) => b)(words, is_prime).join(\" \"\
    );\n    return result;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphiv92nce.d(26): Error: undefined identifier `split`

    /tmp/tmphiv92nce.d(32): Error: template instance `filter!((word, b) => b)` template
    `filter` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphiv92nce.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string sentenceList[] = sentence.split(\" \");\n    string result = \"\"\
    ;\n    foreach(i, e; sentenceList)\n    {\n        if(isPrime(e.length))\n   \
    \     {\n            result ~= e ~ \" \";\n        }\n    }\n    return result.strip();\n\
    }\n \n/*\n    This function taken from https://stackoverflow.com/questions/12472573/how-to-test-if-a-number-is-prime-or-not-in-d\n\
    */\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa6qzlz58.d(26): Deprecation: instead of C-style syntax, use D-style
    syntax `string[] sentenceList`

    /tmp/tmpa6qzlz58.d(26): Error: no property `split` for type `string`

    /tmp/tmpa6qzlz58.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpa6qzlz58.d(35): Error: no property `strip` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa6qzlz58.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    // convert sentence to array of words\n    auto words = sentence.split;\n\
    \    // create a new string\n    string output;\n    // loop through each word\n\
    \    foreach(word; words)\n    {\n        // check if the length of the word is\
    \ a prime number\n        if(isPrime(word.length))\n        {\n            //\
    \ if it is, add it to the new string\n            output ~= word ~ \" \";\n  \
    \      }\n    }\n    // return new string\n    return output.idup;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn4iejl5d.d(27): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn4iejl5d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    import std.string : split;\n    auto words = sentence.split(\" \");\n \
    \   auto new_sentence = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            new_sentence ~= word ~ \" \";\n        }\n    }\n    return\
    \ new_sentence;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n\
    \    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptaru46cw.d(31): Error: undefined identifier `isPrime`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptaru46cw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string[] result;\n    foreach(word;\
    \ words) {\n        if(isPrime(word.length)) {\n            result ~= word;\n\
    \        }\n    }\n    return join(result, \" \");\n}\n \nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdc4vio3g.d(26): Error: undefined identifier `split`

    /tmp/tmpdc4vio3g.d(29): Error: undefined identifier `isPrime`

    /tmp/tmpdc4vio3g.d(33): Error: undefined identifier `join`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdc4vio3g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    import std.algorithm : filter, map;\n    auto words = sentence.split(\"\
    \ \");\n    auto is_prime = (int n) => n > 1 && !([2 .. n - 1].filter!(j => n\
    \ % j == 0).length);\n    auto primes = words.filter!(word => is_prime(word.length));\n\
    \    return primes.map!(a => a ~ \" \").joiner;\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2tyhq9vt.d(28): Error: found `..` when expecting `,`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2tyhq9vt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    // set of primes\n    int[] primes = [ 2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101 ];\n   \
    \ string result = \"\";\n    // split\n    auto words = sentence.split;\n    foreach(\
    \ word; words )\n    {\n        if( primes.count( word.length ) != 0 )\n     \
    \   {\n            result ~= \" \" ~ word;\n        }\n    }\n    // remove first\
    \ space\n    return result[1..$];\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpks3p4qh7.d(30): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpks3p4qh7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    int[] words = split(sentence);\n    string output = \"\";\n    foreach(\
    \ int i; words )\n    {\n        int len = i.length;\n        if( isPrime(len)\
    \ )\n        {\n            output ~= i ~= \" \";\n        }\n    }\n    return\
    \ output;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppdoes6o6.d(26): Error: undefined identifier `split`

    /tmp/tmppdoes6o6.d(30): Error: no property `length` for type `int`

    /tmp/tmppdoes6o6.d(31): Error: undefined identifier `isPrime`

    /tmp/tmppdoes6o6.d(33): Error: cannot append type `string` to type `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppdoes6o6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n\tstring[] words = sentence.split(\" \");\n\tstring result = \"\";\n\tfor (int\
    \ i = 0; i < words.length; i++)\n\t{\n\t\tint count = 0;\n\t\tint length = words[i].length;\n\
    \t\tfor (int j = 1; j <= length; j++)\n\t\t{\n\t\t\tif (length % j == 0)\n\t\t\
    \t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif (count == 2)\n\t\t{\n\t\t\tresult\
    \ += words[i] + \" \";\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2nhbwty0.d(26): Error: no property `split` for type `string`

    /tmp/tmp2nhbwty0.d(31): Error: cannot implicitly convert expression `words[cast(ulong)i].length`
    of type `ulong` to `int`

    /tmp/tmp2nhbwty0.d(41): Error: invalid array operation `words[cast(ulong)i] +
    " "` (possible missing [])

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2nhbwty0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence, \" \");\n    string result = \"\";\n \
    \   for (int i = 0; i < words.length; i++)\n    {\n        if (isPrime(words[i].length))\n\
    \        {\n            result ~= \" \" ~ words[i];\n        }\n    }\n    return\
    \ result.trim;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n \
    \   assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuei0u_o2.d(26): Error: undefined identifier `split`

    /tmp/tmpuei0u_o2.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpuei0u_o2.d(35): Error: no property `trim` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuei0u_o2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string result;\n    auto words = split(sentence, \" \");\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc1xx93wb.d(27): Error: undefined identifier `split`

    /tmp/tmpc1xx93wb.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc1xx93wb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    /*\n        1. split the sentence by space and store it in a sequence\n\
    \        2. if the length of the word is prime number,\n            then store\
    \ the word in a string\n        3. return the final string\n    */\n    int n\
    \ = sentence.length;\n    string finalString = \"\";\n    string[] splitted =\
    \ sentence.split(\" \");\n    foreach(it; splitted)\n    {\n        if(isPrime(it.length))\n\
    \        {\n            finalString ~= it;\n            finalString ~= \" \";\n\
    \        }\n    }\n    return finalString.idup;\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkdgr0vwq.d(32): Error: cannot implicitly convert expression `sentence.length`
    of type `ulong` to `int`

    /tmp/tmpkdgr0vwq.d(34): Error: no property `split` for type `string`

    /tmp/tmpkdgr0vwq.d(37): Error: undefined identifier `isPrime`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkdgr0vwq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    auto is_prime = [](auto n) -> bool {\n        if (n < 2)\n            return\
    \ false;\n        for (auto i = 2; i < n; ++i)\n            if (n % i == 0)\n\
    \                return false;\n        return true;\n    };\n    auto count_words\
    \ = [](auto c) -> size_t {\n        size_t res = 0;\n        while (c) {\n   \
    \         ++res;\n            c = c & (c - 1);\n        }\n        return res;\n\
    \    };\n    auto sentence_prime_sum = [&](auto sentence) -> size_t {\n      \
    \  size_t res = 0;\n        for (size_t i = 0; i < sentence.length(); ++i)\n \
    \           res += count_words(sentence[i]);\n        return res;\n    };\n  \
    \  size_t pos = 0;\n    size_t prime_sum = 0;\n    size_t prime_start = 0;\n \
    \   size_t prime_end = 0;\n    size_t start = 0;\n    size_t end = 0;\n    for\
    \ (size_t i = 0; i < sentence.length(); ++i) {\n        if (sentence[i] == ' ')\
    \ {\n            if (pos - start == 1) {\n                prime_sum += count_words(sentence[i\
    \ - 1]);\n                prime_end = i - 1;\n            }\n            if (is_prime(pos\
    \ - start)) {\n                if (prime_sum < pos - start) {\n              \
    \      prime_sum = pos - start;\n                    prime_start = start;\n  \
    \                  prime_end = i - 1;\n                }\n            }\n    \
    \        start = i + 1;\n        }\n        ++pos;\n    }\n    if (pos - start\
    \ == 1) {\n        prime_sum += count_words(sentence[pos - 1]);\n        prime_end\
    \ = pos - 1;\n    }\n    if (is_prime(pos - start)) {\n        if (prime_sum <\
    \ pos - start) {\n            prime_sum = pos - start;\n            prime_start\
    \ = start;\n            prime_end = pos - 1;\n        }\n\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvnyu6e08.d(26): Error: expression expected, not `auto`

    /tmp/tmpvnyu6e08.d(26): Error: found `n` when expecting `,`

    /tmp/tmpvnyu6e08.d(26): Error: expression expected, not `>`

    /tmp/tmpvnyu6e08.d(26): Error: semicolon expected following auto declaration,
    not `bool`

    /tmp/tmpvnyu6e08.d(26): Error: no identifier for declarator `bool`

    /tmp/tmpvnyu6e08.d(33): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmpvnyu6e08.d(34): Error: expression expected, not `auto`

    /tmp/tmpvnyu6e08.d(34): Error: found `c` when expecting `,`

    /tmp/tmpvnyu6e08.d(34): Error: expression expected, not `>`

    /tmp/tmpvnyu6e08.d(34): Error: semicolon expected following auto declaration,
    not `size_t`

    /tmp/tmpvnyu6e08.d(34): Error: found `{` when expecting `;` following statement

    /tmp/tmpvnyu6e08.d(42): Error: expression expected, not `]`

    /tmp/tmpvnyu6e08.d(42): Error: expression expected, not `auto`

    /tmp/tmpvnyu6e08.d(42): Error: found `sentence` when expecting `,`

    /tmp/tmpvnyu6e08.d(42): Error: expression expected, not `>`

    /t'
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string[] primes;\n    foreach(string\
    \ word; words)\n    {\n        if(isPrime(word.length))\n            primes ~=\
    \ word;\n    }\n    return join(primes, \" \");\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr9lif9h1.d(26): Error: undefined identifier `split`

    /tmp/tmpr9lif9h1.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpr9lif9h1.d(33): Error: undefined identifier `join`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr9lif9h1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    int[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101];\n    string[] words = sentence.split(\"\
    \ \");\n    string[] result;\n    foreach(word; words)\n    {\n        bool isPrime\
    \ = false;\n        foreach(prime; primes)\n        {\n            if(word.length\
    \ == prime)\n            {\n                isPrime = true;\n                break;\n\
    \            }\n        }\n        if(isPrime)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result.join(\" \");\n}\nunittest\n{\n\
    \    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a\
    \ test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go\
    \ for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvmmwuiue.d(27): Error: no property `split` for type `string`

    /tmp/tmpvmmwuiue.d(45): Error: no property `join` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvmmwuiue.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    bool is_prime(int n) \n    {\n        for (int i = 2; i < n; i++)\n   \
    \         if (n % i == 0)\n                return false;\n        return true;\n\
    \    }\n    string[] words = std.string.split(sentence, \" \");\n    string res\
    \ = \"\";\n    foreach (w; words) \n    {\n        if (is_prime(w.length))\n \
    \           res ~= w ~ \" \";\n    }\n    return res[0..$-1];\n}\nunittest\n{\n\
    \    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a\
    \ test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go\
    \ for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppo60g0tu.d(33): Error: undefined identifier `string` in package
    `std`

    /tmp/tmppo60g0tu.d(37): Error: function `tmppo60g0tu.words_in_sentence.is_prime(int
    n)` is not callable using argument types `(ulong)`

    /tmp/tmppo60g0tu.d(37):        cannot pass argument `w.length` of type `ulong`
    to parameter `int n`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppo60g0tu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    import std.conv : to;\n    import std.range : map, filter, joiner;\n  \
    \  import std.algorithm : only;\n    import std.math : isPrime;\n    return sentence.split(\"\
    \ \")\n                   .filter!(w => w.length.isPrime)\n                  \
    \ .joiner(\" \")\n                   .only;\n}\n \nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcmi9245o.d(27): Error: module `std.range` import `map` not found

    /tmp/tmpcmi9245o.d(27): Error: module `std.range` import `filter` not found, did
    you mean template `std.meta.Filter(alias pred, TList...)`?

    /tmp/tmpcmi9245o.d(27): Error: module `std.range` import `joiner` not found, did
    you mean template `std.array.join(RoR, R)(RoR ror, scope R sep) if (isInputRange!RoR
    && isInputRange!(Unqual!(ElementType!RoR)) && isInputRange!R && is(Unqual!(ElementType!(ElementType!RoR))
    == Unqual!(ElementType!R)))`?

    /tmp/tmpcmi9245o.d(28): Error: module `std.algorithm` import `only` not found

    /tmp/tmpcmi9245o.d(29): Error: module `std.math` import `isPrime` not found

    /tmp/tmpcmi9245o.d(30): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcmi9245o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string result;\n    for (auto word : sentence.split())\n    {\n       \
    \ static int[] primes = generatePrimes!(ushort)();\n        static bool[] isPrime\
    \ = primes.map!(p => true).array;\n        if (isPrime[word.length])\n       \
    \     result ~= (result.length == 0 ? \"\" : \" \") ~ word;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiaszdfm6.d(27): Error: no identifier for declarator `word`

    /tmp/tmpiaszdfm6.d(27): Error: expression expected, not `:`

    /tmp/tmpiaszdfm6.d(27): Error: found `sentence` when expecting `;` following `for`
    condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiaszdfm6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    // TODO: remove this stub and implement the function\n    return \"\";\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpuifc9xaw.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x427fb5]

    ??:? void tmpuifc9xaw.__unittest_L29_C1() [0x427aca]

    ??:? void tmpuifc9xaw.__modtest() [0x427d38]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc5f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab6e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc85]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430134]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc11]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab45]

    ??:? runModuleUnitTests [0x42ba35]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428404]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n\tauto words = split(sentence, \" \");\n\t\n\tstring result;\n\t\n\tforeach(word;\
    \ words)\n\t{\n\t\tint number = to!int(word);\n\t\tif(isPrime(number)) result\
    \ ~= word ~ \" \";\n\t}\n\t\n\treturn result.idup;\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsy4gyc6u.d(26): Error: undefined identifier `split`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsy4gyc6u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    import std.algorithm;\n    import std.range;\n    import std.conv;\n  \
    \  import std.stdio;\n    //import std.math;\n    string[] words = sentence.split;\n\
    unittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_8nz0tzo.d(32): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_8nz0tzo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    immutable PRIMES = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    string[] words = split(sentence);\n\
    \    string res = \"\";\n    foreach(word; words)\n    {\n        if(word.length.canFind(PRIMES))\n\
    \        {\n            res ~= word ~ \" \";\n        }\n    }\n    return res.trim();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6p3s84zc.d(27): Error: undefined identifier `split`

    /tmp/tmp6p3s84zc.d(31): Error: no property `canFind` for type `ulong`

    /tmp/tmp6p3s84zc.d(36): Error: no property `trim` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6p3s84zc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    import std.array;\n    import std.string;\n    import std.math;\n    import\
    \ std.typecons;\n    import std.conv;\n    import std.range;\n    import std.algorithm;\n\
    \    import std.functional;\n    import std.stdio;\n    import std.algorithm;\n\
    \    import std.conv;\n    // \u041F\u043E\u043B\u0443\u0447\u0430\u0435\u043C\
    \ \u0438\u0437 \u0441\u0442\u0440\u043E\u043A\u0438 \u043C\u0430\u0441\u0441\u0438\
    \u0432 \u0441\u043B\u043E\u0432\n    auto arr_str = split(sentence, \" \");\n\
    \    // \u041F\u043E\u043B\u0443\u0447\u0430\u0435\u043C \u0438\u0437 \u043C\u0430\
    \u0441\u0441\u0438\u0432\u0430 \u0441\u043B\u043E\u0432 \u043C\u0430\u0441\u0441\
    \u0438\u0432 \u0434\u043B\u0438\u043D \u0441\u043B\u043E\u0432\n    auto arr_len\
    \ = arr_str.map!(w=>w.length).array;\n    // \u0414\u0435\u043B\u0430\u0435\u043C\
    \ \u043C\u0430\u0441\u0441\u0438\u0432 \u043F\u0440\u043E\u0441\u0442\u044B\u0445\
    \ \u0447\u0438\u0441\u0435\u043B\n    auto pms = iota(2, 10000).filter!(isPrime).array;\n\
    \    // \u0412\u044B\u0431\u0438\u0440\u0430\u0435\u043C \u0438\u0437 \u043C\u0430\
    \u0441\u0441\u0438\u0432\u0430 \u0434\u043B\u0438\u043D \u0441\u043B\u043E\u0432\
    \ \u0442\u0435, \u043A\u043E\u0442\u043E\u0440\u044B\u0435 \u0435\u0441\u0442\u044C\
    \ \u0432 \u043C\u0430\u0441\u0441\u0438\u0432\u0435 \u043F\u0440\u043E\u0441\u0442\
    \u044B\u0445 \u0447\u0438\u0441\u0435\u043B\n    auto ids = arr_len.filter!(a=>pms.canFind(a)).array;\n\
    \    // \u0412\u044B\u0431\u0438\u0440\u0430\u0435\u043C \u0438\u0437 \u043C\u0430\
    \u0441\u0441\u0438\u0432\u0430 \u0441\u043B\u043E\u0432 \u0442\u0435, \u043A\u043E\
    \u0442\u043E\u0440\u044B\u0435 \u0435\u0441\u0442\u044C \u0432 \u043C\u0430\u0441\
    \u0441\u0438\u0432\u0435 \u0438\u043D\u0434\u0435\u043A\u0441\u043E\u0432\n  \
    \  auto arr_res = arr_str.filter!(a=>ids.canFind(a.length)).array;\n    // \u0412\
    \u043E\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043C \u0441\u0442\u0440\u043E\
    \u043A\u0443 \u0438\u0437 \u043C\u0430\u0441\u0441\u0438\u0432\u0430\n    return\
    \ arr_res.joiner(\" \");\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplsmh1d_w.d(42): Error: undefined identifier `isPrime`

    /tmp/tmplsmh1d_w.d(48): Error: cannot implicitly convert expression `joiner(arr_res,
    " ")` of type `Result` to `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplsmh1d_w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    immutable primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    string[] words = split(sentence,\
    \ \" \");\n    string res = \"\";\n    for (size_t i = 0; i < words.length; i++)\
    \ {\n        if (primes.contains(words[i].length)) {\n            res ~= \" \"\
    \ ~ words[i];\n        }\n    }\n    return res[1..$];\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbw73xupe.d(27): Error: undefined identifier `split`

    /tmp/tmpbw73xupe.d(30): Error: no property `contains` for type `immutable(int[])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbw73xupe.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    // List of Prime Numbers less than 100\n    List!(uint) prime_numbers =\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97];\n    string[] words = split(sentence, \" \");\n    string\
    \ res = \"\";\n    foreach(word; words)\n    {\n        if(prime_numbers.canFind(word.length))\n\
    \        {\n            if(res.length == 0)\n                res ~= word;\n  \
    \          else\n                res ~= \" \" ~ word;\n        }\n    }\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwqr2s6kw.d(27): Error: template instance `List!uint` template `List`
    is not defined

    /tmp/tmpwqr2s6kw.d(28): Error: undefined identifier `split`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwqr2s6kw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence, \" \");\n    string result = \"\";\n \
    \   foreach(i, word; words)\n    {\n        if(isPrime(word.length))\n       \
    \ {\n            result ~= \" \" ~ word;\n        }\n    }\n    return result[1..$];\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg0cn0y0w.d(26): Error: undefined identifier `split`

    /tmp/tmpg0cn0y0w.d(30): Error: undefined identifier `isPrime`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg0cn0y0w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    immutable primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    immutable words = split(sentence,\
    \ \" \");\n    auto new_sentence = words.filter!(x => primes.canFind(x.length));\n\
    \    return join(new_sentence, \" \");\n}\nunittest\n{\n    alias candidate =\
    \ words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyeial65y.d(27): Error: undefined identifier `split`

    /tmp/tmpyeial65y.d(29): Error: undefined identifier `join`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyeial65y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    auto words = split(sentence);\n    string result;\n    foreach(word; words)\n\
    \    {\n        if(isPrime(word.length))\n        {\n            result ~= \"\
    \ \" ~ word;\n        }\n    }\n    return result.trim();\n}\nunittest\n{\n  \
    \  alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\"\
    ) == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n\
    \    assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd3sekwru.d(26): Error: undefined identifier `split`

    /tmp/tmpd3sekwru.d(35): Error: no property `trim` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd3sekwru.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    auto words = split(sentence, \" \");\n    auto w2 = filter!((w) => isPrime(w.length)).joiner(\"\
    \ \").join(words);\n    return w2;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmaeug760.d(26): Error: undefined identifier `split`

    /tmp/tmpmaeug760.d(27): Error: template instance `filter!((w) => isPrime(w.length))`
    template `filter` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmaeug760.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence, \" \");\n    string[] result = \"\";\n\
    \    foreach(string word; words)\n    {\n        if(isPrime(word.length))\n  \
    \      {\n            result ~= word;\n        }\n    }\n    return join(result,\
    \ \" \");\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv7uxf1uq.d(26): Error: undefined identifier `split`

    /tmp/tmpv7uxf1uq.d(27): Error: cannot implicitly convert expression `""` of type
    `string` to `string[]`

    /tmp/tmpv7uxf1uq.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpv7uxf1uq.d(35): Error: undefined identifier `join`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv7uxf1uq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    // We split the string sentence into words\n    import std.conv : to;\n\
    \    auto words = sentence.split(\" \");\n    // We iterate through the list of\
    \ words\n    string result;\n    foreach(index, word; words)\n    {\n        //\
    \ We get the number of letter in each word\n        auto word_len = word.length;\n\
    \        // We check if the number of letters is a prime number\n        bool\
    \ prime = true;\n        if(word_len == 1)\n        {\n            prime = false;\n\
    \        }\n        else if(word_len == 2)\n        {\n            prime = true;\n\
    \        }\n        else\n        {\n            foreach(number; 2..word_len-1)\n\
    \            {\n                if(word_len % number == 0)\n                {\n\
    \                    prime = false;\n                    break;\n            \
    \    }\n            }\n        }\n        // If yes we add it to the result string\n\
    \        if(prime)\n        {\n            result ~= word ~ \" \";\n        }\n\
    \    }\n    // We return the result string\n    return result;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplpifnoho.d(28): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplpifnoho.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string result;\n    string[] words = split(sentence, \" \");\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    if(result.length > 0)\n    {\n     \
    \   result = result[0..$-1];\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8xi5s5yo.d(27): Error: undefined identifier `split`

    /tmp/tmp8xi5s5yo.d(30): Error: undefined identifier `isPrime`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8xi5s5yo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    auto words = sentence.split(\" \");\n    string result;\n    foreach(auto\
    \ word; words)\n    {\n        if(isPrime(word.length))\n        {\n         \
    \   result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5gry6mzp.d(28): Error: basic type expected, not `auto`

    /tmp/tmp5gry6mzp.d(28): Error: no identifier for declarator `_error_`

    /tmp/tmp5gry6mzp.d(28): Error: found `auto` when expecting `;`

    /tmp/tmp5gry6mzp.d(28): Error: found `;` when expecting `)`

    /tmp/tmp5gry6mzp.d(28): Error: found `)` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5gry6mzp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    auto words = sentence.split(\" \");\n    auto result = words.filter!(a\
    \ => (a.length isPrime));\n    return result.join(\" \");\n}\nunittest\n{\n  \
    \  alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\"\
    ) == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n\
    \    assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj449s6qu.d(27): Error: found `isPrime` when expecting `)`

    /tmp/tmpj449s6qu.d(27): Error: semicolon expected following auto declaration,
    not `)`

    /tmp/tmpj449s6qu.d(27): Error: found `)` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj449s6qu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    static bool[] is_prime = { false, false, true, true, false, true, false,\
    \ true, false, false, false, true, false, true, false, false, false, true, false,\
    \ true, false, false, false, true, false, false, false, false, false, true, false,\
    \ true, false, false, false, false, false, false, true, false, true, false, false,\
    \ false, false, false, false, false, false, false, true, false, true, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, true,\
    \ false, true, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, true, false, true, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, true, false, true, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, true, false, true, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ true, false, true, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, true,\
    \ false, true, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, true, false, true, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false,\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf7gkw014.d(27): Error: expression expected, not `unittest`

    /tmp/tmpf7gkw014.d(28): Error: comma expected separating field initializers

    /tmp/tmpf7gkw014.d(39): Error: comma expected separating field initializers

    /tmp/tmpf7gkw014.d(39): Error: found `main` when expecting `.` following void

    /tmp/tmpf7gkw014.d(39): Error: found `(` when expecting identifier following `void`.

    /tmp/tmpf7gkw014.d(39): Error: comma expected separating field initializers

    /tmp/tmpf7gkw014.d(39): Error: expression expected, not `)`

    /tmp/tmpf7gkw014.d(39): Error: comma expected separating field initializers

    /tmp/tmpf7gkw014.d(39): Error: found end of file instead of initializer

    /tmp/tmpf7gkw014.d(39): Error: semicolon expected, not `End of File`

    /tmp/tmpf7gkw014.d(39): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf7gkw014.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence, \" \");\n    string result = \"\";\n \
    \   foreach(word; words)\n    {\n        if(word.length.isPrime)\n        {\n\
    \            result ~= word ~ \" \";\n        }\n    }\n    return result.trim;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6vpwx98q.d(26): Error: undefined identifier `split`

    /tmp/tmp6vpwx98q.d(30): Error: no property `isPrime` for type `ulong`

    /tmp/tmp6vpwx98q.d(35): Error: no property `trim` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6vpwx98q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    import std.algorithm : map, filter, joiner;\n    import std.math : isPrime;\n\
    \    import std.typecons : Tuple;\n    import std.range : take;\n    import std.array\
    \ : array;\n    import std.ascii : isAlpha;\n    import std.conv : to;\n    import\
    \ std.regex : split;\n    import std.range : join;\n    import std.iterator :\
    \ filter;\n    auto words = sentence.split(\" \");\n    auto word_pairs = words.map!(word\
    \ => Tuple!(int,string)(word.length, word));\n    auto word_pairs_prime = word_pairs.filter!(pair\
    \ => isPrime(pair[0]));\n    return word_pairs_prime.map!(pair => pair[1]).joiner(\"\
    \ \").array.take(20).join(\" \");\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq8y8iese.d(27): Error: module `std.math` import `isPrime` not found

    /tmp/tmpq8y8iese.d(35): Error: module `iterator` is in file ''std/iterator.d''
    which cannot be read

    import path[0] = /tmp

    import path[1] = /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos

    import path[2] = /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/druntime/import

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq8y8iese.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    immutable words = split(sentence);\n    immutable primes = [2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97];\n    immutable is_prime = unaryFun!(\"isPrimeNumber\")(words);\n  \
    \  immutable select_prime = words.byKey(is_prime);\n    return select_prime.join(\"\
    \ \");\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9976g2oi.d(26): Error: undefined identifier `split`

    /tmp/tmp9976g2oi.d(28): Error: template instance `unaryFun!"isPrimeNumber"` template
    `unaryFun` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9976g2oi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    import std.algorithm : filter, map;\n    import std.range : splitter;\n\
    \    import std.conv : to;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : isPrime;\n    // import std.algorithm : sort;\n    auto words = sentence.splitter(\"\
    \ \");\n    string result;\n    foreach(word; words.filter!(x => x.length.isPrime()).map!(x\
    \ => Tuple!(size_t, string)(x.length, x))) {\n        // result ~= word[1] ~ \"\
    \ \";\n        // result.sort();\n        result ~= word[1] ~ \" \";\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpphj_7598.d(27): Error: module `std.range` import `splitter` not
    found

    /tmp/tmpphj_7598.d(30): Error: module `std.typecons` import `isPrime` not found

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpphj_7598.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    import std.math, std.algorithm, std.array, std.range, std.string;\n   \
    \ string[] words = sentence.split;\n    int[] lengths = words.map!(w => w.length).array;\n\
    \    lengths.retain!(l => isPrime(l));\n    return lengths.map!(l => words[l]).join(\"\
    \ \");\n}\nunittest\n{\n    assert(words_in_sentence(\"This is a test\") == \"\
    is\");\n    assert(words_in_sentence(\"lets go for swimming\") == \"go for\");\n\
    }\n \n \n \n/*\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbua96dqy.d(40): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbua96dqy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string new_sentence = \"\";\n  \
    \  foreach(word; words)\n    {\n        if(is_prime(word.length))\n        {\n\
    \            new_sentence ~= word ~ \" \";\n        }\n    }\n    return new_sentence;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbjz1bjuc.d(26): Error: undefined identifier `split`

    /tmp/tmpbjz1bjuc.d(30): Error: undefined identifier `is_prime`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbjz1bjuc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence, \" \");\n    string[] result;\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result.length ? join(result, \" \") :\
    \ null;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp70hi9peo.d(26): Error: undefined identifier `split`

    /tmp/tmp70hi9peo.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp70hi9peo.d(35): Error: undefined identifier `join`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp70hi9peo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence, \" \");\n    string[] primes = filter!((in\
    \ word) { return word.length.isPrime; })(words);\n    return join(primes, \" \"\
    );\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp87lao0_i.d(26): Error: undefined identifier `split`

    /tmp/tmp87lao0_i.d(27): Error: template instance `filter!((in word)

    {

    return word.length.isPrime;

    }

    )` template `filter` is not defined

    /tmp/tmp87lao0_i.d(28): Error: undefined identifier `join`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp87lao0_i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence, \" \");\n    string res = \"\";\n    foreach(elem;\
    \ words) {\n        if(isPrime(elem.length)) {\n            res ~= elem ~ \" \"\
    ;\n        }\n    }\n    return res.stripRight;\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3e9eg6ka.d(26): Error: undefined identifier `split`

    /tmp/tmp3e9eg6ka.d(29): Error: undefined identifier `isPrime`

    /tmp/tmp3e9eg6ka.d(33): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3e9eg6ka.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string new_str;\n    auto w = split(sentence, \" \");\n    int l;\n   \
    \ // iterate over words\n    foreach(w_elem; w)\n    {\n        l = w_elem.length;\n\
    \        bool isPrime = true;\n        // iterate over numbers\n        foreach(n;\
    \ 2..l)\n        {\n            if(l % n == 0)\n            {\n              \
    \  isPrime = false;\n                break;\n            }\n        }\n      \
    \  if(isPrime)\n        {\n            new_str ~= \" \" ~ w_elem;\n        }\n\
    \    }\n    return new_str.strip;\n}\n/*\n    Title: Maximum number of non-overlapping\
    \ segments\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps2izrsmg.d(50): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps2izrsmg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    int[] sentences = split(sentence, \" \");\n    string prime_words;\n  \
    \  foreach(sentence; sentences)\n    {\n        if(isPrime(sentence.length))\n\
    \        {\n            writeln(sentence);\n            prime_words ~= sentence\
    \ ~ \" \";\n        }\n    }\n    return prime_words.stripRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpphfcoxfk.d(26): Error: undefined identifier `split`

    /tmp/tmpphfcoxfk.d(28): Error: variable `sentence` is shadowing variable `tmpphfcoxfk.words_in_sentence.sentence`

    /tmp/tmpphfcoxfk.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpphfcoxfk.d(32): Error: `writeln` is not defined, perhaps `import std.stdio;`
    is needed?

    /tmp/tmpphfcoxfk.d(33): Error: incompatible types for `(sentence) ~ (" ")`: `int`
    and `string`

    /tmp/tmpphfcoxfk.d(36): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpphfcoxfk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string result = \"\";\n    string[] words = split(sentence, \" \");\n \
    \   foreach(word; words)\n    {\n        if(isPrime(word.length))\n        {\n\
    \            if(result.length == 0)\n                result = word;\n        \
    \    else\n                result ~= \" \" ~ word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe2fby6t_.d(27): Error: undefined identifier `split`

    /tmp/tmpe2fby6t_.d(30): Error: undefined identifier `isPrime`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe2fby6t_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    auto words = split(sentence);\n    string result;\n    foreach( word; words\
    \ )\n    {\n        if(isPrime(word.length))\n        {\n            result ~=\
    \ word ~ \" \";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp30_hrlg_.d(26): Error: undefined identifier `split`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp30_hrlg_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    import std.conv : to;\n    import std.algorithm : filter, map;\n    import\
    \ std.math : isPrime;\n    import std.typecons : tuple;\n    import std.range\
    \ : zip;\n    auto words = sentence.split(\" \");\n    auto wordLengths = words.map!(w\
    \ => w.length);\n    auto isNotPrime = wordLengths.filter!(l => !isPrime(l));\n\
    \    auto primeLengths = wordLengths.filter!(l => isPrime(l));\n    auto indices\
    \ = isNotPrime.map!(l => wordLengths.indexOf(l));\n    return words.zip(wordLengths).filter!(t\
    \ => !isNotPrime.canFind(t[1])).map!(t => t[0]).joiner(\" \");\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7i5roubt.d(28): Error: module `std.math` import `isPrime` not found

    /tmp/tmp7i5roubt.d(31): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7i5roubt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    bool[] is_prime = false;\n    is_prime[2] = true;\n    is_prime[3] = true;\n\
    \    is_prime[5] = true;\n    is_prime[7] = true;\n    is_prime[11] = true;\n\
    \    is_prime[13] = true;\n    is_prime[17] = true;\n    is_prime[19] = true;\n\
    \    is_prime[23] = true;\n    is_prime[29] = true;\n    is_prime[31] = true;\n\
    \    is_prime[37] = true;\n    is_prime[41] = true;\n    is_prime[43] = true;\n\
    \    is_prime[47] = true;\n    is_prime[53] = true;\n    is_prime[59] = true;\n\
    \    is_prime[61] = true;\n    is_prime[67] = true;\n    is_prime[71] = true;\n\
    \    is_prime[73] = true;\n    is_prime[79] = true;\n    is_prime[83] = true;\n\
    \    is_prime[89] = true;\n    is_prime[97] = true;\n    is_prime[101] = true;\n\
    \    is_prime[103] = true;\n    is_prime[107] = true;\n    is_prime[109] = true;\n\
    \    is_prime[113] = true;\n    is_prime[127] = true;\n    is_prime[131] = true;\n\
    \    is_prime[137] = true;\n    is_prime[139] = true;\n    is_prime[149] = true;\n\
    \    is_prime[151] = true;\n    is_prime[157] = true;\n    is_prime[163] = true;\n\
    \    is_prime[167] = true;\n    is_prime[173] = true;\n    is_prime[179] = true;\n\
    \    is_prime[181] = true;\n    is_prime[191] = true;\n    is_prime[193] = true;\n\
    \    is_prime[197] = true;\n    is_prime\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwxuiwjqe.d(73): Error: found `unittest` when expecting `;` following
    statement

    /tmp/tmpwxuiwjqe.d(85): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwxuiwjqe.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence, \" \");\n    string prime = \"\";\n  \
    \  foreach(word; words)\n    {\n        word = word.strip;\n        if(isPrime(word.length))\n\
    \        {\n            prime ~= \" \" ~ word;\n        }\n    }\n    return prime.strip;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpztvi3zi7.d(26): Error: undefined identifier `split`

    /tmp/tmpztvi3zi7.d(30): Error: no property `strip` for type `string`

    /tmp/tmpztvi3zi7.d(31): Error: undefined identifier `isPrime`

    /tmp/tmpztvi3zi7.d(36): Error: no property `strip` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpztvi3zi7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    // Check if empty\n    if (sentence.empty)\n        return \"\";\n    \n\
    \    // Split words\n    auto words = split(sentence, \" \");\n    \n    // Build\
    \ result using isPrime\n    string result;\n    for (size_t i = 0; i < words.length;\
    \ i++)\n    {\n        auto word = words[i];\n        if (isPrime(word.length))\n\
    \        {\n            result ~= word;\n            if (i < words.length - 1)\n\
    \                result ~= \" \";\n        }\n    }\n    \n    return result;\n\
    }\n```\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb_1gzmye.d(48): Error: declaration expected, not `""`

    /tmp/tmpb_1gzmye.d(48): Error: unterminated string constant starting at /tmp/tmpb_1gzmye.d(48)

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb_1gzmye.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string [] words = split(sentence, \" \");\n    string result = \"\";\n\
    \    foreach(i, word; words)\n    {\n        if(isPrime(word.length))\n      \
    \  {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcrzh59pt.d(26): Error: undefined identifier `split`

    /tmp/tmpcrzh59pt.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpcrzh59pt.d(35): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcrzh59pt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n  /* Your code goes here */\n  /*\n  enum is_prime(int i) = i < 2 ? false :\
    \ !iota(2, i).any!(i % _ == 0);\n  */\n  string[] result = new string[0];\n  string[]\
    \ words = split(sentence, \" \");\n  foreach(word; words)\n  {\n    if(is_prime(word.length))\n\
    \    {\n      result ~= word;\n    }\n  }\n  return join(result, \" \");\n}\n\
    unittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0x_ykr44.d(31): Error: undefined identifier `split`

    /tmp/tmp0x_ykr44.d(34): Error: undefined identifier `is_prime`

    /tmp/tmp0x_ykr44.d(39): Error: undefined identifier `join`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0x_ykr44.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    const int limit = 10000;\n    immutable is_prime = new bool[limit];\n \
    \   immutable is_prime[] = [false, false] ~ [true, true].repeat;\n    foreach\
    \ (i; 2 .. limit)\n    {\n        if (is_prime[i])\n        {\n            foreach\
    \ (j; i * i .. limit by i)\n            {\n                is_prime[j] = false;\n\
    \            }\n        }\n    }\n    string words[];\n    foreach (word; sentence.split(\"\
    \ \"))\n    {\n        if (is_prime[word.length])\n        {\n            words\
    \ ~= word;\n        }\n    }\n    return words.join(\" \");\n}\nunittest\n{\n\
    \    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a\
    \ test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go\
    \ for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx4vfh25a.d(28): Error: no identifier for declarator `is_prime[]`

    /tmp/tmpx4vfh25a.d(28): Error: found `=` instead of statement

    /tmp/tmpx4vfh25a.d(33): Error: found `by` when expecting `)`

    /tmp/tmpx4vfh25a.d(33): Error: found `)` when expecting `;` following statement

    /tmp/tmpx4vfh25a.d(39): Deprecation: instead of C-style syntax, use D-style syntax
    `string[] words`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx4vfh25a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    // write your solution here...\n    string words[];\n    split(sentence,\
    \ \" \", words);\n    string res = \"\";\n    foreach(a; words)\n    {\n     \
    \   if(isPrime(a.length))\n        {\n            res ~= a ~ \" \";\n        }\n\
    \    }\n    res = res.trimRight();\n    return res;\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_m7i7guf.d(27): Deprecation: instead of C-style syntax, use D-style
    syntax `string[] words`

    /tmp/tmp_m7i7guf.d(28): Error: undefined identifier `split`

    /tmp/tmp_m7i7guf.d(32): Error: undefined identifier `isPrime`

    /tmp/tmp_m7i7guf.d(37): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_m7i7guf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    import std.algorithm;\n    import std.array;\n    import std.conv;\n  \
    \  import std.math;\n    import std.range;\n    import std.typecons;\n    import\
    \ std.typecons : tuple;\n    import std.range : chunkBy;\n    import std.algorithm\
    \ : filter;\n    import std.array : array;\n    import std.math : isPrime;\n \
    \   import std.string : splitter;\n    import std.string : to;\n    import std.functional\
    \ : bind;\n    import std.stdio : writefln;\n    import std.algorithm : map;\n\
    \    import std.array : array;\n    import std.string : join;\n    import std.conv\
    \ : to;\n    import std.range : filter;\n    import std.algorithm : map;\n   \
    \ import std.algorithm : filter;\n    import std.algorithm : map;\n    import\
    \ std.algorithm : filter;\n    import std.algorithm : joiner;\n    import std.range\
    \ : filter;\n    import std.array : array;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.algorithm : joiner;\n    import\
    \ std.string : join;\n    import std.algorithm : map;\n    import std.range :\
    \ filter;\n    import std.typecons : tuple;\n    import std.algorithm : joiner;\n\
    \    import std.algorithm : joiner;\n    import std.algorithm : map;\n    import\
    \ std.range : filter;\n    import std.algorithm : joiner;\n    import std.algorithm\
    \ : map;\n    import std.range : filter;\n    import std.algorithm : joiner;\n\
    \    import std.algorithm : map;\n    import std.range : filter;\n    import std.algorithm\
    \ : joiner;\n    import std.algorithm : map;\n    import std.range : filter;\n\
    \    import std.algorithm : joiner;\n    import std.algorithm : map;\n    import\
    \ std.range : filter;\n    import std.algorithm : joiner;\n    import std.algorithm\
    \ : map;\n    import std.range : filter;\n   \nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc5sezzt_.d(80): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc5sezzt_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string res;\n    string[] words = sentence.split(\" \");\n    foreach(string\
    \ word; words)\n    {\n        if(isPrime(word.length))\n        {\n         \
    \   res ~= word ~ \" \";\n        }\n    }\n    return res.idup.strip;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnquz7f5j.d(27): Error: no property `split` for type `string`

    /tmp/tmpnquz7f5j.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpnquz7f5j.d(35): Error: no property `strip` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnquz7f5j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    if(sentence.length <= 1)\n        return \"\";\n    import std.algorithm;\n\
    \    import std.array;\n    import std.conv;\n    import std.range;\n    import\
    \ std.math;\n    auto words = sentence.split(\" \");\n    auto new_words = words.filter!(word\
    \ => word.length.isPrime).array;\n    return new_words.join(\" \");\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz17kpdjk.d(34): Error: no property `isPrime` for type `ulong`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/algorithm/iteration.d(1122):        instantiated
    from here: `FilterResult!(__lambda2, string[])`

    /tmp/tmpz17kpdjk.d(34):        instantiated from here: `filter!(string[])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz17kpdjk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    // 1. create an immutable string array \n    immutable(string) strings\
    \ = split(sentence, \" \");\n    // 2. create an empty string \n    string res\
    \ = \"\";\n    // 3. iterate over the strings\n    foreach(s; strings) \n    {\n\
    \        // 4. append prime length words to the empty string\n        if(isPrime(s.length))\
    \ \n        {\n            res ~= s ~ \" \";\n        }\n    }\n    // 5. trim\
    \ the empty space at the end of the result string\n    return trim(res);\n}\n\
    unittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmuzkiprr.d(27): Error: undefined identifier `split`

    /tmp/tmpmuzkiprr.d(34): Error: undefined identifier `isPrime`

    /tmp/tmpmuzkiprr.d(40): Error: undefined identifier `trim`, did you mean function
    `fdim`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmuzkiprr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n  auto res = \"\";\n  auto words = split(sentence, \" \");\n  foreach(word;\
    \ words)\n  {\n    if(isPrime(word.length))\n      res ~= word ~ \" \";\n  }\n\
    \  return res.stripRight;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiiz_fsu2.d(27): Error: undefined identifier `split`

    /tmp/tmpiiz_fsu2.d(33): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiiz_fsu2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string result;\n    string[] words = split(sentence);\n    foreach(immutable\
    \ word; words)\n    {\n        if(word.length.isPrime)\n        {\n          \
    \  if(result.length > 0)\n                result ~= \" \";\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptxc9owys.d(27): Error: undefined identifier `split`

    /tmp/tmptxc9owys.d(30): Error: no property `isPrime` for type `ulong`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptxc9owys.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    // std.array.join doesn't allow empty separator.\n    static struct Empty\
    \ {} empty;\n    static auto separator = typeof(empty).init;\n    \n    import\
    \ std.algorithm : filter, map;\n    import std.array : join;\n    import std.math\
    \ : isPrime;\n    import std.range : until;\n    import std.string : split;\n\
    \    \n    string[] words = sentence.split(\" \");\n    auto is_prime = (int w)\
    \ => w.isPrime;\n    return words.map!(a => a.length).filter!is_prime\n      \
    \  .map!(a => words[a]).join(separator);\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg24w_yzr.d(27): Error: undefined identifier `empty`, did you mean
    struct `Empty`?

    /tmp/tmpg24w_yzr.d(28): Error: undefined identifier `empty`, did you mean struct
    `Empty`?

    /tmp/tmpg24w_yzr.d(32): Error: module `std.math` import `isPrime` not found

    /tmp/tmpg24w_yzr.d(33): Error: module `std.range` import `until` not found

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg24w_yzr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    // Creates an array of primes between 0 and 100 inclusive\n    int[] primes\
    \ = generatePrimes();\n    string[] words = sentence.split(\" \");\n    string\
    \ result = \"\";\n    foreach(string word; words)\n    {\n        if(word.length\
    \ in primes)\n        {\n            result ~= word ~ \" \";\n        }\n    }\n\
    \    return result.stripRight;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptc88kpi7.d(27): Error: undefined identifier `generatePrimes`

    /tmp/tmptc88kpi7.d(28): Error: no property `split` for type `string`

    /tmp/tmptc88kpi7.d(32): Error: incompatible types for `(word.length) in (primes)`:
    `ulong` and `int[]`

    /tmp/tmptc88kpi7.d(37): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptc88kpi7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    bool[] all_primes = new bool[(uint)sentence.length + 1];\n    all_primes[0]\
    \ = false;\n    all_primes[1] = false;\n    foreach (i; 2..sentence.length) {\n\
    \        all_primes[i] = true;\n    }\n    foreach (i; 2..isqrt(sentence.length))\
    \ {\n        foreach (j; i..sentence.length) {\n            if (j % i == 0) {\n\
    \                all_primes[j] = false;\n            }\n        }\n    }\n   \
    \ string[] words = sentence.split(\" \");\n    string output;\n    foreach (word;\
    \ words) {\n        if (all_primes[word.length]) {\n            output ~= word\
    \ ~ \" \";\n        }\n    }\n    return output;\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyocvqrtz.d(26): Error: C style cast illegal, use `cast(uint)sentence.length`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyocvqrtz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    // Write your code here\n    enum is_prime = (int n) \n    {\n        for\
    \ (int i = 2; i < n; i++)\n            if (n % i == 0)\n                return\
    \ false;\n        return true;\n    };\n    return join(filter!(is_prime)(map!(a\
    \ => a.length)(split(sentence, \" \"))), \" \");\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpugtg6w6t.d(34): Error: undefined identifier `join`, did you mean
    function `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpugtg6w6t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence);\n    string res = \"\";\n    foreach(i,\
    \ word; words)\n    {\n        if(isPrime(word.length))\n        {\n         \
    \   res ~= word ~ \" \";\n        }\n    }\n    return trim(res);\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe_ae08zd.d(26): Error: undefined identifier `split`

    /tmp/tmpe_ae08zd.d(30): Error: undefined identifier `isPrime`

    /tmp/tmpe_ae08zd.d(35): Error: undefined identifier `trim`, did you mean function
    `fdim`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe_ae08zd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = sentence.split(\" \");\n    string result = \"\";\n  \
    \  bool[] is_prime = new bool[100];\n    is_prime[] = true;\n    is_prime[0] =\
    \ false;\n    is_prime[1] = false;\n    for (int i = 2; i < 100; i++)\n    {\n\
    \        for (int j = 2; j < (i / 2); j++)\n        {\n            if (i % j ==\
    \ 0)\n            {\n                is_prime[i] = false;\n                break;\n\
    \            }\n        }\n    }\n    foreach (word; words)\n    {\n        if\
    \ (is_prime[word.length])\n        {\n            result ~= word ~ \" \";\n  \
    \      }\n    }\n    return result.trim();\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp44kppjr6.d(26): Error: no property `split` for type `string`

    /tmp/tmp44kppjr6.d(50): Error: no property `trim` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp44kppjr6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence, \" \");\n    int[] lengths = map!(x =>\
    \ x.length)(words);\n    bool[] is_prime = map!(x => isPrime(x))(lengths);\n \
    \   return join(map!(x => x[0])(filter!(x => x[1])(zip(words, is_prime))));\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq_q_peek.d(26): Error: undefined identifier `split`

    /tmp/tmpq_q_peek.d(27): Error: template instance `map!((x) => x.length)` template
    `map` is not defined

    /tmp/tmpq_q_peek.d(28): Error: template instance `map!((x) => isPrime(x))` template
    `map` is not defined

    /tmp/tmpq_q_peek.d(29): Error: undefined identifier `join`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq_q_peek.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    auto words = split(sentence);\n    auto result = filter!(s => isPrime(s.length))(words);\n\
    \    return join(result, \" \");\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2ov7v3ku.d(26): Error: undefined identifier `split`

    /tmp/tmp2ov7v3ku.d(27): Error: template instance `filter!((s) => isPrime(s.length))`
    template `filter` is not defined

    /tmp/tmp2ov7v3ku.d(28): Error: undefined identifier `join`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2ov7v3ku.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    bool is_prime(size_t n)\n    {\n        if (n < 2) return false;\n    \
    \    if (n == 2) return true;\n        if (n % 2 == 0) return false;\n       \
    \ for (size_t i = 3; i <= sqrt(n); i += 2)\n        {\n            if (n % i ==\
    \ 0)\n                return false;\n        }\n        return true;\n    }\n\
    \    string results;\n    string temp;\n    foreach (c; sentence)\n    {\n   \
    \     if (c == ' ')\n        {\n            if (is_prime(temp.length))\n     \
    \       {\n                results ~= temp ~ ' ';\n            }\n           \
    \ temp = \"\";\n        }\n        else\n        {\n            temp ~= c;\n \
    \       }\n    }\n    if (is_prime(temp.length))\n    {\n        results ~= temp;\n\
    \    }\n    return results;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp520hni3m.d(31): Error: `std.math.sqrt` called with argument types
    `(ulong)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp520hni3m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    import std.conv : to;\n    import std.array : join, array;\n    import\
    \ std.string : split;\n    import std.range : isPrime;\n    import std.algorithm\
    \ : filter;\n    string[] words = sentence.split(\" \");\n    bool[] candidates\
    \ = words.map!(word => word.length.isPrime).array;\n    return candidates.filter!(candidate\
    \ => candidate).join(\" \");\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0z2om9uz.d(29): Error: module `std.range` import `isPrime` not
    found

    /tmp/tmp0z2om9uz.d(32): Error: no property `map` for type `string[]`

    /tmp/tmp0z2om9uz.d(33): Error: template `std.array.join` cannot deduce function
    from argument types `!()(FilterResult!(__lambda2, bool[]), string)`, candidates
    are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/array.d(1706):        `std.array.join(RoR,
    R)(RoR ror, scope R sep) if (isInputRange!RoR && isInputRange!(Unqual!(ElementType!RoR))
    && isInputRange!R && is(Unqual!(ElementType!(ElementType!RoR)) == Unqual!(ElementType!R)))`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/array.d(1783):        `std.array.join(RoR,
    E)(RoR ror, scope E sep) if (isInputRange!RoR && isInputRange!(Unqual!(ElementType!RoR))
    && is(E : ElementType!(ElementType!RoR)))`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/array.d(1870):        `std.array.join(RoR)(RoR
    ror) if (isInputRange!RoR && isInputRange!(Unqual!(ElementType!RoR)))`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0z2om9uz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string[] words = split(sentence, \" \");\n    string[] prime_words;\n \
    \   foreach(word; words)\n    {\n        if(isPrime(word.length))\n        {\n\
    \            prime_words ~= word;\n        }\n    }\n    return join(prime_words,\
    \ \" \");\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph0sgktat.d(26): Error: undefined identifier `split`

    /tmp/tmph0sgktat.d(30): Error: undefined identifier `isPrime`

    /tmp/tmph0sgktat.d(35): Error: undefined identifier `join`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph0sgktat.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    import std.array;\n    import std.range;\n    import std.conv;\n    auto\
    \ words = sentence.split(\" \");\n    string new_sentence = \"\";\n    bool isPrime(int\
    \ n)\n    {\n        if (n <= 1)\n            return false;\n        if (n <=\
    \ 3)\n            return true;\n        if (n % 2 == 0 || n % 3 == 0)\n      \
    \      return false;\n        for (int i = 5; i * i <= n; i = i + 6)\n       \
    \     if (n % i == 0 || n % (i + 2) == 0)\n                return false;\n   \
    \     return true;\n    }\n    foreach(i, word; words)\n    {\n        if (isPrime(word.length))\n\
    \        {\n            new_sentence = new_sentence ~ \" \" ~ word;\n        }\n\
    \    }\n    return new_sentence.trim;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphppcoolp.d(46): Error: function `tmphppcoolp.words_in_sentence.isPrime(int
    n)` is not callable using argument types `(ulong)`

    /tmp/tmphppcoolp.d(46):        cannot pass argument `word.length` of type `ulong`
    to parameter `int n`

    /tmp/tmphppcoolp.d(51): Error: no property `trim` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphppcoolp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    import std.algorithm;\n    import std.range;\n    import std.string;\n\
    \    import std.conv;\n    import std.typecons;\n    import std.math;\n    import\
    \ std.traits;\n    import std.typetuple;\n    static bool isPrime(int n) \n  \
    \  {\n        if (n <= 1)\n            return false;\n        for (int i = 2;\
    \ i <= n / 2; i++)\n            if (n % i == 0)\n                return false;\n\
    \        return true;\n    }\n    string[] words = sentence.split(\" \");\n  \
    \  words.retain!(w => isPrime(w.length));\n    return words.join(\" \");\n}\n\
    unittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdnby6ugm.d(44): Error: no property `retain` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdnby6ugm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example\
    \ 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n  \
    \  \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence\
    \ contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n\
    {\n    string result = \"\";\n    string[] words = split(sentence, \" \");\n \
    \   foreach(string word; words) {\n        if(isPrime(word.length)) {\n      \
    \      result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw3nqzgdy.d(27): Error: undefined identifier `split`

    /tmp/tmpw3nqzgdy.d(29): Error: undefined identifier `isPrime`

    /tmp/tmpw3nqzgdy.d(33): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw3nqzgdy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163956
