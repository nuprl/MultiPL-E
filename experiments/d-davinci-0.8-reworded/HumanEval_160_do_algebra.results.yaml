language: d
name: HumanEval_160_do_algebra
results:
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n        {\n            result\
    \ += operand[i+1];\n        }\n        else if (operator[i] == \"-\")\n      \
    \  {\n            result -= operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"*\")\n        {\n            result *= operand[i+1];\n        }\n     \
    \   else if (operator[i] == \"//\")\n        {\n            result /= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"**\")\n        {\n            result\
    \ = pow(result, operand[i+1]);\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp2waybrmc.d(61): unittest failure\n----------------\n??:?
    _d_unittestp [0x4291ed]\n??:? void tmp2waybrmc.__unittest_L56_C1() [0x42826d]\n??:?
    void tmp2waybrmc.__modtest() [0x428458]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dd43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428f46]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a9e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa78]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42a975]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x428f1d]\n??:? runModuleUnitTests [0x42db19]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4296b0]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x429637]\n??:? _d_run_main [0x4295a2]\n??:? main [0x42846b]\n??:?
    __libc_start_main [0x2ab25554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n  /*\n    Assume operator contains valid values\n    Assume operand\
    \ contains valid values\n    Assume length of operator is equal to the length\
    \ of operand minus one.\n  */\n  // storing result at the first value of operand\n\
    \  // do operation with each operator\n  // return result stored at first index\
    \ of operand\n  foreach(i, o; operator)\n  {\n    switch(o)\n    {\n      case\
    \ \"+\":\n        operand[0] += operand[i+1];\n        break;\n      case \"-\"\
    :\n        operand[0] -= operand[i+1];\n        break;\n      case \"*\":\n  \
    \      operand[0] *= operand[i+1];\n        break;\n      case \"//\":\n     \
    \   operand[0] /= operand[i+1];\n        break;\n      case \"**\":\n        operand[0]\
    \ = long(pow(double(operand[0]), double(operand[i+1])));\n        break;\n   \
    \ }\n  }\n  return operand[0];\n}\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplg3o55hm.d(55): Error: cannot implicitly convert expression
    `pow(cast(double)operand[0], cast(double)operand[i + 1LU])` of type `double` to
    `long`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplg3o55hm.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (size_t i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                result += operand[i + 1];\n                break;\n       \
    \     case \"-\":\n                result -= operand[i + 1];\n               \
    \ break;\n            case \"*\":\n                result *= operand[i + 1];\n\
    \                break;\n            case \"//\":\n                result /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                result\
    \ = pow(result, operand[i + 1]);\n                break;\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpd0xivamg.d(33): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd0xivamg.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long num = operand[0];\n    foreach(int i, string j; operator)\n\
    \    {\n        if(j == \"+\")\n            num += operand[i+1];\n        else\
    \ if(j == \"-\")\n            num -= operand[i+1];\n        else if(j == \"*\"\
    )\n            num *= operand[i+1];\n        else if(j == \"//\")\n          \
    \  num /= operand[i+1];\n        else if(j == \"**\")\n            num = pow(num,\
    \ operand[i+1]);\n    }\n    return num;\n}\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpxtu3khs1.d(51): unittest failure\n----------------\n??:?
    _d_unittestp [0x429175]\n??:? void tmpxtu3khs1.__unittest_L46_C1() [0x4281f5]\n??:?
    void tmpxtu3khs1.__modtest() [0x4283e0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dccb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428ece]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a971]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa00]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42a8fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x428ea5]\n??:? runModuleUnitTests [0x42daa1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429638]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4295bf]\n??:? _d_run_main [0x42952a]\n??:? main [0x4283f3]\n??:?
    __libc_start_main [0x270cf554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    auto result = operand[0];\n    for (size_t i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n            result += operand[i\
    \ + 1];\n        else if (operator[i] == \"-\")\n            result -= operand[i\
    \ + 1];\n        else if (operator[i] == \"*\")\n            result *= operand[i\
    \ + 1];\n        else if (operator[i] == \"//\")\n            result /= operand[i\
    \ + 1];\n        else if (operator[i] == \"**\")\n            result = (long)pow(result,\
    \ operand[i + 1]);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpn83bh37s.d(42): Error: C style cast illegal, use `cast(long)pow(result,
    operand[i + 1])`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn83bh37s.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                result += operand[i + 1];\n                break;\n       \
    \     case \"-\":\n                result -= operand[i + 1];\n               \
    \ break;\n            case \"*\":\n                result *= operand[i + 1];\n\
    \                break;\n            case \"//\":\n                result /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                result\
    \ = (long)pow(result, operand[i + 1]);\n                break;\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n\
    \    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n   \
    \ assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5gpodadz.d(48): Error: C style cast illegal, use `cast(long)pow(result,
    operand[i + 1])`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5gpodadz.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++) {\n        if (operator[i] == \"+\") {\n            result += operand[i\
    \ + 1];\n        } else if (operator[i] == \"-\") {\n            result -= operand[i\
    \ + 1];\n        } else if (operator[i] == \"*\") {\n            result *= operand[i\
    \ + 1];\n        } else if (operator[i] == \"//\") {\n            result /= operand[i\
    \ + 1];\n        } else if (operator[i] == \"**\") {\n            result = long(pow(result,\
    \ operand[i + 1]));\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"\
    ], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L,\
    \ 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) ==\
    \ 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpfkp3bfo0.d(51): unittest failure\n----------------\n??:?
    _d_unittestp [0x4291ed]\n??:? void tmpfkp3bfo0.__unittest_L46_C1() [0x42826d]\n??:?
    void tmpfkp3bfo0.__modtest() [0x428458]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dd43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428f46]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a9e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa78]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42a975]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x428f1d]\n??:? runModuleUnitTests [0x42db19]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4296b0]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x429637]\n??:? _d_run_main [0x4295a2]\n??:? main [0x42846b]\n??:?
    __libc_start_main [0x5f015554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                result += operand[i + 1];\n                break;\n       \
    \     case \"-\":\n                result -= operand[i + 1];\n               \
    \ break;\n            case \"*\":\n                result *= operand[i + 1];\n\
    \                break;\n            case \"//\":\n                result /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                result\
    \ = pow(result, operand[i + 1]);\n                break;\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1p1ptf1l.d(33): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1p1ptf1l.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                result += operand[i + 1];\n                break;\n       \
    \     case \"-\":\n                result -= operand[i + 1];\n               \
    \ break;\n            case \"*\":\n                result *= operand[i + 1];\n\
    \                break;\n            case \"//\":\n                result /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                result\
    \ = (long)pow(result, operand[i + 1]);\n                break;\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n\
    \    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n   \
    \ assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_08cvjey.d(48): Error: C style cast illegal, use `cast(long)pow(result,
    operand[i + 1])`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_08cvjey.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (size_t i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                result += operand[i + 1];\n                break;\n       \
    \     case \"-\":\n                result -= operand[i + 1];\n               \
    \ break;\n            case \"*\":\n                result *= operand[i + 1];\n\
    \                break;\n            case \"//\":\n                result /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                result\
    \ = pow(result, operand[i + 1]);\n                break;\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp379ym_va.d(33): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp379ym_va.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    int len = operator.length;\n    long temp = operand[0];\n\
    \    for(int i = 0; i < len; i++)\n    {\n        switch(operator[i])\n      \
    \  {\n            case \"+\":\n                temp += operand[i+1];\n       \
    \         break;\n            case \"-\":\n                temp -= operand[i+1];\n\
    \                break;\n            case \"*\":\n                temp *= operand[i+1];\n\
    \                break;\n            case \"//\":\n                temp /= operand[i+1];\n\
    \                break;\n            case \"**\":\n                temp = (long)pow(temp,\
    \ operand[i+1]);\n                break;\n        }\n    }\n    return temp;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjvdjop44.d(49): Error: C style cast illegal, use `cast(long)pow(temp,
    operand[i + 1])`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjvdjop44.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    // Convert long[] to List<long>\n    List<long> arrList =\
    \ new List<long>();\n    foreach(long i in operand)\n    {\n        arrList.Add(i);\n\
    \    }\n    // Convert string[] to List<string>\n    List<string> opList = new\
    \ List<string>();\n    foreach(string i in operator)\n    {\n        opList.Add(i);\n\
    \    }\n    // Do exponentiation first\n    while(opList.IndexOf(\"**\") != -1)\n\
    \    {\n        int index = opList.IndexOf(\"**\");\n        long num1 = arrList[index];\n\
    \        long num2 = arrList[index + 1];\n        long val = (long)pow(num1, num2);\n\
    \        arrList.RemoveAt(index);\n        arrList.RemoveAt(index);\n        arrList.Insert(index,\
    \ val);\n        opList.RemoveAt(index);\n    }\n    // Do multiplication or division\
    \ next\n    while(opList.IndexOf(\"*\") != -1 || opList.IndexOf(\"//\") != -1)\n\
    \    {\n        int index = -1;\n        long val = -1;\n        if(opList.IndexOf(\"\
    *\") != -1)\n        {\n            index = opList.IndexOf(\"*\");\n         \
    \   long num1 = arrList[index];\n            long num2 = arrList[index + 1];\n\
    \            val = num1 * num2;\n        }\n        else if(opList.IndexOf(\"\
    //\") != -1)\n        {\n            index = opList.IndexOf(\"//\");\n       \
    \     long num1 = arrList[index];\n            long num2 = arrList[index + 1];\n\
    \            val = num1 / num2;\n        }\n        arrList.RemoveAt(index);\n\
    \        arrList.RemoveAt(index);\n        arrList.Insert(index, val);\n     \
    \   opList.RemoveAt(index);\n    }\n    // Do addition or subtraction last\n \
    \   while(opList.IndexOf(\"+\") != -1 || opList.IndexOf(\"-\") != -1)\n    {\n\
    \        int index = -1\nunittest\n{\n    alias candidate = do_algebra;\n\n  \
    \  assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"\
    +\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"\
    *\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpoygk2yqo.d(31): Error: found `>` when expecting `.` following
    long\n/tmp/tmpoygk2yqo.d(31): Error: found `>` when expecting `.` following long\n/tmp/tmpoygk2yqo.d(31):
    Error: found `(` when expecting identifier following `long`.\n/tmp/tmpoygk2yqo.d(31):
    Error: found `)` when expecting `;` following statement\n/tmp/tmpoygk2yqo.d(31):
    Deprecation: use `{ }` for an empty statement, not `;`\n/tmp/tmpoygk2yqo.d(32):
    Error: found `in` when expecting `;`\n/tmp/tmpoygk2yqo.d(37): Error: found `>`
    when expecting `;` following statement\n/tmp/tmpoygk2yqo.d(37): Error: found `>`
    when expecting `;` following statement\n/tmp/tmpoygk2yqo.d(37): Error: expression
    expected, not `)`\n/tmp/tmpoygk2yqo.d(37): Error: found `;` when expecting `)`\n/tmp/tmpoygk2yqo.d(38):
    Error: found `foreach` when expecting `;` following statement\n/tmp/tmpoygk2yqo.d(38):
    Error: found `in` when expecting `)`\n/tmp/tmpoygk2yqo.d(38): Error: missing `{
    ... }` for function literal\n/tmp/tmpoygk2yqo.d(38): Error: found `operator` when
    expecting `;` following statement\n/tmp/tmpoygk2yqo.d(38): Error: found `)` instead
    of statement\n/tmp/tmpoygk2yqo.d(43): Error: declaration expected, not `while`\n/tmp/tmpoygk2yqo.d(48):
    Error: C style cast illegal, use `cast(long)pow(num1, num2)`\n/tmp/tmpoygk2yqo.d(49):
    Error: function declaration without return type. (Note that constructors are always
    named `this`)\n/tmp/tmpoygk2yqo.d(49): Error: no identifier for declarator `arrList.RemoveAt(index)`\n/tmp/tmpoygk2yqo.d(50):
    Error: function declaration without return type. (Note that constructors are always
    named `this`)\n/tmp/tmpoygk2yqo.d(50): Error: no identifier for declarator `arrList.RemoveAt(index)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoygk2yqo.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        string op = operator[i];\n        switch (op)\n       \
    \ {\n            case \"+\":\n                result += operand[i + 1];\n    \
    \            break;\n            case \"-\":\n                result -= operand[i\
    \ + 1];\n                break;\n            case \"*\":\n                result\
    \ *= operand[i + 1];\n                break;\n            case \"//\":\n     \
    \           result /= operand[i + 1];\n                break;\n            case\
    \ \"**\":\n                result = cast(long) pow(result, operand[i + 1]);\n\
    \                break;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjzrnfti7.d(34): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjzrnfti7.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    if (operator.length == 0 || operand.length == 0)\n       \
    \ return -1;\n    else if (operator.length != operand.length - 1)\n        return\
    \ -1;\n    \n    long result = operand[0];\n    for (long i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                result += operand[i + 1];\n                break;\n       \
    \     case \"-\":\n                result -= operand[i + 1];\n               \
    \ break;\n            case \"*\":\n                result *= operand[i + 1];\n\
    \                break;\n            case \"//\":\n                result /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                result\
    \ = pow(result, operand[i + 1]);\n                break;\n            default:\n\
    \                break;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmppsuvjsy4.d(66): unittest failure\n----------------\n??:?
    _d_unittestp [0x429581]\n??:? void tmppsuvjsy4.__unittest_L61_C1() [0x428369]\n??:?
    void tmppsuvjsy4.__modtest() [0x42876c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42e12b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42925e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42add1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ae60]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42ad5d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x429235]\n??:? runModuleUnitTests [0x42df01]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429a98]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x429a1f]\n??:? _d_run_main [0x42998a]\n??:? main [0x42877f]\n??:?
    __libc_start_main [0x9a26e554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    // your code here\n    long ret = operand[0];\n    for(int\
    \ i = 0; i < operator.length; i++)\n    {\n        switch(operator[i])\n     \
    \   {\n            case '+':\n                ret += operand[i+1];\n         \
    \       break;\n            case '-':\n                ret -= operand[i+1];\n\
    \                break;\n            case '*':\n                ret *= operand[i+1];\n\
    \                break;\n            case '//':\n                ret /= operand[i+1];\n\
    \                break;\n            case '**':\n                ret = pow(ret,\
    \ operand[i+1]);\n                break;\n        }\n    }\n    return ret;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7cs1e85o.d(45): Error: unterminated character constant\n/tmp/tmp7cs1e85o.d(45):
    Error: unterminated character constant\n/tmp/tmp7cs1e85o.d(46): Error: found `ret`
    when expecting `:`\n/tmp/tmp7cs1e85o.d(46): Error: found `/=` instead of statement\n/tmp/tmp7cs1e85o.d(48):
    Error: unterminated character constant\n/tmp/tmp7cs1e85o.d(48): Error: unterminated
    character constant\n/tmp/tmp7cs1e85o.d(49): Error: found `ret` when expecting
    `:`\n/tmp/tmp7cs1e85o.d(49): Error: found `=` instead of statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp7cs1e85o.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    int last = operand.length - 1;\n    if (operator.length !=\
    \ last) return 0;\n    for (int i = 0; i < last; i++)\n    {\n        if (operator[i]\
    \ == \"+\") operand[i+1] += operand[i];\n        else if (operator[i] == \"-\"\
    ) operand[i+1] = operand[i] - operand[i+1];\n        else if (operator[i] == \"\
    *\") operand[i+1] *= operand[i];\n        else if (operator[i] == \"//\") operand[i+1]\
    \ = operand[i] / operand[i+1];\n        else if (operator[i] == \"**\") operand[i+1]\
    \ = operand[i] ** operand[i+1];\n    }\n    return operand[last];\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7bgpq7zb.d(30): Error: cannot implicitly convert expression
    `operand.length - 1LU` of type `ulong` to `int`\n/tmp/tmp7bgpq7zb.d(38): Error:
    can only `*` a pointer, not a `long`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp7bgpq7zb.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long res = operand[0];\n    for (size_t i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case '+':\n\
    \                res += operand[i + 1];\n                break;\n            case\
    \ '-':\n                res -= operand[i + 1];\n                break;\n     \
    \       case '*':\n                res *= operand[i + 1];\n                break;\n\
    \            case '//':\n                res /= operand[i + 1];\n            \
    \    break;\n            case '**':\n                res = pow(res, operand[i\
    \ + 1]);\n                break;\n        }\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzpa98s69.d(44): Error: unterminated character constant\n/tmp/tmpzpa98s69.d(44):
    Error: unterminated character constant\n/tmp/tmpzpa98s69.d(45): Error: found `res`
    when expecting `:`\n/tmp/tmpzpa98s69.d(45): Error: found `/=` instead of statement\n/tmp/tmpzpa98s69.d(47):
    Error: unterminated character constant\n/tmp/tmpzpa98s69.d(47): Error: unterminated
    character constant\n/tmp/tmpzpa98s69.d(48): Error: found `res` when expecting
    `:`\n/tmp/tmpzpa98s69.d(48): Error: found `=` instead of statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpzpa98s69.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    auto result = operand[0];\n    foreach(i, o; operator)\n \
    \   {\n        auto next_index = i + 1;\n        if(o == \"+\")\n        {\n \
    \           result += operand[next_index];\n        }\n        else if(o == \"\
    -\")\n        {\n            result -= operand[next_index];\n        }\n     \
    \   else if(o == \"*\")\n        {\n            result *= operand[next_index];\n\
    \        }\n        else if(o == \"//\")\n        {\n            result /= operand[next_index];\n\
    \        }\n        else if(o == \"**\")\n        {\n            result = pow(result,\
    \ operand[next_index]);\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpc8z_6nep.d(62): unittest failure\n----------------\n??:?
    _d_unittestp [0x42916d]\n??:? void tmpc8z_6nep.__unittest_L57_C1() [0x4281ed]\n??:?
    void tmpc8z_6nep.__modtest() [0x4283d8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dcc3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428ec6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a969]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42a9f8]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42a8f5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x428e9d]\n??:? runModuleUnitTests [0x42da99]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429630]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4295b7]\n??:? _d_run_main [0x429522]\n??:? main [0x4283eb]\n??:?
    __libc_start_main [0x40fab554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++) {\n        if (operator[i] == \"+\") {\n            result += operand[i\
    \ + 1];\n        } else if (operator[i] == \"-\") {\n            result -= operand[i\
    \ + 1];\n        } else if (operator[i] == \"*\") {\n            result *= operand[i\
    \ + 1];\n        } else if (operator[i] == \"//\") {\n            result /= operand[i\
    \ + 1];\n        } else if (operator[i] == \"**\") {\n            result = cast(long)pow(result,\
    \ operand[i + 1]);\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"\
    ], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L,\
    \ 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) ==\
    \ 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmppf16fetc.d(51): unittest failure\n----------------\n??:?
    _d_unittestp [0x4291ed]\n??:? void tmppf16fetc.__unittest_L46_C1() [0x42826d]\n??:?
    void tmppf16fetc.__modtest() [0x428458]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dd43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428f46]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a9e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa78]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42a975]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x428f1d]\n??:? runModuleUnitTests [0x42db19]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4296b0]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x429637]\n??:? _d_run_main [0x4295a2]\n??:? main [0x42846b]\n??:?
    __libc_start_main [0x39c57554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    //long[] results = new long[operand.size];\n    long result\
    \ = operand[0];\n    for(size_t i = 0; i < operator.size; i++)\n    {\n      \
    \  if(operator[i] == \"+\")\n        {\n            result += operand[i+1];\n\
    \        }\n        else if(operator[i] == \"-\")\n        {\n            result\
    \ -= operand[i+1];\n        }\n        else if(operator[i] == \"*\")\n       \
    \ {\n            result *= operand[i+1];\n        }\n        else if(operator[i]\
    \ == \"//\")\n        {\n            result /= operand[i+1];\n        }\n    \
    \    else if(operator[i] == \"**\")\n        {\n            result = pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L,\
    \ 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L,\
    \ 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpx01k6cm1.d(32): Error: no property `size` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx01k6cm1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    if (operand.length == 0) return 0;\n    if (operand.length\
    \ == 1) return operand[0];\n    if (operator.length == 0) return 0;\n    if (operator.length\
    \ != operand.length - 1) return 0;\n    long op1 = operand[0];\n    long op2 =\
    \ operand[1];\n    long result = 0;\n    switch (operator[0])\n    {\n       \
    \ case \"+\": result = op1 + op2; break;\n        case \"-\": result = op1 - op2;\
    \ break;\n        case \"*\": result = op1 * op2; break;\n        case \"//\"\
    : result = op1 / op2; break;\n        case \"**\": result = (long)pow(op1, op2);\
    \ break;\n    }\n    long[] newOperand = new long[operand.length - 1];\n    newOperand[0]\
    \ = result;\n    long i = 1;\n    while (i < operand.length - 1)\n    {\n    \
    \    newOperand[i] = operand[i + 1];\n        i++;\n    }\n    string[] newOperator\
    \ = new string[operator.length - 1];\n    i = 0;\n    while (i < operator.length\
    \ - 1)\n    {\n        newOperator[i] = operator[i + 1];\n        i++;\n    }\n\
    \    return do_algebra(newOperator, newOperand);\n}\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp23iejy2z.d(43): Error: C style cast illegal, use cast(long)pow(op1,
    op2)\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp23iejy2z.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    \n    long result = operand[0];\n    for(int i = 0; i < operator.length;\
    \ i++)\n    {\n        if(operator[i] == \"+\")\n        {\n            result\
    \ += operand[i+1];\n        }\n        else if(operator[i] == \"-\")\n       \
    \ {\n            result -= operand[i+1];\n        }\n        else if(operator[i]\
    \ == \"*\")\n        {\n            result *= operand[i+1];\n        }\n     \
    \   else if(operator[i] == \"//\")\n        {\n            result /= operand[i+1];\n\
    \        }\n        else if(operator[i] == \"**\")\n        {\n            result\
    \ = (long)pow(result, operand[i+1]);\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpon9wnq2r.d(52): Error: C style cast illegal, use cast(long)pow(result,
    operand[i + 1])\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpon9wnq2r.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long accumulator = operand[0];\n    foreach(i, op; operator)\n\
    \    {\n        switch(op)\n        {\n            case \"+\": accumulator +=\
    \ operand[i+1]; break;\n            case \"-\": accumulator -= operand[i+1]; break;\n\
    \            case \"*\": accumulator *= operand[i+1]; break;\n            case\
    \ \"//\": accumulator /= operand[i+1]; break;\n            case \"**\": accumulator\
    \ = pow(accumulator, operand[i+1]); break;\n        }\n    }\n    return accumulator;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmmg9urji.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long a = operand[0];\n    long b = operand[1];\n    long result\
    \ = 0;\n    switch(operator[0])\n    {\n        case \"+\":\n            result\
    \ = a + b;\n            break;\n        case \"-\":\n            result = a -\
    \ b;\n            break;\n        case \"*\":\n            result = a * b;\n \
    \           break;\n        case \"//\":\n            result = a / b;\n      \
    \      break;\n        case \"**\":\n            result = cast(long)pow(a, b);\n\
    \            break;\n    }\n    if(operator.length > 1)\n    {\n        return\
    \ do_algebra(operator[1..$], operand[1..$], result);\n    }\n    return result;\n\
    }\nlong do_algebra(string[] operator, long[] operand, long nextResult) \n{\n \
    \   long b = operand[1];\n    long result = 0;\n    switch(operator[0])\n    {\n\
    \        case \"+\":\n            result = nextResult + b;\n            break;\n\
    \        case \"-\":\n            result = nextResult - b;\n            break;\n\
    \        case \"*\":\n            result = nextResult * b;\n            break;\n\
    \        case \"//\":\n            result = nextResult / b;\n            break;\n\
    \        case \"**\":\n            result = cast(long)pow(nextResult, b);\n  \
    \          break;\n    }\n    if(operator.length > 1)\n    {\n        return do_algebra(operator[1..$],\
    \ operand[1..$], result);\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L,\
    \ 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L,\
    \ 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppym_wymw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (long i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                result += operand[i + 1];\n                break;\n       \
    \     case \"-\":\n                result -= operand[i + 1];\n               \
    \ break;\n            case \"*\":\n                result *= operand[i + 1];\n\
    \                break;\n            case \"//\":\n                result /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                result\
    \ = pow(result, operand[i + 1]);\n                break;\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgoedh4yz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long res = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n            res += operand[i+1];\n\
    \        else if (operator[i] == \"-\")\n            res -= operand[i+1];\n  \
    \      else if (operator[i] == \"*\")\n            res *= operand[i+1];\n    \
    \    else if (operator[i] == \"//\")\n            res /= operand[i+1];\n     \
    \   else if (operator[i] == \"**\")\n            res = (long)pow(res, operand[i+1]);\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n\
    \    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n   \
    \ assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7fr3qr0y.d(42): Error: C style cast illegal, use cast(long)pow(res,
    operand[i + 1])\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7fr3qr0y.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++) {\n        if (operator[i] == \"+\") {\n            result += operand[i\
    \ + 1];\n        } else if (operator[i] == \"-\") {\n            result -= operand[i\
    \ + 1];\n        } else if (operator[i] == \"*\") {\n            result *= operand[i\
    \ + 1];\n        } else if (operator[i] == \"//\") {\n            result /= operand[i\
    \ + 1];\n        } else if (operator[i] == \"**\") {\n            result = pow(result,\
    \ operand[i + 1]);\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"\
    ], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L,\
    \ 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) ==\
    \ 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpstqy3w_k.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long l = 0;\n    long r = 0;\n    long result = 0;\n    char\
    \ op = 'a';\n    foreach(e; zip(operator, operand))\n    {\n        l = r;\n \
    \       op = e[0];\n        r = e[1];\n        switch(op)\n        {\n       \
    \     case '+':\n                result = l + r;\n                break;\n   \
    \         case '-':\n                result = l - r;\n                break;\n\
    \            case '*':\n                result = l * r;\n                break;\n\
    \            case '/':\n                result = l / r;\n                break;\n\
    \            case '^':\n                result = pow(l, r);\n                break;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiec6pnl5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\") result += operand[i+1];\n   \
    \     else if (operator[i] == \"-\") result -= operand[i+1];\n        else if\
    \ (operator[i] == \"*\") result *= operand[i+1];\n        else if (operator[i]\
    \ == \"//\") result /= operand[i+1];\n        else if (operator[i] == \"**\")\
    \ result = pow(result, operand[i+1]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr1164igm.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (long i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n        {\n            result\
    \ += operand[i+1];\n        }\n        else if (operator[i] == \"-\")\n      \
    \  {\n            result -= operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"*\")\n        {\n            result *= operand[i+1];\n        }\n     \
    \   else if (operator[i] == \"//\")\n        {\n            result /= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"**\")\n        {\n            result\
    \ = pow(result, operand[i+1]);\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_vvcs10h.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++) {\n        switch (operator[i]) {\n            case \"+\":\n          \
    \      result += operand[i + 1];\n                break;\n            case \"\
    -\":\n                result -= operand[i + 1];\n                break;\n    \
    \        case \"*\":\n                result *= operand[i + 1];\n            \
    \    break;\n            case \"//\":\n                result /= operand[i + 1];\n\
    \                break;\n            case \"**\":\n                result = pow(result,\
    \ operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n\
    }\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = operand[0];\n\
    \    for (int i = 0; i < operator.length; i++) {\n        switch (operator[i])\
    \ {\n            case \"+\":\n                result += operand[i + 1];\n    \
    \            break;\n            case \"-\":\n                result -= operand[i\
    \ + 1];\n                break;\n            case \"*\":\n                result\
    \ *= operand[i + 1];\n                break;\n            case \"//\":\n     \
    \           result /= operand[i + 1];\n                break;\n            case\
    \ \"**\":\n                result = pow(result, operand[i + 1]);\n           \
    \     break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L,\
    \ 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L,\
    \ 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu23uxrki.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    int i = 0;\n    long tmp = operand[i];\n    for(int j = 0;\
    \ j < operator.length; j++) {\n        if(operator[j] == \"+\") {\n          \
    \  tmp += operand[++i];\n        }\n        else if(operator[j] == \"-\") {\n\
    \            tmp -= operand[++i];\n        }\n        else if(operator[j] == \"\
    *\") {\n            tmp *= operand[++i];\n        }\n        else if(operator[j]\
    \ == \"//\") {\n            tmp /= operand[++i];\n        }\n        else if(operator[j]\
    \ == \"**\") {\n            tmp = pow(tmp, operand[++i]);\n        }\n    }\n\
    \    return tmp;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkgdmavsh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (long i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\") result += operand[i+1];\n   \
    \     else if (operator[i] == \"-\") result -= operand[i+1];\n        else if\
    \ (operator[i] == \"*\") result *= operand[i+1];\n        else if (operator[i]\
    \ == \"//\") result /= operand[i+1];\n        else if (operator[i] == \"**\")\
    \ result = pow(result, operand[i+1]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp28_2diis.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++) {\n        if (operator[i] == \"+\") {\n            result += operand[i\
    \ + 1];\n        } else if (operator[i] == \"-\") {\n            result -= operand[i\
    \ + 1];\n        } else if (operator[i] == \"*\") {\n            result *= operand[i\
    \ + 1];\n        } else if (operator[i] == \"//\") {\n            result /= operand[i\
    \ + 1];\n        } else if (operator[i] == \"**\") {\n            result = pow(result,\
    \ operand[i + 1]);\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"\
    ], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L,\
    \ 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) ==\
    \ 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpstqy3w_k.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++) {\n        switch (operator[i]) {\n            case \"+\":\n          \
    \      result += operand[i + 1];\n                break;\n            case \"\
    -\":\n                result -= operand[i + 1];\n                break;\n    \
    \        case \"*\":\n                result *= operand[i + 1];\n            \
    \    break;\n            case \"//\":\n                result /= operand[i + 1];\n\
    \                break;\n            case \"**\":\n                result = pow(result,\
    \ operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprtzgimth.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    long operand_length = operand.length;\n\
    \    for (int i = 0; i < operand_length - 1; i++)\n    {\n        switch (operator[i])\
    \ \n        {\n            case \"+\":\n                result += operand[i +\
    \ 1];\n                break;\n            case \"-\":\n                result\
    \ -= operand[i + 1];\n                break;\n            case \"*\":\n      \
    \          result *= operand[i + 1];\n                break;\n            case\
    \ \"//\":\n                result /= operand[i + 1];\n                break;\n\
    \            case \"**\":\n                result = pow(result, operand[i + 1]);\n\
    \                break;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplagwa9q2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (long i = 0; i < operator.length;\
    \ i++) {\n        if (operator[i] == \"+\") result += operand[i + 1];\n      \
    \  else if (operator[i] == \"-\") result -= operand[i + 1];\n        else if (operator[i]\
    \ == \"*\") result *= operand[i + 1];\n        else if (operator[i] == \"//\"\
    ) result /= operand[i + 1];\n        else if (operator[i] == \"**\") result =\
    \ (long)pow(result, operand[i + 1]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe8iuzvob.d(36): Error: C style cast illegal, use cast(long)pow(result,
    operand[i + 1])\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe8iuzvob.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long res;\n    foreach(c; operator)\n    {\n        res =\
    \ operand[0];\n        switch(c)\n        {\n            case '+':\n         \
    \       res += operand[1];\n                break;\n            case '-':\n  \
    \              res -= operand[1];\n                break;\n            case '*':\n\
    \                res *= operand[1];\n                break;\n            case\
    \ '//':\n                res /= operand[1];\n                break;\n        \
    \    case '**':\n                res = pow(res, operand[1]);\n               \
    \ break;\n        }\n        operand = operand[1..$];\n        operand[0] = res;\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n\
    \    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n   \
    \ assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp36htw43w.d(45): Error: unterminated character constant\n/tmp/tmp36htw43w.d(45):
    Error: unterminated character constant\n/tmp/tmp36htw43w.d(46): Error: found \''res\''
    when expecting \'':\''\n/tmp/tmp36htw43w.d(46): Error: found \''/=\'' instead
    of statement\n/tmp/tmp36htw43w.d(48): Error: unterminated character constant\n/tmp/tmp36htw43w.d(48):
    Error: unterminated character constant\n/tmp/tmp36htw43w.d(49): Error: found \''res\''
    when expecting \'':\''\n/tmp/tmp36htw43w.d(49): Error: found \''=\'' instead of
    statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp36htw43w.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (long i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n        {\n            result\
    \ += operand[i+1];\n        }\n        else if (operator[i] == \"-\")\n      \
    \  {\n            result -= operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"*\")\n        {\n            result *= operand[i+1];\n        }\n     \
    \   else if (operator[i] == \"//\")\n        {\n            result /= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"**\")\n        {\n            result\
    \ = long(pow(result, operand[i+1]));\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpm7rzd3i3.d(51): Error: found \''(\'' when expecting \''.\''
    following long\n/tmp/tmpm7rzd3i3.d(51): Error: found \'')\'' when expecting \'';\''
    following statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm7rzd3i3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    ulong i = 0;\n    ulong opLen = operator.length;\n    long\
    \ result = operand[0];\n    for (i = 0; i < opLen; i++)\n    {\n        switch\
    \ (operator[i])\n        {\n            case \"+\":\n                result +=\
    \ operand[i + 1];\n                break;\n            case \"-\":\n         \
    \       result -= operand[i + 1];\n                break;\n            case \"\
    *\":\n                result *= operand[i + 1];\n                break;\n    \
    \        case \"//\":\n                result /= operand[i + 1];\n           \
    \     break;\n            case \"**\":\n                result = pow(result, operand[i\
    \ + 1]);\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyfbz9szy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long r = operand[0];\n    for (long i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                r += operand[i + 1];\n                break;\n            case\
    \ \"-\":\n                r -= operand[i + 1];\n                break;\n     \
    \       case \"*\":\n                r *= operand[i + 1];\n                break;\n\
    \            case \"//\":\n                r /= operand[i + 1];\n            \
    \    break;\n            case \"**\":\n                r = cast(long)pow(r, operand[i\
    \ + 1]);\n                break;\n        }\n    }\n    return r;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4g9mbrf_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n        {\n            result\
    \ += operand[i+1];\n        }\n        else if (operator[i] == \"-\")\n      \
    \  {\n            result -= operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"*\")\n        {\n            result *= operand[i+1];\n        }\n     \
    \   else if (operator[i] == \"//\")\n        {\n            result /= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"**\")\n        {\n            result\
    \ = pow(result, operand[i+1]);\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp2waybrmc.d(61): unittest failure\n----------------\n??:?
    _d_unittestp [0x4291ed]\n??:? void tmp2waybrmc.__unittest_L56_C1() [0x42826d]\n??:?
    void tmp2waybrmc.__modtest() [0x428458]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dd43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428f46]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a9e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa78]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42a975]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x428f1d]\n??:? runModuleUnitTests [0x42db19]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4296b0]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x429637]\n??:? _d_run_main [0x4295a2]\n??:? main [0x42846b]\n??:?
    __libc_start_main [0x2ab25554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{ \n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++) {\n        switch (operator[i]) {\n            case \"+\":\n          \
    \      result += operand[i + 1];\n                break;\n            case \"\
    -\":\n                result -= operand[i + 1];\n                break;\n    \
    \        case \"*\":\n                result *= operand[i + 1];\n            \
    \    break;\n            case \"//\":\n                result /= operand[i + 1];\n\
    \                break;\n            case \"**\":\n                result = (long)\
    \ pow(result, operand[i + 1]);\n                break;\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt2vhuk5p.d(46): Error: C style cast illegal, use cast(long)pow(result,
    operand[i + 1])\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt2vhuk5p.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    int length = operator.length;\n\
    \    for (int i = 0; i < length; i++) {\n        switch (operator[i]) {\n    \
    \        case \"+\":\n                result += operand[i + 1];\n            \
    \    break;\n            case \"-\":\n                result -= operand[i + 1];\n\
    \                break;\n            case \"*\":\n                result *= operand[i\
    \ + 1];\n                break;\n            case \"//\":\n                result\
    \ /= operand[i + 1];\n                break;\n            case \"**\":\n     \
    \           result = pow(result, operand[i + 1]);\n                break;\n  \
    \      }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1lkj3p9e.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    auto res = operand[0];\n    foreach(i, e; operand[1..$])\n\
    \    {\n        switch(operator[i])\n        {\n            case \"+\": res +=\
    \ e; break;\n            case \"-\": res -= e; break;\n            case \"*\"\
    : res *= e; break;\n            case \"//\": res /= e; break;\n            case\
    \ \"**\": res ^^= e; break;\n        }\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbe61ispc.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{ \n    long _result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++) {\n        if (operator[i] == \"+\") {\n            _result += operand[i+1];\n\
    \        }\n        else if (operator[i] == \"-\") {\n            _result -= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"*\") {\n            _result *= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"//\") {\n            _result /=\
    \ operand[i+1];\n        }\n        else if (operator[i] == \"**\") {\n      \
    \      _result = (long)pow(_result, operand[i+1]);\n        }\n    }\n    return\
    \ _result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnz0w5me.d(45): Error: C style cast illegal, use cast(long)pow(_result,
    operand[i + 1])\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnz0w5me.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    auto oper = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++) {\n        switch (operator[i]) {\n            case '+':\n            \
    \    oper += operand[i + 1];\n                break;\n            case '-':\n\
    \                oper -= operand[i + 1];\n                break;\n           \
    \ case '*':\n                oper *= operand[i + 1];\n                break;\n\
    \            case '//':\n                oper /= operand[i + 1];\n           \
    \     break;\n            case '**':\n                oper = pow(oper, operand[i\
    \ + 1]);\n                break;\n        }\n    }\n    return oper;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl_7p1st3.d(42): Error: unterminated character constant\n/tmp/tmpl_7p1st3.d(42):
    Error: unterminated character constant\n/tmp/tmpl_7p1st3.d(43): Error: found \''oper\''
    when expecting \'':\''\n/tmp/tmpl_7p1st3.d(43): Error: found \''/=\'' instead
    of statement\n/tmp/tmpl_7p1st3.d(45): Error: unterminated character constant\n/tmp/tmpl_7p1st3.d(45):
    Error: unterminated character constant\n/tmp/tmpl_7p1st3.d(46): Error: found \''oper\''
    when expecting \'':\''\n/tmp/tmpl_7p1st3.d(46): Error: found \''=\'' instead of
    statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl_7p1st3.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long total = operand[0];\n    for (size_t i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n        {\n            total\
    \ += operand[i+1];\n        }\n        else if (operator[i] == \"-\")\n      \
    \  {\n            total -= operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"*\")\n        {\n            total *= operand[i+1];\n        }\n      \
    \  else if (operator[i] == \"//\")\n        {\n            total /= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"**\")\n        {\n            total\
    \ = pow(total, operand[i+1]);\n        }\n    }\n    return total;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpefdf1sw_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n     long result = operand[0];\n     for(size_t i = 0; i < operator.length;\
    \ i++)\n     {\n         switch(operator[i])\n         {\n             case \"\
    +\":\n                result += operand[i+1];\n                break;\n      \
    \       case \"-\":\n                result -= operand[i+1];\n               \
    \ break;\n             case \"*\":\n                result *= operand[i+1];\n\
    \                break;\n             case \"//\":\n                result /=\
    \ operand[i+1];\n                break;\n             case \"**\":\n         \
    \       result = pow(result, operand[i+1]);\n                break;\n        \
    \ }\n     }\n     return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgelh_5k0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n        {\n            result\
    \ += operand[i+1];\n        }\n        else if (operator[i] == \"-\")\n      \
    \  {\n            result -= operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"*\")\n        {\n            result *= operand[i+1];\n        }\n     \
    \   else if (operator[i] == \"//\")\n        {\n            result /= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"**\")\n        {\n            result\
    \ = pow(result, operand[i+1]);\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp2waybrmc.d(61): unittest failure\n----------------\n??:?
    _d_unittestp [0x4291ed]\n??:? void tmp2waybrmc.__unittest_L56_C1() [0x42826d]\n??:?
    void tmp2waybrmc.__modtest() [0x428458]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dd43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428f46]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a9e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa78]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42a975]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x428f1d]\n??:? runModuleUnitTests [0x42db19]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4296b0]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x429637]\n??:? _d_run_main [0x4295a2]\n??:? main [0x42846b]\n??:?
    __libc_start_main [0x2ab25554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (size_t i = 0; i < operator.length;\
    \ i++)\n    {\n        long curr_op = operand[i + 1];\n        if (operator[i]\
    \ == \"+\")\n            result += curr_op;\n        else if (operator[i] == \"\
    -\")\n            result -= curr_op;\n        else if (operator[i] == \"*\")\n\
    \            result *= curr_op;\n        else if (operator[i] == \"//\")\n   \
    \         result /= curr_op;\n        else if (operator[i] == \"**\")\n      \
    \      result = pow(result, curr_op);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaswx46cj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                result += operand[i + 1];\n                break;\n       \
    \     case \"-\":\n                result -= operand[i + 1];\n               \
    \ break;\n            case \"*\":\n                result *= operand[i + 1];\n\
    \                break;\n            case \"//\":\n                result /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                result\
    \ = pow(result, operand[i + 1]);\n                break;\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1p1ptf1l.d(33): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1p1ptf1l.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        long num = operand[i + 1];\n        switch (operator[i])\n\
    \        {\n            case \"+\":\n                result += num;\n        \
    \        break;\n            case \"-\":\n                result -= num;\n   \
    \             break;\n            case \"*\":\n                result *= num;\n\
    \                break;\n            case \"//\":\n                result /= num;\n\
    \                break;\n            case \"**\":\n                result = pow(result,\
    \ num);\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp__qu2hxb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long sum = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n        {\n            sum +=\
    \ operand[i+1];\n        }\n        else if (operator[i] == \"-\")\n        {\n\
    \            sum -= operand[i+1];\n        }\n        else if (operator[i] ==\
    \ \"*\")\n        {\n            sum *= operand[i+1];\n        }\n        else\
    \ if (operator[i] == \"//\")\n        {\n            sum /= operand[i+1];\n  \
    \      }\n        else if (operator[i] == \"**\")\n        {\n            sum\
    \ = pow(sum, operand[i+1]);\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp286mhls3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    auto a = operand;\n    auto op = operator;\n    long result\
    \ = a[0];\n    for (int i = 0; i < op.length; i++) {\n        if (op[i] == \"\
    +\") result += a[i+1];\n        else if (op[i] == \"-\") result -= a[i+1];\n \
    \       else if (op[i] == \"*\") result *= a[i+1];\n        else if (op[i] ==\
    \ \"//\") result /= a[i+1];\n        else if (op[i] == \"**\") result = (long)pow(result,\
    \ a[i+1]);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_vhyqhm2.d(38): Error: C style cast illegal, use cast(long)pow(result,
    a[i + 1])\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_vhyqhm2.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    foreach(i, op; operator)\n\
    \    {\n        if(op == \"+\")\n            result += operand[i+1];\n       \
    \ else if(op == \"-\")\n            result -= operand[i+1];\n        else if(op\
    \ == \"*\")\n            result *= operand[i+1];\n        else if(op == \"//\"\
    )\n            result /= operand[i+1];\n        else if(op == \"**\")\n      \
    \      result = pow(result, operand[i+1]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9kwoida1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    // build the expression\n    string expression = \"\";\n \
    \   foreach(idx, op; operator)\n    {\n        expression ~= operand[idx].idup;\n\
    \        expression ~= op;\n    }\n    expression ~= operand[$-1].idup;\n    return\
    \ eval(expression);\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n   \
    \ assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"\
    +\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"\
    *\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfg2h4u9x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long answer = operand[0];\n    long length = operand.length;\n\
    \    foreach(int i; 0..operator.length)\n    {\n        long temp1 = operand[i];\n\
    \        long temp2 = operand[i+1];\n        long dg = operator[i].length;\n \
    \       if(dg == 2)\n        {\n            switch(operator[i])\n            {\n\
    \                case \"+\":\n                    answer = temp1 + temp2;\n  \
    \                  break;\n                case \"-\":\n                    answer\
    \ = temp1 - temp2;\n                    break;\n                case \"*\":\n\
    \                    answer = temp1 * temp2;\n                    break;\n   \
    \             case \"//\":\n                    answer = temp1 / temp2;\n    \
    \                break;\n                case \"**\":\n                    answer\
    \ = temp1 ^^ temp2;\n                    break;\n            }\n        }\n  \
    \      else if(dg == 1)\n        {\n            switch(operator[i])\n        \
    \    {\n                case \"+\":\n                    answer = temp1 + temp2;\n\
    \                    break;\n                case \"-\":\n                   \
    \ answer = temp1 - temp2;\n                    break;\n                case \"\
    *\":\n                    answer = temp1 * temp2;\n                    break;\n\
    \                case \"/\":\n                    answer = temp1 / temp2;\n  \
    \                  break;\n                case \"^\":\n                    answer\
    \ = temp1 ^^ temp2;\n                    break;\n            }\n        }\n  \
    \  }\n    return answer;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n\
    \    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n   \
    \ assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvf_9h2u6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    ulong i = 0;\n    long result = operand[0];\n    while(i <\
    \ operator.length)\n    {\n        switch(operator[i])\n        {\n          \
    \  case \"+\":\n                result += operand[i+1];\n                break;\n\
    \            case \"-\":\n                result -= operand[i+1];\n          \
    \      break;\n            case \"*\":\n                result *= operand[i+1];\n\
    \                break;\n            case \"//\":\n                result /= operand[i+1];\n\
    \                break;\n            case \"**\":\n                result = pow(result,\
    \ operand[i+1]);\n                break;\n        }\n        i++;\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe07kzvwa.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long temp = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++) {\n        if (operator[i] == \"+\") {\n            temp += operand[i +\
    \ 1];\n        } else if (operator[i] == \"-\") {\n            temp -= operand[i\
    \ + 1];\n        } else if (operator[i] == \"*\") {\n            temp *= operand[i\
    \ + 1];\n        } else if (operator[i] == \"//\") {\n            temp /= operand[i\
    \ + 1];\n        } else if (operator[i] == \"**\") {\n            temp = (long)pow(temp,\
    \ operand[i + 1]);\n        }\n    }\n    return temp;\n}\n//Below is the test\
    \ cases.\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqgi8voyb.d(41): Error: C style cast illegal, use cast(long)pow(temp,
    operand[i + 1])\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqgi8voyb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    int i, j;\n    long res;\n    string ope;\n    long num;\n\
    \    long[] nums = new long[100];\n    int top = 0;\n    long[] opes = new long[100];\n\
    \    int top2 = 0;\n    long[] ops = new long[100];\n    int top3 = 0;\n    for\
    \ (i = 0; i < operator.length; i++)\n    {\n        ope = operator[i];\n     \
    \   num = operand[i + 1];\n        if (ope == \"**\")\n        {\n           \
    \ res = pow(nums[top - 1], num);\n            nums[top - 1] = res;\n        }\n\
    \        else\n        {\n            nums[top++] = num;\n            opes[top2++]\
    \ = ope;\n        }\n    }\n    for (i = 0; i < top2; i++)\n    {\n        ope\
    \ = opes[i];\n        num = nums[i];\n        if (ope == \"*\" || ope == \"//\"\
    )\n        {\n            res = ops[top3 - 1];\n            ops[top3 - 1] = (ope\
    \ == \"*\") ? res * num : res / num;\n        }\n        else\n        {\n   \
    \         ops[top3++] = num;\n            opes[top2++] = ope;\n        }\n   \
    \ }\n    res = ops[0];\n    for (i = 0; i < top2; i++)\n    {\n        ope = opes[i];\n\
    \        num = ops[i + 1];\n        res = (ope == \"+\") ? res + num : res - num;\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n\
    \    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n   \
    \ assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbumrjgk6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++) {\n        if (operator[i] == \"+\")\n            result += operand[i +\
    \ 1];\n        else if (operator[i] == \"-\")\n            result -= operand[i\
    \ + 1];\n        else if (operator[i] == \"*\")\n            result *= operand[i\
    \ + 1];\n        else if (operator[i] == \"//\")\n            result /= operand[i\
    \ + 1];\n        else if (operator[i] == \"**\")\n            result = (long)pow(result,\
    \ operand[i + 1]);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7caw4rqg.d(41): Error: C style cast illegal, use cast(long)pow(result,
    operand[i + 1])\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7caw4rqg.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++) {\n        switch (operator[i]) {\n            case \"+\":\n          \
    \      result += operand[i + 1];\n                break;\n            case \"\
    -\":\n                result -= operand[i + 1];\n                break;\n    \
    \        case \"*\":\n                result *= operand[i + 1];\n            \
    \    break;\n            case \"//\":\n                result /= operand[i + 1];\n\
    \                break;\n            case \"**\":\n                result = pow(result,\
    \ operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprtzgimth.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                result += operand[i + 1];\n                break;\n       \
    \     case \"-\":\n                result -= operand[i + 1];\n               \
    \ break;\n            case \"*\":\n                result *= operand[i + 1];\n\
    \                break;\n            case \"//\":\n                result /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                result\
    \ = pow(result, operand[i + 1]);\n                break;\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1p1ptf1l.d(33): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1p1ptf1l.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++) {\n        if (operator[i] == \"+\")\n            result += operand[i +\
    \ 1];\n        else if (operator[i] == \"-\")\n            result -= operand[i\
    \ + 1];\n        else if (operator[i] == \"*\")\n            result *= operand[i\
    \ + 1];\n        else if (operator[i] == \"//\")\n            result /= operand[i\
    \ + 1];\n        else if (operator[i] == \"**\")\n            result = pow(result,\
    \ operand[i + 1]);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkojbmco_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    : result += operand[i+1]; break;\n            case \"-\": result -= operand[i+1];\
    \ break;\n            case \"*\": result *= operand[i+1]; break;\n           \
    \ case \"//\": result /= operand[i+1]; break;\n            case \"**\": result\
    \ = pow(result, operand[i+1]); break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgvvvovdc.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    auto math_operators = [\"+\", \"-\", \"*\", \"//\", \"**\"\
    ];\n    auto result = 0;\n    for (auto i = 0; i < operator.length; i++)\n   \
    \ {\n        switch (operator[i])\n        {\n            case \"+\":\n      \
    \          result += operand[i] + operand[i + 1];\n                break;\n  \
    \          case \"-\":\n                result += operand[i] - operand[i + 1];\n\
    \                break;\n            case \"*\":\n                result += operand[i]\
    \ * operand[i + 1];\n                break;\n            case \"//\":\n      \
    \          result += operand[i] / operand[i + 1];\n                break;\n  \
    \          case \"**\":\n                result += pow(operand[i], operand[i +\
    \ 1]);\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpouebat4q.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    // Write your code here\n    long _result = operand[0];\n\
    \    for(int i = 0; i < operator.length; i++)\n    {\n        if(operator[i] ==\
    \ \"*\") _result *= operand[i+1];\n        else if(operator[i] == \"/\") _result\
    \ /= operand[i+1];\n        else if(operator[i] == \"+\") _result += operand[i+1];\n\
    \        else if(operator[i] == \"-\") _result -= operand[i+1];\n        else\
    \ if(operator[i] == \"**\") _result = pow(_result, operand[i+1]);\n    }\n   \
    \ return _result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpclnoyyh3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long total;\n    long[] o = operand;\n    string[] ope = operator;\n\
    \    for(int i = 0; i < ope.length; i++)\n    {\n        if(ope[i] == \"+\")\n\
    \        {\n            total = o[i] + o[i+1];\n            o[i+1] = total;\n\
    \        }\n        else if(ope[i] == \"-\")\n        {\n            total = o[i]\
    \ - o[i+1];\n            o[i+1] = total;\n        }\n        else if(ope[i] ==\
    \ \"*\")\n        {\n            total = o[i] * o[i+1];\n            o[i+1] =\
    \ total;\n        }\n        else if(ope[i] == \"//\")\n        {\n          \
    \  total = o[i] / o[i+1];\n            o[i+1] = total;\n        }\n        else\
    \ if(ope[i] == \"**\")\n        {\n            total = o[i] ** o[i+1];\n     \
    \       o[i+1] = total;\n        }\n        else\n        {\n            total\
    \ = 0;\n        }\n    }\n    return total;\n}\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo8rk_o6v.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    int n = 0;\n    long result = operand[0];\n    for (n = 0;\
    \ n < operator.length; n++)\n    {\n        if (operator[n] == \"+\")\n      \
    \  {\n            result += operand[n+1];\n        }\n        else if (operator[n]\
    \ == \"-\")\n        {\n            result -= operand[n+1];\n        }\n     \
    \   else if (operator[n] == \"*\")\n        {\n            result *= operand[n+1];\n\
    \        }\n        else if (operator[n] == \"//\")\n        {\n            result\
    \ /= operand[n+1];\n        }\n        else if (operator[n] == \"**\")\n     \
    \   {\n            result = pow(result, operand[n+1]);\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_uyh0fjo.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long res = operand[0];\n    for (size_t i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                res += operand[i + 1];\n                break;\n          \
    \  case \"-\":\n                res -= operand[i + 1];\n                break;\n\
    \            case \"*\":\n                res *= operand[i + 1];\n           \
    \     break;\n            case \"//\":\n                res /= operand[i + 1];\n\
    \                break;\n            case \"**\":\n                res = pow(res,\
    \ operand[i + 1]);\n                break;\n        }\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfe5mstvw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n        {\n            result\
    \ += operand[i+1];\n        }\n        else if (operator[i] == \"-\")\n      \
    \  {\n            result -= operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"*\")\n        {\n            result *= operand[i+1];\n        }\n     \
    \   else if (operator[i] == \"//\")\n        {\n            result /= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"**\")\n        {\n            result\
    \ = pow(result, operand[i+1]);\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp2waybrmc.d(61): unittest failure\n----------------\n??:?
    _d_unittestp [0x4291ed]\n??:? void tmp2waybrmc.__unittest_L56_C1() [0x42826d]\n??:?
    void tmp2waybrmc.__modtest() [0x428458]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dd43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428f46]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a9e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa78]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42a975]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x428f1d]\n??:? runModuleUnitTests [0x42db19]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4296b0]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x429637]\n??:? _d_run_main [0x4295a2]\n??:? main [0x42846b]\n??:?
    __libc_start_main [0x2ab25554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (long i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n        {\n            result\
    \ += operand[i+1];\n        }\n        else if (operator[i] == \"-\")\n      \
    \  {\n            result -= operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"*\")\n        {\n            result *= operand[i+1];\n        }\n     \
    \   else if (operator[i] == \"//\")\n        {\n            result /= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"**\")\n        {\n            result\
    \ = pow(result, operand[i+1]);\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_vvcs10h.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    auto total = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                total += operand[i + 1];\n                break;\n        \
    \    case \"-\":\n                total -= operand[i + 1];\n                break;\n\
    \            case \"*\":\n                total *= operand[i + 1];\n         \
    \       break;\n            case \"//\":\n                total /= operand[i +\
    \ 1];\n                break;\n            case \"**\":\n                total\
    \ = pow(total, operand[i + 1]);\n                break;\n        }\n    }\n  \
    \  return total;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkogvlju9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    int operators_number = operator.length;\n\
    \    for (int i = 0; i < operators_number; i++)\n    {\n        if (operator[i]\
    \ == \"+\")\n        {\n            result += operand[i+1];\n        }\n     \
    \   else if (operator[i] == \"-\")\n        {\n            result -= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"*\")\n        {\n            result\
    \ *= operand[i+1];\n        }\n        else if (operator[i] == \"//\")\n     \
    \   {\n            result /= operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"**\")\n        {\n            result = pow(result, operand[i+1]);\n   \
    \     }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe90xru49.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n  long result = operand[0];\n  for (int i = 0; i < operator.length;\
    \ i++)\n  {\n    if (operator[i] == \"+\") {\n      result += operand[i+1];\n\
    \    } else if (operator[i] == \"-\") {\n      result -= operand[i+1];\n    }\
    \ else if (operator[i] == \"*\") {\n      result *= operand[i+1];\n    } else\
    \ if (operator[i] == \"//\") {\n      result /= operand[i+1];\n    } else if (operator[i]\
    \ == \"**\") {\n      result = pow(result, operand[i+1]);\n    } else {\n    \
    \  return -1;\n    }\n  }\n  return result;\n}\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpubvpxagv.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    int i = 0;\n    while(i < operator.length)\n\
    \    {\n        if(operator[i] == \"+\")\n        {\n            result += operand[i+1];\n\
    \        }\n        else if(operator[i] == \"-\")\n        {\n            result\
    \ -= operand[i+1];\n        }\n        else if(operator[i] == \"*\")\n       \
    \ {\n            result *= operand[i+1];\n        }\n        else if(operator[i]\
    \ == \"//\")\n        {\n            result /= operand[i+1];\n        }\n    \
    \    else if(operator[i] == \"**\")\n        {\n            result = pow(result,\
    \ operand[i+1]);\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2frw4j84.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    /*\n        be careful on the error line .\n        There\
    \ are five kinds of algebra operators:\n        addition(+), subtraction(-), multiplication(*),\
    \ floor division(//), exponentiation(**)\n        And the order of precedence\
    \ are:\n        exponentiation(**) > multiplication(*), floor division(//) > addition(+)\
    \ = subtraction(-)\n        We should do the multiplication, floor division and\
    \ exponentiation first.\n        For example:\n        2 + 3 * 4 - 5 \n      \
    \  should be 2 + (3 * 4) - 5, not 2 + 3 * (4 - 5).\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0g2mhlpr.d(30): Error: unterminated /* */ comment\n/tmp/tmp0g2mhlpr.d(48):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0g2mhlpr.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long tmp = operand[0];\n    int x = 1;\n    foreach(string\
    \ op; operator)\n    {\n        switch(op)\n        {\n            case \"+\"\
    :\n                tmp += operand[x];\n                break;\n            case\
    \ \"-\":\n                tmp -= operand[x];\n                break;\n       \
    \     case \"*\":\n                tmp *= operand[x];\n                break;\n\
    \            case \"//\":\n                tmp /= operand[x];\n              \
    \  break;\n            case \"**\":\n                tmp = pow(tmp, operand[x]);\n\
    \                break;\n        }\n        x++;\n    }\n    return tmp;\n}\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1vjbmwcd.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\") result += operand[i+1];\n   \
    \     else if (operator[i] == \"-\") result -= operand[i+1];\n        else if\
    \ (operator[i] == \"*\") result *= operand[i+1];\n        else if (operator[i]\
    \ == \"//\") result /= operand[i+1];\n        else if (operator[i] == \"**\")\
    \ result = pow(result, operand[i+1]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr1164igm.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long res = operand[0];\n    int j = 0;\n    for (int i = 1;\
    \ i < operand.length; i++)\n    {\n        switch (operator[j])\n        {\n \
    \           case \"+\":\n                res += operand[i];\n                break;\n\
    \            case \"-\":\n                res -= operand[i];\n               \
    \ break;\n            case \"*\":\n                res *= operand[i];\n      \
    \          break;\n            case \"//\":\n                res /= operand[i];\n\
    \                break;\n            case \"**\":\n                res = pow(res,\
    \ operand[i]);\n                break;\n        }\n        j++;\n    }\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9q6xt8ah.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    if (operator.length != operand.length - 1)\n        return\
    \ -1;\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                result += operand[i + 1];\n                break;\n       \
    \     case \"-\":\n                result -= operand[i + 1];\n               \
    \ break;\n            case \"*\":\n                result *= operand[i + 1];\n\
    \                break;\n            case \"//\":\n                result /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                result\
    \ = pow(result, operand[i + 1]);\n                break;\n            default:\n\
    \                break;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe1iprr7w.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    foreach(int i, string op; zip(i,\
    \ op; operator))\n    {\n        switch(op)\n        {\n            case \"+\"\
    :\n                result += operand[i+1];\n                break;\n         \
    \   case \"-\":\n                result -= operand[i+1];\n                break;\n\
    \            case \"*\":\n                result *= operand[i+1];\n          \
    \      break;\n            case \"//\":\n                result /= operand[i+1];\n\
    \                break;\n            case \"**\":\n                result = long(pow(result,\
    \ operand[i+1]));\n                break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpiu4m0z1z.d(31): Error: found \'';\'' when expecting \'',\''\n/tmp/tmpiu4m0z1z.d(48):
    Error: found \''(\'' when expecting \''.\'' following long\n/tmp/tmpiu4m0z1z.d(48):
    Error: found \'')\'' when expecting \'';\'' following statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpiu4m0z1z.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    int nOperator = operator.length;\n    int nOperand = operand.length;\n\
    \    int n;\n    long value;\n    if(nOperator == nOperand - 1)\n    {\n     \
    \   n = nOperator;\n        value = operand[0];\n        for(int i = 0; i < n;\
    \ i++)\n        {\n            switch(operator[i])\n            {\n          \
    \      case \"+\":\n                    value += operand[i+1];\n             \
    \       break;\n                case \"-\":\n                    value -= operand[i+1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ value *= operand[i+1];\n                    break;\n                case \"\
    //\":\n                    value /= operand[i+1];\n                    break;\n\
    \                case \"**\":\n                    value = (long)pow(value, operand[i+1]);\n\
    \                    break;\n            }\n        }\n    }\n    return value;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr5gmc_dc.d(55): Error: C style cast illegal, use cast(long)pow(value,
    operand[i + 1])\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr5gmc_dc.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long answer = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n        {\n            answer\
    \ += operand[i+1];\n        }\n        else if (operator[i] == \"-\")\n      \
    \  {\n            answer -= operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"*\")\n        {\n            answer *= operand[i+1];\n        }\n     \
    \   else if (operator[i] == \"//\")\n        {\n            answer /= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"**\")\n        {\n            answer\
    \ = answer ^ operand[i+1];\n        }\n    }\n    return answer;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpezllaa3m.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    int n = operand.length - 1;\n    if (n < 1) return 0;\n  \
    \  else if (n == 1) return operand[0];\n    else\n    {\n        if (operator[0]\
    \ == \"+\") operand[1] += operand[0];\n        else if (operator[0] == \"-\")\
    \ operand[1] -= operand[0];\n        else if (operator[0] == \"*\") operand[1]\
    \ *= operand[0];\n        else if (operator[0] == \"//\") operand[1] = cast(long)floor(cast(double)operand[1]\
    \ / operand[0]);\n        else if (operator[0] == \"**\") operand[1] = cast(long)pow(cast(double)operand[1],\
    \ cast(double)operand[0]);\n        return do_algebra(operator[1 .. $], operand[1\
    \ .. $]);\n    }\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp22robykh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n        {\n            result\
    \ += operand[i+1];\n        }\n        else if (operator[i] == \"-\")\n      \
    \  {\n            result -= operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"*\")\n        {\n            result *= operand[i+1];\n        }\n     \
    \   else if (operator[i] == \"//\")\n        {\n            result /= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"**\")\n        {\n            result\
    \ = pow(result, operand[i+1]);\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp2waybrmc.d(61): unittest failure\n----------------\n??:?
    _d_unittestp [0x4291ed]\n??:? void tmp2waybrmc.__unittest_L56_C1() [0x42826d]\n??:?
    void tmp2waybrmc.__modtest() [0x428458]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dd43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428f46]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a9e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa78]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42a975]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x428f1d]\n??:? runModuleUnitTests [0x42db19]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4296b0]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x429637]\n??:? _d_run_main [0x4295a2]\n??:? main [0x42846b]\n??:?
    __libc_start_main [0x2ab25554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    if (operator.length != operand.length - 1)\n        return\
    \ -1;\n    \n    long result = operand[0];\n    int i = 0;\n    while (i < operator.length)\n\
    \    {\n        switch (operator[i])\n        {\n            case \"+\":\n   \
    \             result += operand[i + 1];\n                break;\n            case\
    \ \"-\":\n                result -= operand[i + 1];\n                break;\n\
    \            case \"*\":\n                result *= operand[i + 1];\n        \
    \        break;\n            case \"//\":\n                result /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                result\
    \ = pow(result, operand[i + 1]);\n                break;\n            default:\n\
    \                return -1;\n        }\n        i++;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvgf98j15.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    //Create a variable for the answer\n    long answer = operand[0];\n\
    \    //Iterate through the operator array\n    for(size_t i = 0; i < operator.length;\
    \ i++)\n    {\n        if(operator[i] == \"*\")\n        {\n            answer\
    \ *= operand[i+1];\n        }\n        else if(operator[i] == \"+\")\n       \
    \ {\n            answer += operand[i+1];\n        }\n        else if(operator[i]\
    \ == \"-\")\n        {\n            answer -= operand[i+1];\n        }\n     \
    \   else if(operator[i] == \"//\")\n        {\n            answer /= operand[i+1];\n\
    \        }\n        else if(operator[i] == \"**\")\n        {\n            answer\
    \ = pow(answer, operand[i+1]);\n        }\n    }\n    return answer;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv9r6uo66.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    foreach(int i, op; operator)\n\
    \    {\n        long op2 = operand[i+1];\n        switch(op)\n        {\n    \
    \        case '+': result += op2; break;\n            case '-': result -= op2;\
    \ break;\n            case '*': result *= op2; break;\n            case '//':\
    \ result /= op2; break;\n            case '**': result = pow(result, op2); break;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcfq67l_h.d(39): Error: unterminated character constant\n/tmp/tmpcfq67l_h.d(39):
    Error: unterminated character constant\n/tmp/tmpcfq67l_h.d(39): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpcfq67l_h.d(39): Error: found \''/=\'' instead
    of statement\n/tmp/tmpcfq67l_h.d(40): Error: unterminated character constant\n/tmp/tmpcfq67l_h.d(40):
    Error: unterminated character constant\n/tmp/tmpcfq67l_h.d(40): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpcfq67l_h.d(40): Error: found \''=\'' instead of
    statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcfq67l_h.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    foreach(i, op; operator)\n\
    \    {\n        if(op == \"+\")\n            result += operand[i+1];\n       \
    \ else if(op == \"-\")\n            result -= operand[i+1];\n        else if(op\
    \ == \"*\")\n            result *= operand[i+1];\n        else if(op == \"//\"\
    )\n            result /= operand[i+1];\n        else if(op == \"**\")\n      \
    \      result = pow(result, operand[i+1]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9kwoida1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\") result += operand[i+1];\n   \
    \     else if (operator[i] == \"-\") result -= operand[i+1];\n        else if\
    \ (operator[i] == \"*\") result *= operand[i+1];\n        else if (operator[i]\
    \ == \"//\") result /= operand[i+1];\n        else if (operator[i] == \"**\")\
    \ result = pow(result, operand[i+1]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr1164igm.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long temp = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++) {\n        switch (operator[i]) {\n            case '+':\n            \
    \    temp += operand[i + 1];\n                break;\n            case '-':\n\
    \                temp -= operand[i + 1];\n                break;\n           \
    \ case '*':\n                temp *= operand[i + 1];\n                break;\n\
    \            case '//':\n                temp /= operand[i + 1];\n           \
    \     break;\n            case '**':\n                temp = temp.pow(operand[i\
    \ + 1]);\n                break;\n        }\n    }\n    return temp;\n}\nlong\
    \ do_algebra(string[] operator, long[] operand) \n{\n    long temp = operand[0];\n\
    \    for (int i = 0; i < operator.length; i++) {\n        switch (operator[i])\
    \ {\n            case '+':\n                temp += operand[i + 1];\n        \
    \        break;\n            case '-':\n                temp -= operand[i + 1];\n\
    \                break;\n            case '*':\n                temp *= operand[i\
    \ + 1];\n                break;\n            case '//':\n                temp\
    \ /= operand[i + 1];\n                break;\n            case '**':\n       \
    \         temp = temp.pow(operand[i + 1]);\n                break;\n        }\n\
    \    }\n    return temp;\n}\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long temp = operand[0];\n    for (int i = 0; i < operator.length; i++)\
    \ {\n        switch (operator[i]) {\n            case '+':\n                temp\
    \ += operand[i + 1];\n                break;\n            case '-':\n        \
    \        temp -= operand[i + 1];\n                break;\n            case '*':\n\
    \                temp *= operand[i + 1];\n                break;\n           \
    \ case '//':\n                temp /= operand[i + 1];\n                break;\n\
    \            case '**':\n                temp = temp.pow(operand[i + 1]);\n  \
    \              break\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprb6wc7nq.d(42): Error: unterminated character constant\n/tmp/tmprb6wc7nq.d(42):
    Error: unterminated character constant\n/tmp/tmprb6wc7nq.d(43): Error: found \''temp\''
    when expecting \'':\''\n/tmp/tmprb6wc7nq.d(43): Error: found \''/=\'' instead
    of statement\n/tmp/tmprb6wc7nq.d(45): Error: unterminated character constant\n/tmp/tmprb6wc7nq.d(45):
    Error: unterminated character constant\n/tmp/tmprb6wc7nq.d(46): Error: found \''temp\''
    when expecting \'':\''\n/tmp/tmprb6wc7nq.d(46): Error: found \''=\'' instead of
    statement\n/tmp/tmprb6wc7nq.d(66): Error: unterminated character constant\n/tmp/tmprb6wc7nq.d(66):
    Error: unterminated character constant\n/tmp/tmprb6wc7nq.d(67): Error: found \''temp\''
    when expecting \'':\''\n/tmp/tmprb6wc7nq.d(67): Error: found \''/=\'' instead
    of statement\n/tmp/tmprb6wc7nq.d(69): Error: unterminated character constant\n/tmp/tmprb6wc7nq.d(69):
    Error: unterminated character constant\n/tmp/tmprb6wc7nq.d(70): Error: found \''temp\''
    when expecting \'':\''\n/tmp/tmprb6wc7nq.d(70): Error: found \''=\'' instead of
    statement\n/tmp/tmprb6wc7nq.d(90): Error: unterminated character constant\n/tmp/tmprb6wc7nq.d(90):
    Error: unterminated character constant\n/tmp/tmprb6wc7nq.d(91): Error: found \''temp\''
    when expecting \'':\''\n/tmp/tmprb6wc7nq.d(91): Error: found \''/=\'' instead
    of statement\n/tmp/tmprb6wc7nq.d(93): Error: unterminated character constant\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprb6wc7nq.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long total = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\") total += operand[i+1];\n    \
    \    else if (operator[i] == \"-\") total -= operand[i+1];\n        else if (operator[i]\
    \ == \"*\") total *= operand[i+1];\n        else if (operator[i] == \"//\") total\
    \ /= operand[i+1];\n        else if (operator[i] == \"**\") total = pow(total,\
    \ operand[i+1]);\n    }\n    return total;\n}\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8_1zpsmw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    foreach(k,v; operand)\n   \
    \ {\n        if(k == 0)\n            continue;\n        if(operator[k-1] == \"\
    +\")\n            result += v;\n        else if(operator[k-1] == \"-\")\n    \
    \        result -= v;\n        else if(operator[k-1] == \"*\")\n            result\
    \ *= v;\n        else if(operator[k-1] == \"//\")\n            result /= v;\n\
    \        else if(operator[k-1] == \"**\")\n            result = pow(result, v);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcf6f6pgj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (auto i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                result += operand[i + 1];\n                break;\n       \
    \     case \"-\":\n                result -= operand[i + 1];\n               \
    \ break;\n            case \"*\":\n                result *= operand[i + 1];\n\
    \                break;\n            case \"//\":\n                result /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                result\
    \ = power(result, operand[i + 1]);\n                break;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n   \
    \ assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"\
    +\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"\
    *\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1u9efv35.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                result += operand[i + 1];\n                break;\n       \
    \     case \"-\":\n                result -= operand[i + 1];\n               \
    \ break;\n            case \"*\":\n                result *= operand[i + 1];\n\
    \                break;\n            case \"//\":\n                result /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                result\
    \ = pow(result, operand[i + 1]);\n                break;\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1p1ptf1l.d(33): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1p1ptf1l.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    auto result = operand[0];\n    foreach(i, v; operand[1..$])\n\
    \    {\n        switch(operator[i - 1])\n        {\n            case \"+\": result\
    \ += v; break;\n            case \"-\": result -= v; break;\n            case\
    \ \"*\": result *= v; break;\n            case \"//\": result /= v; break;\n \
    \           case \"**\": result = (long)pow(result, v); break;\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n\
    \    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n   \
    \ assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpn2n2fvsi.d(39): Error: C style cast illegal, use cast(long)pow(result,
    v)\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn2n2fvsi.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (size_t i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n        {\n            result\
    \ += operand[i + 1];\n        }\n        else if (operator[i] == \"-\")\n    \
    \    {\n            result -= operand[i + 1];\n        }\n        else if (operator[i]\
    \ == \"*\")\n        {\n            result *= operand[i + 1];\n        }\n   \
    \     else if (operator[i] == \"//\")\n        {\n            result /= operand[i\
    \ + 1];\n        }\n        else if (operator[i] == \"**\")\n        {\n     \
    \       result = pow(result, operand[i + 1]);\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg93svtr9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    : result += operand[i+1]; break;\n            case \"-\": result -= operand[i+1];\
    \ break;\n            case \"*\": result *= operand[i+1]; break;\n           \
    \ case \"//\": result /= operand[i+1]; break;\n            case \"**\": result\
    \ = pow(result, operand[i+1]); break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgvvvovdc.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long a = operand[0];\n    long b = operand[1];\n    foreach(int\
    \ i, string s; operand[i+1], operator)\n    {\n        if(s == \"+\")\n      \
    \      a += b;\n        else if(s == \"-\")\n            a -= b;\n        else\
    \ if(s == \"*\")\n            a *= b;\n        else if(s == \"//\")\n        \
    \    a /= b;\n        else if(s == \"**\")\n            a = power(a, b);\n   \
    \     b = operand[i+2];\n    }\n    return a;\n}\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxv8qyhm8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (long i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n        {\n            result\
    \ += operand[i+1];\n        }\n        else if (operator[i] == \"-\")\n      \
    \  {\n            result -= operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"*\")\n        {\n            result *= operand[i+1];\n        }\n     \
    \   else if (operator[i] == \"//\")\n        {\n            result /= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"**\")\n        {\n            result\
    \ = pow(result, operand[i+1]);\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_vvcs10h.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    // Write your code here\n    long result;\n    if(operator.length\
    \ != operand.length - 1)\n        throw new Exception(\"Invalid number of operators\
    \ or operands\");\n    result = operand[0];\n    for(int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch(operator[i])\n        {\n            case \"+\"\
    :\n                result += operand[i+1];\n                break;\n         \
    \   case \"-\":\n                result -= operand[i+1];\n                break;\n\
    \            case \"*\":\n                result *= operand[i+1];\n          \
    \      break;\n            case \"//\":\n                result /= operand[i+1];\n\
    \                break;\n            case \"**\":\n                result = (long)pow(result,\
    \ operand[i+1]);\n                break;\n            default:\n             \
    \   throw new Exception(\"Invalid operator found\");\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpc35li7s3.d(52): Error: C style cast illegal, use cast(long)pow(result,
    operand[i + 1])\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc35li7s3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    enum OPERATORS\n    {\n        '+', '-', '*', '/', '%', '^'\n\
    \    }\n    long[] copy = operand.dup;\n    long result = copy[0];\n    for(int\
    \ i = 0; i < operator.length; i++)\n    {\n        if(operator[i] == \"+\")\n\
    \        {\n            result += copy[i+1];\n        }\n        else if(operator[i]\
    \ == \"-\")\n        {\n            result -= copy[i+1];\n        }\n        else\
    \ if(operator[i] == \"*\")\n        {\n            result *= copy[i+1];\n    \
    \    }\n        else if(operator[i] == \"/\")\n        {\n            result /=\
    \ copy[i+1];\n        }\n        else if(operator[i] == \"%\")\n        {\n  \
    \          result %= copy[i+1];\n        }\n        else if(operator[i] == \"\
    ^\")\n        {\n            result = pow(result, copy[i+1]);\n        }\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n\
    \    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n   \
    \ assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkkbjcujz.d(32): Error: basic type expected, not 43U\n/tmp/tmpkkbjcujz.d(32):
    Error: type only allowed if anonymous enum and no enum type\n/tmp/tmpkkbjcujz.d(32):
    Error: if type, there must be an initializer\n/tmp/tmpkkbjcujz.d(32): Error: found
    \''43U\'' when expecting \'',\''\n/tmp/tmpkkbjcujz.d(32): Error: basic type expected,
    not ,\n/tmp/tmpkkbjcujz.d(32): Error: type only allowed if anonymous enum and
    no enum type\n/tmp/tmpkkbjcujz.d(32): Error: if type, there must be an initializer\n/tmp/tmpkkbjcujz.d(32):
    Error: basic type expected, not 45U\n/tmp/tmpkkbjcujz.d(32): Error: type only
    allowed if anonymous enum and no enum type\n/tmp/tmpkkbjcujz.d(32): Error: if
    type, there must be an initializer\n/tmp/tmpkkbjcujz.d(32): Error: found \''45U\''
    when expecting \'',\''\n/tmp/tmpkkbjcujz.d(32): Error: basic type expected, not
    ,\n/tmp/tmpkkbjcujz.d(32): Error: type only allowed if anonymous enum and no enum
    type\n/tmp/tmpkkbjcujz.d(32): Error: if type, there must be an initializer\n/tmp/tmpkkbjcujz.d(32):
    Error: basic type expected, not 42U\n/tmp/tmpkkbjcujz.d(32): Error: type only
    allowed if anonymous enum and no enum type\n/tmp/tmpkkbjcujz.d(32): Error: if
    type, there must be an initializer\n/tmp/tmpkkbjcujz.d(32): Error: found \''42U\''
    when expecting \'',\''\n/tmp/tmpkkbjcujz.d(32): Error: basic type expected, not
    ,\n/tmp/tmpkkbjcujz.d(32): Error: type only allowed if anonymous enum and no enum
    type\n/tmp/tmpkkbjcujz.d(32): Error: if type, there must be an initializer\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkkbjcujz.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        result = switch(operator[i])\n        {\n            case\
    \ \"+\" -> result + operand[i + 1];\n            case \"-\" -> result - operand[i\
    \ + 1];\n            case \"*\" -> result * operand[i + 1];\n            case\
    \ \"//\" -> result / operand[i + 1];\n            case \"**\" -> (long)pow(result,\
    \ operand[i + 1]);\n            default -> result;\n        };\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4gn099x2.d(33): Error: expression expected, not \''switch\''\n/tmp/tmp4gn099x2.d(34):
    Error: found \''{\'' when expecting \'';\'' following statement\n/tmp/tmp4gn099x2.d(35):
    Error: expression expected, not \''>\''\n/tmp/tmp4gn099x2.d(35): Error: found
    \''result\'' when expecting \'':\''\n/tmp/tmp4gn099x2.d(36): Error: expression
    expected, not \''>\''\n/tmp/tmp4gn099x2.d(36): Error: found \''result\'' when
    expecting \'':\''\n/tmp/tmp4gn099x2.d(37): Error: expression expected, not \''>\''\n/tmp/tmp4gn099x2.d(37):
    Error: found \''result\'' when expecting \'':\''\n/tmp/tmp4gn099x2.d(38): Error:
    expression expected, not \''>\''\n/tmp/tmp4gn099x2.d(38): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmp4gn099x2.d(38): Error: found \''/\'' instead of
    statement\n/tmp/tmp4gn099x2.d(39): Error: expression expected, not \''>\''\n/tmp/tmp4gn099x2.d(39):
    Error: found \'')\'' when expecting \''.\'' following long\n/tmp/tmp4gn099x2.d(39):
    Error: found \'';\'' when expecting \'',\''\n/tmp/tmp4gn099x2.d(40): Error: expression
    expected, not \''default\''\n/tmp/tmp4gn099x2.d(40): Error: expression expected,
    not \''>\''\n/tmp/tmp4gn099x2.d(40): Error: found \''result\'' when expecting
    \'',\''\n/tmp/tmp4gn099x2.d(40): Error: expression expected, not \'';\''\n/tmp/tmp4gn099x2.d(41):
    Error: found \''}\'' when expecting \'',\''\n/tmp/tmp4gn099x2.d(41): Error: expression
    expected, not \'';\''\n/tmp/tmp4gn099x2.d(42): Error: found \''}\'' when expecting
    \'',\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4gn099x2.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++) {\n        string op = operator[i];\n        long op2 = operand[i + 1];\n\
    \        switch (op) {\n            case \"+\":\n                result += op2;\n\
    \                break;\n            case \"-\":\n                result -= op2;\n\
    \                break;\n            case \"*\":\n                result *= op2;\n\
    \                break;\n            case \"//\":\n                result /= op2;\n\
    \                break;\n            case \"**\":\n                result = powl(result,\
    \ op2);\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzyw6c_aj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    int i = 0;\n    foreach(string\
    \ op; operator)\n    {\n        switch(op)\n        {\n            case \"+\"\
    :\n                result += operand[i+1];\n                break;\n         \
    \   case \"-\":\n                result -= operand[i+1];\n                break;\n\
    \            case \"*\":\n                result *= operand[i+1];\n          \
    \      break;\n            case \"//\":\n                result /= operand[i+1];\n\
    \                break;\n            case \"**\":\n                result ^= operand[i+1];\n\
    \                break;\n        }\n        i++;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1zipnqnw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (auto i = 0; i < operator.length;\
    \ i++) {\n        switch (operator[i]) {\n            case '+':\n            \
    \    result += operand[i + 1];\n                break;\n            case '-':\n\
    \                result -= operand[i + 1];\n                break;\n         \
    \   case '*':\n                result *= operand[i + 1];\n                break;\n\
    \            case '//':\n                result /= operand[i + 1];\n         \
    \       break;\n            case '**':\n                result = pow(result, operand[i\
    \ + 1]);\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnlka55jx.d(42): Error: unterminated character constant\n/tmp/tmpnlka55jx.d(42):
    Error: unterminated character constant\n/tmp/tmpnlka55jx.d(43): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpnlka55jx.d(43): Error: found \''/=\'' instead
    of statement\n/tmp/tmpnlka55jx.d(45): Error: unterminated character constant\n/tmp/tmpnlka55jx.d(45):
    Error: unterminated character constant\n/tmp/tmpnlka55jx.d(46): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpnlka55jx.d(46): Error: found \''=\'' instead of
    statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnlka55jx.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n  long result = operand[0];\n  for (int i = 0; i < operator.length;\
    \ i++) {\n    switch (operator[i]) {\n      case \"+\":\n        result += operand[i\
    \ + 1];\n        break;\n      case \"-\":\n        result -= operand[i + 1];\n\
    \        break;\n      case \"*\":\n        result *= operand[i + 1];\n      \
    \  break;\n      case \"//\":\n        result /= operand[i + 1];\n        break;\n\
    \      case \"**\":\n        result = pow(result, operand[i + 1]);\n        break;\n\
    \    }\n  }\n  return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp071xoa9j.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long[] numbers = operand;\n    string[] ops = operator;\n\
    \    long result = numbers[0];\n    for (int i = 0; i < ops.length; i++)\n   \
    \ {\n        switch (ops[i])\n        {\n            case \"+\":\n           \
    \     result += numbers[i + 1];\n                break;\n            case \"-\"\
    :\n                result -= numbers[i + 1];\n                break;\n       \
    \     case \"*\":\n                result *= numbers[i + 1];\n               \
    \ break;\n            case \"//\":\n                result /= numbers[i + 1];\n\
    \                break;\n            case \"**\":\n                result = pow(result,\
    \ numbers[i + 1]);\n                break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp3xvygr6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++) {\n        switch (operator[i]) {\n            case \"+\":\n          \
    \      result += operand[i + 1];\n                break;\n            case \"\
    -\":\n                result -= operand[i + 1];\n                break;\n    \
    \        case \"*\":\n                result *= operand[i + 1];\n            \
    \    break;\n            case \"//\":\n                result /= operand[i + 1];\n\
    \                break;\n            case \"**\":\n                result = pow(result,\
    \ operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprtzgimth.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                result += operand[i + 1];\n                break;\n       \
    \     case \"-\":\n                result -= operand[i + 1];\n               \
    \ break;\n            case \"*\":\n                result *= operand[i + 1];\n\
    \                break;\n            case \"//\":\n                result /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                result\
    \ = result ^^ operand[i + 1];\n                break;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv2sl0s1r.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\") result += operand[i+1];\n   \
    \     else if (operator[i] == \"-\") result -= operand[i+1];\n        else if\
    \ (operator[i] == \"*\") result *= operand[i+1];\n        else if (operator[i]\
    \ == \"//\") result /= operand[i+1];\n        else if (operator[i] == \"**\")\
    \ result = pow(result, operand[i+1]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr1164igm.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long res = operand[0];\n    for (size_t i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case '+':\
    \ res += operand[i + 1]; break;\n            case '-': res -= operand[i + 1];\
    \ break;\n            case '*': res *= operand[i + 1]; break;\n            case\
    \ '//': res /= operand[i + 1]; break;\n            case '**': res = pow(res, operand[i\
    \ + 1]); break;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias\
    \ candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L,\
    \ 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L,\
    \ 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppb2the7d.d(38): Error: unterminated character constant\n/tmp/tmppb2the7d.d(38):
    Error: unterminated character constant\n/tmp/tmppb2the7d.d(38): Error: found \''res\''
    when expecting \'':\''\n/tmp/tmppb2the7d.d(38): Error: found \''/=\'' instead
    of statement\n/tmp/tmppb2the7d.d(39): Error: unterminated character constant\n/tmp/tmppb2the7d.d(39):
    Error: unterminated character constant\n/tmp/tmppb2the7d.d(39): Error: found \''res\''
    when expecting \'':\''\n/tmp/tmppb2the7d.d(39): Error: found \''=\'' instead of
    statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppb2the7d.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++) {\n        switch (operator[i]) {\n            case \"+\":\n          \
    \      result += operand[i + 1];\n                break;\n            case \"\
    -\":\n                result -= operand[i + 1];\n                break;\n    \
    \        case \"*\":\n                result *= operand[i + 1];\n            \
    \    break;\n            case \"//\":\n                result /= operand[i + 1];\n\
    \                break;\n            case \"**\":\n                result = pow(result,\
    \ operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprtzgimth.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{ \n   long result = operand[0];\n  \n   for(int i = 0; i < operator.length;\
    \ i++)\n   {\n       switch(operator[i])\n       {\n           case \"+\": result\
    \ += operand[i+1];\n           break;\n           case \"-\": result -= operand[i+1];\n\
    \           break;\n           case \"*\": result *= operand[i+1];\n         \
    \  break;\n           case \"//\": result /= operand[i+1];\n           break;\n\
    \           case \"**\": result = pow(result, operand[i+1]);\n           break;\n\
    \       }\n   }\n   return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpklt0xhl8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long ret = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    : ret += operand[i+1]; break;\n            case \"-\": ret -= operand[i+1]; break;\n\
    \            case \"*\": ret *= operand[i+1]; break;\n            case \"//\"\
    : ret /= operand[i+1]; break;\n            case \"**\": ret = (long)pow(ret, operand[i+1]);\
    \ break;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz87p4dny.d(39): Error: C style cast illegal, use cast(long)pow(ret,
    operand[i + 1])\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz87p4dny.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long ans = operand[0];\n    long i = 0;\n    while(i < operator.length)\n\
    \    {\n        switch(operator[i])\n        {\n            case \"+\":\n    \
    \            ans += operand[i+1];\n                break;\n            case \"\
    -\":\n                ans -= operand[i+1];\n                break;\n         \
    \   case \"*\":\n                ans *= operand[i+1];\n                break;\n\
    \            case \"//\":\n                ans /= operand[i+1];\n            \
    \    break;\n            case \"**\":\n                ans = (long)pow(ans, operand[i+1]);\n\
    \                break;\n        }\n        i++;\n    }\n    return ans;\n}\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_nkrjyna.d(49): Error: C style cast illegal, use cast(long)pow(ans,
    operand[i + 1])\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_nkrjyna.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    static long do_math(long a, long b, string op)\n    {\n  \
    \      if (op == \"+\")\n            return a + b;\n        else if (op == \"\
    -\")\n            return a - b;\n        else if (op == \"*\")\n            return\
    \ a * b;\n        else if (op == \"//\")\n            return a / b;\n        else\
    \ if (op == \"**\")\n            return (long)pow(a, b);\n        else\n     \
    \       return long.min;\n    }\n    long result = operand[0];\n    for (int i\
    \ = 0; i < operator.length; i++)\n    {\n        result = do_math(result, operand[i\
    \ + 1], operator[i]);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5ohtdu_m.d(41): Error: C style cast illegal, use cast(long)pow(a,
    b)\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5ohtdu_m.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    long index = 0;\n    int opSize\
    \ = operator.length;\n    foreach(string o; opSize)\n    {\n        switch(o)\n\
    \        {\n            case \"+\":\n                result += operand[index+1];\n\
    \                break;\n            case \"-\":\n                result -= operand[index+1];\n\
    \                break;\n            case \"*\":\n                result *= operand[index+1];\n\
    \                break;\n            case \"//\":\n                result /= operand[index+1];\n\
    \                break;\n            case \"**\":\n                result = pow(result,\
    \ operand[index+1]);\n                break;\n        }\n        index++;\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n\
    \    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n   \
    \ assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpku3dhgiy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n  long current_res = operand[0];\n  int i = 0;\n  while(i < operator.length)\n\
    \  {\n    switch(operator[i])\n    {\n      case \"+\":\n      {\n        current_res\
    \ += operand[i+1];\n        break;\n      }\n      case \"-\":\n      {\n    \
    \    current_res -= operand[i+1];\n        break;\n      }\n      case \"*\":\n\
    \      {\n        current_res *= operand[i+1];\n        break;\n      }\n    \
    \  case \"//\":\n      {\n        current_res /= operand[i+1];\n        break;\n\
    \      }\n      case \"**\":\n      {\n        current_res = power(current_res,\
    \ operand[i+1]);\n        break;\n      }\n    }\n    i++;\n  }\n  return current_res;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbgbej519.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long x = operand[0];\n    foreach(int i, string op; zip(i,\
    \ op; operand[1..$], operator)) {\n        switch(op) {\n            case \"+\"\
    : x += operand[i+1]; break;\n            case \"-\": x -= operand[i+1]; break;\n\
    \            case \"*\": x *= operand[i+1]; break;\n            case \"//\": x\
    \ /= operand[i+1]; break;\n            case \"**\": x = pow(x, operand[i+1]);\
    \ break;\n        }\n    }\n    return x;\n}\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdxs0ndwj.d(31): Error: found \'';\'' when expecting \'',\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdxs0ndwj.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++) {\n        if (operator[i] == \"+\") result += operand[i+1];\n        else\
    \ if (operator[i] == \"-\") result -= operand[i+1];\n        else if (operator[i]\
    \ == \"*\") result *= operand[i+1];\n        else if (operator[i] == \"//\") result\
    \ /= operand[i+1];\n        else if (operator[i] == \"**\") result = (long)pow(result,\
    \ operand[i+1]);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1zhwpji7.d(36): Error: C style cast illegal, use cast(long)pow(result,
    operand[i + 1])\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1zhwpji7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long total = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n        {\n            total\
    \ += operand[i+1];\n        }\n        else if (operator[i] == \"-\")\n      \
    \  {\n            total -= operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"*\")\n        {\n            total *= operand[i+1];\n        }\n      \
    \  else if (operator[i] == \"//\")\n        {\n            total /= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"**\")\n        {\n            total\
    \ = pow(total, operand[i+1]);\n        }\n    }\n    return total;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9d48_ps3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n        {\n            result\
    \ += operand[i+1];\n        }\n        else if (operator[i] == \"-\")\n      \
    \  {\n            result -= operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"*\")\n        {\n            result *= operand[i+1];\n        }\n     \
    \   else if (operator[i] == \"//\")\n        {\n            result /= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"**\")\n        {\n            result\
    \ = pow(result, operand[i+1]);\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp2waybrmc.d(61): unittest failure\n----------------\n??:?
    _d_unittestp [0x4291ed]\n??:? void tmp2waybrmc.__unittest_L56_C1() [0x42826d]\n??:?
    void tmp2waybrmc.__modtest() [0x428458]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dd43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428f46]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a9e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa78]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42a975]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x428f1d]\n??:? runModuleUnitTests [0x42db19]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4296b0]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x429637]\n??:? _d_run_main [0x4295a2]\n??:? main [0x42846b]\n??:?
    __libc_start_main [0x2ab25554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    long index = 0;\n    foreach(var\
    \ op; operand)\n    {\n        if(op == operand[0])\n            continue;\n \
    \       result = doOperation(result, operand[index], operator[index - 1]);\n \
    \       index++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxuut69rj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    foreach(i, op; operator)\n\
    \    {\n        switch(op)\n        {\n            case \"+\":\n             \
    \   result += operand[i+1];\n                break;\n            case \"-\":\n\
    \                result -= operand[i+1];\n                break;\n           \
    \ case \"*\":\n                result *= operand[i+1];\n                break;\n\
    \            case \"//\":\n                result /= operand[i+1];\n         \
    \       break;\n            case \"**\":\n                result = pow(result,\
    \ operand[i+1]);\n                break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw5rhaq9g.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++) {\n        if (operator[i] == \"+\") {\n            result += operand[i\
    \ + 1];\n        } else if (operator[i] == \"-\") {\n            result -= operand[i\
    \ + 1];\n        } else if (operator[i] == \"*\") {\n            result *= operand[i\
    \ + 1];\n        } else if (operator[i] == \"//\") {\n            result /= operand[i\
    \ + 1];\n        } else if (operator[i] == \"**\") {\n            result = long(pow(result,\
    \ operand[i + 1]));\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"\
    ], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L,\
    \ 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) ==\
    \ 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpfkp3bfo0.d(51): unittest failure\n----------------\n??:?
    _d_unittestp [0x4291ed]\n??:? void tmpfkp3bfo0.__unittest_L46_C1() [0x42826d]\n??:?
    void tmpfkp3bfo0.__modtest() [0x428458]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dd43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428f46]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a9e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa78]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42a975]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x428f1d]\n??:? runModuleUnitTests [0x42db19]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4296b0]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x429637]\n??:? _d_run_main [0x4295a2]\n??:? main [0x42846b]\n??:?
    __libc_start_main [0x5f015554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n  long result = operand[0];\n  foreach(i, op; operator)\n  {\n\
    \    if(op == \"+\") \n    {\n      result += operand[i+1];\n    }\n    else if(op\
    \ == \"-\") \n    {\n      result -= operand[i+1];\n    }\n    else if(op == \"\
    *\") \n    {\n      result *= operand[i+1];\n    }\n    else if(op == \"//\")\
    \ \n    {\n      result /= operand[i+1];\n    }\n    else if(op == \"**\") \n\
    \    {\n      result = result.pow(operand[i+1]);\n    }\n  }\n  return result;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2aco0_em.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n        {\n            result\
    \ += operand[i+1];\n        }\n        else if (operator[i] == \"-\")\n      \
    \  {\n            result -= operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"*\")\n        {\n            result *= operand[i+1];\n        }\n     \
    \   else if (operator[i] == \"//\")\n        {\n            result /= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"**\")\n        {\n            result\
    \ = pow(result, operand[i+1]);\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp2waybrmc.d(61): unittest failure\n----------------\n??:?
    _d_unittestp [0x4291ed]\n??:? void tmp2waybrmc.__unittest_L56_C1() [0x42826d]\n??:?
    void tmp2waybrmc.__modtest() [0x428458]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dd43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428f46]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a9e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa78]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42a975]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x428f1d]\n??:? runModuleUnitTests [0x42db19]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4296b0]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x429637]\n??:? _d_run_main [0x4295a2]\n??:? main [0x42846b]\n??:?
    __libc_start_main [0x2ab25554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    foreach(i, operation; zip(operator,\
    \ operand[1..$]))\n    {\n        switch(operation[0])\n        {\n          \
    \  case \"+\":\n                result += operation[1];\n                break;\n\
    \            case \"-\":\n                result -= operation[1];\n          \
    \      break;\n            case \"*\":\n                result *= operation[1];\n\
    \                break;\n            case \"//\":\n                result /= operation[1];\n\
    \                break;\n            case \"**\":\n                result = pow(result,\
    \ operation[1]);\n                break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdhjrxgv6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    foreach(elem; zip(operator,\
    \ operand[1..$]))\n    {\n        long x = elem[1];\n        switch(elem[0])\n\
    \        {\n            case \"+\":\n                result += x;\n          \
    \      break;\n            case \"-\":\n                result -= x;\n       \
    \         break;\n            case \"*\":\n                result *= x;\n    \
    \            break;\n            case \"//\":\n                result /= x;\n\
    \                break;\n            case \"**\":\n                result = (long)pow(result,\
    \ x);\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpogy4eauc.d(49): Error: C style cast illegal, use cast(long)pow(result,
    x)\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpogy4eauc.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                result += operand[i + 1];\n                break;\n       \
    \     case \"-\":\n                result -= operand[i + 1];\n               \
    \ break;\n            case \"*\":\n                result *= operand[i + 1];\n\
    \                break;\n            case \"//\":\n                result /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                result\
    \ = pow(result, operand[i + 1]);\n                break;\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1p1ptf1l.d(33): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1p1ptf1l.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n        {\n            result\
    \ += operand[i+1];\n        }\n        else if (operator[i] == \"-\")\n      \
    \  {\n            result -= operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"*\")\n        {\n            result *= operand[i+1];\n        }\n     \
    \   else if (operator[i] == \"//\")\n        {\n            result /= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"**\")\n        {\n            result\
    \ = pow(result, operand[i+1]);\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp2waybrmc.d(61): unittest failure\n----------------\n??:?
    _d_unittestp [0x4291ed]\n??:? void tmp2waybrmc.__unittest_L56_C1() [0x42826d]\n??:?
    void tmp2waybrmc.__modtest() [0x428458]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dd43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428f46]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a9e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa78]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42a975]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x428f1d]\n??:? runModuleUnitTests [0x42db19]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4296b0]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x429637]\n??:? _d_run_main [0x4295a2]\n??:? main [0x42846b]\n??:?
    __libc_start_main [0x2ab25554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                result += operand[i + 1];\n                break;\n       \
    \     case \"-\":\n                result -= operand[i + 1];\n               \
    \ break;\n            case \"*\":\n                result *= operand[i + 1];\n\
    \                break;\n            case \"//\":\n                result /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                result\
    \ = pow(result, operand[i + 1]);\n                break;\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1p1ptf1l.d(33): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1p1ptf1l.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    auto result = operand[0];\n    foreach(i, op; operator)\n\
    \    {\n        auto operand_index = i + 1;\n        if(op == \"+\")\n       \
    \ {\n            result += operand[operand_index];\n        }\n        else if(op\
    \ == \"-\")\n        {\n            result -= operand[operand_index];\n      \
    \  }\n        else if(op == \"*\")\n        {\n            result *= operand[operand_index];\n\
    \        }\n        else if(op == \"//\")\n        {\n            result /= operand[operand_index];\n\
    \        }\n        else if(op == \"**\")\n        {\n            result = (long)pow(result,\
    \ operand[operand_index]);\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp15dazdq3.d(52): Error: C style cast illegal, use cast(long)pow(result,
    operand[operand_index])\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp15dazdq3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n  int op_length = operator.length;\n  int num_length = operand.length;\n\
    \  long result = operand[0];\n  long num;\n  foreach(string op; operator)\n  {\n\
    \    num = operand[op_length];\n    switch(op)\n    {\n      case \"+\":\n   \
    \     result += num;\n        break;\n      case \"-\":\n        result -= num;\n\
    \        break;\n      case \"*\":\n        result *= num;\n        break;\n \
    \     case \"//\":\n        result /= num;\n        break;\n      case \"**\"\
    :\n        result = pow(result, num);\n        break;\n    }\n    op_length++;\n\
    \  }\n  return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n\
    \    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n   \
    \ assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8rv_8crf.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    auto result = operand[0];\n    for (auto i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n            result += operand[i\
    \ + 1];\n        else if (operator[i] == \"-\")\n            result -= operand[i\
    \ + 1];\n        else if (operator[i] == \"*\")\n            result *= operand[i\
    \ + 1];\n        else if (operator[i] == \"//\")\n            result /= operand[i\
    \ + 1];\n        else if (operator[i] == \"**\")\n            result = pow(result,\
    \ operand[i + 1]);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprr_rrdpd.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n        {\n            result\
    \ += operand[i+1];\n        }\n        else if (operator[i] == \"-\")\n      \
    \  {\n            result -= operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"*\")\n        {\n            result *= operand[i+1];\n        }\n     \
    \   else if (operator[i] == \"//\")\n        {\n            result /= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"**\")\n        {\n            result\
    \ = pow(result, operand[i+1]);\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp2waybrmc.d(61): unittest failure\n----------------\n??:?
    _d_unittestp [0x4291ed]\n??:? void tmp2waybrmc.__unittest_L56_C1() [0x42826d]\n??:?
    void tmp2waybrmc.__modtest() [0x428458]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dd43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428f46]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a9e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa78]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42a975]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x428f1d]\n??:? runModuleUnitTests [0x42db19]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4296b0]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x429637]\n??:? _d_run_main [0x4295a2]\n??:? main [0x42846b]\n??:?
    __libc_start_main [0x2ab25554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                result += operand[i + 1];\n                break;\n       \
    \     case \"-\":\n                result -= operand[i + 1];\n               \
    \ break;\n            case \"*\":\n                result *= operand[i + 1];\n\
    \                break;\n            case \"//\":\n                result /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                result\
    \ = (long)pow(result, operand[i + 1]);\n                break;\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n\
    \    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n   \
    \ assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_08cvjey.d(48): Error: C style cast illegal, use `cast(long)pow(result,
    operand[i + 1])`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_08cvjey.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    if (operator.length == 0) \n        return operand[0];\n \
    \   \n    if (operator.length == 1) \n        return (operator[0] == \"+\") ?\
    \ operand[0] + operand[1] : operand[0] - operand[1];\n    \n    if (operator.length\
    \ == 2) \n        return (operator[0] == \"+\") ? operand[0] + operand[1] * operand[2]\
    \ : operand[0] - operand[1] * operand[2];\n    \n    if (operator.length == 3)\
    \ \n        return (operator[0] == \"+\") ? operand[0] + operand[1] * operand[2]\
    \ / operand[3] : operand[0] - operand[1] * operand[2] / operand[3];\n    \n  \
    \  if (operator.length == 4) \n        return (operator[0] == \"+\") ? operand[0]\
    \ + operand[1] * operand[2] / operand[3] ^ operand[4] : operand[0] - operand[1]\
    \ * operand[2] / operand[3] ^ operand[4];\n    \n    return 0;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpljnw1jf7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long ans = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++) {\n        if (operator[i] == \"+\") {\n            ans += operand[i +\
    \ 1];\n        } else if (operator[i] == \"-\") {\n            ans -= operand[i\
    \ + 1];\n        } else if (operator[i] == \"*\") {\n            ans *= operand[i\
    \ + 1];\n        } else if (operator[i] == \"//\") {\n            ans /= operand[i\
    \ + 1];\n        } else if (operator[i] == \"**\") {\n            ans = pow(ans,\
    \ operand[i + 1]);\n        }\n    }\n    return ans;\n}\nunittest\n{\n    alias\
    \ candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L,\
    \ 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L,\
    \ 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdjyhfg3e.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (long i = 0; i < operator.length;\
    \ i++) {\n        if (operator[i] == \"+\") {\n            result += operand[i\
    \ + 1];\n        } else if (operator[i] == \"-\") {\n            result -= operand[i\
    \ + 1];\n        } else if (operator[i] == \"*\") {\n            result *= operand[i\
    \ + 1];\n        } else if (operator[i] == \"//\") {\n            result /= operand[i\
    \ + 1];\n        } else if (operator[i] == \"**\") {\n            result = cast(long)pow(result,\
    \ operand[i + 1]);\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"\
    ], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L,\
    \ 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) ==\
    \ 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz_eg9aog.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    for (int i = 0; i < operator.length; i++)\n    {\n       \
    \ switch (operator[i])\n        {\n            case \"+\":\n                operand[i\
    \ + 1] = operand[i] + operand[i + 1];\n                break;\n            case\
    \ \"-\":\n                operand[i + 1] = operand[i] - operand[i + 1];\n    \
    \            break;\n            case \"*\":\n                operand[i + 1] =\
    \ operand[i] * operand[i + 1];\n                break;\n            case \"//\"\
    :\n                operand[i + 1] = operand[i] / operand[i + 1];\n           \
    \     break;\n            case \"**\":\n                operand[i + 1] = long(pow(operand[i],\
    \ operand[i + 1]));\n                break;\n        }\n    }\n    return operand[operand.length\
    \ - 1];\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptyv5cx83.d(47): Error: found \''(\'' when expecting \''.\''
    following long\n/tmp/tmptyv5cx83.d(47): Error: found \'')\'' when expecting \'';\''
    following statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptyv5cx83.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    long operandCount = operand.length();\n\
    \    long opCount = operator.length();\n    if(opCount < 1 || operandCount < 2)\n\
    \        return result;\n    for(long i = 0; i < opCount; i++)\n    {\n      \
    \  if(operator[i] == \"+\")\n            result += operand[i+1];\n        else\
    \ if(operator[i] == \"-\")\n            result -= operand[i+1];\n        else\
    \ if(operator[i] == \"*\")\n            result *= operand[i+1];\n        else\
    \ if(operator[i] == \"//\")\n            result /= operand[i+1];\n        else\
    \ if(operator[i] == \"**\")\n            result = pow(result, operand[i+1]);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk6yfuu92.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long total = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n        {\n            total\
    \ += operand[i+1];\n        }\n        else if (operator[i] == \"-\")\n      \
    \  {\n            total -= operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"*\")\n        {\n            total *= operand[i+1];\n        }\n      \
    \  else if (operator[i] == \"//\")\n        {\n            total /= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"**\")\n        {\n            total\
    \ = pow(total, operand[i+1]);\n        }\n    }\n    return total;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9d48_ps3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    if (operator.length == 0)\n        return operand[0];\n  \
    \  \n    ulong i = 0;\n    long res = operand[0];\n    for (i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n            res += operand[i+1];\n\
    \        else if (operator[i] == \"-\")\n            res -= operand[i+1];\n  \
    \      else if (operator[i] == \"*\")\n            res *= operand[i+1];\n    \
    \    else if (operator[i] == \"//\")\n            res /= operand[i+1];\n     \
    \   else if (operator[i] == \"**\")\n            res = pow(res, operand[i+1]);\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n\
    \    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n   \
    \ assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8alovap8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++) {\n        if (operator[i] == \"+\") result += operand[i+1];\n        else\
    \ if (operator[i] == \"-\") result -= operand[i+1];\n        else if (operator[i]\
    \ == \"*\") result *= operand[i+1];\n        else if (operator[i] == \"//\") result\
    \ /= operand[i+1];\n        else if (operator[i] == \"**\") result = (long)pow(result,\
    \ operand[i+1]);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1zhwpji7.d(36): Error: C style cast illegal, use cast(long)pow(result,
    operand[i + 1])\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1zhwpji7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long[] result = new long[operand.length - 1];\n    result[0]\
    \ = operand[0];\n    for (long i = 1, j = 0; i < operand.length; i++, j++) {\n\
    \        if (operator[j] == \"+\") {\n            result[i] = result[i - 1] +\
    \ operand[i];\n        } else if (operator[j] == \"-\") {\n            result[i]\
    \ = result[i - 1] - operand[i];\n        } else if (operator[j] == \"*\") {\n\
    \            result[i] = result[i - 1] * operand[i];\n        } else if (operator[j]\
    \ == \"//\") {\n            result[i] = result[i - 1] / operand[i];\n        }\
    \ else if (operator[j] == \"**\") {\n            result[i] = pow(result[i - 1],\
    \ operand[i]);\n        }\n    }\n    return result[result.length - 1];\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp35plmxzi.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    if (operator.length < 1 || operand.length < 2)\n        return\
    \ -1;\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                result += operand[i + 1];\n                break;\n       \
    \     case \"-\":\n                result -= operand[i + 1];\n               \
    \ break;\n            case \"*\":\n                result *= operand[i + 1];\n\
    \                break;\n            case \"//\":\n                result /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                result\
    \ = (long)pow(result, operand[i + 1]);\n                break;\n            default:\n\
    \                break;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxh8zvb5x.d(50): Error: C style cast illegal, use cast(long)pow(result,
    operand[i + 1])\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxh8zvb5x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    if (operand.length == 1)\n        return operand[0];\n   \
    \ long result = operand[0];\n    long i = 1;\n    foreach (var elem in operator)\
    \ {\n        if (elem == \"+\")\n            result += operand[i];\n        else\
    \ if (elem == \"-\")\n            result -= operand[i];\n        else if (elem\
    \ == \"*\")\n            result *= operand[i];\n        else if (elem == \"//\"\
    )\n            result /= operand[i];\n        else if (elem == \"**\")\n     \
    \       result = (long)pow(result, operand[i]);\n        i++;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp20xbyt8x.d(34): Error: found \''in\'' when expecting \'';\''\n/tmp/tmp20xbyt8x.d(44):
    Error: C style cast illegal, use cast(long)pow(result, operand[i])\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp20xbyt8x.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    int last_number = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++) {\n        switch (operator[i]) {\n            case \"+\":\n          \
    \      last_number += operand[i + 1];\n                break;\n            case\
    \ \"-\":\n                last_number -= operand[i + 1];\n                break;\n\
    \            case \"*\":\n                last_number *= operand[i + 1];\n   \
    \             break;\n            case \"//\":\n                last_number /=\
    \ operand[i + 1];\n                break;\n            case \"**\":\n        \
    \        last_number = pow(last_number, operand[i + 1]);\n                break;\n\
    \        }\n    }\n    return last_number;\n}\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpobnsql3r.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (size_t i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n        {\n            result\
    \ += operand[i + 1];\n        }\n        else if (operator[i] == \"-\")\n    \
    \    {\n            result -= operand[i + 1];\n        }\n        else if (operator[i]\
    \ == \"*\")\n        {\n            result *= operand[i + 1];\n        }\n   \
    \     else if (operator[i] == \"//\")\n        {\n            result /= operand[i\
    \ + 1];\n        }\n        else if (operator[i] == \"**\")\n        {\n     \
    \       result = pow(result, operand[i + 1]);\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg93svtr9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (size_t i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n        {\n            result\
    \ += operand[i + 1];\n        }\n        else if (operator[i] == \"-\")\n    \
    \    {\n            result -= operand[i + 1];\n        }\n        else if (operator[i]\
    \ == \"*\")\n        {\n            result *= operand[i + 1];\n        }\n   \
    \     else if (operator[i] == \"//\")\n        {\n            result /= operand[i\
    \ + 1];\n        }\n        else if (operator[i] == \"**\")\n        {\n     \
    \       result = (long)pow(result, operand[i + 1]);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpusgklsmn.d(51): Error: C style cast illegal, use cast(long)pow(result,
    operand[i + 1])\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpusgklsmn.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    int i = 0;\n    foreach(string\
    \ op; operator)\n    {\n        switch(op)\n        {\n            case \"+\"\
    :\n                result += operand[i+1];\n                break;\n         \
    \   case \"-\":\n                result -= operand[i+1];\n                break;\n\
    \            case \"*\":\n                result *= operand[i+1];\n          \
    \      break;\n            case \"//\":\n                result /= operand[i+1];\n\
    \                break;\n            case \"**\":\n                result = pow(result,\
    \ operand[i+1]);\n                break;\n        }\n        i++;\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoiz2ocjm.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977837
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    int i = 0;\n    foreach(string\
    \ op; operator)\n    {\n        switch(op)\n        {\n            case \"+\"\
    :\n                result += operand[i+1];\n                break;\n         \
    \   case \"-\":\n                result -= operand[i+1];\n                break;\n\
    \            case \"*\":\n                result *= operand[i+1];\n          \
    \      break;\n            case \"//\":\n                result /= operand[i+1];\n\
    \                break;\n            case \"**\":\n                result = pow(result,\
    \ operand[i+1]);\n                break;\n        }\n        i++;\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoiz2ocjm.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977837
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                result += operand[i + 1];\n                break;\n       \
    \     case \"-\":\n                result -= operand[i + 1];\n               \
    \ break;\n            case \"*\":\n                result *= operand[i + 1];\n\
    \                break;\n            case \"//\":\n                result /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                result\
    \ = pow(result, operand[i + 1]);\n                break;\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1p1ptf1l.d(33): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1p1ptf1l.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    if (operator.length != operand.length - 1) return 0;\n   \
    \ if (operator.length == 0 || operand.length == 0) return 0;\n    int op;\n  \
    \  long result = operand[0];\n    for (op = 0; op < operator.length; op++) {\n\
    \        switch (operator[op]) {\n            case \"+\": result += operand[op\
    \ + 1]; break;\n            case \"-\": result -= operand[op + 1]; break;\n  \
    \          case \"*\": result *= operand[op + 1]; break;\n            case \"\
    //\": result /= operand[op + 1]; break;\n            case \"**\": result = (long)pow(result,\
    \ operand[op + 1]); break;\n            default: return 0;\n        }\n    }\n\
    \    return result;\n}\nlong do_algebra(string[] operator, long[] operand) \n\
    {\n    if (operator.length != operand.length - 1) return 0;\n    if (operator.length\
    \ == 0 || operand.length == 0) return 0;\n    int op;\n    long result = operand[0];\n\
    \    for (op = 0; op < operator.length; op++) {\n        switch (operator[op])\
    \ {\n            case \"+\": result += operand[op + 1]; break;\n            case\
    \ \"-\": result -= operand[op + 1]; break;\n            case \"*\": result *=\
    \ operand[op + 1]; break;\n            case \"//\": result /= operand[op + 1];\
    \ break;\n            case \"**\": result = (long)pow(result, operand[op + 1]);\
    \ break;\n            default: return 0;\n        }\n    }\n    return result;\n\
    }\nlong do_algebra(string[] operator, long[] operand) \n{\n    if (operator.length\
    \ != operand.length - 1) return 0;\n    if (operator.length == 0 || operand.length\
    \ == 0) return 0;\n    int op;\n    long result = operand[0];\n    for (op = 0;\
    \ op < operator.length; op++) {\n        switch (operator[op]) {\n           \
    \ case \"+\": result += operand\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdie82hzr.d(40): Error: C style cast illegal, use cast(long)pow(result,
    operand[op + 1])\n/tmp/tmpdie82hzr.d(58): Error: C style cast illegal, use cast(long)pow(result,
    operand[op + 1])\n/tmp/tmpdie82hzr.d(73): Error: found \''unittest\'' when expecting
    \'';\'' following statement\n/tmp/tmpdie82hzr.d(81): Error: found \''EOF\'' when
    expecting \''}\'' following compound statement\n/tmp/tmpdie82hzr.d(81): Error:
    found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpdie82hzr.d(81):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdie82hzr.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977837
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long res;\n    int n = operator.length;\n    res = operand[0];\n\
    \    for (int i = 0; i < n; i++) {\n        switch (operator[i]) {\n         \
    \   case \"+\":\n                res += operand[i + 1];\n                break;\n\
    \            case \"-\":\n                res -= operand[i + 1];\n           \
    \     break;\n            case \"*\":\n                res *= operand[i + 1];\n\
    \                break;\n            case \"//\":\n                res /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                res\
    \ = (long)Math.pow(res, operand[i + 1]);\n                break;\n        }\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n\
    \    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n   \
    \ assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv_9jm1mh.d(48): Error: C style cast illegal, use cast(long)Math.pow(res,
    operand[i + 1])\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv_9jm1mh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977837
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    //1. create string version of the expression\n    string expression\
    \ = \"\";\n    int x = 0;\n    while(x < operand.length) {\n        expression\
    \ += (x == 0) ? $\"{operand[x]}\" : $\" {operator[x-1]} {operand[x]}\";\n    \
    \    x++;\n    }\n    expression += \";\";\n    //2. use dmd eval() to evaluate\
    \ the expression\n    return eval(expression);\n}\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5zlsxqqe.d(34): Error: \''$\'' is valid only inside [] of index
    or slice\n/tmp/tmp5zlsxqqe.d(34): Error: found \''"{operand[x]}"\'' when expecting
    \'':\''\n/tmp/tmp5zlsxqqe.d(34): Error: expression expected, not \'':\''\n/tmp/tmp5zlsxqqe.d(34):
    Error: found \''$\'' when expecting \'';\'' following statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp5zlsxqqe.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                result += operand[i + 1];\n                break;\n       \
    \     case \"-\":\n                result -= operand[i + 1];\n               \
    \ break;\n            case \"*\":\n                result *= operand[i + 1];\n\
    \                break;\n            case \"//\":\n                result /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                result\
    \ = result ** operand[i + 1];\n                break;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsqrvxws0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977837
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                result += operand[i + 1];\n                break;\n       \
    \     case \"-\":\n                result -= operand[i + 1];\n               \
    \ break;\n            case \"*\":\n                result *= operand[i + 1];\n\
    \                break;\n            case \"//\":\n                result /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                result\
    \ = pow(result, operand[i + 1]);\n                break;\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1p1ptf1l.d(33): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1p1ptf1l.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long res = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n            res += operand[i+1];\n\
    \        else if (operator[i] == \"-\")\n            res -= operand[i+1];\n  \
    \      else if (operator[i] == \"*\")\n            res *= operand[i+1];\n    \
    \    else if (operator[i] == \"//\")\n            res /= operand[i+1];\n     \
    \   else if (operator[i] == \"**\")\n            res = pow(res, operand[i+1]);\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n\
    \    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n   \
    \ assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptj6ca_2f.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n        {\n            result\
    \ += operand[i+1];\n        }\n        else if (operator[i] == \"-\")\n      \
    \  {\n            result -= operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"*\")\n        {\n            result *= operand[i+1];\n        }\n     \
    \   else if (operator[i] == \"//\")\n        {\n            result /= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"**\")\n        {\n            result\
    \ = pow(result, operand[i+1]);\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp2waybrmc.d(61): unittest failure\n----------------\n??:?
    _d_unittestp [0x4291ed]\n??:? void tmp2waybrmc.__unittest_L56_C1() [0x42826d]\n??:?
    void tmp2waybrmc.__modtest() [0x428458]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dd43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428f46]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a9e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa78]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42a975]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x428f1d]\n??:? runModuleUnitTests [0x42db19]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4296b0]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x429637]\n??:? _d_run_main [0x4295a2]\n??:? main [0x42846b]\n??:?
    __libc_start_main [0x2ab25554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    if (operator.length == 0) return 0;\n    long res = operand[0];\n\
    \    for (long i = 0; i < operator.length; i++) {\n        long cur = operand[i\
    \ + 1];\n        switch (operator[i]) {\n            case \"+\":\n           \
    \     res += cur;\n                break;\n            case \"-\":\n         \
    \       res -= cur;\n                break;\n            case \"*\":\n       \
    \         res *= cur;\n                break;\n            case \"//\":\n    \
    \            res /= cur;\n                break;\n            case \"**\":\n \
    \               res = pow(res, cur);\n                break;\n        }\n    }\n\
    \    return res;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzaec2___.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977837
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    if (operator.length < 1 || operand.length < 2)\n        return\
    \ -1;\n    \n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n            result += operand[i+1];\n\
    \        else if (operator[i] == \"-\")\n            result -= operand[i+1];\n\
    \        else if (operator[i] == \"*\")\n            result *= operand[i+1];\n\
    \        else if (operator[i] == \"//\")\n            result /= operand[i+1];\n\
    \        else if (operator[i] == \"**\")\n            result = (long)pow(result,\
    \ operand[i+1]);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3oilybds.d(45): Error: C style cast illegal, use cast(long)pow(result,
    operand[i + 1])\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3oilybds.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977837
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++) {\n        switch (operator[i]) {\n            case \"+\":\n          \
    \      result += operand[i + 1];\n                break;\n            case \"\
    -\":\n                result -= operand[i + 1];\n                break;\n    \
    \        case \"*\":\n                result *= operand[i + 1];\n            \
    \    break;\n            case \"//\":\n                result /= operand[i + 1];\n\
    \                break;\n            case \"**\":\n                result = pow(result,\
    \ operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprtzgimth.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long accumulator = operand[0];\n    for (size_t i = 0; i <\
    \ operator.length; i++)\n    {\n        switch (operator[i])\n        {\n    \
    \        case \"+\":\n                accumulator += operand[i + 1];\n       \
    \         break;\n            case \"-\":\n                accumulator -= operand[i\
    \ + 1];\n                break;\n            case \"*\":\n                accumulator\
    \ *= operand[i + 1];\n                break;\n            case \"//\":\n     \
    \           accumulator /= operand[i + 1];\n                break;\n         \
    \   case \"**\":\n                accumulator = pow(accumulator, operand[i + 1]);\n\
    \                break;\n        }\n    }\n    return accumulator;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpowy419eu.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++) {\n        switch (operator[i]) {\n            case \"+\":\n          \
    \      result += operand[i + 1];\n                break;\n            case \"\
    -\":\n                result -= operand[i + 1];\n                break;\n    \
    \        case \"*\":\n                result *= operand[i + 1];\n            \
    \    break;\n            case \"//\":\n                result /= operand[i + 1];\n\
    \                break;\n            case \"**\":\n                result = pow(result,\
    \ operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprtzgimth.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long temp = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                temp += operand[i+1];\n                break;\n           \
    \ case \"-\":\n                temp -= operand[i+1];\n                break;\n\
    \            case \"*\":\n                temp *= operand[i+1];\n            \
    \    break;\n            case \"//\":\n                temp /= operand[i+1];\n\
    \                break;\n            case \"**\":\n                temp = pow(temp,\
    \ operand[i+1]);\n                break;\n        }\n    }\n    return temp;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb3clee7o.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977837
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long res = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++) {\n        long cur = operand[i + 1];\n        switch (operator[i]) {\n\
    \            case \"+\":\n                res += cur;\n                break;\n\
    \            case \"-\":\n                res -= cur;\n                break;\n\
    \            case \"*\":\n                res *= cur;\n                break;\n\
    \            case \"//\":\n                res /= cur;\n                break;\n\
    \            case \"**\":\n                res = pow(res, cur);\n            \
    \    break;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5s87oqdu.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977837
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long res = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                res += operand[i + 1];\n                break;\n          \
    \  case \"-\":\n                res -= operand[i + 1];\n                break;\n\
    \            case \"*\":\n                res *= operand[i + 1];\n           \
    \     break;\n            case \"//\":\n                res /= operand[i + 1];\n\
    \                break;\n            case \"**\":\n                res = res ^^\
    \ operand[i + 1];\n                break;\n        }\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2lwe0rf5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    : result += operand[i+1]; break;\n            case \"-\": result -= operand[i+1];\
    \ break;\n            case \"*\": result *= operand[i+1]; break;\n           \
    \ case \"//\": result /= operand[i+1]; break;\n            case \"**\": result\
    \ = cast(long)pow(result, operand[i+1]); break;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8fw_6t40.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977836
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++) {\n        long n1 = operand[i];\n        long n2 = operand[i + 1];\n \
    \       string op = operator[i];\n        switch (op) {\n            case \"+\"\
    :\n                result = n1 + n2;\n                break;\n            case\
    \ \"-\":\n                result = n1 - n2;\n                break;\n        \
    \    case \"*\":\n                result = n1 * n2;\n                break;\n\
    \            case \"//\":\n                result = n1 / n2;\n               \
    \ break;\n            case \"**\":\n                result = pow(n1, n2);\n  \
    \              break;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptb_3w1gq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977837
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n        {\n            result\
    \ += operand[i+1];\n        }\n        else if (operator[i] == \"-\")\n      \
    \  {\n            result -= operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"*\")\n        {\n            result *= operand[i+1];\n        }\n     \
    \   else if (operator[i] == \"//\")\n        {\n            result /= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"**\")\n        {\n            result\
    \ = (long)pow(result, operand[i+1]);\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpembr_2js.d(51): Error: C style cast illegal, use cast(long)pow(result,
    operand[i + 1])\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpembr_2js.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977837
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long value = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                value += operand[i + 1];\n                break;\n        \
    \    case \"-\":\n                value -= operand[i + 1];\n                break;\n\
    \            case \"*\":\n                value *= operand[i + 1];\n         \
    \       break;\n            case \"//\":\n                value /= operand[i +\
    \ 1];\n                break;\n            case \"**\":\n                value\
    \ = pow(value, operand[i + 1]);\n                break;\n        }\n    }\n  \
    \  return value;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp08_273qe.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977837
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{ \n    auto result = operand[0];\n    foreach(i, o; operator) \n\
    \    {\n        switch(o) \n        {\n            case \"+\": result += operand[i+1];\
    \ break;\n            case \"-\": result -= operand[i+1]; break;\n           \
    \ case \"*\": result *= operand[i+1]; break;\n            case \"//\": result\
    \ /= operand[i+1]; break;\n            case \"**\": result = pow(result, operand[i+1]);\
    \ break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphl1xy9oy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977837
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long total = operand[0];\n    foreach(int i, string op; zip(i,\
    \ op; operator))\n    {\n        long op2 = operand[i+1];\n        switch(op)\n\
    \        {\n            case \"+\": total += op2; break;\n            case \"\
    -\": total -= op2; break;\n            case \"*\": total *= op2; break;\n    \
    \        case \"//\": total /= op2; break;\n            case \"**\": total = pow(total,\
    \ op2); break;\n        }\n    }\n    return total;\n}\nunittest\n{\n    alias\
    \ candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L,\
    \ 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L,\
    \ 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1ebiz44u.d(31): Error: found \'';\'' when expecting \'',\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1ebiz44u.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977837
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (long i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case '+':\n\
    \                result += operand[i + 1];\n                break;\n         \
    \   case '-':\n                result -= operand[i + 1];\n                break;\n\
    \            case '*':\n                result *= operand[i + 1];\n          \
    \      break;\n            case '//':\n                result /= operand[i + 1];\n\
    \                break;\n            case '**':\n                result = cast(long)pow(result,\
    \ operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpi583yyp6.d(44): Error: unterminated character constant\n/tmp/tmpi583yyp6.d(44):
    Error: unterminated character constant\n/tmp/tmpi583yyp6.d(45): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpi583yyp6.d(45): Error: found \''/=\'' instead
    of statement\n/tmp/tmpi583yyp6.d(47): Error: unterminated character constant\n/tmp/tmpi583yyp6.d(47):
    Error: unterminated character constant\n/tmp/tmpi583yyp6.d(48): Error: found \''result\''
    when expecting \'':\''\n/tmp/tmpi583yyp6.d(48): Error: found \''=\'' instead of
    statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi583yyp6.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977837
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{ \n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                result += operand[i+1];\n                break;\n         \
    \   case \"-\":\n                result -= operand[i+1];\n                break;\n\
    \            case \"*\":\n                result *= operand[i+1];\n          \
    \      break;\n            case \"//\":\n                result /= operand[i+1];\n\
    \                break;\n            case \"**\":\n                result = pow(result,\
    \ operand[i+1]);\n                break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpokp9pp4t.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977837
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n        {\n            result\
    \ += operand[i+1];\n        }\n        else if (operator[i] == \"-\")\n      \
    \  {\n            result -= operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"*\")\n        {\n            result *= operand[i+1];\n        }\n     \
    \   else if (operator[i] == \"//\")\n        {\n            result /= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"**\")\n        {\n            result\
    \ = (long) pow(result, operand[i+1]);\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_0gio4zr.d(51): Error: C style cast illegal, use cast(long)pow(result,
    operand[i + 1])\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_0gio4zr.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977837
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    foreach(int i, string op; operator)\n\
    \    {\n        if(op == \"+\")\n            result += operand[i+1];\n       \
    \ else if(op == \"-\")\n            result -= operand[i+1];\n        else if(op\
    \ == \"*\")\n            result *= operand[i+1];\n        else if(op == \"//\"\
    )\n            result /= operand[i+1];\n        else if(op == \"**\")\n      \
    \      result = pow(result, operand[i+1]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcsbdxif4.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977837
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{ \n    long expression = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++) {\n        switch (operator[i]) {\n            case \"+\":\n          \
    \      expression += operand[i + 1];\n                break;\n            case\
    \ \"-\":\n                expression -= operand[i + 1];\n                break;\n\
    \            case \"*\":\n                expression *= operand[i + 1];\n    \
    \            break;\n            case \"//\":\n                expression /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                expression\
    \ = pow(expression, operand[i + 1]);\n                break;\n        }\n    }\n\
    \    return expression;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n\
    \    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n   \
    \ assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp19dalhdo.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977837
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n        {\n            result\
    \ += operand[i+1];\n        }\n        else if (operator[i] == \"-\")\n      \
    \  {\n            result -= operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"*\")\n        {\n            result *= operand[i+1];\n        }\n     \
    \   else if (operator[i] == \"//\")\n        {\n            result /= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"**\")\n        {\n            result\
    \ = (long)pow(result, operand[i+1]);\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpembr_2js.d(51): Error: C style cast illegal, use cast(long)pow(result,
    operand[i + 1])\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpembr_2js.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977837
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    //get the length of the operator array\n    long count = operator.length;\n\
    \    long i = 0;\n    long result = operand[0];\n    //loop throught the operator\
    \ and operand array\n    for(; i < count; i++)\n    {\n        //do the basic\
    \ math operation\n        switch(operator[i])\n        {\n            case \"\
    +\":\n                result += operand[i+1];\n                break;\n      \
    \      case \"-\":\n                result -= operand[i+1];\n                break;\n\
    \            case \"*\":\n                result *= operand[i+1];\n          \
    \      break;\n            case \"//\":\n                result /= operand[i+1];\n\
    \                break;\n            case \"**\":\n                result = pow(result,\
    \ operand[i+1]);\n                break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6ru1_xdk.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977837
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (long i = 0u; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                result += operand[i + 1];\n                break;\n       \
    \     case \"-\":\n                result -= operand[i + 1];\n               \
    \ break;\n            case \"*\":\n                result *= operand[i + 1];\n\
    \                break;\n            case \"//\":\n                result /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                result\
    \ = pow(result, operand[i + 1]);\n                break;\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp64eldr55.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977837
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    int len = operand.length;\n    long result = operand[0];\n\
    \    for (int i = 0; i < len-1; i++) {\n        if (operator[i] == \"+\") {\n\
    \            result += operand[i+1];\n        } else if (operator[i] == \"-\"\
    ) {\n            result -= operand[i+1];\n        } else if (operator[i] == \"\
    *\") {\n            result *= operand[i+1];\n        } else if (operator[i] ==\
    \ \"//\") {\n            result /= operand[i+1];\n        } else if (operator[i]\
    \ == \"**\") {\n            result = pow(result, operand[i+1]);\n        }\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp0o9z6le.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977837
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    long temp = 0;\n    for (int\
    \ i = 0; i < operator.length; i++)\n    {\n        switch (operator[i])\n    \
    \    {\n            case \"+\":\n                result += operand[i+1];\n   \
    \             break;\n            case \"-\":\n                result -= operand[i+1];\n\
    \                break;\n            case \"*\":\n                result *= operand[i+1];\n\
    \                break;\n            case \"//\":\n                result /= operand[i+1];\n\
    \                break;\n            case \"**\":\n                result = pow(result,\
    \ operand[i+1]);\n                break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmnb8bb3e.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977837
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    int result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                result += operand[i+1];\n                break;\n         \
    \   case \"-\":\n                result -= operand[i+1];\n                break;\n\
    \            case \"*\":\n                result *= operand[i+1];\n          \
    \      break;\n            case \"//\":\n                result /= operand[i+1];\n\
    \                break;\n            case \"**\":\n                result = pow(result,\
    \ operand[i+1]);\n                break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpysjzwphi.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977837
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n  long result = operand[0];\n  for (int i = 0; i < operator.length;\
    \ i++)\n  {\n    switch (operator[i])\n    {\n      case \"+\":\n        result\
    \ += operand[i + 1];\n        break;\n      case \"-\":\n        result -= operand[i\
    \ + 1];\n        break;\n      case \"*\":\n        result *= operand[i + 1];\n\
    \        break;\n      case \"//\":\n        result /= operand[i + 1];\n     \
    \   break;\n      case \"**\":\n        result = cast(long)pow(result, operand[i\
    \ + 1]);\n        break;\n    }\n  }\n  return result;\n}\nunittest\n{\n    alias\
    \ candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L,\
    \ 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L,\
    \ 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqhqa2pw5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977837
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n        {\n            result\
    \ += operand[i+1];\n        }\n        else if (operator[i] == \"-\")\n      \
    \  {\n            result -= operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"*\")\n        {\n            result *= operand[i+1];\n        }\n     \
    \   else if (operator[i] == \"//\")\n        {\n            result /= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"**\")\n        {\n            result\
    \ = pow(result, operand[i+1]);\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp2waybrmc.d(61): unittest failure\n----------------\n??:?
    _d_unittestp [0x4291ed]\n??:? void tmp2waybrmc.__unittest_L56_C1() [0x42826d]\n??:?
    void tmp2waybrmc.__modtest() [0x428458]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dd43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428f46]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a9e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa78]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42a975]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x428f1d]\n??:? runModuleUnitTests [0x42db19]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4296b0]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x429637]\n??:? _d_run_main [0x4295a2]\n??:? main [0x42846b]\n??:?
    __libc_start_main [0x2ab25554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (size_t i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                result += operand[i + 1];\n                break;\n       \
    \     case \"-\":\n                result -= operand[i + 1];\n               \
    \ break;\n            case \"*\":\n                result *= operand[i + 1];\n\
    \                break;\n            case \"//\":\n                result /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                result\
    \ = pow(result, operand[i + 1]);\n                break;\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp379ym_va.d(33): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp379ym_va.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    int n = operator.size;\n  \
    \  for (int i = 0; i < n; i++)\n    {\n        if (operator[i] == \"+\")\n   \
    \         result += operand[i+1];\n        else if (operator[i] == \"-\")\n  \
    \          result -= operand[i+1];\n        else if (operator[i] == \"*\")\n \
    \           result *= operand[i+1];\n        else if (operator[i] == \"//\")\n\
    \            result /= operand[i+1];\n        else if (operator[i] == \"**\")\n\
    \            result = pow(result, operand[i+1]);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg0psvyy3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977837
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    auto result = operand[0];\n    long i = 0;\n    while(i <\
    \ operator.length)\n    {\n        switch(operator[i])\n        {\n          \
    \  case \"+\":\n                result += operand[i+1];\n                break;\n\
    \            case \"-\":\n                result -= operand[i+1];\n          \
    \      break;\n            case \"*\":\n                result *= operand[i+1];\n\
    \                break;\n            case \"//\":\n                result /= operand[i+1];\n\
    \                break;\n            case \"**\":\n                result ^= operand[i+1];\n\
    \                break;\n        }\n        i++;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvmtjpmqc.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977837
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (size_t i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                result += operand[i + 1];\n                break;\n       \
    \     case \"-\":\n                result -= operand[i + 1];\n               \
    \ break;\n            case \"*\":\n                result *= operand[i + 1];\n\
    \                break;\n            case \"//\":\n                result /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                result\
    \ = (long)pow(result, operand[i + 1]);\n                break;\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n\
    \    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n   \
    \ assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6akqi55i.d(48): Error: C style cast illegal, use cast(long)pow(result,
    operand[i + 1])\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6akqi55i.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977837
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n            result += operand[i+1];\n\
    \        else if (operator[i] == \"-\")\n            result -= operand[i+1];\n\
    \        else if (operator[i] == \"*\")\n            result *= operand[i+1];\n\
    \        else if (operator[i] == \"//\")\n            result /= operand[i+1];\n\
    \        else if (operator[i] == \"**\")\n            result = (long)pow(result,\
    \ operand[i+1]);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsaiy_zz1.d(42): Error: C style cast illegal, use cast(long)pow(result,
    operand[i + 1])\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsaiy_zz1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977837
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n            result += operand[i+1];\n\
    \        else if (operator[i] == \"-\")\n            result -= operand[i+1];\n\
    \        else if (operator[i] == \"*\")\n            result *= operand[i+1];\n\
    \        else if (operator[i] == \"//\")\n            result /= operand[i+1];\n\
    \        else if (operator[i] == \"**\")\n            result = pow(result, operand[i+1]);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe_ykhamy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977837
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    auto result = operand[0];\n    for (size_t i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n            result += operand[i\
    \ + 1];\n        else if (operator[i] == \"-\")\n            result -= operand[i\
    \ + 1];\n        else if (operator[i] == \"*\")\n            result *= operand[i\
    \ + 1];\n        else if (operator[i] == \"//\")\n            result /= operand[i\
    \ + 1];\n        else if (operator[i] == \"**\")\n            result = pow(result,\
    \ operand[i + 1]);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmd7wvnxo.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977837
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++) {\n        switch (operator[i]) {\n            case \"+\":\n          \
    \      result += operand[i + 1];\n                break;\n            case \"\
    -\":\n                result -= operand[i + 1];\n                break;\n    \
    \        case \"*\":\n                result *= operand[i + 1];\n            \
    \    break;\n            case \"//\":\n                result /= operand[i + 1];\n\
    \                break;\n            case \"**\":\n                result = (long)pow(result,\
    \ operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuz6lgdjt.d(46): Error: C style cast illegal, use cast(long)pow(result,
    operand[i + 1])\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuz6lgdjt.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977837
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    auto result = operand[0];\n    foreach(a, b; zip(operator,\
    \ operand[1..$])) \n    {\n        if(a == \"+\") \n        {\n            result\
    \ += b;\n        } \n        else if(a == \"-\") \n        {\n            result\
    \ -= b;\n        } \n        else if(a == \"*\") \n        {\n            result\
    \ *= b;\n        } \n        else if(a == \"//\") \n        {\n            result\
    \ /= b;\n        } \n        else if(a == \"**\") \n        {\n            result\
    \ = pow(result, b);\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"\
    ], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L,\
    \ 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) ==\
    \ 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3i4qrr4w.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977837
