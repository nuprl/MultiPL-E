language: d
name: HumanEval_160_do_algebra
results:
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n        {\n            result\
    \ += operand[i+1];\n        }\n        else if (operator[i] == \"-\")\n      \
    \  {\n            result -= operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"*\")\n        {\n            result *= operand[i+1];\n        }\n     \
    \   else if (operator[i] == \"//\")\n        {\n            result /= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"**\")\n        {\n            result\
    \ = pow(result, operand[i+1]);\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5qawse14.d(61): unittest failure

    ----------------

    ??:? _d_unittestp [0x4291ed]

    ??:? void tmp5qawse14.__unittest_L56_C1() [0x42826d]

    ??:? void tmp5qawse14.__modtest() [0x428458]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dd43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428f46]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a9e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42aa78]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a975]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f1d]

    ??:? runModuleUnitTests [0x42db19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4296b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n  /*\n    Assume operator contains valid values\n    Assume operand\
    \ contains valid values\n    Assume length of operator is equal to the length\
    \ of operand minus one.\n  */\n  // storing result at the first value of operand\n\
    \  // do operation with each operator\n  // return result stored at first index\
    \ of operand\n  foreach(i, o; operator)\n  {\n    switch(o)\n    {\n      case\
    \ \"+\":\n        operand[0] += operand[i+1];\n        break;\n      case \"-\"\
    :\n        operand[0] -= operand[i+1];\n        break;\n      case \"*\":\n  \
    \      operand[0] *= operand[i+1];\n        break;\n      case \"//\":\n     \
    \   operand[0] /= operand[i+1];\n        break;\n      case \"**\":\n        operand[0]\
    \ = long(pow(double(operand[0]), double(operand[i+1])));\n        break;\n   \
    \ }\n  }\n  return operand[0];\n}\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt7hp2a7q.d(55): Error: cannot implicitly convert expression `pow(cast(double)operand[0],
    cast(double)operand[i + 1LU])` of type `double` to `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt7hp2a7q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (size_t i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                result += operand[i + 1];\n                break;\n       \
    \     case \"-\":\n                result -= operand[i + 1];\n               \
    \ break;\n            case \"*\":\n                result *= operand[i + 1];\n\
    \                break;\n            case \"//\":\n                result /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                result\
    \ = pow(result, operand[i + 1]);\n                break;\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuexctdh2.d(33): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuexctdh2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long num = operand[0];\n    foreach(int i, string j; operator)\n\
    \    {\n        if(j == \"+\")\n            num += operand[i+1];\n        else\
    \ if(j == \"-\")\n            num -= operand[i+1];\n        else if(j == \"*\"\
    )\n            num *= operand[i+1];\n        else if(j == \"//\")\n          \
    \  num /= operand[i+1];\n        else if(j == \"**\")\n            num = pow(num,\
    \ operand[i+1]);\n    }\n    return num;\n}\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpz3fnmc5g.d(51): unittest failure

    ----------------

    ??:? _d_unittestp [0x429175]

    ??:? void tmpz3fnmc5g.__unittest_L46_C1() [0x4281f5]

    ??:? void tmpz3fnmc5g.__modtest() [0x4283e0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dccb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428ece]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a971]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42aa00]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a8fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428ea5]

    ??:? runModuleUnitTests [0x42daa1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429638]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    auto result = operand[0];\n    for (size_t i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n            result += operand[i\
    \ + 1];\n        else if (operator[i] == \"-\")\n            result -= operand[i\
    \ + 1];\n        else if (operator[i] == \"*\")\n            result *= operand[i\
    \ + 1];\n        else if (operator[i] == \"//\")\n            result /= operand[i\
    \ + 1];\n        else if (operator[i] == \"**\")\n            result = (long)pow(result,\
    \ operand[i + 1]);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwsmnicw8.d(42): Error: C style cast illegal, use `cast(long)pow(result,
    operand[i + 1])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwsmnicw8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                result += operand[i + 1];\n                break;\n       \
    \     case \"-\":\n                result -= operand[i + 1];\n               \
    \ break;\n            case \"*\":\n                result *= operand[i + 1];\n\
    \                break;\n            case \"//\":\n                result /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                result\
    \ = (long)pow(result, operand[i + 1]);\n                break;\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n\
    \    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n   \
    \ assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbcfvneny.d(48): Error: C style cast illegal, use `cast(long)pow(result,
    operand[i + 1])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbcfvneny.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++) {\n        if (operator[i] == \"+\") {\n            result += operand[i\
    \ + 1];\n        } else if (operator[i] == \"-\") {\n            result -= operand[i\
    \ + 1];\n        } else if (operator[i] == \"*\") {\n            result *= operand[i\
    \ + 1];\n        } else if (operator[i] == \"//\") {\n            result /= operand[i\
    \ + 1];\n        } else if (operator[i] == \"**\") {\n            result = long(pow(result,\
    \ operand[i + 1]));\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"\
    ], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L,\
    \ 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) ==\
    \ 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu_6q1ocr.d(51): unittest failure

    ----------------

    ??:? _d_unittestp [0x4291ed]

    ??:? void tmpu_6q1ocr.__unittest_L46_C1() [0x42826d]

    ??:? void tmpu_6q1ocr.__modtest() [0x428458]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dd43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428f46]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a9e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42aa78]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a975]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f1d]

    ??:? runModuleUnitTests [0x42db19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4296b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                result += operand[i + 1];\n                break;\n       \
    \     case \"-\":\n                result -= operand[i + 1];\n               \
    \ break;\n            case \"*\":\n                result *= operand[i + 1];\n\
    \                break;\n            case \"//\":\n                result /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                result\
    \ = pow(result, operand[i + 1]);\n                break;\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpovshs_32.d(33): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpovshs_32.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                result += operand[i + 1];\n                break;\n       \
    \     case \"-\":\n                result -= operand[i + 1];\n               \
    \ break;\n            case \"*\":\n                result *= operand[i + 1];\n\
    \                break;\n            case \"//\":\n                result /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                result\
    \ = (long)pow(result, operand[i + 1]);\n                break;\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n\
    \    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n   \
    \ assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbcfvneny.d(48): Error: C style cast illegal, use `cast(long)pow(result,
    operand[i + 1])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbcfvneny.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (size_t i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                result += operand[i + 1];\n                break;\n       \
    \     case \"-\":\n                result -= operand[i + 1];\n               \
    \ break;\n            case \"*\":\n                result *= operand[i + 1];\n\
    \                break;\n            case \"//\":\n                result /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                result\
    \ = pow(result, operand[i + 1]);\n                break;\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuexctdh2.d(33): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuexctdh2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    int len = operator.length;\n    long temp = operand[0];\n\
    \    for(int i = 0; i < len; i++)\n    {\n        switch(operator[i])\n      \
    \  {\n            case \"+\":\n                temp += operand[i+1];\n       \
    \         break;\n            case \"-\":\n                temp -= operand[i+1];\n\
    \                break;\n            case \"*\":\n                temp *= operand[i+1];\n\
    \                break;\n            case \"//\":\n                temp /= operand[i+1];\n\
    \                break;\n            case \"**\":\n                temp = (long)pow(temp,\
    \ operand[i+1]);\n                break;\n        }\n    }\n    return temp;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1j3w1_ee.d(49): Error: C style cast illegal, use `cast(long)pow(temp,
    operand[i + 1])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1j3w1_ee.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    // Convert long[] to List<long>\n    List<long> arrList =\
    \ new List<long>();\n    foreach(long i in operand)\n    {\n        arrList.Add(i);\n\
    \    }\n    // Convert string[] to List<string>\n    List<string> opList = new\
    \ List<string>();\n    foreach(string i in operator)\n    {\n        opList.Add(i);\n\
    \    }\n    // Do exponentiation first\n    while(opList.IndexOf(\"**\") != -1)\n\
    \    {\n        int index = opList.IndexOf(\"**\");\n        long num1 = arrList[index];\n\
    \        long num2 = arrList[index + 1];\n        long val = (long)pow(num1, num2);\n\
    \        arrList.RemoveAt(index);\n        arrList.RemoveAt(index);\n        arrList.Insert(index,\
    \ val);\n        opList.RemoveAt(index);\n    }\n    // Do multiplication or division\
    \ next\n    while(opList.IndexOf(\"*\") != -1 || opList.IndexOf(\"//\") != -1)\n\
    \    {\n        int index = -1;\n        long val = -1;\n        if(opList.IndexOf(\"\
    *\") != -1)\n        {\n            index = opList.IndexOf(\"*\");\n         \
    \   long num1 = arrList[index];\n            long num2 = arrList[index + 1];\n\
    \            val = num1 * num2;\n        }\n        else if(opList.IndexOf(\"\
    //\") != -1)\n        {\n            index = opList.IndexOf(\"//\");\n       \
    \     long num1 = arrList[index];\n            long num2 = arrList[index + 1];\n\
    \            val = num1 / num2;\n        }\n        arrList.RemoveAt(index);\n\
    \        arrList.RemoveAt(index);\n        arrList.Insert(index, val);\n     \
    \   opList.RemoveAt(index);\n    }\n    // Do addition or subtraction last\n \
    \   while(opList.IndexOf(\"+\") != -1 || opList.IndexOf(\"-\") != -1)\n    {\n\
    \        int index = -1\nunittest\n{\n    alias candidate = do_algebra;\n\n  \
    \  assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"\
    +\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"\
    *\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptcbat09g.d(31): Error: found `>` when expecting `.` following long

    /tmp/tmptcbat09g.d(31): Error: found `>` when expecting `.` following long

    /tmp/tmptcbat09g.d(31): Error: found `(` when expecting identifier following `long`.

    /tmp/tmptcbat09g.d(31): Error: found `)` when expecting `;` following statement

    /tmp/tmptcbat09g.d(31): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmptcbat09g.d(32): Error: found `in` when expecting `;`

    /tmp/tmptcbat09g.d(37): Error: found `>` when expecting `;` following statement

    /tmp/tmptcbat09g.d(37): Error: found `>` when expecting `;` following statement

    /tmp/tmptcbat09g.d(37): Error: expression expected, not `)`

    /tmp/tmptcbat09g.d(37): Error: found `;` when expecting `)`

    /tmp/tmptcbat09g.d(38): Error: found `foreach` when expecting `;` following statement

    /tmp/tmptcbat09g.d(38): Error: found `in` when expecting `)`

    /tmp/tmptcbat09g.d(38): Error: missing `{ ... }` for function literal

    /tmp/tmptcbat09g.d(38): Error: found `operator` when expecting `;` follo'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        string op = operator[i];\n        switch (op)\n       \
    \ {\n            case \"+\":\n                result += operand[i + 1];\n    \
    \            break;\n            case \"-\":\n                result -= operand[i\
    \ + 1];\n                break;\n            case \"*\":\n                result\
    \ *= operand[i + 1];\n                break;\n            case \"//\":\n     \
    \           result /= operand[i + 1];\n                break;\n            case\
    \ \"**\":\n                result = cast(long) pow(result, operand[i + 1]);\n\
    \                break;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprs01qxzr.d(34): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprs01qxzr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    if (operator.length == 0 || operand.length == 0)\n       \
    \ return -1;\n    else if (operator.length != operand.length - 1)\n        return\
    \ -1;\n    \n    long result = operand[0];\n    for (long i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                result += operand[i + 1];\n                break;\n       \
    \     case \"-\":\n                result -= operand[i + 1];\n               \
    \ break;\n            case \"*\":\n                result *= operand[i + 1];\n\
    \                break;\n            case \"//\":\n                result /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                result\
    \ = pow(result, operand[i + 1]);\n                break;\n            default:\n\
    \                break;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpo41ua09q.d(66): unittest failure

    ----------------

    ??:? _d_unittestp [0x429581]

    ??:? void tmpo41ua09q.__unittest_L61_C1() [0x428369]

    ??:? void tmpo41ua09q.__modtest() [0x42876c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42e12b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42925e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42add1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ae60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ad5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429235]

    ??:? runModuleUnitTests [0x42df01]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429a98]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    // your code here\n    long ret = operand[0];\n    for(int\
    \ i = 0; i < operator.length; i++)\n    {\n        switch(operator[i])\n     \
    \   {\n            case '+':\n                ret += operand[i+1];\n         \
    \       break;\n            case '-':\n                ret -= operand[i+1];\n\
    \                break;\n            case '*':\n                ret *= operand[i+1];\n\
    \                break;\n            case '//':\n                ret /= operand[i+1];\n\
    \                break;\n            case '**':\n                ret = pow(ret,\
    \ operand[i+1]);\n                break;\n        }\n    }\n    return ret;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptcn14ftt.d(45): Error: unterminated character constant

    /tmp/tmptcn14ftt.d(45): Error: unterminated character constant

    /tmp/tmptcn14ftt.d(46): Error: found `ret` when expecting `:`

    /tmp/tmptcn14ftt.d(46): Error: found `/=` instead of statement

    /tmp/tmptcn14ftt.d(48): Error: unterminated character constant

    /tmp/tmptcn14ftt.d(48): Error: unterminated character constant

    /tmp/tmptcn14ftt.d(49): Error: found `ret` when expecting `:`

    /tmp/tmptcn14ftt.d(49): Error: found `=` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptcn14ftt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    int last = operand.length - 1;\n    if (operator.length !=\
    \ last) return 0;\n    for (int i = 0; i < last; i++)\n    {\n        if (operator[i]\
    \ == \"+\") operand[i+1] += operand[i];\n        else if (operator[i] == \"-\"\
    ) operand[i+1] = operand[i] - operand[i+1];\n        else if (operator[i] == \"\
    *\") operand[i+1] *= operand[i];\n        else if (operator[i] == \"//\") operand[i+1]\
    \ = operand[i] / operand[i+1];\n        else if (operator[i] == \"**\") operand[i+1]\
    \ = operand[i] ** operand[i+1];\n    }\n    return operand[last];\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6hyllp0h.d(30): Error: cannot implicitly convert expression `operand.length
    - 1LU` of type `ulong` to `int`

    /tmp/tmp6hyllp0h.d(38): Error: can only `*` a pointer, not a `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6hyllp0h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long res = operand[0];\n    for (size_t i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case '+':\n\
    \                res += operand[i + 1];\n                break;\n            case\
    \ '-':\n                res -= operand[i + 1];\n                break;\n     \
    \       case '*':\n                res *= operand[i + 1];\n                break;\n\
    \            case '//':\n                res /= operand[i + 1];\n            \
    \    break;\n            case '**':\n                res = pow(res, operand[i\
    \ + 1]);\n                break;\n        }\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9s43p83u.d(44): Error: unterminated character constant

    /tmp/tmp9s43p83u.d(44): Error: unterminated character constant

    /tmp/tmp9s43p83u.d(45): Error: found `res` when expecting `:`

    /tmp/tmp9s43p83u.d(45): Error: found `/=` instead of statement

    /tmp/tmp9s43p83u.d(47): Error: unterminated character constant

    /tmp/tmp9s43p83u.d(47): Error: unterminated character constant

    /tmp/tmp9s43p83u.d(48): Error: found `res` when expecting `:`

    /tmp/tmp9s43p83u.d(48): Error: found `=` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9s43p83u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    auto result = operand[0];\n    foreach(i, o; operator)\n \
    \   {\n        auto next_index = i + 1;\n        if(o == \"+\")\n        {\n \
    \           result += operand[next_index];\n        }\n        else if(o == \"\
    -\")\n        {\n            result -= operand[next_index];\n        }\n     \
    \   else if(o == \"*\")\n        {\n            result *= operand[next_index];\n\
    \        }\n        else if(o == \"//\")\n        {\n            result /= operand[next_index];\n\
    \        }\n        else if(o == \"**\")\n        {\n            result = pow(result,\
    \ operand[next_index]);\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpahat_q20.d(62): unittest failure

    ----------------

    ??:? _d_unittestp [0x42916d]

    ??:? void tmpahat_q20.__unittest_L57_C1() [0x4281ed]

    ??:? void tmpahat_q20.__modtest() [0x4283d8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dcc3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428ec6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a969]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42a9f8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a8f5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428e9d]

    ??:? runModuleUnitTests [0x42da99]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429630]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++) {\n        if (operator[i] == \"+\") {\n            result += operand[i\
    \ + 1];\n        } else if (operator[i] == \"-\") {\n            result -= operand[i\
    \ + 1];\n        } else if (operator[i] == \"*\") {\n            result *= operand[i\
    \ + 1];\n        } else if (operator[i] == \"//\") {\n            result /= operand[i\
    \ + 1];\n        } else if (operator[i] == \"**\") {\n            result = cast(long)pow(result,\
    \ operand[i + 1]);\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"\
    ], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L,\
    \ 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) ==\
    \ 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp99mqrvs6.d(51): unittest failure

    ----------------

    ??:? _d_unittestp [0x4291ed]

    ??:? void tmp99mqrvs6.__unittest_L46_C1() [0x42826d]

    ??:? void tmp99mqrvs6.__modtest() [0x428458]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dd43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428f46]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a9e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42aa78]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a975]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f1d]

    ??:? runModuleUnitTests [0x42db19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4296b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    //long[] results = new long[operand.size];\n    long result\
    \ = operand[0];\n    for(size_t i = 0; i < operator.size; i++)\n    {\n      \
    \  if(operator[i] == \"+\")\n        {\n            result += operand[i+1];\n\
    \        }\n        else if(operator[i] == \"-\")\n        {\n            result\
    \ -= operand[i+1];\n        }\n        else if(operator[i] == \"*\")\n       \
    \ {\n            result *= operand[i+1];\n        }\n        else if(operator[i]\
    \ == \"//\")\n        {\n            result /= operand[i+1];\n        }\n    \
    \    else if(operator[i] == \"**\")\n        {\n            result = pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L,\
    \ 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L,\
    \ 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpukiaa0t6.d(32): Error: no property `size` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpukiaa0t6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    if (operand.length == 0) return 0;\n    if (operand.length\
    \ == 1) return operand[0];\n    if (operator.length == 0) return 0;\n    if (operator.length\
    \ != operand.length - 1) return 0;\n    long op1 = operand[0];\n    long op2 =\
    \ operand[1];\n    long result = 0;\n    switch (operator[0])\n    {\n       \
    \ case \"+\": result = op1 + op2; break;\n        case \"-\": result = op1 - op2;\
    \ break;\n        case \"*\": result = op1 * op2; break;\n        case \"//\"\
    : result = op1 / op2; break;\n        case \"**\": result = (long)pow(op1, op2);\
    \ break;\n    }\n    long[] newOperand = new long[operand.length - 1];\n    newOperand[0]\
    \ = result;\n    long i = 1;\n    while (i < operand.length - 1)\n    {\n    \
    \    newOperand[i] = operand[i + 1];\n        i++;\n    }\n    string[] newOperator\
    \ = new string[operator.length - 1];\n    i = 0;\n    while (i < operator.length\
    \ - 1)\n    {\n        newOperator[i] = operator[i + 1];\n        i++;\n    }\n\
    \    return do_algebra(newOperator, newOperand);\n}\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4m1dkguc.d(43): Error: C style cast illegal, use `cast(long)pow(op1,
    op2)`

    '
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    \n    long result = operand[0];\n    for(int i = 0; i < operator.length;\
    \ i++)\n    {\n        if(operator[i] == \"+\")\n        {\n            result\
    \ += operand[i+1];\n        }\n        else if(operator[i] == \"-\")\n       \
    \ {\n            result -= operand[i+1];\n        }\n        else if(operator[i]\
    \ == \"*\")\n        {\n            result *= operand[i+1];\n        }\n     \
    \   else if(operator[i] == \"//\")\n        {\n            result /= operand[i+1];\n\
    \        }\n        else if(operator[i] == \"**\")\n        {\n            result\
    \ = (long)pow(result, operand[i+1]);\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9bubg013.d(52): Error: C style cast illegal, use `cast(long)pow(result,
    operand[i + 1])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9bubg013.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long accumulator = operand[0];\n    foreach(i, op; operator)\n\
    \    {\n        switch(op)\n        {\n            case \"+\": accumulator +=\
    \ operand[i+1]; break;\n            case \"-\": accumulator -= operand[i+1]; break;\n\
    \            case \"*\": accumulator *= operand[i+1]; break;\n            case\
    \ \"//\": accumulator /= operand[i+1]; break;\n            case \"**\": accumulator\
    \ = pow(accumulator, operand[i+1]); break;\n        }\n    }\n    return accumulator;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpshdnqi06.d(33): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpshdnqi06.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long a = operand[0];\n    long b = operand[1];\n    long result\
    \ = 0;\n    switch(operator[0])\n    {\n        case \"+\":\n            result\
    \ = a + b;\n            break;\n        case \"-\":\n            result = a -\
    \ b;\n            break;\n        case \"*\":\n            result = a * b;\n \
    \           break;\n        case \"//\":\n            result = a / b;\n      \
    \      break;\n        case \"**\":\n            result = cast(long)pow(a, b);\n\
    \            break;\n    }\n    if(operator.length > 1)\n    {\n        return\
    \ do_algebra(operator[1..$], operand[1..$], result);\n    }\n    return result;\n\
    }\nlong do_algebra(string[] operator, long[] operand, long nextResult) \n{\n \
    \   long b = operand[1];\n    long result = 0;\n    switch(operator[0])\n    {\n\
    \        case \"+\":\n            result = nextResult + b;\n            break;\n\
    \        case \"-\":\n            result = nextResult - b;\n            break;\n\
    \        case \"*\":\n            result = nextResult * b;\n            break;\n\
    \        case \"//\":\n            result = nextResult / b;\n            break;\n\
    \        case \"**\":\n            result = cast(long)pow(nextResult, b);\n  \
    \          break;\n    }\n    if(operator.length > 1)\n    {\n        return do_algebra(operator[1..$],\
    \ operand[1..$], result);\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L,\
    \ 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L,\
    \ 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzbz6iwlq.d(33): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    /tmp/tmpzbz6iwlq.d(61): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzbz6iwlq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (long i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                result += operand[i + 1];\n                break;\n       \
    \     case \"-\":\n                result -= operand[i + 1];\n               \
    \ break;\n            case \"*\":\n                result *= operand[i + 1];\n\
    \                break;\n            case \"//\":\n                result /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                result\
    \ = pow(result, operand[i + 1]);\n                break;\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1hge9sq9.d(33): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1hge9sq9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long res = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n            res += operand[i+1];\n\
    \        else if (operator[i] == \"-\")\n            res -= operand[i+1];\n  \
    \      else if (operator[i] == \"*\")\n            res *= operand[i+1];\n    \
    \    else if (operator[i] == \"//\")\n            res /= operand[i+1];\n     \
    \   else if (operator[i] == \"**\")\n            res = (long)pow(res, operand[i+1]);\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n\
    \    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n   \
    \ assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp84po_qr4.d(42): Error: C style cast illegal, use `cast(long)pow(res,
    operand[i + 1])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp84po_qr4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++) {\n        if (operator[i] == \"+\") {\n            result += operand[i\
    \ + 1];\n        } else if (operator[i] == \"-\") {\n            result -= operand[i\
    \ + 1];\n        } else if (operator[i] == \"*\") {\n            result *= operand[i\
    \ + 1];\n        } else if (operator[i] == \"//\") {\n            result /= operand[i\
    \ + 1];\n        } else if (operator[i] == \"**\") {\n            result = pow(result,\
    \ operand[i + 1]);\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"\
    ], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L,\
    \ 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) ==\
    \ 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7opa0ffl.d(51): unittest failure

    ----------------

    ??:? _d_unittestp [0x4291ed]

    ??:? void tmp7opa0ffl.__unittest_L46_C1() [0x42826d]

    ??:? void tmp7opa0ffl.__modtest() [0x428458]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dd43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428f46]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a9e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42aa78]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a975]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f1d]

    ??:? runModuleUnitTests [0x42db19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4296b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long l = 0;\n    long r = 0;\n    long result = 0;\n    char\
    \ op = 'a';\n    foreach(e; zip(operator, operand))\n    {\n        l = r;\n \
    \       op = e[0];\n        r = e[1];\n        switch(op)\n        {\n       \
    \     case '+':\n                result = l + r;\n                break;\n   \
    \         case '-':\n                result = l - r;\n                break;\n\
    \            case '*':\n                result = l * r;\n                break;\n\
    \            case '/':\n                result = l / r;\n                break;\n\
    \            case '^':\n                result = pow(l, r);\n                break;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0bqlnwcl.d(34): Error: undefined identifier `zip`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0bqlnwcl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\") result += operand[i+1];\n   \
    \     else if (operator[i] == \"-\") result -= operand[i+1];\n        else if\
    \ (operator[i] == \"*\") result *= operand[i+1];\n        else if (operator[i]\
    \ == \"//\") result /= operand[i+1];\n        else if (operator[i] == \"**\")\
    \ result = pow(result, operand[i+1]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpe79xydkk.d(46): unittest failure

    ----------------

    ??:? _d_unittestp [0x4291ed]

    ??:? void tmpe79xydkk.__unittest_L41_C1() [0x42826d]

    ??:? void tmpe79xydkk.__modtest() [0x428458]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dd43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428f46]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a9e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42aa78]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a975]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f1d]

    ??:? runModuleUnitTests [0x42db19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4296b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (long i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n        {\n            result\
    \ += operand[i+1];\n        }\n        else if (operator[i] == \"-\")\n      \
    \  {\n            result -= operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"*\")\n        {\n            result *= operand[i+1];\n        }\n     \
    \   else if (operator[i] == \"//\")\n        {\n            result /= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"**\")\n        {\n            result\
    \ = pow(result, operand[i+1]);\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqwr1z8ru.d(61): unittest failure

    ----------------

    ??:? _d_unittestp [0x4291ed]

    ??:? void tmpqwr1z8ru.__unittest_L56_C1() [0x42826d]

    ??:? void tmpqwr1z8ru.__modtest() [0x428458]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dd43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428f46]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a9e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42aa78]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a975]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f1d]

    ??:? runModuleUnitTests [0x42db19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4296b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++) {\n        switch (operator[i]) {\n            case \"+\":\n          \
    \      result += operand[i + 1];\n                break;\n            case \"\
    -\":\n                result -= operand[i + 1];\n                break;\n    \
    \        case \"*\":\n                result *= operand[i + 1];\n            \
    \    break;\n            case \"//\":\n                result /= operand[i + 1];\n\
    \                break;\n            case \"**\":\n                result = pow(result,\
    \ operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n\
    }\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = operand[0];\n\
    \    for (int i = 0; i < operator.length; i++) {\n        switch (operator[i])\
    \ {\n            case \"+\":\n                result += operand[i + 1];\n    \
    \            break;\n            case \"-\":\n                result -= operand[i\
    \ + 1];\n                break;\n            case \"*\":\n                result\
    \ *= operand[i + 1];\n                break;\n            case \"//\":\n     \
    \           result /= operand[i + 1];\n                break;\n            case\
    \ \"**\":\n                result = pow(result, operand[i + 1]);\n           \
    \     break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L,\
    \ 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L,\
    \ 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbd8d38hv.d(32): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    /tmp/tmpbd8d38hv.d(56): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    /tmp/tmpbd8d38hv.d(80): Error: `tmpbd8d38hv.do_algebra` called with argument types
    `(string[], long[])` matches both:

    /tmp/tmpbd8d38hv.d(28):     `tmpbd8d38hv.do_algebra(string[] operator, long[]
    operand)`

    and:

    /tmp/tmpbd8d38hv.d(52):     `tmpbd8d38hv.do_algebra(string[] operator, long[]
    operand)`

    /tmp/tmpbd8d38hv.d(81): Error: `tmpbd8d38hv.do_algebra` called with argument types
    `(string[], long[])` matches both:

    /tmp/tmpbd8d38hv.d(28):     `tmpbd8d38hv.do_algebra(string[] operator, long[]
    operand)`

    and:

    /tmp/tmpbd8d38hv.d(52):     `tmpbd8d38hv.do_algebra(string[] operator, long[]
    operand)`

    /tmp/tmpbd8d38hv.d(82): Error: `tmpbd8d38hv.do_algebra` called with argument types
    `(string[], long[])` matches both:

    /tmp/tmpbd8d38hv.d(2'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    int i = 0;\n    long tmp = operand[i];\n    for(int j = 0;\
    \ j < operator.length; j++) {\n        if(operator[j] == \"+\") {\n          \
    \  tmp += operand[++i];\n        }\n        else if(operator[j] == \"-\") {\n\
    \            tmp -= operand[++i];\n        }\n        else if(operator[j] == \"\
    *\") {\n            tmp *= operand[++i];\n        }\n        else if(operator[j]\
    \ == \"//\") {\n            tmp /= operand[++i];\n        }\n        else if(operator[j]\
    \ == \"**\") {\n            tmp = pow(tmp, operand[++i]);\n        }\n    }\n\
    \    return tmp;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp0ljjvsut.d(56): unittest failure

    ----------------

    ??:? _d_unittestp [0x4291fd]

    ??:? void tmp0ljjvsut.__unittest_L51_C1() [0x42827d]

    ??:? void tmp0ljjvsut.__modtest() [0x428468]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dd53]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428f56]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a9f9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42aa88]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a985]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f2d]

    ??:? runModuleUnitTests [0x42db29]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4296c0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (long i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\") result += operand[i+1];\n   \
    \     else if (operator[i] == \"-\") result -= operand[i+1];\n        else if\
    \ (operator[i] == \"*\") result *= operand[i+1];\n        else if (operator[i]\
    \ == \"//\") result /= operand[i+1];\n        else if (operator[i] == \"**\")\
    \ result = pow(result, operand[i+1]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpecyxlhhd.d(46): unittest failure

    ----------------

    ??:? _d_unittestp [0x4291ed]

    ??:? void tmpecyxlhhd.__unittest_L41_C1() [0x42826d]

    ??:? void tmpecyxlhhd.__modtest() [0x428458]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dd43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428f46]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a9e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42aa78]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a975]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f1d]

    ??:? runModuleUnitTests [0x42db19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4296b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++) {\n        if (operator[i] == \"+\") {\n            result += operand[i\
    \ + 1];\n        } else if (operator[i] == \"-\") {\n            result -= operand[i\
    \ + 1];\n        } else if (operator[i] == \"*\") {\n            result *= operand[i\
    \ + 1];\n        } else if (operator[i] == \"//\") {\n            result /= operand[i\
    \ + 1];\n        } else if (operator[i] == \"**\") {\n            result = pow(result,\
    \ operand[i + 1]);\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"\
    ], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L,\
    \ 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) ==\
    \ 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7opa0ffl.d(51): unittest failure

    ----------------

    ??:? _d_unittestp [0x4291ed]

    ??:? void tmp7opa0ffl.__unittest_L46_C1() [0x42826d]

    ??:? void tmp7opa0ffl.__modtest() [0x428458]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dd43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428f46]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a9e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42aa78]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a975]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f1d]

    ??:? runModuleUnitTests [0x42db19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4296b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++) {\n        switch (operator[i]) {\n            case \"+\":\n          \
    \      result += operand[i + 1];\n                break;\n            case \"\
    -\":\n                result -= operand[i + 1];\n                break;\n    \
    \        case \"*\":\n                result *= operand[i + 1];\n            \
    \    break;\n            case \"//\":\n                result /= operand[i + 1];\n\
    \                break;\n            case \"**\":\n                result = pow(result,\
    \ operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzty9zf0j.d(32): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzty9zf0j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    long operand_length = operand.length;\n\
    \    for (int i = 0; i < operand_length - 1; i++)\n    {\n        switch (operator[i])\
    \ \n        {\n            case \"+\":\n                result += operand[i +\
    \ 1];\n                break;\n            case \"-\":\n                result\
    \ -= operand[i + 1];\n                break;\n            case \"*\":\n      \
    \          result *= operand[i + 1];\n                break;\n            case\
    \ \"//\":\n                result /= operand[i + 1];\n                break;\n\
    \            case \"**\":\n                result = pow(result, operand[i + 1]);\n\
    \                break;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw4twsq6x.d(34): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw4twsq6x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (long i = 0; i < operator.length;\
    \ i++) {\n        if (operator[i] == \"+\") result += operand[i + 1];\n      \
    \  else if (operator[i] == \"-\") result -= operand[i + 1];\n        else if (operator[i]\
    \ == \"*\") result *= operand[i + 1];\n        else if (operator[i] == \"//\"\
    ) result /= operand[i + 1];\n        else if (operator[i] == \"**\") result =\
    \ (long)pow(result, operand[i + 1]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv7qbpn2p.d(36): Error: C style cast illegal, use `cast(long)pow(result,
    operand[i + 1])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv7qbpn2p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long res;\n    foreach(c; operator)\n    {\n        res =\
    \ operand[0];\n        switch(c)\n        {\n            case '+':\n         \
    \       res += operand[1];\n                break;\n            case '-':\n  \
    \              res -= operand[1];\n                break;\n            case '*':\n\
    \                res *= operand[1];\n                break;\n            case\
    \ '//':\n                res /= operand[1];\n                break;\n        \
    \    case '**':\n                res = pow(res, operand[1]);\n               \
    \ break;\n        }\n        operand = operand[1..$];\n        operand[0] = res;\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n\
    \    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n   \
    \ assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmpt5tlt4.d(45): Error: unterminated character constant

    /tmp/tmpmpt5tlt4.d(45): Error: unterminated character constant

    /tmp/tmpmpt5tlt4.d(46): Error: found `res` when expecting `:`

    /tmp/tmpmpt5tlt4.d(46): Error: found `/=` instead of statement

    /tmp/tmpmpt5tlt4.d(48): Error: unterminated character constant

    /tmp/tmpmpt5tlt4.d(48): Error: unterminated character constant

    /tmp/tmpmpt5tlt4.d(49): Error: found `res` when expecting `:`

    /tmp/tmpmpt5tlt4.d(49): Error: found `=` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmpt5tlt4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (long i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n        {\n            result\
    \ += operand[i+1];\n        }\n        else if (operator[i] == \"-\")\n      \
    \  {\n            result -= operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"*\")\n        {\n            result *= operand[i+1];\n        }\n     \
    \   else if (operator[i] == \"//\")\n        {\n            result /= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"**\")\n        {\n            result\
    \ = long(pow(result, operand[i+1]));\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9gzzlmkr.d(61): unittest failure

    ----------------

    ??:? _d_unittestp [0x4291ed]

    ??:? void tmp9gzzlmkr.__unittest_L56_C1() [0x42826d]

    ??:? void tmp9gzzlmkr.__modtest() [0x428458]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dd43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428f46]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a9e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42aa78]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a975]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f1d]

    ??:? runModuleUnitTests [0x42db19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4296b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    ulong i = 0;\n    ulong opLen = operator.length;\n    long\
    \ result = operand[0];\n    for (i = 0; i < opLen; i++)\n    {\n        switch\
    \ (operator[i])\n        {\n            case \"+\":\n                result +=\
    \ operand[i + 1];\n                break;\n            case \"-\":\n         \
    \       result -= operand[i + 1];\n                break;\n            case \"\
    *\":\n                result *= operand[i + 1];\n                break;\n    \
    \        case \"//\":\n                result /= operand[i + 1];\n           \
    \     break;\n            case \"**\":\n                result = pow(result, operand[i\
    \ + 1]);\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2_5434yv.d(35): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2_5434yv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long r = operand[0];\n    for (long i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                r += operand[i + 1];\n                break;\n            case\
    \ \"-\":\n                r -= operand[i + 1];\n                break;\n     \
    \       case \"*\":\n                r *= operand[i + 1];\n                break;\n\
    \            case \"//\":\n                r /= operand[i + 1];\n            \
    \    break;\n            case \"**\":\n                r = cast(long)pow(r, operand[i\
    \ + 1]);\n                break;\n        }\n    }\n    return r;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi94di6z_.d(33): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi94di6z_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n        {\n            result\
    \ += operand[i+1];\n        }\n        else if (operator[i] == \"-\")\n      \
    \  {\n            result -= operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"*\")\n        {\n            result *= operand[i+1];\n        }\n     \
    \   else if (operator[i] == \"//\")\n        {\n            result /= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"**\")\n        {\n            result\
    \ = pow(result, operand[i+1]);\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5qawse14.d(61): unittest failure

    ----------------

    ??:? _d_unittestp [0x4291ed]

    ??:? void tmp5qawse14.__unittest_L56_C1() [0x42826d]

    ??:? void tmp5qawse14.__modtest() [0x428458]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dd43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428f46]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a9e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42aa78]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a975]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f1d]

    ??:? runModuleUnitTests [0x42db19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4296b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{ \n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++) {\n        switch (operator[i]) {\n            case \"+\":\n          \
    \      result += operand[i + 1];\n                break;\n            case \"\
    -\":\n                result -= operand[i + 1];\n                break;\n    \
    \        case \"*\":\n                result *= operand[i + 1];\n            \
    \    break;\n            case \"//\":\n                result /= operand[i + 1];\n\
    \                break;\n            case \"**\":\n                result = (long)\
    \ pow(result, operand[i + 1]);\n                break;\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpanvhn1of.d(46): Error: C style cast illegal, use `cast(long)pow(result,
    operand[i + 1])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpanvhn1of.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    int length = operator.length;\n\
    \    for (int i = 0; i < length; i++) {\n        switch (operator[i]) {\n    \
    \        case \"+\":\n                result += operand[i + 1];\n            \
    \    break;\n            case \"-\":\n                result -= operand[i + 1];\n\
    \                break;\n            case \"*\":\n                result *= operand[i\
    \ + 1];\n                break;\n            case \"//\":\n                result\
    \ /= operand[i + 1];\n                break;\n            case \"**\":\n     \
    \           result = pow(result, operand[i + 1]);\n                break;\n  \
    \      }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw8w0gi6k.d(31): Error: cannot implicitly convert expression `operator.length`
    of type `ulong` to `int`

    /tmp/tmpw8w0gi6k.d(33): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw8w0gi6k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    auto res = operand[0];\n    foreach(i, e; operand[1..$])\n\
    \    {\n        switch(operator[i])\n        {\n            case \"+\": res +=\
    \ e; break;\n            case \"-\": res -= e; break;\n            case \"*\"\
    : res *= e; break;\n            case \"//\": res /= e; break;\n            case\
    \ \"**\": res ^^= e; break;\n        }\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp71jlrzkl.d(33): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp71jlrzkl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{ \n    long _result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++) {\n        if (operator[i] == \"+\") {\n            _result += operand[i+1];\n\
    \        }\n        else if (operator[i] == \"-\") {\n            _result -= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"*\") {\n            _result *= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"//\") {\n            _result /=\
    \ operand[i+1];\n        }\n        else if (operator[i] == \"**\") {\n      \
    \      _result = (long)pow(_result, operand[i+1]);\n        }\n    }\n    return\
    \ _result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6rzpk_2p.d(45): Error: C style cast illegal, use `cast(long)pow(_result,
    operand[i + 1])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6rzpk_2p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    auto oper = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++) {\n        switch (operator[i]) {\n            case '+':\n            \
    \    oper += operand[i + 1];\n                break;\n            case '-':\n\
    \                oper -= operand[i + 1];\n                break;\n           \
    \ case '*':\n                oper *= operand[i + 1];\n                break;\n\
    \            case '//':\n                oper /= operand[i + 1];\n           \
    \     break;\n            case '**':\n                oper = pow(oper, operand[i\
    \ + 1]);\n                break;\n        }\n    }\n    return oper;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptr9x63ta.d(42): Error: unterminated character constant

    /tmp/tmptr9x63ta.d(42): Error: unterminated character constant

    /tmp/tmptr9x63ta.d(43): Error: found `oper` when expecting `:`

    /tmp/tmptr9x63ta.d(43): Error: found `/=` instead of statement

    /tmp/tmptr9x63ta.d(45): Error: unterminated character constant

    /tmp/tmptr9x63ta.d(45): Error: unterminated character constant

    /tmp/tmptr9x63ta.d(46): Error: found `oper` when expecting `:`

    /tmp/tmptr9x63ta.d(46): Error: found `=` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptr9x63ta.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long total = operand[0];\n    for (size_t i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n        {\n            total\
    \ += operand[i+1];\n        }\n        else if (operator[i] == \"-\")\n      \
    \  {\n            total -= operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"*\")\n        {\n            total *= operand[i+1];\n        }\n      \
    \  else if (operator[i] == \"//\")\n        {\n            total /= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"**\")\n        {\n            total\
    \ = pow(total, operand[i+1]);\n        }\n    }\n    return total;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpnjoeyp9j.d(61): unittest failure

    ----------------

    ??:? _d_unittestp [0x4291ed]

    ??:? void tmpnjoeyp9j.__unittest_L56_C1() [0x42826d]

    ??:? void tmpnjoeyp9j.__modtest() [0x428458]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dd43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428f46]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a9e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42aa78]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a975]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f1d]

    ??:? runModuleUnitTests [0x42db19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4296b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n     long result = operand[0];\n     for(size_t i = 0; i < operator.length;\
    \ i++)\n     {\n         switch(operator[i])\n         {\n             case \"\
    +\":\n                result += operand[i+1];\n                break;\n      \
    \       case \"-\":\n                result -= operand[i+1];\n               \
    \ break;\n             case \"*\":\n                result *= operand[i+1];\n\
    \                break;\n             case \"//\":\n                result /=\
    \ operand[i+1];\n                break;\n             case \"**\":\n         \
    \       result = pow(result, operand[i+1]);\n                break;\n        \
    \ }\n     }\n     return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpilucb1mt.d(33): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpilucb1mt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n        {\n            result\
    \ += operand[i+1];\n        }\n        else if (operator[i] == \"-\")\n      \
    \  {\n            result -= operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"*\")\n        {\n            result *= operand[i+1];\n        }\n     \
    \   else if (operator[i] == \"//\")\n        {\n            result /= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"**\")\n        {\n            result\
    \ = pow(result, operand[i+1]);\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5qawse14.d(61): unittest failure

    ----------------

    ??:? _d_unittestp [0x4291ed]

    ??:? void tmp5qawse14.__unittest_L56_C1() [0x42826d]

    ??:? void tmp5qawse14.__modtest() [0x428458]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dd43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428f46]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a9e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42aa78]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a975]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f1d]

    ??:? runModuleUnitTests [0x42db19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4296b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (size_t i = 0; i < operator.length;\
    \ i++)\n    {\n        long curr_op = operand[i + 1];\n        if (operator[i]\
    \ == \"+\")\n            result += curr_op;\n        else if (operator[i] == \"\
    -\")\n            result -= curr_op;\n        else if (operator[i] == \"*\")\n\
    \            result *= curr_op;\n        else if (operator[i] == \"//\")\n   \
    \         result /= curr_op;\n        else if (operator[i] == \"**\")\n      \
    \      result = pow(result, curr_op);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwwf6474b.d(52): unittest failure

    ----------------

    ??:? _d_unittestp [0x429155]

    ??:? void tmpwwf6474b.__unittest_L47_C1() [0x4281d1]

    ??:? void tmpwwf6474b.__modtest() [0x4283bc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dcab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428eae]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a951]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42a9e0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a8dd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428e85]

    ??:? runModuleUnitTests [0x42da81]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429618]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                result += operand[i + 1];\n                break;\n       \
    \     case \"-\":\n                result -= operand[i + 1];\n               \
    \ break;\n            case \"*\":\n                result *= operand[i + 1];\n\
    \                break;\n            case \"//\":\n                result /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                result\
    \ = pow(result, operand[i + 1]);\n                break;\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpovshs_32.d(33): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpovshs_32.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        long num = operand[i + 1];\n        switch (operator[i])\n\
    \        {\n            case \"+\":\n                result += num;\n        \
    \        break;\n            case \"-\":\n                result -= num;\n   \
    \             break;\n            case \"*\":\n                result *= num;\n\
    \                break;\n            case \"//\":\n                result /= num;\n\
    \                break;\n            case \"**\":\n                result = pow(result,\
    \ num);\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpapb6_2wi.d(34): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpapb6_2wi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long sum = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n        {\n            sum +=\
    \ operand[i+1];\n        }\n        else if (operator[i] == \"-\")\n        {\n\
    \            sum -= operand[i+1];\n        }\n        else if (operator[i] ==\
    \ \"*\")\n        {\n            sum *= operand[i+1];\n        }\n        else\
    \ if (operator[i] == \"//\")\n        {\n            sum /= operand[i+1];\n  \
    \      }\n        else if (operator[i] == \"**\")\n        {\n            sum\
    \ = pow(sum, operand[i+1]);\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmx29c20c.d(61): unittest failure

    ----------------

    ??:? _d_unittestp [0x4291ed]

    ??:? void tmpmx29c20c.__unittest_L56_C1() [0x42826d]

    ??:? void tmpmx29c20c.__modtest() [0x428458]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dd43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428f46]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a9e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42aa78]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a975]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f1d]

    ??:? runModuleUnitTests [0x42db19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4296b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    auto a = operand;\n    auto op = operator;\n    long result\
    \ = a[0];\n    for (int i = 0; i < op.length; i++) {\n        if (op[i] == \"\
    +\") result += a[i+1];\n        else if (op[i] == \"-\") result -= a[i+1];\n \
    \       else if (op[i] == \"*\") result *= a[i+1];\n        else if (op[i] ==\
    \ \"//\") result /= a[i+1];\n        else if (op[i] == \"**\") result = (long)pow(result,\
    \ a[i+1]);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp84v1rdds.d(38): Error: C style cast illegal, use `cast(long)pow(result,
    a[i + 1])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp84v1rdds.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    foreach(i, op; operator)\n\
    \    {\n        if(op == \"+\")\n            result += operand[i+1];\n       \
    \ else if(op == \"-\")\n            result -= operand[i+1];\n        else if(op\
    \ == \"*\")\n            result *= operand[i+1];\n        else if(op == \"//\"\
    )\n            result /= operand[i+1];\n        else if(op == \"**\")\n      \
    \      result = pow(result, operand[i+1]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu5ng7429.d(51): unittest failure

    ----------------

    ??:? _d_unittestp [0x42917d]

    ??:? void tmpu5ng7429.__unittest_L46_C1() [0x4281f9]

    ??:? void tmpu5ng7429.__modtest() [0x4283e4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dcd3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428ed6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a979]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42aa08]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a905]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428ead]

    ??:? runModuleUnitTests [0x42daa9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429640]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    // build the expression\n    string expression = \"\";\n \
    \   foreach(idx, op; operator)\n    {\n        expression ~= operand[idx].idup;\n\
    \        expression ~= op;\n    }\n    expression ~= operand[$-1].idup;\n    return\
    \ eval(expression);\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n   \
    \ assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"\
    +\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"\
    *\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp31mlv3xz.d(34): Error: template `object.idup` cannot deduce function
    from argument types `!()(long)`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/druntime/import/object.d(4308):        `object.idup(T)(T[]
    a)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/druntime/import/object.d(4321):        `object.idup(T
    : void)(const(T)[] a)`

    /tmp/tmp31mlv3xz.d(37): Error: template `object.idup` cannot deduce function from
    argument types `!()(long)`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/druntime/import/object.d(4308):        `object.idup(T)(T[]
    a)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/druntime/import/object.d(4321):  '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long answer = operand[0];\n    long length = operand.length;\n\
    \    foreach(int i; 0..operator.length)\n    {\n        long temp1 = operand[i];\n\
    \        long temp2 = operand[i+1];\n        long dg = operator[i].length;\n \
    \       if(dg == 2)\n        {\n            switch(operator[i])\n            {\n\
    \                case \"+\":\n                    answer = temp1 + temp2;\n  \
    \                  break;\n                case \"-\":\n                    answer\
    \ = temp1 - temp2;\n                    break;\n                case \"*\":\n\
    \                    answer = temp1 * temp2;\n                    break;\n   \
    \             case \"//\":\n                    answer = temp1 / temp2;\n    \
    \                break;\n                case \"**\":\n                    answer\
    \ = temp1 ^^ temp2;\n                    break;\n            }\n        }\n  \
    \      else if(dg == 1)\n        {\n            switch(operator[i])\n        \
    \    {\n                case \"+\":\n                    answer = temp1 + temp2;\n\
    \                    break;\n                case \"-\":\n                   \
    \ answer = temp1 - temp2;\n                    break;\n                case \"\
    *\":\n                    answer = temp1 * temp2;\n                    break;\n\
    \                case \"/\":\n                    answer = temp1 / temp2;\n  \
    \                  break;\n                case \"^\":\n                    answer\
    \ = temp1 ^^ temp2;\n                    break;\n            }\n        }\n  \
    \  }\n    return answer;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n\
    \    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n   \
    \ assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2k57umul.d(32): Error: cannot implicitly convert expression `operator.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2k57umul.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    ulong i = 0;\n    long result = operand[0];\n    while(i <\
    \ operator.length)\n    {\n        switch(operator[i])\n        {\n          \
    \  case \"+\":\n                result += operand[i+1];\n                break;\n\
    \            case \"-\":\n                result -= operand[i+1];\n          \
    \      break;\n            case \"*\":\n                result *= operand[i+1];\n\
    \                break;\n            case \"//\":\n                result /= operand[i+1];\n\
    \                break;\n            case \"**\":\n                result = pow(result,\
    \ operand[i+1]);\n                break;\n        }\n        i++;\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz5er0wa3.d(34): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz5er0wa3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long temp = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++) {\n        if (operator[i] == \"+\") {\n            temp += operand[i +\
    \ 1];\n        } else if (operator[i] == \"-\") {\n            temp -= operand[i\
    \ + 1];\n        } else if (operator[i] == \"*\") {\n            temp *= operand[i\
    \ + 1];\n        } else if (operator[i] == \"//\") {\n            temp /= operand[i\
    \ + 1];\n        } else if (operator[i] == \"**\") {\n            temp = (long)pow(temp,\
    \ operand[i + 1]);\n        }\n    }\n    return temp;\n}\n//Below is the test\
    \ cases.\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsadx0d5e.d(41): Error: C style cast illegal, use `cast(long)pow(temp,
    operand[i + 1])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsadx0d5e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    int i, j;\n    long res;\n    string ope;\n    long num;\n\
    \    long[] nums = new long[100];\n    int top = 0;\n    long[] opes = new long[100];\n\
    \    int top2 = 0;\n    long[] ops = new long[100];\n    int top3 = 0;\n    for\
    \ (i = 0; i < operator.length; i++)\n    {\n        ope = operator[i];\n     \
    \   num = operand[i + 1];\n        if (ope == \"**\")\n        {\n           \
    \ res = pow(nums[top - 1], num);\n            nums[top - 1] = res;\n        }\n\
    \        else\n        {\n            nums[top++] = num;\n            opes[top2++]\
    \ = ope;\n        }\n    }\n    for (i = 0; i < top2; i++)\n    {\n        ope\
    \ = opes[i];\n        num = nums[i];\n        if (ope == \"*\" || ope == \"//\"\
    )\n        {\n            res = ops[top3 - 1];\n            ops[top3 - 1] = (ope\
    \ == \"*\") ? res * num : res / num;\n        }\n        else\n        {\n   \
    \         ops[top3++] = num;\n            opes[top2++] = ope;\n        }\n   \
    \ }\n    res = ops[0];\n    for (i = 0; i < top2; i++)\n    {\n        ope = opes[i];\n\
    \        num = ops[i + 1];\n        res = (ope == \"+\") ? res + num : res - num;\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n\
    \    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n   \
    \ assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1taux6da.d(52): Error: cannot implicitly convert expression `ope`
    of type `string` to `long`

    /tmp/tmp1taux6da.d(57): Error: cannot implicitly convert expression `opes[cast(ulong)i]`
    of type `long` to `string`

    /tmp/tmp1taux6da.d(67): Error: cannot implicitly convert expression `ope` of type
    `string` to `long`

    /tmp/tmp1taux6da.d(73): Error: cannot implicitly convert expression `opes[cast(ulong)i]`
    of type `long` to `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1taux6da.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++) {\n        if (operator[i] == \"+\")\n            result += operand[i +\
    \ 1];\n        else if (operator[i] == \"-\")\n            result -= operand[i\
    \ + 1];\n        else if (operator[i] == \"*\")\n            result *= operand[i\
    \ + 1];\n        else if (operator[i] == \"//\")\n            result /= operand[i\
    \ + 1];\n        else if (operator[i] == \"**\")\n            result = (long)pow(result,\
    \ operand[i + 1]);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn4obmyuw.d(41): Error: C style cast illegal, use `cast(long)pow(result,
    operand[i + 1])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn4obmyuw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++) {\n        switch (operator[i]) {\n            case \"+\":\n          \
    \      result += operand[i + 1];\n                break;\n            case \"\
    -\":\n                result -= operand[i + 1];\n                break;\n    \
    \        case \"*\":\n                result *= operand[i + 1];\n            \
    \    break;\n            case \"//\":\n                result /= operand[i + 1];\n\
    \                break;\n            case \"**\":\n                result = pow(result,\
    \ operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzty9zf0j.d(32): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzty9zf0j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                result += operand[i + 1];\n                break;\n       \
    \     case \"-\":\n                result -= operand[i + 1];\n               \
    \ break;\n            case \"*\":\n                result *= operand[i + 1];\n\
    \                break;\n            case \"//\":\n                result /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                result\
    \ = pow(result, operand[i + 1]);\n                break;\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpovshs_32.d(33): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpovshs_32.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++) {\n        if (operator[i] == \"+\")\n            result += operand[i +\
    \ 1];\n        else if (operator[i] == \"-\")\n            result -= operand[i\
    \ + 1];\n        else if (operator[i] == \"*\")\n            result *= operand[i\
    \ + 1];\n        else if (operator[i] == \"//\")\n            result /= operand[i\
    \ + 1];\n        else if (operator[i] == \"**\")\n            result = pow(result,\
    \ operand[i + 1]);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmphs7zdppw.d(50): unittest failure

    ----------------

    ??:? _d_unittestp [0x4291ed]

    ??:? void tmphs7zdppw.__unittest_L45_C1() [0x42826d]

    ??:? void tmphs7zdppw.__modtest() [0x428458]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dd43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428f46]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a9e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42aa78]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a975]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f1d]

    ??:? runModuleUnitTests [0x42db19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4296b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    : result += operand[i+1]; break;\n            case \"-\": result -= operand[i+1];\
    \ break;\n            case \"*\": result *= operand[i+1]; break;\n           \
    \ case \"//\": result /= operand[i+1]; break;\n            case \"**\": result\
    \ = pow(result, operand[i+1]); break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpebh21h58.d(33): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpebh21h58.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    auto math_operators = [\"+\", \"-\", \"*\", \"//\", \"**\"\
    ];\n    auto result = 0;\n    for (auto i = 0; i < operator.length; i++)\n   \
    \ {\n        switch (operator[i])\n        {\n            case \"+\":\n      \
    \          result += operand[i] + operand[i + 1];\n                break;\n  \
    \          case \"-\":\n                result += operand[i] - operand[i + 1];\n\
    \                break;\n            case \"*\":\n                result += operand[i]\
    \ * operand[i + 1];\n                break;\n            case \"//\":\n      \
    \          result += operand[i] / operand[i + 1];\n                break;\n  \
    \          case \"**\":\n                result += pow(operand[i], operand[i +\
    \ 1]);\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi5p_jpgi.d(34): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi5p_jpgi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    // Write your code here\n    long _result = operand[0];\n\
    \    for(int i = 0; i < operator.length; i++)\n    {\n        if(operator[i] ==\
    \ \"*\") _result *= operand[i+1];\n        else if(operator[i] == \"/\") _result\
    \ /= operand[i+1];\n        else if(operator[i] == \"+\") _result += operand[i+1];\n\
    \        else if(operator[i] == \"-\") _result -= operand[i+1];\n        else\
    \ if(operator[i] == \"**\") _result = pow(_result, operand[i+1]);\n    }\n   \
    \ return _result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp70onpfy3.d(47): unittest failure

    ----------------

    ??:? _d_unittestp [0x4291ed]

    ??:? void tmp70onpfy3.__unittest_L42_C1() [0x42826d]

    ??:? void tmp70onpfy3.__modtest() [0x428458]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dd43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428f46]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a9e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42aa78]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a975]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f1d]

    ??:? runModuleUnitTests [0x42db19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4296b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long total;\n    long[] o = operand;\n    string[] ope = operator;\n\
    \    for(int i = 0; i < ope.length; i++)\n    {\n        if(ope[i] == \"+\")\n\
    \        {\n            total = o[i] + o[i+1];\n            o[i+1] = total;\n\
    \        }\n        else if(ope[i] == \"-\")\n        {\n            total = o[i]\
    \ - o[i+1];\n            o[i+1] = total;\n        }\n        else if(ope[i] ==\
    \ \"*\")\n        {\n            total = o[i] * o[i+1];\n            o[i+1] =\
    \ total;\n        }\n        else if(ope[i] == \"//\")\n        {\n          \
    \  total = o[i] / o[i+1];\n            o[i+1] = total;\n        }\n        else\
    \ if(ope[i] == \"**\")\n        {\n            total = o[i] ** o[i+1];\n     \
    \       o[i+1] = total;\n        }\n        else\n        {\n            total\
    \ = 0;\n        }\n    }\n    return total;\n}\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiqd8y6b0.d(57): Error: can only `*` a pointer, not a `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiqd8y6b0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    int n = 0;\n    long result = operand[0];\n    for (n = 0;\
    \ n < operator.length; n++)\n    {\n        if (operator[n] == \"+\")\n      \
    \  {\n            result += operand[n+1];\n        }\n        else if (operator[n]\
    \ == \"-\")\n        {\n            result -= operand[n+1];\n        }\n     \
    \   else if (operator[n] == \"*\")\n        {\n            result *= operand[n+1];\n\
    \        }\n        else if (operator[n] == \"//\")\n        {\n            result\
    \ /= operand[n+1];\n        }\n        else if (operator[n] == \"**\")\n     \
    \   {\n            result = pow(result, operand[n+1]);\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmphrzwbbgb.d(62): unittest failure

    ----------------

    ??:? _d_unittestp [0x4291ed]

    ??:? void tmphrzwbbgb.__unittest_L57_C1() [0x42826d]

    ??:? void tmphrzwbbgb.__modtest() [0x428458]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dd43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428f46]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a9e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42aa78]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a975]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f1d]

    ??:? runModuleUnitTests [0x42db19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4296b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long res = operand[0];\n    for (size_t i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                res += operand[i + 1];\n                break;\n          \
    \  case \"-\":\n                res -= operand[i + 1];\n                break;\n\
    \            case \"*\":\n                res *= operand[i + 1];\n           \
    \     break;\n            case \"//\":\n                res /= operand[i + 1];\n\
    \                break;\n            case \"**\":\n                res = pow(res,\
    \ operand[i + 1]);\n                break;\n        }\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf_k61xav.d(33): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf_k61xav.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n        {\n            result\
    \ += operand[i+1];\n        }\n        else if (operator[i] == \"-\")\n      \
    \  {\n            result -= operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"*\")\n        {\n            result *= operand[i+1];\n        }\n     \
    \   else if (operator[i] == \"//\")\n        {\n            result /= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"**\")\n        {\n            result\
    \ = pow(result, operand[i+1]);\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5qawse14.d(61): unittest failure

    ----------------

    ??:? _d_unittestp [0x4291ed]

    ??:? void tmp5qawse14.__unittest_L56_C1() [0x42826d]

    ??:? void tmp5qawse14.__modtest() [0x428458]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dd43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428f46]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a9e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42aa78]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a975]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f1d]

    ??:? runModuleUnitTests [0x42db19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4296b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (long i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n        {\n            result\
    \ += operand[i+1];\n        }\n        else if (operator[i] == \"-\")\n      \
    \  {\n            result -= operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"*\")\n        {\n            result *= operand[i+1];\n        }\n     \
    \   else if (operator[i] == \"//\")\n        {\n            result /= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"**\")\n        {\n            result\
    \ = pow(result, operand[i+1]);\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqwr1z8ru.d(61): unittest failure

    ----------------

    ??:? _d_unittestp [0x4291ed]

    ??:? void tmpqwr1z8ru.__unittest_L56_C1() [0x42826d]

    ??:? void tmpqwr1z8ru.__modtest() [0x428458]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dd43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428f46]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a9e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42aa78]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a975]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f1d]

    ??:? runModuleUnitTests [0x42db19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4296b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    auto total = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                total += operand[i + 1];\n                break;\n        \
    \    case \"-\":\n                total -= operand[i + 1];\n                break;\n\
    \            case \"*\":\n                total *= operand[i + 1];\n         \
    \       break;\n            case \"//\":\n                total /= operand[i +\
    \ 1];\n                break;\n            case \"**\":\n                total\
    \ = pow(total, operand[i + 1]);\n                break;\n        }\n    }\n  \
    \  return total;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm18wv_40.d(33): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm18wv_40.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    int operators_number = operator.length;\n\
    \    for (int i = 0; i < operators_number; i++)\n    {\n        if (operator[i]\
    \ == \"+\")\n        {\n            result += operand[i+1];\n        }\n     \
    \   else if (operator[i] == \"-\")\n        {\n            result -= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"*\")\n        {\n            result\
    \ *= operand[i+1];\n        }\n        else if (operator[i] == \"//\")\n     \
    \   {\n            result /= operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"**\")\n        {\n            result = pow(result, operand[i+1]);\n   \
    \     }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl79_x7ya.d(31): Error: cannot implicitly convert expression `operator.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl79_x7ya.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n  long result = operand[0];\n  for (int i = 0; i < operator.length;\
    \ i++)\n  {\n    if (operator[i] == \"+\") {\n      result += operand[i+1];\n\
    \    } else if (operator[i] == \"-\") {\n      result -= operand[i+1];\n    }\
    \ else if (operator[i] == \"*\") {\n      result *= operand[i+1];\n    } else\
    \ if (operator[i] == \"//\") {\n      result /= operand[i+1];\n    } else if (operator[i]\
    \ == \"**\") {\n      result = pow(result, operand[i+1]);\n    } else {\n    \
    \  return -1;\n    }\n  }\n  return result;\n}\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8ad8_wms.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4291fd]

    ??:? void tmp8ad8_wms.__unittest_L49_C1() [0x42827d]

    ??:? void tmp8ad8_wms.__modtest() [0x428468]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dd53]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428f56]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a9f9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42aa88]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a985]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f2d]

    ??:? runModuleUnitTests [0x42db29]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4296c0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    int i = 0;\n    while(i < operator.length)\n\
    \    {\n        if(operator[i] == \"+\")\n        {\n            result += operand[i+1];\n\
    \        }\n        else if(operator[i] == \"-\")\n        {\n            result\
    \ -= operand[i+1];\n        }\n        else if(operator[i] == \"*\")\n       \
    \ {\n            result *= operand[i+1];\n        }\n        else if(operator[i]\
    \ == \"//\")\n        {\n            result /= operand[i+1];\n        }\n    \
    \    else if(operator[i] == \"**\")\n        {\n            result = pow(result,\
    \ operand[i+1]);\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpp4jtj6mh.d(63): unittest failure

    ----------------

    ??:? _d_unittestp [0x4291ed]

    ??:? void tmpp4jtj6mh.__unittest_L58_C1() [0x42826d]

    ??:? void tmpp4jtj6mh.__modtest() [0x428458]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dd43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428f46]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a9e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42aa78]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a975]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f1d]

    ??:? runModuleUnitTests [0x42db19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4296b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    /*\n        be careful on the error line .\n        There\
    \ are five kinds of algebra operators:\n        addition(+), subtraction(-), multiplication(*),\
    \ floor division(//), exponentiation(**)\n        And the order of precedence\
    \ are:\n        exponentiation(**) > multiplication(*), floor division(//) > addition(+)\
    \ = subtraction(-)\n        We should do the multiplication, floor division and\
    \ exponentiation first.\n        For example:\n        2 + 3 * 4 - 5 \n      \
    \  should be 2 + (3 * 4) - 5, not 2 + 3 * (4 - 5).\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeoxdt6xg.d(30): Error: unterminated /* */ comment

    /tmp/tmpeoxdt6xg.d(48): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeoxdt6xg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long tmp = operand[0];\n    int x = 1;\n    foreach(string\
    \ op; operator)\n    {\n        switch(op)\n        {\n            case \"+\"\
    :\n                tmp += operand[x];\n                break;\n            case\
    \ \"-\":\n                tmp -= operand[x];\n                break;\n       \
    \     case \"*\":\n                tmp *= operand[x];\n                break;\n\
    \            case \"//\":\n                tmp /= operand[x];\n              \
    \  break;\n            case \"**\":\n                tmp = pow(tmp, operand[x]);\n\
    \                break;\n        }\n        x++;\n    }\n    return tmp;\n}\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp971gkfbt.d(34): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp971gkfbt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\") result += operand[i+1];\n   \
    \     else if (operator[i] == \"-\") result -= operand[i+1];\n        else if\
    \ (operator[i] == \"*\") result *= operand[i+1];\n        else if (operator[i]\
    \ == \"//\") result /= operand[i+1];\n        else if (operator[i] == \"**\")\
    \ result = pow(result, operand[i+1]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpe79xydkk.d(46): unittest failure

    ----------------

    ??:? _d_unittestp [0x4291ed]

    ??:? void tmpe79xydkk.__unittest_L41_C1() [0x42826d]

    ??:? void tmpe79xydkk.__modtest() [0x428458]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dd43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428f46]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a9e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42aa78]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a975]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f1d]

    ??:? runModuleUnitTests [0x42db19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4296b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long res = operand[0];\n    int j = 0;\n    for (int i = 1;\
    \ i < operand.length; i++)\n    {\n        switch (operator[j])\n        {\n \
    \           case \"+\":\n                res += operand[i];\n                break;\n\
    \            case \"-\":\n                res -= operand[i];\n               \
    \ break;\n            case \"*\":\n                res *= operand[i];\n      \
    \          break;\n            case \"//\":\n                res /= operand[i];\n\
    \                break;\n            case \"**\":\n                res = pow(res,\
    \ operand[i]);\n                break;\n        }\n        j++;\n    }\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp6o1lwdd.d(34): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp6o1lwdd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    if (operator.length != operand.length - 1)\n        return\
    \ -1;\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                result += operand[i + 1];\n                break;\n       \
    \     case \"-\":\n                result -= operand[i + 1];\n               \
    \ break;\n            case \"*\":\n                result *= operand[i + 1];\n\
    \                break;\n            case \"//\":\n                result /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                result\
    \ = pow(result, operand[i + 1]);\n                break;\n            default:\n\
    \                break;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    foreach(int i, string op; zip(i,\
    \ op; operator))\n    {\n        switch(op)\n        {\n            case \"+\"\
    :\n                result += operand[i+1];\n                break;\n         \
    \   case \"-\":\n                result -= operand[i+1];\n                break;\n\
    \            case \"*\":\n                result *= operand[i+1];\n          \
    \      break;\n            case \"//\":\n                result /= operand[i+1];\n\
    \                break;\n            case \"**\":\n                result = long(pow(result,\
    \ operand[i+1]));\n                break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc5jqj_u0.d(31): Error: found `;` when expecting `,`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc5jqj_u0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    int nOperator = operator.length;\n    int nOperand = operand.length;\n\
    \    int n;\n    long value;\n    if(nOperator == nOperand - 1)\n    {\n     \
    \   n = nOperator;\n        value = operand[0];\n        for(int i = 0; i < n;\
    \ i++)\n        {\n            switch(operator[i])\n            {\n          \
    \      case \"+\":\n                    value += operand[i+1];\n             \
    \       break;\n                case \"-\":\n                    value -= operand[i+1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ value *= operand[i+1];\n                    break;\n                case \"\
    //\":\n                    value /= operand[i+1];\n                    break;\n\
    \                case \"**\":\n                    value = (long)pow(value, operand[i+1]);\n\
    \                    break;\n            }\n        }\n    }\n    return value;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpadche3_3.d(55): Error: C style cast illegal, use `cast(long)pow(value,
    operand[i + 1])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpadche3_3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long answer = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n        {\n            answer\
    \ += operand[i+1];\n        }\n        else if (operator[i] == \"-\")\n      \
    \  {\n            answer -= operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"*\")\n        {\n            answer *= operand[i+1];\n        }\n     \
    \   else if (operator[i] == \"//\")\n        {\n            answer /= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"**\")\n        {\n            answer\
    \ = answer ^ operand[i+1];\n        }\n    }\n    return answer;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp0h9eti26.d(60): unittest failure

    ----------------

    ??:? _d_unittestp [0x42910d]

    ??:? void tmp0h9eti26.__unittest_L56_C1() [0x42817b]

    ??:? void tmp0h9eti26.__modtest() [0x428378]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dc63]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428e66]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a909]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42a998]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a895]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428e3d]

    ??:? runModuleUnitTests [0x42da39]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4295d0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    int n = operand.length - 1;\n    if (n < 1) return 0;\n  \
    \  else if (n == 1) return operand[0];\n    else\n    {\n        if (operator[0]\
    \ == \"+\") operand[1] += operand[0];\n        else if (operator[0] == \"-\")\
    \ operand[1] -= operand[0];\n        else if (operator[0] == \"*\") operand[1]\
    \ *= operand[0];\n        else if (operator[0] == \"//\") operand[1] = cast(long)floor(cast(double)operand[1]\
    \ / operand[0]);\n        else if (operator[0] == \"**\") operand[1] = cast(long)pow(cast(double)operand[1],\
    \ cast(double)operand[0]);\n        return do_algebra(operator[1 .. $], operand[1\
    \ .. $]);\n    }\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6yupv0ze.d(30): Error: cannot implicitly convert expression `operand.length
    - 1LU` of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6yupv0ze.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n        {\n            result\
    \ += operand[i+1];\n        }\n        else if (operator[i] == \"-\")\n      \
    \  {\n            result -= operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"*\")\n        {\n            result *= operand[i+1];\n        }\n     \
    \   else if (operator[i] == \"//\")\n        {\n            result /= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"**\")\n        {\n            result\
    \ = pow(result, operand[i+1]);\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5qawse14.d(61): unittest failure

    ----------------

    ??:? _d_unittestp [0x4291ed]

    ??:? void tmp5qawse14.__unittest_L56_C1() [0x42826d]

    ??:? void tmp5qawse14.__modtest() [0x428458]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dd43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428f46]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a9e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42aa78]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a975]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f1d]

    ??:? runModuleUnitTests [0x42db19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4296b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    if (operator.length != operand.length - 1)\n        return\
    \ -1;\n    \n    long result = operand[0];\n    int i = 0;\n    while (i < operator.length)\n\
    \    {\n        switch (operator[i])\n        {\n            case \"+\":\n   \
    \             result += operand[i + 1];\n                break;\n            case\
    \ \"-\":\n                result -= operand[i + 1];\n                break;\n\
    \            case \"*\":\n                result *= operand[i + 1];\n        \
    \        break;\n            case \"//\":\n                result /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                result\
    \ = pow(result, operand[i + 1]);\n                break;\n            default:\n\
    \                return -1;\n        }\n        i++;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpv32sry4y.d(66): unittest failure

    ----------------

    ??:? _d_unittestp [0x429569]

    ??:? void tmpv32sry4y.__unittest_L61_C1() [0x428355]

    ??:? void tmpv32sry4y.__modtest() [0x428758]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42e113]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429246]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42adb9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ae48]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ad45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42921d]

    ??:? runModuleUnitTests [0x42dee9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429a80]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    //Create a variable for the answer\n    long answer = operand[0];\n\
    \    //Iterate through the operator array\n    for(size_t i = 0; i < operator.length;\
    \ i++)\n    {\n        if(operator[i] == \"*\")\n        {\n            answer\
    \ *= operand[i+1];\n        }\n        else if(operator[i] == \"+\")\n       \
    \ {\n            answer += operand[i+1];\n        }\n        else if(operator[i]\
    \ == \"-\")\n        {\n            answer -= operand[i+1];\n        }\n     \
    \   else if(operator[i] == \"//\")\n        {\n            answer /= operand[i+1];\n\
    \        }\n        else if(operator[i] == \"**\")\n        {\n            answer\
    \ = pow(answer, operand[i+1]);\n        }\n    }\n    return answer;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpb2cwyf75.d(63): unittest failure

    ----------------

    ??:? _d_unittestp [0x4291ed]

    ??:? void tmpb2cwyf75.__unittest_L58_C1() [0x42826d]

    ??:? void tmpb2cwyf75.__modtest() [0x428458]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dd43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428f46]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a9e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42aa78]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a975]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f1d]

    ??:? runModuleUnitTests [0x42db19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4296b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    foreach(int i, op; operator)\n\
    \    {\n        long op2 = operand[i+1];\n        switch(op)\n        {\n    \
    \        case '+': result += op2; break;\n            case '-': result -= op2;\
    \ break;\n            case '*': result *= op2; break;\n            case '//':\
    \ result /= op2; break;\n            case '**': result = pow(result, op2); break;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1t009veg.d(39): Error: unterminated character constant

    /tmp/tmp1t009veg.d(39): Error: unterminated character constant

    /tmp/tmp1t009veg.d(39): Error: found `result` when expecting `:`

    /tmp/tmp1t009veg.d(39): Error: found `/=` instead of statement

    /tmp/tmp1t009veg.d(40): Error: unterminated character constant

    /tmp/tmp1t009veg.d(40): Error: unterminated character constant

    /tmp/tmp1t009veg.d(40): Error: found `result` when expecting `:`

    /tmp/tmp1t009veg.d(40): Error: found `=` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1t009veg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    foreach(i, op; operator)\n\
    \    {\n        if(op == \"+\")\n            result += operand[i+1];\n       \
    \ else if(op == \"-\")\n            result -= operand[i+1];\n        else if(op\
    \ == \"*\")\n            result *= operand[i+1];\n        else if(op == \"//\"\
    )\n            result /= operand[i+1];\n        else if(op == \"**\")\n      \
    \      result = pow(result, operand[i+1]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu5ng7429.d(51): unittest failure

    ----------------

    ??:? _d_unittestp [0x42917d]

    ??:? void tmpu5ng7429.__unittest_L46_C1() [0x4281f9]

    ??:? void tmpu5ng7429.__modtest() [0x4283e4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dcd3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428ed6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a979]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42aa08]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a905]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428ead]

    ??:? runModuleUnitTests [0x42daa9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429640]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\") result += operand[i+1];\n   \
    \     else if (operator[i] == \"-\") result -= operand[i+1];\n        else if\
    \ (operator[i] == \"*\") result *= operand[i+1];\n        else if (operator[i]\
    \ == \"//\") result /= operand[i+1];\n        else if (operator[i] == \"**\")\
    \ result = pow(result, operand[i+1]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpe79xydkk.d(46): unittest failure

    ----------------

    ??:? _d_unittestp [0x4291ed]

    ??:? void tmpe79xydkk.__unittest_L41_C1() [0x42826d]

    ??:? void tmpe79xydkk.__modtest() [0x428458]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dd43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428f46]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a9e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42aa78]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a975]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f1d]

    ??:? runModuleUnitTests [0x42db19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4296b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long temp = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++) {\n        switch (operator[i]) {\n            case '+':\n            \
    \    temp += operand[i + 1];\n                break;\n            case '-':\n\
    \                temp -= operand[i + 1];\n                break;\n           \
    \ case '*':\n                temp *= operand[i + 1];\n                break;\n\
    \            case '//':\n                temp /= operand[i + 1];\n           \
    \     break;\n            case '**':\n                temp = temp.pow(operand[i\
    \ + 1]);\n                break;\n        }\n    }\n    return temp;\n}\nlong\
    \ do_algebra(string[] operator, long[] operand) \n{\n    long temp = operand[0];\n\
    \    for (int i = 0; i < operator.length; i++) {\n        switch (operator[i])\
    \ {\n            case '+':\n                temp += operand[i + 1];\n        \
    \        break;\n            case '-':\n                temp -= operand[i + 1];\n\
    \                break;\n            case '*':\n                temp *= operand[i\
    \ + 1];\n                break;\n            case '//':\n                temp\
    \ /= operand[i + 1];\n                break;\n            case '**':\n       \
    \         temp = temp.pow(operand[i + 1]);\n                break;\n        }\n\
    \    }\n    return temp;\n}\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long temp = operand[0];\n    for (int i = 0; i < operator.length; i++)\
    \ {\n        switch (operator[i]) {\n            case '+':\n                temp\
    \ += operand[i + 1];\n                break;\n            case '-':\n        \
    \        temp -= operand[i + 1];\n                break;\n            case '*':\n\
    \                temp *= operand[i + 1];\n                break;\n           \
    \ case '//':\n                temp /= operand[i + 1];\n                break;\n\
    \            case '**':\n                temp = temp.pow(operand[i + 1]);\n  \
    \              break\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj10m3nr0.d(42): Error: unterminated character constant

    /tmp/tmpj10m3nr0.d(42): Error: unterminated character constant

    /tmp/tmpj10m3nr0.d(43): Error: found `temp` when expecting `:`

    /tmp/tmpj10m3nr0.d(43): Error: found `/=` instead of statement

    /tmp/tmpj10m3nr0.d(45): Error: unterminated character constant

    /tmp/tmpj10m3nr0.d(45): Error: unterminated character constant

    /tmp/tmpj10m3nr0.d(46): Error: found `temp` when expecting `:`

    /tmp/tmpj10m3nr0.d(46): Error: found `=` instead of statement

    /tmp/tmpj10m3nr0.d(66): Error: unterminated character constant

    /tmp/tmpj10m3nr0.d(66): Error: unterminated character constant

    /tmp/tmpj10m3nr0.d(67): Error: found `temp` when expecting `:`

    /tmp/tmpj10m3nr0.d(67): Error: found `/=` instead of statement

    /tmp/tmpj10m3nr0.d(69): Error: unterminated character constant

    /tmp/tmpj10m3nr0.d(69): Error: unterminated character constant

    /tmp/tmpj10m3nr0.d(70): Error: found `temp` when expecting `:`

    /tmp/tmpj10m3nr0.d(70): Error: found `=` instead of statement

    /tmp/tmpj10m3nr0.d'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long total = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\") total += operand[i+1];\n    \
    \    else if (operator[i] == \"-\") total -= operand[i+1];\n        else if (operator[i]\
    \ == \"*\") total *= operand[i+1];\n        else if (operator[i] == \"//\") total\
    \ /= operand[i+1];\n        else if (operator[i] == \"**\") total = pow(total,\
    \ operand[i+1]);\n    }\n    return total;\n}\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpg8_wldzw.d(46): unittest failure

    ----------------

    ??:? _d_unittestp [0x4291ed]

    ??:? void tmpg8_wldzw.__unittest_L41_C1() [0x42826d]

    ??:? void tmpg8_wldzw.__modtest() [0x428458]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dd43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428f46]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a9e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42aa78]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a975]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f1d]

    ??:? runModuleUnitTests [0x42db19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4296b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    foreach(k,v; operand)\n   \
    \ {\n        if(k == 0)\n            continue;\n        if(operator[k-1] == \"\
    +\")\n            result += v;\n        else if(operator[k-1] == \"-\")\n    \
    \        result -= v;\n        else if(operator[k-1] == \"*\")\n            result\
    \ *= v;\n        else if(operator[k-1] == \"//\")\n            result /= v;\n\
    \        else if(operator[k-1] == \"**\")\n            result = pow(result, v);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpggsr1lm1.d(53): unittest failure

    ----------------

    ??:? _d_unittestp [0x42916d]

    ??:? void tmpggsr1lm1.__unittest_L48_C1() [0x4281ed]

    ??:? void tmpggsr1lm1.__modtest() [0x4283d8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dcc3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428ec6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a969]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42a9f8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a8f5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428e9d]

    ??:? runModuleUnitTests [0x42da99]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429630]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (auto i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                result += operand[i + 1];\n                break;\n       \
    \     case \"-\":\n                result -= operand[i + 1];\n               \
    \ break;\n            case \"*\":\n                result *= operand[i + 1];\n\
    \                break;\n            case \"//\":\n                result /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                result\
    \ = power(result, operand[i + 1]);\n                break;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n   \
    \ assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"\
    +\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"\
    *\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl8ainhqk.d(48): Error: undefined identifier `power`, did you mean
    template `pow(F, G)(F x, G n) if (isFloatingPoint!F && isIntegral!G)`?

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                result += operand[i + 1];\n                break;\n       \
    \     case \"-\":\n                result -= operand[i + 1];\n               \
    \ break;\n            case \"*\":\n                result *= operand[i + 1];\n\
    \                break;\n            case \"//\":\n                result /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                result\
    \ = pow(result, operand[i + 1]);\n                break;\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpovshs_32.d(33): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpovshs_32.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    auto result = operand[0];\n    foreach(i, v; operand[1..$])\n\
    \    {\n        switch(operator[i - 1])\n        {\n            case \"+\": result\
    \ += v; break;\n            case \"-\": result -= v; break;\n            case\
    \ \"*\": result *= v; break;\n            case \"//\": result /= v; break;\n \
    \           case \"**\": result = (long)pow(result, v); break;\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n\
    \    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n   \
    \ assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj2q921do.d(39): Error: C style cast illegal, use `cast(long)pow(result,
    v)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj2q921do.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (size_t i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n        {\n            result\
    \ += operand[i + 1];\n        }\n        else if (operator[i] == \"-\")\n    \
    \    {\n            result -= operand[i + 1];\n        }\n        else if (operator[i]\
    \ == \"*\")\n        {\n            result *= operand[i + 1];\n        }\n   \
    \     else if (operator[i] == \"//\")\n        {\n            result /= operand[i\
    \ + 1];\n        }\n        else if (operator[i] == \"**\")\n        {\n     \
    \       result = pow(result, operand[i + 1]);\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpejdn0qyt.d(61): unittest failure

    ----------------

    ??:? _d_unittestp [0x4291ed]

    ??:? void tmpejdn0qyt.__unittest_L56_C1() [0x42826d]

    ??:? void tmpejdn0qyt.__modtest() [0x428458]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dd43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428f46]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a9e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42aa78]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a975]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f1d]

    ??:? runModuleUnitTests [0x42db19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4296b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    : result += operand[i+1]; break;\n            case \"-\": result -= operand[i+1];\
    \ break;\n            case \"*\": result *= operand[i+1]; break;\n           \
    \ case \"//\": result /= operand[i+1]; break;\n            case \"**\": result\
    \ = pow(result, operand[i+1]); break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpebh21h58.d(33): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpebh21h58.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long a = operand[0];\n    long b = operand[1];\n    foreach(int\
    \ i, string s; operand[i+1], operator)\n    {\n        if(s == \"+\")\n      \
    \      a += b;\n        else if(s == \"-\")\n            a -= b;\n        else\
    \ if(s == \"*\")\n            a *= b;\n        else if(s == \"//\")\n        \
    \    a /= b;\n        else if(s == \"**\")\n            a = power(a, b);\n   \
    \     b = operand[i+2];\n    }\n    return a;\n}\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeg0zvcsh.d(32): Error: undefined identifier `i`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeg0zvcsh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (long i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n        {\n            result\
    \ += operand[i+1];\n        }\n        else if (operator[i] == \"-\")\n      \
    \  {\n            result -= operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"*\")\n        {\n            result *= operand[i+1];\n        }\n     \
    \   else if (operator[i] == \"//\")\n        {\n            result /= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"**\")\n        {\n            result\
    \ = pow(result, operand[i+1]);\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqwr1z8ru.d(61): unittest failure

    ----------------

    ??:? _d_unittestp [0x4291ed]

    ??:? void tmpqwr1z8ru.__unittest_L56_C1() [0x42826d]

    ??:? void tmpqwr1z8ru.__modtest() [0x428458]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dd43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428f46]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a9e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42aa78]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a975]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f1d]

    ??:? runModuleUnitTests [0x42db19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4296b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    // Write your code here\n    long result;\n    if(operator.length\
    \ != operand.length - 1)\n        throw new Exception(\"Invalid number of operators\
    \ or operands\");\n    result = operand[0];\n    for(int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch(operator[i])\n        {\n            case \"+\"\
    :\n                result += operand[i+1];\n                break;\n         \
    \   case \"-\":\n                result -= operand[i+1];\n                break;\n\
    \            case \"*\":\n                result *= operand[i+1];\n          \
    \      break;\n            case \"//\":\n                result /= operand[i+1];\n\
    \                break;\n            case \"**\":\n                result = (long)pow(result,\
    \ operand[i+1]);\n                break;\n            default:\n             \
    \   throw new Exception(\"Invalid operator found\");\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp243wgqoi.d(52): Error: C style cast illegal, use `cast(long)pow(result,
    operand[i + 1])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp243wgqoi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    enum OPERATORS\n    {\n        '+', '-', '*', '/', '%', '^'\n\
    \    }\n    long[] copy = operand.dup;\n    long result = copy[0];\n    for(int\
    \ i = 0; i < operator.length; i++)\n    {\n        if(operator[i] == \"+\")\n\
    \        {\n            result += copy[i+1];\n        }\n        else if(operator[i]\
    \ == \"-\")\n        {\n            result -= copy[i+1];\n        }\n        else\
    \ if(operator[i] == \"*\")\n        {\n            result *= copy[i+1];\n    \
    \    }\n        else if(operator[i] == \"/\")\n        {\n            result /=\
    \ copy[i+1];\n        }\n        else if(operator[i] == \"%\")\n        {\n  \
    \          result %= copy[i+1];\n        }\n        else if(operator[i] == \"\
    ^\")\n        {\n            result = pow(result, copy[i+1]);\n        }\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n\
    \    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n   \
    \ assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy_r0z20w.d(32): Error: basic type expected, not `43U`

    /tmp/tmpy_r0z20w.d(32): Error: no identifier for declarator `_error_`

    /tmp/tmpy_r0z20w.d(32): Error: type only allowed if anonymous enum and no enum
    type

    /tmp/tmpy_r0z20w.d(32): Error: if type, there must be an initializer

    /tmp/tmpy_r0z20w.d(32): Error: found `43U` when expecting `,`

    /tmp/tmpy_r0z20w.d(32): Error: basic type expected, not `,`

    /tmp/tmpy_r0z20w.d(32): Error: no identifier for declarator `_error_`

    /tmp/tmpy_r0z20w.d(32): Error: type only allowed if anonymous enum and no enum
    type

    /tmp/tmpy_r0z20w.d(32): Error: if type, there must be an initializer

    /tmp/tmpy_r0z20w.d(32): Error: basic type expected, not `45U`

    /tmp/tmpy_r0z20w.d(32): Error: no identifier for declarator `_error_`

    /tmp/tmpy_r0z20w.d(32): Error: type only allowed if anonymous enum and no enum
    type

    /tmp/tmpy_r0z20w.d(32): Error: if type, there must be an initializer

    /tmp/tmpy_r0z20w.d(32): Error: found `45U` when expecting `,`

    /tmp/tmpy_r0z20w.d(32): Error: basic type expec'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        result = switch(operator[i])\n        {\n            case\
    \ \"+\" -> result + operand[i + 1];\n            case \"-\" -> result - operand[i\
    \ + 1];\n            case \"*\" -> result * operand[i + 1];\n            case\
    \ \"//\" -> result / operand[i + 1];\n            case \"**\" -> (long)pow(result,\
    \ operand[i + 1]);\n            default -> result;\n        };\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuvxehh0j.d(33): Error: expression expected, not `switch`

    /tmp/tmpuvxehh0j.d(34): Error: found `{` when expecting `;` following statement

    /tmp/tmpuvxehh0j.d(35): Error: expression expected, not `>`

    /tmp/tmpuvxehh0j.d(35): Error: found `result` when expecting `:`

    /tmp/tmpuvxehh0j.d(36): Error: expression expected, not `>`

    /tmp/tmpuvxehh0j.d(36): Error: found `result` when expecting `:`

    /tmp/tmpuvxehh0j.d(37): Error: expression expected, not `>`

    /tmp/tmpuvxehh0j.d(37): Error: found `result` when expecting `:`

    /tmp/tmpuvxehh0j.d(38): Error: expression expected, not `>`

    /tmp/tmpuvxehh0j.d(38): Error: found `result` when expecting `:`

    /tmp/tmpuvxehh0j.d(38): Error: found `/` instead of statement

    /tmp/tmpuvxehh0j.d(39): Error: expression expected, not `>`

    /tmp/tmpuvxehh0j.d(39): Error: found `)` when expecting `.` following long

    /tmp/tmpuvxehh0j.d(39): Error: found `;` when expecting `,`

    /tmp/tmpuvxehh0j.d(40): Error: expression expected, not `default`

    /tmp/tmpuvxehh0j.d(40): Error: expression expected, not '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++) {\n        string op = operator[i];\n        long op2 = operand[i + 1];\n\
    \        switch (op) {\n            case \"+\":\n                result += op2;\n\
    \                break;\n            case \"-\":\n                result -= op2;\n\
    \                break;\n            case \"*\":\n                result *= op2;\n\
    \                break;\n            case \"//\":\n                result /= op2;\n\
    \                break;\n            case \"**\":\n                result = powl(result,\
    \ op2);\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkp8sla81.d(48): Error: undefined identifier `powl`, did you mean
    template `pow(F, G)(F x, G n) if (isFloatingPoint!F && isIntegral!G)`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkp8sla81.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    int i = 0;\n    foreach(string\
    \ op; operator)\n    {\n        switch(op)\n        {\n            case \"+\"\
    :\n                result += operand[i+1];\n                break;\n         \
    \   case \"-\":\n                result -= operand[i+1];\n                break;\n\
    \            case \"*\":\n                result *= operand[i+1];\n          \
    \      break;\n            case \"//\":\n                result /= operand[i+1];\n\
    \                break;\n            case \"**\":\n                result ^= operand[i+1];\n\
    \                break;\n        }\n        i++;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf_a25ydv.d(34): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf_a25ydv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (auto i = 0; i < operator.length;\
    \ i++) {\n        switch (operator[i]) {\n            case '+':\n            \
    \    result += operand[i + 1];\n                break;\n            case '-':\n\
    \                result -= operand[i + 1];\n                break;\n         \
    \   case '*':\n                result *= operand[i + 1];\n                break;\n\
    \            case '//':\n                result /= operand[i + 1];\n         \
    \       break;\n            case '**':\n                result = pow(result, operand[i\
    \ + 1]);\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprtx8uart.d(42): Error: unterminated character constant

    /tmp/tmprtx8uart.d(42): Error: unterminated character constant

    /tmp/tmprtx8uart.d(43): Error: found `result` when expecting `:`

    /tmp/tmprtx8uart.d(43): Error: found `/=` instead of statement

    /tmp/tmprtx8uart.d(45): Error: unterminated character constant

    /tmp/tmprtx8uart.d(45): Error: unterminated character constant

    /tmp/tmprtx8uart.d(46): Error: found `result` when expecting `:`

    /tmp/tmprtx8uart.d(46): Error: found `=` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprtx8uart.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n  long result = operand[0];\n  for (int i = 0; i < operator.length;\
    \ i++) {\n    switch (operator[i]) {\n      case \"+\":\n        result += operand[i\
    \ + 1];\n        break;\n      case \"-\":\n        result -= operand[i + 1];\n\
    \        break;\n      case \"*\":\n        result *= operand[i + 1];\n      \
    \  break;\n      case \"//\":\n        result /= operand[i + 1];\n        break;\n\
    \      case \"**\":\n        result = pow(result, operand[i + 1]);\n        break;\n\
    \    }\n  }\n  return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzvlcdmcm.d(32): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzvlcdmcm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long[] numbers = operand;\n    string[] ops = operator;\n\
    \    long result = numbers[0];\n    for (int i = 0; i < ops.length; i++)\n   \
    \ {\n        switch (ops[i])\n        {\n            case \"+\":\n           \
    \     result += numbers[i + 1];\n                break;\n            case \"-\"\
    :\n                result -= numbers[i + 1];\n                break;\n       \
    \     case \"*\":\n                result *= numbers[i + 1];\n               \
    \ break;\n            case \"//\":\n                result /= numbers[i + 1];\n\
    \                break;\n            case \"**\":\n                result = pow(result,\
    \ numbers[i + 1]);\n                break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0g98o0h8.d(35): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0g98o0h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++) {\n        switch (operator[i]) {\n            case \"+\":\n          \
    \      result += operand[i + 1];\n                break;\n            case \"\
    -\":\n                result -= operand[i + 1];\n                break;\n    \
    \        case \"*\":\n                result *= operand[i + 1];\n            \
    \    break;\n            case \"//\":\n                result /= operand[i + 1];\n\
    \                break;\n            case \"**\":\n                result = pow(result,\
    \ operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzty9zf0j.d(32): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzty9zf0j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                result += operand[i + 1];\n                break;\n       \
    \     case \"-\":\n                result -= operand[i + 1];\n               \
    \ break;\n            case \"*\":\n                result *= operand[i + 1];\n\
    \                break;\n            case \"//\":\n                result /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                result\
    \ = result ^^ operand[i + 1];\n                break;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwextye1x.d(33): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwextye1x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\") result += operand[i+1];\n   \
    \     else if (operator[i] == \"-\") result -= operand[i+1];\n        else if\
    \ (operator[i] == \"*\") result *= operand[i+1];\n        else if (operator[i]\
    \ == \"//\") result /= operand[i+1];\n        else if (operator[i] == \"**\")\
    \ result = pow(result, operand[i+1]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpe79xydkk.d(46): unittest failure

    ----------------

    ??:? _d_unittestp [0x4291ed]

    ??:? void tmpe79xydkk.__unittest_L41_C1() [0x42826d]

    ??:? void tmpe79xydkk.__modtest() [0x428458]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dd43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428f46]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a9e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42aa78]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a975]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f1d]

    ??:? runModuleUnitTests [0x42db19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4296b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long res = operand[0];\n    for (size_t i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case '+':\
    \ res += operand[i + 1]; break;\n            case '-': res -= operand[i + 1];\
    \ break;\n            case '*': res *= operand[i + 1]; break;\n            case\
    \ '//': res /= operand[i + 1]; break;\n            case '**': res = pow(res, operand[i\
    \ + 1]); break;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias\
    \ candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L,\
    \ 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L,\
    \ 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq960b6hh.d(38): Error: unterminated character constant

    /tmp/tmpq960b6hh.d(38): Error: unterminated character constant

    /tmp/tmpq960b6hh.d(38): Error: found `res` when expecting `:`

    /tmp/tmpq960b6hh.d(38): Error: found `/=` instead of statement

    /tmp/tmpq960b6hh.d(39): Error: unterminated character constant

    /tmp/tmpq960b6hh.d(39): Error: unterminated character constant

    /tmp/tmpq960b6hh.d(39): Error: found `res` when expecting `:`

    /tmp/tmpq960b6hh.d(39): Error: found `=` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq960b6hh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++) {\n        switch (operator[i]) {\n            case \"+\":\n          \
    \      result += operand[i + 1];\n                break;\n            case \"\
    -\":\n                result -= operand[i + 1];\n                break;\n    \
    \        case \"*\":\n                result *= operand[i + 1];\n            \
    \    break;\n            case \"//\":\n                result /= operand[i + 1];\n\
    \                break;\n            case \"**\":\n                result = pow(result,\
    \ operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzty9zf0j.d(32): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzty9zf0j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{ \n   long result = operand[0];\n  \n   for(int i = 0; i < operator.length;\
    \ i++)\n   {\n       switch(operator[i])\n       {\n           case \"+\": result\
    \ += operand[i+1];\n           break;\n           case \"-\": result -= operand[i+1];\n\
    \           break;\n           case \"*\": result *= operand[i+1];\n         \
    \  break;\n           case \"//\": result /= operand[i+1];\n           break;\n\
    \           case \"**\": result = pow(result, operand[i+1]);\n           break;\n\
    \       }\n   }\n   return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqyqsrguf.d(34): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqyqsrguf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long ret = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    : ret += operand[i+1]; break;\n            case \"-\": ret -= operand[i+1]; break;\n\
    \            case \"*\": ret *= operand[i+1]; break;\n            case \"//\"\
    : ret /= operand[i+1]; break;\n            case \"**\": ret = (long)pow(ret, operand[i+1]);\
    \ break;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxjzmg33i.d(39): Error: C style cast illegal, use `cast(long)pow(ret,
    operand[i + 1])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxjzmg33i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long ans = operand[0];\n    long i = 0;\n    while(i < operator.length)\n\
    \    {\n        switch(operator[i])\n        {\n            case \"+\":\n    \
    \            ans += operand[i+1];\n                break;\n            case \"\
    -\":\n                ans -= operand[i+1];\n                break;\n         \
    \   case \"*\":\n                ans *= operand[i+1];\n                break;\n\
    \            case \"//\":\n                ans /= operand[i+1];\n            \
    \    break;\n            case \"**\":\n                ans = (long)pow(ans, operand[i+1]);\n\
    \                break;\n        }\n        i++;\n    }\n    return ans;\n}\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp60f_xvbj.d(49): Error: C style cast illegal, use `cast(long)pow(ans,
    operand[i + 1])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp60f_xvbj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    static long do_math(long a, long b, string op)\n    {\n  \
    \      if (op == \"+\")\n            return a + b;\n        else if (op == \"\
    -\")\n            return a - b;\n        else if (op == \"*\")\n            return\
    \ a * b;\n        else if (op == \"//\")\n            return a / b;\n        else\
    \ if (op == \"**\")\n            return (long)pow(a, b);\n        else\n     \
    \       return long.min;\n    }\n    long result = operand[0];\n    for (int i\
    \ = 0; i < operator.length; i++)\n    {\n        result = do_math(result, operand[i\
    \ + 1], operator[i]);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg4pqz0ua.d(41): Error: C style cast illegal, use `cast(long)pow(a,
    b)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg4pqz0ua.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    long index = 0;\n    int opSize\
    \ = operator.length;\n    foreach(string o; opSize)\n    {\n        switch(o)\n\
    \        {\n            case \"+\":\n                result += operand[index+1];\n\
    \                break;\n            case \"-\":\n                result -= operand[index+1];\n\
    \                break;\n            case \"*\":\n                result *= operand[index+1];\n\
    \                break;\n            case \"//\":\n                result /= operand[index+1];\n\
    \                break;\n            case \"**\":\n                result = pow(result,\
    \ operand[index+1]);\n                break;\n        }\n        index++;\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n\
    \    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n   \
    \ assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph8dq61s9.d(32): Error: cannot implicitly convert expression `operator.length`
    of type `ulong` to `int`

    /tmp/tmph8dq61s9.d(33): Error: invalid `foreach` aggregate `opSize`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph8dq61s9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n  long current_res = operand[0];\n  int i = 0;\n  while(i < operator.length)\n\
    \  {\n    switch(operator[i])\n    {\n      case \"+\":\n      {\n        current_res\
    \ += operand[i+1];\n        break;\n      }\n      case \"-\":\n      {\n    \
    \    current_res -= operand[i+1];\n        break;\n      }\n      case \"*\":\n\
    \      {\n        current_res *= operand[i+1];\n        break;\n      }\n    \
    \  case \"//\":\n      {\n        current_res /= operand[i+1];\n        break;\n\
    \      }\n      case \"**\":\n      {\n        current_res = power(current_res,\
    \ operand[i+1]);\n        break;\n      }\n    }\n    i++;\n  }\n  return current_res;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwgozgniv.d(58): Error: undefined identifier `power`, did you mean
    template `pow(F, G)(F x, G n) if (isFloatingPoint!F && isIntegral!G)`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwgozgniv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long x = operand[0];\n    foreach(int i, string op; zip(i,\
    \ op; operand[1..$], operator)) {\n        switch(op) {\n            case \"+\"\
    : x += operand[i+1]; break;\n            case \"-\": x -= operand[i+1]; break;\n\
    \            case \"*\": x *= operand[i+1]; break;\n            case \"//\": x\
    \ /= operand[i+1]; break;\n            case \"**\": x = pow(x, operand[i+1]);\
    \ break;\n        }\n    }\n    return x;\n}\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8mmb1tjp.d(31): Error: found `;` when expecting `,`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8mmb1tjp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++) {\n        if (operator[i] == \"+\") result += operand[i+1];\n        else\
    \ if (operator[i] == \"-\") result -= operand[i+1];\n        else if (operator[i]\
    \ == \"*\") result *= operand[i+1];\n        else if (operator[i] == \"//\") result\
    \ /= operand[i+1];\n        else if (operator[i] == \"**\") result = (long)pow(result,\
    \ operand[i+1]);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpra_bnyno.d(36): Error: C style cast illegal, use `cast(long)pow(result,
    operand[i + 1])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpra_bnyno.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long total = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n        {\n            total\
    \ += operand[i+1];\n        }\n        else if (operator[i] == \"-\")\n      \
    \  {\n            total -= operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"*\")\n        {\n            total *= operand[i+1];\n        }\n      \
    \  else if (operator[i] == \"//\")\n        {\n            total /= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"**\")\n        {\n            total\
    \ = pow(total, operand[i+1]);\n        }\n    }\n    return total;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmaclm__8.d(61): unittest failure

    ----------------

    ??:? _d_unittestp [0x4291ed]

    ??:? void tmpmaclm__8.__unittest_L56_C1() [0x42826d]

    ??:? void tmpmaclm__8.__modtest() [0x428458]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dd43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428f46]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a9e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42aa78]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a975]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f1d]

    ??:? runModuleUnitTests [0x42db19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4296b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n        {\n            result\
    \ += operand[i+1];\n        }\n        else if (operator[i] == \"-\")\n      \
    \  {\n            result -= operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"*\")\n        {\n            result *= operand[i+1];\n        }\n     \
    \   else if (operator[i] == \"//\")\n        {\n            result /= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"**\")\n        {\n            result\
    \ = pow(result, operand[i+1]);\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5qawse14.d(61): unittest failure

    ----------------

    ??:? _d_unittestp [0x4291ed]

    ??:? void tmp5qawse14.__unittest_L56_C1() [0x42826d]

    ??:? void tmp5qawse14.__modtest() [0x428458]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dd43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428f46]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a9e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42aa78]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a975]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f1d]

    ??:? runModuleUnitTests [0x42db19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4296b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    long index = 0;\n    foreach(var\
    \ op; operand)\n    {\n        if(op == operand[0])\n            continue;\n \
    \       result = doOperation(result, operand[index], operator[index - 1]);\n \
    \       index++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq_639dz7.d(32): Error: undefined identifier `var`

    /tmp/tmpq_639dz7.d(36): Error: undefined identifier `doOperation`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq_639dz7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    foreach(i, op; operator)\n\
    \    {\n        switch(op)\n        {\n            case \"+\":\n             \
    \   result += operand[i+1];\n                break;\n            case \"-\":\n\
    \                result -= operand[i+1];\n                break;\n           \
    \ case \"*\":\n                result *= operand[i+1];\n                break;\n\
    \            case \"//\":\n                result /= operand[i+1];\n         \
    \       break;\n            case \"**\":\n                result = pow(result,\
    \ operand[i+1]);\n                break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_pjsnua6.d(33): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_pjsnua6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++) {\n        if (operator[i] == \"+\") {\n            result += operand[i\
    \ + 1];\n        } else if (operator[i] == \"-\") {\n            result -= operand[i\
    \ + 1];\n        } else if (operator[i] == \"*\") {\n            result *= operand[i\
    \ + 1];\n        } else if (operator[i] == \"//\") {\n            result /= operand[i\
    \ + 1];\n        } else if (operator[i] == \"**\") {\n            result = long(pow(result,\
    \ operand[i + 1]));\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"\
    ], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L,\
    \ 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) ==\
    \ 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu_6q1ocr.d(51): unittest failure

    ----------------

    ??:? _d_unittestp [0x4291ed]

    ??:? void tmpu_6q1ocr.__unittest_L46_C1() [0x42826d]

    ??:? void tmpu_6q1ocr.__modtest() [0x428458]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dd43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428f46]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a9e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42aa78]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a975]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f1d]

    ??:? runModuleUnitTests [0x42db19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4296b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n  long result = operand[0];\n  foreach(i, op; operator)\n  {\n\
    \    if(op == \"+\") \n    {\n      result += operand[i+1];\n    }\n    else if(op\
    \ == \"-\") \n    {\n      result -= operand[i+1];\n    }\n    else if(op == \"\
    *\") \n    {\n      result *= operand[i+1];\n    }\n    else if(op == \"//\")\
    \ \n    {\n      result /= operand[i+1];\n    }\n    else if(op == \"**\") \n\
    \    {\n      result = result.pow(operand[i+1]);\n    }\n  }\n  return result;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpma606pgj.d(61): unittest failure

    ----------------

    ??:? _d_unittestp [0x42917d]

    ??:? void tmpma606pgj.__unittest_L56_C1() [0x4281f9]

    ??:? void tmpma606pgj.__modtest() [0x4283e4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dcd3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428ed6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a979]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42aa08]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a905]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428ead]

    ??:? runModuleUnitTests [0x42daa9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429640]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n        {\n            result\
    \ += operand[i+1];\n        }\n        else if (operator[i] == \"-\")\n      \
    \  {\n            result -= operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"*\")\n        {\n            result *= operand[i+1];\n        }\n     \
    \   else if (operator[i] == \"//\")\n        {\n            result /= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"**\")\n        {\n            result\
    \ = pow(result, operand[i+1]);\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5qawse14.d(61): unittest failure

    ----------------

    ??:? _d_unittestp [0x4291ed]

    ??:? void tmp5qawse14.__unittest_L56_C1() [0x42826d]

    ??:? void tmp5qawse14.__modtest() [0x428458]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dd43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428f46]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a9e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42aa78]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a975]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f1d]

    ??:? runModuleUnitTests [0x42db19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4296b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    foreach(i, operation; zip(operator,\
    \ operand[1..$]))\n    {\n        switch(operation[0])\n        {\n          \
    \  case \"+\":\n                result += operation[1];\n                break;\n\
    \            case \"-\":\n                result -= operation[1];\n          \
    \      break;\n            case \"*\":\n                result *= operation[1];\n\
    \                break;\n            case \"//\":\n                result /= operation[1];\n\
    \                break;\n            case \"**\":\n                result = pow(result,\
    \ operation[1]);\n                break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3q3gnzae.d(31): Error: undefined identifier `zip`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3q3gnzae.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    foreach(elem; zip(operator,\
    \ operand[1..$]))\n    {\n        long x = elem[1];\n        switch(elem[0])\n\
    \        {\n            case \"+\":\n                result += x;\n          \
    \      break;\n            case \"-\":\n                result -= x;\n       \
    \         break;\n            case \"*\":\n                result *= x;\n    \
    \            break;\n            case \"//\":\n                result /= x;\n\
    \                break;\n            case \"**\":\n                result = (long)pow(result,\
    \ x);\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzqu8nccs.d(49): Error: C style cast illegal, use `cast(long)pow(result,
    x)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzqu8nccs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                result += operand[i + 1];\n                break;\n       \
    \     case \"-\":\n                result -= operand[i + 1];\n               \
    \ break;\n            case \"*\":\n                result *= operand[i + 1];\n\
    \                break;\n            case \"//\":\n                result /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                result\
    \ = pow(result, operand[i + 1]);\n                break;\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpovshs_32.d(33): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpovshs_32.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n        {\n            result\
    \ += operand[i+1];\n        }\n        else if (operator[i] == \"-\")\n      \
    \  {\n            result -= operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"*\")\n        {\n            result *= operand[i+1];\n        }\n     \
    \   else if (operator[i] == \"//\")\n        {\n            result /= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"**\")\n        {\n            result\
    \ = pow(result, operand[i+1]);\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5qawse14.d(61): unittest failure

    ----------------

    ??:? _d_unittestp [0x4291ed]

    ??:? void tmp5qawse14.__unittest_L56_C1() [0x42826d]

    ??:? void tmp5qawse14.__modtest() [0x428458]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dd43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428f46]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a9e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42aa78]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a975]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f1d]

    ??:? runModuleUnitTests [0x42db19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4296b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                result += operand[i + 1];\n                break;\n       \
    \     case \"-\":\n                result -= operand[i + 1];\n               \
    \ break;\n            case \"*\":\n                result *= operand[i + 1];\n\
    \                break;\n            case \"//\":\n                result /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                result\
    \ = pow(result, operand[i + 1]);\n                break;\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpovshs_32.d(33): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpovshs_32.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    auto result = operand[0];\n    foreach(i, op; operator)\n\
    \    {\n        auto operand_index = i + 1;\n        if(op == \"+\")\n       \
    \ {\n            result += operand[operand_index];\n        }\n        else if(op\
    \ == \"-\")\n        {\n            result -= operand[operand_index];\n      \
    \  }\n        else if(op == \"*\")\n        {\n            result *= operand[operand_index];\n\
    \        }\n        else if(op == \"//\")\n        {\n            result /= operand[operand_index];\n\
    \        }\n        else if(op == \"**\")\n        {\n            result = (long)pow(result,\
    \ operand[operand_index]);\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdimug_ji.d(52): Error: C style cast illegal, use `cast(long)pow(result,
    operand[operand_index])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdimug_ji.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n  int op_length = operator.length;\n  int num_length = operand.length;\n\
    \  long result = operand[0];\n  long num;\n  foreach(string op; operator)\n  {\n\
    \    num = operand[op_length];\n    switch(op)\n    {\n      case \"+\":\n   \
    \     result += num;\n        break;\n      case \"-\":\n        result -= num;\n\
    \        break;\n      case \"*\":\n        result *= num;\n        break;\n \
    \     case \"//\":\n        result /= num;\n        break;\n      case \"**\"\
    :\n        result = pow(result, num);\n        break;\n    }\n    op_length++;\n\
    \  }\n  return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n\
    \    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n   \
    \ assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4y1jmrc0.d(30): Error: cannot implicitly convert expression `operator.length`
    of type `ulong` to `int`

    /tmp/tmp4y1jmrc0.d(31): Error: cannot implicitly convert expression `operand.length`
    of type `ulong` to `int`

    /tmp/tmp4y1jmrc0.d(37): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4y1jmrc0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    auto result = operand[0];\n    for (auto i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n            result += operand[i\
    \ + 1];\n        else if (operator[i] == \"-\")\n            result -= operand[i\
    \ + 1];\n        else if (operator[i] == \"*\")\n            result *= operand[i\
    \ + 1];\n        else if (operator[i] == \"//\")\n            result /= operand[i\
    \ + 1];\n        else if (operator[i] == \"**\")\n            result = pow(result,\
    \ operand[i + 1]);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpejxk2jkn.d(51): unittest failure

    ----------------

    ??:? _d_unittestp [0x4291ed]

    ??:? void tmpejxk2jkn.__unittest_L46_C1() [0x42826d]

    ??:? void tmpejxk2jkn.__modtest() [0x428458]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dd43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428f46]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a9e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42aa78]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a975]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f1d]

    ??:? runModuleUnitTests [0x42db19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4296b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n        {\n            result\
    \ += operand[i+1];\n        }\n        else if (operator[i] == \"-\")\n      \
    \  {\n            result -= operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"*\")\n        {\n            result *= operand[i+1];\n        }\n     \
    \   else if (operator[i] == \"//\")\n        {\n            result /= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"**\")\n        {\n            result\
    \ = pow(result, operand[i+1]);\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5qawse14.d(61): unittest failure

    ----------------

    ??:? _d_unittestp [0x4291ed]

    ??:? void tmp5qawse14.__unittest_L56_C1() [0x42826d]

    ??:? void tmp5qawse14.__modtest() [0x428458]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dd43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428f46]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a9e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42aa78]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a975]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f1d]

    ??:? runModuleUnitTests [0x42db19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4296b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                result += operand[i + 1];\n                break;\n       \
    \     case \"-\":\n                result -= operand[i + 1];\n               \
    \ break;\n            case \"*\":\n                result *= operand[i + 1];\n\
    \                break;\n            case \"//\":\n                result /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                result\
    \ = (long)pow(result, operand[i + 1]);\n                break;\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n\
    \    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n   \
    \ assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbcfvneny.d(48): Error: C style cast illegal, use `cast(long)pow(result,
    operand[i + 1])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbcfvneny.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    if (operator.length == 0) \n        return operand[0];\n \
    \   \n    if (operator.length == 1) \n        return (operator[0] == \"+\") ?\
    \ operand[0] + operand[1] : operand[0] - operand[1];\n    \n    if (operator.length\
    \ == 2) \n        return (operator[0] == \"+\") ? operand[0] + operand[1] * operand[2]\
    \ : operand[0] - operand[1] * operand[2];\n    \n    if (operator.length == 3)\
    \ \n        return (operator[0] == \"+\") ? operand[0] + operand[1] * operand[2]\
    \ / operand[3] : operand[0] - operand[1] * operand[2] / operand[3];\n    \n  \
    \  if (operator.length == 4) \n        return (operator[0] == \"+\") ? operand[0]\
    \ + operand[1] * operand[2] / operand[3] ^ operand[4] : operand[0] - operand[1]\
    \ * operand[2] / operand[3] ^ operand[4];\n    \n    return 0;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpsk1uas_5.d(51): unittest failure

    ----------------

    ??:? _d_unittestp [0x4293dd]

    ??:? void tmpsk1uas_5.__unittest_L47_C1() [0x42844b]

    ??:? void tmpsk1uas_5.__modtest() [0x428648]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42df33]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429136]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42abd9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ac68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ab65]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42910d]

    ??:? runModuleUnitTests [0x42dd09]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4298a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long ans = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++) {\n        if (operator[i] == \"+\") {\n            ans += operand[i +\
    \ 1];\n        } else if (operator[i] == \"-\") {\n            ans -= operand[i\
    \ + 1];\n        } else if (operator[i] == \"*\") {\n            ans *= operand[i\
    \ + 1];\n        } else if (operator[i] == \"//\") {\n            ans /= operand[i\
    \ + 1];\n        } else if (operator[i] == \"**\") {\n            ans = pow(ans,\
    \ operand[i + 1]);\n        }\n    }\n    return ans;\n}\nunittest\n{\n    alias\
    \ candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L,\
    \ 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L,\
    \ 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_kbwxryc.d(51): unittest failure

    ----------------

    ??:? _d_unittestp [0x4291ed]

    ??:? void tmp_kbwxryc.__unittest_L46_C1() [0x42826d]

    ??:? void tmp_kbwxryc.__modtest() [0x428458]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dd43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428f46]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a9e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42aa78]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a975]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f1d]

    ??:? runModuleUnitTests [0x42db19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4296b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (long i = 0; i < operator.length;\
    \ i++) {\n        if (operator[i] == \"+\") {\n            result += operand[i\
    \ + 1];\n        } else if (operator[i] == \"-\") {\n            result -= operand[i\
    \ + 1];\n        } else if (operator[i] == \"*\") {\n            result *= operand[i\
    \ + 1];\n        } else if (operator[i] == \"//\") {\n            result /= operand[i\
    \ + 1];\n        } else if (operator[i] == \"**\") {\n            result = cast(long)pow(result,\
    \ operand[i + 1]);\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"\
    ], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L,\
    \ 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) ==\
    \ 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpdcsivcmj.d(51): unittest failure

    ----------------

    ??:? _d_unittestp [0x4291ed]

    ??:? void tmpdcsivcmj.__unittest_L46_C1() [0x42826d]

    ??:? void tmpdcsivcmj.__modtest() [0x428458]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dd43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428f46]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a9e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42aa78]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a975]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f1d]

    ??:? runModuleUnitTests [0x42db19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4296b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    for (int i = 0; i < operator.length; i++)\n    {\n       \
    \ switch (operator[i])\n        {\n            case \"+\":\n                operand[i\
    \ + 1] = operand[i] + operand[i + 1];\n                break;\n            case\
    \ \"-\":\n                operand[i + 1] = operand[i] - operand[i + 1];\n    \
    \            break;\n            case \"*\":\n                operand[i + 1] =\
    \ operand[i] * operand[i + 1];\n                break;\n            case \"//\"\
    :\n                operand[i + 1] = operand[i] / operand[i + 1];\n           \
    \     break;\n            case \"**\":\n                operand[i + 1] = long(pow(operand[i],\
    \ operand[i + 1]));\n                break;\n        }\n    }\n    return operand[operand.length\
    \ - 1];\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9fg1v1u2.d(32): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    '
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    long operandCount = operand.length();\n\
    \    long opCount = operator.length();\n    if(opCount < 1 || operandCount < 2)\n\
    \        return result;\n    for(long i = 0; i < opCount; i++)\n    {\n      \
    \  if(operator[i] == \"+\")\n            result += operand[i+1];\n        else\
    \ if(operator[i] == \"-\")\n            result -= operand[i+1];\n        else\
    \ if(operator[i] == \"*\")\n            result *= operand[i+1];\n        else\
    \ if(operator[i] == \"//\")\n            result /= operand[i+1];\n        else\
    \ if(operator[i] == \"**\")\n            result = pow(result, operand[i+1]);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiz1id2hx.d(31): Error: no property `length` for type `long[]`

    /tmp/tmpiz1id2hx.d(32): Error: no property `length` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiz1id2hx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long total = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n        {\n            total\
    \ += operand[i+1];\n        }\n        else if (operator[i] == \"-\")\n      \
    \  {\n            total -= operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"*\")\n        {\n            total *= operand[i+1];\n        }\n      \
    \  else if (operator[i] == \"//\")\n        {\n            total /= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"**\")\n        {\n            total\
    \ = pow(total, operand[i+1]);\n        }\n    }\n    return total;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmaclm__8.d(61): unittest failure

    ----------------

    ??:? _d_unittestp [0x4291ed]

    ??:? void tmpmaclm__8.__unittest_L56_C1() [0x42826d]

    ??:? void tmpmaclm__8.__modtest() [0x428458]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dd43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428f46]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a9e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42aa78]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a975]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f1d]

    ??:? runModuleUnitTests [0x42db19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4296b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    if (operator.length == 0)\n        return operand[0];\n  \
    \  \n    ulong i = 0;\n    long res = operand[0];\n    for (i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n            res += operand[i+1];\n\
    \        else if (operator[i] == \"-\")\n            res -= operand[i+1];\n  \
    \      else if (operator[i] == \"*\")\n            res *= operand[i+1];\n    \
    \    else if (operator[i] == \"//\")\n            res /= operand[i+1];\n     \
    \   else if (operator[i] == \"**\")\n            res = pow(res, operand[i+1]);\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n\
    \    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n   \
    \ assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3bxspar6.d(55): unittest failure

    ----------------

    ??:? _d_unittestp [0x429225]

    ??:? void tmp3bxspar6.__unittest_L50_C1() [0x4282a1]

    ??:? void tmp3bxspar6.__modtest() [0x42848c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dd7b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428f7e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42aa21]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42aab0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a9ad]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f55]

    ??:? runModuleUnitTests [0x42db51]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4296e8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++) {\n        if (operator[i] == \"+\") result += operand[i+1];\n        else\
    \ if (operator[i] == \"-\") result -= operand[i+1];\n        else if (operator[i]\
    \ == \"*\") result *= operand[i+1];\n        else if (operator[i] == \"//\") result\
    \ /= operand[i+1];\n        else if (operator[i] == \"**\") result = (long)pow(result,\
    \ operand[i+1]);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpra_bnyno.d(36): Error: C style cast illegal, use `cast(long)pow(result,
    operand[i + 1])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpra_bnyno.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long[] result = new long[operand.length - 1];\n    result[0]\
    \ = operand[0];\n    for (long i = 1, j = 0; i < operand.length; i++, j++) {\n\
    \        if (operator[j] == \"+\") {\n            result[i] = result[i - 1] +\
    \ operand[i];\n        } else if (operator[j] == \"-\") {\n            result[i]\
    \ = result[i - 1] - operand[i];\n        } else if (operator[j] == \"*\") {\n\
    \            result[i] = result[i - 1] * operand[i];\n        } else if (operator[j]\
    \ == \"//\") {\n            result[i] = result[i - 1] / operand[i];\n        }\
    \ else if (operator[j] == \"**\") {\n            result[i] = pow(result[i - 1],\
    \ operand[i]);\n        }\n    }\n    return result[result.length - 1];\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpbchqg2va.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x4294de]

    ??:? long tmpbchqg2va.do_algebra(immutable(char)[][], long[]) [0x427ed0]

    ??:? void tmpbchqg2va.__unittest_L47_C1() [0x4283e4]

    ??:? void tmpbchqg2va.__modtest() [0x428694]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dfdf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429186]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac85]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ad14]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ac11]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42915d]

    ??:? runModuleUnitTests [0x42ddb5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern'
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    if (operator.length < 1 || operand.length < 2)\n        return\
    \ -1;\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                result += operand[i + 1];\n                break;\n       \
    \     case \"-\":\n                result -= operand[i + 1];\n               \
    \ break;\n            case \"*\":\n                result *= operand[i + 1];\n\
    \                break;\n            case \"//\":\n                result /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                result\
    \ = (long)pow(result, operand[i + 1]);\n                break;\n            default:\n\
    \                break;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnx6slsov.d(50): Error: C style cast illegal, use `cast(long)pow(result,
    operand[i + 1])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnx6slsov.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    if (operand.length == 1)\n        return operand[0];\n   \
    \ long result = operand[0];\n    long i = 1;\n    foreach (var elem in operator)\
    \ {\n        if (elem == \"+\")\n            result += operand[i];\n        else\
    \ if (elem == \"-\")\n            result -= operand[i];\n        else if (elem\
    \ == \"*\")\n            result *= operand[i];\n        else if (elem == \"//\"\
    )\n            result /= operand[i];\n        else if (elem == \"**\")\n     \
    \       result = (long)pow(result, operand[i]);\n        i++;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzx45pfkw.d(34): Error: found `in` when expecting `;`

    /tmp/tmpzx45pfkw.d(44): Error: C style cast illegal, use `cast(long)pow(result,
    operand[i])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzx45pfkw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    int last_number = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++) {\n        switch (operator[i]) {\n            case \"+\":\n          \
    \      last_number += operand[i + 1];\n                break;\n            case\
    \ \"-\":\n                last_number -= operand[i + 1];\n                break;\n\
    \            case \"*\":\n                last_number *= operand[i + 1];\n   \
    \             break;\n            case \"//\":\n                last_number /=\
    \ operand[i + 1];\n                break;\n            case \"**\":\n        \
    \        last_number = pow(last_number, operand[i + 1]);\n                break;\n\
    \        }\n    }\n    return last_number;\n}\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx66ti9hi.d(30): Error: cannot implicitly convert expression `operand[0]`
    of type `long` to `int`

    /tmp/tmpx66ti9hi.d(46): Error: cannot implicitly convert expression `pow(last_number,
    operand[cast(ulong)(i + 1)])` of type `long` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx66ti9hi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (size_t i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n        {\n            result\
    \ += operand[i + 1];\n        }\n        else if (operator[i] == \"-\")\n    \
    \    {\n            result -= operand[i + 1];\n        }\n        else if (operator[i]\
    \ == \"*\")\n        {\n            result *= operand[i + 1];\n        }\n   \
    \     else if (operator[i] == \"//\")\n        {\n            result /= operand[i\
    \ + 1];\n        }\n        else if (operator[i] == \"**\")\n        {\n     \
    \       result = pow(result, operand[i + 1]);\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpejdn0qyt.d(61): unittest failure

    ----------------

    ??:? _d_unittestp [0x4291ed]

    ??:? void tmpejdn0qyt.__unittest_L56_C1() [0x42826d]

    ??:? void tmpejdn0qyt.__modtest() [0x428458]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dd43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428f46]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a9e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42aa78]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a975]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f1d]

    ??:? runModuleUnitTests [0x42db19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4296b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (size_t i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n        {\n            result\
    \ += operand[i + 1];\n        }\n        else if (operator[i] == \"-\")\n    \
    \    {\n            result -= operand[i + 1];\n        }\n        else if (operator[i]\
    \ == \"*\")\n        {\n            result *= operand[i + 1];\n        }\n   \
    \     else if (operator[i] == \"//\")\n        {\n            result /= operand[i\
    \ + 1];\n        }\n        else if (operator[i] == \"**\")\n        {\n     \
    \       result = (long)pow(result, operand[i + 1]);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp27z88vxq.d(51): Error: C style cast illegal, use `cast(long)pow(result,
    operand[i + 1])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp27z88vxq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    int i = 0;\n    foreach(string\
    \ op; operator)\n    {\n        switch(op)\n        {\n            case \"+\"\
    :\n                result += operand[i+1];\n                break;\n         \
    \   case \"-\":\n                result -= operand[i+1];\n                break;\n\
    \            case \"*\":\n                result *= operand[i+1];\n          \
    \      break;\n            case \"//\":\n                result /= operand[i+1];\n\
    \                break;\n            case \"**\":\n                result = pow(result,\
    \ operand[i+1]);\n                break;\n        }\n        i++;\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwb3uw2dk.d(34): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwb3uw2dk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    int i = 0;\n    foreach(string\
    \ op; operator)\n    {\n        switch(op)\n        {\n            case \"+\"\
    :\n                result += operand[i+1];\n                break;\n         \
    \   case \"-\":\n                result -= operand[i+1];\n                break;\n\
    \            case \"*\":\n                result *= operand[i+1];\n          \
    \      break;\n            case \"//\":\n                result /= operand[i+1];\n\
    \                break;\n            case \"**\":\n                result = pow(result,\
    \ operand[i+1]);\n                break;\n        }\n        i++;\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwb3uw2dk.d(34): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwb3uw2dk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                result += operand[i + 1];\n                break;\n       \
    \     case \"-\":\n                result -= operand[i + 1];\n               \
    \ break;\n            case \"*\":\n                result *= operand[i + 1];\n\
    \                break;\n            case \"//\":\n                result /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                result\
    \ = pow(result, operand[i + 1]);\n                break;\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpovshs_32.d(33): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpovshs_32.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    if (operator.length != operand.length - 1) return 0;\n   \
    \ if (operator.length == 0 || operand.length == 0) return 0;\n    int op;\n  \
    \  long result = operand[0];\n    for (op = 0; op < operator.length; op++) {\n\
    \        switch (operator[op]) {\n            case \"+\": result += operand[op\
    \ + 1]; break;\n            case \"-\": result -= operand[op + 1]; break;\n  \
    \          case \"*\": result *= operand[op + 1]; break;\n            case \"\
    //\": result /= operand[op + 1]; break;\n            case \"**\": result = (long)pow(result,\
    \ operand[op + 1]); break;\n            default: return 0;\n        }\n    }\n\
    \    return result;\n}\nlong do_algebra(string[] operator, long[] operand) \n\
    {\n    if (operator.length != operand.length - 1) return 0;\n    if (operator.length\
    \ == 0 || operand.length == 0) return 0;\n    int op;\n    long result = operand[0];\n\
    \    for (op = 0; op < operator.length; op++) {\n        switch (operator[op])\
    \ {\n            case \"+\": result += operand[op + 1]; break;\n            case\
    \ \"-\": result -= operand[op + 1]; break;\n            case \"*\": result *=\
    \ operand[op + 1]; break;\n            case \"//\": result /= operand[op + 1];\
    \ break;\n            case \"**\": result = (long)pow(result, operand[op + 1]);\
    \ break;\n            default: return 0;\n        }\n    }\n    return result;\n\
    }\nlong do_algebra(string[] operator, long[] operand) \n{\n    if (operator.length\
    \ != operand.length - 1) return 0;\n    if (operator.length == 0 || operand.length\
    \ == 0) return 0;\n    int op;\n    long result = operand[0];\n    for (op = 0;\
    \ op < operator.length; op++) {\n        switch (operator[op]) {\n           \
    \ case \"+\": result += operand\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5gbnzkdt.d(40): Error: C style cast illegal, use `cast(long)pow(result,
    operand[op + 1])`

    /tmp/tmp5gbnzkdt.d(58): Error: C style cast illegal, use `cast(long)pow(result,
    operand[op + 1])`

    /tmp/tmp5gbnzkdt.d(73): Error: found `unittest` when expecting `;` following statement

    /tmp/tmp5gbnzkdt.d(81): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp5gbnzkdt.d(81): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp5gbnzkdt.d(81): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5gbnzkdt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long res;\n    int n = operator.length;\n    res = operand[0];\n\
    \    for (int i = 0; i < n; i++) {\n        switch (operator[i]) {\n         \
    \   case \"+\":\n                res += operand[i + 1];\n                break;\n\
    \            case \"-\":\n                res -= operand[i + 1];\n           \
    \     break;\n            case \"*\":\n                res *= operand[i + 1];\n\
    \                break;\n            case \"//\":\n                res /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                res\
    \ = (long)Math.pow(res, operand[i + 1]);\n                break;\n        }\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n\
    \    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n   \
    \ assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeu22pt6_.d(48): Error: C style cast illegal, use `cast(long)Math.pow(res,
    operand[i + 1])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeu22pt6_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    //1. create string version of the expression\n    string expression\
    \ = \"\";\n    int x = 0;\n    while(x < operand.length) {\n        expression\
    \ += (x == 0) ? $\"{operand[x]}\" : $\" {operator[x-1]} {operand[x]}\";\n    \
    \    x++;\n    }\n    expression += \";\";\n    //2. use dmd eval() to evaluate\
    \ the expression\n    return eval(expression);\n}\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp71fqto09.d(34): Error: `$` is valid only inside [] of index or
    slice

    /tmp/tmp71fqto09.d(34): Error: found `"{operand[x]}"` when expecting `:`

    /tmp/tmp71fqto09.d(34): Error: expression expected, not `:`

    /tmp/tmp71fqto09.d(34): Error: found `$` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp71fqto09.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                result += operand[i + 1];\n                break;\n       \
    \     case \"-\":\n                result -= operand[i + 1];\n               \
    \ break;\n            case \"*\":\n                result *= operand[i + 1];\n\
    \                break;\n            case \"//\":\n                result /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                result\
    \ = result ** operand[i + 1];\n                break;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp10xic9je.d(48): Error: can only `*` a pointer, not a `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp10xic9je.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                result += operand[i + 1];\n                break;\n       \
    \     case \"-\":\n                result -= operand[i + 1];\n               \
    \ break;\n            case \"*\":\n                result *= operand[i + 1];\n\
    \                break;\n            case \"//\":\n                result /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                result\
    \ = pow(result, operand[i + 1]);\n                break;\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpovshs_32.d(33): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpovshs_32.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long res = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n            res += operand[i+1];\n\
    \        else if (operator[i] == \"-\")\n            res -= operand[i+1];\n  \
    \      else if (operator[i] == \"*\")\n            res *= operand[i+1];\n    \
    \    else if (operator[i] == \"//\")\n            res /= operand[i+1];\n     \
    \   else if (operator[i] == \"**\")\n            res = pow(res, operand[i+1]);\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n\
    \    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n   \
    \ assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpymxajhau.d(51): unittest failure

    ----------------

    ??:? _d_unittestp [0x4291ed]

    ??:? void tmpymxajhau.__unittest_L46_C1() [0x42826d]

    ??:? void tmpymxajhau.__modtest() [0x428458]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dd43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428f46]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a9e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42aa78]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a975]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f1d]

    ??:? runModuleUnitTests [0x42db19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4296b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n        {\n            result\
    \ += operand[i+1];\n        }\n        else if (operator[i] == \"-\")\n      \
    \  {\n            result -= operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"*\")\n        {\n            result *= operand[i+1];\n        }\n     \
    \   else if (operator[i] == \"//\")\n        {\n            result /= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"**\")\n        {\n            result\
    \ = pow(result, operand[i+1]);\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5qawse14.d(61): unittest failure

    ----------------

    ??:? _d_unittestp [0x4291ed]

    ??:? void tmp5qawse14.__unittest_L56_C1() [0x42826d]

    ??:? void tmp5qawse14.__modtest() [0x428458]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dd43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428f46]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a9e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42aa78]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a975]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f1d]

    ??:? runModuleUnitTests [0x42db19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4296b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    if (operator.length == 0) return 0;\n    long res = operand[0];\n\
    \    for (long i = 0; i < operator.length; i++) {\n        long cur = operand[i\
    \ + 1];\n        switch (operator[i]) {\n            case \"+\":\n           \
    \     res += cur;\n                break;\n            case \"-\":\n         \
    \       res -= cur;\n                break;\n            case \"*\":\n       \
    \         res *= cur;\n                break;\n            case \"//\":\n    \
    \            res /= cur;\n                break;\n            case \"**\":\n \
    \               res = pow(res, cur);\n                break;\n        }\n    }\n\
    \    return res;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2l35f8b_.d(34): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2l35f8b_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    if (operator.length < 1 || operand.length < 2)\n        return\
    \ -1;\n    \n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n            result += operand[i+1];\n\
    \        else if (operator[i] == \"-\")\n            result -= operand[i+1];\n\
    \        else if (operator[i] == \"*\")\n            result *= operand[i+1];\n\
    \        else if (operator[i] == \"//\")\n            result /= operand[i+1];\n\
    \        else if (operator[i] == \"**\")\n            result = (long)pow(result,\
    \ operand[i+1]);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzky9alc0.d(45): Error: C style cast illegal, use `cast(long)pow(result,
    operand[i + 1])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzky9alc0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++) {\n        switch (operator[i]) {\n            case \"+\":\n          \
    \      result += operand[i + 1];\n                break;\n            case \"\
    -\":\n                result -= operand[i + 1];\n                break;\n    \
    \        case \"*\":\n                result *= operand[i + 1];\n            \
    \    break;\n            case \"//\":\n                result /= operand[i + 1];\n\
    \                break;\n            case \"**\":\n                result = pow(result,\
    \ operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzty9zf0j.d(32): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzty9zf0j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long accumulator = operand[0];\n    for (size_t i = 0; i <\
    \ operator.length; i++)\n    {\n        switch (operator[i])\n        {\n    \
    \        case \"+\":\n                accumulator += operand[i + 1];\n       \
    \         break;\n            case \"-\":\n                accumulator -= operand[i\
    \ + 1];\n                break;\n            case \"*\":\n                accumulator\
    \ *= operand[i + 1];\n                break;\n            case \"//\":\n     \
    \           accumulator /= operand[i + 1];\n                break;\n         \
    \   case \"**\":\n                accumulator = pow(accumulator, operand[i + 1]);\n\
    \                break;\n        }\n    }\n    return accumulator;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp67qx4io3.d(33): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp67qx4io3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++) {\n        switch (operator[i]) {\n            case \"+\":\n          \
    \      result += operand[i + 1];\n                break;\n            case \"\
    -\":\n                result -= operand[i + 1];\n                break;\n    \
    \        case \"*\":\n                result *= operand[i + 1];\n            \
    \    break;\n            case \"//\":\n                result /= operand[i + 1];\n\
    \                break;\n            case \"**\":\n                result = pow(result,\
    \ operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzty9zf0j.d(32): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzty9zf0j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long temp = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                temp += operand[i+1];\n                break;\n           \
    \ case \"-\":\n                temp -= operand[i+1];\n                break;\n\
    \            case \"*\":\n                temp *= operand[i+1];\n            \
    \    break;\n            case \"//\":\n                temp /= operand[i+1];\n\
    \                break;\n            case \"**\":\n                temp = pow(temp,\
    \ operand[i+1]);\n                break;\n        }\n    }\n    return temp;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu6sqison.d(33): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu6sqison.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long res = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++) {\n        long cur = operand[i + 1];\n        switch (operator[i]) {\n\
    \            case \"+\":\n                res += cur;\n                break;\n\
    \            case \"-\":\n                res -= cur;\n                break;\n\
    \            case \"*\":\n                res *= cur;\n                break;\n\
    \            case \"//\":\n                res /= cur;\n                break;\n\
    \            case \"**\":\n                res = pow(res, cur);\n            \
    \    break;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpredgztpf.d(33): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpredgztpf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long res = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                res += operand[i + 1];\n                break;\n          \
    \  case \"-\":\n                res -= operand[i + 1];\n                break;\n\
    \            case \"*\":\n                res *= operand[i + 1];\n           \
    \     break;\n            case \"//\":\n                res /= operand[i + 1];\n\
    \                break;\n            case \"**\":\n                res = res ^^\
    \ operand[i + 1];\n                break;\n        }\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuefxug0e.d(33): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuefxug0e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    : result += operand[i+1]; break;\n            case \"-\": result -= operand[i+1];\
    \ break;\n            case \"*\": result *= operand[i+1]; break;\n           \
    \ case \"//\": result /= operand[i+1]; break;\n            case \"**\": result\
    \ = cast(long)pow(result, operand[i+1]); break;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy62k2m2f.d(33): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy62k2m2f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++) {\n        long n1 = operand[i];\n        long n2 = operand[i + 1];\n \
    \       string op = operator[i];\n        switch (op) {\n            case \"+\"\
    :\n                result = n1 + n2;\n                break;\n            case\
    \ \"-\":\n                result = n1 - n2;\n                break;\n        \
    \    case \"*\":\n                result = n1 * n2;\n                break;\n\
    \            case \"//\":\n                result = n1 / n2;\n               \
    \ break;\n            case \"**\":\n                result = pow(n1, n2);\n  \
    \              break;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdtood544.d(35): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdtood544.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n        {\n            result\
    \ += operand[i+1];\n        }\n        else if (operator[i] == \"-\")\n      \
    \  {\n            result -= operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"*\")\n        {\n            result *= operand[i+1];\n        }\n     \
    \   else if (operator[i] == \"//\")\n        {\n            result /= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"**\")\n        {\n            result\
    \ = (long)pow(result, operand[i+1]);\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1z5s6aa9.d(51): Error: C style cast illegal, use `cast(long)pow(result,
    operand[i + 1])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1z5s6aa9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long value = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                value += operand[i + 1];\n                break;\n        \
    \    case \"-\":\n                value -= operand[i + 1];\n                break;\n\
    \            case \"*\":\n                value *= operand[i + 1];\n         \
    \       break;\n            case \"//\":\n                value /= operand[i +\
    \ 1];\n                break;\n            case \"**\":\n                value\
    \ = pow(value, operand[i + 1]);\n                break;\n        }\n    }\n  \
    \  return value;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsmxw1589.d(33): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsmxw1589.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{ \n    auto result = operand[0];\n    foreach(i, o; operator) \n\
    \    {\n        switch(o) \n        {\n            case \"+\": result += operand[i+1];\
    \ break;\n            case \"-\": result -= operand[i+1]; break;\n           \
    \ case \"*\": result *= operand[i+1]; break;\n            case \"//\": result\
    \ /= operand[i+1]; break;\n            case \"**\": result = pow(result, operand[i+1]);\
    \ break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_uw1b92f.d(33): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_uw1b92f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long total = operand[0];\n    foreach(int i, string op; zip(i,\
    \ op; operator))\n    {\n        long op2 = operand[i+1];\n        switch(op)\n\
    \        {\n            case \"+\": total += op2; break;\n            case \"\
    -\": total -= op2; break;\n            case \"*\": total *= op2; break;\n    \
    \        case \"//\": total /= op2; break;\n            case \"**\": total = pow(total,\
    \ op2); break;\n        }\n    }\n    return total;\n}\nunittest\n{\n    alias\
    \ candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L,\
    \ 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L,\
    \ 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprjk8nhwo.d(31): Error: found `;` when expecting `,`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprjk8nhwo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (long i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case '+':\n\
    \                result += operand[i + 1];\n                break;\n         \
    \   case '-':\n                result -= operand[i + 1];\n                break;\n\
    \            case '*':\n                result *= operand[i + 1];\n          \
    \      break;\n            case '//':\n                result /= operand[i + 1];\n\
    \                break;\n            case '**':\n                result = cast(long)pow(result,\
    \ operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpydzcao7k.d(44): Error: unterminated character constant

    /tmp/tmpydzcao7k.d(44): Error: unterminated character constant

    /tmp/tmpydzcao7k.d(45): Error: found `result` when expecting `:`

    /tmp/tmpydzcao7k.d(45): Error: found `/=` instead of statement

    /tmp/tmpydzcao7k.d(47): Error: unterminated character constant

    /tmp/tmpydzcao7k.d(47): Error: unterminated character constant

    /tmp/tmpydzcao7k.d(48): Error: found `result` when expecting `:`

    /tmp/tmpydzcao7k.d(48): Error: found `=` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpydzcao7k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{ \n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                result += operand[i+1];\n                break;\n         \
    \   case \"-\":\n                result -= operand[i+1];\n                break;\n\
    \            case \"*\":\n                result *= operand[i+1];\n          \
    \      break;\n            case \"//\":\n                result /= operand[i+1];\n\
    \                break;\n            case \"**\":\n                result = pow(result,\
    \ operand[i+1]);\n                break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptunq4t37.d(33): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptunq4t37.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n        {\n            result\
    \ += operand[i+1];\n        }\n        else if (operator[i] == \"-\")\n      \
    \  {\n            result -= operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"*\")\n        {\n            result *= operand[i+1];\n        }\n     \
    \   else if (operator[i] == \"//\")\n        {\n            result /= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"**\")\n        {\n            result\
    \ = (long) pow(result, operand[i+1]);\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6yo290_5.d(51): Error: C style cast illegal, use `cast(long)pow(result,
    operand[i + 1])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6yo290_5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    foreach(int i, string op; operator)\n\
    \    {\n        if(op == \"+\")\n            result += operand[i+1];\n       \
    \ else if(op == \"-\")\n            result -= operand[i+1];\n        else if(op\
    \ == \"*\")\n            result *= operand[i+1];\n        else if(op == \"//\"\
    )\n            result /= operand[i+1];\n        else if(op == \"**\")\n      \
    \      result = pow(result, operand[i+1]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpkuvt8kt9.d(51): unittest failure

    ----------------

    ??:? _d_unittestp [0x429175]

    ??:? void tmpkuvt8kt9.__unittest_L46_C1() [0x4281f5]

    ??:? void tmpkuvt8kt9.__modtest() [0x4283e0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dccb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428ece]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a971]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42aa00]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a8fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428ea5]

    ??:? runModuleUnitTests [0x42daa1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429638]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{ \n    long expression = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++) {\n        switch (operator[i]) {\n            case \"+\":\n          \
    \      expression += operand[i + 1];\n                break;\n            case\
    \ \"-\":\n                expression -= operand[i + 1];\n                break;\n\
    \            case \"*\":\n                expression *= operand[i + 1];\n    \
    \            break;\n            case \"//\":\n                expression /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                expression\
    \ = pow(expression, operand[i + 1]);\n                break;\n        }\n    }\n\
    \    return expression;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n\
    \    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n   \
    \ assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6lcu6at3.d(32): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6lcu6at3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n        {\n            result\
    \ += operand[i+1];\n        }\n        else if (operator[i] == \"-\")\n      \
    \  {\n            result -= operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"*\")\n        {\n            result *= operand[i+1];\n        }\n     \
    \   else if (operator[i] == \"//\")\n        {\n            result /= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"**\")\n        {\n            result\
    \ = (long)pow(result, operand[i+1]);\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1z5s6aa9.d(51): Error: C style cast illegal, use `cast(long)pow(result,
    operand[i + 1])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1z5s6aa9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    //get the length of the operator array\n    long count = operator.length;\n\
    \    long i = 0;\n    long result = operand[0];\n    //loop throught the operator\
    \ and operand array\n    for(; i < count; i++)\n    {\n        //do the basic\
    \ math operation\n        switch(operator[i])\n        {\n            case \"\
    +\":\n                result += operand[i+1];\n                break;\n      \
    \      case \"-\":\n                result -= operand[i+1];\n                break;\n\
    \            case \"*\":\n                result *= operand[i+1];\n          \
    \      break;\n            case \"//\":\n                result /= operand[i+1];\n\
    \                break;\n            case \"**\":\n                result = pow(result,\
    \ operand[i+1]);\n                break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe9d_3loo.d(38): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe9d_3loo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (long i = 0u; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                result += operand[i + 1];\n                break;\n       \
    \     case \"-\":\n                result -= operand[i + 1];\n               \
    \ break;\n            case \"*\":\n                result *= operand[i + 1];\n\
    \                break;\n            case \"//\":\n                result /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                result\
    \ = pow(result, operand[i + 1]);\n                break;\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqsnmzzua.d(33): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqsnmzzua.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    int len = operand.length;\n    long result = operand[0];\n\
    \    for (int i = 0; i < len-1; i++) {\n        if (operator[i] == \"+\") {\n\
    \            result += operand[i+1];\n        } else if (operator[i] == \"-\"\
    ) {\n            result -= operand[i+1];\n        } else if (operator[i] == \"\
    *\") {\n            result *= operand[i+1];\n        } else if (operator[i] ==\
    \ \"//\") {\n            result /= operand[i+1];\n        } else if (operator[i]\
    \ == \"**\") {\n            result = pow(result, operand[i+1]);\n        }\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2lm725s3.d(30): Error: cannot implicitly convert expression `operand.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2lm725s3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    long temp = 0;\n    for (int\
    \ i = 0; i < operator.length; i++)\n    {\n        switch (operator[i])\n    \
    \    {\n            case \"+\":\n                result += operand[i+1];\n   \
    \             break;\n            case \"-\":\n                result -= operand[i+1];\n\
    \                break;\n            case \"*\":\n                result *= operand[i+1];\n\
    \                break;\n            case \"//\":\n                result /= operand[i+1];\n\
    \                break;\n            case \"**\":\n                result = pow(result,\
    \ operand[i+1]);\n                break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbmoqlehj.d(34): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbmoqlehj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    int result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                result += operand[i+1];\n                break;\n         \
    \   case \"-\":\n                result -= operand[i+1];\n                break;\n\
    \            case \"*\":\n                result *= operand[i+1];\n          \
    \      break;\n            case \"//\":\n                result /= operand[i+1];\n\
    \                break;\n            case \"**\":\n                result = pow(result,\
    \ operand[i+1]);\n                break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0d90ekel.d(30): Error: cannot implicitly convert expression `operand[0]`
    of type `long` to `int`

    /tmp/tmp0d90ekel.d(48): Error: cannot implicitly convert expression `pow(result,
    operand[cast(ulong)(i + 1)])` of type `long` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0d90ekel.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n  long result = operand[0];\n  for (int i = 0; i < operator.length;\
    \ i++)\n  {\n    switch (operator[i])\n    {\n      case \"+\":\n        result\
    \ += operand[i + 1];\n        break;\n      case \"-\":\n        result -= operand[i\
    \ + 1];\n        break;\n      case \"*\":\n        result *= operand[i + 1];\n\
    \        break;\n      case \"//\":\n        result /= operand[i + 1];\n     \
    \   break;\n      case \"**\":\n        result = cast(long)pow(result, operand[i\
    \ + 1]);\n        break;\n    }\n  }\n  return result;\n}\nunittest\n{\n    alias\
    \ candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L,\
    \ 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L,\
    \ 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9l7oznat.d(33): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9l7oznat.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n        {\n            result\
    \ += operand[i+1];\n        }\n        else if (operator[i] == \"-\")\n      \
    \  {\n            result -= operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"*\")\n        {\n            result *= operand[i+1];\n        }\n     \
    \   else if (operator[i] == \"//\")\n        {\n            result /= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"**\")\n        {\n            result\
    \ = pow(result, operand[i+1]);\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5qawse14.d(61): unittest failure

    ----------------

    ??:? _d_unittestp [0x4291ed]

    ??:? void tmp5qawse14.__unittest_L56_C1() [0x42826d]

    ??:? void tmp5qawse14.__modtest() [0x428458]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dd43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428f46]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a9e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42aa78]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a975]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f1d]

    ??:? runModuleUnitTests [0x42db19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4296b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (size_t i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                result += operand[i + 1];\n                break;\n       \
    \     case \"-\":\n                result -= operand[i + 1];\n               \
    \ break;\n            case \"*\":\n                result *= operand[i + 1];\n\
    \                break;\n            case \"//\":\n                result /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                result\
    \ = pow(result, operand[i + 1]);\n                break;\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuexctdh2.d(33): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuexctdh2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    int n = operator.size;\n  \
    \  for (int i = 0; i < n; i++)\n    {\n        if (operator[i] == \"+\")\n   \
    \         result += operand[i+1];\n        else if (operator[i] == \"-\")\n  \
    \          result -= operand[i+1];\n        else if (operator[i] == \"*\")\n \
    \           result *= operand[i+1];\n        else if (operator[i] == \"//\")\n\
    \            result /= operand[i+1];\n        else if (operator[i] == \"**\")\n\
    \            result = pow(result, operand[i+1]);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp8dxh73m.d(31): Error: no property `size` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp8dxh73m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    auto result = operand[0];\n    long i = 0;\n    while(i <\
    \ operator.length)\n    {\n        switch(operator[i])\n        {\n          \
    \  case \"+\":\n                result += operand[i+1];\n                break;\n\
    \            case \"-\":\n                result -= operand[i+1];\n          \
    \      break;\n            case \"*\":\n                result *= operand[i+1];\n\
    \                break;\n            case \"//\":\n                result /= operand[i+1];\n\
    \                break;\n            case \"**\":\n                result ^= operand[i+1];\n\
    \                break;\n        }\n        i++;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgehgmi9m.d(34): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgehgmi9m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (size_t i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                result += operand[i + 1];\n                break;\n       \
    \     case \"-\":\n                result -= operand[i + 1];\n               \
    \ break;\n            case \"*\":\n                result *= operand[i + 1];\n\
    \                break;\n            case \"//\":\n                result /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                result\
    \ = (long)pow(result, operand[i + 1]);\n                break;\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n\
    \    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n   \
    \ assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphl3qlv8v.d(48): Error: C style cast illegal, use `cast(long)pow(result,
    operand[i + 1])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphl3qlv8v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n            result += operand[i+1];\n\
    \        else if (operator[i] == \"-\")\n            result -= operand[i+1];\n\
    \        else if (operator[i] == \"*\")\n            result *= operand[i+1];\n\
    \        else if (operator[i] == \"//\")\n            result /= operand[i+1];\n\
    \        else if (operator[i] == \"**\")\n            result = (long)pow(result,\
    \ operand[i+1]);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprox6d3a2.d(42): Error: C style cast illegal, use `cast(long)pow(result,
    operand[i + 1])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprox6d3a2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n            result += operand[i+1];\n\
    \        else if (operator[i] == \"-\")\n            result -= operand[i+1];\n\
    \        else if (operator[i] == \"*\")\n            result *= operand[i+1];\n\
    \        else if (operator[i] == \"//\")\n            result /= operand[i+1];\n\
    \        else if (operator[i] == \"**\")\n            result = pow(result, operand[i+1]);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpsja1h9yu.d(51): unittest failure

    ----------------

    ??:? _d_unittestp [0x4291ed]

    ??:? void tmpsja1h9yu.__unittest_L46_C1() [0x42826d]

    ??:? void tmpsja1h9yu.__modtest() [0x428458]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dd43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428f46]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a9e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42aa78]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a975]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f1d]

    ??:? runModuleUnitTests [0x42db19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4296b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    auto result = operand[0];\n    for (size_t i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n            result += operand[i\
    \ + 1];\n        else if (operator[i] == \"-\")\n            result -= operand[i\
    \ + 1];\n        else if (operator[i] == \"*\")\n            result *= operand[i\
    \ + 1];\n        else if (operator[i] == \"//\")\n            result /= operand[i\
    \ + 1];\n        else if (operator[i] == \"**\")\n            result = pow(result,\
    \ operand[i + 1]);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpb14izh0m.d(51): unittest failure

    ----------------

    ??:? _d_unittestp [0x4291ed]

    ??:? void tmpb14izh0m.__unittest_L46_C1() [0x42826d]

    ??:? void tmpb14izh0m.__modtest() [0x428458]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dd43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428f46]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a9e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42aa78]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a975]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f1d]

    ??:? runModuleUnitTests [0x42db19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4296b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++) {\n        switch (operator[i]) {\n            case \"+\":\n          \
    \      result += operand[i + 1];\n                break;\n            case \"\
    -\":\n                result -= operand[i + 1];\n                break;\n    \
    \        case \"*\":\n                result *= operand[i + 1];\n            \
    \    break;\n            case \"//\":\n                result /= operand[i + 1];\n\
    \                break;\n            case \"**\":\n                result = (long)pow(result,\
    \ operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj5ov465r.d(46): Error: C style cast illegal, use `cast(long)pow(result,
    operand[i + 1])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj5ov465r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    auto result = operand[0];\n    foreach(a, b; zip(operator,\
    \ operand[1..$])) \n    {\n        if(a == \"+\") \n        {\n            result\
    \ += b;\n        } \n        else if(a == \"-\") \n        {\n            result\
    \ -= b;\n        } \n        else if(a == \"*\") \n        {\n            result\
    \ *= b;\n        } \n        else if(a == \"//\") \n        {\n            result\
    \ /= b;\n        } \n        else if(a == \"**\") \n        {\n            result\
    \ = pow(result, b);\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"\
    ], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L,\
    \ 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) ==\
    \ 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa4xn3tsa.d(31): Error: undefined identifier `zip`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa4xn3tsa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160694
