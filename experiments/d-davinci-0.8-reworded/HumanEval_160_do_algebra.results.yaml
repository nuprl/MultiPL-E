name: HumanEval_160_do_algebra
language: d
results:
- program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n        {\n            result\
    \ += operand[i+1];\n        }\n        else if (operator[i] == \"-\")\n      \
    \  {\n            result -= operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"*\")\n        {\n            result *= operand[i+1];\n        }\n     \
    \   else if (operator[i] == \"//\")\n        {\n            result /= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"**\")\n        {\n            result\
    \ = pow(result, operand[i+1]);\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp2waybrmc.d(61): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4291ed]\\n??:? void tmp2waybrmc.__unittest_L56_C1()\
    \ [0x42826d]\\n??:? void tmp2waybrmc.__modtest() [0x428458]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42dd43]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x428f46]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42a9e9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa78]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42a975]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x428f1d]\\n??:? runModuleUnitTests [0x42db19]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4296b0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429637]\\n??:? _d_run_main [0x4295a2]\\n??:? main [0x42846b]\\\
    n??:? __libc_start_main [0x2ab25554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n  /*\n    Assume operator contains valid values\n    Assume operand\
    \ contains valid values\n    Assume length of operator is equal to the length\
    \ of operand minus one.\n  */\n  // storing result at the first value of operand\n\
    \  // do operation with each operator\n  // return result stored at first index\
    \ of operand\n  foreach(i, o; operator)\n  {\n    switch(o)\n    {\n      case\
    \ \"+\":\n        operand[0] += operand[i+1];\n        break;\n      case \"-\"\
    :\n        operand[0] -= operand[i+1];\n        break;\n      case \"*\":\n  \
    \      operand[0] *= operand[i+1];\n        break;\n      case \"//\":\n     \
    \   operand[0] /= operand[i+1];\n        break;\n      case \"**\":\n        operand[0]\
    \ = long(pow(double(operand[0]), double(operand[i+1])));\n        break;\n   \
    \ }\n  }\n  return operand[0];\n}\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplg3o55hm.d(55): Error: cannot implicitly convert expression `pow(cast(double)operand[0],\
    \ cast(double)operand[i + 1LU])` of type `double` to `long`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplg3o55hm.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (size_t i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                result += operand[i + 1];\n                break;\n       \
    \     case \"-\":\n                result -= operand[i + 1];\n               \
    \ break;\n            case \"*\":\n                result *= operand[i + 1];\n\
    \                break;\n            case \"//\":\n                result /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                result\
    \ = pow(result, operand[i + 1]);\n                break;\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd0xivamg.d(33): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd0xivamg.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long num = operand[0];\n    foreach(int i, string j; operator)\n\
    \    {\n        if(j == \"+\")\n            num += operand[i+1];\n        else\
    \ if(j == \"-\")\n            num -= operand[i+1];\n        else if(j == \"*\"\
    )\n            num *= operand[i+1];\n        else if(j == \"//\")\n          \
    \  num /= operand[i+1];\n        else if(j == \"**\")\n            num = pow(num,\
    \ operand[i+1]);\n    }\n    return num;\n}\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpxtu3khs1.d(51): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429175]\\n??:? void tmpxtu3khs1.__unittest_L46_C1()\
    \ [0x4281f5]\\n??:? void tmpxtu3khs1.__modtest() [0x4283e0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42dccb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x428ece]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42a971]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa00]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42a8fd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x428ea5]\\n??:? runModuleUnitTests [0x42daa1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429638]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4295bf]\\n??:? _d_run_main [0x42952a]\\n??:? main [0x4283f3]\\\
    n??:? __libc_start_main [0x270cf554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    auto result = operand[0];\n    for (size_t i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n            result += operand[i\
    \ + 1];\n        else if (operator[i] == \"-\")\n            result -= operand[i\
    \ + 1];\n        else if (operator[i] == \"*\")\n            result *= operand[i\
    \ + 1];\n        else if (operator[i] == \"//\")\n            result /= operand[i\
    \ + 1];\n        else if (operator[i] == \"**\")\n            result = (long)pow(result,\
    \ operand[i + 1]);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn83bh37s.d(42): Error: C style cast illegal, use `cast(long)pow(result,\
    \ operand[i + 1])`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn83bh37s.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                result += operand[i + 1];\n                break;\n       \
    \     case \"-\":\n                result -= operand[i + 1];\n               \
    \ break;\n            case \"*\":\n                result *= operand[i + 1];\n\
    \                break;\n            case \"//\":\n                result /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                result\
    \ = (long)pow(result, operand[i + 1]);\n                break;\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n\
    \    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n   \
    \ assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5gpodadz.d(48): Error: C style cast illegal, use `cast(long)pow(result,\
    \ operand[i + 1])`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5gpodadz.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++) {\n        if (operator[i] == \"+\") {\n            result += operand[i\
    \ + 1];\n        } else if (operator[i] == \"-\") {\n            result -= operand[i\
    \ + 1];\n        } else if (operator[i] == \"*\") {\n            result *= operand[i\
    \ + 1];\n        } else if (operator[i] == \"//\") {\n            result /= operand[i\
    \ + 1];\n        } else if (operator[i] == \"**\") {\n            result = long(pow(result,\
    \ operand[i + 1]));\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"\
    ], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L,\
    \ 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) ==\
    \ 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpfkp3bfo0.d(51): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4291ed]\\n??:? void tmpfkp3bfo0.__unittest_L46_C1()\
    \ [0x42826d]\\n??:? void tmpfkp3bfo0.__modtest() [0x428458]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42dd43]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x428f46]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42a9e9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa78]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42a975]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x428f1d]\\n??:? runModuleUnitTests [0x42db19]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4296b0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429637]\\n??:? _d_run_main [0x4295a2]\\n??:? main [0x42846b]\\\
    n??:? __libc_start_main [0x5f015554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                result += operand[i + 1];\n                break;\n       \
    \     case \"-\":\n                result -= operand[i + 1];\n               \
    \ break;\n            case \"*\":\n                result *= operand[i + 1];\n\
    \                break;\n            case \"//\":\n                result /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                result\
    \ = pow(result, operand[i + 1]);\n                break;\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1p1ptf1l.d(33): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1p1ptf1l.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                result += operand[i + 1];\n                break;\n       \
    \     case \"-\":\n                result -= operand[i + 1];\n               \
    \ break;\n            case \"*\":\n                result *= operand[i + 1];\n\
    \                break;\n            case \"//\":\n                result /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                result\
    \ = (long)pow(result, operand[i + 1]);\n                break;\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n\
    \    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n   \
    \ assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_08cvjey.d(48): Error: C style cast illegal, use `cast(long)pow(result,\
    \ operand[i + 1])`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_08cvjey.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (size_t i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                result += operand[i + 1];\n                break;\n       \
    \     case \"-\":\n                result -= operand[i + 1];\n               \
    \ break;\n            case \"*\":\n                result *= operand[i + 1];\n\
    \                break;\n            case \"//\":\n                result /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                result\
    \ = pow(result, operand[i + 1]);\n                break;\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp379ym_va.d(33): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp379ym_va.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    int len = operator.length;\n    long temp = operand[0];\n\
    \    for(int i = 0; i < len; i++)\n    {\n        switch(operator[i])\n      \
    \  {\n            case \"+\":\n                temp += operand[i+1];\n       \
    \         break;\n            case \"-\":\n                temp -= operand[i+1];\n\
    \                break;\n            case \"*\":\n                temp *= operand[i+1];\n\
    \                break;\n            case \"//\":\n                temp /= operand[i+1];\n\
    \                break;\n            case \"**\":\n                temp = (long)pow(temp,\
    \ operand[i+1]);\n                break;\n        }\n    }\n    return temp;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjvdjop44.d(49): Error: C style cast illegal, use `cast(long)pow(temp,\
    \ operand[i + 1])`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjvdjop44.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    // Convert long[] to List<long>\n    List<long> arrList =\
    \ new List<long>();\n    foreach(long i in operand)\n    {\n        arrList.Add(i);\n\
    \    }\n    // Convert string[] to List<string>\n    List<string> opList = new\
    \ List<string>();\n    foreach(string i in operator)\n    {\n        opList.Add(i);\n\
    \    }\n    // Do exponentiation first\n    while(opList.IndexOf(\"**\") != -1)\n\
    \    {\n        int index = opList.IndexOf(\"**\");\n        long num1 = arrList[index];\n\
    \        long num2 = arrList[index + 1];\n        long val = (long)pow(num1, num2);\n\
    \        arrList.RemoveAt(index);\n        arrList.RemoveAt(index);\n        arrList.Insert(index,\
    \ val);\n        opList.RemoveAt(index);\n    }\n    // Do multiplication or division\
    \ next\n    while(opList.IndexOf(\"*\") != -1 || opList.IndexOf(\"//\") != -1)\n\
    \    {\n        int index = -1;\n        long val = -1;\n        if(opList.IndexOf(\"\
    *\") != -1)\n        {\n            index = opList.IndexOf(\"*\");\n         \
    \   long num1 = arrList[index];\n            long num2 = arrList[index + 1];\n\
    \            val = num1 * num2;\n        }\n        else if(opList.IndexOf(\"\
    //\") != -1)\n        {\n            index = opList.IndexOf(\"//\");\n       \
    \     long num1 = arrList[index];\n            long num2 = arrList[index + 1];\n\
    \            val = num1 / num2;\n        }\n        arrList.RemoveAt(index);\n\
    \        arrList.RemoveAt(index);\n        arrList.Insert(index, val);\n     \
    \   opList.RemoveAt(index);\n    }\n    // Do addition or subtraction last\n \
    \   while(opList.IndexOf(\"+\") != -1 || opList.IndexOf(\"-\") != -1)\n    {\n\
    \        int index = -1\nunittest\n{\n    alias candidate = do_algebra;\n\n  \
    \  assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"\
    +\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"\
    *\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpoygk2yqo.d(31): Error: found `>` when expecting `.` following\
    \ long\\n/tmp/tmpoygk2yqo.d(31): Error: found `>` when expecting `.` following\
    \ long\\n/tmp/tmpoygk2yqo.d(31): Error: found `(` when expecting identifier following\
    \ `long`.\\n/tmp/tmpoygk2yqo.d(31): Error: found `)` when expecting `;` following\
    \ statement\\n/tmp/tmpoygk2yqo.d(31): Deprecation: use `{ }` for an empty statement,\
    \ not `;`\\n/tmp/tmpoygk2yqo.d(32): Error: found `in` when expecting `;`\\n/tmp/tmpoygk2yqo.d(37):\
    \ Error: found `>` when expecting `;` following statement\\n/tmp/tmpoygk2yqo.d(37):\
    \ Error: found `>` when expecting `;` following statement\\n/tmp/tmpoygk2yqo.d(37):\
    \ Error: expression expected, not `)`\\n/tmp/tmpoygk2yqo.d(37): Error: found `;`\
    \ when expecting `)`\\n/tmp/tmpoygk2yqo.d(38): Error: found `foreach` when expecting\
    \ `;` following statement\\n/tmp/tmpoygk2yqo.d(38): Error: found `in` when expecting\
    \ `)`\\n/tmp/tmpoygk2yqo.d(38): Error: missing `{ ... }` for function literal\\\
    n/tmp/tmpoygk2yqo.d(38): Error: found `operator` when expecting `;` following\
    \ statement\\n/tmp/tmpoygk2yqo.d(38): Error: found `)` instead of statement\\\
    n/tmp/tmpoygk2yqo.d(43): Error: declaration expected, not `while`\\n/tmp/tmpoygk2yqo.d(48):\
    \ Error: C style cast illegal, use `cast(long)pow(num1, num2)`\\n/tmp/tmpoygk2yqo.d(49):\
    \ Error: function declaration without return type. (Note that constructors are\
    \ always named `this`)\\n/tmp/tmpoygk2yqo.d(49): Error: no identifier for declarator\
    \ `arrList.RemoveAt(index)`\\n/tmp/tmpoygk2yqo.d(50): Error: function declaration\
    \ without return type. (Note that constructors are always named `this`)\\n/tmp/tmpoygk2yqo.d(50):\
    \ Error: no identifier for declarator `arrList.RemoveAt(index)`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoygk2yqo.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        string op = operator[i];\n        switch (op)\n       \
    \ {\n            case \"+\":\n                result += operand[i + 1];\n    \
    \            break;\n            case \"-\":\n                result -= operand[i\
    \ + 1];\n                break;\n            case \"*\":\n                result\
    \ *= operand[i + 1];\n                break;\n            case \"//\":\n     \
    \           result /= operand[i + 1];\n                break;\n            case\
    \ \"**\":\n                result = cast(long) pow(result, operand[i + 1]);\n\
    \                break;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjzrnfti7.d(34): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjzrnfti7.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    if (operator.length == 0 || operand.length == 0)\n       \
    \ return -1;\n    else if (operator.length != operand.length - 1)\n        return\
    \ -1;\n    \n    long result = operand[0];\n    for (long i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                result += operand[i + 1];\n                break;\n       \
    \     case \"-\":\n                result -= operand[i + 1];\n               \
    \ break;\n            case \"*\":\n                result *= operand[i + 1];\n\
    \                break;\n            case \"//\":\n                result /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                result\
    \ = pow(result, operand[i + 1]);\n                break;\n            default:\n\
    \                break;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmppsuvjsy4.d(66): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429581]\\n??:? void tmppsuvjsy4.__unittest_L61_C1()\
    \ [0x428369]\\n??:? void tmppsuvjsy4.__modtest() [0x42876c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e12b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42925e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42add1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ae60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ad5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429235]\\n??:? runModuleUnitTests [0x42df01]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429a98]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429a1f]\\n??:? _d_run_main [0x42998a]\\n??:? main [0x42877f]\\\
    n??:? __libc_start_main [0x9a26e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    // your code here\n    long ret = operand[0];\n    for(int\
    \ i = 0; i < operator.length; i++)\n    {\n        switch(operator[i])\n     \
    \   {\n            case '+':\n                ret += operand[i+1];\n         \
    \       break;\n            case '-':\n                ret -= operand[i+1];\n\
    \                break;\n            case '*':\n                ret *= operand[i+1];\n\
    \                break;\n            case '//':\n                ret /= operand[i+1];\n\
    \                break;\n            case '**':\n                ret = pow(ret,\
    \ operand[i+1]);\n                break;\n        }\n    }\n    return ret;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7cs1e85o.d(45): Error: unterminated character constant\\n/tmp/tmp7cs1e85o.d(45):\
    \ Error: unterminated character constant\\n/tmp/tmp7cs1e85o.d(46): Error: found\
    \ `ret` when expecting `:`\\n/tmp/tmp7cs1e85o.d(46): Error: found `/=` instead\
    \ of statement\\n/tmp/tmp7cs1e85o.d(48): Error: unterminated character constant\\\
    n/tmp/tmp7cs1e85o.d(48): Error: unterminated character constant\\n/tmp/tmp7cs1e85o.d(49):\
    \ Error: found `ret` when expecting `:`\\n/tmp/tmp7cs1e85o.d(49): Error: found\
    \ `=` instead of statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp7cs1e85o.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    int last = operand.length - 1;\n    if (operator.length !=\
    \ last) return 0;\n    for (int i = 0; i < last; i++)\n    {\n        if (operator[i]\
    \ == \"+\") operand[i+1] += operand[i];\n        else if (operator[i] == \"-\"\
    ) operand[i+1] = operand[i] - operand[i+1];\n        else if (operator[i] == \"\
    *\") operand[i+1] *= operand[i];\n        else if (operator[i] == \"//\") operand[i+1]\
    \ = operand[i] / operand[i+1];\n        else if (operator[i] == \"**\") operand[i+1]\
    \ = operand[i] ** operand[i+1];\n    }\n    return operand[last];\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7bgpq7zb.d(30): Error: cannot implicitly convert expression `operand.length\
    \ - 1LU` of type `ulong` to `int`\\n/tmp/tmp7bgpq7zb.d(38): Error: can only `*`\
    \ a pointer, not a `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\",\
    \ \"/tmp/tmp7bgpq7zb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long res = operand[0];\n    for (size_t i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case '+':\n\
    \                res += operand[i + 1];\n                break;\n            case\
    \ '-':\n                res -= operand[i + 1];\n                break;\n     \
    \       case '*':\n                res *= operand[i + 1];\n                break;\n\
    \            case '//':\n                res /= operand[i + 1];\n            \
    \    break;\n            case '**':\n                res = pow(res, operand[i\
    \ + 1]);\n                break;\n        }\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzpa98s69.d(44): Error: unterminated character constant\\n/tmp/tmpzpa98s69.d(44):\
    \ Error: unterminated character constant\\n/tmp/tmpzpa98s69.d(45): Error: found\
    \ `res` when expecting `:`\\n/tmp/tmpzpa98s69.d(45): Error: found `/=` instead\
    \ of statement\\n/tmp/tmpzpa98s69.d(47): Error: unterminated character constant\\\
    n/tmp/tmpzpa98s69.d(47): Error: unterminated character constant\\n/tmp/tmpzpa98s69.d(48):\
    \ Error: found `res` when expecting `:`\\n/tmp/tmpzpa98s69.d(48): Error: found\
    \ `=` instead of statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpzpa98s69.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    auto result = operand[0];\n    foreach(i, o; operator)\n \
    \   {\n        auto next_index = i + 1;\n        if(o == \"+\")\n        {\n \
    \           result += operand[next_index];\n        }\n        else if(o == \"\
    -\")\n        {\n            result -= operand[next_index];\n        }\n     \
    \   else if(o == \"*\")\n        {\n            result *= operand[next_index];\n\
    \        }\n        else if(o == \"//\")\n        {\n            result /= operand[next_index];\n\
    \        }\n        else if(o == \"**\")\n        {\n            result = pow(result,\
    \ operand[next_index]);\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpc8z_6nep.d(62): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42916d]\\n??:? void tmpc8z_6nep.__unittest_L57_C1()\
    \ [0x4281ed]\\n??:? void tmpc8z_6nep.__modtest() [0x4283d8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42dcc3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x428ec6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42a969]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42a9f8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42a8f5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x428e9d]\\n??:? runModuleUnitTests [0x42da99]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429630]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4295b7]\\n??:? _d_run_main [0x429522]\\n??:? main [0x4283eb]\\\
    n??:? __libc_start_main [0x40fab554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++) {\n        if (operator[i] == \"+\") {\n            result += operand[i\
    \ + 1];\n        } else if (operator[i] == \"-\") {\n            result -= operand[i\
    \ + 1];\n        } else if (operator[i] == \"*\") {\n            result *= operand[i\
    \ + 1];\n        } else if (operator[i] == \"//\") {\n            result /= operand[i\
    \ + 1];\n        } else if (operator[i] == \"**\") {\n            result = cast(long)pow(result,\
    \ operand[i + 1]);\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"\
    ], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L,\
    \ 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) ==\
    \ 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmppf16fetc.d(51): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4291ed]\\n??:? void tmppf16fetc.__unittest_L46_C1()\
    \ [0x42826d]\\n??:? void tmppf16fetc.__modtest() [0x428458]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42dd43]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x428f46]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42a9e9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa78]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42a975]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x428f1d]\\n??:? runModuleUnitTests [0x42db19]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4296b0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429637]\\n??:? _d_run_main [0x4295a2]\\n??:? main [0x42846b]\\\
    n??:? __libc_start_main [0x39c57554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    //long[] results = new long[operand.size];\n    long result\
    \ = operand[0];\n    for(size_t i = 0; i < operator.size; i++)\n    {\n      \
    \  if(operator[i] == \"+\")\n        {\n            result += operand[i+1];\n\
    \        }\n        else if(operator[i] == \"-\")\n        {\n            result\
    \ -= operand[i+1];\n        }\n        else if(operator[i] == \"*\")\n       \
    \ {\n            result *= operand[i+1];\n        }\n        else if(operator[i]\
    \ == \"//\")\n        {\n            result /= operand[i+1];\n        }\n    \
    \    else if(operator[i] == \"**\")\n        {\n            result = pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L,\
    \ 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L,\
    \ 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx01k6cm1.d(32): Error: no property `size` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx01k6cm1.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
