language: d
name: HumanEval_42_incr_list
results:
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] result;\
    \ \n    foreach (x; l) \n    {\n        result ~= x + 1L;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164042
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long size\
    \ = l.length;\n    typeof(return) r = new typeof(return)(size);\n    for (size_t\
    \ i = 0L; i < size; i++)\n    {\n        r[i] = l[i] + 1L;\n    }\n    return\
    \ r;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164042
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n    {\n    long[]\
    \ r=new long[l.length];\n    for (int i=0;i<l.length;i++)\n        {\n       \
    \ r[i]=l[i]+1;\n        }\n    return r;\n    }\n/*\nMake a deep copy of an array.\n\
    \   >>> dcopy([1L, 2L, 3L])\n   [1L, 2L, 3L]\n   >>> dcopy([5L, 3L, 5L, 2L, 3L,\
    \ 3L, 9L, 0L, 123L])\n   [5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]\n   \n*/\nlong[]\
    \ dcopy(long[] a) \n    {\n    long[] b=new long[a.length];\n    for (int i=0;i<a.length;i++)\n\
    \        {\n        b[i]=a[i];\n        }\n    return b;\n    }\n/*\nReturn a\
    \ list with the first element removed.\n   >>> tail([1L, 2L, 3L])\n   [2L, 3L]\n\
    \   >>> tail([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n   [3L, 5L, 2L, 3L, 3L,\
    \ 9L, 0L, 123L]\n   \n*/\nlong[] tail(long[] l) \n    {\n    if (l.length==0)\
    \ return l;\n    long[] r=new long[l.length-1];\n    for (int i=1;i<l.length;i++)\n\
    \        {\n        r[i-1]=l[i];\n        }\n    return r;\n    }\n/*\nReturn\
    \ a list with the first element removed.\n   >>> head([1L, 2L, 3L])\n   1L\n \
    \  >>> head([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n   5L\n   \n*/\nlong head(long[]\
    \ l) \n    {\n    if (l.length==0) throw new Error(\"head of\nunittest\n{\n  \
    \  alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp06cd5wx1.d(65): Error: unterminated string constant starting at
    /tmp/tmp06cd5wx1.d(65)

    /tmp/tmp06cd5wx1.d(74): Error: found `End of File` when expecting `,`

    /tmp/tmp06cd5wx1.d(74): Error: found `End of File` when expecting `)`

    /tmp/tmp06cd5wx1.d(74): Error: found `End of File` when expecting `;` following
    `throw` statement

    /tmp/tmp06cd5wx1.d(74): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp06cd5wx1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164042
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret\
    \ = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        ret[i]\
    \ = l[i] + 1L;\n    }\n    return ret;\n}\n/*\nReturn array with elements incremented\
    \ by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nconst long[] incr_list2(long[] l) \n{\n    long[] ret = new long[l.length];\n\
    \    for (int i = 0; i < l.length; i++) {\n        ret[i] = l[i] + 1L;\n    }\n\
    \    return ret;\n}\n/*\nReturn array with elements incremented by 1.\n    >>>\
    \ incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n\
    */\nlong[] incr_list3(long[] l) \n{\n    long[] ret = new long[l.length];\n  \
    \  foreach (i, item; l) {\n        ret[i] = item + 1L;\n    }\n    return ret;\n\
    }\n/*\nReturn array with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp70j64c9.d(51): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp70j64c9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164042
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n    in(increment)\
    \ \n    out(increment) \n    body \n    return l.map!(a => a + 1); \n \n \n//----------------------------------------------------------------------------\n\
    unittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd5qtuft2.d(14): Error: statement expected to be `{ }`, not `body`

    /tmp/tmpd5qtuft2.d(15): Error: found `return` when expecting `;` following statement

    /tmp/tmpd5qtuft2.d(15): Error: no identifier for declarator `l.map!((a) => a +
    1)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd5qtuft2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164042
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    for (long i = 0L; i < l.length; i++)\n    {\n   \
    \     res[i] = l[i] + 1L;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164042
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] r =\
    \ new long[l.length];\n    foreach (i, x; l) {\n        r[i] = x + 1L;\n    }\n\
    \    return r;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164042
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    foreach (elem;\
    \ l)\n        elem++;\n    return l;\n}\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpbiyg185e.d(22): unittest failure

    ----------------

    ??:? _d_unittestp [0x4283bd]

    ??:? void tmpbiyg185e.__unittest_L17_C1() [0x427f8d]

    ??:? void tmpbiyg185e.__modtest() [0x428140]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3cb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b25e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43037d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b235]

    ??:? runModuleUnitTests [0x42c1a1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42880c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164042
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n  long[] t = new\
    \ long[l.length];\n  foreach (i, ref e; l) \n  {\n    t[i] = e + 1L;\n  }\n  return\
    \ t;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164042
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret\
    \ = new long[l.length];\n    foreach (i, v; l)\n        ret[i] = v + 1L;\n   \
    \ return ret;\n}\n/*\nConcatenate lists.\n    >>> concat_lists([[1L, 2L], [3L,\
    \ 4L], [5L, 6L]])\n    [1L, 2L, 3L, 4L, 5L, 6L]\n    >>> concat_lists([[1L, 2L,\
    \ 3L], [4L, 5L, 6L]])\n    [1L, 2L, 3L, 4L, 5L, 6L]\n    >>> concat_lists([[1L,\
    \ 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]])\n    [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L,\
    \ 9L]\n*/\nlong[] concat_lists(long[][] ll) \n{\n    long[] ret = new long[0L];\n\
    \    foreach (i, v; ll)\n        ret ~= v;\n    return ret;\n}\n/*\nSwap each\
    \ pair of elements in input list.\n    >>> swap_each_pair([1L, 2L, 3L, 4L, 5L,\
    \ 6L])\n    [2L, 1L, 4L, 3L, 6L, 5L]\n    >>> swap_each_pair([1L, 2L, 3L, 4L,\
    \ 5L])\n    [2L, 1L, 4L, 3L, 5L]\n    >>> swap_each_pair([1L, 2L, 3L, 4L])\n \
    \   [2L, 1L, 4L, 3L]\n*/\nlong[] swap_each_pair(long[] l) \n{\n    long[] ret\
    \ = new long[l.length];\n    foreach (i, v; l)\n    {\n        ret[i] = l[i ^\
    \ 1L];\n    }\n    return ret;\n}\n/*\nReturn tuple of input list and its length.\n\
    \    >>> list_and_length([1L,\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp14ofxt9d.d(52): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp14ofxt9d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164042
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    return l.map!(x\
    \ => x + 1);\n}\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeb6q9pot.d(13): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeb6q9pot.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164042
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    foreach (i,\
    \ ref elem; l)\n    {\n        elem++;\n    }\n    return l;\n}\n/*\nReturn array\
    \ with elements decremented by 1.\n    >>> decr_list([3L, 2L, 1L])\n    [2L, 1L,\
    \ 0L]\n    >>> decr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L,\
    \ 4L, 1L, 2L, 2L, 8L, -1L, 122L]\n*/\nlong[] decr_list(long[] l) \n{\n    foreach\
    \ (i, ref elem; l)\n    {\n        elem--;\n    }\n    return l;\n}\n/*\nReturn\
    \ the sum of all elements in an array.\n    >>> list_sum([1L, 2L, 3L])\n    6L\n\
    \    >>> list_sum([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    298L\n*/\nlong\
    \ list_sum(long[] l) \n{\n    long sum = 0;\n    foreach (elem; l)\n    {\n  \
    \      sum += elem;\n    }\n    return sum;\n}\n/*\nReturn the average of all\
    \ elements in an array.\n    >>> list_average([1L, 2L, 3L])\n    2L\n    >>> list_average([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    33L\n*/\nlong list_average(long[] l)\
    \ \n{\n    long sum = 0;\n    foreach (elem; l)\n    {\n        sum += elem;\n\
    \    }\n    return sum / l.length;\n}\n/*\nReturn the median of all elements in\
    \ an array.\n    >>> list_median([1L, 2L, 3L])\n    2L\n    >>> list_median([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    3L\nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp72fcwo21.d(66): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp72fcwo21.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164042
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] result\
    \ = new long[l.length];\n    foreach (i, e; l) \n    {\n        result[i] = e\
    \ + 1L;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164042
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n  long[] res =\
    \ new long[l.length];\n  foreach (int i, long elem; l) \n  {\n    res[i] = elem\
    \ + 1L;\n  }\n  return res;\n}\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164042
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n  int s = l.length;\n\
    \  long[] r = new long[s];\n  for (int i = 0; i < s; i++) {\n    r[i] = l[i] +\
    \ 1L;\n  }\n  return r;\n}\n/*\nReturn a sub array of an array, starting at position\
    \ n and ending with\nposition n+l.\n    \n    >>> sub_array([1L, 2L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L], 4L, 3L)\n    [5L, 6L, 7L]\n    \n*/\nlong[] sub_array(long[]\
    \ l, long n, long length) \n{\n  int s = l.length;\n  long[] r = new long[s];\n\
    \  for (int i = 0; i < s; i++) {\n    r[i] = l[(int)(n + i)];\n  }\n  return r;\n\
    }\n/*\nGenerate fibonacci series up to nth term.\n    \n    >>> fibonacci(10L)\n\
    \    [1L, 1L, 2L, 3L, 5L, 8L, 13L, 21L, 34L, 55L]\n    \n*/\nlong[] fibonacci(long\
    \ n) \n{\n  long[] r = new long[(int)(n)];\n  if (n == 0L) {\n    return r;\n\
    \  }\n  r[0] = 1L;\n  if (n == 1L) {\n    return r;\n  }\n  r[1] = 1L;\n  if (n\
    \ == 2L) {\n    return r;\n  }\n  for (int i = 2; i < n; i++) {\n    r[i] = r[i\
    \ - 1] + r[i - 2];\n  }\n  return r;\n}\n/*\nGet the largest value in a list of\
    \ numbers.\n    \n    >>> list_max([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L])\n   \
    \ 9L\n    \n*/\nlong list_max(long[] l) \n{\n \nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkj_1eeum.d(33): Error: C style cast illegal, use `cast(int)(n +
    i)`

    /tmp/tmpkj_1eeum.d(46): Error: C style cast illegal, use `cast(int)n`

    /tmp/tmpkj_1eeum.d(73): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkj_1eeum.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164042
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret\
    \ = new long[l.length];\n    int i = 0;\n    for (long x in l) \n    {\n     \
    \   ret[i] = x + 1L;\n        i += 1;\n    }\n    return ret;\n}\n/*\nReturn array\
    \ with all elements incremented by 1.\n    >>> incr_list_v2([1L, 2L, 3L])\n  \
    \  [2L, 3L, 4L]\n    >>> incr_list_v2([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n*/\nlong[] incr_list_v2(long[] l)\
    \ \n{\n    return l.map!(x => x + 1L);\n}\n/*\nReturn array with all elements\
    \ incremented by 1.\n    >>> incr_list_v3([1L, 2L, 3L])\n    [2L, 3L, 4L]\n  \
    \  >>> incr_list_v3([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L,\
    \ 3L, 4L, 4L, 10L, 1L, 124L]\n*/\nlong[] incr_list_v3(long[] l) \n{\n    return\
    \ l.map!(x => x + 1L).array;\n}\n/*\nReturn array with all elements incremented\
    \ by 1.\n    >>> incr_list_v4([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list_v4([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    */\nlong[] incr_list_v4(long[] l) \n{\n    return l.map!(x => x + 1L\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9umzsm_k.d(15): Error: semicolon expected, not `in`

    /tmp/tmp9umzsm_k.d(15): Error: expression expected, not `in`

    /tmp/tmp9umzsm_k.d(15): Error: found `l` when expecting `;` following `for` condition

    /tmp/tmp9umzsm_k.d(54): Error: found `unittest` when expecting `)` following template
    argument list

    /tmp/tmp9umzsm_k.d(55): Error: found `{` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9umzsm_k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164042
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    int i = 0;\n    for (auto x; l) \n    {\n       \
    \ res[i] = x + 1L;\n        i++;\n    }\n    return res;\n}\n/*\nReturn first\
    \ element of array.\n    >>> head([1L, 2L, 3L])\n    1L\n    >>> head([1L])\n\
    \    1L\n    >>> head([])\n    null\n*/\nlong head(long[] l) \n{\n    if (l.length\
    \ != 0) \n    {\n        return l[0];\n    }\n    else \n    {\n        return\
    \ null;\n    }\n}\n/*\nReturn array without first element.\n    >>> tail([1L,\
    \ 2L, 3L])\n    [2L, 3L]\n    >>> tail([1L])\n    []\n    >>> tail([])\n    []\n\
    */\nlong[] tail(long[] l) \n{\n    if (l.length != 0) \n    {\n        return\
    \ l[1..$];\n    }\n    else \n    {\n        return l;\n    }\n}\n/*\nReturn array\
    \ in reverse order.\n    >>> reverse([1L, 2L, 3L])\n    [3L, 2L, 1L]\n    >>>\
    \ reverse([1L])\n    [1L]\n    >>> reverse([])\n    []\n*/\nlong[] reverse(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    for (int i = 0; i < l.length;\
    \ i++) \n    {\n        res[i] = l[l.length - i - 1L];\n    }\n    return res;\n\
    }\n/*\nCheck if all elements of array are equal.\n    >>> are_equal([1L, 1L, 1L])\n\
    \    true\n    >>> are_equal([1L, 2L, 1L])\n    false\n    >>> are_equal([])\n\
    \    true\n*/\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpidmhapo6.d(15): Error: no identifier for declarator `x`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpidmhapo6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164042
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, idx; l) {\n        res[idx] = i + 1L;\n\
    \    }\n    return res;\n}\n/*\nAdd absolute values of numbers in the array.\n\
    \    >>> abs_sum([5L, 3L, -1L, -2L, 3L, 4L, -3L, -3L, -3L])\n    22L\n    >>>\
    \ abs_sum([10L, -10L, 1L, 1L, 1L, 1L, 1L, 1L, -10L, -10L])\n    18L\n*/\nlong\
    \ abs_sum(long[] l) \n{\n    long res = 0L;\n    foreach (i; l) {\n        res\
    \ += abs(i);\n    }\n    return res;\n}\n/*\nReturn the index of the first occurrence\
    \ of needle in haystack.\n    >>> find_first_idx([\"a\", \"a\", \"b\", \"c\",\
    \ \"a\", \"b\"], \"b\")\n    2\n    >>> find_first_idx([\"a\", \"a\", \"b\", \"\
    c\", \"a\", \"b\"], \"d\")\n    -1\n*/\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmp3n_s8jf8.d(15): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x4285b6]

    ??:? long[] tmp3n_s8jf8.incr_list(long[]) [0x427f1b]

    ??:? void tmp3n_s8jf8.__unittest_L41_C1() [0x428055]

    ??:? void tmp3n_s8jf8.__modtest() [0x428284]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5e3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b476]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430701]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430bb0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43068d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b44d]

    ??:? runModuleUnitTests [0x42c3b9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch'
  stdout: ''
  timestamp: 1660164042
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] new_l\
    \ = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        new_l[i]\
    \ = l[i] + 1L;\n    }\n    return new_l;\n}\n/*\nReturn squared array.\n    >>>\
    \ square_list([1L, 2L, 3L])\n    [1L, 4L, 9L]\n    >>> square_list([5L, 3L, 5L,\
    \ 2L, 3L, 3L, 9L, 0L, 123L])\n    [25L, 9L, 25L, 4L, 9L, 9L, 81L, 0L, 15129L]\n\
    \    \n*/\nlong[] square_list(long[] l) \n{\n    long[] new_l = new long[l.length];\n\
    \    for (int i = 0; i < l.length; i++) {\n        new_l[i] = l[i] * l[i];\n \
    \   }\n    return new_l;\n}\n/*\nReturn only even array elements.\n    >>> even_list([1L,\
    \ 2L, 3L])\n    [2L]\n    >>> even_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [2L, 0L, 123L]\n    \n*/\nlong[] even_list(long[] l) \n{\n    long[] new_l\
    \ = new long[l.length];\n    int ctr = 0;\n    for (int i = 0; i < l.length; i++)\
    \ {\n        if (l[i] % 2L == 0L) {\n            new_l[ctr] = l[i];\n        \
    \    ctr += 1;\n        }\n    }\n    return new_l[0 .. ctr];\n}\n/*\nReturn only\
    \ odd array elements.\n    >>> odd_list([1L, 2L, 3L])\n    [1L, 3L]\n    >>> odd_list([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [5L, 3\nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmxcni4co.d(55): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmxcni4co.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164042
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    return l.map!(a\
    \ => a + 1L);\n}\n/*\nReturn array with elements incremented by 1.\n    >>> incr_list([1L,\
    \ 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list_for(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l) \n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list_foreach(long[] l) \n{\n    long[]\
    \ res = new long[l.length];\n    foreach (i, e; l) \n    {\n        res[i] = e\
    \ + 1L;\n    }\n    return res;\n}\n/*\nReturn array with elements incremented\
    \ by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list_for_range(long[] l) \n{\n    long[] res = new long[\n\
    unittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw3kxsul9.d(60): Error: expression expected, not `unittest`

    /tmp/tmpw3kxsul9.d(61): Error: found `{` when expecting `]`

    /tmp/tmpw3kxsul9.d(62): Error: semicolon expected, not `alias`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw3kxsul9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164042
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] o =\
    \ new long[l.length];\n    foreach (int i, long v; l) {\n        o[i] = v + 1L;\n\
    \    }\n    return o;\n}\n/*\nReturn array with elements decremented by 1.\n \
    \   >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>> decr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L, 2L, 8L, -1L, 122L]\n\
    \    \n*/\nlong[] decr_list(long[] l) \n{\n    long[] o = new long[l.length];\n\
    \    foreach (int i, long v; l) {\n        o[i] = v - 1L;\n    }\n    return o;\n\
    }\n/*\nCombine two arrays into a single array.\n    >>> cat_list([1L, 2L, 3L],\
    \ [4L, 5L, 6L])\n    [1L, 2L, 3L, 4L, 5L, 6L]\n    >>> cat_list([5L, 3L, 5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L], [5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L, 5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]\n    \n\
    */\nlong[] cat_list(long[] a, long[] b) \n{\n    long[] o = new long[a.length\
    \ + b.length];\n    int i = 0;\n    foreach (long v; a) {\n        o[i] = v;\n\
    \        i += 1;\n    }\n    foreach (long v; b) {\n        o[i] = v;\n      \
    \  i += 1;\n    }\n    return o\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9v5bshi9.d(56): Error: found `unittest` when expecting `;` following
    `return` statement

    /tmp/tmp9v5bshi9.d(64): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9v5bshi9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164042
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    return map!((a)\
    \ => a + 1)(l);\n}\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6zriih2t.d(13): Error: template instance `map!((a) => a + 1)` template
    `map` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6zriih2t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164042
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        res[i]\
    \ = l[i] + 1L;\n    }\n    return res;\n}\n/*\nReturn the first element of the\
    \ list.\n    >>> first([1L, 2L, 3L])\n    1L\n    >>> first([])\n    Traceback\
    \ (most recent call last):\n        ...\n    ValueError: list is empty\n    \n\
    */\nlong first(long[] l) \n{\n    if (l.length == 0) {\n        throw new Error(\"\
    list is empty\");\n    }\n    return l[0];\n}\n/*\nReturn the last element of\
    \ the list.\n    >>> last([1L, 2L, 3L])\n    3L\n    >>> last([])\n    Traceback\
    \ (most recent call last):\n        ...\n    ValueError: list is empty\n    \n\
    */\nlong last(long[] l) \n{\n    if (l.length == 0) {\n        throw new Error(\"\
    list is empty\");\n    }\n    return l[l.length - 1];\n}\n/*\nReturn all but the\
    \ first element of the list.\n    >>> tail([1L, 2L, 3L])\n    [2L, 3L]\n    >>>\
    \ tail([])\n    Traceback (most recent call last):\n        ...\n    ValueError:\
    \ list is empty\n    \n*/\nlong[] tail(long[] l) \n{\n    if (l.length == 0) {\n\
    \        throw new Error(\"list is empty\");\n    }\n    return l[1 .. l.length];\n\
    }\n/*\nReturn all but the last element of the list.\n    >>> init([1L, 2L, 3L])\n\
    \    [1L, 2L]\n    >>> init([])\n    Traceback (most recent call last):\n    \
    \    ...\n    ValueError: list is empty\n    \n*/\nlong[] init(long[] l) \n{\n\
    \    if (l.length == 0) {\n        throw new Error(\"list is empty\");\n    }\n\
    \    return l[0 .. l.length - 1];\n}\n/*\nReturn the first N elements\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoxr0musu.d(87): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoxr0musu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164042
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    size_t l_len\
    \ = l.length;\n    long[] ret = new long[](l_len);\n    foreach (idx, el; l) {\n\
    \        ret[idx] = el + 1L;\n    }\n    return ret;\n}\n/*\nReturn array with\
    \ elements incremented by 1.\n    >>> incr_list([\"1\", \"2\", \"3\"])\n    [\"\
    2\", \"3\", \"4\"]\n    >>> incr_list([\"5\", \"3\", \"5\", \"2\", \"3\", \"3\"\
    , \"9\", \"0\", \"123\"])\n    [\"6\", \"4\", \"6\", \"3\", \"4\", \"4\", \"10\"\
    , \"1\", \"124\"]\n    \n*/\nstring[] incr_list(string[] l) \n{\n    size_t l_len\
    \ = l.length;\n    string[] ret = new string[](l_len);\n    foreach (idx, el;\
    \ l) {\n        ret[idx] = std.string.to!string(std.conv.to!long(el) + 1L);\n\
    \    }\n    return ret;\n}\n/*\nReturn array with elements incremented by 1.\n\
    \    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nunittest\n{\n\
    \    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3hi8u62t.d(33): Error: undefined identifier `string` in package
    `std`

    /tmp/tmp3hi8u62t.d(49): Error: `tmp3hi8u62t.incr_list` called with argument types
    `(void[])` matches both:

    /tmp/tmp3hi8u62t.d(11):     `tmp3hi8u62t.incr_list(long[] l)`

    and:

    /tmp/tmp3hi8u62t.d(28):     `tmp3hi8u62t.incr_list(string[] l)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3hi8u62t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164042
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] result\
    \ = new long[__encode_string(l).length];\n    foreach (i, e; l) \n    {\n    \
    \    result[i] = e + 1L;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_lycs9w5.d(13): Error: undefined identifier `__encode_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_lycs9w5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164042
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    size_t n =\
    \ l.length;\n    long[] result = new long[n];\n    for (size_t i = 0; i < n; i++)\
    \ \n    {\n        result[i] = l[i] + 1L;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164042
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret_l\
    \ = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        ret_l[i]\
    \ = l[i] + 1L;\n    }\n    return ret_l;\n}\n/*\nReturn array with elements incremented\
    \ by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list2(long[] l) \n{\n    long[] ret_l = new long[l.length];\n\
    \    size_t i = 0u;\n    for ( ; i < l.length; i++) {\n        ret_l[i] = l[i]\
    \ + 1L;\n    }\n    return ret_l;\n}\n/*\nReturn array with elements incremented\
    \ by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list3(long[] l) \n{\n    long[] ret_l = new long[l.length];\n\
    \    size_t i = 0u;\n    for ( ; i < l.length; i++) {\n        ret_l[i] = l[i]\
    \ + 1L;\n    }\n    return ret_l;\n}\n/*\nReturn array with elements incremented\
    \ by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L,\
    \ 3L, 5L, 2L\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5i9tm19n.d(53): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5i9tm19n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164042
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] result\
    \ = new long[l.length];\n    foreach (immutable i, immutable elem; l) \n    {\n\
    \        result[i] = elem + 1L;\n    }\n    return result;\n}\n/*\nReturn array\
    \ with elements incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L,\
    \ 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L,\
    \ 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n \
    \   long[] result = new long[l.length];\n    foreach (immutable i, immutable elem;\
    \ l) \n    {\n        result[i] = elem + 1L;\n    }\n    return result;\n}\n/*\n\
    Return array with elements incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n\
    \    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] result = new long[l.length];\n    foreach (immutable i, immutable\
    \ elem; l) \n    {\n        result[i] = elem + 1L;\n    }\n    return result;\n\
    }\n/*\nReturn array with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4\nunittest\n{\n    alias candidate = incr_list;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxai29fan.d(54): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxai29fan.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164042
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n  long[] ret =\
    \ new long[l.length];\n  foreach (index, e; l) {\n    ret[index] = e + 1L;\n \
    \ }\n  return ret;\n}\n/*\nReturn True if arr is a strictly ascending list.\n\
    \    \n    >>> is_ascending([])\n    True\n    >>> is_ascending([1L])\n    True\n\
    \    >>> is_ascending([1L, 2L, 3L])\n    True\n    >>> is_ascending([1L, 2L, 2L])\n\
    \    False\n    >>> is_ascending([1L, 2L, 1L])\n    False\n    >>> is_ascending([1L,\
    \ 5L, 2L, 3L, 1L])\n    False\n    >>> is_ascending([1L, 5L, 2L, 3L, 1L, 6L])\n\
    \    False\n    >>> is_ascending([1L, 5L, 5L, 6L, 1L, 6L])\n    False\n    >>>\
    \ is_ascending([1L, 1L, 5L, 5L, 6L, 6L])\n    False\n    >>> is_ascending([1L,\
    \ 2L, 3L, 4L, 5L, 6L])\n    True\n*/\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164042
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret\
    \ = new long[l.length];\n    foreach (i, elem; l) \n    {\n        ret[i] = elem\
    \ + 1L;\n    }\n    return ret;\n}\n/*\nReturn a list of tuples, where each tuple\
    \ contains the\ni-th element from each of the argument sequences.\n    >>> make_tuples([1L,\
    \ 2L, 3L], [4L, 5L, 6L])\n    [(1L, 4L), (2L, 5L), (3L, 6L)]\n    >>> make_tuples([7L,\
    \ 6L, 5L], [1L, 1L, 1L])\n    [(7L, 1L), (6L, 1L), (5L, 1L)]\n*/\nTuple!(long,\
    \ long)[] make_tuples(long[] l0, long[] l1) \n{\n    Tuple!(long, long)[] ret\
    \ = new Tuple!(long, long)[l0.length];\n    foreach (i, elem; l0) \n    {\n  \
    \      ret[i] = tuple(elem, l1[i]);\n    }\n    return ret;\n}\n/*\nReturn a list\
    \ of tuples, where each tuple contains the\ni-th element from each of the argument\
    \ sequences.\n    >>> make_tuples([1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L])\n\
    \    [(1L, 4L, 7L), (2L, 5L, 8L), (3L, 6L, 9L)]\n    >>> make_tuples([7L, 6L,\
    \ 5L], [1L, 1L, 1L], [2L, 3L, 4L])\n    [(7L, 1L, 2L), (6L, 1L, 3L), (5L, 1L,\
    \ 4L)]\n*/\nTuple!(long, long, long)[] make_tuples(long[] l0, long[] l1, long[]\
    \ l2) \n{\n    Tuple!(long, long, long)[] ret = new Tuple!(long, long, long)[l0\n\
    unittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_6mzogt0.d(48): Error: found `unittest` when expecting `]`

    /tmp/tmp_6mzogt0.d(49): Error: semicolon expected, not `{`

    /tmp/tmp_6mzogt0.d(56): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_6mzogt0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164042
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] retval;\n\
    \    for (int i = 0; i < l.length; i++)\n    {\n        retval ~= l[i] + 1L;\n\
    \    }\n    return retval;\n}\n/*\nReturn array with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] retval;\n    for (i in l)\n\
    \    {\n        retval ~= i + 1L;\n    }\n    return retval;\n}\n/*\nReturn array\
    \ with elements incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L,\
    \ 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L,\
    \ 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n \
    \   long[] retval;\n    foreach (i; l)\n    {\n        retval ~= i + 1L;\n   \
    \ }\n    return retval;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_9pexm5l.d(31): Error: found `)` when expecting `;` following statement

    /tmp/tmp_9pexm5l.d(35): Error: found `return` when expecting `;` following `for`
    condition

    /tmp/tmp_9pexm5l.d(35): Error: found `;` when expecting `)`

    /tmp/tmp_9pexm5l.d(36): Error: found `}` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_9pexm5l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164042
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ll\
    \ = new long[l.length];\n    foreach (i, e; l)\n        ll[i] = e + 1L;\n    return\
    \ ll;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164042
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    return  map!(a\
    \ => a + 1L)(l);\n}\n/*\nAdd element to array.\n    >>> arr_add_element([1L, 2L,\
    \ 3L], 7L)\n    [1L, 2L, 3L, 7L]\n    >>> arr_add_element([5L, 3L, 5L, 2L, 3L,\
    \ 3L, 9L, 0L, 123L], 0L)\n    [5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L, 0L]\n   \
    \ >>> arr_add_element([1L, 2L, 3L], 21L)\n    [1L, 2L, 3L, 21L]\n*/\nlong[] arr_add_element(long[]\
    \ l, long e)\n{\n    return l ~ [e];\n}\n/*\nAdd element to array.\n    >>> arr_add_element_2([1L,\
    \ 2L, 3L], 7L)\n    [1L, 2L, 3L, 7L]\n    >>> arr_add_element_2([5L, 3L, 5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L], 0L)\n    [5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L, 0L]\n\
    \    >>> arr_add_element_2([1L, 2L, 3L], 21L)\n    [1L, 2L, 3L, 21L]\n*/\nlong[]\
    \ arr_add_element_2(long[] l, long e)\n{\n    return l ~ [e];\n}\n/*\nFilter elements\
    \ with the given predicate.\n    >>> list_filter([1L, 2L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L, 10L], (long x) => x % 2L == 0L)\n    [2L, 4L, 6L, 8L, 10L]\n    >>>\
    \ list_filter([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], (long x) =>\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2lptmf1f.d(41): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2lptmf1f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164042
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        ret[i] = e + 1L;\n\
    \    }\n    return ret;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164042
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    return l.map!(i\
    \ => i + 1L)();\n}\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0nc36ubu.d(13): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0nc36ubu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164042
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    return l.map!(a\
    \ => a + 1L);\n}\n/*\nReturn tuple with its elements incremented by 1.\n    >>>\
    \ incr_tuple((1L, 2L, 3L))\n    (2L, 3L, 4L)\n    >>> incr_tuple((5L, 3L, 5L,\
    \ 2L, 3L, 3L, 9L, 0L, 123L))\n    (6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L)\n*/\n\
    Tuple!(long, long, long) incr_tuple(Tuple!(long, long, long) t) \n{\n    return\
    \ tuple(t[0] + 1L, t[1] + 1L, t[2] + 1L);\n}\n/*\nReturn tuple containing the\
    \ original array's elements.\n    >>> return_tuple([1L, 2L, 3L])\n    (1L, 2L,\
    \ 3L)\n    >>> return_tuple([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    (5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L)\n*/\nTuple!(long, long, long) return_tuple(long[]\
    \ l) \n{\n    return tuple(l[0], l[1], l[2]);\n}\n/*\nReturn tuple with its elements\
    \ reversed.\n    >>> reverse_tuple((1L, 2L, 3L))\n    (3L, 2L, 1L)\n    >>> reverse_tuple((5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L))\n    (123L, 0L, 9L, 3L, 3L, 2L, 5L, 3L, 5L)\n\
    */\nTuple!(long, long, long) reverse_tuple(Tuple!(long, long, long) t) \n{\n \
    \   return tuple(t[2], t[1], t[0]);\n}\n/*\nReturn the original array, but with\
    \ elements in reverse\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzrheiahz.d(48): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzrheiahz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164042
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] result;\n\
    \    long[] result_ref;\n    long i;\n    long[] b = new long[1];\n    long[]\
    \ b_ref;\n    long r_ref;\n    long r;\n    long i_ref;\n    long i_next;\n  \
    \  long i_next_ref;\n    long[] l_ref;\n    long[] l_next;\n    long[] l_next_ref;\n\
    \    result = new long[0];\n    result_ref = result;\n    i = 0L;\n    i_ref =\
    \ i;\n    l_ref = l;\n    l_next = l_ref;\n    l_next_ref = l_next;\n    for (i_next\
    \ = 0L; i_next < (l_next_ref).length; i_next++) {\n        i_next_ref = i_next;\n\
    \        b = new long[1];\n        b_ref = b;\n        r_ref = (l_next_ref)[i_next_ref];\n\
    \        r = r_ref;\n        (b_ref)[0L] = r + 1L;\n        result = append(result_ref,\
    \ b_ref);\n        result_ref = result;\n    }\n    return result_ref;\n}\n/*\n\
    Return array with elements incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n\
    \    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nunittest\n{\n    alias\
    \ candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqdv78h0i.d(40): Error: undefined identifier `append`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqdv78h0i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164042
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    return l.map!(a\
    \ => a + 1)();\n}\n/*\nReturn the first element of array.\n    >>> first([1L,\
    \ 2L, 3L])\n    1L\n    >>> first([5L, 3L, 2L, 4L, 3L, 5L, 2L, 123L])\n    5L\n\
    */\nlong first(long[] l) \n{\n    return l[0];\n}\n/*\nReturn the last element\
    \ of array.\n    >>> last([1L, 2L, 3L])\n    3L\n    >>> last([5L, 3L, 2L, 4L,\
    \ 3L, 5L, 2L, 123L])\n    123L\n*/\nlong last(long[] l) \n{\n    return l[$ -\
    \ 1];\n}\n/*\nReturn the maximum element of array.\n    >>> max([1L, 2L, 3L])\n\
    \    3L\n    >>> max([5L, 3L, 2L, 4L, 3L, 5L, 2L, 123L])\n    123L\n*/\nlong max(long[]\
    \ l) \n{\n    return max(l);\n}\n/*\nReturn the minimum element of array.\n  \
    \  >>> min([1L, 2L, 3L])\n    1L\n    >>> min([5L, 3L, 2L, 4L, 3L, 5L, 2L, 123L])\n\
    \    2L\n*/\nlong min(long[] l) \n{\n    return min(l);\n}\n/*\nReturn the sum\
    \ of array.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, 2L, 4L, 3L,\
    \ 5L, 2L, 123L])\n    154L\n*/\nlong sum(long[] l) \n{\n    return reduce!((a,\
    \ b) => a + b)(0L, l);\n}\n/*\nReturn the product of array.\n    >>> product([1L,\
    \ 2L, 3L])\n    6L\n    >>> product([5L, 3L, 2L, 4L, 3L, 5L, 2L, 123L])\n    2293760L\n\
    */\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx3ngl3u8.d(13): Error: no property `map` for type `long[]`

    /tmp/tmpx3ngl3u8.d(68): Error: template instance `reduce!((a, b) => a + b)` template
    `reduce` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx3ngl3u8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164042
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] result\
    \ = new long[l.length];\n    for (long i = 0L; i < l.length; i++) \n    {\n  \
    \      result[i] = l[i] + 1L;\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164043
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    return map!(a\
    \ => a + 1L)(l);\n}\n/*\nReturn a sorted array, copying only if needed.\n    >>>\
    \ sorted_list([])\n    []\n    >>> sorted_list([1L])\n    [1L]\n    >>> sorted_list([1L,\
    \ 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sorted_list([3L, 2L, 1L])\n    [1L, 2L,\
    \ 3L]\n    >>> sorted_list([1L, 1L, 1L])\n    [1L, 1L, 1L]\n    >>> sorted_list([3L,\
    \ 1L, 2L])\n    [1L, 2L, 3L]\n*/\nlong[] sorted_list(long[] l)\n{\n    return\
    \ l.sort(std.algorithm.sort.MergeSort());\n}\n/*\nReturn the only element in the\
    \ array. Fails if array contains more than one element.\n    >>> only_el([42L])\n\
    \    42L\n    >>> only_el([])\n    Traceback (most recent call last):\n      File\
    \ \"<stdin>\", line 1, in <module>\n    AssertionError\n    >>> only_el([42L,\
    \ 43L])\n    Traceback (most recent call last):\n      File \"<stdin>\", line\
    \ 1, in <module>\n    AssertionError\n*/\nlong only_el(long[] l)\n{\n    assert(l.length\
    \ == 1L);\n    return l[0L];\n}\n/*\n        >>> separate_list([], [])\n     \
    \   ([], [])\n        >>> separate_list([1L], [2L])\n        ([1L], [2L])\n  \
    \      >>> separate_list([1L, 2L], [3L, 4L])\n        ([1L, 2L], [3L, 4L])\n \
    \       >>> separate_list([1L, 2L, 3L], [3L, 4L, 5L])\n        ([1L, 2L, 3L],\
    \ [3L, 4L, 5L])\n*/\nTuple!(long[], long[]) separate_list(long[] a, long[] b)\
    \ \n\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5ce6xapg.d(64): Error: semicolon expected following function declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5ce6xapg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164042
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n    pure nothrow\
    \ @safe \n{\n    return l.map!((a) => a + 1);\n}\nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe_fchrta.d(14): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe_fchrta.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164042
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret\
    \ = new long[l.length];\n    foreach (i, v; l) {\n        ret[i] = v + 1L;\n \
    \   }\n    return ret;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n \
    \   assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L,\
    \ 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164043
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n        res[i] = e + 1L;\n   \
    \ return res;\n}\n/*\nReturn sum of list items.\n    >>> list_sum([1L, 2L, 3L])\n\
    \    6L\n    >>> list_sum([])\n    0L\n    >>> list_sum([3L, 5L, 7L, 9L])\n  \
    \  24L\n    >>> list_sum([5L, -5L, 10L, -10L])\n    0L\n*/\nlong list_sum(long[]\
    \ l) \n{\n    long sum = 0L;\n    foreach (i, e; l)\n        sum += e;\n    return\
    \ sum;\n}\n/*\nreturn true if array contains a given value\n    >>> list_contains([1L,\
    \ 2L, 3L], 1L)\n    true\n    >>> list_contains([1L, 2L, 3L], 10L)\n    false\n\
    \    >>> list_contains([], 10L)\n    false\n*/\nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164043
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] l2\
    \ = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n    {\n     \
    \   l2[i] = l[i] + 1L;\n    }\n    return l2;\n}\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_tuple((1L, 2L, 3L))\n    (2L, 3L, 4L)\n    >>>\
    \ incr_tuple((5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L))\n    (6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L)\n*/\nTuple!(long[]) incr_tuple(Tuple!(long[]) t) \n{\n  \
    \  long[] t2 = new long[t.length];\n    for (int i = 0; i < t.length; i++)\n \
    \   {\n        t2[i] = t[i] + 1L;\n    }\n    return t2;\n}\n/*\nReturn array\
    \ with elements incremented by 1.\n    >>> incr_set([1L, 2L, 3L])\n    [2L, 3L,\
    \ 4L]\n    >>> incr_set([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L,\
    \ 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n*/\nlong[] incr_set(long[] s) \n{\n    long[]\
    \ s2 = new long[s.length];\n    for (int i = 0; i < s.length; i++)\n    {\n  \
    \      s2[i] = s[i] + 1L;\n    }\n    return s2;\n}\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_darray([1L, 2L, 3L])\n    [2L, 3L, 4L]\n   \
    \ >>> incr_darray([5L, 3L, 5L, 2L, 3L, 3L\nunittest\n{\n    alias candidate =\
    \ incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L,\
    \ 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpypwtuitp.d(52): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpypwtuitp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164042
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] result\
    \ = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n    {\n     \
    \   result[i] = l[i] + 1L;\n    }\n    return result;\n}\n/*\nReturn absolute\
    \ values of numbers.\n    >>> absolute([1, 2, -3, -4])\n    [1, 2, 3, 4]\n   \
    \ >>> absolute([12, -13, -14, -15])\n    [12, 13, 14, 15]\n    \n*/\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164043
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    int n = l.length;\n\
    \    long[] result = new long[n];\n    for (int i = 0; i < n; i++)\n    {\n  \
    \      result[i] = l[i] + 1L;\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuroaarpu.d(13): Error: cannot implicitly convert expression `l.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuroaarpu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164042
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n  long[] out;\n\
    \  foreach (item; l)\n  {\n    auto a = item + 1;\n    out ~= a;\n  }\n  return\
    \ out;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnq_qus4u.d(13): Error: no identifier for declarator `long[]`

    /tmp/tmpnq_qus4u.d(13): Error: found `out` instead of statement

    /tmp/tmpnq_qus4u.d(17): Error: found `out` instead of statement

    /tmp/tmpnq_qus4u.d(19): Error: expression expected, not `out`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnq_qus4u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164042
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] result;\n\
    \    int i;\n    result = new long[];\n    i = 0;\n    for (i = 0; i < l.length;\
    \ i = i + 1) {\n        result ~= l[i] + 1L;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp21l1iph5.d(15): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp21l1iph5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164042
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    foreach (i,\
    \ ref v; l) \n    {\n        v++;\n    }\n    return l;\n}\nunittest\n{\n    alias\
    \ candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164043
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret;\n\
    \    int i;\n    ret.length = l.length;\n    foreach (i, item; l) \n    {\n  \
    \      ret[i] = item + 1L;\n    }\n    return ret;\n}\n/*\nReturn the minimum\
    \ of two numbers.\n    >>> min(1L, 2L)\n    1L\n    >>> min(1L, -1L)\n    -1L\n\
    \    >>> min(123L, -2345L)\n    -2345L\n    >>> min(0L, 0L)\n    0L\n*/\nlong\
    \ min(long x, long y) \n{\n    return x < y ? x : y;\n}\n/*\nReturn the minimum\
    \ of three numbers.\n    >>> min3(1L, 2L, 3L)\n    1L\n    >>> min3(3L, 3L, 3L)\n\
    \    3L\n    >>> min3(3L, 1L, 1L)\n    1L\n    >>> min3(1L, -1L, 1L)\n    -1L\n\
    \    >>> min3(123L, -2345L, 321L)\n    -2345L\n    >>> min3(0L, 0L, 0L)\n    0L\n\
    */\nlong min3(long x, long y, long z) \n{\n    return x < y ? x < z ? x : z :\
    \ y < z ? y : z;\n}\n/*\nReturn the maximum of two numbers.\n    >>> max(1L, 2L)\n\
    \    2L\n    >>> max(1L, -1L)\n    1L\n    >>> max(123L, -2345L)\n    123L\n \
    \   >>> max(0L, 0L)\n    0L\n*/\nlong max(long x, long y) \n{\n    return x >\
    \ y ? x : y;\n}\n/*\nReturn the maximum of three numbers.\n    >>> max3(1L, 2L,\
    \ 3L)\n    3L\n    >>> max3(3L, 3L, 3L)\n    3L\n    >>> max3(3L, 1L, 1L)\n  \
    \  3L\n    >>> max3(\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6w7covgk.d(71): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6w7covgk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164042
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    auto r = appender!(long[])();\n\
    \    foreach (x; l) {\n        r.put(x + 1L);\n    }\n    return r.data;\n}\n\
    /*\nReturn array with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n\
    \    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6,\
    \ 3, 4, 4, 10, 1, 124]\n    \n*/\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz2h6db1i.d(13): Error: template instance `appender!(long[])` template
    `appender` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz2h6db1i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164042
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    l.map!(a =>\
    \ a + 1L);\n    return l;\n}\n/*\nReturn array with elements incremented by 1.\n\
    \    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nunittest\n{\n\
    \    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppndazxp6.d(13): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppndazxp6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164042
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] result\
    \ = new long[l.length];\n    foreach (i,v; l)\n    {\n        result[i] = v +\
    \ 1L;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164043
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n     return map!((a)\
    \ => a + 1)(l);\n}\n/*\nReturn a array with all items from a1 and a2 added.\n\
    \    >>> merge_lists([1L, 2L, 3L], [4L, 5L, 6L])\n    [1L, 2L, 3L, 4L, 5L, 6L]\n\
    \    >>> merge_lists([5L, 7L, 4L, -4L, 6L, 0L], [3L, 1L, 5L, -5L, 3L, 6L, 2L,\
    \ 5L])\n    [5L, 7L, 4L, -4L, 6L, 0L, 3L, 1L, 5L, -5L, 3L, 6L, 2L, 5L]\n    \n\
    */\nlong[] merge_lists(long[] a1, long[] a2) \n{\n    auto ret = appender!(long[])();\n\
    \    foreach (i; a1) ret.put(i);\n    foreach (i; a2) ret.put(i);\n    return\
    \ ret.data;\n}\n/*\nGet the width of a image.\n    >>> get_width(image_load(\"\
    img.png\"))\n    123\n    \n*/\nlong get_width(Image img) \n{\n    return img.getWidth();\n\
    }\n/*\nGet the height of a image.\n    >>> get_height(image_load(\"img.png\"))\n\
    \    123\n    \n*/\nlong get_height(Image img) \n{\n    return img.getHeight();\n\
    }\n/*\nCreate an integer tuple.\n    >>> create_tuple(1L, 2L)\n    Tuple!(long,long)(1L,\
    \ 2L)\n    \n*/\nTuple!(long,long) create_tuple(long x, long y) \n{\n    return\
    \ tuple(x, y);\n}\n/*\nCreate an integer pair.\n    >>> create_pair(1L, 2L)\n\
    \    Pair!(long,long)(1L, 2L)\n    \n*/\nPair!(long,long) create_pair(long x,\
    \ long y) \n{\n    return pair(x\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8ojpctds.d(69): Error: found `unittest` when expecting `,`

    /tmp/tmp8ojpctds.d(77): Error: found `void` when expecting `,`

    /tmp/tmp8ojpctds.d(77): Error: found `{` when expecting `,`

    /tmp/tmp8ojpctds.d(77): Error: expression expected, not `}`

    /tmp/tmp8ojpctds.d(77): Error: found `End of File` when expecting `,`

    /tmp/tmp8ojpctds.d(77): Error: found `End of File` when expecting `)`

    /tmp/tmp8ojpctds.d(77): Error: found `End of File` when expecting `;` following
    `return` statement

    /tmp/tmp8ojpctds.d(77): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8ojpctds.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164042
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret\
    \ = new long[l.length];\n    foreach (i, x; l) {\n        ret[i] = x + 1L;\n \
    \   }\n    return ret;\n}\n/*\nReturn list with elements incremented by 1.\n \
    \   >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\ntypeof(null) incr_list(long[] l) \n{\n    typeof(null) ret = new typeof(null)[l.length];\n\
    \    foreach (i, x; l) {\n        ret[i] = x + 1L;\n    }\n    return ret;\n}\n\
    /*\nReturn cstring with all characters incremented by 1.\n    >>> incr_str(\"\
    Hello, world!\")\n    \"Ifmmp-!xpsme\"\n    \n*/\ncstring incr_str(cstring s)\
    \ \n{\n    return to!cstring(incr_list(to!(long[])s));\n}\n/*\nReturn string with\
    \ all characters incremented by 1.\n    >>> incr_str(\"Hello, world!\")\n    \"\
    Ifmmp-!xpsme\"\n    \n*/\nstring incr_str(string s) \n{\n    return to!string(incr_list(to!(long[])s));\n\
    }\n/*\nReturn tuple with all integer elements incremented by 1.\n    >>> incr_tuple((1L,\
    \ 2L, 3L))\n    (2L, 3L, 4L)\n    >>> incr_tuple((5L, 3L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L))\n    (6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L)\n    \n*/\nTuple!(long[])\
    \ incr\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl5lh9uj9.d(43): Error: found `s` when expecting `,`

    /tmp/tmpl5lh9uj9.d(53): Error: found `s` when expecting `,`

    /tmp/tmpl5lh9uj9.d(64): Error: semicolon expected, not `unittest`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl5lh9uj9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164042
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    auto result\
    \ = new long[l.length];\n    foreach (i, ref x; l) \n    {\n        result[i]\
    \ = x + 1L;\n    }\n    return result;\n}\n/*\nReturn array with elements decremented\
    \ by 1.\n    >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>> decr_list([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L, 2L, 8L, -1L, 122L]\n\
    */\nlong[] decr_list(long[] l) \n{\n    auto result = new long[l.length];\n  \
    \  foreach (i, ref x; l) \n    {\n        result[i] = x - 1L;\n    }\n    return\
    \ result;\n}\n/*\nReturn a tuple with the minimum and maximum of a list.\n   \
    \ >>> min_max([1L, 2L, 3L])\n    (1L, 3L)\n    >>> min_max([5L, 3L, 5L, 2L, 3L,\
    \ 3L, 9L, 0L, 123L])\n    (0L, 123L)\n*/\n@safe pure nothrow unittest \n{\n  \
    \  assert(min_max([1L, 2L, 3L]) == tuple(1L, 3L));\n    assert(min_max([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == tuple(0L, 123L));\n}\n@safe pure nothrow unittest\
    \ \n{\n    assert(min_max([1L, 2L, 3L]) == tuple(1L, 3L));\n    assert(min_max([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == tuple(0L, 123L));\n}\n@safe pure nothrow\
    \ unittest \n{\n    assert(min_max([1L, 2L, 3L]) ==\nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa9hthsby.d(56): Error: expression expected, not `unittest`

    /tmp/tmpa9hthsby.d(57): Error: found `{` when expecting `)`

    /tmp/tmpa9hthsby.d(58): Error: found `alias` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa9hthsby.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164042
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    return map!(i\
    \ => i + 1L)(l);\n}\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqjg_65og.d(13): Error: template instance `map!((i) => i + 1L)`
    template `map` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqjg_65og.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164043
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    size_t len\
    \ = l.length;\n    long[] res = new long[len];\n    foreach (index, elem; l) \n\
    \    {\n        res[index] = elem + 1L;\n    }\n    return res;\n}\n/*\nReturn\
    \ string with changed case.\n    >>> to_upper(\"aaAA\")\n    \"AAAA\"\n    >>>\
    \ to_upper(\"test\")\n    \"TEST\"\n*/\nstring to_upper(string s) \n{\n    size_t\
    \ len = s.length;\n    auto res = new char[len];\n    foreach (index, elem; s)\
    \ \n    {\n        if (isUpper(elem)) \n        {\n            res[index] = toLower(elem);\n\
    \        }\n        else if (isLower(elem)) \n        {\n            res[index]\
    \ = toUpper(elem);\n        }\n        else \n        {\n            res[index]\
    \ = elem;\n        }\n    }\n    return res.idup;\n}\n/*\nExtract numbers from\
    \ string and return them as array.\n    >>> nums_from_string(\"123\")\n    [1L,\
    \ 2L, 3L]\n    >>> nums_from_string(\"123, abc\")\n    [1L, 2L, 3L]\n    >>> nums_from_string(\"\
    1 2 3\")\n    [1L, 2L, 3L]\n    >>> nums_from_string(\"\")\n    []\n*/\nlong[]\
    \ nums_from_string(string s) \n{\n    auto res = new long[];\n    foreach (c;\
    \ s) \n    {\n        if (isdigit(c)) \n        {\n            res ~= c.to!long;\n\
    \        }\n    }\n    return res;\n}\n/*\nCheck if array has element with value\
    \ < 5.\n    >>> has_small([1L, 3L, 4L, 5L, 7L])\n    true\n    >>> has_small([5L,\
    \ 7L, 12L])\n    false\n*/\nunittest\n{\n    alias candidate = incr_list;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptqhlk0kj.d(34): Error: undefined identifier `isUpper`

    /tmp/tmptqhlk0kj.d(36): Error: undefined identifier `toLower`

    /tmp/tmptqhlk0kj.d(38): Error: undefined identifier `isLower`

    /tmp/tmptqhlk0kj.d(40): Error: undefined identifier `toUpper`, did you mean function
    `to_upper`?

    /tmp/tmptqhlk0kj.d(62): Error: new can only create structs, dynamic arrays or
    class objects, not `long[]`''s

    /tmp/tmptqhlk0kj.d(65): Error: undefined identifier `isdigit`

    /tmp/tmptqhlk0kj.d(67): Error: no property `to` for type `immutable(char)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptqhlk0kj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164043
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n    return l.map!(a\
    \ => a + 1)();\n    \n    \n    \n/*\n    Calculate the maximum difference between\
    \ two consecutive elements in the array.\n    >>> max_diff([1L, 2L, 3L])\n   \
    \ 1L\n    >>> max_diff([-1L, -2L, -3L])\n    1L\n    >>> max_diff([5L, 3L, 5L,\
    \ 2L, 3L, 3L, 9L, 0L, 123L])\n    7L\n    \n*/\nlong max_diff(long[] l) \n   \
    \ return l.zip(l.dropOne).map!(a => a[0] - a[1]).map!(a => abs(a)).max;\n    \n\
    \    \n/*\n    Return array with items in reverse order.\n    >>> reverse_list([1L,\
    \ 2L, 3L])\n    [3L, 2L, 1L]\n    >>> reverse_list([5L, 3L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L])\n    [123L, 0L, 9L, 3L, 3L, 2L, 5L, 3L, 5L]\n*/\nlong[] reverse_list(long[]\
    \ l) \n    return l.retro;\n    \n    \n/*\n    Return the last element of the\
    \ array.\n    >>> get_last([1L, 2L, 3L])\n    3L\n    >>> get_last([5L, 3L, 5L,\
    \ 2L, 3L, 3L, 9L, 0L, 123L])\n    123L\n*/\nlong get_last(long[] l) \n    return\
    \ l.back;\n    \n    \n/*\n    Return array with last element removed.\n    >>>\
    \ drop_last([1L, 2L, 3L])\n    [1L, 2L]\n    >>> drop_last([5L, 3L, 5L, 2L, 3L,\
    \ 3L, 9L, 0L, 123L])\n    [5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L]\n*/\nlong[] drop_last(long[]\
    \ l) \n   \nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuzbw01js.d(12): Error: semicolon expected following function declaration

    /tmp/tmpuzbw01js.d(12): Error: function declaration without return type. (Note
    that constructors are always named `this`)

    /tmp/tmpuzbw01js.d(12): Error: no identifier for declarator `l.map!((a) => a +
    1)()`

    /tmp/tmpuzbw01js.d(27): Error: semicolon expected following function declaration

    /tmp/tmpuzbw01js.d(27): Error: function declaration without return type. (Note
    that constructors are always named `this`)

    /tmp/tmpuzbw01js.d(27): Error: no identifier for declarator `l.zip(l.dropOne)`

    /tmp/tmpuzbw01js.d(27): Error: semicolon expected following function declaration

    /tmp/tmpuzbw01js.d(27): Error: no identifier for declarator `.map!((a) => a[0]
    - a[1]).map!((a) => abs(a)).max`

    /tmp/tmpuzbw01js.d(38): Error: semicolon expected following function declaration

    /tmp/tmpuzbw01js.d(38): Error: no identifier for declarator `l.retro`

    /tmp/tmpuzbw01js.d(49): Error: semicolon expected following function declaration

    /tmp/tmpuzbw01js.d(49): Error'
  stdout: ''
  timestamp: 1660164042
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    import std.conv;\n\
    \    long[] res = new long[l.length];\n    foreach(i,e;l)\n        res[i] = e\
    \ + 1L;\n    return res;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164043
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res;\n\
    \    foreach (item; l)\n    {\n        item += 1L;\n        res ~= item;\n   \
    \ }\n    return res;\n}\n/*\nReturn array with elements decremented by 1.\n  \
    \  >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>> decr_list([5L, 3L, 5L,\
    \ 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L, 2L, 8L, -1L, 122L]\n*/\n\
    long[] decr_list(long[] l) \n{\n    long[] res;\n    foreach (item; l)\n    {\n\
    \        item -= 1L;\n        res ~= item;\n    }\n    return res;\n}\n/*\nRemove\
    \ all occurrences of element in array.\n    >>> remove_all([1L, 1L, 1L, 1L, 2L,\
    \ 3L, 4L, 5L], 1L)\n    [2L, 3L, 4L, 5L]\n    >>> remove_all([1L, 2L, 3L, 4L,\
    \ 5L], 2L)\n    [1L, 3L, 4L, 5L]\n    >>> remove_all([1L, 2L, 3L, 4L, 5L], 9L)\n\
    \    [1L, 2L, 3L, 4L, 5L]\n    >>> remove_all([2L, 3L, 4L, 2L, 3L, 4L, 5L, 2L,\
    \ 3L, 4L], 2L)\n    [3L, 4L, 3L, 4L, 5L, 3L, 4L]\n*/\nlong[] remove_all(long[]\
    \ array, long x) \n{\n    long[] res;\n    foreach (item; array)\n    {\n    \
    \    if (item != x)\n        {\n            res ~= item;\n        }\n    }\n \
    \   return res;\n}\n/*\nReturn array with elements reversed.\n    >>> rev_list([1L,\
    \ 2L, 3L])\n   \nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpptmma206.d(61): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpptmma206.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164042
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n  long[] result\
    \ = new long[l.length];\n  foreach (index, elem; l) \n  {\n    result[index] =\
    \ elem + 1L;\n  }\n  return result;\n}\n/*\nConvert integer list to char list.\n\
    \    >>> int_to_chars([66L, 97L, 116L, 111L, 108L, 105L, 102L, 101L, 112L,\n \
    \   ...               104L, 111L, 110L, 105L, 97L, 108L, 116L, 121L, 111L,\n \
    \   ...               117L, 32L, 97L, 108L, 108L, 32L, 105L, 110L, 32, 100L,\n\
    \    ...               101L, 102L, 105L, 110L, 105L, 116L, 101L, 100L, 32, 98L,\n\
    \    ...               121L, 32, 100L, 105L, 102L, 102L, 101L, 114L, 101L, 110L,\n\
    \    ...               99L, 101L, 32, 111L, 102L, 32, 116L, 104L, 101L, 32, 115L,\n\
    \    ...               115L, 108L, 32, 102L, 108L, 97L, 103L, 33L])\n    \"Batouluifephontialtoyou\
    \ all in defined by difference of the ssl flag!\"\n    \n*/\nstring int_to_chars(long[]\
    \ l) \n{\n  string result = \"\";\n  foreach (index, elem; l) \n  {\n    result\
    \ ~= char(elem);\n  }\n  return result;\n}\n/*\nReturn number of elements in list.\n\
    \    >>> int_len([1L, 2L, 3L])\n    3\n    >>> int_len([5L, 3L, 5L, 2L, 3L, 3L,\
    \ 9L, 0L, 123L])\n    9\n    \n*/\nlong int_len(long[] l) \n{\n  return l.length;\n\
    }\n/*\nCalculate sum of all elements.\n    >>> int_sum([1L, 2L, 3L])\n    6\n\
    \    >>> int_sum([5L,\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpko4cyf1o.d(53): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpko4cyf1o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164042
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret\
    \ = new long[l.length];\n    size_t i = 0UL;\n    for (; i < l.length; i++) {\n\
    \        ret[i] = l[i] + 1L;\n    }\n    return ret;\n}\nunittest\n{\n    alias\
    \ candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164043
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret\
    \ = new long[l.length];\n    foreach (idx, i; l) {\n        ret[idx] = i + 1L;\n\
    \    }\n    return ret;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164043
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret\
    \ = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n    {\n    \
    \    ret[i] = l[i] + 1L;\n    }\n    return ret;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list(list([1L, 2L, 3L]))\n    [2L, 3L, 4L]\n\
    \    >>> incr_list(list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]))\n    [6L, 4L,\
    \ 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlist<long> incr_list(list<long> l)\
    \ \n{\n    list<long> ret = new list<long>();\n    for (int i = 0; i < l.length;\
    \ i++) \n    {\n        ret.append(l[i] + 1L);\n    }\n    return ret;\n}\n/*\n\
    Return tuple with elements incremented by 1.\n    >>> incr_list((1L, 2L, 3L))\n\
    \    (2L, 3L, 4L)\n    >>> incr_list((5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L))\n\
    \    (6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L)\n    \n*/\ntuple<long, long, long>\
    \ incr_list(tuple<long, long, long> l) \n{\n    tuple<long, long, long> ret =\
    \ new tuple<long, long, long>();\n    for (int i = 0; i < l.length; i++) \n  \
    \  {\n        ret.append(l[i] + 1L);\n    }\n    return ret;\n}\n/*\nReturn a[0]\
    \ + a[1] + ...\n    >>> sumlist([1L, 2L, 3L])\n    6L\n    >>> sumlist([1L, 2L,\
    \ 3L, 4L\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9vop5q06.d(28): Error: no identifier for declarator `list`

    /tmp/tmp9vop5q06.d(28): Error: declaration expected, not `<`

    /tmp/tmp9vop5q06.d(31): Error: declaration expected, not `for`

    /tmp/tmp9vop5q06.d(31): Error: no identifier for declarator `i`

    /tmp/tmp9vop5q06.d(31): Error: declaration expected, not `<`

    /tmp/tmp9vop5q06.d(31): Error: no identifier for declarator `i`

    /tmp/tmp9vop5q06.d(31): Error: declaration expected, not `++`

    /tmp/tmp9vop5q06.d(34): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9vop5q06.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164043
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] l2\
    \ = new long[l.length];\n    foreach (immutable i, immutable e; l) \n    {\n \
    \       l2[i] = e + 1L;\n    }\n    return l2;\n}\n/*\nReturn sum of array elements.\n\
    \    >>> sum_list([1L, 2L, 3L])\n    6L\n    >>> sum_list([5L, 3L, 5L, 2L, 3L,\
    \ 3L, 9L, 0L, 123L])\n    267L\n    \n*/\nlong sum_list(long[] l) \n{\n    long\
    \ sum = 0L;\n    foreach (immutable e; l) \n    {\n        sum += e;\n    }\n\
    \    return sum;\n}\n/*\nReturn sum of array elements.\n    >>> sum_list([1L,\
    \ 2L, 3L])\n    6L\n    >>> sum_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    267L\n    \n*/\nlong sum_list(int[] l) \n{\n    long sum = 0L;\n    foreach\
    \ (immutable e; l) \n    {\n        sum += e;\n    }\n    return sum;\n}\n/*\n\
    Return sum of array elements.\n    >>> sum_list([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    267L\n    \n*/\nlong sum_list(short[]\
    \ l) \n{\n    long sum = 0L;\n    foreach (immutable e; l) \n    {\n        sum\
    \ += e;\n    }\n    return sum;\n}\n/*\nReturn sum of array elements.\n    >>>\
    \ sum_list([1L, 2L, 3L])\n    6L\n    >>> sum_list([5L, 3L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L])\n    267L\n    \n*/\nlong sum_list(char[] l) \n{\n\nunittest\n{\n\
    \    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnon5waal.d(82): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnon5waal.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164043
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    int i = 0;\n\
    \    l.length = l.length + 1;\n    l[l.length - 1] = 0;\n    while (i < l.length)\n\
    \    {\n        l[i] += 1;\n        i += 1;\n    }\n    l.length = l.length -\
    \ 1;\n    return l;\n}\n/*\nReturn tuple with new element appended to it.\n  \
    \  >>> incr_tuple((1L, 2L, 3L))\n    (1L, 2L, 3L, 4L)\n    >>> incr_tuple((5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L))\n    (5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 124L)\n*/\nTuple!(long[]) incr_tuple(Tuple!(long[]) t) \n{\n    long[] l = t[0];\n\
    \    l.length = l.length + 1;\n    l[l.length - 1] = 0;\n    int i = 0;\n    while\
    \ (i < l.length)\n    {\n        l[i] += 1;\n        i += 1;\n    }\n    l.length\
    \ = l.length - 1;\n    t[0] = l;\n    return t;\n}\n/*\nReturn set with new element\
    \ added to it.\n    >>> incr_set({1L, 2L, 3L})\n    {1L, 2L, 3L, 4L}\n    >>>\
    \ incr_set({5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L})\n    {0L, 123L, 2L, 3L, 4L,\
    \ 5L, 9L, 10L}\n*/\nSet!(long) incr_set(Set!(long) s) \n{\n    long[] l = s.array;\n\
    \    l.length = l.length + 1;\n    l[l.length - 1] = 0;\n    int i = 0;\n    while\
    \ (i < l.length)\n    {\nunittest\n{\n    alias candidate = incr_list;\n\n   \
    \ assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L,\
    \ 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp78ur1ke_.d(61): Error: found `unittest` instead of statement

    /tmp/tmp78ur1ke_.d(69): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp78ur1ke_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164043
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i,e; l)\n        res[i] = e + 1L;\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164043
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    auto result\
    \ = new long[l.length];\n    foreach (i, ref v; l) \n    {\n        result[i]\
    \ = v + 1L;\n    }\n    return result;\n}\n/*\nReturn array with elements incremented\
    \ by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nTuple!(long[], long[]) incr_array(long[] l) \n{\n    auto a = new long[l.length];\n\
    \    auto b = new long[l.length];\n    foreach (i, ref v; l) \n    {\n       \
    \ a[i] = v + 1L;\n        b[i] = v + 2L;\n    }\n    return tuple(a, b);\n}\n\
    /*\nGenerate a random array of numbers\n    \n    >>> randomArray(3L)\n    [1L,\
    \ 2L, 1L]\n    >>> randomArray(8L)\n    [0L, 1L, 2L, 1L, 0L, 1L, 2L, 2L]\n   \
    \ >>> randomArray(24L)\n    [0L, 1L, 1L, 2L, 1L, 2L, 2L, 2L, 0L, 1L, 2L, 2L, 1L,\
    \ 0L, 2L, 2L, 1L, 0L, 1L, 2L, 2L, 2L, 1L, 2L]\n    \n*/\nlong[] randomArray(long\
    \ n) \n{\n    auto result = new long[n];\n    foreach (i, ref x; result) \n  \
    \  {\n        x = uniform(0L, 3L);\n    }\n    return result;\n}\n/*\nGenerate\
    \ a random array of numbers\n    \n    >>> randomArray(3L)\n    [1L, 2L, 1L\n\
    unittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyiuuxkq2.d(59): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyiuuxkq2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164042
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, item; l) \n    {\n        res[i] = item\
    \ + 1L;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164043
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n\treturn map!((a)\
    \ => a + 1)(l);\n}\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnw0_7q6m.d(13): Error: template instance `map!((a) => a + 1)` template
    `map` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnw0_7q6m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164043
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] p =\
    \ new long[l.length];\n    foreach (i,e;l)\n    {\n        p[i] = e + 1L;\n  \
    \  }\n    return p;\n}\n/*\nReturn tuple with elements incremented by 1.\n   \
    \ >>> incr_tuple((1L, 2L, 3L))\n    (2L, 3L, 4L)\n    >>> incr_tuple((5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L))\n    (6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L)\n\
    \    \n*/\ntuple!(long[]) incr_tuple(tuple!(long[]) t) \n{\n    long[] p = new\
    \ long[t.length];\n    foreach (i,e;t)\n    {\n        p[i] = e + 1L;\n    }\n\
    \    return tuple(p);\n}\n/*\nReturn array with elements incremented by 1.\n \
    \   >>> incr_array(array(1L, 2L, 3L))\n    [2L, 3L, 4L]\n    >>> incr_array(array(5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L))\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_array(long[] l) \n{\n    long[] p = new long[l.length];\n\
    \    foreach (i,e;l)\n    {\n        p[i] = e + 1L;\n    }\n    return p;\n}\n\
    /*\nReturn array with first element incremented by 1.\n    >>> incr_first([1L,\
    \ 2L, 3L])\n    [2L, 2L, 3L]\n    >>> incr_first([5L, 3L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L])\n    [6L, 3L, 5L, 2L, 3L\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeb6cvjcl.d(54): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeb6cvjcl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164043
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] r =\
    \ new long[](l.length);\n    foreach (i, e; l) \n    {\n        r[i] = e + 1L;\n\
    \    }\n    return r;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n  \
    \  assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L,\
    \ 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164043
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    for (size_t i = 0; i < l.length; i++)\n    {\n  \
    \      res[i] = l[i] + 1L;\n    }\n    return res;\n}\n/*\nReturn tuple, which\
    \ first element is all elements of t,\n  incremented by 1, and second element\
    \ is t.\n    >>> incr_tuple((1L, 2L, 3L))\n    ([2L, 3L, 4L], (1L, 2L, 3L))\n\
    \    >>> incr_tuple((5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L))\n    ([6L, 4L, 6L,\
    \ 3L, 4L, 4L, 10L, 1L, 124L], (5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L))\n    \n\
    */\nTuple!(long[], long[]) incr_tuple(long[] t) \n{\n    return tuple(incr_list(t),\
    \ t);\n}\n/*\nReturn tuple with first element equal to array length,\n  and second\
    \ element equal to array itself.\n    >>> length_list([1L, 2L, 3L])\n    (3L,\
    \ [1L, 2L, 3L])\n    >>> length_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    (9L, [5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    \n*/\nTuple!(long, long[])\
    \ length_list(long[] l) \n{\n    return tuple(l.length, l);\n}\n/*\nReturn length\
    \ of the tuple, and tuple itself.\n    >>> length_tuple((1L, 2L, 3L))\n    (3L,\
    \ (1L, 2L, 3L))\n    >>> length_tuple((5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L))\n\
    \   \nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzyrlosz7.d(46): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzyrlosz7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164043
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    foreach (immutable\
    \ long x; l)\n    {\n        l[] = x + 1L;\n    }\n    return l;\n}\n/*\nFind\
    \ the maximal element of a sequence.\n    >>> max_element([1L, 2L, 3L])\n    3L\n\
    \    >>> max_element([2L, 3L, 2L, 3L, 3L, 9L, 0L, 123L])\n    123L\n    \n*/\n\
    long max_element(long[] l) \n{\n    immutable long max_x = l[0L];\n    foreach\
    \ (immutable long x; l)\n    {\n        if (x > max_x)\n        {\n          \
    \  max_x = x;\n        }\n    }\n    return max_x;\n}\n/*\nFind the maximal element\
    \ of a sequence.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([2L,\
    \ 3L, 2L, 3L, 3L, 9L, 0L, 123L])\n    123L\n    \n*/\nlong max_element(long[]\
    \ l) \n{\n    immutable long max_x = l[0L];\n    foreach (immutable long x; l)\n\
    \    {\n        if (x > max_x)\n        {\n            max_x = x;\n        }\n\
    \    }\n    return max_x;\n}\n/*\nFind the minimal element of a sequence.\n  \
    \  >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([2L, 3L, 2L, 3L,\
    \ 3L, 9L, 0L, 123L])\n    0L\n    \n*/\nlong min_element(long[] l) \n{\n    immutable\
    \ long min_x = l[0L];\n    foreach (immutable long x; l)\n    {\n        if (x\
    \ < min_x)\n        {\n            min_x = x;\n        }\n    }\n    return min_x;\n\
    }\n/*\nFind the sum of a sequence.\n    >>> sum_seq([1L, 2L, 3L])\n    6L\n  \
    \  >>> sum\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0vuwpocs.d(79): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0vuwpocs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164043
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    foreach (i,\
    \ ref e; l) {\n        e = e + 1L;\n    }\n    return l;\n}\nunittest\n{\n   \
    \ alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164043
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    int l_len\
    \ = l.length;\n    long[] l_out = new long[l_len];\n    for (int l_i = 0; l_i\
    \ < l_len; l_i++)\n    {\n        l_out[l_i] = l[l_i] + 1L;\n    }\n    return\
    \ l_out;\n}\n/*\nReturn array with elements incremented by 1.\n    >>> incr_array([1L,\
    \ 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_array([5L, 3L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_array(long[]\
    \ l) \n{\n    int l_len = l.length;\n    long[] l_out = new long[l_len];\n   \
    \ for (int l_i = 0; l_i < l_len; l_i++)\n    {\n        l_out[l_i] = l[l_i] +\
    \ 1L;\n    }\n    return l_out;\n}\n/*\nInsert the contents of an array into an\
    \ associative array.\n    >>> a = [1L, 2L, 3L]\n    >>> insert_array_into_assoc(a,\
    \ [])\n    [1L: 0L, 2L: 1L, 3L: 2L]\n    >>> insert_array_into_assoc(a, [1L: 5L,\
    \ 3L: 6L])\n    [1L: 5L, 2L: 1L, 3L: 6L]\n    \n*/\nMap<Long, Long> insert_array_into_assoc(long[]\
    \ l, Map<Long, Long> a) \n{\n    int l_len = l.length;\n    for (int l_i = 0;\
    \ l_i < l_len; l_i++)\n    {\n        a[l[l_i]] = l_i;\n    }\n    return a;\n\
    }\n/*\n\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz29u548v.d(48): Error: no identifier for declarator `Map`

    /tmp/tmpz29u548v.d(48): Error: declaration expected, not `<`

    /tmp/tmpz29u548v.d(51): Error: declaration expected, not `for`

    /tmp/tmpz29u548v.d(51): Error: no identifier for declarator `l_i`

    /tmp/tmpz29u548v.d(51): Error: declaration expected, not `<`

    /tmp/tmpz29u548v.d(51): Error: no identifier for declarator `l_i`

    /tmp/tmpz29u548v.d(51): Error: declaration expected, not `++`

    /tmp/tmpz29u548v.d(54): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz29u548v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164043
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] r =\
    \ new long[l.length];\n    foreach (i, e; l)\n    {\n        r[i] = e + 1L;\n\
    \    }\n    return r;\n}\n/*\nReverse array.\n    >>> reverse_list([1L, 2L, 3L])\n\
    \    [3L, 2L, 1L]\n    >>> reverse_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [123L, 0L, 9L, 3L, 3L, 2L, 5L, 3L, 5L]\n*/\nlong[] reverse_list(long[] l)\
    \ \n{\n    long[] r = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n\
    \    {\n        r[r.length - i - 1] = l[i];\n    }\n    return r;\n}\n/*\nReturn\
    \ minimum element of array.\n    >>> min_list([1L, 2L, 3L])\n    1L\n    >>> min_list([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    0L\n*/\nlong min_list(long[] l) \n{\n\
    \    long min = l[0];\n    foreach (e; l)\n    {\n        if (e < min)\n     \
    \   {\n            min = e;\n        }\n    }\n    return min;\n}\n/*\nReturn\
    \ maximum element of array.\n    >>> max_list([1L, 2L, 3L])\n    3L\n    >>> max_list([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    123L\n*/\nlong max_list(long[] l) \n\
    {\n    long max = l[0];\n    foreach (e; l)\n    {\n        if (e > max)\n   \
    \     {\n            max = e;\n        }\n    }\n    return max;\n}\n/*\nReturn\
    \ sum of elements of array.\n    >>> sum_list([1L\nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8hru39zx.d(74): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8hru39zx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164043
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (a; 0 .. l.length) {\n        res[a] = l[a]\
    \ + 1L;\n    }\n    return res;\n}\n/*\nReturn array with elements incremented\
    \ by 1.\n    >>> incr_list_s([\"1\", \"2\", \"3\"])\n    [\"2\", \"3\", \"4\"\
    ]\n    >>> incr_list_s([\"5\", \"3\", \"5\", \"2\", \"3\", \"3\", \"9\", \"0\"\
    , \"123\"])\n    [\"6\", \"4\", \"6\", \"3\", \"4\", \"4\", \"10\", \"1\", \"\
    124\"]\n    \n*/\nstring[] incr_list_s(string[] l) \n{\n    string[] res = new\
    \ string[l.length];\n    foreach (a; 0 .. l.length) {\n        res[a] = (to!string(to!long(l[a])\
    \ + 1L));\n    }\n    return res;\n}\n/*\nReturn array with elements incremented\
    \ by 1.\n    >>> incr_list_f([1.0, 2.0, 3.0])\n    [2.0, 3.0, 4.0]\n    >>> incr_list_f([5.0,\
    \ 3.0, 5.0, 2.0, 3.0, 3.0, 9.0, 0.0, 123.0])\n    [6.0, 4.0, 6.0, 3.0, 4.0, 4.0,\
    \ 10.0, 1.0, 124.0]\n    \n*/\ndouble[] incr_list_f(double[] l) \n{\n    double[]\
    \ res = new double[l.length];\n    foreach (a; 0 .. l.length) {\n        res[a]\
    \ = l[a] + 1.0;\n    }\n    return res;\n}\n/*\nReturn tuple with elements incremented\
    \ by 1.\n    >>> incr_tuple((1L, 2L, 3L))\n    (2L, 3L, 4L)\n    >>> incr_tuple((5L,\
    \ 3L, 5\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3y3vqny6.d(51): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3y3vqny6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164043
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    l.each!((ref\
    \ x) => x = ++x)();\n    return l;\n}\n/*\nReturn list of all values in @d that\
    \ are not in the list @l.\n    >>> diff_list([1L, 3L, 5L], [1L, 2L, 3L])\n   \
    \ [2L, 5L]\n    >>> diff_list([3L, 7L, 8L, 1L, 6L, 3L, 5L, 6L, 1L, 7L, 8L, 4L,\
    \ 9L, 3L, 4L, 1L, 1L, 7L, 6L, 2L, 9L, 4L, 5L, 2L, 8L, 7L, 2L, 4L, 9L, 3L, 1L,\
    \ 2L, 8L, 7L, 6L, 2L, 6L, 8L, 5L, 2L, 8L, 9L, 2L, 3L, 7L, 1L, 4L, 9L, 5L, 1L,\
    \ 6L, 5L, 7L, 8L, 2L, 1L, 8L, 4L, 8L, 8L, 4L, 8L, 3L, 9L, 8L, 9L, 6L, 5L, 7L,\
    \ 1L, 8L, 6L, 8L, 9L, 2L, 5L, 7L, 6L, 1L, 3L, 1L, 9L, 1L, 5L, 8L, 4L, 8L, 9L,\
    \ 4L, 8L, 7L, 1L, 2L, 5L, 4L, 9L, 5L, 6L, 7L, 4L, 6L, 3L, 1L, 9L, 5L, 3L, 7L,\
    \ 1L, 2L, 5L, 3L, 6L, 2L, 9L, 7L, 4L, 2L, 5L, 4L, 8L, 2L, 6L, 7L, 5L, 2L, 3L,\
    \ 7L, 9L, 5L, 6L, 9L, 4L, 2L, 1L, 8L, 7L, 3L, 2L, 9L, 3L, 6L, 2\nunittest\n{\n\
    \    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph9hj1j_8.d(16): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph9hj1j_8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164043
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n    => l.map!(a =>\
    \ a + 1L);\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpic5xc_fz.d(12): Error: semicolon expected following function declaration

    /tmp/tmpic5xc_fz.d(12): Error: declaration expected, not `=>`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpic5xc_fz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164043
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] c =\
    \ new long[l.length];\n    foreach (int i, long e; i=0; i<l.length; i++) \n  \
    \  {\n        c[i] = e + 1L;\n    }\n    return c;\n}\n/*\nSimple function.\n\
    \    >>> function(1)\n    1\n    >>> function(2)\n    4\n    >>> function(4)\n\
    \    16\n    >>> function(42)\n    1764\n*/\nlong function(long x) \n{\n    return\
    \ x * x;\n}\n/*\nSquare root of a number.\n    >>> sqrt(4)\n    2\n    >>> sqrt(144)\n\
    \    12\n    >>> sqrt(10)\n    3.1622776601683795\n*/\ndouble sqrt(double x) \n\
    {\n    return std.math.sqrt(x);\n}\n/*\nGet the value of the object.\n    >>>\
    \ get_value(1)\n    1\n    >>> get_value(1.5)\n    1.5\n    >>> get_value(\"ciao\"\
    )\n    'ciao'\n*/\nT get_value(T)(T t) \n{\n    return t;\n}\n/*\nReturn a list\
    \ containing the items in the first list but not in the second.\n    >>> list_difference([1,\
    \ 2, 3], [2, 3, 4])\n    [1]\n    >>> list_difference([1, 2, 3], [1, 2, 3])\n\
    \    []\n    >>> list_difference([1, 2, 3], [])\n    [1, 2, 3]\n    >>> list_difference([],\
    \ [1, 2, 3])\n    []\n*/\nT[] list_difference(T)(T[] first, T[] second) \n{\n\
    \    T[] diff = new T[0];\n    foreach (i, e; first) \n    {\n        if (e !in\
    \ second) \n        {\n            diff ~= e;\n        }\n    }\n    return diff;\n\
    }\n/*\nReturn a list containing the items in the first list and in the second.\n\
    \    >>> list_intersection([1, 2,\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_1zc8qs_.d(14): Error: found `;` when expecting `)`

    /tmp/tmp_1zc8qs_.d(14): Error: found `)` when expecting `;` following statement

    /tmp/tmp_1zc8qs_.d(32): Error: no identifier for declarator `long function(long
    x)`

    /tmp/tmp_1zc8qs_.d(32): Error: declaration expected, not `{`

    /tmp/tmp_1zc8qs_.d(34): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_1zc8qs_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164043
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n\tlong[] res =\
    \ new long[l.length];\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tres[i] =\
    \ l[i] + 1L;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164043
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n\tif (l.length\
    \ == 0)\n\t\treturn l;\n\tfor (int i = 0; i < l.length; i++)\n\t\tl[i]++;\n\t\
    return l;\n}\n/*\nReturn array with elements decremented by 1.\n    >>> decr_list([1L,\
    \ 2L, 3L])\n    [0L, 1L, 2L]\n    >>> decr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L])\n    [4L, 2L, 4L, 1L, 2L, 2L, 8L, -1L, 122L]\n*/\nlong[] decr_list(long[]\
    \ l) \n{\n\tif (l.length == 0)\n\t\treturn l;\n\tfor (int i = 0; i < l.length;\
    \ i++)\n\t\tl[i]--;\n\treturn l;\n}\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164043
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n    {\n    \
    \    res[i] = l[i] + 1L;\n    }\n    return res;\n}\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l) \n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn array with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (e; l) \n    {\n        res ~= e + 1L;\n    }\n    return res;\n\
    }\n/*\nReturn array with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L\nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp584t_zqo.d(54): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp584t_zqo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164043
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    return l.map!(a\
    \ => a + 1L)();\n}\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx38qm119.d(13): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx38qm119.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164043
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    return l.map!(a\
    \ => a + 1L)();\n}\n/*\nReturn a list of all odd numbers 1-100.\n    >>> odd_list()\n\
    \    [1L, 3L, 5L, 7L, 9L, 11L, 13L, 15L, 17L, 19L, 21L, 23L, 25L, 27L, 29L, 31L,\
    \ 33L, 35L, 37L, 39L, 41L, 43L, 45L, 47L, 49L, 51L, 53L, 55L, 57L, 59L, 61L, 63L,\
    \ 65L, 67L, 69L, 71L, 73L, 75L, 77L, 79L, 81L, 83L, 85L, 87L, 89L, 91L, 93L, 95L,\
    \ 97L, 99L]\n*/\nlong[] odd_list() \n{\n    return iota(1L, 100L).filter!(a =>\
    \ a % 2L == 1L)();\n}\n/*\nReturn only the words which have an odd number of characters\
    \ in the input list.\n>>> odd_words([\"this\", \"is\", \"a\", \"list\", \"of\"\
    , \"words\"])\n[\"list\", \"words\"]\n>>> odd_words([\"this\", \"is\", \"two\"\
    , \"lists\", \"of\", \"words\"])\n[\"this\", \"two\", \"lists\", \"words\"]\n\
    */\nstring[] odd_words(string[] words) \n{\n    return words.filter!(a => a.length\
    \ % 2 == 1)();\n}\n/*\nReturn only the words which contain an 'e' in the input\
    \ list.\n>>> e_words([\"this\", \"is\", \"a\", \"list\", \"of\", \"words\"])\n\
    [\"this\", \"list\", \"words\"]\n>>> e_words([\"this\", \"is\", \"two\", \"lists\"\
    , \"of\", \"words\"])\n[\"this\", \"lists\", \"words\"]\n*/\nstring[] e_words(string[]\
    \ words) \n{\n    return words.filter!(a => a.canFind(\"e\"))();\n}\n/*\nReturn\
    \ only the words which do not contain an 'e' in the input list.\n>>> e_less_words(\n\
    unittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpebsp9sx9.d(46): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpebsp9sx9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164043
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    import std.algorithm;\n\
    \    import std.conv;\n    auto map = map!(a => a + 1)(l);\n    return map.array;\n\
    }\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6fu1u678.d(16): Error: no property `array` for type `MapResult!(__lambda2,
    long[])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6fu1u678.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164043
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[(int)l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e\
    \ + 1L;\n    }\n    return res;\n}\n/*\nCount number of elements in the string.\n\
    \    >>> count('aa')\n    2\n    >>> count('baba')\n    4\n    >>> count('abcd')\n\
    \    4\n*/\nlong count(string s) \n{\n    return (long)s.length;\n}\n/*\nCount\
    \ number of a's in the string.\n    >>> count_a('aa')\n    2\n    >>> count_a('baba')\n\
    \    2\n    >>> count_a('abcd')\n    1\n*/\nlong count_a(string s) \n{\n    long\
    \ res = 0L;\n    foreach (i, c; s)\n    {\n        if (c == 'a')\n        {\n\
    \            res = res + 1L;\n        }\n    }\n    return res;\n}\n/*\nReturn\
    \ new string with all elements incremented by one.\n    >>> incr_string('aa')\n\
    \    'bb'\n    >>> incr_string('baba')\n    'cbcc'\n    >>> incr_string('abcd')\n\
    \    'bcde'\n*/\nstring incr_string(string s) \n{\n    return std.string.fromArray(incr_list(s.toArray()));\n\
    }\n/*\nCount number of elements in the tuple.\n    >>> count((1, 2, 3))\n    3\n\
    \    >>> count((1,))\n    1\n    >>> count(())\n    0\n*/\nlong count(dchar[]\
    \ t) \n{\n    return (long)t.length;\n}\n/*\nCount number of a's in the tuple.\n\
    \    >>> count_a((1, 2, 3))\n    0\n    >>> count_a((1,))\n    0\n    >>> count_a(())\n\
    \    0\n    >>> count_a(('a', 'b', 'a'))\n    2\n    >>> count_a(('a',))\n   \
    \ 1\n    >>> count_a(('b',))\n   \nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8ynb0g95.d(13): Error: C style cast illegal, use `cast(int)l.length`

    /tmp/tmp8ynb0g95.d(31): Error: C style cast illegal, use `cast(long)s.length`

    /tmp/tmp8ynb0g95.d(78): Error: C style cast illegal, use `cast(long)t.length`

    /tmp/tmp8ynb0g95.d(80): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8ynb0g95.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164043
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n    {\n    long[]\
    \ res = new long[l.length];\n    foreach (i, e; l)\n        res[i] = e + 1L;\n\
    \    return res;\n    }\n/*\nReturn array with elements decremented by 1.\n  \
    \  >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>> decr_list([5L, 3L, 5L,\
    \ 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L, 2L, 8L, -1L, 122L]\n*/\n\
    long[] decr_list(long[] l) \n    {\n    long[] res = new long[l.length];\n   \
    \ foreach (i, e; l)\n        res[i] = e - 1L;\n    return res;\n    }\n/*\nGiven\
    \ a list of squares (numbers such that their square root is an integer), find\
    \ the missing one.\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp42rkti3g.d(32): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp42rkti3g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164043
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    return l.map!(a\
    \ => a + 1L)();\n}\n/*\nReturn n!\n    >>> factorial(0L)\n    1L\n    >>> factorial(1L)\n\
    \    1L\n    >>> factorial(2L)\n    2L\n    >>> factorial(3L)\n    6L\n    >>>\
    \ factorial(10L)\n    3628800L\n    >>> factorial(20L)\n    2432902008176640000L\n\
    */\nlong factorial(long n) \n{\n    if (n < 2L) return 1L;\n    return reduce!((a,\
    \ b) => a * b)(iota(2L, n + 1L))();\n}\n/*\nReturn the nth Fibonacci number.\n\
    \    >>> fibonacci(0L)\n    0L\n    >>> fibonacci(1L)\n    1L\n    >>> fibonacci(2L)\n\
    \    1L\n    >>> fibonacci(3L)\n    2L\n    >>> fibonacci(10L)\n    55L\n    >>>\
    \ fibonacci(100L)\n    354224848179261915075L\n*/\nlong fibonacci(long n) \n{\n\
    \    if (n == 0L) return 0L;\n    if (n == 1L) return 1L;\n    long a = 0L;\n\
    \    long b = 1L;\n    long c = 0L;\n    foreach (i; iota(2L, n + 1L)) {\n   \
    \     c = a + b;\n        a = b;\n        b = c;\n    }\n    return c;\n}\n/*\n\
    Return a list of the digits of a number.\n    >>> digits(0L)\n    [0L]\n    >>>\
    \ digits(1L)\n    [1L]\n    >>> digits(123L)\n    [1L, 2L, 3L]\n    >>> digits(123456789L)\n\
    \    [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]\n*/\nlong[] digits(long n) \n{\n   \
    \ long[] res = new long[];\n    while (\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwkt93g0r.d(79): Error: expression expected, not `unittest`

    /tmp/tmpwkt93g0r.d(80): Error: found `{` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwkt93g0r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164043
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    auto result\
    \ = new long[](l.length);\n    foreach (index, val; l) \n    {\n        result[index]\
    \ = val + 1L;\n    }\n    return result;\n}\n/*\nReturn array with elements incremented\
    \ by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164043
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret;\n\
    \    ret = alloc_arr(long, l.length);\n    foreach (i, e; ret)\n    {\n      \
    \  e = l[i] + 1L;\n    }\n    return ret;\n}\n/*\nReturn array with elements reversed.\n\
    \    >>> reverse_list([1L, 2L, 3L])\n    [3L, 2L, 1L]\n    >>> reverse_list([1L,\
    \ 2L, 3L, 4L, 5L])\n    [5L, 4L, 3L, 2L, 1L]\n    \n*/\nlong[] reverse_list(long[]\
    \ l) \n{\n    long[] ret;\n    ret = alloc_arr(long, l.length);\n    foreach (i,\
    \ e; ret)\n    {\n        e = l[l.length - 1L - i];\n    }\n    return ret;\n\
    }\n/*\nReturn array of elements from 0 to n.\n    >>> range_list(0L)\n    []\n\
    \    >>> range_list(5L)\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] range_list(long\
    \ n) \n{\n    long[] ret;\n    ret = alloc_arr(long, n);\n    foreach (i, e; ret)\n\
    \    {\n        e = i;\n    }\n    return ret;\n}\n/*\nReturn true if the lists\
    \ have the same elements in the same order.\n    >>> same_lists([1L, 2L, 3L],\
    \ [1L, 2L, 3L])\n    True\n    >>> same_lists([1L, 2L, 3L], [2L, 3L, 1L])\n  \
    \  False\n    >>> same_lists([1L, 2L, 3L], [1L, 2L, 3L, 4L])\n    False\n    \n\
    */\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyo2tewcy.d(14): Error: found `,` when expecting `.` following long

    /tmp/tmpyo2tewcy.d(32): Error: found `,` when expecting `.` following long

    /tmp/tmpyo2tewcy.d(50): Error: found `,` when expecting `.` following long

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyo2tewcy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164043
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    return l.map!(a\
    \ => a + 1L)();\n}\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx38qm119.d(13): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx38qm119.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164043
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n\tlong[] res =\
    \ new long[(int)l.length];\n\tfor (long i = 0; i < l.length; i++) {\n\t\tres[(int)i]\
    \ = l[(int)i] + 1L;\n\t}\n\treturn res;\n}\n/*\nA simple Queue.\n    >>> q = Queue()\n\
    \    >>> q.enqueue(2L)\n    >>> q.enqueue(3L)\n    >>> q.dequeue()\n    2L\n \
    \   >>> q.dequeue()\n    3L\n    >>> q.dequeue()\n    Traceback (most recent call\
    \ last):\n        ...\n    Empty: Queue is empty\n    >>> q.enqueue(1L)\n    >>>\
    \ q.enqueue(10L)\n    >>> q.dequeue()\n    1L\n    >>> q.dequeue()\n    10L\n\
    \    >>> q.dequeue()\n    Traceback (most recent call last):\n        ...\n  \
    \  Empty: Queue is empty\n*/\nunittest\n{\n    alias candidate = incr_list;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzi0_kfzp.d(13): Error: C style cast illegal, use `cast(int)l.length`

    /tmp/tmpzi0_kfzp.d(15): Error: C style cast illegal, use `cast(int)i`

    /tmp/tmpzi0_kfzp.d(15): Error: C style cast illegal, use `cast(int)i`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzi0_kfzp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164043
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, x; l)\n    {\n        res[i] = x + 1L;\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164043
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] result\
    \ = new long[l.length];\n    foreach (long i, long elem; zip(i, l)) \n    {\n\
    \        result[i] = elem + 1L;\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxyzm_q_o.d(14): Error: undefined identifier `zip`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxyzm_q_o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164043
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    return map!(a\
    \ => a + 1L)(l);\n}\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyisjr1s0.d(13): Error: template instance `map!((a) => a + 1L)`
    template `map` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyisjr1s0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164043
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] newL\
    \ = new long[l.length];\n    foreach (i, ite; l) \n    {\n        newL[i] = ite\
    \ + 1L;\n    }\n    return newL;\n}\n/*\nReturn array with elements decremented\
    \ by 1.\n    >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>> decr_list([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L, 2L, 8L, -1L, 122L]\n\
    \    \n*/\nlong[] decr_list(long[] l) \n{\n    long[] newL = new long[l.length];\n\
    \    foreach (i, ite; l) \n    {\n        newL[i] = ite - 1L;\n    }\n    return\
    \ newL;\n}\n/*\nReturn the sum of an array of integers.\n    \n    >>> sum([1L,\
    \ 2L, 3L])\n    6L\n    >>> sum([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    277L\n\
    \    \n*/\nlong sum(long[] l) \n{\n    long sum = 0L;\n    foreach (i, ite; l)\
    \ \n    {\n        sum += ite;\n    }\n    return sum;\n}\n/*\nReturn the sum\
    \ of the squares of an array of integers.\n    \n    >>> sum_squares([1L, 2L,\
    \ 3L])\n    14L\n    >>> sum_squares([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    8416L\n    \n*/\nlong sum_squares(long[] l) \n{\n    long sum = 0L;\n   \
    \ foreach (i, ite; l) \n    {\n        sum += ite * ite;\n    }\n    return sum;\n\
    }\n/*\nReturn the sum of the absolute values\nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4j4bbfa2.d(73): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4j4bbfa2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164043
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    foreach (ref\
    \ a; l) {\n        a = a + 1L;\n    }\n    return l;\n}\nunittest\n{\n    alias\
    \ candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164043
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res;\n\
    \    res[] = l[];\n    foreach (i, elem; res) \n    {\n        res[i] = elem +\
    \ 1L;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'object.Error@(0): Array lengths don''t match for copy: 3 != 0

    ----------------

    ??:? nothrow @safe void rt.util.array._enforceSameLength(const(char[]), const(ulong),
    const(ulong)) [0x42a56c]

    ??:? _d_arraycopy [0x4284fe]

    ??:? long[] tmp9ghc4e6q.incr_list(long[]) [0x427e57]

    ??:? void tmp9ghc4e6q.__unittest_L21_C1() [0x427f6d]

    ??:? void tmp9ghc4e6q.__modtest() [0x428184]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c773]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b606]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430799]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c48]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430725]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5dd]

    ??:'
  stdout: ''
  timestamp: 1660164043
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n  foreach (i,_;\
    \ l)\n    l[i]++;\n  return l;\n}\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164043
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n  long[] ret =\
    \ new long[l.length];\n  for (long i = 0; i < l.length; i++) \n  {\n    ret[i]\
    \ = l[i] + 1L;\n  }\n  return ret;\n}\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164043
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] result\
    \ = new long[];\n    foreach (elem; l)\n    {\n        result ~= elem + 1L;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpchr5lkce.d(13): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpchr5lkce.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164043
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n  long[] retval\
    \ = new long[l.length];\n  foreach (i, e; l) \n  {\n    retval[i] = e + 1L;\n\
    \  }\n  return retval;\n}\n/*\nReturn array with elements reversed.\n    >>> reverse_list([1L,\
    \ 2L, 3L])\n    [3L, 2L, 1L]\n    >>> reverse_list([5L, 3L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L])\n    [123L, 0L, 9L, 3L, 3L, 2L, 5L, 3L, 5L]\n*/\nlong[] reverse_list(long[]\
    \ l) \n{\n  long[] retval = new long[l.length];\n  foreach (i, e; l) \n  {\n \
    \   retval[i] = l[l.length - i - 1L];\n  }\n  return retval;\n}\n/*\nCalculate\
    \ the sum of elements in a list.\n    >>> sum_list([1L, 2L, 3L])\n    6L\n   \
    \ >>> sum_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    259L\n*/\nlong sum_list(long[]\
    \ l) \n{\n  long retval = 0L;\n  foreach (e; l) \n  {\n    retval += e;\n  }\n\
    \  return retval;\n}\n/*\nCalculate the product of elements in a list.\n    >>>\
    \ prod_list([1L, 2L, 3L])\n    6L\n    >>> prod_list([5L, 3L, 5L, 2L, 3L, 3L,\
    \ 9L, 0L, 123L])\n    842125L\n*/\nlong prod_list(long[] l) \n{\n  long retval\
    \ = 1L;\n  foreach (e; l) \n  {\n    retval *= e;\n  }\n  return retval;\n}\n\
    /*\nCalculate the count of elements in a list.\n    >>> count_list([1L,\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9415qvjh.d(68): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9415qvjh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164043
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n    in(incr_list)\n\
    {\n    foreach (elem; l) {\n        elem += 1L;\n    }\n    return l;\n}\n/*\n\
    Double the values of all elements in a list.\n    >>> double_list([1L, 2L, 3L])\n\
    \    [2L, 4L, 6L]\n    >>> double_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [10L, 6L, 10L, 4L, 6L, 6L, 18L, 0L, 246L]\n    \n*/\nlong[] double_list(long[]\
    \ l) \n    in(double_list)\n{\n    foreach (elem; l) {\n        elem *= 2L;\n\
    \    }\n    return l;\n}\n/*\nCreate a list with the provided items.\n    >>>\
    \ create_list([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> create_list([5L, 3L, 5L,\
    \ 2L, 3L, 3L, 9L, 0L, 123L])\n    [5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]\n   \
    \ \n*/\nlong[] create_list(long[] l) \n    in(create_list)\n{\n    return l;\n\
    }\n/*\nReturn the sum of all elements in a list.\n    >>> sum_list([1L, 2L, 3L])\n\
    \    6L\n    >>> sum_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    159L\n\
    \    \n*/\nlong sum_list(long[] l) \n    in(sum_list)\n{\n    return sum(l);\n\
    }\n/*\nModify a list such that all elements are in sorted order.\n    >>> sorted_list([1L,\
    \ 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sorted_list([5L, 3L, 5L, 2L, 3L, 3L, 9\n\
    unittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8dfhh234.d(61): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8dfhh234.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164043
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n  //@ requires l[..]\
    \ |-> ?p;\n  //@ ensures array_slice_deep(l, 0, l.length, int_dequals, int_dequals)\
    \ &*& result[..] |-> ?q &*& ((l.length > 0) ? l[0] < q[0] : true) &*& ((l.length\
    \ > 1) ? q[0] < q[1] : true) &*& ((l.length > 2) ? q[1] < q[2] : true) &*& ((l.length\
    \ > 3) ? q[2] < q[3] : true) &*& ((l.length > 4) ? q[3] < q[4] : true) &*& ((l.length\
    \ > 5) ? q[4] < q[5] : true) &*& ((l.length > 6) ? q[5] < q[6] : true) &*& ((l.length\
    \ > 7) ? q[6] < q[7] : true) &*& ((l.length > 8) ? q[7] < q[8] : true) &*& ((l.length\
    \ > 9) ? q[8] < q[9] : true) &*& ((l.length > 10) ? q[9] < q[10] : true) &*& ((l.length\
    \ > 11) ? q[10] < q[11] : true) &*& ((l.length > 12) ? q[11] < q[12] : true) &*&\
    \ ((l.length > 13) ? q[12] < q[13] : true) &*& ((l.length > 14) ? q[13] < q[14]\
    \ : true) &*& ((l.length > 15) ? q[14] < q[15] : true) &*& ((l.length > 16) ?\
    \ q[15] < q[16] : true) &*& ((l.length > 17) ? q[16] < q[17] : true) &*& ((l.length\
    \ > 18) ? q[17] < q[18] : true) &*& ((l.length > 19) ? q[18] < q[19\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvodgmx7f.d(14): Error: semicolon expected following function declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvodgmx7f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164043
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    auto tpl =\
    \ l.tupleof;\n    long[] r = new long[tpl.length];\n    foreach (i, ref v; tpl)\n\
    \    {\n        r[i] = v + 1L;\n    }\n    return r;\n}\n/*\nReturn array with\
    \ elements incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n\
    \    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L,\
    \ 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    return\
    \ l.map!((l) => l + 1L)();\n}\n/*\nReturn array with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    return l.map!((l) => l + 1L);\n\
    }\n/*\nReturn array with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    return l.map!((l) => l + 1L)();\n}\n/*\nReturn an array of the sum\
    \ of the pairs of elements at\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpayswdddh.d(57): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpayswdddh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164043
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res;\n\
    \    for (long i = 0L; i < l.length; i++)\n    {\n        l[i] += 1L;\n    }\n\
    \    return l;\n}\n/*\nReturn array with elements decremented by 1.\n    >>> decr_list([2L,\
    \ 3L, 4L])\n    [1L, 2L, 3L]\n    >>> decr_list([6L, 4L, 6L, 3L, 4L, 4L, 10L,\
    \ 1L, 124L])\n    [5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]\n    \n*/\nlong[] decr_list(long[]\
    \ l) \n{\n    long[] res;\n    for (long i = 0L; i < l.length; i++)\n    {\n \
    \       l[i] -= 1L;\n    }\n    return l;\n}\n/*\nConvert an integer to a list\
    \ of digits.\n    >>> int_to_list(9L)\n    [9L]\n    >>> int_to_list(816L)\n \
    \   [8L, 1L, 6L]\n    >>> int_to_list(4L)\n    [4L]\n    >>> int_to_list(0L)\n\
    \    [0L]\n    >>> int_to_list(1L)\n    [1L]\n    \n*/\nlong[] int_to_list(long\
    \ n) \n{\n    long[] res;\n    res = new long[0L];\n    while (n != 0L)\n    {\n\
    \        res ~= n % 10L;\n        n /= 10L;\n    }\n    return reverse(res);\n\
    }\n/*\nConvert a list of digits to an integer.\n    >>> list_to_int([9L])\n  \
    \  9L\n    >>> list_to_int([8L, 1L, 6L])\n    816L\n    >>> list_to_int([4L])\n\
    \    4L\n    >>> list_to_int([0L])\n    0L\n    >>> list_to_int([1L])\n    1L\n\
    \    \n*/\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsn43u_5o.d(60): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(long[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsn43u_5o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164043
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    assert(l);\n\
    \    long[] ret = new long[l.length];\n    for (int i = 0; i < l.length; i++)\
    \ {\n        ret[i] = l[i] + 1L;\n    }\n    return ret;\n}\nunittest\n{\n   \
    \ alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqhldval5.d(13): Assertion failure

    ----------------

    ??:? _d_assertp [0x428415]

    ??:? long[] tmpqhldval5.incr_list(long[]) [0x427e6e]

    ??:? void tmpqhldval5.__unittest_L20_C1() [0x427f2e]

    ??:? void tmpqhldval5.__modtest() [0x4281c4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5d7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b46a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306f5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430ba4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430681]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b441]

    ??:? runModuleUnitTests [0x42c3ad]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char'
  stdout: ''
  timestamp: 1660164043
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n  long len = l.length;\n\
    \  long[] v = new long[len];\n  for (long i = 0L; i < len; i++) \n  {\n    v[i]\
    \ = l[i] + 1L;\n  }\n  return v;\n}\n/*\nReturn array with elements incremented\
    \ by 1.\n    >>> incr_tuple((1L, 2L, 3L))\n    (2L, 3L, 4L)\n    >>> incr_tuple((5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L))\n    (6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L)\n\
    \    \n*/\nTuple!(long[]) incr_tuple(Tuple!(long[]) t) \n{\n  long len = t.length;\n\
    \  long[] v = new long[len];\n  for (long i = 0L; i < len; i++) \n  {\n    v[i]\
    \ = t[i] + 1L;\n  }\n  return tup(v);\n}\n/*\nReturn array with elements incremented\
    \ by 1.\n    >>> incr_tuple((1L, 2L, 3L))\n    (2L, 3L, 4L)\n    >>> incr_tuple((5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L))\n    (6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L)\n\
    \    \n*/\nTuple!(int[]) incr_tuple(Tuple!(int[]) t) \n{\n  long len = t.length;\n\
    \  int[] v = new int[len];\n  for (long i = 0L; i < len; i++) \n  {\n    v[i]\
    \ = t[i] + 1;\n  }\n  return tup(v);\n}\n/*\nReturn array with elements incremented\
    \ by 1.\n    >>> incr_array([1L, 2L, 3L])\n    [2L\nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgq1pk9mb.d(57): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgq1pk9mb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164043
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    return l.map!((a)\
    \ { return a + 1; }).array;\n}\n/*\nReturn array with elements decremented by\
    \ 1.\n    >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>> decr_list([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L, 2L, 8L, -1L, 122L]\n\
    \    \n*/\nlong[] decr_list(long[] l) \n{\n    return l.map!((a) { return a -\
    \ 1; }).array;\n}\n/*\nReturn array with elements incremented by 1.\n    >>> incr_list([1.0,\
    \ 2.0, 3.0])\n    [2.0, 3.0, 4.0]\n    >>> incr_list([5.0, 3.0, 5.0, 2.0, 3.0,\
    \ 3.0, 9.0, 0.0, 123.0])\n    [6.0, 4.0, 6.0, 3.0, 4.0, 4.0, 10.0, 1.0, 124.0]\n\
    \    \n*/\ndouble[] incr_list(double[] l) \n{\n    return l.map!((a) { return\
    \ a + 1; }).array;\n}\n/*\nReturn array with elements decremented by 1.\n    >>>\
    \ decr_list([1.0, 2.0, 3.0])\n    [0.0, 1.0, 2.0]\n    >>> decr_list([5.0, 3.0,\
    \ 5.0, 2.0, 3.0, 3.0, 9.0, 0.0, 123.0])\n    [4.0, 2.0, 4.0, 1.0, 2.0, 2.0, 8.0,\
    \ -1.0, 122.0]\n    \n*/\ndouble[] decr_list(double[] l) \n{\n    return l.map!((a)\
    \ { return a - 1; }).array\nunittest\n{\n    alias candidate = incr_list;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm001tcxj.d(50): Error: found `unittest` when expecting `;` following
    `return` statement

    /tmp/tmpm001tcxj.d(58): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm001tcxj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164043
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] result\
    \ = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n    {\n     \
    \   result[i] = l[i] + 1L;\n    }\n    return result;\n}\n/*\nReturn number of\
    \ duplicates in the list.\n    >>> count_duplicates([5L, 3L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L])\n    5L\n*/\nlong count_duplicates(long[] l) \n{\n    long total_duplicates\
    \ = 0L;\n    for (int i = 0; i < l.length; i++)\n    {\n        long duplicate_counter\
    \ = 0L;\n        for (int j = 0; j < l.length; j++)\n        {\n            if\
    \ (l[i] == l[j])\n            {\n                duplicate_counter++;\n      \
    \      }\n        }\n        if (duplicate_counter > 1L)\n        {\n        \
    \    total_duplicates++;\n        }\n    }\n    return total_duplicates;\n}\n\
    /*\nReturn number of elements in the list that are equal to their index.\n   \
    \ >>> count_equal_to_index([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L])\n    0L\n   \
    \ >>> count_equal_to_index([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L])\n    10L\n\
    \    >>> count_equal_to_index([-7L, -2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L])\n    1L\n\
    */\nlong count_equal_to_index(long[] l) \n{\n    long result = 0L;\n    for (int\
    \ i = 0; i < l.length; i++)\n    {\n        if (l[i] == i)\n        {\n      \
    \      result++;\n        }\n    }\n    return result;\n}\n/*\nReturn if the number\
    \ of elements greater than the greatest element is\n    equal to the number of\
    \ elements smaller than the\nunittest\n{\n    alias candidate = incr_list;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf9144zta.d(66): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf9144zta.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164043
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    int i;\n \
    \   long[] res = new long[l.length];\n    for (i = 0; i < l.length; i++) {\n \
    \       res[i] = l[i] + 1L;\n    }\n    return res;\n}\n/*\nReturn a list with\
    \ the elements in the input list incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlist!long incr_list(list!long\
    \ l) \n{\n    int i;\n    list!long res = new list!long();\n    for (i = 0; i\
    \ < l.length; i++) {\n        res.append(l[i] + 1L);\n    }\n    return res;\n\
    }\n/*\nReturn a std.array.Array!long array with the elements in the input std.array.Array!long\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nstd.array.Array!long incr_list(std.array.Array!long\
    \ l) \n{\n    int i;\n    std.array.Array!long res = new std.array.Array!long();\n\
    \    for (i = 0; i < l.length; i++) {\n        res.append(l[i] + 1L);\n    }\n\
    \    return res;\n}\n/*\nReturn a std.array.Array!int array with the elements\
    \ in the input std.array.Array!int incremented by 1.\n    >>> incr_list([\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpddsq6dbv.d(54): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpddsq6dbv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164043
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n\tlong[] res =\
    \ new long[];\n\tforeach(long i; l) \n\t{\n\t\tres ~= (i + 1L);\n\t}\n\treturn\
    \ res;\n}\n/*\nReturn a random number from 1 to 6.\n    >>> roll_die()\n    6\n\
    \    >>> roll_die()\n    2\n    >>> roll_die()\n    5\n    >>> roll_die()\n  \
    \  1\n*/\nlong roll_die() \n{\n\treturn (1L + (cast(long)rand(6L)));\n}\n/*\n\
    Return true if n is a prime number.\n    >>> is_prime(3L)\n    true\n    >>> is_prime(18L)\n\
    \    false\n    >>> is_prime(4583L)\n    true\n*/\nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt3yisvs2.d(13): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmpt3yisvs2.d(33): Error: undefined identifier `rand`, did you mean template
    `Bind(alias Template, args1...)`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt3yisvs2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164043
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] result;\n\
    \    foreach (v; l) \n    {\n        result ~= v + 1L;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164043
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    if (l == null)\n\
    \    {\n        return null;\n    }\n    else\n    {\n        long[] ret = new\
    \ long[l.length];\n        for (int i = 0; i < l.length; i++)\n        {\n   \
    \         ret[i] = l[i] + 1L;\n        }\n        return ret;\n    }\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164043
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] r =\
    \ new long[l.length];\n    for (int i = 0; i < l.length; i++) \n    {\n      \
    \  r[i] = l[i] + 1L;\n    }\n    return r;\n}\n/*\nReturn array with first element\
    \ removed.\n    >>> tail([1L, 2L, 3L])\n    [2L, 3L]\n    >>> tail([5L, 3L, 5L,\
    \ 2L, 3L, 3L, 9L, 0L, 123L])\n    [3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]\n*/\nlong[]\
    \ tail(long[] l) \n{\n    if (l.length <= 1L) \n    {\n        return new long[0];\n\
    \    }\n    long[] r = new long[l.length - 1L];\n    for (int i = 1; i < l.length;\
    \ i++) \n    {\n        r[i - 1L] = l[i];\n    }\n    return r;\n}\n/*\nReturn\
    \ array with first element replaced by a given value.\n    >>> set_head(1L, [2L,\
    \ 3L])\n    [1L, 3L]\n    >>> set_head(5L, [3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [5L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]\n*/\nlong[] set_head(long a, long[] l)\
    \ \n{\n    if (l.length == 0L) \n    {\n        return new long[0];\n    }\n \
    \   long[] r = new long[l.length];\n    r[0L] = a;\n    for (int i = 1; i < l.length;\
    \ i++) \n    {\n        r[i] = l[i];\n    }\n    return r;\n}\n/*\nGiven a sorted\
    \ array, return a new array with duplicate values removed.\n    >>> uniq([1L,\
    \ 1L, 2L, 2L, 3L, 3L, 4L, 4L\nunittest\n{\n    alias candidate = incr_list;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvs32cz7o.d(61): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvs32cz7o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164043
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] result\
    \ = new long[l.length];\n    foreach (i, elem; l) \n    {\n        result[i] =\
    \ elem + 1L;\n    }\n    return result;\n}\n/*\nReturn sum of elements in array.\n\
    \    >>> sum_list([1L, 2L, 3L])\n    6L\n    >>> sum_list([5L, 3L, 5L, 2L, 3L,\
    \ 3L, 9L, 0L, 123L])\n    263L\n    \n*/\nlong sum_list(long[] l) \n{\n    long\
    \ result = 0L;\n    foreach (elem; l) \n    {\n        result += elem;\n    }\n\
    \    return result;\n}\n/*\nCalculate square root of floating-point number.\n\
    \    >>> sqrt(2.0)\n    1.4142135623730951\n    >>> sqrt(0.0)\n    0.0\n    >>>\
    \ sqrt(3.0)\n    1.7320508075688772\n    >>> sqrt(100.0)\n    10.0\n    \n*/\n\
    double sqrt(double x) \n{\n    return rsqrt(x) * x;\n}\n/*\nCalculate reciprocal\
    \ square root of floating-point number.\n    >>> rsqrt(2.0)\n    0.7071067811865476\n\
    \    >>> rsqrt(0.0)\n    0.0\n    >>> rsqrt(3.0)\n    0.5773502691896258\n   \
    \ >>> rsqrt(100.0)\n    0.1\n    \n*/\ndouble rsqrt(double x) \n{\n    double\
    \ xhalf = 0.5 * x;\n    long i = cast(long) x;\n    i = 0x5f3759df - (i >> 1);\n\
    \    x = cast(double) i;\n    x = x * (1.5 - xhalf * x * x);\n    return x;\n\
    }\n/*\nCalculate square of floating-point number.\n    >>> sqr(2.0)\n    4.0\n\
    \    >>> sqr(0.0)\n   \nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfa60gh1c.d(74): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa60gh1c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164043
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, x; l) \n    {\n        res[i] = x + 1L;\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164044
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        res[i]\
    \ = l[i] + 1L;\n    }\n    return res;\n}\n/*\nReturn array with elements incremented\
    \ by 1.\n    >>> incr_list_d([\"a\", \"b\", \"c\"])\n    [\"a1\", \"b1\", \"c1\"\
    ]\n    >>> incr_list_d([\"c\", \"d\", \"d\", \"e\", \"f\", \"f\", \"g\", \"h\"\
    , \"i\"])\n    [\"c1\", \"d1\", \"d2\", \"e1\", \"f1\", \"f2\", \"g1\", \"h1\"\
    , \"i1\"]\n    \n*/\nobject[] incr_list_d(object[] l) \n{\n    object[] res =\
    \ new object[l.length];\n    for (int i = 0; i < l.length; i++) {\n        res[i]\
    \ = l[i] + \"1\";\n    }\n    return res;\n}\n/*\nReturn array with elements incremented\
    \ by 1.\n    >>> incr_list_b([true, false, true])\n    [2, 1, 2]\n    >>> incr_list_b([false,\
    \ true, true, false, true, true, false, false, true])\n    [1, 2, 2, 1, 2, 2,\
    \ 1, 1, 2]\n    \n*/\nbyte[] incr_list_b(byte[] l) \n{\n    byte[] res = new byte[l.length];\n\
    \    for (int i = 0; i < l.length; i++) {\n        res[i] = (byte)(l[i] + 1);\n\
    \    }\n    return res;\n}\n/*\nReturn array with elements incremented by 1.\n\
    \    >>> incr_list_bb([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list_bb([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4tut5br6.d(47): Error: C style cast illegal, use `cast(byte)(l[i]
    + 1)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4tut5br6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164043
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] rv\
    \ = new long[l.length];\n    foreach (i, _; l)\n    {\n        rv[i] = l[i] +\
    \ 1L;\n    }\n    return rv;\n}\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164043
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    foreach (index,\
    \ value; l) \n    {\n        l[index] = value + 1L;\n    }\n    return l;\n}\n\
    /*\nReturn a string representing the given float with exactly two digits after\
    \ the decimal point.\n    >>> fmt_float(3.14159)\n    '3.14'\n    >>> fmt_float(0.0)\n\
    \    '0.00'\n    >>> fmt_float(1.0)\n    '1.00'\n    >>> fmt_float(1234567.0)\n\
    \    '1234567.00'\n    >>> fmt_float(3.14159*10**10)\n    '3141590000000.00'\n\
    \    >>> fmt_float(3.14159*10**40)\n    '3.14159E+40'\n*/\nstring fmt_float(double\
    \ d) \n{\n    string s = \"%2.2f\";\n    if (d == 0.0) \n    {\n        s = \"\
    0.00\";\n    }\n    else if (d > 10000000000.0) \n    {\n        s = \"%2.2E\"\
    ;\n    }\n    return format(s, d);\n}\n/*\nReturn the first element of a tuple\
    \ or array.\n    >>> first([1, 2, 3])\n    1\n    >>> first((1, 2, 3))\n    1\n\
    */\nT first(T)(T[] arr) \n{\n    return arr[0];\n}\n/*\nReturn the first n elements\
    \ of an array or tuple.\n    >>> first_n([1, 2, 3, 4, 5], 2)\n    [1, 2]\n   \
    \ >>> first_n([1, 2, 3, 4, 5], 7)\n    [1, 2, 3, 4, 5]\n    >>> first_n([1, 2,\
    \ 3, 4, 5], 0)\n    []\n    >>> first_n([1, 2, 3, 4, 5], -1)\n    []\n    >>>\
    \ first_n((1, 2, 3, 4, 5), 2)\n    [1, 2]\n    >>> first_n((1, 2, 3, 4, 5), 7)\n\
    \    [1, 2,\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmuoawq8c.d(58): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmuoawq8c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164043
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n\tlong[] ret =\
    \ new long[l.length];\n\tforeach(i, element; l)\n\t{\n\t\tret[i] = element + 1L;\n\
    \t}\n\treturn ret;\n}\n/*\nReturn a list of XOR of elements from two lists.\n\
    \    >>> list_xor([1L, 2L, 3L], [4L, 5L, 6L])\n    [5L, 7L, 5L]\n    >>> list_xor([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L], [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L])\n \
    \   [4L, 1L, 6L, 6L, 6L, 5L, 2L, 8L, 112L]\n*/\nlong[] list_xor(long[] l1, long[]\
    \ l2) \n{\n\tlong[] ret = new long[l1.length];\n\tassert(l1.length == l2.length);\n\
    \tforeach(i, _; l1)\n\t{\n\t\tret[i] = l1[i] ^ l2[i];\n\t}\n\treturn ret;\n}\n\
    /*\nReturn a list of AND of elements from two lists.\n    >>> list_and([1L, 2L,\
    \ 3L], [4L, 5L, 6L])\n    [0L, 0L, 2L]\n    >>> list_and([5L, 3L, 5L, 2L, 3L,\
    \ 3L, 9L, 0L, 123L], [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L])\n    [1L, 2L, 1L, 0L,\
    \ 1L, 2L, 1L, 0L, 9L]\n*/\nlong[] list_and(long[] l1, long[] l2) \n{\n\tlong[]\
    \ ret = new long[l1.length];\n\tassert(l1.length == l2.length);\n\tforeach(i,\
    \ _; l1)\n\t{\n\t\tret[i] = l\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_ocnzyfi.d(51): Error: found `unittest` when expecting `;` following
    statement

    /tmp/tmp_ocnzyfi.d(59): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp_ocnzyfi.d(59): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_ocnzyfi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164043
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    return l.map!((i)\
    \ => i + 1)();\n}\n/*\nReturn array with elements decremented by 1.\n    >>> decr_list([1L,\
    \ 2L, 3L])\n    [0L, 1L, 2L]\n    >>> decr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L])\n    [4L, 2L, 4L, 1L, 2L, 2L, 8L, -1L, 122L]\n    \n*/\nlong[] decr_list(long[]\
    \ l) \n{\n    return l.map!((i) => i - 1)();\n}\n/*\nTranspose a matrix.\n   \
    \ >>> transpose([[1L, 2L, 3L], [4L, 5L, 6L]])\n    [[1L, 4L], [2L, 5L], [3L, 6L]]\n\
    \    >>> transpose([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]])\n    [[1L, 4L,\
    \ 7L], [2L, 5L, 8L], [3L, 6L, 9L]]\n    \n*/\nlong[][] transpose(long[][] a) \n\
    {\n    auto x = a.length;\n    auto y = a[0].length;\n    long[][] ret = new long[][]();\n\
    \    for (int j = 0; j < y; j++)\n    {\n        ret ~= new long[]();\n      \
    \  for (int i = 0; i < x; i++)\n        {\n            ret[j] ~= a[i][j];\n  \
    \      }\n    }\n    return ret;\n}\n/*\nFlatten a 2-dimensional list of integers.\n\
    \    >>> flatten([[1L, 2L, 3L], [4L, 5L, 6L]])\n    [1L, 2L, 3L, 4L, 5L, 6L]\n\
    \    >>> flatten([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L,\nunittest\n{\n    alias\
    \ candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2vb45v5m.d(50): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2vb45v5m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164043
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] r =\
    \ new long[l.length];\n    for (int i = 0; i < l.length; i++)\n        r[i] =\
    \ l[i] + 1L;\n    return r;\n}\n/*\nReturn the sum of all elements in the list.\n\
    \    >>> add_list([1L, 1L, 1L])\n    3L\n    >>> add_list([5L, 3L, 6L, 1L, 3L,\
    \ 3L, 9L, 0L, 123L])\n    272L\n    \n*/\nlong add_list(long[] l) \n{\n    long\
    \ sum = 0L;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n  \
    \  return sum;\n}\n/*\nReturn the number of times a value is found in a list.\n\
    \    >>> find_list(1L, [1L, 1L, 1L])\n    3L\n    >>> find_list(1L, [5L, 3L, 6L,\
    \ 1L, 3L, 3L, 9L, 0L, 123L])\n    1L\n    \n*/\nlong find_list(long n, long[]\
    \ l) \n{\n    long num = 0L;\n    for (int i = 0; i < l.length; i++)\n       \
    \ if (l[i] == n)\n            num++;\n    return num;\n}\n/*\nReturn the sum of\
    \ all elements in the array.\n    >>> add_array([1L, 1L, 1L])\n    3L\n    >>>\
    \ add_array([5L, 3L, 6L, 1L, 3L, 3L, 9L, 0L, 123L])\n    272L\n    \n*/\nlong\
    \ add_array(long[] l) \n{\n    long sum = 0L;\n    for (int i = 0; i < l.length;\
    \ i++)\n        sum += l[i];\n    return sum;\n}\n/*\nReturn the number of times\
    \ a value is found in an array.\n    >>> find_array(1L, [1L, 1L, 1L])\n    3L\n\
    \    >>> find_array(1L, [5L\nunittest\n{\n    alias candidate = incr_list;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0_hnn0i4.d(64): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0_hnn0i4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164043
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    foreach (ref\
    \ d; l) \n    {\n        d++;\n    }\n    return l;\n}\n/*\nReturn a new array\
    \ with 2x the length containing first and last half of array.\n    >>> double_list([1L,\
    \ 2L, 3L])\n    [1L, 2L, 3L, 1L, 2L, 3L]\n    >>> double_list([1L, 2L, 3L, 4L,\
    \ 5L, 6L])\n    [1L, 2L, 3L, 4L, 5L, 6L, 1L, 2L, 3L, 4L, 5L, 6L]\n    >>> double_list([])\n\
    \    []\n    \n*/\nlong[] double_list(long[] l) \n{\n    long[] res = new long[l.length\
    \ * 2];\n    res[] = l[];\n    foreach (immutable i, immutable d; l) \n    {\n\
    \        res[l.length + i] = d;\n    }\n    return res;\n}\n/*\nReturn array with\
    \ elements incremented by 1.\n    >>> incr_list_range([1L, 2L, 3L])\n    [2L,\
    \ 3L, 4L]\n    >>> incr_list_range([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n \
    \   [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list_range(long[]\
    \ l) \n{\n    foreach (ref d; l[0 .. l.length]) \n    {\n        d++;\n    }\n\
    \    return l;\n}\n/*\nReturn a new array with 2x the length containing first\
    \ and last half of array.\n    >>> double_list_range([1L, 2L, 3L])\n    [1L, 2L,\
    \ 3L, 1L, 2L, 3L]\n    >>> double_list_range([1L, 2L, 3L, 4L, 5L, 6L])\n    [1L,\
    \ 2L, 3L, 4L, 5L\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0rg1t9nu.d(55): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0rg1t9nu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164043
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l) \n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164044
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l) \n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164044
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    l[] += 1L;\n\
    \    return l;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164044
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n    { \n        long[]\
    \ retval = new long[l.length];\n        for (int i = 0; i < l.length; i++) {\n\
    \            retval[i] = l[i] + 1L;\n        }\n        return retval;\n    }\n\
    /*\nReturn Fibonacci number of `n`.\n    >>> fib(1)\n    1\n    >>> fib(2)\n \
    \   1\n    >>> fib(4)\n    3\n    >>> fib(11)\n    89\n    >>> fib(99)\n    218922995834555200000\n\
    \    \n*/\nlong fib(long n) \n    { \n        if (n <= 1L) {\n            return\
    \ 1L;\n        }\n        else {\n            return fib(n - 1L) + fib(n - 2L);\n\
    \        }\n    }\n/*\nReturn length of the longest sequence of consecutive increasing\
    \ integers.\n    >>> increasing_len([1L, 2L, 3L, 4L, 5L])\n    5\n    >>> increasing_len([1L,\
    \ 1L, 2L, 3L, 4L, 5L])\n    5\n    >>> increasing_len([1L, 2L, 1L, 1L, 1L, 2L,\
    \ 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L,\
    \ 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L,\
    \ 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L,\
    \ 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz2ag5rh5.d(42): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz2ag5rh5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164043
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (immutable i, v; l) \n    {\n        res[i]\
    \ = v + 1L;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164044
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n        res[i] = e + 1L;\n   \
    \ return res;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164044
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] result\
    \ = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n    {\n     \
    \   result[i] = l[i] + 1L;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164044
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n\tint size = l.length;\n\
    \tlong[] rez = new long[size];\n\tint i = 0;\n\tfor (; i < size; i++)\n\t{\n\t\
    \trez[i] = l[i] + 1L;\n\t}\n\treturn rez;\n}\nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf92mkm7l.d(13): Error: cannot implicitly convert expression `l.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf92mkm7l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164043
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    l = l.map!((a)\
    \ => \n    {\n        return a + 1L;\n    })();\n    return l;\n}\n/*\nGiven a\
    \ list of numbers, return another list of numbers which consists of\n    number\
    \ of numbers in the first list which are greater than x.\n    >>> length_greater_than([1L,\
    \ 2L, 3L, 4L, 1L, 2L, 3L, 4L], 3L)\n    [2L, 2L]\n    >>> length_greater_than([1L,\
    \ 2L, 3L, 4L, 1L, 2L, 3L, 4L], 2L)\n    [3L, 3L]\n    >>> length_greater_than([1L,\
    \ 2L, 3L, 4L, 1L, 2L, 3L, 4L], 1L)\n    [4L, 4L]\n    >>> length_greater_than([1L,\
    \ 2L, 3L, 4L, 1L, 2L, 3L, 4L], 0L)\n    [8L, 8L]\n    >>> length_greater_than([1L,\
    \ 2L, 3L, 4L, 1L, 2L, 3L, 4L], -1L)\n    [8L, 8L]\n*/\nlong[] length_greater_than(long[]\
    \ l, long x) \n{\n    long[] j = l.filter!((a) => \n    {\n        return a >\
    \ x;\n    })().length;\n    j ~= j;\n    return j;\n}\n/*\n    Given a list of\
    \ numbers, return another list of numbers which consists of\n    number of numbers\
    \ in the first list which are equal to x.\n    >>> length_equal_to([1L, 2L, 3L,\
    \ 4L, 1L, 2L, 3L, 4L], 3L)\n    [2L, 2L]\n    >>> length_equal_to([1L, 2L, 3L,\
    \ 4L, 1L, 2L, 3L, 4L], 2L)\n    [2L, 2L]\n    >>> length_equal_to([1L, 2L, 3L,\
    \ 4L\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmupjnq2k.d(42): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmupjnq2k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164043
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    auto tpl =\
    \ tuple(l.length);\n    foreach (i, ref x; l)\n    {\n        tpl[i] = x + 1L;\n\
    \    }\n    return l;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n  \
    \  assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L,\
    \ 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzgbpuc59.d(16): Error: variable `i` cannot be read at compile time

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzgbpuc59.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164043
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    int i = 0;\n\
    \    for (; i < l.length; i++)\n    {\n      l[i]++;\n    }\n    return l;\n}\n\
    /*\nReturn string where each pair of consecutive letters is swapped.\n    >>>\
    \ swap_letters(\"abc\")\n    'bac'\n    >>> swap_letters(\"abcd\")\n    'bacd'\n\
    \    >>> swap_letters(\"abcde\")\n    'bacde'\n    >>> swap_letters(\"abcdef\"\
    )\n    'bacdfe'\n    >>> swap_letters(\"f\")\n    'f'\n    >>> swap_letters(\"\
    \")\n    ''\n*/\nstring swap_letters(string s) \n{\n    int i = 0;\n    int temp\
    \ = 0;\n    char[] chars = s.toCharArray();\n    int len = chars.length;\n   \
    \ for (; i < len; i+=2)\n    {\n      if (i + 1 == len)\n      {\n        break;\n\
    \      }\n      temp = chars[i];\n      chars[i] = chars[i + 1];\n      chars[i\
    \ + 1] = (char)temp;\n    }\n    return new string(chars);\n}\n/*\nReturn array\
    \ with elements decremented by 1.\n    >>> decr_list([1L, 2L, 3L])\n    [0L, 1L,\
    \ 2L]\n    >>> decr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L,\
    \ 4L, 1L, 2L, 2L, 8L, -1L, 122L]\n*/\nlong[] decr_list(long[] l) \n{\n    int\
    \ i = 0;\n    for (; i < l.length; i++)\n    {\n      l[i]--;\n    }\n    return\
    \ l;\n}\n/*\nReturn the number of items in a list whose value is the same as its\
    \ index\n    >>> same_index_value([0L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L])\n    1L\n\
    \    >>> same_index\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn7119ck6.d(49): Error: C style cast illegal, use `cast(char)temp`

    /tmp/tmpn7119ck6.d(69): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn7119ck6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164043
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n {\n     return map!((a)\
    \ => a + 1L)(l);\n }\n/*\nReturn list of lists of size n with elements of list\
    \ l.\n    >>> parts([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L], 3L)\n    [[1L, 2L, 3L],\
    \ [4L, 5L, 6L], [7L, 8L, 9L]]\n    >>> parts([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L,\
    \ 9L], 1L)\n    [[1L], [2L], [3L], [4L], [5L], [6L], [7L], [8L], [9L]]\n    >>>\
    \ parts([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L], 2L)\n    [[1L, 2L], [3L, 4L], [5L,\
    \ 6L], [7L, 8L], [9L]]\n    >>> parts([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L], 4L)\n\
    \    [[1L, 2L, 3L, 4L], [5L, 6L, 7L, 8L], [9L]]\n*/\nlong[][] parts(long[] l,\
    \ long n) \n {\n     return chunk(l, n);\n }\n/*\nReturn a new list containing\
    \ the elements of the input list in reverse order.\n    >>> reverse([1L, 2L, 3L,\
    \ 4L, 5L])\n    [5L, 4L, 3L, 2L, 1L]\n    >>> reverse([])\n    []\n*/\nlong[]\
    \ reverse(long[] l) \n {\n     return l.retro;\n }\n/*\nCheck if list is in ascending\
    \ order.\n    >>> is_sorted([])\n    True\n    >>> is_sorted([1L])\n    True\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    True\n    >>> is_sorted([1L, 2L,\
    \ 5L, 4\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps3boze_f.d(41): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps3boze_f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164043
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    return l.map!(a\
    \ => a + 1L)();\n}\n/*\nReturn array with elements incremented by 1.\n    >>>\
    \ incr_list_2([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list_2([5L, 3L, 5L,\
    \ 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n  \
    \  \n*/\nlong[] incr_list_2(long[] l) \n{\n    l.each!(a => a + 1L)();\n    return\
    \ l;\n}\n/*\nReturn array with elements incremented by 1.\n    >>> incr_list_3([1L,\
    \ 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list_3([5L, 3L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list_3(long[]\
    \ l) \n{\n    return l.map!(a => a + 1L)().array();\n}\n/*\nReturn array with\
    \ elements incremented by 1.\n    >>> incr_list_4([1L, 2L, 3L])\n    [2L, 3L,\
    \ 4L]\n    >>> incr_list_4([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L,\
    \ 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list_4(long[] l) \n{\n\
    \    return l.array().map!(a => a + 1L)();\n}\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list_5([1L, 2L, 3L])\n    [2L,\nunittest\n{\n\
    \    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc7s206ev.d(52): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc7s206ev.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164043
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n    in (long[]) l\n\
    \    body (long[] l)\n{\n    {\n    long[] rv = new long[l.length];\n    int i\
    \ = 0;\n    while (i < l.length) {\n        rv[i] = l[i] + 1L;\n        i = i\
    \ + 1;\n    }\n    return rv;\n    }\n}\n/*\nPairs each element of L with its\
    \ index.\n    >>> list_with_index([])\n    []\n    >>> list_with_index([1L, 2L,\
    \ 3L])\n    [(0L, 1L), (1L, 2L), (2L, 3L)]\n    >>> list_with_index([])\n    []\n\
    \    >>> list_with_index([1L, 2L, 3L])\n    [(0L, 1L), (1L, 2L), (2L, 3L)]\n*/\n\
    tuple_long_long[] list_with_index(long[] l) \n    in (long[]) l\n    body (long[]\
    \ l)\n{\n    {\n    tuple_long_long[] rv = new tuple_long_long[l.length];\n  \
    \  int i = 0;\n    while (i < l.length) {\n        rv[i] = tuple_long_long(i,\
    \ l[i]);\n        i = i + 1;\n    }\n    return rv;\n    }\n}\n/*\nReturns the\
    \ index of the first element in L that is EQUAL TO V.\nReturns -1 if L does not\
    \ contain V.\n    >>> elem_index(0L, [])\n    -1\n    >>> elem_index(0L, [1L,\
    \ 2L, 3L])\n    -1\n    >>> elem_index(2L, [1L, 2L, 3L])\n    1\n    >>> elem_index(2L,\
    \ [1L, 1L, 2L, 2L, 2L, 3L])\n    2\n*/\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe3b_ekk0.d(12): Error: found `[` when expecting `.` following long

    /tmp/tmpe3b_ekk0.d(12): Error: found `]` when expecting identifier following `long`.

    /tmp/tmpe3b_ekk0.d(12): Error: semicolon expected following function declaration

    /tmp/tmpe3b_ekk0.d(37): Error: found `[` when expecting `.` following long

    /tmp/tmpe3b_ekk0.d(37): Error: found `]` when expecting identifier following `long`.

    /tmp/tmpe3b_ekk0.d(37): Error: semicolon expected following function declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe3b_ekk0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164043
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret\
    \ = new long[l.length];\n    int i = 0;\n    for (long x : l) \n    {\n      \
    \  ret[i] = x + 1L;\n        i++;\n    }\n    return ret;\n}\nunittest\n{\n  \
    \  alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpob0rhm78.d(15): Error: semicolon expected, not `:`

    /tmp/tmpob0rhm78.d(15): Error: expression expected, not `:`

    /tmp/tmpob0rhm78.d(15): Error: found `l` when expecting `;` following `for` condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpob0rhm78.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164043
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    auto l_copy\
    \ = l.dup;\n    foreach (i, ref n; l_copy)\n    {\n        n++;\n    }\n    return\
    \ l_copy;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164044
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long len =\
    \ l.length;\n    long[] r = new long[len];\n    for (long i = 0L; (i < len); i++)\n\
    \    {\n        r[cast(size_t)i] = l[cast(size_t)i] + 1L;\n    }\n    return r;\n\
    }\n/*\nReturn array with elements decremented by 1.\n    >>> decr_list([1L, 2L,\
    \ 3L])\n    [0L, 1L, 2L]\n    >>> decr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [4L, 2L, 4L, 1L, 2L, 2L, 8L, -1L, 122L]\n    \n*/\nlong[] decr_list(long[]\
    \ l) \n{\n    long len = l.length;\n    long[] r = new long[len];\n    for (long\
    \ i = 0L; (i < len); i++)\n    {\n        r[cast(size_t)i] = l[cast(size_t)i]\
    \ - 1L;\n    }\n    return r;\n}\n/*\nReturn array reversed.\n    >>> reverse_list([1L,\
    \ 2L, 3L])\n    [3L, 2L, 1L]\n    >>> reverse_list([5L, 3L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L])\n    [123L, 0L, 9L, 3L, 3L, 2L, 5L, 3L, 5L]\n    \n*/\nlong[] reverse_list(long[]\
    \ l) \n{\n    long len = l.length;\n    long[] r = new long[len];\n    for (long\
    \ i = 0L; (i < len); i++)\n    {\n        r[cast(size_t)i] = l[cast(size_t)(len\
    \ - i - 1L)];\n    }\n    return r;\n}\n/*\nReturn sum of all elements.\n    >>>\
    \ sum_list([1L, 2L, 3L])\n    6L\n    >>> sum_\nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy2xr4scg.d(57): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy2xr4scg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164043
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n@safe pure nothrow\
    \ nogc {\n    return l.map!(a => a + 1L)();\n}\n/*\nReturn array with elements\
    \ decremented by 1.\n    >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>>\
    \ decr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L,\
    \ 2L, 8L, -1L, 122L]\n    \n*/\nlong[] decr_list(long[] l) \n@safe pure nothrow\
    \ nogc {\n    return l.map!(a => a - 1L)();\n}\n/*\nReturn array with elements\
    \ squared.\n    >>> square_list([1L, 2L, 3L])\n    [1L, 4L, 9L]\n    >>> square_list([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [25L, 9L, 25L, 4L, 9L, 9L, 81L, 0L,\
    \ 15129L]\n    \n*/\nlong[] square_list(long[] l) \n@safe pure nothrow nogc {\n\
    \    return l.map!(a => a * a)();\n}\n/*\nReturn array with elements cubed.\n\
    \    >>> cube_list([1L, 2L, 3L])\n    [1L, 8L, 27L]\n    >>> cube_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [125L, 27L, 125L, 8L, 27L, 27L, 729L, 0L,\
    \ 18816767L]\n    \n*/\nlong[] cube_list(long[] l) \n@safe pure nothrow nogc {\n\
    \    return l.map!(a => a * a * a)();\n}\n/*\nReturn array with elements to the\
    \ power of 4.\n    >>> pow4_list([1L, 2L, 3L])\n    [\nunittest\n{\n    alias\
    \ candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc62wdw6n.d(12): Error: semicolon expected following function declaration

    /tmp/tmpc62wdw6n.d(12): Error: no identifier for declarator `nogc`

    /tmp/tmpc62wdw6n.d(12): Error: declaration expected, not `{`

    /tmp/tmpc62wdw6n.d(14): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc62wdw6n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164043
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        ret[i] = e + 1L;\n\
    \    }\n    return ret;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164042
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n    in \n    {\n\
    \        assert(l.length > 0);\n    }\n    out\n    (\n        result.length ==\
    \ l.length\n    )\n{\n    long[] ret = new long[l.length];\n    for (size_t i\
    \ = 0u; i < l.length; i++)\n    {\n        ret[i] = l[i] + 1L;\n    }\n    return\
    \ ret;\n}\n/*\nReturn array with elements decremented by 1.\n    >>> decr_list([1L,\
    \ 2L, 3L])\n    [0L, 1L, 2L]\n    >>> decr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L])\n    [4L, 2L, 4L, 1L, 2L, 2L, 8L, -1L, 122L]\n*/\nlong[] decr_list(long[]\
    \ l) \n    in \n    {\n        assert(l.length > 0);\n    }\n    out\n    (\n\
    \        result.length == l.length\n    )\n{\n    long[] ret = new long[l.length];\n\
    \    for (size_t i = 0u; i < l.length; i++)\n    {\n        ret[i] = l[i] - 1L;\n\
    \    }\n    return ret;\n}\n/*\nReturn a copy of a list with all items of the\
    \ original list converted\nto type `T`.\n    >>> to_list!int([1.5, 2.5, 3.5])\n\
    \    [1, 2, 3]\n    >>> to_list!int([5.5, 3.5, 5.5, 2.5, 3.5, 3.5, 9.5, 0.5, 123.5])\n\
    \    [5, 3, 5, 2, 3, 3, 9, 0, 123]\n*/\nT[] to_list(T)(T[] l)\n    in \n    {\n\
    \        assert(l.length > 0);\n    }\n    out\n    (\n        result.length ==\
    \ l.length\n    )\n{\n    T[] ret = new T[l.length];\n\nunittest\n{\n    alias\
    \ candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpni6j8ri2.d(18): Error: found `.` when expecting `)`

    /tmp/tmpni6j8ri2.d(18): Error: statement expected to be `{ }`, not `length`

    /tmp/tmpni6j8ri2.d(19): Error: found `)` when expecting `;` following statement

    /tmp/tmpni6j8ri2.d(20): Error: missing `do { ... }` after `in` or `out`

    /tmp/tmpni6j8ri2.d(42): Error: found `.` when expecting `)`

    /tmp/tmpni6j8ri2.d(42): Error: statement expected to be `{ }`, not `length`

    /tmp/tmpni6j8ri2.d(43): Error: found `)` when expecting `;` following statement

    /tmp/tmpni6j8ri2.d(44): Error: missing `do { ... }` after `in` or `out`

    /tmp/tmpni6j8ri2.d(67): Error: found `.` when expecting `)`

    /tmp/tmpni6j8ri2.d(67): Error: statement expected to be `{ }`, not `length`

    /tmp/tmpni6j8ri2.d(68): Error: found `)` when expecting `;` following statement

    /tmp/tmpni6j8ri2.d(69): Error: missing `do { ... }` after `in` or `out`

    /tmp/tmpni6j8ri2.d(72): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpni6j8ri2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164043
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long len =\
    \ l.length;\n    long[] res = new long[len];\n    long i = 0L;\n    while (i <\
    \ len)\n    {\n        res[i] = l[i] + 1L;\n        i = i + 1L;\n    }\n    return\
    \ res;\n}\n/*\nReturn sum of elements in list\n    >>> sum_list([1L, 2L, 3L])\n\
    \    6L\n    >>> sum_list([1L, 2L, 3L, -1L, -2L, -3L])\n    0L\n    >>> sum_list([1L,\
    \ 2L, 3L, -1L, -2L, -3L, 5L, 10L, 100L])\n    111L\n*/\nlong sum_list(long[] l)\
    \ \n{\n    long sum = 0L;\n    long i = 0L;\n    long n = l.length;\n    while\
    \ (i < n)\n    {\n        sum = sum + l[i];\n        i = i + 1L;\n    }\n    return\
    \ sum;\n}\n/*\nReturn list with all occurrences of item removed\n    >>> remove_all(5L,\
    \ [1L, 2L, 3L, 5L, 5L, 2L, 5L, 5L, 9L, 0L, 5L])\n    [1L, 2L, 3L, 2L, 9L, 0L]\n\
    \    >>> remove_all(1L, [1L, 2L, 3L, 5L, 5L, 2L, 5L, 5L, 9L, 0L, 5L])\n    [2L,\
    \ 3L, 5L, 5L, 2L, 5L, 5L, 9L, 0L, 5L]\n    >>> remove_all(123L, [1L, 2L, 3L, 5L,\
    \ 5L, 2L, 5L, 5L, 9L, 0L, 5L])\n    [1L, 2L, 3L, 5L, 5L, 2L, 5L, 5L, 9L, 0L, 5L]\n\
    */\nlong[] remove_all(long item, long[] l) \n{\n    long\nunittest\n{\n    alias\
    \ candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy4j3vxe6.d(56): Error: no identifier for declarator `long`

    /tmp/tmpy4j3vxe6.d(56): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy4j3vxe6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164043
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n    in (std.math.pure)\n\
    {\n    long[] newL;\n    size_t i;\n    newL = new long[](l.length);\n    foreach\
    \ (i; 0 .. l.length)\n    {\n        newL[i] = l[i] + 1L;\n    }\n    return newL;\n\
    }\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_wp6dpf2.d(12): Error: identifier expected following `.`, not `pure`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_wp6dpf2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164043
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    for (int i\
    \ = 0; i < l.length; i++) \n    {\n        l[i] = l[i] + 1L;\n    }\n    return\
    \ l;\n}\n/*\nReturn array with elements incremented by 1.\n    >>> incr_list([1L,\
    \ 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    for (int i = 0; i < l.length; i++) \n    {\n        l[i] = l[i]\
    \ + 1L;\n    }\n    return l;\n}\n/*\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkx62wbzb.d(35): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkx62wbzb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164043
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n    if (l.empty)\n\
    \    {\n        return typeof(return)();\n    }\n    else\n    {\n        return\
    \ l.map!(a => a + 1L);\n    }\n \nstatic struct matrix(T) \n{\n    T[][] data;\n\
    \    this(T[][] data) \n    {\n        this.data = data;\n    }\n    void reset_matrix(size_t\
    \ rows, size_t cols, T value) \n    {\n        data = new T[][](rows, new T[](cols,\
    \ value));\n    }\n    void reset_matrix(T[][] data) \n    {\n        this.data\
    \ = data;\n    }\n    size_t num_rows() \n    {\n        return data.length;\n\
    \    }\n    size_t num_cols() \n    {\n        return data[0].length;\n    }\n\
    \    T get(size_t i, size_t j) \n    {\n        return data[i][j];\n    }\n  \
    \  void set(size_t i, size_t j, T value) \n    {\n        data[i][j] = value;\n\
    \    }\n    T[] this[size_t i]() \n    {\n        return data[i];\n    }\n   \
    \ void transpose() \n    {\n        for (size_t i = 0; i < num_rows(); i++)\n\
    \        {\n            for (size_t j = i + 1; j < num_cols(); j++)\n        \
    \    {\n                auto temp = data[i][j];\n                data[i][j] =\
    \ data[j][i];\n                data[j][i] = temp;\n            }\n        }\n\
    \    }\n    T[][] to_array() \n    {\n        return data;\n    }\n    void print()\
    \ \n    {\n        writeln(data);\n    }\n    void print() \n    {\n        writefln(\"\
    %s\", data);\n    }\n    void print() \n    {\n        writefln(\"%A\", data);\n\
    \    }\n    string to_string() \n   \nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp1gr8tup.d(12): Error: cannot use function constraints for non-template
    functions. Use `static if` instead

    /tmp/tmpp1gr8tup.d(12): Error: declaration expected, not `if`

    /tmp/tmpp1gr8tup.d(15): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp1gr8tup.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164043
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    assert(l.length\
    \ >= 0);\n    typeof(return) result = new typeof(return)(l.length);\n    foreach\
    \ (i, e; l) \n    {\n        result[i] = e + 1L;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164044
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[0];\n    for (long x in l) {\n        res ~= x + 1L;\n    }\n   \
    \ return res;\n}\n/*\nReturn array with elements incremented by 1.\n    >>> incr_tuple((1L,\
    \ 2L, 3L))\n    (2L, 3L, 4L)\n    >>> incr_tuple((5L, 3L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L))\n    (6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L)\n    \n*/\ntuple(long[])\
    \ incr_tuple(tuple(long[]) t) \n{\n    long[] res = new long[0];\n    foreach\
    \ (long x; t[0]) {\n        res ~= x + 1L;\n    }\n    return tuple(res);\n}\n\
    /*\nReturn array with elements incremented by 1.\n    >>> incr_array(array(1L,\
    \ 2L, 3L))\n    array(2L, 3L, 4L)\n    >>> incr_array(array(5L, 3L, 5L, 2L, 3L,\
    \ 3L, 9L, 0L, 123L))\n    array(6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L)\n    \n\
    */\nlong[] incr_array(long[] a) \n{\n    long[] res = new long[0];\n    foreach\
    \ (long x; a) {\n        res ~= x + 1L;\n    }\n    return res;\n}\n/*\nReturn\
    \ array with elements incremented by 1.\n    >>> incr_array2(array(1L, 2L, 3L))\n\
    \    array(2L, 3L, 4L)\n    >>> incr_array2(array(5L, 3L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L))\n    array(6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L)\nunittest\n{\n\
    \    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsmra9md3.d(14): Error: semicolon expected, not `in`

    /tmp/tmpsmra9md3.d(14): Error: expression expected, not `in`

    /tmp/tmpsmra9md3.d(14): Error: found `l` when expecting `;` following `for` condition

    /tmp/tmpsmra9md3.d(27): Error: function declaration without return type. (Note
    that constructors are always named `this`)

    /tmp/tmpsmra9md3.d(27): Error: no identifier for declarator `tuple(long[])`

    /tmp/tmpsmra9md3.d(27): Error: semicolon expected following function declaration

    /tmp/tmpsmra9md3.d(27): Error: unexpected `(` in declarator

    /tmp/tmpsmra9md3.d(27): Error: function declaration without return type. (Note
    that constructors are always named `this`)

    /tmp/tmpsmra9md3.d(27): Error: found `t` when expecting `)`

    /tmp/tmpsmra9md3.d(27): Error: no identifier for declarator `incr_tuple(tuple(long[]))`

    /tmp/tmpsmra9md3.d(27): Error: semicolon expected following function declaration

    /tmp/tmpsmra9md3.d(27): Error: declaration expected, not `)`

    /tmp/tmpsmra9md3.d(30): Error: declaration expected, not `foreach`'
  stdout: ''
  timestamp: 1660164044
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n  return l.map!((a)\
    \ => a + 1)();\n}\n/*\n    >>> l = [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L,\
    \ 11L, 12L, 13L, 14L, 15L, 16L, 17L, 18L, 19L, 20L, 21L, 22L, 23L, 24L, 25L, 26L,\
    \ 27L, 28L, 29L, 30L, 31L, 32L, 33L, 34L, 35L, 36L, 37L, 38L, 39L, 40L, 41L, 42L,\
    \ 43L, 44L, 45L, 46L, 47L, 48L, 49L, 50L, 51L, 52L, 53L, 54L, 55L, 56L, 57L, 58L,\
    \ 59L, 60L, 61L, 62L, 63L, 64L, 65L, 66L, 67L, 68L, 69L, 70L, 71L, 72L, 73L, 74L,\
    \ 75L, 76L, 77L, 78L, 79L, 80L, 81L, 82L, 83L, 84L, 85L, 86L, 87L, 88L, 89L, 90L,\
    \ 91L, 92L, 93L, 94L, 95L, 96L, 97L, 98L, 99L, 100L, 101L, 102L, 103L, 104L, 105L,\
    \ 106L, 107L, 108L, 109L, 110L, 111L, 112L, 113L, 114L, 115L, 116L, 117L, 118L,\
    \ 119L, 120L, 121L, 122L, 123L, 124L, 125L, 126L, 127L, 128L, 129L, 130L, 131L,\
    \ 132L, 133L, 134L, 135L, 136L, 137L, 138L, 139L, 140L, 141L, 142L, 143L, 144L,\
    \ 145L, 146L, 147L, 148L, 149L, 150L, 151L, 152L, 153L, 154L, 155L, 156L, 157L,\
    \ 158L, 159L, 160L, 161\nunittest\n{\n    alias candidate = incr_list;\n\n   \
    \ assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L,\
    \ 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfah6hg0f.d(15): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfah6hg0f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164044
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, item; l) {\n        res[i] = item + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn dictionary with keys incremented by 1.\n\
    \    >>> incr_dict({1L: \"A\", 2L: \"B\", 3L: \"C\"})\n    {2L: \"A\", 3L: \"\
    B\", 4L: \"C\"}\n    >>> incr_dict({5L: \"A\", 3L: \"b\", 5L: \"C\", 2L: \"D\"\
    , 3L: \"E\", 3L: \"F\", 9L: \"G\", 0L: \"H\", 123L: \"I\"})\n    {6L: \"A\", 4L:\
    \ \"b\", 6L: \"C\", 3L: \"D\", 4L: \"E\", 4L: \"F\", 10L: \"G\", 1L: \"H\", 124L:\
    \ \"I\"}\n    \n*/\nlong[string] incr_dict(long[string] d) \n{\n    long[string]\
    \ res = new long[string]();\n    foreach (k, v; d) {\n        res[k + 1L] = v;\n\
    \    }\n    return res;\n}\n/*\nReturn tuple with elements incremented by 1.\n\
    \    >>> incr_tuple((1L, 2L, 3L))\n    (2L, 3L, 4L)\n    >>> incr_tuple((5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L))\n    (6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L)\n\
    \    \n*/\nstd.typecons.Tuple!(long[]) incr_tuple(std.typecons.Tuple!(long[])\
    \ t) \n{\n    long[] res = new long[t.length];\n    foreach (i, item; t) {\n \
    \       res[i] = item + 1L;\n    }\n    return tuple(res);\n}\n/*\nReturn type\
    \ that do not have `opApply`.\n   \nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmncf0cz1.d(51): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmncf0cz1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164044
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    int li = l.length;\n\
    \    long[] r = new long[l.length];\n    int ri = 0;\n    while (ri < li) {\n\
    \        long rri = l[ri] + 1L;\n        r[ri] = rri;\n        ri = ri + 1;\n\
    \    }\n    return r;\n}\n/*\nReturn array with elements decremented by 1.\n \
    \   >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>> decr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L, 2L, 8L, -1L, 122L]\n\
    \    \n*/\nlong[] decr_list(long[] l) \n{\n    int li = l.length;\n    long[]\
    \ r = new long[l.length];\n    int ri = 0;\n    while (ri < li) {\n        long\
    \ rri = l[ri] - 1L;\n        r[ri] = rri;\n        ri = ri + 1;\n    }\n    return\
    \ r;\n}\n/*\nReturn all elements with the minimum value.\n    >>> min_list([1L,\
    \ 2L, 3L])\n    [1L]\n    >>> min_list([1L, -1L, 0L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,\
    \ 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,\
    \ 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,\
    \ 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,\nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyir_rosl.d(43): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyir_rosl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164044
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res;\n\
    \    foreach (idx, e; l) \n    {\n        e++;\n        res ~= e;\n    }\n   \
    \ return res;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164044
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n  foreach (i,\
    \ e; l)\n  {\n    l[i] = e + 1L;\n  }\n  return l;\n}\nunittest\n{\n    alias\
    \ candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164044
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n  return l.map!(a\
    \ => a + 1L);\n}\n/*\nReturn array with last element incremented by 1.\n    >>>\
    \ incr_tail([1L, 2L, 3L])\n    [1L, 2L, 4L]\n    >>> incr_tail([5L, 3L, 5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L])\n    [5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 124L]\n*/\nlong[]\
    \ incr_tail(long[] l) \n{\n  return l[0 .. $ - 1L] ~ l[$ - 1L .. $].map!(a =>\
    \ a + 1L);\n}\n/*\nMultiply array elements by 2.\n    >>> mult_list([1L, 2L, 3L])\n\
    \    [2L, 4L, 6L]\n    >>> mult_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [10L, 6L, 10L, 4L, 6L, 6L, 18L, 0L, 246L]\n*/\nlong[] mult_list(long[] l)\
    \ \n{\n  return l.map!(a => a * 2L);\n}\n/*\nMultiply last element by 2.\n   \
    \ >>> mult_tail([1L, 2L, 3L])\n    [1L, 2L, 6L]\n    >>> mult_tail([5L, 3L, 5L,\
    \ 2L, 3L, 3L, 9L, 0L, 123L])\n    [5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 246L]\n*/\n\
    long[] mult_tail(long[] l) \n{\n  return l[0 .. $ - 1L] ~ l[$ - 1L .. $].map!(a\
    \ => a * 2L);\n}\n/*\nReturn sum of array elements.\n    >>> sum_list([1L, 2L,\
    \ 3L])\n    6L\n    >>> sum_list([5L, 3L, 5L, 2\nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjc171m0r.d(48): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjc171m0r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164044
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret\
    \ = new long[l.length];\n    for ( int i = 0; i < l.length; i++ ) \n    {\n  \
    \      ret[i] = l[i] + 1L;\n    }\n    return ret;\n}\n/*\nFind the kth largest\
    \ element in the list.\n    >>> kth_largest(1L, [1L, 2L, 3L])\n    3L\n    >>>\
    \ kth_largest(2L, [5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    9L\n    >>> kth_largest(3L,\
    \ [5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    5L\n    >>> kth_largest(5L, [5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    3L\n*/\nlong kth_largest(long k, long[]\
    \ l) \n{\n    long[] sorted_list = sort(l);\n    return sorted_list[sorted_list.length\
    \ - cast(int)k];\n}\n/*\nConvert a list of strings to a list of longs.\n    >>>\
    \ map(string_to_long, [\"123\", \"12\", \"34\", \"567\"])\n    [123L, 12L, 34L,\
    \ 567L]\n*/\nlong string_to_long(const(char)[] s) \n{\n    return to!long(s);\n\
    }\n/*\nPrint the (key,value) pairs of a dictionary in the order that they appear.\n\
    \    >>> d = [\"a\" : 123L, \"b\" : 456L, \"c\" : 789L]\n    >>> print_dict(d)\n\
    \    (\"a\", 123L)\n    (\"b\", 456L)\n    (\"c\", 789L)\n*/\nunittest\n{\n  \
    \  alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6vg_hm_x.d(33): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmp6vg_hm_x.d(43): Error: template instance `to!long` template `to` is not
    defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6vg_hm_x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164044
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n\tlong i = 0;\n\
    \twhile (i < l.length) \n\t{\n\t\tl[i] = l[i] + 1;\n\t\ti = i + 1;\n\t}\n\treturn\
    \ l;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164044
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    return map!(\"\
    a + 1L\")(l);\n}\n/*\nReturn array with elements incremented by 1.\n    >>> incr_list([1L,\
    \ 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list2(long[]\
    \ l) \n{\n    return map!(\"a => a + 1L\")(l);\n}\n/*\nCheck if all elements of\
    \ array are equal.\n    >>> all_equal([0L, 0L, 0L])\n    true\n    >>> all_equal([-1L,\
    \ 1L, 3L])\n    false\n    >>> all_equal([])\n    true\n    \n*/\nunittest\n{\n\
    \    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp61lutf8j.d(13): Error: template instance `map!"a + 1L"` template
    `map` is not defined

    /tmp/tmp61lutf8j.d(25): Error: template instance `map!"a => a + 1L"` template
    `map` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp61lutf8j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164044
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    auto nl =\
    \ l.dup;\n    foreach (ref v; nl) {\n        v++;\n    }\n    return nl;\n}\n\
    unittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164044
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    return map!((a)\
    \ => a + 1)(l);\n}\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6zriih2t.d(13): Error: template instance `map!((a) => a + 1)` template
    `map` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6zriih2t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164042
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n\t\n\tauto result\
    \ = new long[](l.length);\n\tforeach(i, ref e; l)\n\t{\n\t\tresult[i] = e + 1;\n\
    \t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n  \
    \  assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L,\
    \ 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164044
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res;\n\
    \    foreach (l_elem; l)\n    {\n        res ~= l_elem + 1L;\n    }\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164044
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    for (long i = 0; i < l.length; i++) {\n        res[i]\
    \ = l[i] + 1L;\n    }\n    return res;\n}\n/*\nReturn array with items of l1 and\
    \ l2 in alternating order.\n    >>> alternate([1L, 2L, 3L], [4L, 5L, 6L])\n  \
    \  [1L, 4L, 2L, 5L, 3L, 6L]\n    >>> alternate([1L, 2L, 3L], [2L, 3L, 4L, 5L,\
    \ 6L])\n    [1L, 2L, 2L, 3L, 3L, 4L, 5L, 6L]\n    >>> alternate([], [2L, 3L, 4L,\
    \ 5L, 6L])\n    [2L, 3L, 4L, 5L, 6L]\n    >>> alternate([1L, 2L, 3L], [])\n  \
    \  [1L, 2L, 3L]\n*/\nlong[] alternate(long[] l1, long[] l2) \n{\n    long min_len\
    \ = min(l1.length, l2.length);\n    long[] res = new long[l1.length + l2.length];\n\
    \    for (long i = 0; i < min_len; i++) {\n        res[i * 2L] = l1[i];\n    \
    \    res[i * 2L + 1L] = l2[i];\n    }\n    if (l1.length > min_len) {\n      \
    \  for (long i = min_len; i < l1.length; i++) {\n            res[i + min_len]\
    \ = l1[i];\n        }\n    }\n    else {\n        for (long i = min_len; i < l2.length;\
    \ i++) {\n            res[i + min_len] = l2[i];\n        }\n    }\n    return\
    \ res;\n}\n/*\nReturn array of two elements:\n    - sum of elements of l1, l2\n\
    \    - pairwise sum of elements of l1, l2.\n    >>> sum_and_pair\nunittest\n{\n\
    \    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmwwjo771.d(50): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmwwjo771.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164044
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    for (size_t i = 0; i < l.length; i++)\n    {\n  \
    \      res[i] = l[i] + 1L;\n    }\n    return res;\n}\n/*\nTest case provided\n\
    */\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164044
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    return l.map!((a)\
    \ => a + 1L)();\n}\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplhj51ynf.d(13): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplhj51ynf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164044
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    return map!((a)\
    \ => a + 1)(l);\n}\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6zriih2t.d(13): Error: template instance `map!((a) => a + 1)` template
    `map` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6zriih2t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164042
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res;\n\
    \    auto n = l.length;\n    foreach (i; 0 .. n)\n    {\n        res ~= l[i] +\
    \ 1L;\n    }\n    return res;\n}\n/*\nReturn array with elements multiplied by\
    \ `n`.\n    >>> mult_list([1L, 2L, 3L], 2L)\n    [2L, 4L, 6L]\n    >>> mult_list([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L], 11L)\n    [55L, 33L, 55L, 22L, 33L, 33L,\
    \ 99L, 0L, 1353L]\n    >>> mult_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L], 0L)\n\
    \    [0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L]\n*/\nlong[] mult_list(long[] l, long\
    \ n) \n{\n    long[] res;\n    auto m = l.length;\n    foreach (i; 0 .. m)\n \
    \   {\n        res ~= l[i] * n;\n    }\n    return res;\n}\n/*\nReturn array with\
    \ elements multiplied by `n` plus `b`.\n    >>> poly_list([1L, 2L, 3L], 2L, 3L)\n\
    \    [5L, 7L, 9L]\n    >>> poly_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L], 11L,\
    \ -9L)\n    [46L, 27L, 46L, 13L, 24L, 24L, 90L, -9L, 1226L]\n    >>> poly_list([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L], 0L, 5L)\n    [5L, 5L, 5L, 5L, 5L, 5L, 5L,\
    \ 5L, 5L]\n*/\nlong[] poly_list(long[] l, long n, long\nunittest\n{\n    alias\
    \ candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1wtyf5jv.d(50): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1wtyf5jv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164044
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n  int i = 0;\n\
    \  foreach (long x; l) {\n    l[i] = x + 1L;\n    i++;\n  }\n  return l;\n}\n\
    unittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164044
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    return l.map!(a\
    \ => a + 1L);\n}\n/*\nReturn array with elements decremented by 1.\n    >>> decr_list([1L,\
    \ 2L, 3L])\n    [0L, 1L, 2L]\n    >>> decr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L])\n    [4L, 2L, 4L, 1L, 2L, 2L, 8L, -1L, 122L]\n    \n*/\nlong[] decr_list(long[]\
    \ l) \n{\n    return l.map!(a => a - 1L);\n}\n/*\nReturn array of booleans with\
    \ elements `true` on even positions.\n    >>> even_mask([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L, 9L, 10L])\n    [false, true, false, true, false, true, false, true,\
    \ false, true]\n    >>> even_mask([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\n\
    \    [false, true, false, true, false, true, false, true, false, true, false]\n\
    \    >>> even_mask([])\n    []\n    \n*/\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppx99ikry.d(13): Error: no property `map` for type `long[]`

    /tmp/tmppx99ikry.d(25): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppx99ikry.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164044
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] result;\n\
    \    for (long i = 0; i < l.length; i++) \n    {\n        auto e = l[i];\n   \
    \     e++;\n        result[i] = e;\n    }\n    return result;\n}\n/*\nReturn array\
    \ with elements decremented by 1.\n    >>> decr_list([1L, 2L, 3L])\n    [0L, 1L,\
    \ 2L]\n    >>> decr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L,\
    \ 4L, 1L, 2L, 2L, 8L, 0L, 122L]\n*/\nlong[] decr_list(long[] l) \n{\n    long[]\
    \ result;\n    for (long i = 0; i < l.length; i++) \n    {\n        auto e = l[i];\n\
    \        e--;\n        result[i] = e;\n    }\n    return result;\n}\n/*\nReturn\
    \ array with elements incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n   \
    \ [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n  \
    \  [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n*/\nlong[] incr_list(long[] l) \n\
    {\n    long[] result;\n    foreach (i, e; l) \n    {\n        e++;\n        result[i]\
    \ = e;\n    }\n    return result;\n}\n/*\nReturn array with elements decremented\
    \ by 1.\n    >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>> decr_list([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L, 2L, 8L, 0\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjnfmid2o.d(57): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjnfmid2o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164044
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    return l.map!((x)\
    \ => x + 1L)();\n}\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp24empa8o.d(13): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp24empa8o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164044
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n    in(incr_list)\n\
    {\n    size_t N = l.length;\n    long[] res = new long[N];\n    foreach(i, elem;\
    \ l)\n        in(incr_list)\n    {\n        res[i] = elem + 1L;\n    }\n    return\
    \ res;\n}\n/*\nReturn array with elements incremented by 1.\n    >>> incr_list([1L,\
    \ 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list_wrong(long[]\
    \ l) \n    in(incr_list_wrong)\n{\n    size_t N = l.length;\n    long[] res =\
    \ new long[N];\n    foreach(i, elem; l)\n        in(incr_list_wrong)\n    {\n\
    \        if (i >= N) \n            break;\n        res[i] = elem + 1L;\n    }\n\
    \    return res;\n}\n/*\nReturn true if `s` starts with `prefix`.\n    >>> has_prefix(\"\
    prefix\", \"prefix\")\n    true\n    >>> has_prefix(\"\", \"\")\n    true\n  \
    \  >>> has_prefix(\"abc\", \"ab\")\n    true\n    >>> has_prefix(\"abc\", \"bc\"\
    )\n    false\n    >>> has_prefix(\"abc\", \"\")\n    true\n    >>> has_prefix(\"\
    \", \"a\")\n    false\n    \n*/\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa9jfklh1.d(17): Error: found `in` instead of statement

    /tmp/tmpa9jfklh1.d(21): Error: declaration expected, not `return`

    /tmp/tmpa9jfklh1.d(22): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa9jfklh1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164044
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n\treturn l.map!((a)\
    \ => (a + 1));\n}\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn_kgib9y.d(13): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn_kgib9y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164044
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    int i;\n \
    \   int n;\n    long[] result;\n    n = std.container.arraylength(l);\n    result\
    \ = new long[n];\n    for (i = 0; i < n; i++) {\n        result[i] = l[i] + 1L;\n\
    \    }\n    return result;\n}\n/*\nReturn list with element increment by 1.\n\
    \    >>> incr_list(make_list([1L, 2L, 3L]))\n    [2L, 3L, 4L]\n    >>> incr_list(make_list([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]))\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    */\ndlist!long incr_list(dlist!long l) \n{\n    dlist!long result;\n    result\
    \ = new dlist!long();\n    foreach (i; l) {\n        result.push(i + 1L);\n  \
    \  }\n    return result;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    */\ndlist!long incr_list(long[] l) \n{\n    dlist!long result;\n    int i;\n \
    \   int n;\n    n = std.container.arraylength(l);\n    result = new dlist!long();\n\
    \    for (i = 0; i < n; i++) {\n        result.push(l[i] + 1L);\n    }\n    return\
    \ result;\n}\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list(make_list([1L,\
    \ 2L, 3L]))\n    [2L, 3L\nunittest\n{\n    alias candidate = incr_list;\n\n  \
    \  assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L,\
    \ 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiu3h3wxo.d(58): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiu3h3wxo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164044
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret\
    \ = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n    {\n    \
    \    ret[i] = l[i] + 1L;\n    }\n    return ret;\n}\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret\
    \ = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n    {\n    \
    \    ret[i] = l[i] + 1L;\n    }\n    return ret;\n}\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret\
    \ = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n    {\n    \
    \    ret[i] = l[i] + 1L;\n    }\n    return ret;\n}\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4\nunittest\n{\n\
    \    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqs53d43l.d(54): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqs53d43l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164044
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] out\
    \ = new long[l.length];\n    foreach (i, n; l) {\n        out[i] = n + 1L;\n \
    \   }\n    return out;\n}\n/*\nReturn each element of an array cubed.\n    >>>\
    \ cubed_list([1L, 2L, 3L])\n    [1L, 8L, 27L]\n    >>> cubed_list([5L, 3L, 5L,\
    \ 2L, 3L, 3L, 9L, 0L, 123L])\n    [125L, 27L, 125L, 8L, 27L, 27L, 729L, 0L, 1860867L]\n\
    \    \n*/\nlong[] cubed_list(long[] l) \n{\n    long[] out = new long[l.length];\n\
    \    foreach (i, n; l) {\n        out[i] = n * n * n;\n    }\n    return out;\n\
    }\n/*\nReturn an array with one less element.\n    >>> short_list([1L, 2L, 3L])\n\
    \    [1L, 2L]\n    >>> short_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n  \
    \  [5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L]\n    \n*/\nlong[] short_list(long[] l) \n\
    {\n    return l[0 .. $ - 1];\n}\n/*\nReturn an array of even-indexed elements.\n\
    \    >>> even_index_list([1L, 2L, 3L])\n    [1L, 3L]\n    >>> even_index_list([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [5L, 5L, 3L, 9L, 123L]\n    \n*/\nlong[]\
    \ even_index_list(long[] l) \n{\n    long[] out = new long[l.length / 2 + 1];\n\
    \    foreach (i, n; l) {\n        if (i % 2 == 0) {\n            out ~=\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphlmn43_q.d(13): Error: no identifier for declarator `long[]`

    /tmp/tmphlmn43_q.d(13): Error: found `out` instead of statement

    /tmp/tmphlmn43_q.d(15): Error: found `out` instead of statement

    /tmp/tmphlmn43_q.d(17): Error: expression expected, not `out`

    /tmp/tmphlmn43_q.d(29): Error: no identifier for declarator `long[]`

    /tmp/tmphlmn43_q.d(29): Error: found `out` instead of statement

    /tmp/tmphlmn43_q.d(31): Error: found `out` instead of statement

    /tmp/tmphlmn43_q.d(33): Error: expression expected, not `out`

    /tmp/tmphlmn43_q.d(57): Error: no identifier for declarator `long[]`

    /tmp/tmphlmn43_q.d(57): Error: found `out` instead of statement

    /tmp/tmphlmn43_q.d(60): Error: found `out` instead of statement

    /tmp/tmphlmn43_q.d(69): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmphlmn43_q.d(69): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphlmn43_q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164044
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret\
    \ = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n    {\n     \
    \   ret[i] = l[i] + 1L;\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164044
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    return l.map!((x)\
    \ => x + 1L)();\n}\n/*\nReturn a sequence of n zeros.\n    >>> zeros(4)\n    [0L,\
    \ 0L, 0L, 0L]\n    >>> zeros(3)\n    [0L, 0L, 0L]\n    >>> zeros(7)\n    [0L,\
    \ 0L, 0L, 0L, 0L, 0L, 0L]\n    \n*/\nlong[] zeros(long n) \n{\n    return (new\
    \ long[](n)).map!((x) => 0L)();\n}\n/*\nReturn a list of the first n natural numbers.\n\
    \    >>> naturals(3)\n    [1L, 2L, 3L]\n    >>> naturals(5)\n    [1L, 2L, 3L,\
    \ 4L, 5L]\n    >>> naturals(7)\n    [1L, 2L, 3L, 4L, 5L, 6L, 7L]\n    >>> naturals(8)\n\
    \    [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]\n    \n*/\nlong[] naturals(long n) \n{\n\
    \    return iota(n).map!((x) => x + 1L)();\n}\n/*\nReplace all occurrences of\
    \ element x in list L with element y.\n    >>> replace([1L, 2L, 3L, 4L, 5L], 3L,\
    \ 5L)\n    [1L, 2L, 5L, 4L, 5L]\n    >>> replace([1L, 2L, 5L, 4L, 5L], 5L, 2L)\n\
    \    [1L, 2L, 2L, 4L, 2L]\n    >>> replace([1L, 2L, 2L, 4L, 2L], 2L, 5L)\n   \
    \ [1L, 5L, 5L, 4L, 5L]\n    \n*/\nlong[] replace(long[] L, long x, long y) \n\
    {\n    return L.map!((a) => a == x ? y : a)();\n}\n/*\nGiven a\nunittest\n{\n\
    \    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7qojb9sj.d(59): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7qojb9sj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164044
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    size_t len\
    \ = l.length;\n    long[] result = new long[len];\n    for (size_t i = 0; i <\
    \ len; i++) \n    {\n        result[i] = l[i] + 1L;\n    }\n    return result;\n\
    }\n/*\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz_i1m4kp.d(21): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz_i1m4kp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164044
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n    return map!(\"\
    a + 1\")(l);\n/*\nReturn index-th element of the list.\n    >>> get_index([1L,\
    \ 2L, 3L], 1L)\n    2L\n    >>> get_index([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L],\
    \ 9L)\n    0L\n    >>> get_index([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L], 0L)\n\
    \    5L\n    >>> get_index([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L], 10L)\n    ERROR\n\
    \    \n*/\nlong get_index(long[] l, long index) \n    if (index < 0L || index\
    \ >= l.length) \n        return -1L;\n    else \n        return l[index];\n/*\n\
    Return the set of unique elements of list.\n    >>> unique([1L, 2L, 3L])\n   \
    \ [1L, 2L, 3L]\n    >>> unique([1L, 1L, 1L, 2L, 2L, 3L, 3L, 3L])\n    [1L, 2L,\
    \ 3L]\n    >>> unique([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L])\n    [1L]\n    \n*/\n\
    long[] unique(long[] l) \n    return std.algorithm.uniq(l);\n/*\nCheck whether\
    \ list is sorted.\n    >>> is_sorted([1L, 2L, 3L])\n    True\n    >>> is_sorted([1L,\
    \ 2L, 1L])\n    False\n    >>> is_sorted([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L])\n \
    \   True\n    \n*/\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw7wg9d0t.d(12): Error: semicolon expected following function declaration

    /tmp/tmpw7wg9d0t.d(12): Error: function declaration without return type. (Note
    that constructors are always named `this`)

    /tmp/tmpw7wg9d0t.d(12): Error: no identifier for declarator `map!"a + 1"(l)`

    /tmp/tmpw7wg9d0t.d(26): Error: cannot use function constraints for non-template
    functions. Use `static if` instead

    /tmp/tmpw7wg9d0t.d(26): Error: declaration expected, not `if`

    /tmp/tmpw7wg9d0t.d(28): Error: declaration expected, not `else`

    /tmp/tmpw7wg9d0t.d(41): Error: semicolon expected following function declaration

    /tmp/tmpw7wg9d0t.d(41): Error: function declaration without return type. (Note
    that constructors are always named `this`)

    /tmp/tmpw7wg9d0t.d(41): Error: no identifier for declarator `std.algorithm.uniq(l)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw7wg9d0t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164044
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    return l.map!(a\
    \ => a + 1);\n}\n/*\n    >>> upper_list([\"hello\", \"world\"])\n    [\"HELLO\"\
    , \"WORLD\"]\n    >>> upper_list([\"foo\", \"bar\", \"baz\"])\n    [\"FOO\", \"\
    BAR\", \"BAZ\"]\n*/\nstring[] upper_list(string[] s) \n{\n    return s.map!(a\
    \ => a.toUpper());\n}\n/*\n    >>> cmp_list([1, 3, 4], [1, 3, 4])\n    true\n\
    \    >>> cmp_list([1, 3, 4], [1, 3, 5])\n    false\n    >>> cmp_list([1, 3, 4],\
    \ [1, 3])\n    false\n    >>> cmp_list([1, 3], [1, 3, 4])\n    false\n    >>>\
    \ cmp_list([1, 3, 4], [1, 3, 3])\n    false\n*/\nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4avvrbp6.d(13): Error: no property `map` for type `long[]`

    /tmp/tmp4avvrbp6.d(23): Error: no property `map` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4avvrbp6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164044
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret\
    \ = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n    {\n    \
    \    ret[i] = l[i] + 1L;\n    }\n    return ret;\n}\n/*\nReturn array with elements\
    \ decremented by 1.\n    >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>>\
    \ decr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L,\
    \ 2L, 8L, -1L, 122L]\n    \n*/\nlong[] decr_list(long[] l) \n{\n    long[] ret\
    \ = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n    {\n    \
    \    ret[i] = l[i] - 1L;\n    }\n    return ret;\n}\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\ndouble[] incr_list(double[] l) \n{\n    double[]\
    \ ret = new double[l.length];\n    for (int i = 0; i < l.length; i++) \n    {\n\
    \        ret[i] = l[i] + 1.0;\n    }\n    return ret;\n}\n/*\nReturn array with\
    \ elements decremented by 1.\n    >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n\
    \    >>> decr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfb56dv7y.d(54): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfb56dv7y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164044
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n    {\n    \
    \    res[i] = l[i] + 1L;\n    }\n    return res;\n}\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    long i = 0L;\n    for (; i < l.length; i++) \n  \
    \  {\n        res[i] = l[i] + 1L;\n    }\n    return res;\n}\n/*\nReturn array\
    \ with elements incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L,\
    \ 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L,\
    \ 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n \
    \   long[] res = new long[l.length];\n    long i = 0L;\n    for (; i < l.length;\
    \ i++) \n    {\n        res[i] = l[i] + 1L;\n    }\n    return res;\n}\n/*\nReturn\
    \ array with elements incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n   \
    \ [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprqv4qt84.d(56): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprqv4qt84.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164044
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    int i = 0;\n\
    \    long[] ret = new long[l.length];\n    foreach(el; l)\n    {\n        ret[i]\
    \ = el + 1;\n        i++;\n    }\n    return ret;\n}\n/*\n    >>> div_all([8L,\
    \ 6L, 4L, 2L], 2L)\n    [4L, 3L, 2L, 1L]\n    >>> div_all([1L, 2L, 6L, 8L], 2L)\n\
    \    [0L, 1L, 3L, 4L]\n    >>> div_all([2L, 2L, 2L, 1L], 2L)\n    [1L, 1L, 1L,\
    \ 0L]\n*/\nlong[] div_all(long[] l, long divisor) \n{\n    int i = 0;\n    long[]\
    \ ret = new long[l.length];\n    foreach(el; l)\n    {\n        ret[i] = el /\
    \ divisor;\n        i++;\n    }\n    return ret;\n}\n/*\n    >>> dot_product([8L,\
    \ 6L, 4L, 2L], [1L, 2L, 3L, 4L])\n    56L\n    >>> dot_product([1L, 2L, 6L, 8L],\
    \ [5L, 3L, 3L, 2L])\n    52L\n    >>> dot_product([2L, 2L, 2L, 1L], [1L, 2L, 3L,\
    \ 4L])\n    18L\n*/\nlong dot_product(long[] a, long[] b) \n{\n    int i = 0;\n\
    \    long dp = 0;\n    foreach(el; a)\n    {\n        dp += el * b[i];\n     \
    \   i++;\n    }\n    return dp;\n}\n/*\n    >>> dot_product([], [])\n    0L\n\
    \    >>> dot_product([1L, 2L, 3L], [1L, 2L, 3L])\n    14L\n    >>> dot_product([1L,\
    \ 2L, 3L], [])\n    0L\n    >>> dot_product([], [1\nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1qbnxenk.d(60): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1qbnxenk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164044
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    int u = l.length;\n\
    \    long[] r = new long[u];\n    r[0] = l[0] + 1L;\n    int i = 1;\n    for (;\
    \ i < u; i += 1)\n    {\n        r[i] = l[i] + 1L;\n    }\n    return r;\n}\n\
    /*\nReturn array with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n\
    \    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6,\
    \ 3, 4, 4, 10, 1, 124]\n    \n*/\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr6jxr3q_.d(13): Error: cannot implicitly convert expression `l.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr6jxr3q_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164044
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] result\
    \ = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n    {\n     \
    \   result[i] = l[i] + 1L;\n    }\n    return result;\n}\n/*\nReturn array with\
    \ elements incremented by 1.\n    >>> incr_array([1L, 2L, 3L])\n    [2L, 3L, 4L]\n\
    \    >>> incr_array([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L,\
    \ 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_array(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n    {\n\
    \        result[i] = l[i] + 1L;\n    }\n    return result;\n}\n/*\nReturn array\
    \ with elements incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L,\
    \ 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L,\
    \ 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n \
    \   long[] result = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n\
    \    {\n        result[i] = l[i] + 1L;\n    }\n    return result;\n}\n/*\nReturn\
    \ array with elements incremented by 1.\n    >>> incr_array([1L, 2L, 3L])\n  \
    \  [2L, 3L, 4L]\n    >>> incr_array([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg6u4419w.d(54): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg6u4419w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164044
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n    {\n    \
    \    res[i] = l[i] + 1L;\n    }\n    return res;\n}\n/*\nReturn array with elements\
    \ decremented by 1.\n    >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>>\
    \ decr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L,\
    \ 2L, 8L, -1L, 122L]\n    \n*/\nlong[] decr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n    {\n    \
    \    res[i] = l[i] - 1L;\n    }\n    return res;\n}\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_tuple((1L, 2L, 3L))\n    (2L, 3L, 4L)\n    >>>\
    \ incr_tuple((5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L))\n    (6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L)\n    \n*/\nTuple!(long[]) incr_tuple(Tuple!(long[]) t) \n\
    {\n    long[] l = t[0];\n    long[] res = new long[l.length];\n    for (int i\
    \ = 0; i < l.length; i++) \n    {\n        res[i] = l[i] + 1L;\n    }\n    return\
    \ tuple(res);\n}\n/*\nReturn array with elements decremented by 1.\n    >>> decr_tuple((1L,\
    \ 2L, 3L))\n    (0L, 1L, 2L)\n    >>> decr_tuple((5L, 3L,\nunittest\n{\n    alias\
    \ candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoe8qtqsq.d(55): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoe8qtqsq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164044
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    return map!\"\
    a+1\"(l);\n}\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpurou1xpj.d(13): Error: template instance `map!"a+1"` template `map`
    is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpurou1xpj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164044
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n    {\n    long[]\
    \ r;\n    r= new long[l.length];\n    foreach(int i, long j; l) {\n        r[i]=\
    \ j+1L;\n        }\n    return r;\n    }\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164044
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        ret[i] = e + 1L;\n\
    \    }\n    return ret;\n}\n/*\nReturn array with elements incremented by 1.\n\
    \    >>> incr_array([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_array([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_array(long[] l) \n{\n    long[] ret = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        ret[i] = e + 1L;\n    }\n    return ret;\n\
    }\n/*\nReturn array with elements incremented by 1.\n    >>> incr_array2([1L,\
    \ 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_array2([5L, 3L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_array2(long[]\
    \ l) \n{\n    long[] ret = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        ret[i] = e + 1L;\n    }\n    return ret;\n}\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_array3([1L, 2L, 3L])\n    [2L, 3L, 4L]\n   \
    \ >>> incr_array3([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L,\
    \ 4L, 4L, 10L, 1L, 124L]\n    \nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf1jjl65r.d(54): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf1jjl65r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164044
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] result\
    \ = new long[l.length];\n    int i = 0;\n    for (long e : l) \n    {\n      \
    \  result[i] = e + 1L;\n        i += 1;\n    }\n    return result;\n}\n/*\nReturn\
    \ array with elements decremented by 1.\n    >>> decr_list([1L, 2L, 3L])\n   \
    \ [0L, 1L, 2L]\n    >>> decr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n  \
    \  [4L, 2L, 4L, 1L, 2L, 2L, 8L, -1L, 122L]\n    \n*/\nlong[] decr_list(long[]\
    \ l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for (long\
    \ e : l) \n    {\n        result[i] = e - 1L;\n        i += 1;\n    }\n    return\
    \ result;\n}\n/*\nReturn array with element values squared.\n    >>> square_list([1L,\
    \ 2L, 3L])\n    [1L, 4L, 9L]\n    >>> square_list([5L, 3L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L])\n    [25L, 9L, 25L, 4L, 9L, 9L, 81L, 0L, 15129L]\n    \n*/\nlong[]\
    \ square_list(long[] l) \n{\n    long[] result = new long[l.length];\n    int\
    \ i = 0;\n    for (long e : l) \n    {\n        result[i] = e * e;\n        i\
    \ += 1;\n    }\n    return result;\n}\n/*\nReturn array with element values squared.\n\
    \    >>> cube_list([1L, 2L, 3L])\n    [1L, 8L, 27L]\n    >>> cube_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [125L, 27L,\nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfmogf6yr.d(15): Error: semicolon expected, not `:`

    /tmp/tmpfmogf6yr.d(15): Error: expression expected, not `:`

    /tmp/tmpfmogf6yr.d(15): Error: found `l` when expecting `;` following `for` condition

    /tmp/tmpfmogf6yr.d(34): Error: semicolon expected, not `:`

    /tmp/tmpfmogf6yr.d(34): Error: expression expected, not `:`

    /tmp/tmpfmogf6yr.d(34): Error: found `l` when expecting `;` following `for` condition

    /tmp/tmpfmogf6yr.d(53): Error: semicolon expected, not `:`

    /tmp/tmpfmogf6yr.d(53): Error: expression expected, not `:`

    /tmp/tmpfmogf6yr.d(53): Error: found `l` when expecting `;` following `for` condition

    /tmp/tmpfmogf6yr.d(60): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfmogf6yr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164044
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    return map!(x\
    \ => x + 1L)(l);\n}\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpimmyt78f.d(13): Error: template instance `map!((x) => x + 1L)`
    template `map` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpimmyt78f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164044
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    auto r = new\
    \ long[];\n    foreach (i; 0 .. l.length)\n    {\n        r ~= l[i] + 1L;\n  \
    \  }\n    return r;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1tp_8afa.d(13): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    '
  stdout: ''
  timestamp: 1660164044
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    assert(l.length\
    \ > 0);\n    long[] result = new long[l.length];\n    foreach (i, ref v; l) \n\
    \    {\n        result[i] = v + 1L;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpczt0mxjm.d(13): Assertion failure

    ----------------

    ??:? _d_assertp [0x428405]

    ??:? long[] tmpczt0mxjm.incr_list(long[]) [0x427e6b]

    ??:? void tmpczt0mxjm.__unittest_L21_C1() [0x427f1e]

    ??:? void tmpczt0mxjm.__modtest() [0x4281b4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5c7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b45a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306e5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430b94]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430671]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b431]

    ??:? runModuleUnitTests [0x42c39d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char'
  stdout: ''
  timestamp: 1660164044
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (int i, d_long d; zip(i, l)) {\n      res[i]\
    \ = d + 1L;\n    }\n    return res;\n}\n/*\nReturn array with elements incremented\
    \ by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (int i, d_long d; zip(i, l)) {\n      res[i] = d + 1L;\n    }\n \
    \   return res;\n}\n/*\nReturn array with elements incremented by 1.\n    >>>\
    \ incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n\
    */\nlong[] incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n   \
    \ foreach (int i, d_long d; zip(i, l)) {\n      res[i] = d + 1L;\n    }\n    return\
    \ res;\n}\n/*\nReturn array with elements incremented by 1.\n    >>> incr_list([1L,\
    \ 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L])\n    [6L, 4L, 6L, 3L, 4L, 4\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppco7tjb2.d(51): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppco7tjb2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164044
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n@safe pure nothrow\
    \ @nogc\n{\n    long[] res;\n    foreach(item; l)\n    {\n        res ~= item\
    \ + 1L;\n    }\n    return res;\n}\n/*\nReturn the list of all divisors of n,\
    \ including 1 and itself.\n    >>> divisors(1)\n    [1]\n    >>> divisors(2)\n\
    \    [1, 2]\n    >>> divisors(3)\n    [1, 3]\n    >>> divisors(4)\n    [1, 2,\
    \ 4]\n    >>> divisors(5)\n    [1, 5]\n    >>> divisors(12)\n    [1, 2, 3, 4,\
    \ 6, 12]\n    >>> divisors(36)\n    [1, 2, 3, 4, 6, 9, 12, 18, 36]\n*/\nlong[]\
    \ divisors(long n) \n@safe pure nothrow @nogc\n{\n    long[] divisors = [1L];\n\
    \    for(long i = 2L; i <= n / 2L; i++)\n    {\n        if(n % i == 0L)\n    \
    \    {\n            divisors ~= i;\n        }\n    }\n    divisors ~= n;\n   \
    \ return divisors;\n}\n/*\nReturn the greatest common divisor of two integers.\n\
    \    >>> gcd(12, 4)\n    4\n    >>> gcd(12, 16)\n    4\n    >>> gcd(2, 3)\n  \
    \  1\n    >>> gcd(123456789, 987654321)\n    9\n*/\nlong gcd(long m, long n) \n\
    @safe pure nothrow @nogc\n{\n    long a = std.math.abs(m);\n    long b = std.math.abs(n);\n\
    \    while(a != 0L && b != 0L)\n    {\n        if(a > b)\n        {\n        \
    \    a %= b;\n        }\n        else\n        {\n            b %= a;\n      \
    \  }\n    }\n    return a + b;\n}\n/*\nReturn the least common multiple of\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmi0eakmm.d(81): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmi0eakmm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164044
