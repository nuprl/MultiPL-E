name: HumanEval_42_incr_list
language: d
results:
- program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] result;\
    \ \n    foreach (x; l) \n    {\n        result ~= x + 1L;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long size\
    \ = l.length;\n    typeof(return) r = new typeof(return)(size);\n    for (size_t\
    \ i = 0L; i < size; i++)\n    {\n        r[i] = l[i] + 1L;\n    }\n    return\
    \ r;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n    {\n    long[]\
    \ r=new long[l.length];\n    for (int i=0;i<l.length;i++)\n        {\n       \
    \ r[i]=l[i]+1;\n        }\n    return r;\n    }\n/*\nMake a deep copy of an array.\n\
    \   >>> dcopy([1L, 2L, 3L])\n   [1L, 2L, 3L]\n   >>> dcopy([5L, 3L, 5L, 2L, 3L,\
    \ 3L, 9L, 0L, 123L])\n   [5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]\n   \n*/\nlong[]\
    \ dcopy(long[] a) \n    {\n    long[] b=new long[a.length];\n    for (int i=0;i<a.length;i++)\n\
    \        {\n        b[i]=a[i];\n        }\n    return b;\n    }\n/*\nReturn a\
    \ list with the first element removed.\n   >>> tail([1L, 2L, 3L])\n   [2L, 3L]\n\
    \   >>> tail([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n   [3L, 5L, 2L, 3L, 3L,\
    \ 9L, 0L, 123L]\n   \n*/\nlong[] tail(long[] l) \n    {\n    if (l.length==0)\
    \ return l;\n    long[] r=new long[l.length-1];\n    for (int i=1;i<l.length;i++)\n\
    \        {\n        r[i-1]=l[i];\n        }\n    return r;\n    }\n/*\nReturn\
    \ a list with the first element removed.\n   >>> head([1L, 2L, 3L])\n   1L\n \
    \  >>> head([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n   5L\n   \n*/\nlong head(long[]\
    \ l) \n    {\n    if (l.length==0) throw new Error(\"head of\nunittest\n{\n  \
    \  alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfwfhj2du.d(65): Error: unterminated string constant starting\
    \ at /tmp/tmpfwfhj2du.d(65)\\n/tmp/tmpfwfhj2du.d(74): Error: found `End of File`\
    \ when expecting `,`\\n/tmp/tmpfwfhj2du.d(74): Error: found `End of File` when\
    \ expecting `)`\\n/tmp/tmpfwfhj2du.d(74): Error: found `End of File` when expecting\
    \ `;` following `throw` statement\\n/tmp/tmpfwfhj2du.d(74): Error: found `End\
    \ of File` when expecting `}` following compound statement\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfwfhj2du.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret\
    \ = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        ret[i]\
    \ = l[i] + 1L;\n    }\n    return ret;\n}\n/*\nReturn array with elements incremented\
    \ by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nconst long[] incr_list2(long[] l) \n{\n    long[] ret = new long[l.length];\n\
    \    for (int i = 0; i < l.length; i++) {\n        ret[i] = l[i] + 1L;\n    }\n\
    \    return ret;\n}\n/*\nReturn array with elements incremented by 1.\n    >>>\
    \ incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n\
    */\nlong[] incr_list3(long[] l) \n{\n    long[] ret = new long[l.length];\n  \
    \  foreach (i, item; l) {\n        ret[i] = item + 1L;\n    }\n    return ret;\n\
    }\n/*\nReturn array with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdkmgqlpi.d(51): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdkmgqlpi.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n    in(increment)\
    \ \n    out(increment) \n    body \n    return l.map!(a => a + 1); \n \n \n//----------------------------------------------------------------------------\n\
    unittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjy985ero.d(14): Error: statement expected to be `{ }`, not `body`\\\
    n/tmp/tmpjy985ero.d(15): Error: found `return` when expecting `;` following statement\\\
    n/tmp/tmpjy985ero.d(15): Error: no identifier for declarator `l.map!((a) => a\
    \ + 1)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjy985ero.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    for (long i = 0L; i < l.length; i++)\n    {\n   \
    \     res[i] = l[i] + 1L;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] r =\
    \ new long[l.length];\n    foreach (i, x; l) {\n        r[i] = x + 1L;\n    }\n\
    \    return r;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    foreach (elem;\
    \ l)\n        elem++;\n    return l;\n}\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpjlknlqov.d(22): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4283bd]\\n??:? void tmpjlknlqov.__unittest_L17_C1()\
    \ [0x427f8d]\\n??:? void tmpjlknlqov.__modtest() [0x428140]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c3cb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b25e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4303f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4308a0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43037d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b235]\\n??:? runModuleUnitTests [0x42c1a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42880c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428793]\\n??:? _d_run_main [0x4286fe]\\n??:? main [0x428153]\\\
    n??:? __libc_start_main [0x2d31a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n  long[] t = new\
    \ long[l.length];\n  foreach (i, ref e; l) \n  {\n    t[i] = e + 1L;\n  }\n  return\
    \ t;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret\
    \ = new long[l.length];\n    foreach (i, v; l)\n        ret[i] = v + 1L;\n   \
    \ return ret;\n}\n/*\nConcatenate lists.\n    >>> concat_lists([[1L, 2L], [3L,\
    \ 4L], [5L, 6L]])\n    [1L, 2L, 3L, 4L, 5L, 6L]\n    >>> concat_lists([[1L, 2L,\
    \ 3L], [4L, 5L, 6L]])\n    [1L, 2L, 3L, 4L, 5L, 6L]\n    >>> concat_lists([[1L,\
    \ 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]])\n    [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L,\
    \ 9L]\n*/\nlong[] concat_lists(long[][] ll) \n{\n    long[] ret = new long[0L];\n\
    \    foreach (i, v; ll)\n        ret ~= v;\n    return ret;\n}\n/*\nSwap each\
    \ pair of elements in input list.\n    >>> swap_each_pair([1L, 2L, 3L, 4L, 5L,\
    \ 6L])\n    [2L, 1L, 4L, 3L, 6L, 5L]\n    >>> swap_each_pair([1L, 2L, 3L, 4L,\
    \ 5L])\n    [2L, 1L, 4L, 3L, 5L]\n    >>> swap_each_pair([1L, 2L, 3L, 4L])\n \
    \   [2L, 1L, 4L, 3L]\n*/\nlong[] swap_each_pair(long[] l) \n{\n    long[] ret\
    \ = new long[l.length];\n    foreach (i, v; l)\n    {\n        ret[i] = l[i ^\
    \ 1L];\n    }\n    return ret;\n}\n/*\nReturn tuple of input list and its length.\n\
    \    >>> list_and_length([1L,\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkiqatieq.d(52): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkiqatieq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    return l.map!(x\
    \ => x + 1);\n}\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2pp3jx55.d(13): Error: no property `map` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2pp3jx55.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    foreach (i,\
    \ ref elem; l)\n    {\n        elem++;\n    }\n    return l;\n}\n/*\nReturn array\
    \ with elements decremented by 1.\n    >>> decr_list([3L, 2L, 1L])\n    [2L, 1L,\
    \ 0L]\n    >>> decr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L,\
    \ 4L, 1L, 2L, 2L, 8L, -1L, 122L]\n*/\nlong[] decr_list(long[] l) \n{\n    foreach\
    \ (i, ref elem; l)\n    {\n        elem--;\n    }\n    return l;\n}\n/*\nReturn\
    \ the sum of all elements in an array.\n    >>> list_sum([1L, 2L, 3L])\n    6L\n\
    \    >>> list_sum([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    298L\n*/\nlong\
    \ list_sum(long[] l) \n{\n    long sum = 0;\n    foreach (elem; l)\n    {\n  \
    \      sum += elem;\n    }\n    return sum;\n}\n/*\nReturn the average of all\
    \ elements in an array.\n    >>> list_average([1L, 2L, 3L])\n    2L\n    >>> list_average([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    33L\n*/\nlong list_average(long[] l)\
    \ \n{\n    long sum = 0;\n    foreach (elem; l)\n    {\n        sum += elem;\n\
    \    }\n    return sum / l.length;\n}\n/*\nReturn the median of all elements in\
    \ an array.\n    >>> list_median([1L, 2L, 3L])\n    2L\n    >>> list_median([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    3L\nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwp4leois.d(66): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwp4leois.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] result\
    \ = new long[l.length];\n    foreach (i, e; l) \n    {\n        result[i] = e\
    \ + 1L;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n  long[] res =\
    \ new long[l.length];\n  foreach (int i, long elem; l) \n  {\n    res[i] = elem\
    \ + 1L;\n  }\n  return res;\n}\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n  int s = l.length;\n\
    \  long[] r = new long[s];\n  for (int i = 0; i < s; i++) {\n    r[i] = l[i] +\
    \ 1L;\n  }\n  return r;\n}\n/*\nReturn a sub array of an array, starting at position\
    \ n and ending with\nposition n+l.\n    \n    >>> sub_array([1L, 2L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L], 4L, 3L)\n    [5L, 6L, 7L]\n    \n*/\nlong[] sub_array(long[]\
    \ l, long n, long length) \n{\n  int s = l.length;\n  long[] r = new long[s];\n\
    \  for (int i = 0; i < s; i++) {\n    r[i] = l[(int)(n + i)];\n  }\n  return r;\n\
    }\n/*\nGenerate fibonacci series up to nth term.\n    \n    >>> fibonacci(10L)\n\
    \    [1L, 1L, 2L, 3L, 5L, 8L, 13L, 21L, 34L, 55L]\n    \n*/\nlong[] fibonacci(long\
    \ n) \n{\n  long[] r = new long[(int)(n)];\n  if (n == 0L) {\n    return r;\n\
    \  }\n  r[0] = 1L;\n  if (n == 1L) {\n    return r;\n  }\n  r[1] = 1L;\n  if (n\
    \ == 2L) {\n    return r;\n  }\n  for (int i = 2; i < n; i++) {\n    r[i] = r[i\
    \ - 1] + r[i - 2];\n  }\n  return r;\n}\n/*\nGet the largest value in a list of\
    \ numbers.\n    \n    >>> list_max([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L])\n   \
    \ 9L\n    \n*/\nlong list_max(long[] l) \n{\n \nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp75ouzg94.d(33): Error: C style cast illegal, use `cast(int)(n\
    \ + i)`\\n/tmp/tmp75ouzg94.d(46): Error: C style cast illegal, use `cast(int)n`\\\
    n/tmp/tmp75ouzg94.d(73): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp75ouzg94.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret\
    \ = new long[l.length];\n    int i = 0;\n    for (long x in l) \n    {\n     \
    \   ret[i] = x + 1L;\n        i += 1;\n    }\n    return ret;\n}\n/*\nReturn array\
    \ with all elements incremented by 1.\n    >>> incr_list_v2([1L, 2L, 3L])\n  \
    \  [2L, 3L, 4L]\n    >>> incr_list_v2([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n*/\nlong[] incr_list_v2(long[] l)\
    \ \n{\n    return l.map!(x => x + 1L);\n}\n/*\nReturn array with all elements\
    \ incremented by 1.\n    >>> incr_list_v3([1L, 2L, 3L])\n    [2L, 3L, 4L]\n  \
    \  >>> incr_list_v3([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L,\
    \ 3L, 4L, 4L, 10L, 1L, 124L]\n*/\nlong[] incr_list_v3(long[] l) \n{\n    return\
    \ l.map!(x => x + 1L).array;\n}\n/*\nReturn array with all elements incremented\
    \ by 1.\n    >>> incr_list_v4([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list_v4([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    */\nlong[] incr_list_v4(long[] l) \n{\n    return l.map!(x => x + 1L\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3bqgwaqo.d(15): Error: semicolon expected, not `in`\\n/tmp/tmp3bqgwaqo.d(15):\
    \ Error: expression expected, not `in`\\n/tmp/tmp3bqgwaqo.d(15): Error: found\
    \ `l` when expecting `;` following `for` condition\\n/tmp/tmp3bqgwaqo.d(54): Error:\
    \ found `unittest` when expecting `)` following template argument list\\n/tmp/tmp3bqgwaqo.d(55):\
    \ Error: found `{` when expecting `;` following `return` statement\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3bqgwaqo.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    int i = 0;\n    for (auto x; l) \n    {\n       \
    \ res[i] = x + 1L;\n        i++;\n    }\n    return res;\n}\n/*\nReturn first\
    \ element of array.\n    >>> head([1L, 2L, 3L])\n    1L\n    >>> head([1L])\n\
    \    1L\n    >>> head([])\n    null\n*/\nlong head(long[] l) \n{\n    if (l.length\
    \ != 0) \n    {\n        return l[0];\n    }\n    else \n    {\n        return\
    \ null;\n    }\n}\n/*\nReturn array without first element.\n    >>> tail([1L,\
    \ 2L, 3L])\n    [2L, 3L]\n    >>> tail([1L])\n    []\n    >>> tail([])\n    []\n\
    */\nlong[] tail(long[] l) \n{\n    if (l.length != 0) \n    {\n        return\
    \ l[1..$];\n    }\n    else \n    {\n        return l;\n    }\n}\n/*\nReturn array\
    \ in reverse order.\n    >>> reverse([1L, 2L, 3L])\n    [3L, 2L, 1L]\n    >>>\
    \ reverse([1L])\n    [1L]\n    >>> reverse([])\n    []\n*/\nlong[] reverse(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    for (int i = 0; i < l.length;\
    \ i++) \n    {\n        res[i] = l[l.length - i - 1L];\n    }\n    return res;\n\
    }\n/*\nCheck if all elements of array are equal.\n    >>> are_equal([1L, 1L, 1L])\n\
    \    true\n    >>> are_equal([1L, 2L, 1L])\n    false\n    >>> are_equal([])\n\
    \    true\n*/\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1rmrqhis.d(15): Error: no identifier for declarator `x`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1rmrqhis.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, idx; l) {\n        res[idx] = i + 1L;\n\
    \    }\n    return res;\n}\n/*\nAdd absolute values of numbers in the array.\n\
    \    >>> abs_sum([5L, 3L, -1L, -2L, 3L, 4L, -3L, -3L, -3L])\n    22L\n    >>>\
    \ abs_sum([10L, -10L, 1L, 1L, 1L, 1L, 1L, 1L, -10L, -10L])\n    18L\n*/\nlong\
    \ abs_sum(long[] l) \n{\n    long res = 0L;\n    foreach (i; l) {\n        res\
    \ += abs(i);\n    }\n    return res;\n}\n/*\nReturn the index of the first occurrence\
    \ of needle in haystack.\n    >>> find_first_idx([\"a\", \"a\", \"b\", \"c\",\
    \ \"a\", \"b\"], \"b\")\n    2\n    >>> find_first_idx([\"a\", \"a\", \"b\", \"\
    c\", \"a\", \"b\"], \"d\")\n    -1\n*/\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp38_75cjc.d(15): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x4285b6]\\n??:? long[] tmp38_75cjc.incr_list(long[]) [0x427f1b]\\\
    n??:? void tmp38_75cjc.__unittest_L41_C1() [0x428055]\\n??:? void tmp38_75cjc.__modtest()\
    \ [0x428284]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5e3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b476]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430701]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430bb0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43068d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b44d]\\n??:? runModuleUnitTests [0x42c3b9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42894f]\\n??:? _d_run_main [0x4288ba]\\n??:? main [0x428297]\\\
    n??:? __libc_start_main [0x3bf73554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] new_l\
    \ = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        new_l[i]\
    \ = l[i] + 1L;\n    }\n    return new_l;\n}\n/*\nReturn squared array.\n    >>>\
    \ square_list([1L, 2L, 3L])\n    [1L, 4L, 9L]\n    >>> square_list([5L, 3L, 5L,\
    \ 2L, 3L, 3L, 9L, 0L, 123L])\n    [25L, 9L, 25L, 4L, 9L, 9L, 81L, 0L, 15129L]\n\
    \    \n*/\nlong[] square_list(long[] l) \n{\n    long[] new_l = new long[l.length];\n\
    \    for (int i = 0; i < l.length; i++) {\n        new_l[i] = l[i] * l[i];\n \
    \   }\n    return new_l;\n}\n/*\nReturn only even array elements.\n    >>> even_list([1L,\
    \ 2L, 3L])\n    [2L]\n    >>> even_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [2L, 0L, 123L]\n    \n*/\nlong[] even_list(long[] l) \n{\n    long[] new_l\
    \ = new long[l.length];\n    int ctr = 0;\n    for (int i = 0; i < l.length; i++)\
    \ {\n        if (l[i] % 2L == 0L) {\n            new_l[ctr] = l[i];\n        \
    \    ctr += 1;\n        }\n    }\n    return new_l[0 .. ctr];\n}\n/*\nReturn only\
    \ odd array elements.\n    >>> odd_list([1L, 2L, 3L])\n    [1L, 3L]\n    >>> odd_list([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [5L, 3\nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzs8lbgka.d(55): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzs8lbgka.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    return l.map!(a\
    \ => a + 1L);\n}\n/*\nReturn array with elements incremented by 1.\n    >>> incr_list([1L,\
    \ 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list_for(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l) \n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn array with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list_foreach(long[] l) \n{\n    long[]\
    \ res = new long[l.length];\n    foreach (i, e; l) \n    {\n        res[i] = e\
    \ + 1L;\n    }\n    return res;\n}\n/*\nReturn array with elements incremented\
    \ by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list_for_range(long[] l) \n{\n    long[] res = new long[\n\
    unittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0fgamj99.d(60): Error: expression expected, not `unittest`\\\
    n/tmp/tmp0fgamj99.d(61): Error: found `{` when expecting `]`\\n/tmp/tmp0fgamj99.d(62):\
    \ Error: semicolon expected, not `alias`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp0fgamj99.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
