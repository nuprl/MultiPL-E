name: HumanEval_66_digitSum
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\nTask\n    Write a function that\
  \ takes a string as input and returns the sum of the upper characters only'\n  \
  \  ASCII codes.\n\n    Examples:\n    >>> digitSum(\"\")\n    0L\n    >>> digitSum(\"\
  abAB\")\n    131L\n    >>> digitSum(\"abcCd\")\n    67L\n    >>> digitSum(\"helloE\"\
  )\n    69L\n    >>> digitSum(\"woArBld\")\n    131L\n    >>> digitSum(\"aAaaaXa\"\
  )\n    153L\n    \n*/\nlong digitSum(string s) \n"
tests: "unittest\n{\n    alias candidate = digitSum;\n\n    assert(candidate(\"\"\
  ) == 0L);\n    assert(candidate(\"abAB\") == 131L);\n    assert(candidate(\"abcCd\"\
  ) == 67L);\n    assert(candidate(\"helloE\") == 69L);\n    assert(candidate(\"woArBld\"\
  ) == 131L);\n    assert(candidate(\"aAaaaXa\") == 153L);\n    assert(candidate(\"\
  \ How are yOu?\") == 151L);\n    assert(candidate(\"You arE Very Smart\") == 327L);\n\
  }\nvoid main(){}"
completions: ["{\n    long sum = 0;\n    foreach(immutable c; s)\n    {\n        if(c\
    \ >= 'A' && c <= 'Z')\n            sum += (long)c;\n    }\n    return sum;\n}",
  "{\n    long sum = 0;\n    foreach(c; s) {\n        if(c.isUpper) sum += c;\n  \
    \  }\n    return sum;\n}", "{\n    long sum = 0;\n    foreach(char c; s) \n  \
    \  {\n        if (c >= 'A' && c <= 'Z')\n            sum += cast(long)c;\n   \
    \ }\n    return sum;\n}", "{\n    long sum = 0;\n    for (long i = 0; i < s.length;\
    \ i++)\n    {\n        if (s[i] >= 65 && s[i] <= 90)\n        {\n            sum\
    \ += (s[i] - 64);\n        }\n    }\n    return sum;\n}", "{\n    string upper\
    \ = filter!(c => isUpper(c))(s);\n    long sum = 0;\n    foreach(i;0..upper.length)\
    \ {\n        sum += upper[i];\n    }\n    return sum;\n}", "{\n    long sum =\
    \ 0;\n    foreach(char c; s) \n    {\n        if (c >= 'A' && c <= 'Z') \n   \
    \     {\n            sum += (long)c;\n        }\n    }\n    return sum;\n}", "{\n\
    \tlong sum = 0;\n\tfor (int i = 0; i < s.length; i++)\n\t{\n\t\tint c = s[i];\n\
    \t\tif (c >= 65 && c <= 90)\n\t\t{\n\t\t\tsum += c;\n\t\t}\n\t}\n\treturn sum;\n\
    }", "{\n    long sum = 0;\n    foreach(c; s)\n    {\n        if(char.isUpper(c))\n\
    \        {\n            sum += cast(long)char.toUpper(c);\n        }\n    }\n\
    \    return sum;\n}", "{\n    auto result = 0L;\n    auto upperBound = 'Z'.to!long;\n\
    \    auto lowerBound = 'A'.to!long;\n    foreach(character; s)\n    {\n      \
    \  if (character.to!long <= upperBound && character.to!long >= lowerBound)\n \
    \       {\n            result += character.to!long;\n        }\n    }\n    return\
    \ result;\n}", "{\n    long result = 0;\n    foreach(c; s)\n    {\n        result\
    \ += c.toUpper().to!long();\n    }\n    return result;\n}", "{\n    return accumulate!(\"\
    a + b\")(map!(\"toUpper(a) == a ? to!int(a) : 0\")(s));\n}", "{\n    int ret =\
    \ 0;\n    foreach(c; s)\n    {\n        if(c <= 'Z' && c >= 'A')\n           \
    \ ret += c;\n    }\n    return ret;\n}", "{\n    long sum = 0;\n    foreach(char\
    \ c; s)\n    {\n        if (c >= 'A' && c <= 'Z')\n            sum += c;\n   \
    \ }\n    return sum;\n}", "{\n    long sum = 0;\n    foreach(c; s)\n    {\n  \
    \      if(c >= 'A' && c <= 'Z')\n            sum += (long)c;\n    }\n    return\
    \ sum;\n}", "{\n\tlong sum = 0;\n\tforeach(ch; s)\n\t{\n\t\tif(ch >= 'A' && ch\
    \ <= 'Z')\n\t\t\tsum += ch;\n\t}\n\treturn sum;\n}", "{\n    import std.ascii\
    \ : isUpper;\n    return s.filter!(isUpper).sum!(a => a);\n}\n/*\nTask\n    Given\
    \ an array of integers, return the indexes of the two numbers that they add up\
    \ to a specific target.\n    You may assume that each input would have exactly\
    \ one solution, and you may not use the same element twice.", "{\n    string temp\
    \ = \"\";\n    long sum = 0;\n    foreach(c; s)\n    {\n        if(c.isUpper)\n\
    \        {\n            sum += c;\n        }\n    }\n    return sum;\n}", "{\n\
    \    long result = 0;\n    foreach(c;s)\n    {\n        if(c >= 'A' && c <= 'Z')\n\
    \        {\n            // printf(\"%c %lld\\n\",c,cast(long)c);\n           \
    \ result += cast(long)c;\n        }\n    }\n    return result;\n}", "{\n    import\
    \ std.typecons;\n    import std.math;\n    auto uppers = s.filter!(c => c >= 'A'\
    \ && c <= 'Z');\n    auto ints = uppers.map!(x => x.to!int);\n    auto sum = reduce!((acc,\
    \ x) => acc + x)(ints);\n    return sum;\n}", "{\n    long sum = 0;\n    foreach(immutable\
    \ c; s)\n    {\n        if (c >= 'A' && c <= 'Z')\n            sum += c;\n   \
    \ }\n    return sum;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
