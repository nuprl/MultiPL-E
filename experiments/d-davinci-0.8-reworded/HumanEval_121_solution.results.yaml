name: HumanEval_121_solution
language: d
results:
- program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long total = 0;\n    for(int i =\
    \ 0; i < lst.length; i += 2)\n    {\n        if(lst[i] % 2 == 1)\n        {\n\
    \            total += lst[i];\n        }\n    }\n    return total;\n}\nunittest\n\
    {\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) ==\
    \ 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    long temp;\n\
    \    long i;\n    foreach( i; 0..lst.length)\n    {\n        temp = lst[i];\n\
    \        if(i % 2 == 0)\n        {\n            if(temp % 2 != 0)\n          \
    \  {\n                sum += temp;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3a6elgar.d(21): Error: variable `i` is shadowing variable `tmp3a6elgar.solution.i`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3a6elgar.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n  //  Your code here.\n   long sum =\
    \ 0;\n   for(int i = 0; i < lst.length; i++) {\n       if(i % 2 == 0 && lst[i]\
    \ % 2 != 0) {\n           sum += lst[i];\n       }\n   }\n   return sum;\n}\n\
    unittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum=0;\n    for(int i=0;i<lst.length;i++)\n\
    \    {\n      if(i%2==0 && lst[i]%2!=0)\n      {\n        sum+=lst[i];\n     \
    \ }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    size_t len = lst.length;\n    size_t\
    \ i = 0;\n    size_t j = 0;\n    long[] lst2 = new long[len];\n    for(i; i <\
    \ len; i+=2)\n    {\n        lst2[j] = lst[i];\n        j++;\n    }\n    len =\
    \ j;\n    j = 0;\n    i = 0;\n    long[] lst3 = new long[len];\n    for(i; i <\
    \ len; i++)\n    {\n        if(lst2[i]%2 == 1)\n        {\n            lst3[j]\
    \ = lst2[i];\n            j++;\n        }\n    }\n    len = j;\n    i = 0;\n \
    \   long sum = 0;\n    for(i; i < len; i++)\n    {\n        sum += lst3[i];\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n \
    \   assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpumbbenll.d(22): Error: `i` has no effect\\n/tmp/tmpumbbenll.d(31):\
    \ Error: `i` has no effect\\n/tmp/tmpumbbenll.d(42): Error: `i` has no effect\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpumbbenll.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    if(lst.empty)\
    \ return sum;\n    for(int i = 0; i < lst.length; i += 2)\n    {\n        if(lst[i]\
    \ % 2 != 0)\n        {\n            sum += lst[i];\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7po0w3fh.d(19): Error: no property `empty` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7po0w3fh.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long result = 0;\n    foreach(i,\
    \ l; lst)\n    {\n        if (i % 2 != 0 && i != lst.length - 1)\n        {\n\
    \            result += l;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) ==\
    \ 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpw3r2ltd9.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428275]\\n??:? void tmpw3r2ltd9.__unittest_L28_C1()\
    \ [0x427de8]\\n??:? void tmpw3r2ltd9.__modtest() [0x427ff4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c283]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b116]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302a9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430758]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430235]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0ed]\\n??:? runModuleUnitTests [0x42c059]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42864b]\\n??:? _d_run_main [0x4285b6]\\n??:? main [0x428007]\\\
    n??:? __libc_start_main [0x7581d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long[uint] oddEven;\n    foreach(i,\
    \ v; lst)\n    {\n        if(v % 2 == 0)\n        {\n            if(i % 2 == 0)\n\
    \            {\n                oddEven ~= v;\n            }\n        }\n    }\n\
    \    return reduce!\"a + b\"(oddEven);\n}\nunittest\n{\n    alias candidate =\
    \ solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5knds_t5.d(25): Error: cannot append type `long` to type `long[uint]`\\\
    n/tmp/tmp5knds_t5.d(29): Error: template instance `reduce!\"a + b\"` template\
    \ `reduce` is not defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\",\
    \ \"/tmp/tmp5knds_t5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    int cnt = 0;\n    long res = 0;\n\
    \    for (int i = 0; i < lst.length; i++)\n    {\n        if (i % 2 == 0 && lst[i]\
    \ % 2 != 0)\n        {\n            res += lst[i];\n        }\n    }\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    return lst.filter!((x, i) => i %\
    \ 2 == 0 && x % 2 == 1).sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp99pqzgf.d(18): Error: no property `filter` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp99pqzgf.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(a; lst)\n\
    \    {\n        if (a%2 == 1 && lst.indexOf(a)%2 == 0)\n        {\n          \
    \  sum += a;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpiilaryok.d(21): Error: no property `indexOf` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiilaryok.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long res = 0;\n    for(int i = 0;\
    \ i < lst.length; i+=2)\n    {\n        if (lst[i] % 2 != 0)\n        {\n    \
    \        res += lst[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n \
    \   alias candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n\
    \    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    \n    long sum = 0;\n    foreach(i,\
    \ v; lst)\n    {\n        if(i % 2 != 0 && v % 2 == 0)\n        {\n          \
    \  sum += v;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpv14d7h2e.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42827d]\\n??:? void tmpv14d7h2e.__unittest_L29_C1()\
    \ [0x427df4]\\n??:? void tmpv14d7h2e.__modtest() [0x428000]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c28b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b11e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430760]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43023d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0f5]\\n??:? runModuleUnitTests [0x42c061]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286cc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428653]\\n??:? _d_run_main [0x4285be]\\n??:? main [0x428013]\\\
    n??:? __libc_start_main [0xd0080554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    \n    long sum = 0;\n    for(auto\
    \ i = 0; i < lst.length; i++)\n    {\n        if(i % 2 == 0 && lst[i] % 2 != 0)\n\
    \        {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    return lst.indexedMap!(a => a[0]\
    \ * a[1] % 2 == 0 ? a[0] : 0).sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpoow07yhc.d(18): Error: no property `indexedMap` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoow07yhc.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n  int count = 0;\n  long sum = 0;\n\
    \  foreach(int n; lst)\n  {\n    if(n%2 != 0 && count%2 == 0)\n    {\n      sum\
    \ += n;\n    }\n    count++;\n  }\n  return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpspr8nn4z.d(20): Error: cannot implicitly convert expression `__r73[__key74]`\
    \ of type `long` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\",\
    \ \"/tmp/tmpspr8nn4z.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long n = 2;\n    long solution =\
    \ 0;\n    foreach(i; lst)\n    {\n        if (n % 2 == 0)\n        {\n       \
    \     if (i % 2 != 0)\n            {\n                solution += i;\n       \
    \     }\n        }\n        n++;\n    }\n    return solution;\n}\nunittest\n{\n\
    \    alias candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) ==\
    \ 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    auto sum = 0L;\n    auto index =\
    \ 0L;\n    auto odd = false;\n    foreach(i; lst)\n    {\n        odd = (i % 2)\
    \ != 0;\n        if(index % 2 == 0 && odd)\n        {\n            sum += i;\n\
    \        }\n        index++;\n    }\n    return sum;\n}\nunittest\n{\n    alias\
    \ candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n \
    \   assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long result = 0;\n    foreach(i,\
    \ v; lst)\n    {\n        if(i % 2 == 0 && v % 2 != 0)\n        {\n          \
    \  result += v;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n \
    \   assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
    \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n\
    \    \n*/\nlong solution(long[] lst) \n{\n    long sum = 0;\n    foreach(int i,\
    \ long e; lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n     \
    \       sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias\
    \ candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n \
    \   assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
