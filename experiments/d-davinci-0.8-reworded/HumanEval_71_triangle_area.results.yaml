language: d
name: HumanEval_71_triangle_area
results:
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    float p = (a + b + c) / 2.0;\n    if(p - a > 0 &&\
    \ p - b > 0 && p - c > 0)\n        return sqrt(p * (p - a) * (p - b) * (p - c));\n\
    \    return -1;\n}\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmplxm8gvdr.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f45]

    ??:? void tmplxm8gvdr.__unittest_L24_C1() [0x427b73]

    ??:? void tmplxm8gvdr.__modtest() [0x427cc8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc6b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aafe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc91]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430140]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc1d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aad5]

    ??:? runModuleUnitTests [0x42ba41]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428394]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164565
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    float s;\n    if ( (a+b) > c && (a+c) > b && (b+c)\
    \ > a )\n    {\n        s = (a+b+c)/2.0;\n        return sqrt(s*(s-a)*(s-b)*(s-c));\n\
    \    }\n    else\n    {\n        return -1.0;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n  \
    \  assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L) ==\
    \ 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp0zu9op60.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f1d]

    ??:? void tmp0zu9op60.__unittest_L30_C1() [0x427b47]

    ??:? void tmp0zu9op60.__modtest() [0x427c9c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aad6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc69]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430118]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbf5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aaad]

    ??:? runModuleUnitTests [0x42ba19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42836c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164565
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    if (a <= 0 || b <= 0 || c <= 0) return -1.0;\n \
    \   if (a + b > c && a + c > b && b + c > a)\n    {\n        float p = float(a\
    \ + b + c) / 2;\n        return sqrt(p * (p - a) * (p - b) * (p - c));\n    }\n\
    \    return -1.0;\n}\nunittest\n{\n    alias candidate = triangle_area;\n\n  \
    \  assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) ==\
    \ -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpl_6i15jj.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f25]

    ??:? void tmpl_6i15jj.__unittest_L27_C1() [0x427b53]

    ??:? void tmpl_6i15jj.__modtest() [0x427ca8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc4b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aade]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc71]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430120]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbfd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aab5]

    ??:? runModuleUnitTests [0x42ba21]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428374]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164565
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    return -1;\n}\nunittest\n{\n    alias candidate\
    \ = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L,\
    \ 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpw9frwlrw.d(25): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e8d]

    ??:? void tmpw9frwlrw.__unittest_L21_C1() [0x427a4d]

    ??:? void tmpw9frwlrw.__modtest() [0x427c10]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbb3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa46]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbd9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430088]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb65]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa1d]

    ??:? runModuleUnitTests [0x42b989]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282dc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164565
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    float s = float(a + b + c) / 2;\n    float area\
    \ = sqrt(s * (s - a) * (s - b) * (s - c));\n    if (a + b > c && a + c > b &&\
    \ b + c > a) {\n        return area;\n    } else {\n        return -1;\n    }\n\
    }\n/*\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc5ysg4by.d(27): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc5ysg4by.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164565
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    float f1 = (float) a;\n    float f2 = (float) b;\n\
    \    float f3 = (float) c;\n    if (a == 0 || b == 0 || c == 0) { return -1; }\n\
    \    else if (a > b + c || b > a + c || c > a + b) { return -1; }\n    else {\
    \ return abs(0.5 * (f1 * f2) * sin(180 / f3)); }\n}\n// Using type tuples (TupleT!(int,\
    \ int, int))\nfloat triangle_area2(TupleT!(long, long, long) triangle)\n{\n  \
    \  float f1 = (float) triangle[0];\n    float f2 = (float) triangle[1];\n    float\
    \ f3 = (float) triangle[2];\n    if (triangle[0] == 0 || triangle[1] == 0 || triangle[2]\
    \ == 0) { return -1; }\n    else if (triangle[0] > triangle[1] + triangle[2] ||\
    \ triangle[1] > triangle[0] + triangle[2] || triangle[2] > triangle[0] + triangle[1])\
    \ { return -1; }\n    else { return abs(0.5 * (f1 * f2) * sin(180 / f3)); }\n\
    }\n// Using array, the same as the code above\nfloat triangle_area3(long[] triangle)\n\
    {\n    float f1 = (float) triangle[0];\n    float f2 = (float) triangle[1];\n\
    \    float f3 = (float) triangle[2];\n    if (triangle[0] == 0 || triangle[1]\
    \ == 0 || triangle[2] == 0) { return -1; }\n    else if (triangle[0] > triangle[1]\
    \ + triangle[2] || triangle[1] > triangle[0] + triangle[2] || triangle[2] > triangle[0]\
    \ + triangle[1]) { return -1; }\n    else { return abs(0.5 * (f1 * f2) * sin(180\
    \ / f3)); }\n}\n/*\n    Given a string containing spaces, we want to use \"%20\"\
    \ in place of each\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmir8zxxz.d(19): Error: C style cast illegal, use `cast(float)a`

    /tmp/tmpmir8zxxz.d(20): Error: C style cast illegal, use `cast(float)b`

    /tmp/tmpmir8zxxz.d(21): Error: C style cast illegal, use `cast(float)c`

    /tmp/tmpmir8zxxz.d(29): Error: C style cast illegal, use `cast(float)triangle[0]`

    /tmp/tmpmir8zxxz.d(30): Error: C style cast illegal, use `cast(float)triangle[1]`

    /tmp/tmpmir8zxxz.d(31): Error: C style cast illegal, use `cast(float)triangle[2]`

    /tmp/tmpmir8zxxz.d(39): Error: C style cast illegal, use `cast(float)triangle[0]`

    /tmp/tmpmir8zxxz.d(40): Error: C style cast illegal, use `cast(float)triangle[1]`

    /tmp/tmpmir8zxxz.d(41): Error: C style cast illegal, use `cast(float)triangle[2]`

    /tmp/tmpmir8zxxz.d(46): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmir8zxxz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164565
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    float semi_perimeter = (a + b + c) / 2;\n    float\
    \ area = sqrt(semi_perimeter * (semi_perimeter - a) * (semi_perimeter - b) * (semi_perimeter\
    \ - c));\n    if (area > 0) {\n        return area;\n    }\n    return -1;\n}\n\
    unittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2rk0qtyb.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427efd]

    ??:? void tmp2rk0qtyb.__unittest_L26_C1() [0x427b2b]

    ??:? void tmp2rk0qtyb.__modtest() [0x427c80]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc23]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aab6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc49]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300f8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbd5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa8d]

    ??:? runModuleUnitTests [0x42b9f9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42834c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164565
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    // [a, b, c]\n    if ((a + b) <= c || (a + c) <=\
    \ b || (b + c) <= a)\n        return -1;\n    else {\n        // half of perimeter\n\
    \        long p = (a + b + c) / 2;\n        // area of the triangle\n        double\
    \ area = sqrt(p * (p - a) * (p - b) * (p - c));\n        return round(area * 100.0)\
    \ / 100.0;\n    }\n}\nunittest\n{\n    alias candidate = triangle_area;\n\n  \
    \  assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) ==\
    \ -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb8triko2.d(26): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb8triko2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164565
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    real[][] sides = [[a, b, c], [b, c, a], [c, a, b]];\n\
    \    real[][] triangles = [[a, b, c], [b, c, a], [c, a, b]];\n    real[3] one_triangle;\n\
    \    real p, area;\n    foreach(i, sides) {\n        one_triangle = sides[i];\n\
    \        p = (one_triangle[0] + one_triangle[1] + one_triangle[2]) / 2;\n    \
    \    area = sqrt(p * (p - one_triangle[0]) * (p - one_triangle[1]) * (p - one_triangle[2]));\n\
    \        if (isNaN(area)) {\n            area = -1;\n        }\n        triangles[i]\
    \ = area;\n    }\n    return max(triangles)[0];\n}\nunittest\n{\n    alias candidate\
    \ = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L,\
    \ 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkgj_wi48.d(23): Error: no identifier for declarator `sides`

    /tmp/tmpkgj_wi48.d(23): Error: found `)` when expecting `;`

    /tmp/tmpkgj_wi48.d(32): Error: found `return` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkgj_wi48.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164565
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    if(a <= 0 || b <= 0 || c <= 0)\n        return -1;\n\
    \    if(a >= b + c || b >= a + c || c >= a + b)\n        return -1;\n    auto\
    \ s = (a + b + c) / 2.0;\n    return sqrt(s * (s - a) * (s - b) * (s - c));\n\
    }\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpoi5ah0eb.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f2d]

    ??:? void tmpoi5ah0eb.__unittest_L26_C1() [0x427b5b]

    ??:? void tmpoi5ah0eb.__modtest() [0x427cb0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc53]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aae6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc79]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430128]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc05]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aabd]

    ??:? runModuleUnitTests [0x42ba29]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42837c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164565
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    auto s = (a + b + c) / 2.0;\n    if (a + b > c &&\
    \ a + c > b && b + c > a)\n    {\n        return sqrt(s * (s - a) * (s - b) *\
    \ (s - c));\n    }\n    return -1;\n}\nunittest\n{\n    alias candidate = triangle_area;\n\
    \n    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L)\
    \ == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmplamrgkjf.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f0d]

    ??:? void tmplamrgkjf.__unittest_L26_C1() [0x427b37]

    ??:? void tmplamrgkjf.__modtest() [0x427c8c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc33]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aac6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc59]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430108]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbe5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa9d]

    ??:? runModuleUnitTests [0x42ba09]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42835c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164565
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    return (a * b * c == 0) ? float(-1) : float(2 *\
    \ a * b * c) / float(a + b + c);\n}\nunittest\n{\n    alias candidate = triangle_area;\n\
    \n    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L)\
    \ == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmptf81clmt.d(25): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ee5]

    ??:? void tmptf81clmt.__unittest_L21_C1() [0x427aa5]

    ??:? void tmptf81clmt.__modtest() [0x427c68]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa9e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300e0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbbd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa75]

    ??:? runModuleUnitTests [0x42b9e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428334]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164565
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    if (a + b > c && a + c > b && b + c > a)\n    {\n\
    \        float s = (a + b + c) / 2;\n        return sqrt(s * (s - a) * (s - b)\
    \ * (s - c));\n    }\n    else\n    {\n        return -1;\n    }\n}\nunittest\n\
    {\n    alias candidate = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) ==\
    \ 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy07w8fm2.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f05]

    ??:? void tmpy07w8fm2.__unittest_L29_C1() [0x427b33]

    ??:? void tmpy07w8fm2.__modtest() [0x427c88]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc2b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aabe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc51]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430100]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbdd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa95]

    ??:? runModuleUnitTests [0x42ba01]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428354]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164565
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    if(a + b > c && a + c > b && b + c > a)\n    {\n\
    \        float s = (a + b + c) / 2.0;\n        return sqrt(s * (s - a) * (s -\
    \ b) * (s - c));\n    }\n    return -1;\n}\nunittest\n{\n    alias candidate =\
    \ triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L,\
    \ 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6qy60evl.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f0d]

    ??:? void tmp6qy60evl.__unittest_L26_C1() [0x427b3b]

    ??:? void tmp6qy60evl.__modtest() [0x427c90]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc33]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aac6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc59]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430108]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbe5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa9d]

    ??:? runModuleUnitTests [0x42ba09]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42835c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164565
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    auto aF = float(a);\n    auto bF = float(b);\n \
    \   auto cF = float(c);\n    return float(formatFloat(sqrt(aF*bF*cF / (aF+bF+cF)),\
    \ \"%.2f\"));\n}\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3q71j8_n.d(22): Error: undefined identifier `formatFloat`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3q71j8_n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164565
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    long[] sides = [a, b, c];\n    sort(sides);\n  \
    \  if (sides[0] + sides[1] <= sides[2])\n        return -1L;\n    else\n     \
    \   return (a * b / 2.0f);\n}\nunittest\n{\n    alias candidate = triangle_area;\n\
    \n    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L)\
    \ == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpokc668qx.d(20): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpokc668qx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164565
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    float s = (a + b + c) / 2.0;\n    if(a+b>c && a+c>b\
    \ && b+c>a) \n    {\n        return sqrt(s * (s - a) * (s - b) * (s - c));\n \
    \   }\n    return -1.0;\n}\nunittest\n{\n    alias candidate = triangle_area;\n\
    \n    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L)\
    \ == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_6nghjz3.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427efd]

    ??:? void tmp_6nghjz3.__unittest_L26_C1() [0x427b2b]

    ??:? void tmp_6nghjz3.__modtest() [0x427c80]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc23]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aab6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc49]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300f8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbd5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa8d]

    ??:? runModuleUnitTests [0x42b9f9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42834c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164565
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    float p = (a + b + c) / 2.0;\n    return sqrt(p\
    \ * (p - a) * (p - b) * (p - c));\n}\nunittest\n{\n    alias candidate = triangle_area;\n\
    \n    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L)\
    \ == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmplb7_1pq6.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427edd]

    ??:? void tmplb7_1pq6.__unittest_L22_C1() [0x427acd]

    ??:? void tmplb7_1pq6.__modtest() [0x427c5c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc03]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa96]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc29]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300d8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbb5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa6d]

    ??:? runModuleUnitTests [0x42b9d9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42832c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164565
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    auto triangle = tuple(a, b, c);\n    auto f = std.algorithm.find;\n\
    \    if (f(triangle, x => x <= 0)) return -1L;\n    auto mi = std.algorithm.minElement;\n\
    \    auto [mn, mx] = tuple(mi(triangle), std.algorithm.maxElement(triangle));\n\
    \    if (mn + mx < mx) return -1L;\n    auto sum = std.algorithm.reduce!((a, b)\
    \ => a + b)(triangle);\n    auto s = sum / 2.0;\n    return sqrt(s * (s - a) *\
    \ (s - b) * (s - c));\n}\nunittest\n{\n    alias candidate = triangle_area;\n\n\
    \    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L)\
    \ == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdm0sxcb2.d(23): Error: basic type expected, not `[`

    /tmp/tmpdm0sxcb2.d(23): Error: found `,` when expecting `]`

    /tmp/tmpdm0sxcb2.d(23): Error: semicolon expected, not `]`

    /tmp/tmpdm0sxcb2.d(23): Error: found `]` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdm0sxcb2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164565
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    auto s = (a + b + c) / 2;\n    float answer = sqrt(s\
    \ * (s - a) * (s - b) * (s - c));\n    if (answer > 0)\n        return answer;\n\
    \    else\n        return -1;\n}\nunittest\n{\n    alias candidate = triangle_area;\n\
    \n    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L)\
    \ == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph3oc2k5b.d(20): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph3oc2k5b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164565
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    float s = (a + b + c) / 2;\n    float area = sqrt(s\
    \ * (s - a) * (s - b) * (s - c));\n    if(area < 0)\n        return -1;\n    return\
    \ area;\n}\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqa3p7ojx.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x427efd]

    ??:? void tmpqa3p7ojx.__unittest_L25_C1() [0x427af1]

    ??:? void tmpqa3p7ojx.__modtest() [0x427c80]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc23]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aab6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc49]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300f8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbd5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa8d]

    ??:? runModuleUnitTests [0x42b9f9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42834c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164565
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    if (a<=0 || b<=0 || c<=0)\n        return -1;\n\
    \    if (a+b<=c || a+c<=b || b+c<=a)\n        return -1;\n    float p = (a+b+c)/2.0;\n\
    \    return sqrt(p*(p-a)*(p-b)*(p-c));\n}\nunittest\n{\n    alias candidate =\
    \ triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L,\
    \ 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpxeeb3jvn.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f2d]

    ??:? void tmpxeeb3jvn.__unittest_L26_C1() [0x427b57]

    ??:? void tmpxeeb3jvn.__modtest() [0x427cac]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc53]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aae6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc79]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430128]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc05]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aabd]

    ??:? runModuleUnitTests [0x42ba29]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42837c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164565
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{ \n    auto s = (a + b + c) / 2.0; \n  \n    // (s*(s-a)*(s-b)*(s-c))\
    \ is the area \n    auto ans = sqrt(s * (s - a) * (s - b) * (s - c)); \n  \n \
    \   return ans; \n} \nunittest\n{\n    alias candidate = triangle_area;\n\n  \
    \  assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) ==\
    \ -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp1rfzl4mk.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x427eed]

    ??:? void tmp1rfzl4mk.__unittest_L26_C1() [0x427add]

    ??:? void tmp1rfzl4mk.__modtest() [0x427c6c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc13]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaa6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc39]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300e8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbc5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa7d]

    ??:? runModuleUnitTests [0x42b9e9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42833c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164565
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    if(a<=0L || b<=0L || c<=0L) return -1L;\n    //triangle\
    \ inequality theorem\n    if(a >= b+c || b >= a+c || c >= a+b) return -1L;\n \
    \   float s = (a+b+c)/2.0f;\n    return sqrt(s*(s-a)*(s-b)*(s-c));\n}\nunittest\n\
    {\n    alias candidate = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) ==\
    \ 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8jkdq9qo.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f25]

    ??:? void tmp8jkdq9qo.__unittest_L25_C1() [0x427b53]

    ??:? void tmp8jkdq9qo.__modtest() [0x427ca8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc4b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aade]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc71]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430120]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbfd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aab5]

    ??:? runModuleUnitTests [0x42ba21]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428374]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164565
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    float p = float(a + b + c) / 2;\n    float s = float(p\
    \ * (p - a) * (p - b) * (p - c));\n    if (s <= 0)\n        return -1;\n    return\
    \ sqrt(s);\n}\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprrhz8rv0.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f1d]

    ??:? void tmprrhz8rv0.__unittest_L25_C1() [0x427b47]

    ??:? void tmprrhz8rv0.__modtest() [0x427c9c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aad6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc69]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430118]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbf5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aaad]

    ??:? runModuleUnitTests [0x42ba19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42836c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164565
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    if(is(typeof(assumeSorted3(a, b, c)))) \n    {\n\
    \        float s = (a + b + c) / 2.0f;\n        float area = s * (s - a) * (s\
    \ - b) * (s - c);\n        if(area > 0) return sqrt(area);\n    }\n    return\
    \ -1;\n}\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqpjpa8jy.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e8d]

    ??:? void tmpqpjpa8jy.__unittest_L27_C1() [0x427a4d]

    ??:? void tmpqpjpa8jy.__modtest() [0x427c10]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbb3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa46]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbd9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430088]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb65]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa1d]

    ??:? runModuleUnitTests [0x42b989]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282dc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164565
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    float s = (a + b + c) / 2.0;\n    return ((s * (s\
    \ - a) * (s - b) * (s - c)) != 0) ? sqrt(s * (s - a) * (s - b) * (s - c)) : -1;\n\
    }\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpc2_5wha4.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f2d]

    ??:? void tmpc2_5wha4.__unittest_L22_C1() [0x427b21]

    ??:? void tmpc2_5wha4.__modtest() [0x427cb0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc53]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aae6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc79]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430128]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc05]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aabd]

    ??:? runModuleUnitTests [0x42ba29]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42837c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164565
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    if (a+b>c && a+c>b && b+c>a)\n    {\n        float\
    \ s = (a+b+c)/2.0;\n        float t = s*(s-a)*(s-b)*(s-c);\n        return sqrt(t);\n\
    \    }\n    else\n    {\n        return -1.0;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n  \
    \  assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L) ==\
    \ 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp15ng9h0v.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f3d]

    ??:? void tmp15ng9h0v.__unittest_L30_C1() [0x427b67]

    ??:? void tmp15ng9h0v.__modtest() [0x427cbc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc63]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaf6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc89]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430138]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc15]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aacd]

    ??:? runModuleUnitTests [0x42ba39]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42838c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164565
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    if(a+b <= c || a+c <= b || b+c <= a)\n        return\
    \ -1.0;\n    auto s = (a+b+c)/2.0;\n    auto area = sqrt(s*(s-a)*(s-b)*(s-c));\n\
    \    return cast(float)area;\n}\nunittest\n{\n    alias candidate = triangle_area;\n\
    \n    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L)\
    \ == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpio0iavdo.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f1d]

    ??:? void tmpio0iavdo.__unittest_L25_C1() [0x427b47]

    ??:? void tmpio0iavdo.__modtest() [0x427c9c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aad6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc69]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430118]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbf5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aaad]

    ??:? runModuleUnitTests [0x42ba19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42836c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164565
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    //check if is valid triangle\n    if(a < b + c &&\
    \ b < a + c && c < a + b)\n    {\n        float p = (a + b + c) / 2.0;\n     \
    \   return sqrt(p * (p - a) * (p - b) * (p - c));\n    }\n    return -1;\n}\n\
    unittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp1n8nb_l1.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f0d]

    ??:? void tmp1n8nb_l1.__unittest_L27_C1() [0x427b3b]

    ??:? void tmp1n8nb_l1.__modtest() [0x427c90]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc33]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aac6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc59]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430108]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbe5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa9d]

    ??:? runModuleUnitTests [0x42ba09]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42835c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164565
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    float res = -1;\n    float p = 0;\n    long[] sort_arr\
    \ = [a, b, c];\n    std.algorithm.sort(sort_arr);\n    if (sort_arr[0] + sort_arr[1]\
    \ > sort_arr[2]) {\n        p = (a + b + c) / 2;\n        res = sqrt(p * (p -\
    \ a) * (p - b) * (p - c));\n    }\n    return res;\n}\nunittest\n{\n    alias\
    \ candidate = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n  \
    \  assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L) ==\
    \ 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjmrx2esf.d(22): Error: undefined identifier `algorithm` in package
    `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjmrx2esf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164565
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    if(a + b > c && b + c > a && a + c > b)\n    {\n\
    \        return -1;\n    }\n    else\n    {\n        float s = (a + b + c) / 2;\n\
    \        return sqrt(s * (s - a) * (s - b) * (s - c));\n    }\n}\nunittest\n{\n\
    \    alias candidate = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n\
    \    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L)\
    \ == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmphtla0v56.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f05]

    ??:? void tmphtla0v56.__unittest_L29_C1() [0x427ac5]

    ??:? void tmphtla0v56.__modtest() [0x427c88]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc2b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aabe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc51]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430100]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbdd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa95]

    ??:? runModuleUnitTests [0x42ba01]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428354]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164566
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    float area = -1.0f;\n    //float s = (a + b + c)\
    \ / 2.0f;\n    //float t = sqrt(s * (s - a) * (s - b) * (s - c));\n    //auto\
    \ t = sqrt(pow(a, 2) + pow(b, 2) - 2 * a * b * cos(c));\n    area = (float)sqrt(max(0.0f,\
    \ max(0.0f, (float)pow(a, 2) + (float)pow(b, 2) - (float)pow(c, 2)) / 2.0f) *\
    \ (min(a, b) - max(0.0f, (float)pow(a, 2) + (float)pow(b, 2) - (float)pow(c, 2))\
    \ / 2.0f));\n    return (area >= 0.0f) ? area : -1.0f;\n}\nunittest\n{\n    alias\
    \ candidate = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n  \
    \  assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L) ==\
    \ 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2wi0u2k5.d(23): Error: C style cast illegal, use `cast(float)pow(a,
    2)`

    /tmp/tmp2wi0u2k5.d(23): Error: C style cast illegal, use `cast(float)pow(b, 2)`

    /tmp/tmp2wi0u2k5.d(23): Error: C style cast illegal, use `cast(float)pow(c, 2)`

    /tmp/tmp2wi0u2k5.d(23): Error: C style cast illegal, use `cast(float)pow(a, 2)`

    /tmp/tmp2wi0u2k5.d(23): Error: C style cast illegal, use `cast(float)pow(b, 2)`

    /tmp/tmp2wi0u2k5.d(23): Error: C style cast illegal, use `cast(float)pow(c, 2)`

    /tmp/tmp2wi0u2k5.d(23): Error: C style cast illegal, use `cast(float)sqrt(max(0.00000F,
    max(0.00000F, cast(float)pow(a, 2) + cast(float)pow(b, 2) - cast(float)pow(c,
    2)) / 2.00000F) * (min(a, b) - max(0.00000F, cast(float)pow(a, 2) + cast(float)pow(b,
    2) - cast(float)pow(c, 2)) / 2.00000F))`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2wi0u2k5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164565
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    if(a < 1 || b < 1 || c < 1)\n        return -1.0;\n\
    \    if(a + b > c && a + c > b && b + c > a)\n    {\n        auto p = (a + b +\
    \ c) / 2.0;\n        return sqrt(p * (p - a) * (p - b) * (p - c));\n    }\n  \
    \  return -1.0;\n}\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvflobunh.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f2d]

    ??:? void tmpvflobunh.__unittest_L28_C1() [0x427b5b]

    ??:? void tmpvflobunh.__modtest() [0x427cb0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc53]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aae6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc79]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430128]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc05]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aabd]

    ??:? runModuleUnitTests [0x42ba29]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42837c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164566
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    float s = 0.5 * (a + b + c);\n    float area = sqrt(s\
    \ * (s - a) * (s - b) * (s - c));\n    return area;\n}\n \nunittest\n{\n    alias\
    \ candidate = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n  \
    \  assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L) ==\
    \ 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp926tuaql.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ee5]

    ??:? void tmp926tuaql.__unittest_L24_C1() [0x427ad9]

    ??:? void tmp926tuaql.__modtest() [0x427c68]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa9e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300e0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbbd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa75]

    ??:? runModuleUnitTests [0x42b9e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428334]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164566
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n  float result = 0;\n  if (a + b > c && a + c > b &&\
    \ b + c > a)\n    result = a * b * sin(c) / 2;\n  else\n    result = -1.0;\n \
    \ return result;\n}\nunittest\n{\n    alias candidate = triangle_area;\n\n   \
    \ assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) ==\
    \ -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprs72olq8.d(21): Error: `std.math.sin` called with argument types
    `(long)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(830):     `std.math.sin(real
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(836):     `std.math.sin(float
    x)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprs72olq8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164565
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    long T = a + b + c;\n    float s = cast(float)T\
    \ / 2;\n    float r = s * (s - a) * (s - b) * (s - c);\n    float _t = s * s *\
    \ s;\n    if (_t == 0 || r < 0) \n    {\n        return -1;\n    }\n    else \n\
    \    {\n        float triangle_area = sqrt(r);\n        return triangle_area;\n\
    \    }\n}\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpw58k1ycw.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f45]

    ??:? void tmpw58k1ycw.__unittest_L33_C1() [0x427b73]

    ??:? void tmpw58k1ycw.__modtest() [0x427cc8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc6b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aafe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc91]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430140]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc1d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aad5]

    ??:? runModuleUnitTests [0x42ba41]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428394]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164566
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    float p;\n    float s;\n    float area;\n    if\
    \ (a + b > c && a + c > b && b + c > a)\n    {\n        p = (a + b + c) / 2;\n\
    \        s = p * (p - a) * (p - b) * (p - c);\n        area = sqrt(s);\n     \
    \   return area;\n    }\n    else \n    {\n        return -1;\n    }\n}\nunittest\n\
    {\n    alias candidate = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) ==\
    \ 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpw5yvjjzo.d(40): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f6d]

    ??:? void tmpw5yvjjzo.__unittest_L34_C1() [0x427b97]

    ??:? void tmpw5yvjjzo.__modtest() [0x427cec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab26]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fcb9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430168]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aafd]

    ??:? runModuleUnitTests [0x42ba69]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4283bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164566
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    float s = (a + b + c) / 2;\n    if(a + b > c &&\
    \ a + c > b && b + c > a) \n    {\n        return sqrt(s * (s - a) * (s - b) *\
    \ (s - c));\n    }\n    return -1;\n}\nunittest\n{\n    alias candidate = triangle_area;\n\
    \n    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L)\
    \ == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpbn_361ka.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f05]

    ??:? void tmpbn_361ka.__unittest_L26_C1() [0x427b2f]

    ??:? void tmpbn_361ka.__modtest() [0x427c84]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc2b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aabe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc51]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430100]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbdd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa95]

    ??:? runModuleUnitTests [0x42ba01]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428354]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164566
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    long sides[] = [a, b, c];\n    if(a<=0 || b<=0 ||\
    \ c<=0 || a+b <= c || a+c <= b || b+c <= a)\n        return -1;\n    sort(sides);\n\
    \    float res = (float)(sides[0] + sides[1]);\n    res = res*sides[2]*0.5;\n\
    \    return res;\n}\nunittest\n{\n    alias candidate = triangle_area;\n\n   \
    \ assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) ==\
    \ -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7r3xb646.d(19): Deprecation: instead of C-style syntax, use D-style
    syntax `long[] sides`

    /tmp/tmp7r3xb646.d(23): Error: C style cast illegal, use `cast(float)(sides[0]
    + sides[1])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7r3xb646.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164565
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    // No triangle possible if any side is less than\
    \ 1\n    // or if the sum of two sides is less than the third\n    if (a < 1 ||\
    \ b < 1 || c < 1 || a + b < c || a + c < b || b + c < a) {\n        return -1.0;\n\
    \    }\n    // compute the semi-perimeter\n    float s = (a + b + c) / 2.0;\n\
    \    // compute the area using Heron's formula\n    float area = (s * (s - a)\
    \ * (s - b) * (s - c));\n    if (area < 0) {\n        return -1.0;\n    }\n  \
    \  return sqrt(area);\n}\nunittest\n{\n    alias candidate = triangle_area;\n\n\
    \    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L)\
    \ == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp773m8ktl.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f75]

    ??:? void tmp773m8ktl.__unittest_L33_C1() [0x427b9f]

    ??:? void tmp773m8ktl.__modtest() [0x427cf4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc9b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab2e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fcc1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430170]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc4d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab05]

    ??:? runModuleUnitTests [0x42ba71]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4283c4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164566
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    float s = (a + b + c) / 2.0;\n    float area = sqrt(s\
    \ * (s - a) * (s - b) * (s - c));\n    return area > 0 ? area : -1;\n}\n/*\n \
    \   Given a list of integers, return a list of those numbers squared and the product\
    \ of all the \n    numbers in the list.\n    Example:\n    >>> square_n_sum([1,\
    \ 2, 3, 4, 5])\n    [1, 4, 9, 16, 25, 15]\n    >>> square_n_sum([])\n    [0, 0]\n\
    */\nTuple!(long[], long) square_n_sum(long[] xs) \n{\n    long[] ys = xs.map!(a\
    \ => a ^^ 2).array;\n    long sum = xs.sum;\n    return tuple(ys, sum);\n}\n/*\n\
    \    Given a positive integer n return the nth fibonacci number.\n    A fibonacci\
    \ number is the sum of the two previous fibonacci numbers.\n    Starting with\
    \ 1 and 2 the first 10 fibonacci numbers are:\n    1, 2, 3, 5, 8, 13, 21, 34,\
    \ 55, 89, ...\n    Example:\n    >>> fib(0)\n    1\n    >>> fib(1)\n    1\n  \
    \  >>> fib(2)\n    2\n    >>> fib(3)\n    3\n    >>> fib(10)\n    89\n*/\nulong\
    \ fib(ulong n) \n{\n    // F(n) = F(n-1) + F(n-2)\n    if (n < 2) \n        return\
    \ 1;\n    ulong f1 = 1;\n    ulong f2 = 1;\n    ulong f = 0;\n    for (int i =\
    \ 2; i <= n; i++)\n    {\n        f = f1 + f2;\n        f1 = f2;\n        f2 =\
    \ f;\n    }\n    return f;\n}\n/*\n    Given a positive integer n return the nth\
    \ triangular number.\n    A triangular number counts the objects that can form\
    \ an equilateral triangle.\n    The nth triangular number\nunittest\n{\n    alias\
    \ candidate = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n  \
    \  assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L) ==\
    \ 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc5qd6wb1.d(71): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc5qd6wb1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164565
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{ \n    float s = (a + b + c) / 2.0;\n    return (s - a\
    \ > 0 && s - b > 0 && s - c > 0) ? sqrt(s * (s - a) * (s - b) * (s - c)) : -1;\n\
    }\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpxtgrvhbm.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f45]

    ??:? void tmpxtgrvhbm.__unittest_L22_C1() [0x427b73]

    ??:? void tmpxtgrvhbm.__modtest() [0x427cc8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc6b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aafe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc91]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430140]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc1d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aad5]

    ??:? runModuleUnitTests [0x42ba41]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428394]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164566
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    if(a<=0 || b<=0 || c<=0)\n        return -1;\n \
    \   double s = (a+b+c)/2;\n    double area = sqrt(s*(s-a)*(s-b)*(s-c));\n    return\
    \ area;\n}\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvtfmxik5.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f05]

    ??:? void tmpvtfmxik5.__unittest_L25_C1() [0x427af5]

    ??:? void tmpvtfmxik5.__modtest() [0x427c84]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc2b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aabe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc51]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430100]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbdd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa95]

    ??:? runModuleUnitTests [0x42ba01]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428354]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164566
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    if(a + b <= c || a + c <= b || b + c <= a) return\
    \ -1;\n    auto s = cast(float)(a + b + c) / 2;\n    return sqrt(s * (s - a) *\
    \ (s - b) * (s - c));\n}\nunittest\n{\n    alias candidate = triangle_area;\n\n\
    \    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L)\
    \ == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqro5_ufm.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f05]

    ??:? void tmpqro5_ufm.__unittest_L23_C1() [0x427b33]

    ??:? void tmpqro5_ufm.__modtest() [0x427c88]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc2b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aabe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc51]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430100]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbdd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa95]

    ??:? runModuleUnitTests [0x42ba01]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428354]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164566
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    float s = (a + b + c) / 2.0;\n    if (s == 0)\n\
    \        return -1;\n    else\n        return round(sqrt(s * (s - a) * (s - b)\
    \ * (s - c)) * 100.0) / 100.0;\n}\nunittest\n{\n    alias candidate = triangle_area;\n\
    \n    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L)\
    \ == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqxrszrg5.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x427fad]

    ??:? void tmpqxrszrg5.__unittest_L25_C1() [0x427ba1]

    ??:? void tmpqxrszrg5.__modtest() [0x427d30]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bceb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab7e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fd11]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4301c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc9d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab55]

    ??:? runModuleUnitTests [0x42bac1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4283fc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164566
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n  float s = (a + b + c) / 2;\n  float area = sqrt(s\
    \ * (s - a) * (s - b) * (s - c));\n  return area;\n}\nunittest\n{\n    alias candidate\
    \ = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L,\
    \ 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpikc_my6c.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427edd]

    ??:? void tmpikc_my6c.__unittest_L23_C1() [0x427ad1]

    ??:? void tmpikc_my6c.__modtest() [0x427c60]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc03]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa96]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc29]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300d8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbb5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa6d]

    ??:? runModuleUnitTests [0x42b9d9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42832c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164566
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n\tif (a <= 0 || b <= 0 || c <= 0) \n\t{\n\t\treturn\
    \ -1;\n\t}\n\t// Return the area of the triangle rounded to 2 decimal points\n\
    \t// http://en.wikipedia.org/wiki/Triangle#Using_Heron.27s_formula\n\tfloat s\
    \ = (a + b + c) / 2;\n\treturn round(sqrt(s * (s - a) * (s - b) * (s - c)) * 100)\
    \ / 100;\n}\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpfgbjyz0o.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x427fb5]

    ??:? void tmpfgbjyz0o.__unittest_L28_C1() [0x427ba5]

    ??:? void tmpfgbjyz0o.__modtest() [0x427d34]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bcf3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab86]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fd19]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4301c8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fca5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab5d]

    ??:? runModuleUnitTests [0x42bac9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428404]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164566
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    // make a tuple of these values\n    auto v = tuple(a,\
    \ b, c);\n    // sort the tuple\n    v = sort(v);\n    // get the highest values\n\
    \    auto x = v[$-1];\n    auto y = v[$-2];\n    auto z = v[$-3];\n    // is the\
    \ sum of the lower 2 greater than the highest?\n    if(y + z > x) {\n        //\
    \ yes, its a valid triangle\n        // use Heron's formula to calculate the area\n\
    \        // see: http://en.wikipedia.org/wiki/Heron%27s_formula\n        auto\
    \ s = (y + z + x) / 2.0f;\n        auto a = sqrt(s * (s - x) * (s - y) * (s -\
    \ z));\n        // return the area to 2 decimal places\n        return round(a\
    \ * 100.0f) / 100.0f;\n    }\n    // return -1 if its not a valid triangle\n \
    \   return -1;\n}\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7niqig_s.d(22): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmp7niqig_s.d(33): Error: variable `a` is shadowing variable `tmp7niqig_s.triangle_area.a`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7niqig_s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164566
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    auto s = (a + b + c) / 2;\n    if (s > c && s >\
    \ b && s > a)\n    {\n        auto areasq = s * (s - a) * (s - b) * (s - c);\n\
    \        return sqrt(areasq);\n    }\n    return -1;\n}\nunittest\n{\n    alias\
    \ candidate = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n  \
    \  assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L) ==\
    \ 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpof5z2k2y.d(23): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpof5z2k2y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164565
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    real x, y, z;\n    x = cast(real)a;\n    y = cast(real)b;\n\
    \    z = cast(real)c;\n    auto p = x + y + z;\n    if (z < x + y && y < x + z\
    \ && x < y + z)\n    {\n        return cast(float)(sqrt(p/2*(p/2-x)*(p/2-y)*(p/2-z)));\n\
    \    }\n    else \n    {\n        return -1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n  \
    \  assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L) ==\
    \ 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpfgcwq80g.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x427fbd]

    ??:? void tmpfgcwq80g.__unittest_L33_C1() [0x427be7]

    ??:? void tmpfgcwq80g.__modtest() [0x427d3c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bce3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab76]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fd09]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4301b8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc95]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab4d]

    ??:? runModuleUnitTests [0x42bab9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42840c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164566
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    if (a + b > c && b + c > a && a + c > b)\n    {\n\
    \        float s = float(a + b + c) / 2;\n        return sqrt(s * (s - a) * (s\
    \ - b) * (s - c));\n    }\n    return -1;\n}\nunittest\n{\n    alias candidate\
    \ = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L,\
    \ 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpr3d0_w0c.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f05]

    ??:? void tmpr3d0_w0c.__unittest_L26_C1() [0x427b33]

    ??:? void tmpr3d0_w0c.__modtest() [0x427c88]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc2b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aabe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc51]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430100]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbdd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa95]

    ??:? runModuleUnitTests [0x42ba01]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428354]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164566
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{ \n    if(a + b > c && a + c > b && b + c > a)\n    {\n\
    \        long p = (a + b + c) / 2;\n        return sqrt(p * (p - a) * (p - b)\
    \ * (p - c));\n    }\n    else\n    {\n        return -1;\n    }\n}\n/*\n    Given\
    \ two numbers, return the product rounded to 2 decimal points. \n    If the product\
    \ is greater than 100000, return 100000.\n    Example:\n    >>> multiply(4.6,\
    \ 5.6)\n    25.76\n    >>> multiply(4.6, 9.6)\n    100000.0\n*/\nfloat multiply(float\
    \ a, float b) \n{ \n    float product = a * b;\n    if(product < 100000)\n   \
    \ {\n        return product;\n    }\n    else\n    {\n        return 100000;\n\
    \    }\n}\n/*\n    Given two numbers, return the sum rounded to 2 decimal points.\
    \ \n    If the sum is greater than 100000, return 100000.\n    Example:\n    >>>\
    \ add(4.6, 5.6)\n    10.2\n    >>> add(4.6, 9.6)\n    100000.0\n*/\nfloat add(float\
    \ a, float b) \n{ \n    float sum = a + b;\n    if(sum < 100000)\n    {\n    \
    \    return sum;\n    }\n    else\n    {\n        return 100000;\n    }\n}\n/*\n\
    \    Given a list of tuples of the form (country, city, population), \n    return\
    \ a tuple of the form (country, city) if the city has a population greater than\
    \ 10 million.\n    Example:\n    >>> big_cities([(\"India\", \"Mumbai\", 18.5),\
    \ (\"USA\", \"New York\", 8.2), (\"India\", \"Kolkata\", 14.6)])\n    ((\"India\"\
    , \"Mumbai\"), (\"India\", \"Kolkata\"))\n    >>> big_cities([(\"USA\", \"New\
    \ York\", 8.2), (\"USA\", \"Chicago\", 9.1)])\n    ((\"USA\", \"New York\"), (\"\
    USA\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu5zg75xg.d(71): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu5zg75xg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164565
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    enum FloatingType = float;\n    static if (is(FloatingType\
    \ T))\n    {\n        if (a < 1 || b < 1 || c < 1)\n            return -1.0f;\n\
    \        else\n        {\n            auto s = (a + b + c) / 2.0f;\n         \
    \   return sqrt(s * (s - a) * (s - b) * (s - c));\n        }\n    }\n    else\n\
    \    {\n        static assert(false, \"FloatingType is not float\");\n    }\n\
    }\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk60uckb9.d(19): Error: found `;` when expecting `.` following float

    /tmp/tmpk60uckb9.d(20): Error: found `static` when expecting identifier following
    `float`.

    /tmp/tmpk60uckb9.d(20): Error: semicolon expected following auto declaration,
    not `if`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk60uckb9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164565
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    if(a + b > c && a + c > b && b + c > a)\n    {\n\
    \        float sp = (a + b + c) / 2.0;\n        return sqrt(sp * (sp - a) * (sp\
    \ - b) * (sp - c));\n    }\n    return -1.0;\n}\nunittest\n{\n    alias candidate\
    \ = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L,\
    \ 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp78x1bocm.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f0d]

    ??:? void tmp78x1bocm.__unittest_L26_C1() [0x427b3b]

    ??:? void tmp78x1bocm.__modtest() [0x427c90]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc33]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aac6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc59]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430108]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbe5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa9d]

    ??:? runModuleUnitTests [0x42ba09]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42835c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164566
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    if(a + b > c && a + c > b && b + c > a)\n    {\n\
    \        // http://math.stackexchange.com/questions/128991/how-to-calculate-the-area-of-a-triangle-if-you-know-the-lengths-of-all-three-sid\n\
    \        float s = (a + b + c) / 2.0;\n        float Area = sqrt(s * (s - a) *\
    \ (s - b) * (s - c));\n        return round(Area, 2);\n    }\n    return -1;\n\
    }\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpltnu09m5.d(24): Error: function `std.math.round(real x)` is not
    callable using argument types `(float, int)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpltnu09m5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164566
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    float p = (a + b + c) / 2.0;\n    float s = 0.0;\n\
    \    if (a <= 0 || b <= 0 || c <= 0) {\n        return -1;\n    }\n    if (a +\
    \ b <= c || a + c <= b || b + c <= a) {\n        return -1;\n    }\n    if (a\
    \ == b && b == c) {\n        s = sqrt(p * (p - a) * (p - b) * (p - c));\n    }\
    \ else if (a == b || b == c || a == c) {\n        if (a == b) {\n            s\
    \ = a * sqrt(p * (p - a) * (p - b) * (p - c)) / (2 * b);\n        } else if (b\
    \ == c) {\n            s = b * sqrt(p * (p - a) * (p - b) * (p - c)) / (2 * a);\n\
    \        } else {\n            s = c * sqrt(p * (p - a) * (p - b) * (p - c)) /\
    \ (2 * b);\n        }\n    } else {\n        s = sqrt(p * (p - a) * (p - b) *\
    \ (p - c));\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = triangle_area;\n\
    \n    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L)\
    \ == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpyu34tqd4.d(48): unittest failure

    ----------------

    ??:? _d_unittestp [0x428075]

    ??:? void tmpyu34tqd4.__unittest_L42_C1() [0x427ca3]

    ??:? void tmpyu34tqd4.__modtest() [0x427df8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bd9b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ac2e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fdc1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430270]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fd4d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ac05]

    ??:? runModuleUnitTests [0x42bb71]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4284c4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164566
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    //return (a == 0L || b == 0L || c == 0L) ? -1.0\
    \ : \n    //    0.5 * a * b * sin(radians(c));\n    real aa = to!real(a);\n  \
    \  real bb = to!real(b);\n    real cc = to!real(c);\n    //\n    real s = (aa\
    \ + bb + cc) / 2.0;\n    return sqrt(s * (s - aa) * (s - bb) * (s - cc));\n}\n\
    unittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnqa8zt8g.d(21): Error: template instance `to!real` template `to`
    is not defined, did you mean No?

    /tmp/tmpnqa8zt8g.d(22): Error: template instance `to!real` template `to` is not
    defined, did you mean No?

    /tmp/tmpnqa8zt8g.d(23): Error: template instance `to!real` template `to` is not
    defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnqa8zt8g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164566
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    float s = (a + b + c) / 2.0;\n    float area = sqrt(s\
    \ * (s - a) * (s - b) * (s - c));\n    return area == area ? area : -1;\n}\nunittest\n\
    {\n    alias candidate = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) ==\
    \ 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpuiok4mia.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f05]

    ??:? void tmpuiok4mia.__unittest_L23_C1() [0x427b2f]

    ??:? void tmpuiok4mia.__modtest() [0x427c84]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc2b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aabe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc51]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430100]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbdd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa95]

    ??:? runModuleUnitTests [0x42ba01]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428354]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164566
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    long[3] sides = [a, b, c];\n    sides.sort();\n\
    \    if (sides[0] + sides[1] > sides[2])\n    {\n        long p = (a + b + c)\
    \ / 2;\n        return sqrt(p * (p - a) * (p - b) * (p - c));\n    }\n    return\
    \ -1.0;\n}\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6qh0txfg.d(20): Error: no property `sort` for type `long[3]`

    /tmp/tmp6qh0txfg.d(24): Error: `std.math.sqrt` called with argument types `(long)`
    matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6qh0txfg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164566
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    /* \n        return -1 if the 3 sides cannot form\
    \ a triangle.\n        must be able to create a triangle out of the sides. \n\
    \        A triangle is formed if the sum of any two sides is greater than the\
    \ third side.\n    */\n    return (a + b > c) && (a + c > b) && (b + c > a) ?\
    \ sqrt(pow(a, 2) + pow(b, 2) - pow(c, 2)) * sqrt(pow(a, 2) + pow(c, 2) - pow(b,\
    \ 2)) * sqrt(pow(b, 2) + pow(c, 2) - pow(a, 2)) : -1;\n}\nunittest\n{\n    alias\
    \ candidate = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n  \
    \  assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L) ==\
    \ 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplog0m_r5.d(24): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    /tmp/tmplog0m_r5.d(24): Error: `std.math.sqrt` called with argument types `(long)`
    matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    /tmp/tmplog0m_r5.d(24): Error: `std.math.sqrt` called with argument ty'
  stdout: ''
  timestamp: 1660164566
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    // make sure the parameters are valid\n    auto\
    \ p = a + b + c;\n    if (p <= 0)\n        return -1.0;\nunittest\n{\n    alias\
    \ candidate = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n  \
    \  assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L) ==\
    \ 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaa2_h1ef.d(23): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaa2_h1ef.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164566
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    if(!(a > 0 && b > 0 && c > 0)) return -1;\n    if(a\
    \ + b <= c || a + c <= b || b + c <= a) return -1;\n    auto p = (a + b + c) /\
    \ 2.0;\n    return sqrt(p * (p - a) * (p - b) * (p - c));\n}\nunittest\n{\n  \
    \  alias candidate = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n\
    \    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L)\
    \ == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpsscpn8lz.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f3d]

    ??:? void tmpsscpn8lz.__unittest_L24_C1() [0x427b67]

    ??:? void tmpsscpn8lz.__modtest() [0x427cbc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc63]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaf6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc89]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430138]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc15]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aacd]

    ??:? runModuleUnitTests [0x42ba39]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42838c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164566
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    enum\n    {\n        a_index = 0,\n        b_index\
    \ = 1,\n        c_index = 2\n    };\n    typedef Tuple!(long, long, long) Sides;\n\
    \    auto sides = Sides(a, b, c);\n    sides = sides.opSlice()\n             \
    \    .sort()\n                 .opSlice();\n    if(sides[b_index] > sides[c_index]\
    \ - sides[a_index])\n    {\n        auto s = (sides[a_index] + sides[b_index]\
    \ + sides[c_index]) / 2.0;\n        return sqrt(s * (s - sides[a_index]) * (s\
    \ - sides[b_index]) * (s - sides[c_index]));\n    }\n    return -1;\n}\nunittest\n\
    {\n    alias candidate = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) ==\
    \ 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppe5cioaq.d(24): Deprecation: use `{ }` for an empty statement,
    not `;`

    /tmp/tmppe5cioaq.d(25): Error: found `Tuple` when expecting `;` following statement

    /tmp/tmppe5cioaq.d(25): Error: found `,` when expecting `.` following long

    /tmp/tmppe5cioaq.d(25): Error: found `long` when expecting identifier following
    `long`.

    /tmp/tmppe5cioaq.d(25): Error: found `)` when expecting `.` following long

    /tmp/tmppe5cioaq.d(25): Error: found `;` when expecting `)`

    /tmp/tmppe5cioaq.d(26): Error: found `auto` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppe5cioaq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164566
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    if(a+b > c && a+c > b && b+c > a)\n    {\n     \
    \   float p = (a+b+c)/2.0;\n        return sqrt(p*(p-a)*(p-b)*(p-c));\n    }\n\
    \    return -1.0;\n}\nunittest\n{\n    alias candidate = triangle_area;\n\n  \
    \  assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) ==\
    \ -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp1on6lq2p.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f0d]

    ??:? void tmp1on6lq2p.__unittest_L26_C1() [0x427b3b]

    ??:? void tmp1on6lq2p.__modtest() [0x427c90]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc33]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aac6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc59]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430108]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbe5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa9d]

    ??:? runModuleUnitTests [0x42ba09]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42835c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164566
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    if (a<=0 || b<=0 || c<=0 || a+b<=c || a+c<=b ||\
    \ b+c<=a) return -1.0;\n    float p = (a+b+c)/2.0;\n    return sqrt(p*(p-a)*(p-b)*(p-c));\n\
    }\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpdg3_k_qo.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f25]

    ??:? void tmpdg3_k_qo.__unittest_L23_C1() [0x427b4f]

    ??:? void tmpdg3_k_qo.__modtest() [0x427ca4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc4b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aade]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc71]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430120]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbfd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aab5]

    ??:? runModuleUnitTests [0x42ba21]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428374]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164566
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    const size_t len = 3L;\n    float side_lengths[len]\
    \ = [a, b, c];\n    float max_length = max(side_lengths);\n    float total_length\
    \ = sum(side_lengths);\n    float area = 0.0;\n    if (total_length - max_length\
    \ <= max_length)\n    {\n        return -1;\n    }\n    else\n    {\n        float\
    \ semi_perimeter = total_length / 2;\n        area = sqrt(semi_perimeter * (semi_perimeter\
    \ - a) * (semi_perimeter - b) * (semi_perimeter - c));\n        return area;\n\
    \    }\n}\n/*\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb5co0hd3.d(20): Deprecation: instead of C-style syntax, use D-style
    syntax `float[len] side_lengths`

    /tmp/tmpb5co0hd3.d(35): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb5co0hd3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164566
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    float result;\n    result = -1.0;\n    float s;\n\
    \    s = (a + b + c) / 2.0;\n    if (a + b > c && a + c > b && b + c > a) {\n\
    \        result = sqrt(s * (s - a) * (s - b) * (s - c));\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6e9hbt5i.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f25]

    ??:? void tmp6e9hbt5i.__unittest_L28_C1() [0x427b4f]

    ??:? void tmp6e9hbt5i.__modtest() [0x427ca4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc4b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aade]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc71]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430120]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbfd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aab5]

    ??:? runModuleUnitTests [0x42ba21]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428374]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164566
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{ \n    float s = (a + b + c) / 2.0;\n    return s * (s\
    \ - a) * (s - b) * (s - c) < 0 ? -1 : sqrt(s * (s - a) * (s - b) * (s - c));\n\
    }\n/*\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvf7rac8w.d(22): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvf7rac8w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164566
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    float[3] triangle = [a, b, c];\n    std.algorithm.sort(triangle);\n\
    \    if (triangle[0] + triangle[1] > triangle[2])\n    {\n        float s = (triangle[0]\
    \ + triangle[1] + triangle[2]) / 2.0;\n        return std.math.sqrt(s * (s - triangle[0])\
    \ * (s - triangle[1]) * (s - triangle[2]));\n    }\n    return -1.0;\n}\nunittest\n\
    {\n    alias candidate = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) ==\
    \ 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfje9_qpc.d(20): Error: undefined identifier `algorithm` in package
    `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfje9_qpc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164566
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    if ((a < 0) || (b < 0) || (c < 0)) return -1;\n\
    \    if ((a + b < c) || (a + c < b) || (b + c < a)) return -1;\n    return (a\
    \ + b + c) / 2;\n}\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpcc58kf2y.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427efd]

    ??:? void tmpcc58kf2y.__unittest_L23_C1() [0x427b27]

    ??:? void tmpcc58kf2y.__modtest() [0x427c7c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc23]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aab6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc49]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300f8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbd5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa8d]

    ??:? runModuleUnitTests [0x42b9f9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42834c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164566
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    float result = -1;\n    if (a < b+c && b < a+c &&\
    \ c < a+b)\n    {\n        float p = (a+b+c)/2;\n        result = sqrt(p*(p-a)*(p-b)*(p-c));\n\
    \    }\n    return round(result, 2);\n}\nunittest\n{\n    alias candidate = triangle_area;\n\
    \n    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L)\
    \ == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfvez5co5.d(25): Error: function `std.math.round(real x)` is not
    callable using argument types `(float, int)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfvez5co5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164566
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    if( a <= 0 || b <= 0 || c <= 0 ) \n        return\
    \ -1.0f;\n    \n    float s = (a + b + c) / 2.0f;\n    float area = sqrt(s * (s\
    \ - a) * (s - b) * (s - c));\n    return round(area * 100.0f) / 100.0f;\n}\nunittest\n\
    {\n    alias candidate = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) ==\
    \ 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjaalpazq.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x427fc5]

    ??:? void tmpjaalpazq.__unittest_L26_C1() [0x427bb5]

    ??:? void tmpjaalpazq.__modtest() [0x427d44]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bd03]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab96]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fd29]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4301d8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fcb5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab6d]

    ??:? runModuleUnitTests [0x42bad9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428414]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164566
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    // TODO\n    if(a <= 0 || b <= 0 || c <= 0) return\
    \ -1;\n    auto s = (a + b + c) / 2;\n    return sqrt(s * (s - a) * (s - b) *\
    \ (s - c));\n}\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp23mxbv1w.d(22): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp23mxbv1w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164566
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    if(a + b <= c || a + c <= b || b + c <= a)\n   \
    \     return -1.0;\n    double p = (a + b + c) / 2.0;\n    return sqrt(p * (p\
    \ - a) * (p - b) * (p - c));\n}\nunittest\n{\n    alias candidate = triangle_area;\n\
    \n    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L)\
    \ == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpnl_9wg5t.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f0d]

    ??:? void tmpnl_9wg5t.__unittest_L24_C1() [0x427b3b]

    ??:? void tmpnl_9wg5t.__modtest() [0x427c90]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc33]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aac6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc59]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430108]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbe5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa9d]

    ??:? runModuleUnitTests [0x42ba09]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42835c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164566
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    if (a < 0 || b < 0 || c < 0) return -1.0;\n    if\
    \ (a + b <= c || a + c <= b || b + c <= a) return -1.0;\n    else return sqrt(pow(a,\
    \ 2) + pow(b, 2) - pow(c, 2)) / 4.0;\n}\nunittest\n{\n    alias candidate = triangle_area;\n\
    \n    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L)\
    \ == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcndam9zx.d(21): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcndam9zx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164566
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    if(a<=0 || b<=0 || c<=0)\n        return -1.0;\n\
    \    \n    /*\n    if(a+b <= c || a+c <= b || b+c <= a)\n        return -1.0;\n\
    \    */\n    //Tuple!(long, long, long) t = tuple(a, b, c);\n    long[3] lengths\
    \ = [a, b, c];\n    lengths.sort();\n    /*\n    long[] lengths = new long[3];\n\
    \    lengths[0] = a;\n    lengths[1] = b;\n    lengths[2] = c;\n    lengths.sort();\n\
    \    */\n    if(lengths[0] + lengths[1] <= lengths[2])\n        return -1.0;\n\
    \    \n    auto s = float(a+b+c)/2;\n    float area = sqrt(s*(s-a)*(s-b)*(s-c));\n\
    \    return area;\n}\nunittest\n{\n    alias candidate = triangle_area;\n\n  \
    \  assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) ==\
    \ -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp70zyqyey.d(28): Error: no property `sort` for type `long[3]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp70zyqyey.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164566
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    if (a+b>c && a+c>b && b+c>a) {\n        double s\
    \ = (a+b+c)/2.0;\n        return sqrt(s*(s-a)*(s-b)*(s-c));\n    }\n    return\
    \ -1;\n}\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2lxcbo6d.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f0d]

    ??:? void tmp2lxcbo6d.__unittest_L25_C1() [0x427b3b]

    ??:? void tmp2lxcbo6d.__modtest() [0x427c90]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc33]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aac6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc59]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430108]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbe5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa9d]

    ??:? runModuleUnitTests [0x42ba09]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42835c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164566
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    enum float epsilon = 1.0e-9;\n    float s = (a +\
    \ b + c) / 2.0;\n    float p = s * (s - a) * (s - b) * (s - c);\n    float area\
    \ = sqrt(p);\n    if(area >= 0.0 - epsilon && area <= 0.0 + epsilon) {\n     \
    \   return -1.0;\n    }\n    return area;\n}\nunittest\n{\n    alias candidate\
    \ = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L,\
    \ 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmppzm0oh52.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f45]

    ??:? void tmppzm0oh52.__unittest_L28_C1() [0x427b39]

    ??:? void tmppzm0oh52.__modtest() [0x427cc8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc6b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aafe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc91]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430140]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc1d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aad5]

    ??:? runModuleUnitTests [0x42ba41]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428394]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164566
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    float s = (a + b + c) / 2.0;\n    float area = sqrt(s\
    \ * (s - a) * (s - b) * (s - c));\n    return area > 0 ? area : -1;\n}\nunittest\n\
    {\n    alias candidate = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) ==\
    \ 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4bxbbkdq.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f05]

    ??:? void tmp4bxbbkdq.__unittest_L23_C1() [0x427b33]

    ??:? void tmp4bxbbkdq.__modtest() [0x427c88]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc2b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aabe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc51]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430100]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbdd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa95]

    ??:? runModuleUnitTests [0x42ba01]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428354]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164566
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    /* 1 2 3 */\n    if(a + b <= c || a + c <= b ||\
    \ b + c <= a)\n        return -1;\n    return cast(float)a * b / 2;\n}\nunittest\n\
    {\n    alias candidate = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) ==\
    \ 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpbjb1tlw3.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ec5]

    ??:? void tmpbjb1tlw3.__unittest_L24_C1() [0x427af3]

    ??:? void tmpbjb1tlw3.__modtest() [0x427c48]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbeb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa7e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc11]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb9d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa55]

    ??:? runModuleUnitTests [0x42b9c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428314]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164566
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    long sum1 = a + b;\n    long sum2 = a + c;\n   \
    \ long sum3 = b + c;\n    if (sum1 <= c || sum2 <= b || sum3 <= a)\n        return\
    \ -1;\n    float s = (a + b + c) / 2.0;\n    return sqrt(s * (s - a) * (s - b)\
    \ * (s - c));\n}\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmplx7tx52a.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f0d]

    ??:? void tmplx7tx52a.__unittest_L27_C1() [0x427b3b]

    ??:? void tmplx7tx52a.__modtest() [0x427c90]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc33]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aac6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc59]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430108]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbe5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa9d]

    ??:? runModuleUnitTests [0x42ba09]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42835c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164566
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    if ((a + b <= c) || (a + c <= b) || (b + c <= a))\n\
    \        return -1.0;\n    double s = (a + b + c) / 2.0;\n    return sqrt(s *\
    \ (s - a) * (s - b) * (s - c));\n}\nunittest\n{\n    alias candidate = triangle_area;\n\
    \n    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L)\
    \ == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmploz0gdki.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f0d]

    ??:? void tmploz0gdki.__unittest_L24_C1() [0x427b3b]

    ??:? void tmploz0gdki.__modtest() [0x427c90]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc33]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aac6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc59]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430108]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbe5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa9d]

    ??:? runModuleUnitTests [0x42ba09]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42835c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164566
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    float s;\n    float area;\n    s = (a + b + c) /\
    \ 2.0;\n    area = sqrt(s * (s - a) * (s - b) * (s - c));\n    return area;\n\
    }\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp1ubjyjnp.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x427efd]

    ??:? void tmp1ubjyjnp.__unittest_L25_C1() [0x427af1]

    ??:? void tmp1ubjyjnp.__modtest() [0x427c80]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc23]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aab6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc49]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300f8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbd5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa8d]

    ??:? runModuleUnitTests [0x42b9f9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42834c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164566
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    if (a <= 0 || b <= 0 || c <= 0) \n        return\
    \ -1.0;\n    if (a + b <= c || a + c <= b || b + c <= a) \n        return -1.0;\n\
    \    float p = (a + b + c) / 2.0;\n    return sqrt(p * (p - a) * (p - b) * (p\
    \ - c));\n}\n/*\n    Write a function that takes a string and returns it reversed.\n\
    \    Examples:\n    >>> reverse_string(\"Eshan\")\n    \"nahse\"\n    >>> reverse_string(\"\
    \")\n    \"\"\n    >>> reverse_string(\"abcd efgh ijkl mnop qrst uvwx yz\")\n\
    \    \"zy xwvu ts\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbsz3dzqf.d(26): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbsz3dzqf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164566
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    if ( (a + b > c) && (a + c > b) && (b + c > a) )\n\
    \    {\n        auto s = (a + b + c) / 2.0;\n        return round(sqrt(s * (s\
    \ - a) * (s - b) * (s - c)) * 100) / 100;\n    }\n    else\n    {\n        return\
    \ -1.0;\n    }\n}\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9cdli319.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x427fcd]

    ??:? void tmp9cdli319.__unittest_L29_C1() [0x427bfb]

    ??:? void tmp9cdli319.__modtest() [0x427d50]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bd0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab9e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fd31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4301e0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fcbd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab75]

    ??:? runModuleUnitTests [0x42bae1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42841c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164566
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    if (a <= 0 || b <= 0 || c <= 0)\n        return\
    \ -1.0;\n    if (a + b <= c || a + c <= b || b + c <= a)\n        return -1.0;\n\
    \    auto s = (a + b + c) / 2.0;\n    return sqrt(s * (s - a) * (s - b) * (s -\
    \ c));\n}\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpg8wn6_ez.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f2d]

    ??:? void tmpg8wn6_ez.__unittest_L26_C1() [0x427b5b]

    ??:? void tmpg8wn6_ez.__modtest() [0x427cb0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc53]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aae6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc79]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430128]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc05]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aabd]

    ??:? runModuleUnitTests [0x42ba29]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42837c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164566
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    real A = a;\n    real B = b;\n    real C = c;\n\
    \    auto s = (A + B + C) / 2;\n    real area = sqrt(s * (s - A) * (s - B) * (s\
    \ - C));\n    return(area > 0 ? area : -1);\n}\n \nunittest\n{\n    alias candidate\
    \ = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L,\
    \ 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmppr8ih49a.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f4d]

    ??:? void tmppr8ih49a.__unittest_L27_C1() [0x427b7b]

    ??:? void tmppr8ih49a.__modtest() [0x427cd0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc73]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab06]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc99]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430148]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc25]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aadd]

    ??:? runModuleUnitTests [0x42ba49]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42839c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164566
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    float s = (a + b + c) / 2.0;\n    if (s < a || s\
    \ < b || s < c)\n        return -1.0;\n    return sqrt(s * (s - a) * (s - b) *\
    \ (s - c));\n}\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpq53aglje.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f1d]

    ??:? void tmpq53aglje.__unittest_L24_C1() [0x427b4b]

    ??:? void tmpq53aglje.__modtest() [0x427ca0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aad6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc69]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430118]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbf5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aaad]

    ??:? runModuleUnitTests [0x42ba19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42836c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164566
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    float s = (a + b + c) / 2.0;\n    float area = sqrt(s\
    \ * (s - a) * (s - b) * (s - c));\n    if (area > 0)\n        return area;\n \
    \   else\n        return -1;\n}\nunittest\n{\n    alias candidate = triangle_area;\n\
    \n    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L)\
    \ == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpdqwm712p.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f05]

    ??:? void tmpdqwm712p.__unittest_L26_C1() [0x427b33]

    ??:? void tmpdqwm712p.__modtest() [0x427c88]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc2b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aabe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc51]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430100]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbdd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa95]

    ??:? runModuleUnitTests [0x42ba01]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428354]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164566
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    float p = (a + b + c) / 2.0;\n    if(p * (p - a)\
    \ * (p - b) * (p - c) > 0)\n        return sqrt(p * (p - a) * (p - b) * (p - c));\n\
    \    return -1;\n}\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4buzd9q7.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f35]

    ??:? void tmp4buzd9q7.__unittest_L24_C1() [0x427b63]

    ??:? void tmp4buzd9q7.__modtest() [0x427cb8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc5b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaee]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc81]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430130]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc0d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aac5]

    ??:? runModuleUnitTests [0x42ba31]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428384]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164566
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    // return -1 if the given sides can't form a triangle\n\
    \    if ((a + b <= c) || (a + c <= b) || (b + c <= a)) return -1;\n    else\n\
    \    {\n        // calculate the semi-perimeter\n        long s = (a + b + c)\
    \ / 2;\n        // calculate the area\n        float area = sqrt(s * (s - a) *\
    \ (s - b) * (s - c));\n        // return the rounded value to 2 decimal points\n\
    \        return round(area * 100) / 100;\n    }\n}\n/*\n    Test function.\n*/\n\
    unittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaas1a2bf.d(26): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaas1a2bf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164566
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    // TODO: implement this function\n    if(a + b >\
    \ c && a + c > b && b + c > a) {\n        return cast(float)sqrt( cast(double)(pow(cast(double)a,\
    \ 2) + pow(cast(double)b, 2) - pow(cast(double)c, 2)) * \n                   \
    \             cast(double)(pow(cast(double)a, 2) + pow(cast(double)c, 2) - pow(cast(double)b,\
    \ 2)) * \n                                cast(double)(pow(cast(double)b, 2) +\
    \ pow(cast(double)c, 2) - pow(cast(double)a, 2)) / \n                        \
    \        cast(double)(4));\n    }\n    return -1;\n}\nunittest\n{\n    alias candidate\
    \ = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L,\
    \ 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6_v6c7sh.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x42817d]

    ??:? void tmp6_v6c7sh.__unittest_L28_C1() [0x427c15]

    ??:? void tmp6_v6c7sh.__modtest() [0x427f00]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bea3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ad36]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fec9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430378]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fe55]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ad0d]

    ??:? runModuleUnitTests [0x42bc79]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285cc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164566
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{ \n  long s = (a + b + c) / 2;\n  float area = sqrt(s\
    \ * (s - a) * (s - b) * (s - c));\n  if (area > 0)\n  {\n    return round(area,\
    \ 2);\n  }\n  else\n  {\n    return -1;\n  }\n  \n}\nunittest\n{\n    alias candidate\
    \ = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L,\
    \ 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuq8lp_mm.d(20): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    /tmp/tmpuq8lp_mm.d(23): Error: function `std.math.round(real x)` is not callable
    using argument types `(float, int)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuq8lp_mm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164566
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    float s = (a + b + c) / 2.0;\n    float t = s *\
    \ (s - a) * (s - b) * (s - c);\n    if (t < 0) return -1.0;\n    return sqrt(t);\n\
    }\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmduoaxxd.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f1d]

    ??:? void tmpmduoaxxd.__unittest_L24_C1() [0x427b4b]

    ??:? void tmpmduoaxxd.__modtest() [0x427ca0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aad6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc69]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430118]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbf5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aaad]

    ??:? runModuleUnitTests [0x42ba19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42836c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164567
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    float s = (a + b + c) / 2.0;\n    float area = sqrt(s\
    \ * (s - a) * (s - b) * (s - c));\n    return  area == area ? area : -1;\n}\n\
    unittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpa0q4xsrl.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f05]

    ??:? void tmpa0q4xsrl.__unittest_L23_C1() [0x427b2f]

    ??:? void tmpa0q4xsrl.__modtest() [0x427c84]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc2b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aabe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc51]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430100]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbdd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa95]

    ??:? runModuleUnitTests [0x42ba01]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428354]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164567
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    // your code here\n    if(a+b > c && a+c > b &&\
    \ b+c > a)\n    {\n        auto p = float(a+b+c)/2;\n        return sqrt(p*(p-a)*(p-b)*(p-c));\n\
    \    }\n    else\n    {\n        return -1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n  \
    \  assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L) ==\
    \ 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpk546xxcn.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f05]

    ??:? void tmpk546xxcn.__unittest_L30_C1() [0x427b33]

    ??:? void tmpk546xxcn.__modtest() [0x427c88]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc2b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aabe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc51]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430100]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbdd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa95]

    ??:? runModuleUnitTests [0x42ba01]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428354]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164567
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    if(a<=0 || b<=0 || c<=0)\n        return -1;\n \
    \   \n    long s = (a+b+c)/2;\n    if(s*(s-a)*(s-b)*(s-c) <= 0)\n        return\
    \ -1;\n    else\n        return sqrt(s*(s-a)*(s-b)*(s-c));\n}\n/*\nunittest\n\
    {\n    alias candidate = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) ==\
    \ 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbx_0thvq.d(28): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbx_0thvq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164566
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n\tfloat s = (a + b + c) / 2;\n\tfloat area = sqrt(s\
    \ * (s - a) * (s - b) * (s - c));\n\treturn (area < 0.00001) ? -1.0 : area;\n\
    }\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvwqgwt6_.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f0d]

    ??:? void tmpvwqgwt6_.__unittest_L23_C1() [0x427afd]

    ??:? void tmpvwqgwt6_.__modtest() [0x427c8c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc33]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aac6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc59]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430108]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbe5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa9d]

    ??:? runModuleUnitTests [0x42ba09]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42835c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164567
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    float p = (a + b + c) / 2.0;\n    float S = sqrt(p\
    \ * (p - a) * (p - b) * (p - c));\n    return S;\n}\nunittest\n{\n    alias candidate\
    \ = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L,\
    \ 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7excgx9a.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ee5]

    ??:? void tmp7excgx9a.__unittest_L23_C1() [0x427ad9]

    ??:? void tmp7excgx9a.__modtest() [0x427c68]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa9e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300e0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbbd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa75]

    ??:? runModuleUnitTests [0x42b9e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428334]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164567
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{ \n    float p = (a + b + c) / 2.0;\n    float s = sqrt(p\
    \ * (p - a) * (p - b) * (p - c));\n    return s;\n}\nunittest\n{\n    alias candidate\
    \ = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L,\
    \ 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_6zpvbqr.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ee5]

    ??:? void tmp_6zpvbqr.__unittest_L23_C1() [0x427ad9]

    ??:? void tmp_6zpvbqr.__modtest() [0x427c68]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa9e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300e0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbbd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa75]

    ??:? runModuleUnitTests [0x42b9e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428334]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164567
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    static if (is(typeof(a * b * c)))\n    {\n     \
    \   auto s = cast(real)(a + b + c) / 2;\n        return sqrt(s * (s - a) * (s\
    \ - b) * (s - c));\n    }\n    else\n    {\n        return -1.0;\n    }\n}\n/*\n\
    \    Given a natural number n, return a list of all the factors of n.\n    Example:\n\
    \    >>> factor(4)\n    [1, 2, 4]\n    >>> factor(5)\n    [1, 5]\n*/\nauto factor(long\
    \ n) \n{\n    auto res = [];\n    foreach (i; 1..n + 1) \n    {\n        if (n\
    \ % i == 0)\n        {\n            res ~= i;\n        }\n    }\n    return res;\n\
    }\n/*\n    Takes a list of numbers and returns the sum of those numbers.\n   \
    \ Example:\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([])\n    0\n*/\nlong sum(List!long\
    \ values) \n{\n    long sum = 0;\n    foreach (val; values) \n    {\n        sum\
    \ += val;\n    }\n    return sum;\n}\n/*\n    Given a number n. Return a list\
    \ of the first n natural numbers.\n    Example:\n    >>> nat(5)\n    [1, 2, 3,\
    \ 4, 5]\n    >>> nat(0)\n    []\n*/\nauto nat(long n) \n{\n    auto res = [];\n\
    \    foreach (i; 1..n + 1) \n    {\n        res ~= i;\n    }\n    return res;\n\
    }\n/*\n    Given a natural number n. Return a list of the first n primes.\n  \
    \  Example:\n    >>> primes(5)\n    [2, 3, 5, 7, 11]\n    >>> primes(0)\n    []\n\
    */\nauto primes(long n) \n{\n    auto res = [];\n    auto primes = 1;\n    foreach\
    \ (i; 1..n + 1) \n    {\n        while (pr\nunittest\n{\n    alias candidate =\
    \ triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L,\
    \ 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_xf0it3s.d(98): Error: found `unittest` when expecting `)`

    /tmp/tmp_xf0it3s.d(112): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp_xf0it3s.d(112): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_xf0it3s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164566
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    if (a > 0L && b > 0L && c > 0L)\n    {\n       \
    \ const float s = (a + b + c) / 2.0f;\n        const float area = sqrt(s * (s\
    \ - a) * (s - b) * (s - c));\n        return std.typecons.round(area, 2);\n  \
    \  }\n    return -1.0f;\n}\nunittest\n{\n    alias candidate = triangle_area;\n\
    \n    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L)\
    \ == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzq16tyfw.d(23): Error: undefined identifier `round` in module `std.typecons`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzq16tyfw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164566
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    if (a <= 0 || b <= 0 || c <= 0) return -1.0;\n \
    \   if (a > b + c || b > a + c || c > a + b) return -1.0;\n    float s = (a +\
    \ b + c) / 2.0;\n    float area = sqrt(s * (s - a) * (s - b) * (s - c));\n   \
    \ return area;\n}\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9t3ekkyi.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f35]

    ??:? void tmp9t3ekkyi.__unittest_L25_C1() [0x427b63]

    ??:? void tmp9t3ekkyi.__modtest() [0x427cb8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc5b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaee]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc81]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430130]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc0d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aac5]

    ??:? runModuleUnitTests [0x42ba31]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428384]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164567
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{ \n    float s = (a + b + c) / 2;\n    float area = sqrt(s\
    \ * (s - a) * (s - b) * (s - c));\n    if (area > 0) \n        return area;\n\
    \    else \n        return -1;\n}\nunittest\n{\n    alias candidate = triangle_area;\n\
    \n    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L)\
    \ == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp89n8bxer.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427efd]

    ??:? void tmp89n8bxer.__unittest_L26_C1() [0x427b2b]

    ??:? void tmp89n8bxer.__modtest() [0x427c80]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc23]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aab6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc49]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300f8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbd5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa8d]

    ??:? runModuleUnitTests [0x42b9f9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42834c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164567
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    bool bIsValid = false;\n    float fRet = -1.0f;\n\
    \    if(a > 0 && b > 0 && c > 0) {\n        bIsValid = (a + b > c) && (a + c >\
    \ b) && (b + c > a);\n    }\n    if(bIsValid) {\n        float s = float(a + b\
    \ + c) / 2.0f;\n        fRet = sqrt(s * (s - a) * (s - b) * (s - c));\n    }\n\
    \    return fRet;\n}\nunittest\n{\n    alias candidate = triangle_area;\n\n  \
    \  assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) ==\
    \ -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpubvjp__i.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f3d]

    ??:? void tmpubvjp__i.__unittest_L30_C1() [0x427b67]

    ??:? void tmpubvjp__i.__modtest() [0x427cbc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc63]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaf6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc89]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430138]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc15]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aacd]

    ??:? runModuleUnitTests [0x42ba39]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42838c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164567
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    float f = (a + b + c) / 2.0f;\n    float result\
    \ = 0.0f;\n    // Try..catch is needed to catch an exception, and return -1.0\n\
    \    try\n    {\n        result = sqrt(f * (f - a) * (f - b) * (f - c));\n   \
    \ }\n    catch(Exception e)\n    {\n        return -1.0f;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpoxc020wt.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x427eed]

    ??:? void tmpoxc020wt.__unittest_L32_C1() [0x427ae1]

    ??:? void tmpoxc020wt.__modtest() [0x427c70]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc13]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaa6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc39]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300e8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbc5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa7d]

    ??:? runModuleUnitTests [0x42b9e9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42833c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164567
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    float s = (a + b + c) / 2.0;\n    float area = sqrt(s\
    \ * (s - a) * (s - b) * (s - c));\n    return area;\n}\nunittest\n{\n    alias\
    \ candidate = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n  \
    \  assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L) ==\
    \ 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5fk_on8f.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ee5]

    ??:? void tmp5fk_on8f.__unittest_L23_C1() [0x427ad9]

    ??:? void tmp5fk_on8f.__modtest() [0x427c68]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa9e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300e0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbbd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa75]

    ??:? runModuleUnitTests [0x42b9e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428334]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164567
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    if(a+b>c && a+c>b && b+c>a)\n    {\n        auto\
    \ s = real(a+b+c)/2;\n        return trunc( sqrt(s*(s-a)*(s-b)*(s-c))*100)/100;\n\
    \    }\n    else\n        return -1.0;\n}\nunittest\n{\n    alias candidate =\
    \ triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L,\
    \ 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpnxoxdjc6.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x427fdd]

    ??:? void tmpnxoxdjc6.__unittest_L27_C1() [0x427c0b]

    ??:? void tmpnxoxdjc6.__modtest() [0x427d60]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bd1b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42abae]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fd41]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4301f0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fccd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab85]

    ??:? runModuleUnitTests [0x42baf1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42842c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164567
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n  if( a < b+c && b < a+c && c < a+b )\n    return sqrt(long(a+b+c)*(a+b-c)*(a-b+c)*(-a+b+c))/4;\n\
    \  else\n    return -1.0;\n}\nunittest\n{\n    alias candidate = triangle_area;\n\
    \n    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L)\
    \ == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgv0a48sw.d(20): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgv0a48sw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164566
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    float area = 0.0f;\n    if (a <= 0 || b <= 0 ||\
    \ c <= 0) return -1.0f;\n    if (a + b <= c || a + c <= b || b + c <= a) return\
    \ -1.0f;\n    auto s = (a + b + c) / 2.0f;\n    area = sqrt(s * (s - a) * (s -\
    \ b) * (s - c));\n    return area;\n}\nunittest\n{\n    alias candidate = triangle_area;\n\
    \n    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L)\
    \ == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpkib85ufx.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f3d]

    ??:? void tmpkib85ufx.__unittest_L26_C1() [0x427b6b]

    ??:? void tmpkib85ufx.__modtest() [0x427cc0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc63]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaf6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc89]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430138]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc15]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aacd]

    ??:? runModuleUnitTests [0x42ba39]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42838c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164567
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    if (a <= 0 || b <= 0 || c <= 0) return -1;\n   \
    \ float s = (a + b + c) / 2.0;\n    float area = sqrt(s * (s - a) * (s - b) *\
    \ (s - c));\n    return round(area * 100.0) / 100.0;\n}\nunittest\n{\n    alias\
    \ candidate = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n  \
    \  assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L) ==\
    \ 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpdjhuuixx.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427fc5]

    ??:? void tmpdjhuuixx.__unittest_L24_C1() [0x427bb9]

    ??:? void tmpdjhuuixx.__modtest() [0x427d48]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bd03]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab96]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fd29]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4301d8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fcb5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab6d]

    ??:? runModuleUnitTests [0x42bad9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428414]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164567
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    return a+b > c ? area(real(a), real(b), real(c))\
    \ : -1.0;\n}\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpean85bq8.d(19): Error: undefined identifier `area`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpean85bq8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164567
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{ \n    float x = float(a);\n    float y = float(b);\n\
    \    float z = float(c);\n    float s = 0.5*(x+y+z);\n    float area = sqrt(s*(s-x)*(s-y)*(s-z));\n\
    \    if (x > y && x > z)\n    {\n      float area = sqrt(s*(s-x)*(s-y)*(s-z));\n\
    \      if (area != 0)\n        return to!real(area);\n      else \n        return\
    \ -1;\n    }\n    else if (y > x && y > z)\n    {\n      float area = sqrt(s*(s-x)*(s-y)*(s-z));\n\
    \      if (area != 0)\n        return to!real(area);\n      else \n        return\
    \ -1;\n    }\n    else if (z > x && z > y)\n    {\n      float area = sqrt(s*(s-x)*(s-y)*(s-z));\n\
    \      if (area != 0)\n        return to!real(area);\n      else \n        return\
    \ -1;\n    }\n    else \n    {\n      return -1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n  \
    \  assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L) ==\
    \ 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcb1k8phf.d(26): Error: variable `area` is shadowing variable `tmpcb1k8phf.triangle_area.area`

    /tmp/tmpcb1k8phf.d(28): Error: template instance `to!real` template `to` is not
    defined, did you mean No?

    /tmp/tmpcb1k8phf.d(34): Error: variable `area` is shadowing variable `tmpcb1k8phf.triangle_area.area`

    /tmp/tmpcb1k8phf.d(36): Error: template instance `to!real` template `to` is not
    defined, did you mean No?

    /tmp/tmpcb1k8phf.d(42): Error: variable `area` is shadowing variable `tmpcb1k8phf.triangle_area.area`

    /tmp/tmpcb1k8phf.d(44): Error: template instance `to!real` template `to` is not
    defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcb1k8phf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164567
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    if (a <= 0 || b <= 0 || c <= 0)\n        return\
    \ -1;\n    if (a + b <= c || a + c <= b || b + c <= a)\n        return -1;\n \
    \   long s = (a + b + c) / 2;\n    float area = (float)sqrt(s * (s - a) * (s -\
    \ b) * (s - c));\n    return (float)std.math.round(area, 2);\n}\nunittest\n{\n\
    \    alias candidate = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n\
    \    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L)\
    \ == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6q3veka1.d(24): Error: C style cast illegal, use `cast(float)sqrt(s
    * (s - a) * (s - b) * (s - c))`

    /tmp/tmp6q3veka1.d(25): Error: C style cast illegal, use `cast(float)std.math.round(area,
    2)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6q3veka1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164566
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    float p = (a + b + c) / 2.0;\n    float S = sqrt(p\
    \ * (p - a) * (p - b) * (p - c));\n    return (a + b > c && a + c > b && b + c\
    \ > a) ? S : -1;\n}\nunittest\n{\n    alias candidate = triangle_area;\n\n   \
    \ assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) ==\
    \ -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpn9geyp16.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f05]

    ??:? void tmpn9geyp16.__unittest_L23_C1() [0x427b33]

    ??:? void tmpn9geyp16.__modtest() [0x427c88]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc2b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aabe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc51]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430100]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbdd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa95]

    ??:? runModuleUnitTests [0x42ba01]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428354]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164567
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    return is(typeof(triangleAreaImpl!a)) ? triangleAreaImpl!a(a,\
    \ b, c) : -1;\n}\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4b3gv43h.d(19): Error: template instance `triangleAreaImpl!a` template
    `triangleAreaImpl` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4b3gv43h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164567
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    const float s = (a + b + c) / 2.0;\n    const float\
    \ area = sqrt(s * (s - a) * (s - b) * (s - c));\n    return (a > 0 && b > 0 &&\
    \ c > 0 && area > 0) ? area : -1;\n}\n/*\n    You are a detective trying to track\
    \ down a gang of bank robbers. \n    You have intercepted their last message and\
    \ the only clue is that \n    they have mentioned the date of their final heist.\
    \ \n    The date is in the form dd/mm/yyyy. The gang only operates on sundays.\
    \ \n    So you know that the heist will take place on a sunday. \n    You have\
    \ also tracked down the location of the thieves and know that \n    they are currently\
    \ in a particular city. The gang has their \n    own code language and in their\
    \ message, the city and the date is represented by two strings. \n    You need\
    \ to figure out what the date is. \n    For example if the city is \"Melbourne\"\
    \ and the code for the string is \"sneuqf\" \n    then the string is the reverse\
    \ of the city as all vowels are replaced by the next character. \n    The next\
    \ character for 'e' is 'f' and for 'u' is 'v'. \n    The next sunday on or after\
    \ today is 15/09/2019. So the function should return \"15/09/2019\". \n    Note:\
    \ You can assume that the city and the code will have the same length. \n    The\
    \ city will only contain characters from the set [a-z] while the code will only\
    \ contain characters from the set [a-z, '?']. \n    A '?' in the code can stand\
    \ for either 'a' or 'e' or 'i' or 'o' or 'u'. \n    For example if the city is\
    \ \"tokyo\" and the code is \"d?k?y?\", then the function should return \"01/09/2019\"\
    \n    >>> find_sunday(\"Melbourne\", \"sneuqf\")\n    \"15/09/2019\"\n    >>>\
    \ find_sunday(\"dublin\", \"ji?n\")\n    \"22/09/2019\nunittest\n{\n    alias\
    \ candidate = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n  \
    \  assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L) ==\
    \ 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0t5etg3a.d(23): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0t5etg3a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164567
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    float p = (a + b + c) / 2.0;\n    float s = sqrt(p\
    \ * (p - a) * (p - b) * (p - c));\n    float result = s / 0.01;\n    float rounded_result\
    \ = round(result);\n    if (rounded_result == -1.0f) {\n        return -1.0f;\n\
    \    }\n    return (float)rounded_result / 100.0f;\n}\nunittest\n{\n    alias\
    \ candidate = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n  \
    \  assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L) ==\
    \ 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmvaq03ts.d(26): Error: C style cast illegal, use `cast(float)rounded_result`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmvaq03ts.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164567
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    float a1 = float(a);\n    float b1 = float(b);\n\
    \    float c1 = float(c);\n    float s = (a1 + b1 + c1) / 2;\n    float area =\
    \ sqrt(s * (s - a1) * (s - b1) * (s - c1));\n    if(a1 + b1 > c1 && a1 + c1 >\
    \ b1 && b1 + c1 > a1){\n        return area;\n    }else{\n        return -1.0;\n\
    \    }\n}\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqsa_s0us.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f55]

    ??:? void tmpqsa_s0us.__unittest_L30_C1() [0x427b83]

    ??:? void tmpqsa_s0us.__modtest() [0x427cd8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc7b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab0e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fca1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430150]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc2d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aae5]

    ??:? runModuleUnitTests [0x42ba51]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4283a4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164567
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    if (a < 0 || b < 0 || c < 0) return -1.0;\n    if\
    \ (a + b <= c || a + c <= b || b + c <= a) return -1.0;\n    float s = (a + b\
    \ + c) / 2.0;\n    return cast(float) sqrt(s * (s - a) * (s - b) * (s - c));\n\
    }\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpxpaidv14.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f2d]

    ??:? void tmpxpaidv14.__unittest_L24_C1() [0x427b57]

    ??:? void tmpxpaidv14.__modtest() [0x427cac]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc53]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aae6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc79]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430128]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc05]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aabd]

    ??:? runModuleUnitTests [0x42ba29]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42837c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164567
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    float result;\n    if ((a + b > c) && (a + c > b)\
    \ && (b + c > a)) {\n        float p = (a + b + c) / 2.0;\n        result = sqrt(p\
    \ * (p - a) * (p - b) * (p - c));\n    } else {\n        result = -1.0;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = triangle_area;\n\n\
    \    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L)\
    \ == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8pofaxkd.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f25]

    ??:? void tmp8pofaxkd.__unittest_L28_C1() [0x427b53]

    ??:? void tmp8pofaxkd.__modtest() [0x427ca8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc4b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aade]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc71]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430120]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbfd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aab5]

    ??:? runModuleUnitTests [0x42ba21]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428374]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164567
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    enum side_order = Tuple!(3L, 2L, 1L);\n    enum\
    \ side_order_sort = Tuple!(2L, 1L, 3L);\n    side_order[0] = a;\n    side_order[1]\
    \ = b;\n    side_order[2] = c;\n    side_order.sort!(std.algorithm.sort.quicksort,\
    \ std.functional.less);\n    if (side_order[0] + side_order[1] > side_order[2])\n\
    \    {\n        side_order_sort[0] = side_order[2];\n        side_order_sort[1]\
    \ = side_order[1];\n        side_order_sort[2] = side_order[0];\n        float\
    \ p = (side_order_sort[0] + side_order_sort[1] + side_order_sort[2]) / 2.0f;\n\
    \        float area = sqrt(p * (p - side_order_sort[0]) * (p - side_order_sort[1])\
    \ * (p - side_order_sort[2]));\n        return area;\n    }\n    else\n    {\n\
    \        return -1;\n    }\n}\n/*\n    Implement a function which takes two numbers\
    \ as input, and returns\n    all odd numbers between them, inclusive.\n    Example:\n\
    \    >>> odd_numbers(1, 5)\n    [1, 3, 5]\n    >>> odd_numbers(2, 10)\n    [3,\
    \ 5, 7, 9]\n*/\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(490):
    Error: static assert:  "Attempted to instantiate Tuple with an invalid argument:
    3L"

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):        instantiated
    from here: `parseSpecs!(3L, 2L, 1L)`

    /tmp/tmp66t2m672.d(19):        instantiated from here: `Tuple!(3L, 2L, 1L)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp66t2m672.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164567
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    return (a + b > c && a + c > b && b + c > a) ? sqrt(pow(a,\
    \ 2) + pow(b, 2) - pow(c, 2)) * sqrt(pow(a, 2) + pow(c, 2) - pow(b, 2)) * sqrt(pow(b,\
    \ 2) + pow(c, 2) - pow(a, 2)) / 4 : -1;\n}\nunittest\n{\n    alias candidate =\
    \ triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L,\
    \ 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvjzrhfz_.d(19): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    /tmp/tmpvjzrhfz_.d(19): Error: `std.math.sqrt` called with argument types `(long)`
    matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    /tmp/tmpvjzrhfz_.d(19): Error: `std.math.sqrt` called with argument ty'
  stdout: ''
  timestamp: 1660164567
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{ \n    float S = (a + b + c) / 2.0;\n    float area =\
    \ sqrt(S * (S - a) * (S - b) * (S - c));\n    return area;\n}\nunittest\n{\n \
    \   alias candidate = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n\
    \    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L)\
    \ == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp0nzdkyqq.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ee5]

    ??:? void tmp0nzdkyqq.__unittest_L23_C1() [0x427ad9]

    ??:? void tmp0nzdkyqq.__modtest() [0x427c68]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa9e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300e0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbbd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa75]

    ??:? runModuleUnitTests [0x42b9e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428334]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164567
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    float p = (a + b + c) / 2.0;\n    float area = sqrt(p\
    \ * (p - a) * (p - b) * (p - c));\n    float result = cast(float) (area * 100)\
    \ / 100;\n    return result;\n}\nunittest\n{\n    alias candidate = triangle_area;\n\
    \n    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L)\
    \ == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpuubn3h3l.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f05]

    ??:? void tmpuubn3h3l.__unittest_L24_C1() [0x427af9]

    ??:? void tmpuubn3h3l.__modtest() [0x427c88]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc2b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aabe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc51]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430100]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbdd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa95]

    ??:? runModuleUnitTests [0x42ba01]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428354]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164567
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n  if (a+b > c && a+c > b && b+c > a) {\n    float p\
    \ = (a+b+c)/2.0;\n    return Math.sqrt(p*(p-a)*(p-b)*(p-c));\n  } else {\n   \
    \ return -1.0;\n  }\n}\n/*\nunittest\n{\n    alias candidate = triangle_area;\n\
    \n    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L)\
    \ == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn7zgkegt.d(26): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn7zgkegt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164567
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    if (a < 0 || b < 0 || c < 0)\n        return -1.0;\n\
    \    if ((a + b) < c || (a + c) < b || (b + c) < a)\n        return -1.0;\n  \
    \  //using Heron's formula\n    double p = a + b + c;\n    double s = p / 2;\n\
    \    double area = sqrt(s * (s - a) * (s - b) * (s - c));\n    return area;\n\
    }\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4tvr2jks.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f45]

    ??:? void tmp4tvr2jks.__unittest_L29_C1() [0x427b73]

    ??:? void tmp4tvr2jks.__modtest() [0x427cc8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc6b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aafe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc91]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430140]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc1d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aad5]

    ??:? runModuleUnitTests [0x42ba41]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428394]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164567
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    float[] sides = [a, b, c];\n    float s = (a + b\
    \ + c) / 2;\n    if (a < s || b < s || c < s)\n    {\n        return sqrt(s *\
    \ (s - a) * (s - b) * (s - c));\n    }\n    else \n    {\n        return -1.0;\n\
    \    }\n}\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmexrf2hv.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x42833d]

    ??:? void tmpmexrf2hv.__unittest_L30_C1() [0x427f31]

    ??:? void tmpmexrf2hv.__modtest() [0x4280c0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c2f3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b186]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430319]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4307c8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302a5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b15d]

    ??:? runModuleUnitTests [0x42c0c9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42878c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164567
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n  float s = (a + b + c) / 2.0;\n  if (s <= a || s <=\
    \ b || s <= c)\n    return -1.0;\n  return sqrt(s * (s - a) * (s - b) * (s - c));\n\
    }\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjd_vx0j9.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f1d]

    ??:? void tmpjd_vx0j9.__unittest_L24_C1() [0x427b4b]

    ??:? void tmpjd_vx0j9.__modtest() [0x427ca0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aad6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc69]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430118]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbf5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aaad]

    ??:? runModuleUnitTests [0x42ba19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42836c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164567
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    auto s = (a + b + c) / 2.0;\n    auto area = sqrt(s\
    \ * (s - a) * (s - b) * (s - c));\n    return area;\n}\nunittest\n{\n    alias\
    \ candidate = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n  \
    \  assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L) ==\
    \ 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpc8bxjcg8.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427eed]

    ??:? void tmpc8bxjcg8.__unittest_L23_C1() [0x427add]

    ??:? void tmpc8bxjcg8.__modtest() [0x427c6c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc13]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaa6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc39]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300e8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbc5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa7d]

    ??:? runModuleUnitTests [0x42b9e9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42833c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164567
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    auto aTuple = makeTuple(a, b, c);\n    sort(aTuple);\n\
    \    if(aTuple[0] + aTuple[1] > aTuple[2])\n    {\n        return -1;\n    }\n\
    \    else\n    {\n        return (0.5 * aTuple[0] * aTuple[1]);\n    }\n}\nunittest\n\
    {\n    alias candidate = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) ==\
    \ 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyr7utyt6.d(19): Error: undefined identifier `makeTuple`

    /tmp/tmpyr7utyt6.d(20): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyr7utyt6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164567
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    if (a <= 0 || b <= 0 || c <= 0) return -1;\n   \
    \ const float p = (a + b + c) / 2;\n    return std.math.sqrt(p * (p - a) * (p\
    \ - b) * (p - c));\n}\nunittest\n{\n    alias candidate = triangle_area;\n\n \
    \   assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) ==\
    \ -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqysdw2nd.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ef5]

    ??:? void tmpqysdw2nd.__unittest_L23_C1() [0x427ae5]

    ??:? void tmpqysdw2nd.__modtest() [0x427c74]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc1b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaae]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc41]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300f0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbcd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa85]

    ??:? runModuleUnitTests [0x42b9f1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428344]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164567
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    float p = (a + b + c) / 2.0;\n    if (p < a || p\
    \ < b || p < c)\n        return -1.0;\n    return sqrt(p * (p - a) * (p - b) *\
    \ (p - c));\n}\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpj1ia6_wc.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f1d]

    ??:? void tmpj1ia6_wc.__unittest_L24_C1() [0x427b4b]

    ??:? void tmpj1ia6_wc.__modtest() [0x427ca0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aad6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc69]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430118]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbf5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aaad]

    ??:? runModuleUnitTests [0x42ba19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42836c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164567
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    bool good = false;\n    float answer = -1;\n   \
    \ float s = -1;\n    float halfs = -1;\n    float area = -1;\n    Tuple!(long,\
    \ long, long) tup = tuple(a, b, c);\n    writeln(tup);\n    if(a > 0 && b > 0\
    \ && c > 0)\n    {\n        if((a + b) > c)\n        {\n            if((a + c)\
    \ > b)\n            {\n                if((b + c) > a)\n                {\n  \
    \                  good = true;\n                }\n            }\n        }\n\
    \    }\n    writeln(good);\n    if(good)\n    {\n        s = cast(float)(a + b\
    \ + c) / 2;\n        halfs = s * (s - a) * (s - b) * (s - c);\n        area =\
    \ std.math.sqrt(halfs);\n        return area;\n    }\n    return answer;\n}\n\
    unittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_bua610g.d(25): Error: `writeln` is not defined, perhaps `import
    std.stdio;` is needed?

    /tmp/tmp_bua610g.d(39): Error: `writeln` is not defined, perhaps `import std.stdio;`
    is needed?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_bua610g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164567
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    long max_side = max(a,b,c);\n    if (max_side ==\
    \ a && a >= b + c)\n        return -1.0;\n    if (max_side == b && b >= a + c)\n\
    \        return -1.0;\n    if (max_side == c && c >= a + b)\n        return -1.0;\n\
    \    float p = (a + b + c) / 2.0;\n    return sqrt(p * (p - a) * (p - b) * (p\
    \ - c));\n}\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdom88b7f.d(19): Error: undefined identifier `max`, did you mean
    function `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdom88b7f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164567
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    auto tup = tuple(a, b, c);\n    auto tup_sorted\
    \ = makeTuple(tup[$-1], tup[$-2], tup[$-3]);\n    auto s = cast(float)(tup_sorted[0]\
    \ + tup_sorted[1] + tup_sorted[2]) / 2;\n    auto area = sqrt(s * (s - tup_sorted[0])\
    \ * (s - tup_sorted[1]) * (s - tup_sorted[2]));\n    if(tup_sorted[0] >= tup_sorted[1]\
    \ + tup_sorted[2])\n        return -1.0;\n    else\n        return area;\n}\n\
    unittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8eqrxsh5.d(20): Error: undefined identifier `makeTuple`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8eqrxsh5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164567
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    float s = 0;\n    float area = 0;\n    const float\
    \ MAX = float.max;\n    float _a = float(a);\n    float _b = float(b);\n    float\
    \ _c = float(c);\n    float[] temp = [_a, _b, _c];\n    sort(temp);\n    _a =\
    \ temp[0];\n    _b = temp[1];\n    _c = temp[2];\n    //writefln(\"a = %.0f b\
    \ = %.0f c = %.0f\", _a, _b, _c);\n    if ((_a < 0) || (_b < 0) || (_c < 0)) return\
    \ -1;\n    if ((_a == 0) || (_b == 0) || (_c == 0)) return -1;\n    if ((_a ==\
    \ _b) && (_b == _c)) return sqrt(_a * _a * 3 / 4);\n    if ((_a + _b <= _c) ||\
    \ (_a + _c <= _b) || (_b + _c <= _a)) return -1;\n    s = (_a + _b + _c) / 2;\n\
    \    area = sqrt(s * (s - _a) * (s - _b) * (s - _c));\n    if (area == 0) return\
    \ 0;\n    if (area >= MAX) return -1;\n    return area;\n}\nunittest\n{\n    alias\
    \ candidate = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n  \
    \  assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L) ==\
    \ 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo1d7fl3k.d(26): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo1d7fl3k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164567
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    if(a == 0 || b == 0 || c == 0)\n        return -1.0;\n\
    \    if(a+b < c || a+c < b || b+c < a)\n        return -1.0;\n    auto s = (a+b+c)/2.0;\n\
    \    auto area = sqrt(s*(s-a)*(s-b)*(s-c));\n    return area;\n}\nunittest\n{\n\
    \    alias candidate = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n\
    \    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L)\
    \ == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_yf3vn99.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f55]

    ??:? void tmp_yf3vn99.__unittest_L27_C1() [0x427b83]

    ??:? void tmp_yf3vn99.__modtest() [0x427cd8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc7b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab0e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fca1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430150]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc2d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aae5]

    ??:? runModuleUnitTests [0x42ba51]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4283a4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164567
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{ \n    float result;\n    bool validTriangle;\n    validTriangle\
    \ = ((a + b) > c && (a + c) > b && (b + c) > a);\n    if (validTriangle) {\n \
    \       auto s = (a + b + c) / 2.0;\n        result = sqrt(s * (s - a) * (s -\
    \ b) * (s - c));\n    } else {\n        result = -1.0;\n    }\n    return result;\n\
    } \n \n/*\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx_0jb19g.d(31): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx_0jb19g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164567
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    if(a+b>c && a+c>b && b+c>a)\n    {\n        float\
    \ s=(a+b+c)/2.0;\n        float a=sqrt(s*(s-a)*(s-b)*(s-c));\n        return a;\n\
    \    }\n    else return -1;\n}\n/*\n    Write a function named is_integer_string\
    \ that accepts a string and returns \n    true if it represents an integer value\
    \ and false otherwise.\n    Example:\n    >>> is_integer_string(\"-124L\")\n \
    \   true\n    >>> is_integer_string(\"124.01F\")\n    false\n*/\nunittest\n{\n\
    \    alias candidate = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n\
    \    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L)\
    \ == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprf51jpz_.d(22): Error: variable `a` is shadowing variable `tmprf51jpz_.triangle_area.a`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprf51jpz_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164567
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{ \n    if (a <= 0L || b <= 0L || c <= 0L) return -1L;\n\
    \    if ((a + b) <= c || (a + c) <= b || (b + c) <= a) return -1L;\n    float\
    \ s = a+b+c;\n    return sqrt(s*(s-a)*(s-b)*(s-c)) / 4.0;\n}\nunittest\n{\n  \
    \  alias candidate = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n\
    \    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L)\
    \ == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpujdye4aj.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f2d]

    ??:? void tmpujdye4aj.__unittest_L24_C1() [0x427aed]

    ??:? void tmpujdye4aj.__modtest() [0x427cb0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc53]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aae6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc79]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430128]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc05]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aabd]

    ??:? runModuleUnitTests [0x42ba29]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42837c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164567
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    float s = (a + b + c) / 2.0;\n    if (s <= max(a,\
    \ max(b, c)))\n        return -1.0;\n    else\n        return sqrt(s * (s - a)\
    \ * (s - b) * (s - c));\n}\nunittest\n{\n    alias candidate = triangle_area;\n\
    \n    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L)\
    \ == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2txjj7bm.d(20): Error: undefined identifier `max`, did you mean
    function `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2txjj7bm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164567
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    if(a <= 0 || b <= 0 || c <= 0)\n        return -1.0;\n\
    \    \n    if(a+b <= c || a+c <= b || b+c <= a)\n        return -1.0;\n    \n\
    \    double s = (a+b+c)/2.0;\n    return sqrt(s*(s-a)*(s-b)*(s-c));\n}\nunittest\n\
    {\n    alias candidate = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) ==\
    \ 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpna5y3z_6.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f2d]

    ??:? void tmpna5y3z_6.__unittest_L28_C1() [0x427b5b]

    ??:? void tmpna5y3z_6.__modtest() [0x427cb0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc53]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aae6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc79]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430128]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc05]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aabd]

    ??:? runModuleUnitTests [0x42ba29]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42837c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164567
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    // Equilateral triangle\n    if (a == b && b ==\
    \ c) {\n        return (a * a * sqrt(3)) / 4;\n    }\nunittest\n{\n    alias candidate\
    \ = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L,\
    \ 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5drrg9lt.d(23): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5drrg9lt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164567
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    if (a <= 0 || b <= 0 || c <= 0) \n        return\
    \ -1;\n    if (a + b <= c || a + c <= b || b + c <= a) \n        return -1;\n\
    \    double s = (a + b + c) / 2.0;\n    return round(sqrt(s * (s - a) * (s - b)\
    \ * (s - c)) * 100) / 100;\n}\nunittest\n{\n    alias candidate = triangle_area;\n\
    \n    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L)\
    \ == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpi9xzgtb4.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427fed]

    ??:? void tmpi9xzgtb4.__unittest_L26_C1() [0x427c17]

    ??:? void tmpi9xzgtb4.__modtest() [0x427d6c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bd2b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42abbe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fd51]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430200]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fcdd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab95]

    ??:? runModuleUnitTests [0x42bb01]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42843c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164568
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    static assert(a > 0 && b > 0 && c > 0);\n    static\
    \ assert(a < long.max && b < long.max && c < long.max);\n    assert(a > 0);\n\
    \    assert(b > 0);\n    assert(c > 0);\n    if(a + b > c && a + c > b && b +\
    \ c > a)\n    {\n        auto tmp = (float)((a + b + c) / 2);\n        float area\
    \ = sqrt(tmp * (tmp - a) * (tmp - b) * (tmp - c));\n        return area;\n   \
    \ }\n    else return -1;\n}\nunittest\n{\n    alias candidate = triangle_area;\n\
    \n    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L)\
    \ == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn9dbiijr.d(26): Error: C style cast illegal, use `cast(float)((a
    + b + c) / 2)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn9dbiijr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164567
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    float p = float(a + b + c) / 2;\n    float abc =\
    \ sqrt(p * (p - a) * (p - b) * (p - c));\n    return (a + b > c && a + c > b &&\
    \ b + c > a) ? abc : -1;\n}\nunittest\n{\n    alias candidate = triangle_area;\n\
    \n    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L)\
    \ == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpbrjpt3zy.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f05]

    ??:? void tmpbrjpt3zy.__unittest_L23_C1() [0x427b2f]

    ??:? void tmpbrjpt3zy.__modtest() [0x427c84]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc2b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aabe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc51]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430100]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbdd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa95]

    ??:? runModuleUnitTests [0x42ba01]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428354]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164567
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    return a <= 0 || b <= 0 || c <= 0 || a+b <= c ||\
    \ a+c <= b || b+c <= a ? -1.0 : \n           2.0 * (a * b + b * c + a * c) / (a\
    \ + b + c);\n}\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp74t9ebe0.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f2d]

    ??:? void tmp74t9ebe0.__unittest_L22_C1() [0x427ae9]

    ??:? void tmp74t9ebe0.__modtest() [0x427cac]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc53]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aae6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc79]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430128]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc05]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aabd]

    ??:? runModuleUnitTests [0x42ba29]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42837c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164568
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    if(!(a+b>c && a+c>b && b+c>a))\n        return -1;\n\
    \    auto s = cast(double)(a+b+c)/2;\n    return sqrt(s*(s-a)*(s-b)*(s-c));\n\
    }\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpl2lbv6d6.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f1d]

    ??:? void tmpl2lbv6d6.__unittest_L24_C1() [0x427b4b]

    ??:? void tmpl2lbv6d6.__modtest() [0x427ca0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aad6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc69]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430118]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbf5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aaad]

    ??:? runModuleUnitTests [0x42ba19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42836c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164567
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{ \n    long side_sum;\n    return ((a+b>c)&&(a+c>b)&&(b+c>a))\n\
    \        ? sqrt(pow(a,2)+pow(b,2)-pow(c,2))*b/2\n        : -1;\n}\nunittest\n\
    {\n    alias candidate = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) ==\
    \ 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp11m0b929.d(21): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp11m0b929.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164567
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{ \n    float s = (a + b + c) / 2.0;\n    float sq = sqrt(s\
    \ * (s - a) * (s - b) * (s - c));\n    if (sq <= 0)\n        return -1;\n    return\
    \ sq;\n}\n/*\n    Given a list of the integer divisors of N, calculate and return\n\
    \    the sum of all the proper divisors of N.\n    Example:\n    >>> proper_divisors(8L)\n\
    \    7L\n    >>> proper_divisors(9L)\n    4L\n    >>> proper_divisors(28L)\n \
    \   28L\n*/\nlong proper_divisors(T...)(T N)\n{\n    static if (N.length == 0)\n\
    \        return 0;\n    else\n    {\n        long sum = 0;\n        foreach (i;\
    \ 1 .. N)\n        {\n            if (N % i == 0)\n                sum += i;\n\
    \        }\n        return sum - N;\n    }\n}\n/*\n    Given a positive integer\
    \ N. Return the number of positive integers\n    less than or equal to N that\
    \ have at least one digit that is a 7.\n    Example:\n    >>> sevens(1L)\n   \
    \ 0L\n    >>> sevens(7L)\n    1L\n    >>> sevens(17L)\n    1L\n    >>> sevens(77L)\n\
    \    7L\n    >>> sevens(777777777777L)\n    12000000000L\n*/\nlong sevens(long\
    \ N)\n{\n    static if (N < 0)\n        return 0;\n    else\n    {\n        long\
    \ sum = 0;\n        foreach (i; 1 .. N + 1)\n        {\n            if (i.to!string.indexOf(\"\
    7\") != -1)\n                sum++;\n        }\n        return sum;\n    }\n}\n\
    /*\n    Given a list of integers that may or may not contain a number called \n\
    \    target. Return the index of target in the list. If target is not in the\n\
    \    list return -1.\n    Example:\n    >>> linear_search(4L, 5L, 6L,\nunittest\n\
    {\n    alias candidate = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) ==\
    \ 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzmo60b57.d(81): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzmo60b57.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164567
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    alias ulong = uint;\nunittest\n{\n    alias candidate\
    \ = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L,\
    \ 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiaksy8mp.d(19): Error: no identifier for declarator `ulong`

    /tmp/tmpiaksy8mp.d(19): Error: found `;` when expecting `.` following uint

    /tmp/tmpiaksy8mp.d(20): Error: found `unittest` when expecting identifier following
    `uint`.

    /tmp/tmpiaksy8mp.d(21): Error: alias cannot have initializer

    /tmp/tmpiaksy8mp.d(21): Error: semicolon expected to close `alias` declaration

    /tmp/tmpiaksy8mp.d(34): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiaksy8mp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164567
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    float perimeter = (a + b + c) / 2.0f;\n    float\
    \ area = sqrt(perimeter * (perimeter - a) * (perimeter - b) * (perimeter - c));\n\
    \    if (area <= 0)\n        return -1.0f;\n    return area;\n}\nunittest\n{\n\
    \    alias candidate = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n\
    \    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L)\
    \ == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpa45japtf.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x427efd]

    ??:? void tmpa45japtf.__unittest_L25_C1() [0x427af1]

    ??:? void tmpa45japtf.__modtest() [0x427c80]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc23]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aab6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc49]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300f8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbd5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa8d]

    ??:? runModuleUnitTests [0x42b9f9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42834c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164568
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{ \n    if (a + b > c && b + c > a && a + c > b)\n    {\n\
    \        float semi = (a + b + c) / 2.0;\n        return sqrt(semi * (semi - a)\
    \ * (semi - b) * (semi - c));\n    }\n    else \n    {\n        return -1;\n \
    \   }\n    \n} \n/*\n    Write a function to sort a list of integers using quicksort.\n\
    \    Example:\n    >>> quicksort([2, 4, 1, 3])\n    [1, 2, 3, 4]\n    \n*/\nT[]\
    \ quicksort(T)(T[] list) if (is(T == int))\n{\n    return qsort(list, 0, list.length);\n\
    }\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpfg54s99v.d(47): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f0d]

    ??:? void tmpfg54s99v.__unittest_L41_C1() [0x427b3b]

    ??:? void tmpfg54s99v.__modtest() [0x427c90]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc33]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aac6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc59]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430108]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbe5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa9d]

    ??:? runModuleUnitTests [0x42ba09]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42835c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164568
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{ \n    float s = (a + b + c) / 2.0;\n    if(s - a <= 0\
    \ || s - b <= 0 || s - c <= 0)\n        return -1;\n    return sqrt(s * (s - a)\
    \ * (s - b) * (s - c));\n}\nunittest\n{\n    alias candidate = triangle_area;\n\
    \n    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L)\
    \ == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpfejvnjli.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f3d]

    ??:? void tmpfejvnjli.__unittest_L24_C1() [0x427b6b]

    ??:? void tmpfejvnjli.__modtest() [0x427cc0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc63]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaf6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc89]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430138]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc15]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aacd]

    ??:? runModuleUnitTests [0x42ba39]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42838c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164568
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    if (a + b > c && a + c > b && b + c > a)\n    {\n\
    \        float s = float(a + b + c) / 2;\n        return float(sqrt(s * (s - a)\
    \ * (s - b) * (s - c)));\n    }\n    return -1;\n}\nunittest\n{\n    alias candidate\
    \ = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L,\
    \ 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4_pe7ci8.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f05]

    ??:? void tmp4_pe7ci8.__unittest_L26_C1() [0x427b33]

    ??:? void tmp4_pe7ci8.__modtest() [0x427c88]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc2b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aabe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc51]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430100]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbdd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa95]

    ??:? runModuleUnitTests [0x42ba01]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428354]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164568
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    auto S = (a + b + c) / 2.0f;\n    return S < a ||\
    \ S < b || S < c ? -1.0f : sqrt(S * (S - a) * (S - b) * (S - c));\n}\n/*\n   \
    \ Given a number n, construct a triangle with sides 1 through n. \n    Here are\
    \ some examples:\n    >>> triangle(1)\n    [1]\n    >>> triangle(2)\n    [1, 1,\
    \ 1]\n    >>> triangle(3)\n    [1, 1, 1, 1, 2, 1]\n    >>> triangle(4)\n    [1,\
    \ 1, 1, 1, 2, 1, 1, 3, 3, 1]\n*/\nsize_t[size_t] triangle(size_t n)\n{\n    if\
    \ (n == 0)\n        return [];\n    auto triangle = [](auto n, size_t[size_t]\
    \ T)\n    {\n        if (n == 0)\n            return T;\n        return triangle(n\
    \ - 1, [1 .. n + 1] ~ T);\n    };\n    return triangle(n, [1]);\n}\n/*\n    Given\
    \ an array of integers and a positive number n, find all elements n.\n    that\
    \ are nth power of their indices.\n    >>> nthPower([1, 2, 3, 4], 2)\n    [1,\
    \ 4]\n    >>> nthPower([1, 2, 3, 4], 3)\n    [1]\n    >>> nthPower([1, 2, 3, 4],\
    \ 5)\n    []\n*/\nsize_t[] nthPower(int[] arr, size_t n)\n{\n    auto power =\
    \ [](auto i, auto n)\n    {\n        auto pow = 1;\n        for (; n > 0; n--)\n\
    \            pow *= i;\n        return pow;\n    };\n    return arr.filter!(i\
    \ => i == power(arr.indexOf(i), n)).dup;\n}\n/*\n    Given an array of integers,\
    \ find a pair of numbers (one from the first array, \n    one from the second\
    \ array) that would add up to the given sum. Return indices\nunittest\n{\n   \
    \ alias candidate = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n\
    \    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L)\
    \ == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjr99kw3a.d(38): Error: expression expected, not `auto`

    /tmp/tmpjr99kw3a.d(38): Error: found `n` when expecting `,`

    /tmp/tmpjr99kw3a.d(38): Error: expression expected, not `,`

    /tmp/tmpjr99kw3a.d(38): Error: found `size_t` when expecting `,`

    /tmp/tmpjr99kw3a.d(38): Error: found `T` when expecting `,`

    /tmp/tmpjr99kw3a.d(39): Error: semicolon expected following auto declaration,
    not `{`

    /tmp/tmpjr99kw3a.d(42): Error: found `..` when expecting `,`

    /tmp/tmpjr99kw3a.d(43): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmpjr99kw3a.d(58): Error: expression expected, not `auto`

    /tmp/tmpjr99kw3a.d(58): Error: found `i` when expecting `,`

    /tmp/tmpjr99kw3a.d(58): Error: expression expected, not `,`

    /tmp/tmpjr99kw3a.d(58): Error: found `auto` when expecting `,`

    /tmp/tmpjr99kw3a.d(59): Error: semicolon expected following auto declaration,
    not `{`

    /tmp/tmpjr99kw3a.d(64): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmpjr99kw3a.d(67): Error: unterminated /* */ comment

    Failed: ["dmd", "-uni'
  stdout: ''
  timestamp: 1660164567
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    if ((a + b) > c && (a + c) > b && (b + c) > a)\n\
    \    {\n        return 0.5 * a * b;\n    } else\n    {\n        return -1;\n \
    \   }\n}\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpgp41rzsp.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ecd]

    ??:? void tmpgp41rzsp.__unittest_L27_C1() [0x427afb]

    ??:? void tmpgp41rzsp.__modtest() [0x427c50]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbf3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa86]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc19]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300c8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fba5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa5d]

    ??:? runModuleUnitTests [0x42b9c9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42831c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164568
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    // Insert code here\n    if(a < 0 || b < 0 || c\
    \ < 0)\n        return -1;\n    if((a + b) <= c || (a + c) <= b || (b + c) <=\
    \ a)\n        return -1;\n    auto s = (a + b + c) / 2.0;\n    return sqrt(s *\
    \ (s - a) * (s - b) * (s - c));\n}\nunittest\n{\n    alias candidate = triangle_area;\n\
    \n    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L)\
    \ == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8zt2cqd7.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f2d]

    ??:? void tmp8zt2cqd7.__unittest_L27_C1() [0x427b5b]

    ??:? void tmp8zt2cqd7.__modtest() [0x427cb0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc53]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aae6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc79]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430128]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc05]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aabd]

    ??:? runModuleUnitTests [0x42ba29]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42837c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164568
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    if (a + b > c)\n    {\n        //Use Heron's formula\n\
    \        double p = (a + b + c) / 2.0;\n        return cast(float) sqrt(p * (p\
    \ - a) * (p - b) * (p - c));\n    }\n    else\n    {\n        return -1;\n   \
    \ }\n}\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpfd6mtrgc.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ef5]

    ??:? void tmpfd6mtrgc.__unittest_L30_C1() [0x427b23]

    ??:? void tmpfd6mtrgc.__modtest() [0x427c78]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc1b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaae]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc41]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300f0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbcd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa85]

    ??:? runModuleUnitTests [0x42b9f1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428344]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164568
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    // A triangle is valid if the sum of two sides is\
    \ greater than the third side.\n    if (a + b > c && a + c > b && b + c > a)\n\
    \    {\n        // Heron's formula is used to calculate the area of a triangle\
    \ given the lengths of the sides.\n        float s = (a + b + c) / 2.0;\n    \
    \    float area = float(sqrt(s * (s - a) * (s - b) * (s - c)));\n        return\
    \ area;\n    }\n    else\n    {\n        return -1.0;\n    }\n}\nunittest\n{\n\
    \    alias candidate = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n\
    \    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L)\
    \ == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5kn_i11o.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f15]

    ??:? void tmp5kn_i11o.__unittest_L32_C1() [0x427b43]

    ??:? void tmp5kn_i11o.__modtest() [0x427c98]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc3b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aace]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc61]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430110]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aaa5]

    ??:? runModuleUnitTests [0x42ba11]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428364]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164568
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    const float f = a + b + c;\n    if (f <= 0) return\
    \ -1;\n    const float s = f / 2;\n    const float t = s * (s - a) * (s - b) *\
    \ (s - c);\n    if (t <= 0) return -1;\n    return sqrt(t);\n}\nunittest\n{\n\
    \    alias candidate = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n\
    \    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L)\
    \ == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6b34qm19.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f55]

    ??:? void tmp6b34qm19.__unittest_L26_C1() [0x427b7f]

    ??:? void tmp6b34qm19.__modtest() [0x427cd4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc7b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab0e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fca1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430150]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc2d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aae5]

    ??:? runModuleUnitTests [0x42ba51]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4283a4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164568
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    if(a+b > c && a+c > b && b+c > a)\n    {\n     \
    \   float s = (a+b+c)/2.0;\n        float area = sqrt(s*(s-a)*(s-b)*(s-c));\n\
    \        return float(area);\n    }\n    else\n    {\n        return -1;\n   \
    \ }\n}\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpnsyo1pmw.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f15]

    ??:? void tmpnsyo1pmw.__unittest_L30_C1() [0x427b43]

    ??:? void tmpnsyo1pmw.__modtest() [0x427c98]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc3b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aace]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc61]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430110]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aaa5]

    ??:? runModuleUnitTests [0x42ba11]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428364]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164568
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    if (a <= 0L || b <= 0L || c <= 0L) \n        return\
    \ -1;\n    if (a+b <= c || a+c <= b || b+c <= a) \n        return -1;\n    auto\
    \ s = (a+b+c)/2.0;\n    return cast(float) sqrt(s*(s-a)*(s-b)*(s-c));\n}\nunittest\n\
    {\n    alias candidate = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) ==\
    \ 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpzi0ct72k.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f2d]

    ??:? void tmpzi0ct72k.__unittest_L26_C1() [0x427b5b]

    ??:? void tmpzi0ct72k.__modtest() [0x427cb0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc53]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aae6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc79]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430128]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc05]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aabd]

    ??:? runModuleUnitTests [0x42ba29]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42837c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164568
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    if (a + b > c && a + c > b && b + c > a)\n    {\n\
    \        auto p = (a + b + c) / 2.0;\n        return sqrt(p * (p - a) * (p - b)\
    \ * (p - c));\n    }\n    return -1.0;\n}\nunittest\n{\n    alias candidate =\
    \ triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L,\
    \ 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp831djcx4.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f0d]

    ??:? void tmp831djcx4.__unittest_L26_C1() [0x427b3b]

    ??:? void tmp831djcx4.__modtest() [0x427c90]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc33]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aac6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc59]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430108]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbe5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa9d]

    ??:? runModuleUnitTests [0x42ba09]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42835c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164568
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    if(a + b > c && a + c > b && b + c > a)\n    {\n\
    \        float s = (a + b + c) / 2.0;\n        return sqrt(s * (s - a) * (s -\
    \ b) * (s - c));\n    }\n    return -1.0;\n}\n/*\n    Given a list of n numbers.\
    \ Check if there are any two numbers in the list that add up to 9. \n    Return\
    \ True if 9 can be formed using two elements from the list, else return False.\n\
    \    Example:\n    >>> sum_of_nine([2, 3, 4, 5, 6, 7, 8, 9, 10])\n    True\n \
    \   >>> sum_of_nine([2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n    False\n*/\nunittest\n\
    {\n    alias candidate = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) ==\
    \ 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvmm6afq3.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f0d]

    ??:? void tmpvmm6afq3.__unittest_L35_C1() [0x427b3b]

    ??:? void tmpvmm6afq3.__modtest() [0x427c90]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc33]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aac6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc59]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430108]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbe5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa9d]

    ??:? runModuleUnitTests [0x42ba09]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42835c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164568
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    // typecheck\n    if(a <= 0L || b <= 0L || c <=\
    \ 0L) return -1;\n    // triangle inequality\n    if(a + b <= c || a + c <= b\
    \ || b + c <= a) return -1;\n    // Heron's formula\n    auto s = cast(double)(a\
    \ + b + c) / 2;\n    auto area = sqrt(s * (s - a) * (s - b) * (s - c));\n    return\
    \ cast(float)(round(area * 100.0) / 100.0);\n}\nunittest\n{\n    alias candidate\
    \ = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L,\
    \ 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpexhidgb5.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ffd]

    ??:? void tmpexhidgb5.__unittest_L28_C1() [0x427c27]

    ??:? void tmpexhidgb5.__modtest() [0x427d7c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bd3b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42abce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fd61]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430210]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fced]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aba5]

    ??:? runModuleUnitTests [0x42bb11]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42844c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164568
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    // a, b, c is the side of the triangle\n    return\
    \ -1.0;\n}\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpr2sciyvz.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e8d]

    ??:? void tmpr2sciyvz.__unittest_L22_C1() [0x427a4d]

    ??:? void tmpr2sciyvz.__modtest() [0x427c10]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbb3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa46]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbd9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430088]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb65]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa1d]

    ??:? runModuleUnitTests [0x42b989]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282dc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164568
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n  if (a < 0 || b < 0 || c < 0) \n    return -1;\n  if\
    \ (a + b > c && a + c > b && b + c > a)\n    return float(a * b / 2);\n  return\
    \ -1;\n}\n/*\n    You are given a list of students. Each student has their own\
    \ name and a \n    list of exam grades. The exam grades are given as a list of\
    \ tuples.\n    [(subject_name, subject_grade), ...]\n    Return the name of the\
    \ student that has the best average grade.\n    Example:\n    >>> best_avg_student([\n\
    \    (\"Rado\", [2, 5, 5, 5, 3, 5, 2, 2, 3]),\n    (\"Ivo\", [2, 4, 5, 5, 4, 3,\
    \ 3, 4, 5]),\n    (\"Maria\", [5, 5, 5, 5, 4, 4, 3, 5, 5]),\n    (\"Ana\", [5,\
    \ 5, 4, 4, 3, 4, 3, 5, 5]),\n    (\"Ivaylo\", [5, 4, 5, 5, 5, 4, 5, 5, 5])\n \
    \   ])\n    \"Maria\"\n*/\nstring best_avg_student(List!(Tuple!(string, List!long))\
    \ students) \n{\n  string bestName = \"\";\n  long bestSum = 0;\n  for (size_t\
    \ i = 0; i < students.length; i++) \n  {\n    long sum = 0;\n    for (size_t j\
    \ = 0; j < students[i][1].length; j++) \n    {\n      sum += students[i][1][j];\n\
    \    }\n    long avg = sum / students[i][1].length;\n    if (i == 0 || avg > bestSum)\
    \ \n    {\n      bestSum = avg;\n      bestName = students[i][0];\n    }\n  }\n\
    \  return bestName;\n}\n/*\n    Write a function that takes a string and returns\
    \ the sum of the numerical\n    values of the letters in that string.\n    Examples:\n\
    \    >>> sum_of_letters(\"az\")\n    3\n    >>> sum\nunittest\n{\n    alias candidate\
    \ = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L,\
    \ 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps65zjuwr.d(60): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps65zjuwr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164567
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    if(a + b > c && b + c > a && a + c > b) \n    {\n\
    \        auto s = (a + b + c) / 2.0;\n        return sqrt(s * (s - a) * (s - b)\
    \ * (s - c));\n    }\n    return -1;\n}\n/*\n    Given two floating point numbers,\
    \ return their difference rounded to 2 decimal points.\n    Example:\n    >>>\
    \ round_diff(3.123, 3.234)\n    0.11\n    >>> round_diff(4.456, 4.457)\n    0.0\n\
    */\nfloat round_diff(float a, float b)\n{\n    return floor((a - b) * 100) / 100;\n\
    }\n/*\n    Given an array of strings, return a list of list of strings\n    with\
    \ all anagrams grouped together. For example, the input\n    ['act', 'cat', 'bat',\
    \ 'tab'] would produce [['act', 'cat'],\n    ['bat', 'tab']]. Note that order\
    \ is not important.\n*/\nT[] group_anagrams(T)(T[] data)\n{\n    auto r = data.sort;\n\
    \    return r.group;\n}\n/*\n    Given a number 'n', write a function that generates\
    \ and prints\n    all the combination of well-formed brackets.\n    Example: \n\
    \    >>> combinations(3)\n    ((()))\n    (()())\n    (())()\n    ()(())\n   \
    \ ()()()\n    >>> combinations(2)\n    (())\n    ()()\n*/\nunittest\n{\n    alias\
    \ candidate = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n  \
    \  assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L) ==\
    \ 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp19nfbwxk.d(69): unittest failure

    ----------------

    ??:? _d_unittestp [0x4280fd]

    ??:? void tmp19nfbwxk.__unittest_L63_C1() [0x427d2b]

    ??:? void tmp19nfbwxk.__modtest() [0x427e80]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bf67]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42adfa]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ff8d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43043c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ff19]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42add1]

    ??:? runModuleUnitTests [0x42bd3d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42854c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164568
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    if (a <= 0 || b <= 0 || c <= 0) \n        return\
    \ -1;\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprru08glz.d(21): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprru08glz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164567
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n\tfloat S, p;\n\tp = (a + b + c) / 2.0;\n\tS = sqrt(p\
    \ * (p - a) * (p - b) * (p - c));\n\tif (S > 0)\n\t\treturn S;\n\telse\n\t\treturn\
    \ -1;\n}\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5a6thot8.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f1d]

    ??:? void tmp5a6thot8.__unittest_L27_C1() [0x427b4b]

    ??:? void tmp5a6thot8.__modtest() [0x427ca0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aad6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc69]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430118]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbf5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aaad]

    ??:? runModuleUnitTests [0x42ba19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42836c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164568
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    if (a + b > c && b + c > a && a + c > b)\n    {\n\
    \        double halfPerimeter = (a + b + c) / 2.0;\n        double area = sqrt(halfPerimeter\
    \ * (halfPerimeter - a) * (halfPerimeter - b) * (halfPerimeter - c));\n      \
    \  return cast(float) area;\n    }\n    else\n    {\n        return -1;\n    }\n\
    }\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmppwr1t4hc.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f1d]

    ??:? void tmppwr1t4hc.__unittest_L30_C1() [0x427b47]

    ??:? void tmppwr1t4hc.__modtest() [0x427c9c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aad6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc69]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430118]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbf5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aaad]

    ??:? runModuleUnitTests [0x42ba19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42836c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164568
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    float result = -1.0;\n    if (a > 0 && b > 0 &&\
    \ c > 0)\n    {\n        if (a + b > c && a + c > b && b + c > a)\n        {\n\
    \            auto p = (a + b + c) / 2.0;\n            auto area = sqrt(p * (p\
    \ - a) * (p - b) * (p - c));\n            result = area;\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = triangle_area;\n\n \
    \   assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) ==\
    \ -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3l5y1xyq.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f3d]

    ??:? void tmp3l5y1xyq.__unittest_L31_C1() [0x427b67]

    ??:? void tmp3l5y1xyq.__modtest() [0x427cbc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc63]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaf6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc89]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430138]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc15]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aacd]

    ??:? runModuleUnitTests [0x42ba39]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42838c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164568
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    float area = 0.0;\n    if(a > 0L && b > 0L && c\
    \ > 0L && (a + b > c) && (a + c > b) && (b + c > a))\n    {\n        float p =\
    \ (a + b + c) / 2.0;\n        area = sqrt(p * (p - a) * (p - b) * (p - c));\n\
    \    }\n    else \n    {\n        area = -1.0;\n    }\n    return area;\n}\nunittest\n\
    {\n    alias candidate = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) ==\
    \ 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3ej9pnbr.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f45]

    ??:? void tmp3ej9pnbr.__unittest_L31_C1() [0x427b6f]

    ??:? void tmp3ej9pnbr.__modtest() [0x427cc4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc6b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aafe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc91]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430140]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc1d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aad5]

    ??:? runModuleUnitTests [0x42ba41]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428394]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164568
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    auto values = tuple(a, b, c);\n    sort(values);\n\
    \    return (values[0] + values[1] > values[2]) ? sqrt(values[2] * (values[2]\
    \ - values[0]) * (values[2] - values[1]) * (values[0] + values[1] + values[2]))\
    \ / 4 : -1;\n}\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp51d3p1wb.d(20): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmp51d3p1wb.d(21): Error: `std.math.sqrt` called with argument types `(long)`
    matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp51d3p1wb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164568
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    alias area_t = typeof(a < b ? a : b);\nunittest\n\
    {\n    alias candidate = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) ==\
    \ 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaqhowqmx.d(20): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaqhowqmx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164568
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    float area = -1L;\n    if(a <= 0 || b <= 0 || c\
    \ <= 0) return area;\n    if(a+b > c && a+c > b && b+c > a)\n    {\n        float\
    \ p = (a+b+c)/2.0;\n        area = sqrt(p*(p-a)*(p-b)*(p-c));\n    }\n    return\
    \ area;\n}\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpdtlmlw82.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f35]

    ??:? void tmpdtlmlw82.__unittest_L28_C1() [0x427b5f]

    ??:? void tmpdtlmlw82.__modtest() [0x427cb4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc5b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaee]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc81]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430130]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc0d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aac5]

    ??:? runModuleUnitTests [0x42ba31]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428384]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164568
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    long[3] lengths = [a, b, c];\n    if(a <= 0 || b\
    \ <= 0 || c <= 0)\n        return -1;\n    else\n    {\n        lengths[0] = a;\n\
    \        lengths[1] = b;\n        lengths[2] = c;\n        sort(lengths);\n  \
    \      if(lengths[0] + lengths[1] <= lengths[2])\n            return -1;\n   \
    \     else\n        {\n            float s = (a + b + c) / 2;\n            return\
    \ sqrt(s * (s - a) * (s - b) * (s - c));\n        }\n    }\n}\nunittest\n{\n \
    \   alias candidate = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n\
    \    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L)\
    \ == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_k7jxw54.d(27): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_k7jxw54.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164568
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    float s;\n    float area;\n    if (a < 0 || b <\
    \ 0 || c < 0)\n        return -1;\n    s = (a + b + c) / 2.0;\n    area = sqrt(s\
    \ * (s - a) * (s - b) * (s - c));\n    return area;\n}\nunittest\n{\n    alias\
    \ candidate = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n  \
    \  assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L) ==\
    \ 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpeevz_q27.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f1d]

    ??:? void tmpeevz_q27.__unittest_L27_C1() [0x427b0d]

    ??:? void tmpeevz_q27.__modtest() [0x427c9c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aad6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc69]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430118]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbf5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aaad]

    ??:? runModuleUnitTests [0x42ba19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42836c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164568
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    auto valid = a > 0L && b > 0L && c > 0L && a + b\
    \ > c && a + c > b && b + c > a;\n    if (valid)\n    {\n        float s = (a\
    \ + b + c) / 2.0f;\n        float A = (s * (s - a) * (s - b) * (s - c));\n   \
    \     return sqrt(A);\n    }\n    return -1.0f;\n}\nunittest\n{\n    alias candidate\
    \ = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L,\
    \ 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpei6ncy8s.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f5d]

    ??:? void tmpei6ncy8s.__unittest_L28_C1() [0x427b87]

    ??:? void tmpei6ncy8s.__modtest() [0x427cdc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab16]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fca9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430158]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aaed]

    ??:? runModuleUnitTests [0x42ba59]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4283ac]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164568
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    long a2 = a*a;\n    long b2 = b*b;\n    long c2\
    \ = c*c;\n    auto s = (a+b+c)/2.0;\n    auto area = sqrt(s*(s-a)*(s-b)*(s-c));\n\
    \    return (a+b>c && a+c>b && b+c>a) ? area : -1.0;\n}\nunittest\n{\n    alias\
    \ candidate = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n  \
    \  assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L) ==\
    \ 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpplhhujp0.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f2d]

    ??:? void tmpplhhujp0.__unittest_L26_C1() [0x427b57]

    ??:? void tmpplhhujp0.__modtest() [0x427cac]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc53]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aae6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc79]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430128]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc05]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aabd]

    ??:? runModuleUnitTests [0x42ba29]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42837c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164568
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    enum float s = (a + b + c) / 2.0;\n    float area\
    \ = sqrt(s * (s - a) * (s - b) * (s - c));\n    return area < 0 ? -1.0 : area;\n\
    }\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyrqhehij.d(19): Error: variable `a` cannot be read at compile time

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyrqhehij.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164568
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    float s = (a + b + c) / 2.0;\n    float area = (s*(s-a)*(s-b)*(s-c));\n\
    \    float result = -1;\n    if (a + b > c && a + c > b && b + c > a)\n    {\n\
    \        result = sqrt(area);\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n\
    \    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L)\
    \ == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9qans5r9.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f25]

    ??:? void tmp9qans5r9.__unittest_L28_C1() [0x427b53]

    ??:? void tmp9qans5r9.__modtest() [0x427ca8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc4b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aade]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc71]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430120]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbfd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aab5]

    ??:? runModuleUnitTests [0x42ba21]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428374]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164568
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    float s = (a + b + c) / 2;\n    float area = sqrt(s\
    \ * (s - a) * (s - b) * (s - c));\n    return isNaN(area) ? -1 : round(area *\
    \ 100) / 100;\n}\n#endif\nunittest\n{\n    alias candidate = triangle_area;\n\n\
    \    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L)\
    \ == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppivrd4vz.d(23): Error: declaration expected, not `#`

    /tmp/tmppivrd4vz.d(28): Error: declaration expected, not `assert`

    /tmp/tmppivrd4vz.d(29): Error: declaration expected, not `assert`

    /tmp/tmppivrd4vz.d(30): Error: declaration expected, not `assert`

    /tmp/tmppivrd4vz.d(31): Error: declaration expected, not `assert`

    /tmp/tmppivrd4vz.d(32): Error: declaration expected, not `assert`

    /tmp/tmppivrd4vz.d(33): Error: declaration expected, not `assert`

    /tmp/tmppivrd4vz.d(34): Error: declaration expected, not `assert`

    /tmp/tmppivrd4vz.d(35): Error: declaration expected, not `assert`

    /tmp/tmppivrd4vz.d(36): Error: declaration expected, not `assert`

    /tmp/tmppivrd4vz.d(37): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppivrd4vz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164568
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    float s;\n    if (a+b > c && a+c > b && b+c > a)\n\
    \    {\n        s = (a+b+c)/2.0;\n        return sqrt(s*(s-a)*(s-b)*(s-c));\n\
    \    }\n    else\n    {\n        return -1.0;\n    }\n    \n}\nunittest\n{\n \
    \   alias candidate = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n\
    \    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L)\
    \ == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpkm3r3z6f.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f1d]

    ??:? void tmpkm3r3z6f.__unittest_L31_C1() [0x427b47]

    ??:? void tmpkm3r3z6f.__modtest() [0x427c9c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aad6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc69]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430118]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbf5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aaad]

    ??:? runModuleUnitTests [0x42ba19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42836c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164568
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    if (a + b > c && a + c > b && b + c > a) \n    {\n\
    \        auto s = (a + b + c) / 2.0;\n        return sqrt(s * (s - a) * (s - b)\
    \ * (s - c));\n    }\n    return -1;\n}\nunittest\n{\n    alias candidate = triangle_area;\n\
    \n    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L)\
    \ == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpf0o2rd0g.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f0d]

    ??:? void tmpf0o2rd0g.__unittest_L26_C1() [0x427b3b]

    ??:? void tmpf0o2rd0g.__modtest() [0x427c90]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc33]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aac6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc59]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430108]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbe5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa9d]

    ??:? runModuleUnitTests [0x42ba09]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42835c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164568
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    if ( (a + b > c) && (a + c > b) && (b + c > a) )\n\
    \    {\n        float s = (a + b + c) / 2.0;\n        float area = sqrt(s * (s\
    \ - a) * (s - b) * (s - c));\n        return area;\n    }\n    else\n    {\n \
    \       return -1;\n    }\n}\nunittest\n{\n    alias candidate = triangle_area;\n\
    \n    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L)\
    \ == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpotespgso.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f15]

    ??:? void tmpotespgso.__unittest_L30_C1() [0x427b43]

    ??:? void tmpotespgso.__modtest() [0x427c98]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc3b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aace]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc61]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430110]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aaa5]

    ??:? runModuleUnitTests [0x42ba11]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428364]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164568
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    if (a < 0 || b < 0 || c < 0) \n        return -1.0;\n\
    \    if ((a + b <= c) || (a + c <= b) || (b + c <= a)) \n        return -1.0;\n\
    \    auto p = (a + b + c) / 2.0;\n    return sqrt(p * (p - a) * (p - b) * (p -\
    \ c));\n}\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpeo3wc9wm.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f2d]

    ??:? void tmpeo3wc9wm.__unittest_L26_C1() [0x427b5b]

    ??:? void tmpeo3wc9wm.__modtest() [0x427cb0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc53]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aae6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc79]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430128]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc05]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aabd]

    ??:? runModuleUnitTests [0x42ba29]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42837c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164568
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    float s = (a + b + c) / 2;\n    float area = sqrt(s\
    \ * (s - a) * (s - b) * (s - c));\n    return floor(area * 100) / 100;\n}\nunittest\n\
    {\n    alias candidate = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) ==\
    \ 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp1zmdi5b7.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x42805d]

    ??:? void tmp1zmdi5b7.__unittest_L23_C1() [0x427c51]

    ??:? void tmp1zmdi5b7.__modtest() [0x427de0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bec7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ad5a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42feed]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43039c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fe79]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ad31]

    ??:? runModuleUnitTests [0x42bc9d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4284ac]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164568
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    float result;\n    if (a < 1 || b < 1 || c < 1)\n\
    \        return -1.0;\n    if (a + b <= c || a + c <= b || b + c <= a)\n     \
    \   return -1.0;\n    else\n    {\n        long p = (a + b + c) / 2;\n       \
    \ result = sqrt(p * (p - a) * (p - b) * (p - c));\n        return result;\n  \
    \  }\n}\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe8arfk0b.d(27): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe8arfk0b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164568
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    float s = (a + b + c) / 2.0;\n    //If a, b, c do\
    \ not form a valid triangle, return -1\n    if (a + b <= c || a + c <= b || b\
    \ + c <= a)\n        return -1.0;\n    return sqrt(s * (s - a) * (s - b) * (s\
    \ - c));\n}\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmiztiuh1.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x427efd]

    ??:? void tmpmiztiuh1.__unittest_L25_C1() [0x427b2b]

    ??:? void tmpmiztiuh1.__modtest() [0x427c80]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc23]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aab6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc49]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300f8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbd5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa8d]

    ??:? runModuleUnitTests [0x42b9f9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42834c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164568
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    float p = 0;\n    bool valid_triangle = false;\n\
    \    valid_triangle = a > 0 && b > 0 && c > 0 ? true : false;\n    valid_triangle\
    \ = (a + b) > c ? true : false;\n    valid_triangle = (a + c) > b ? true : false;\n\
    \    valid_triangle = (b + c) > a ? true : false;\n    if (valid_triangle) {\n\
    \        p = a + b + c;\n        p /= 2;\n        return sqrt(p * (p - a) * (p\
    \ - b) * (p - c));\n    }\n    return -1;\n}\nunittest\n{\n    alias candidate\
    \ = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L,\
    \ 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwgd4bdbf.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f55]

    ??:? void tmpwgd4bdbf.__unittest_L32_C1() [0x427b49]

    ??:? void tmpwgd4bdbf.__modtest() [0x427cd8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc7b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab0e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fca1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430150]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc2d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aae5]

    ??:? runModuleUnitTests [0x42ba51]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4283a4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164568
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n\tif (a + b > c && a + c > b && b + c > a)\n    {\n\t\
    \treturn (0.5 * a * b).approximate(1, float.roundNearestTiesToEven);\n\t}\n\t\
    return -1.0;\n}\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgfss_n47.d(21): Error: no property `approximate` for type `double`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgfss_n47.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164568
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    float result = 0.0;\n    if(a + b > c && a + c >\
    \ b && b + c > a) {\n        float p = (a + b + c) / 2.0;\n        result = sqrt(p\
    \ * (p - a) * (p - b) * (p - c));\n    } else {\n        result = -1.0;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = triangle_area;\n\n\
    \    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L)\
    \ == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpz2o_3o5b.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f25]

    ??:? void tmpz2o_3o5b.__unittest_L28_C1() [0x427b53]

    ??:? void tmpz2o_3o5b.__modtest() [0x427ca8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc4b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aade]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc71]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430120]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbfd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aab5]

    ??:? runModuleUnitTests [0x42ba21]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428374]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164568
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    auto tuple = tuple(a, b, c);\n    auto sides = sort(tuple);\n\
    \    a = sides[0];\n    b = sides[1];\n    c = sides[2];\n    return (a + b >\
    \ c) ? \n        float(a * b * sin(float(acos(a / c)) / 2)) / 2 : \n        -1.0;\n\
    }\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpff7jjea_.d(20): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpff7jjea_.d(25): Error: `std.math.acos` called with argument types `(long)`
    matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1195):     `std.math.acos(real
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1204):     `std.math.acos(float
    x)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpff7jjea_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164568
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    float s = (a + b + c) / 2;\n    float area = sqrt(s\
    \ * (s - a) * (s - b) * (s - c));\n    return (area < 0) ? -1 : area;\n}\nunittest\n\
    {\n    alias candidate = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) ==\
    \ 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp12qjvq5j.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427efd]

    ??:? void tmp12qjvq5j.__unittest_L23_C1() [0x427af1]

    ??:? void tmp12qjvq5j.__modtest() [0x427c80]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc23]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aab6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc49]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300f8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbd5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa8d]

    ??:? runModuleUnitTests [0x42b9f9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42834c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164568
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    if (a < 0 || b < 0 || c < 0)\n        return -1;\n\
    \    if (a == 0 || b == 0 || c == 0)\n        return -1;\n    if (a + b < c)\n\
    \        return -1;\n    if (a + c < b)\n        return -1;\n    if (b + c < a)\n\
    \        return -1;\n    double s = (a + b + c) / 2.0;\n    double area = sqrt(s\
    \ * (s - a) * (s - b) * (s - c));\n    area = floor(area * 100) / 100;\n    return\
    \ area;\n}\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpoy4bdf8m.d(40): unittest failure

    ----------------

    ??:? _d_unittestp [0x42811d]

    ??:? void tmpoy4bdf8m.__unittest_L34_C1() [0x427d47]

    ??:? void tmpoy4bdf8m.__modtest() [0x427e9c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c017]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aeaa]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43003d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4304ec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ffc9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ae81]

    ??:? runModuleUnitTests [0x42bded]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42856c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164568
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    float s = (a + b + c) / 2.0;\n    if (s == 0)\n\
    \        return -1;\n    return floor(sqrt(s * (s - a) * (s - b) * (s - c)) *\
    \ 100) / 100;\n}\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpryu47og8.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x42806d]

    ??:? void tmpryu47og8.__unittest_L24_C1() [0x427c5d]

    ??:? void tmpryu47og8.__modtest() [0x427dec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bed7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ad6a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fefd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4303ac]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fe89]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ad41]

    ??:? runModuleUnitTests [0x42bcad]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4284bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164568
