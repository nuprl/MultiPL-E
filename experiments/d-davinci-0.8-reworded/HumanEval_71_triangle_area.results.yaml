name: HumanEval_71_triangle_area
language: d
results:
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    float p = (a + b + c) / 2.0;\n    if(p - a > 0 &&\
    \ p - b > 0 && p - c > 0)\n        return sqrt(p * (p - a) * (p - b) * (p - c));\n\
    \    return -1;\n}\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpa5gmd3k1.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427f45]\\n??:? void tmpa5gmd3k1.__unittest_L24_C1()\
    \ [0x427b73]\\n??:? void tmpa5gmd3k1.__modtest() [0x427cc8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc6b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aafe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc91]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430140]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fc1d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aad5]\\n??:? runModuleUnitTests [0x42ba41]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428394]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42831b]\\n??:? _d_run_main [0x428286]\\n??:? main [0x427cdb]\\\
    n??:? __libc_start_main [0xa75d7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    float s;\n    if ( (a+b) > c && (a+c) > b && (b+c)\
    \ > a )\n    {\n        s = (a+b+c)/2.0;\n        return sqrt(s*(s-a)*(s-b)*(s-c));\n\
    \    }\n    else\n    {\n        return -1.0;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n  \
    \  assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L) ==\
    \ 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmph20gw_lu.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427f1d]\\n??:? void tmph20gw_lu.__unittest_L30_C1()\
    \ [0x427b47]\\n??:? void tmph20gw_lu.__modtest() [0x427c9c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc43]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aad6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc69]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430118]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbf5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aaad]\\n??:? runModuleUnitTests [0x42ba19]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42836c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282f3]\\n??:? _d_run_main [0x42825e]\\n??:? main [0x427caf]\\\
    n??:? __libc_start_main [0xfed7a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    if (a <= 0 || b <= 0 || c <= 0) return -1.0;\n \
    \   if (a + b > c && a + c > b && b + c > a)\n    {\n        float p = float(a\
    \ + b + c) / 2;\n        return sqrt(p * (p - a) * (p - b) * (p - c));\n    }\n\
    \    return -1.0;\n}\nunittest\n{\n    alias candidate = triangle_area;\n\n  \
    \  assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) ==\
    \ -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpozya7aaf.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427f25]\\n??:? void tmpozya7aaf.__unittest_L27_C1()\
    \ [0x427b53]\\n??:? void tmpozya7aaf.__modtest() [0x427ca8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc4b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc71]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430120]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbfd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aab5]\\n??:? runModuleUnitTests [0x42ba21]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428374]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282fb]\\n??:? _d_run_main [0x428266]\\n??:? main [0x427cbb]\\\
    n??:? __libc_start_main [0x8904e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    return -1;\n}\nunittest\n{\n    alias candidate\
    \ = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L,\
    \ 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpcls0gxve.d(25): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e8d]\\n??:? void tmpcls0gxve.__unittest_L21_C1()\
    \ [0x427a4d]\\n??:? void tmpcls0gxve.__modtest() [0x427c10]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bbb3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa46]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbd9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430088]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb65]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa1d]\\n??:? runModuleUnitTests [0x42b989]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282dc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428263]\\n??:? _d_run_main [0x4281ce]\\n??:? main [0x427c23]\\\
    n??:? __libc_start_main [0xca920554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    float s = float(a + b + c) / 2;\n    float area\
    \ = sqrt(s * (s - a) * (s - b) * (s - c));\n    if (a + b > c && a + c > b &&\
    \ b + c > a) {\n        return area;\n    } else {\n        return -1;\n    }\n\
    }\n/*\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfkrz2b15.d(27): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfkrz2b15.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    float f1 = (float) a;\n    float f2 = (float) b;\n\
    \    float f3 = (float) c;\n    if (a == 0 || b == 0 || c == 0) { return -1; }\n\
    \    else if (a > b + c || b > a + c || c > a + b) { return -1; }\n    else {\
    \ return abs(0.5 * (f1 * f2) * sin(180 / f3)); }\n}\n// Using type tuples (TupleT!(int,\
    \ int, int))\nfloat triangle_area2(TupleT!(long, long, long) triangle)\n{\n  \
    \  float f1 = (float) triangle[0];\n    float f2 = (float) triangle[1];\n    float\
    \ f3 = (float) triangle[2];\n    if (triangle[0] == 0 || triangle[1] == 0 || triangle[2]\
    \ == 0) { return -1; }\n    else if (triangle[0] > triangle[1] + triangle[2] ||\
    \ triangle[1] > triangle[0] + triangle[2] || triangle[2] > triangle[0] + triangle[1])\
    \ { return -1; }\n    else { return abs(0.5 * (f1 * f2) * sin(180 / f3)); }\n\
    }\n// Using array, the same as the code above\nfloat triangle_area3(long[] triangle)\n\
    {\n    float f1 = (float) triangle[0];\n    float f2 = (float) triangle[1];\n\
    \    float f3 = (float) triangle[2];\n    if (triangle[0] == 0 || triangle[1]\
    \ == 0 || triangle[2] == 0) { return -1; }\n    else if (triangle[0] > triangle[1]\
    \ + triangle[2] || triangle[1] > triangle[0] + triangle[2] || triangle[2] > triangle[0]\
    \ + triangle[1]) { return -1; }\n    else { return abs(0.5 * (f1 * f2) * sin(180\
    \ / f3)); }\n}\n/*\n    Given a string containing spaces, we want to use \"%20\"\
    \ in place of each\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp14c97uy_.d(19): Error: C style cast illegal, use `cast(float)a`\\\
    n/tmp/tmp14c97uy_.d(20): Error: C style cast illegal, use `cast(float)b`\\n/tmp/tmp14c97uy_.d(21):\
    \ Error: C style cast illegal, use `cast(float)c`\\n/tmp/tmp14c97uy_.d(29): Error:\
    \ C style cast illegal, use `cast(float)triangle[0]`\\n/tmp/tmp14c97uy_.d(30):\
    \ Error: C style cast illegal, use `cast(float)triangle[1]`\\n/tmp/tmp14c97uy_.d(31):\
    \ Error: C style cast illegal, use `cast(float)triangle[2]`\\n/tmp/tmp14c97uy_.d(39):\
    \ Error: C style cast illegal, use `cast(float)triangle[0]`\\n/tmp/tmp14c97uy_.d(40):\
    \ Error: C style cast illegal, use `cast(float)triangle[1]`\\n/tmp/tmp14c97uy_.d(41):\
    \ Error: C style cast illegal, use `cast(float)triangle[2]`\\n/tmp/tmp14c97uy_.d(46):\
    \ Error: unterminated /* */ comment\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp14c97uy_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    float semi_perimeter = (a + b + c) / 2;\n    float\
    \ area = sqrt(semi_perimeter * (semi_perimeter - a) * (semi_perimeter - b) * (semi_perimeter\
    \ - c));\n    if (area > 0) {\n        return area;\n    }\n    return -1;\n}\n\
    unittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp7ht1521e.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427efd]\\n??:? void tmp7ht1521e.__unittest_L26_C1()\
    \ [0x427b2b]\\n??:? void tmp7ht1521e.__modtest() [0x427c80]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc23]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aab6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc49]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbd5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa8d]\\n??:? runModuleUnitTests [0x42b9f9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42834c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282d3]\\n??:? _d_run_main [0x42823e]\\n??:? main [0x427c93]\\\
    n??:? __libc_start_main [0x1d369554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    // [a, b, c]\n    if ((a + b) <= c || (a + c) <=\
    \ b || (b + c) <= a)\n        return -1;\n    else {\n        // half of perimeter\n\
    \        long p = (a + b + c) / 2;\n        // area of the triangle\n        double\
    \ area = sqrt(p * (p - a) * (p - b) * (p - c));\n        return round(area * 100.0)\
    \ / 100.0;\n    }\n}\nunittest\n{\n    alias candidate = triangle_area;\n\n  \
    \  assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) ==\
    \ -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxnmdrh5e.d(26): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpxnmdrh5e.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    real[][] sides = [[a, b, c], [b, c, a], [c, a, b]];\n\
    \    real[][] triangles = [[a, b, c], [b, c, a], [c, a, b]];\n    real[3] one_triangle;\n\
    \    real p, area;\n    foreach(i, sides) {\n        one_triangle = sides[i];\n\
    \        p = (one_triangle[0] + one_triangle[1] + one_triangle[2]) / 2;\n    \
    \    area = sqrt(p * (p - one_triangle[0]) * (p - one_triangle[1]) * (p - one_triangle[2]));\n\
    \        if (isNaN(area)) {\n            area = -1;\n        }\n        triangles[i]\
    \ = area;\n    }\n    return max(triangles)[0];\n}\nunittest\n{\n    alias candidate\
    \ = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L,\
    \ 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphms5wtm6.d(23): Error: no identifier for declarator `sides`\\\
    n/tmp/tmphms5wtm6.d(23): Error: found `)` when expecting `;`\\n/tmp/tmphms5wtm6.d(32):\
    \ Error: found `return` when expecting `)`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmphms5wtm6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    if(a <= 0 || b <= 0 || c <= 0)\n        return -1;\n\
    \    if(a >= b + c || b >= a + c || c >= a + b)\n        return -1;\n    auto\
    \ s = (a + b + c) / 2.0;\n    return sqrt(s * (s - a) * (s - b) * (s - c));\n\
    }\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmptonnt2dx.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427f2d]\\n??:? void tmptonnt2dx.__unittest_L26_C1()\
    \ [0x427b5b]\\n??:? void tmptonnt2dx.__modtest() [0x427cb0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc53]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aae6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc79]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430128]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fc05]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aabd]\\n??:? runModuleUnitTests [0x42ba29]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42837c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428303]\\n??:? _d_run_main [0x42826e]\\n??:? main [0x427cc3]\\\
    n??:? __libc_start_main [0x6e25c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    auto s = (a + b + c) / 2.0;\n    if (a + b > c &&\
    \ a + c > b && b + c > a)\n    {\n        return sqrt(s * (s - a) * (s - b) *\
    \ (s - c));\n    }\n    return -1;\n}\nunittest\n{\n    alias candidate = triangle_area;\n\
    \n    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L)\
    \ == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpajq4hvfx.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427f0d]\\n??:? void tmpajq4hvfx.__unittest_L26_C1()\
    \ [0x427b37]\\n??:? void tmpajq4hvfx.__modtest() [0x427c8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc33]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aac6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc59]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430108]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbe5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa9d]\\n??:? runModuleUnitTests [0x42ba09]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42835c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282e3]\\n??:? _d_run_main [0x42824e]\\n??:? main [0x427c9f]\\\
    n??:? __libc_start_main [0xb98b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    return (a * b * c == 0) ? float(-1) : float(2 *\
    \ a * b * c) / float(a + b + c);\n}\nunittest\n{\n    alias candidate = triangle_area;\n\
    \n    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L)\
    \ == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpw_fa564s.d(25): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ee5]\\n??:? void tmpw_fa564s.__unittest_L21_C1()\
    \ [0x427aa5]\\n??:? void tmpw_fa564s.__modtest() [0x427c68]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc0b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa9e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc31]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4300e0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbbd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa75]\\n??:? runModuleUnitTests [0x42b9e1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428334]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282bb]\\n??:? _d_run_main [0x428226]\\n??:? main [0x427c7b]\\\
    n??:? __libc_start_main [0x3c144554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    if (a + b > c && a + c > b && b + c > a)\n    {\n\
    \        float s = (a + b + c) / 2;\n        return sqrt(s * (s - a) * (s - b)\
    \ * (s - c));\n    }\n    else\n    {\n        return -1;\n    }\n}\nunittest\n\
    {\n    alias candidate = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) ==\
    \ 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp98_n8api.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427f05]\\n??:? void tmp98_n8api.__unittest_L29_C1()\
    \ [0x427b33]\\n??:? void tmp98_n8api.__modtest() [0x427c88]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc2b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aabe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc51]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430100]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbdd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa95]\\n??:? runModuleUnitTests [0x42ba01]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428354]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282db]\\n??:? _d_run_main [0x428246]\\n??:? main [0x427c9b]\\\
    n??:? __libc_start_main [0xf951c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    if(a + b > c && a + c > b && b + c > a)\n    {\n\
    \        float s = (a + b + c) / 2.0;\n        return sqrt(s * (s - a) * (s -\
    \ b) * (s - c));\n    }\n    return -1;\n}\nunittest\n{\n    alias candidate =\
    \ triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L,\
    \ 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpemqp4pt7.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427f0d]\\n??:? void tmpemqp4pt7.__unittest_L26_C1()\
    \ [0x427b3b]\\n??:? void tmpemqp4pt7.__modtest() [0x427c90]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc33]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aac6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc59]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430108]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbe5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa9d]\\n??:? runModuleUnitTests [0x42ba09]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42835c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282e3]\\n??:? _d_run_main [0x42824e]\\n??:? main [0x427ca3]\\\
    n??:? __libc_start_main [0x2fbcb554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    auto aF = float(a);\n    auto bF = float(b);\n \
    \   auto cF = float(c);\n    return float(formatFloat(sqrt(aF*bF*cF / (aF+bF+cF)),\
    \ \"%.2f\"));\n}\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5zxl2ubc.d(22): Error: undefined identifier `formatFloat`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5zxl2ubc.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    long[] sides = [a, b, c];\n    sort(sides);\n  \
    \  if (sides[0] + sides[1] <= sides[2])\n        return -1L;\n    else\n     \
    \   return (a * b / 2.0f);\n}\nunittest\n{\n    alias candidate = triangle_area;\n\
    \n    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L)\
    \ == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpoh5426l2.d(20): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoh5426l2.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    float s = (a + b + c) / 2.0;\n    if(a+b>c && a+c>b\
    \ && b+c>a) \n    {\n        return sqrt(s * (s - a) * (s - b) * (s - c));\n \
    \   }\n    return -1.0;\n}\nunittest\n{\n    alias candidate = triangle_area;\n\
    \n    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L)\
    \ == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpjwh3owb_.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427efd]\\n??:? void tmpjwh3owb_.__unittest_L26_C1()\
    \ [0x427b2b]\\n??:? void tmpjwh3owb_.__modtest() [0x427c80]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc23]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aab6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc49]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbd5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa8d]\\n??:? runModuleUnitTests [0x42b9f9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42834c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282d3]\\n??:? _d_run_main [0x42823e]\\n??:? main [0x427c93]\\\
    n??:? __libc_start_main [0xbf792554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    float p = (a + b + c) / 2.0;\n    return sqrt(p\
    \ * (p - a) * (p - b) * (p - c));\n}\nunittest\n{\n    alias candidate = triangle_area;\n\
    \n    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L)\
    \ == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpoz2b0gq2.d(27): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427edd]\\n??:? void tmpoz2b0gq2.__unittest_L22_C1()\
    \ [0x427acd]\\n??:? void tmpoz2b0gq2.__modtest() [0x427c5c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc03]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa96]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc29]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4300d8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbb5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa6d]\\n??:? runModuleUnitTests [0x42b9d9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42832c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282b3]\\n??:? _d_run_main [0x42821e]\\n??:? main [0x427c6f]\\\
    n??:? __libc_start_main [0x5008e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    auto triangle = tuple(a, b, c);\n    auto f = std.algorithm.find;\n\
    \    if (f(triangle, x => x <= 0)) return -1L;\n    auto mi = std.algorithm.minElement;\n\
    \    auto [mn, mx] = tuple(mi(triangle), std.algorithm.maxElement(triangle));\n\
    \    if (mn + mx < mx) return -1L;\n    auto sum = std.algorithm.reduce!((a, b)\
    \ => a + b)(triangle);\n    auto s = sum / 2.0;\n    return sqrt(s * (s - a) *\
    \ (s - b) * (s - c));\n}\nunittest\n{\n    alias candidate = triangle_area;\n\n\
    \    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L)\
    \ == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp84cq54du.d(23): Error: basic type expected, not `[`\\n/tmp/tmp84cq54du.d(23):\
    \ Error: found `,` when expecting `]`\\n/tmp/tmp84cq54du.d(23): Error: semicolon\
    \ expected, not `]`\\n/tmp/tmp84cq54du.d(23): Error: found `]` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp84cq54du.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3L,\
    \ 4L)\n    6.0\n    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    auto s = (a + b + c) / 2;\n    float answer = sqrt(s\
    \ * (s - a) * (s - b) * (s - c));\n    if (answer > 0)\n        return answer;\n\
    \    else\n        return -1;\n}\nunittest\n{\n    alias candidate = triangle_area;\n\
    \n    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L)\
    \ == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnb7tld6g.d(20): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpnb7tld6g.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
