name: HumanEval_151_double_the_difference
language: d
prompt: "import std.math;\n/*\n\n    Given an array of numbers, return the sum of\
  \ squares of the numbers\n    in the array that are odd. Ignore numbers that are\
  \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n\
  \    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L,\
  \ -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input\
  \ array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n"
tests: "unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
  \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
  \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0,\
  \ -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0,\
  \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
completions: ["{\n    long sum = 0;\n    foreach(e; lst)\n    {\n        if (isOdd(e)\
    \ && e > 0)\n        {\n            sum += e * e;\n        }\n    }\n    return\
    \ sum;\n}", "{ \n    float total = 0;\n    for (int i = 0; i < lst.length; i++)\n\
    \    {\n        if (is_odd(lst[i]) && !is_negative(lst[i]) && is_finite(lst[i]))\n\
    \        {\n            total += lst[i] * lst[i];\n        }\n    }\n    return\
    \ total;\n}", "{\n    long rval = 0L;\n    foreach(v; lst)\n    {\n        if(isOdd(v)\
    \ && isInteger(v))\n        {\n            rval += v^2;\n        }\n    }\n  \
    \  return rval;\n}", "{\n    long sum = 0;\n    foreach(f; lst)\n    {\n     \
    \   if(is(typeof(f) == long) && (f >= 0) && (f % 2 == 1))\n        {\n       \
    \     sum += f * f;\n        }\n    }\n    return sum;\n}", "{\n    long total\
    \ = 0;\n    foreach(f; lst) \n    {\n        long i = cast(long)f;\n        if(i\
    \ > 0 && i % 2 == 1) \n        {\n            total += pow(i, 2);\n        }\n\
    \    }\n    return total;\n}", "{\n    long result = 0L;\n    foreach(l; lst)\n\
    \    {\n        if (isOdd(l) && l == cast(int)l)\n        {\n            result\
    \ += l*l;\n        }\n    }\n    return result;\n}", "{\n    int sum = 0;\n  \
    \  for (int i = 0; i < lst.length; i++) \n    {\n        if (lst[i] > 0 && (int)lst[i]\
    \ == lst[i])\n        {\n            sum += pow(lst[i], 2);\n        }\n    }\n\
    \    return 2 * sum;\n}", "{\n    long res = 0;\n    foreach(float elt; lst)\n\
    \    {\n        if (elt > 0)\n        {\n            if (int(elt) == elt)\n  \
    \          {\n                if (elt % 2 == 1)\n                {\n         \
    \           res += pow(elt, 2);\n                }\n            }\n        }\n\
    \    }\n    return res;\n}", "{\n    long sum = 0;\n    foreach(float x; lst)\n\
    \    {\n        if(x > 0 && x == (long)x)\n        {\n            sum += x * x;\n\
    \        }\n    }\n    return sum;\n}", "{\n    long sum = 0;\n    foreach(v;\
    \ lst) \n    {\n        if(isIntegral!(typeof(v)) || v < 0) \n        {\n    \
    \        continue;\n        }\n        if(v % 2 == 1) \n        {\n          \
    \  sum += pow(v, 2);\n        }\n    }\n    return sum;\n}", "{\n    long r =\
    \ 0;\n    foreach(x; lst) {\n        if (isInteger!float(x) && x > 0) {\n    \
    \        r += cast(long)(x * x);\n        }\n    }\n    return r;\n}", "{\n  \
    \  long rtn=0;\n    foreach(e; lst)\n    {\n        if(e>0 && e==cast(int)e)\n\
    \        {\n            rtn += pow(e,2);\n        }\n    }\n    return rtn;\n}",
  "{\n    long sum = 0;\n    foreach(float num; lst)\n    {\n        if(isOdd(num)\
    \ && num > 0) \n        {\n            sum += pow(num, 2);\n        }\n    }\n\
    \    return sum;\n}", "{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n\
    \        if(is(typeof(int(f))))\n        {\n            if(int(f) >= 0 && fmod(f,\
    \ 2) == 1)\n            {\n                sum += pow(f, 2);\n            }\n\
    \        }\n    }\n    return sum * 2;\n}", "{\n    long ret = 0L;\n    foreach(n;\
    \ lst) \n    {\n        if(n > 0L && is(typeof(n) == int)) \n        {\n     \
    \       ret += cast(long)n * cast(long)n;\n        }\n    }\n    return ret;\n\
    }", "{\n    long sum = 0;\n    foreach(float x; lst) \n    {\n        if(isOdd(x)\
    \ && (x - (long)x) == 0)\n        {\n            sum += (long)x*(long)x;\n   \
    \     }\n    }\n    return sum;\n}", "{\n    long sum = 0;\n    foreach(float\
    \ elem; lst) \n    {\n        if((elem > 0) && (int(elem) == elem)) \n       \
    \ {\n            if(elem % 2 != 0) \n            {\n                // LST IS\
    \ EVEN\n                sum += pow(elem, 2);\n            }\n        }\n    }\n\
    \    return 2 * sum;\n}", "{\n    long sumOfSquares = 0L;\n    for (int i = 0;\
    \ i < lst.length; i++) \n    {\n        if ((lst[i] > 0L) && (lst[i] == trunc(lst[i]))\
    \ && (lst[i] % 2 == 1)) \n        {\n            sumOfSquares += pow(lst[i], 2L);\n\
    \        }\n    }\n    return sumOfSquares;\n}", "{\n    long result = 0L;\n \
    \   foreach(float elem; lst) \n    {\n        float f = abs(elem);\n        float\
    \ frac = f - trunc(f);\n        if (frac == 0.0 && elem > 0) \n        {\n   \
    \         long tmp = (long)elem;\n            if (tmp % 2L == 1L) \n         \
    \   {\n                result += tmp * tmp;\n            }\n        }\n    }\n\
    \    return result;\n}", "{\n    // Write your code here.\n    long sum = 0;\n\
    \    foreach(i;lst)\n    {\n        if(isOdd(i)&&isInteger(i))\n        {\n  \
    \          sum += (long)(i*i);\n        }\n    }\n    return sum;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
