language: d
name: HumanEval_25_factorize
results:
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of prime factors\
    \ of given integer in the order from smallest to largest.\n    Each of the factors\
    \ should be arrayed number of times corresponding to how many times it appeares\
    \ in factorization.\n    Input number should be equal to the product of all factors\n\
    \    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n\
    \    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n)\
    \ \n{\n\tlong[] res = [];\n\tlong d = 2;\n\twhile (d*d <= n)\n\t{\n\t\twhile (n\
    \ % d == 0)\n\t\t{\n\t\t\tres ~= d;\n\t\t\tn /= d;\n\t\t}\n\t\td += 1;\n\t}\n\t\
    if (n > 1)\n\t\tres ~= n;\n\treturn res;\n}\nunittest\n{\n    alias candidate\
    \ = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L)\
    \ == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L)\
    \ == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L)\
    \ == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L,\
    \ 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of prime factors\
    \ of given integer in the order from smallest to largest.\n    Each of the factors\
    \ should be arrayed number of times corresponding to how many times it appeares\
    \ in factorization.\n    Input number should be equal to the product of all factors\n\
    \    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n\
    \    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n)\
    \ \n{\n\t long[] primes = new long[1];\n\t long p = 2;\n\t long fCount = 0;\n\t\
    \ long i = 0;\n\t \n\t \n\t foreach(long i; 0 ..^  n)\n\t {\n\t\t if(n % p ==\
    \ 0)\n\t\t {\n\t\t\t primes[i] = p;\n\t\t\t p = 2;\n\t\t\t i++;\n\t\t\t fCount++;\n\
    \t\t }\n\t\t else\n\t\t {\n\t\t\tp++;\n\t\t }\n\t }\n\treturn primes;\n}\nunittest\n\
    {\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n  \
    \  assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n\
    \    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L,\
    \ 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n\
    \    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L)\
    \ == [2L, 3L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpey2__dqk.d(23): Error: expression expected, not `^`

    /tmp/tmpey2__dqk.d(23): Error: found `n` when expecting `)`

    /tmp/tmpey2__dqk.d(23): Error: found `)` instead of statement

    /tmp/tmpey2__dqk.d(32): Error: declaration expected, not `else`

    /tmp/tmpey2__dqk.d(35): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpey2__dqk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of prime factors\
    \ of given integer in the order from smallest to largest.\n    Each of the factors\
    \ should be arrayed number of times corresponding to how many times it appeares\
    \ in factorization.\n    Input number should be equal to the product of all factors\n\
    \    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n\
    \    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n)\
    \ \n{\n    long[] factorArray = new long[0];\n    long j = 2;\n    if (n <= 2)\n\
    \    {\n        factorArray = new long[1];\n        factorArray[0] = n;\n    \
    \    return factorArray;\n    }\n    if (n % 2 == 0)\n    {\n        factorArray\
    \ = new long[1];\n        factorArray[0] = 2;\n        return factorArray ~ factorize(n\
    \ / 2);\n    }\n    else\n    {\n        for (long i = 3; i <= cast(long)ceil(sqrt(n));\
    \ i += 2)\n        {\n            if (n % i == 0)\n            {\n           \
    \     factorArray = new long[1];\n                factorArray[0] = i;\n      \
    \          return factorArray ~ factorize(n / i);\n            }\n        }\n\
    \    }\n    factorArray = new long[1];\n    factorArray[0] = n;\n    return factorArray;\n\
    }\n/*\n * Return the minimal number of integer factors that contain all of the\
    \ prime factors that are in given integer.\n *\n * >>> bestSubset(3L)\n * [3L]\n\
    \ * >>> bestSubset(6L)\n * [2L, 3L]\n * >>> bestSubset(7L)\n * [7L]\n * >>> bestSubset(70L)\n\
    \ * [5L, 7L]\n * >>> bestSubset(45L)\n * [3L, 5L]\n * >>> bestSubset(140L)\n *\
    \ [2L, 5L, 7L]\n * >>> bestSubset(132L)\n * [2L, 3L, 11L]\n * >>> bestSubset(1096L)\n\
    \ * [2L, 4L, 7L, 13L]\n * >>> bestSubset(3125L)\n * [5L, 5L, 5L, 5L]\n * >>> bestSubset(24L)\n\
    \ * [2L, 2L, 2L, 3L]\n *\n */\nlong[] bestSubset(long n)\n{\n    long[] array\
    \ = new long[0];\n    long[] factorArray = factorize(n);\n    foreach (i; 0\n\
    unittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n\
    \    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L,\
    \ 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L)\
    \ == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L,\
    \ 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L)\
    \ == [2L, 3L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxfdcgct6.d(77): Error: found `unittest` when expecting `)`

    /tmp/tmpxfdcgct6.d(90): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxfdcgct6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of prime factors\
    \ of given integer in the order from smallest to largest.\n    Each of the factors\
    \ should be arrayed number of times corresponding to how many times it appeares\
    \ in factorization.\n    Input number should be equal to the product of all factors\n\
    \    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n\
    \    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n)\
    \ \n{\n    long[] res;\n    bool isPrime = false;\n    foreach(factor; res)\n\
    \    {\n        if(n % factor == 0)\n        {\n            n = n / factor;\n\
    \            res ~= factor;\n        }\n        else\n        {\n            isPrime\
    \ = true;\n        }\n    }\n    if(isPrime)\n    {\n        res ~= n;\n    }\n\
    \    return res;\n}\n \nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L)\
    \ == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L)\
    \ == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L)\
    \ == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L,\
    \ 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L)\
    \ == [2L, 3L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpkwlbspj5.d(42): unittest failure

    ----------------

    ??:? _d_unittestp [0x4285f5]

    ??:? void tmpkwlbspj5.__unittest_L38_C1() [0x427f7e]

    ??:? void tmpkwlbspj5.__modtest() [0x428374]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cfef]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42be82]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308d5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d84]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430861]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42be59]

    ??:? runModuleUnitTests [0x42cdc5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428a44]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of prime factors\
    \ of given integer in the order from smallest to largest.\n    Each of the factors\
    \ should be arrayed number of times corresponding to how many times it appeares\
    \ in factorization.\n    Input number should be equal to the product of all factors\n\
    \    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n\
    \    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n)\
    \ \n{\n    long[] result = [];\n    foreach(prime; Primes()) \n    {\n       \
    \ while(n % prime == 0) \n        {\n            result ~= prime;\n          \
    \  n /= prime;\n        }\n        if(n == 1) \n        {\n            break;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = factorize;\n\
    \n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n\
    \    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L,\
    \ 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L)\
    \ == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L,\
    \ 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp701y4rmz.d(18): Error: undefined identifier `Primes`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp701y4rmz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of prime factors\
    \ of given integer in the order from smallest to largest.\n    Each of the factors\
    \ should be arrayed number of times corresponding to how many times it appeares\
    \ in factorization.\n    Input number should be equal to the product of all factors\n\
    \    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n\
    \    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n)\
    \ \n{\n    int i = 2;\n    long[] result = new long[];\n    while (n != 1)\n \
    \   {\n        if (n % i == 0)\n        {\n            n /= i;\n            result\
    \ ~= i;\n        }\n        else\n        {\n            i += 1;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = factorize;\n\
    \n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n\
    \    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L,\
    \ 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L)\
    \ == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L,\
    \ 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3jmrohp1.d(18): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3jmrohp1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of prime factors\
    \ of given integer in the order from smallest to largest.\n    Each of the factors\
    \ should be arrayed number of times corresponding to how many times it appeares\
    \ in factorization.\n    Input number should be equal to the product of all factors\n\
    \    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n\
    \    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n)\
    \ \n{\n    import std.math;\n    import std.typecons;\n    long[] factors;\n \
    \   if (n < 2)\n        return new long[](0);\n    foreach (i; 2 .. sqrt(n) +\
    \ 1)\n    {\n        while (n % i == 0)\n        {\n            n /= i;\n    \
    \        factors ~= i;\n        }\n    }\n    if (n > 1)\n        factors ~= n;\n\
    \    return factors;\n}\nlong[] factorize(long n)\n{\n    import std.math;\n \
    \   import std.typecons;\n    long[] factors;\n    if (n < 2)\n        return\
    \ new long[](0);\n    while (n % 2 == 0)\n    {\n        n /= 2;\n        factors\
    \ ~= 2;\n    }\n    foreach (i; 3 .. sqrt(n) + 1)\n    {\n        while (n % i\
    \ == 0)\n        {\n            n /= i;\n            factors ~= i;\n        }\n\
    \    }\n    if (n > 1)\n        factors ~= n;\n    return factors;\n}\nlong[]\
    \ factorize(long n)\n{\n    import std.math;\n    import std.typecons;\n    long[]\
    \ factors;\n    if (n < 2)\n        return new long[](0);\n    while (n % 2 ==\
    \ 0)\n    {\n        n /= 2;\n        factors ~= 2;\n    }\n    foreach (i; 3\
    \ .. isqrt(n) + 1, 2)\n    {\n        while (n % i == 0)\n        {\n        \
    \    n /= i;\n            factors ~= i;\n        }\n    }\n    if (n > 1)\n  \
    \      factors ~= n;\n    return factors;\n}\nlong[] factorize(long n)\n{\n  \
    \  import std.math;\n    import std.typecons;\n    long[] factors;\n    if (n\
    \ < 2)\n        return new long[](0);\n    while (n % 2 == 0)\n    {\n       \
    \ n /= 2;\n        factors ~= 2;\n    }\n    foreach (i;\nunittest\n{\n    alias\
    \ candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L)\
    \ == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L)\
    \ == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L)\
    \ == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L,\
    \ 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpillx2826.d(95): Error: expression expected, not `unittest`

    /tmp/tmpillx2826.d(96): Error: found `{` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpillx2826.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of prime factors\
    \ of given integer in the order from smallest to largest.\n    Each of the factors\
    \ should be arrayed number of times corresponding to how many times it appeares\
    \ in factorization.\n    Input number should be equal to the product of all factors\n\
    \    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n\
    \    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n)\
    \ \n{\n    auto f = new long[](0);\n    for (int i = 2; i < sqrt(n); i++)\n  \
    \  {\n        auto j = 0;\n        while (n % i == 0)\n        {\n           \
    \ j++;\n            n /= i;\n        }\n        f = f ~ repeat(i, j);\n    }\n\
    \    return f;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L)\
    \ == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L)\
    \ == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L)\
    \ == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L,\
    \ 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L)\
    \ == [2L, 3L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpacsa_e1s.d(18): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    /tmp/tmpacsa_e1s.d(26): Error: undefined identifier `repeat`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpacsa_e1s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163163
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of prime factors\
    \ of given integer in the order from smallest to largest.\n    Each of the factors\
    \ should be arrayed number of times corresponding to how many times it appeares\
    \ in factorization.\n    Input number should be equal to the product of all factors\n\
    \    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n\
    \    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n)\
    \ \n{\n    long[] result = [];\n    if (n < 0) \n    {\n        result ~= -1;\n\
    \        n = -n;\n    }\n    while (n > 1) \n    {\n        long div = 2;\n  \
    \      while (n % div != 0) \n        {\n            div++;\n        }\n     \
    \   result ~= div;\n        n /= div;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n  \
    \  assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n\
    \    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L,\
    \ 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n\
    \    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L)\
    \ == [2L, 3L, 3L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of prime factors\
    \ of given integer in the order from smallest to largest.\n    Each of the factors\
    \ should be arrayed number of times corresponding to how many times it appeares\
    \ in factorization.\n    Input number should be equal to the product of all factors\n\
    \    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n\
    \    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n)\
    \ \n{\n    long[] factors = [];\n    long[] primes = [2L, 3L, 5L, 7L, 11L, 13L,\
    \ 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L,\
    \ 83L, 89L, 97L, 101L, 103L, 107L, 109L, 113L, 127L, 131L, 137L, 139L, 149L, 151L,\
    \ 157L, 163L, 167L, 173L, 179L, 181L, 191L, 193L, 197L, 199L, 211L, 223L, 227L,\
    \ 229L, 233L, 239L, 241L, 251L, 257L, 263L, 269L, 271L, 277L, 281L, 283L, 293L,\
    \ 307L, 311L, 313L, 317L, 331L, 337L, 347L, 349L, 353L, 359L, 367L, 373L, 379L,\
    \ 383L, 389L, 397L, 401L, 409L, 419L, 421L, 431L, 433L, 439L, 443L, 449L, 457L,\
    \ 461L, 463L, 467L, 479L, 487L, 491L, 499L, 503L, 509L, 521L, 523L, 541L, 547L,\
    \ 557L, 563L, 569L, 571L, 577L, 587L, 593L, 599L, 601L, 607L, 613L, 617L, 619L,\
    \ 631L, 641L, 643L, 647L, 653L, 659L, 661L, 673L, 677L, 683L, 691L, 701L, 709L,\
    \ 719L, 727L, 733L, 739L, 743L, 751L, 757L, 761L, 769L, 773L, 787L, 797L, 809L,\
    \ 811L, 821L, 823L, 827L, 829L, 839L\nunittest\n{\n    alias candidate = factorize;\n\
    \n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n\
    \    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L,\
    \ 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L)\
    \ == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L,\
    \ 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8mle76u4.d(19): Error: comma expected separating array initializers,
    not `unittest`

    /tmp/tmp8mle76u4.d(20): Error: semicolon expected, not `{`

    /tmp/tmp8mle76u4.d(32): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8mle76u4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of prime factors\
    \ of given integer in the order from smallest to largest.\n    Each of the factors\
    \ should be arrayed number of times corresponding to how many times it appeares\
    \ in factorization.\n    Input number should be equal to the product of all factors\n\
    \    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n\
    \    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n)\
    \ \n{\n    long[] res = [];\n    foreach(i; 2 .. n)\n    {\n        while(n %\
    \ i == 0)\n        {\n            res ~= i;\n            n /= i;\n        }\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = factorize;\n\n\
    \    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n\
    \    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L,\
    \ 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L)\
    \ == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L,\
    \ 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpz3yaosw9.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x4285bd]

    ??:? void tmpz3yaosw9.__unittest_L28_C1() [0x427f46]

    ??:? void tmpz3yaosw9.__modtest() [0x42833c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cfb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42be4a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43089d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d4c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430829]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42be21]

    ??:? runModuleUnitTests [0x42cd8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428a0c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of prime factors\
    \ of given integer in the order from smallest to largest.\n    Each of the factors\
    \ should be arrayed number of times corresponding to how many times it appeares\
    \ in factorization.\n    Input number should be equal to the product of all factors\n\
    \    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n\
    \    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n)\
    \ \n{\n    long[] res = [2L];\n    long i = 3L;\n    long last = 2L;\n    long[]\
    \ primes = [2L];\n    while (n % 2L == 0L) \n    {\n        n /= 2L;\n    }\n\
    \    while (i * i <= n) \n    {\n        if (n % i == 0L) \n        {\n      \
    \      while (n % i == 0L) \n            {\n                n /= i;\n        \
    \    }\n            last = i;\n            primes ~= i;\n        }\n        i\
    \ += 2L;\n    }\n    if (n > 1L) \n    {\n        last = n;\n        primes ~=\
    \ n;\n    }\n    return primes;\n}\n/*\n    Return the number of divisors of the\
    \ given integer.\n    >>> numDivisors(1L)\n    1\n    >>> numDivisors(4L)\n  \
    \  3\n    >>> numDivisors(12L)\n    6\n    >>> numDivisors(70L)\n    8\n    \n\
    */\nlong numDivisors(long n) \n{\n    if (n == 1L) \n    {\n        return 1L;\n\
    \    }\n    return product(map!\"a.second + 1L\"(enumerate(factorize(n))));\n\
    }\n/*\n    Return an array of prime factors of given integer in the order from\
    \ smallest to largest.\n    The array should be filled as much as possible with\
    \ prime factors,\n    and remaining space in the array should be filled with -1.\n\
    \    If n is 1, return an array of length 1 with -1.\n    >>> primeFactors(1L)\n\
    \    [-1L]\n    >>> primeFactors(4L)\n    [2L, -1L]\n    >>> primeFactors(12L)\n\
    \    [2L, 2L, 3L]\n    >>> primeFactors(70L)\n    [2L, 5L, 7L, -1L]\n    \n*/\n\
    long[] primeFactors(long n) \n{\n    if (n == 1L) \n    {\n        return [-1L];\n\
    \nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) ==\
    \ [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) ==\
    \ [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L)\
    \ == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L,\
    \ 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L)\
    \ == [2L, 3L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpje6gcnxz.d(86): Error: found `unittest` instead of statement

    /tmp/tmpje6gcnxz.d(99): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpje6gcnxz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163163
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of prime factors\
    \ of given integer in the order from smallest to largest.\n    Each of the factors\
    \ should be arrayed number of times corresponding to how many times it appeares\
    \ in factorization.\n    Input number should be equal to the product of all factors\n\
    \    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n\
    \    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n)\
    \ \n{\n    long[] array;\n    for (long i = 2; i <= n; i++)\n    {\n\tif (n %\
    \ i == 0)\n\t{\n\t    n /= i;\n\t    array ~= i;\n\t    i--;\n\t}\n    }\n   \
    \ return array;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L)\
    \ == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L)\
    \ == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L)\
    \ == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L,\
    \ 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L)\
    \ == [2L, 3L, 3L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163163
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of prime factors\
    \ of given integer in the order from smallest to largest.\n    Each of the factors\
    \ should be arrayed number of times corresponding to how many times it appeares\
    \ in factorization.\n    Input number should be equal to the product of all factors\n\
    \    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n\
    \    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n)\
    \ \n{\n\tlong[] res;\n\t\n\twhile(n % 2 == 0)\n\t{\n\t\tn /= 2;\n\t\tres ~= 2;\n\
    \t}\n\t\n\tfor(long i = 3; i * i <= n; i += 2)\n\t{\n\t\twhile(n % i == 0)\n\t\
    \t{\n\t\t\tn /= i;\n\t\t\tres ~= i;\n\t\t}\n\t}\n\t\n\tif(n > 2)\n\t\tres ~= n;\n\
    \t\t\n\treturn res;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L)\
    \ == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L)\
    \ == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L)\
    \ == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L,\
    \ 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L)\
    \ == [2L, 3L, 3L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of prime factors\
    \ of given integer in the order from smallest to largest.\n    Each of the factors\
    \ should be arrayed number of times corresponding to how many times it appeares\
    \ in factorization.\n    Input number should be equal to the product of all factors\n\
    \    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n\
    \    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n)\
    \ \n{\n  if (n<2) return [n];\n  long[] factors;\n  foreach(x; [2L, 3L, 5L, 7L,\
    \ 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L,\
    \ 73L, 79L, 83L, 89L, 97L, 101L, 103L, 107L, 109L, 113L, 127L, 131L, 137L, 139L,\
    \ 149L, 151L, 157L, 163L, 167L, 173L, 179L, 181L, 191L, 193L, 197L, 199L, 211L,\
    \ 223L, 227L, 229L, 233L, 239L, 241L, 251L, 257L, 263L, 269L, 271L, 277L, 281L,\
    \ 283L, 293L, 307L, 311L, 313L, 317L, 331L, 337L, 347L, 349L, 353L, 359L, 367L,\
    \ 373L, 379L, 383L, 389L, 397L, 401L, 409L, 419L, 421L, 431L, 433L, 439L, 443L,\
    \ 449L, 457L, 461L, 463L, 467L, 479L, 487L, 491L, 499L, 503L, 509L, 521L, 523L,\
    \ 541L, 547L, 557L, 563L, 569L, 571L, 577L, 587L, 593L, 599L, 601L, 607L, 613L,\
    \ 617L, 619L, 631L, 641L, 643L, 647L, 653L, 659L, 661L, 673L, 677L, 683L, 691L,\
    \ 701L, 709L, 719L, 727L, 733L, 739L, 743L, 751L, 757L, 761L, 769L, 773L, 787L,\
    \ 797L, 809L, 811L, 821L, 823L,\nunittest\n{\n    alias candidate = factorize;\n\
    \n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n\
    \    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L,\
    \ 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L)\
    \ == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L,\
    \ 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoyydzkkj.d(20): Error: expression expected, not `unittest`

    /tmp/tmpoyydzkkj.d(21): Error: found `{` when expecting `,`

    /tmp/tmpoyydzkkj.d(22): Error: expression expected, not `alias`

    /tmp/tmpoyydzkkj.d(22): Error: found `candidate` when expecting `,`

    /tmp/tmpoyydzkkj.d(22): Error: expression expected, not `=`

    /tmp/tmpoyydzkkj.d(22): Error: found `factorize` when expecting `,`

    /tmp/tmpoyydzkkj.d(22): Error: expression expected, not `;`

    /tmp/tmpoyydzkkj.d(24): Error: found `assert` when expecting `,`

    /tmp/tmpoyydzkkj.d(24): Error: found `;` when expecting `,`

    /tmp/tmpoyydzkkj.d(25): Error: found `;` when expecting `,`

    /tmp/tmpoyydzkkj.d(26): Error: found `;` when expecting `,`

    /tmp/tmpoyydzkkj.d(27): Error: found `;` when expecting `,`

    /tmp/tmpoyydzkkj.d(28): Error: found `;` when expecting `,`

    /tmp/tmpoyydzkkj.d(29): Error: found `;` when expecting `,`

    /tmp/tmpoyydzkkj.d(30): Error: found `;` when expecting `,`

    /tmp/tmpoyydzkkj.d(31): Error: found `;` when expecting `,`

    /tmp/tmpoyydzkkj.d(32): Error: e'
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of prime factors\
    \ of given integer in the order from smallest to largest.\n    Each of the factors\
    \ should be arrayed number of times corresponding to how many times it appeares\
    \ in factorization.\n    Input number should be equal to the product of all factors\n\
    \    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n\
    \    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n)\
    \ \n{\n\tlong[] res = [];\n\tforeach(i;iota(2L,n/2L+1L))\n\t{\n\t\twhile(!mod(n,i))\n\
    \t\t{\n\t\t\tn /= i;\n\t\t\tres ~= i;\n\t\t}\n\t}\n\tassert(product(res) == n);\n\
    \treturn res;\n}\n/*\n Same as above, but should use function primes() returning\
    \ a lazy list of all primes.\n    >>> factorize2(8L)\n    [2L, 2L, 2L]\n    >>>\
    \ factorize2(25L)\n    [5L, 5L]\n    >>> factorize2(70L)\n    [2L, 5L, 7L]\nunittest\n\
    {\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n  \
    \  assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n\
    \    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L,\
    \ 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n\
    \    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L)\
    \ == [2L, 3L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprgqzsg47.d(29): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprgqzsg47.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of prime factors\
    \ of given integer in the order from smallest to largest.\n    Each of the factors\
    \ should be arrayed number of times corresponding to how many times it appeares\
    \ in factorization.\n    Input number should be equal to the product of all factors\n\
    \    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n\
    \    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n)\
    \ \n{\n\tlong[] array = new long[0];\n\tfor (long i = 2; i < n; i++)\n\t{\n\t\t\
    if (n % i == 0)\n\t\t{\n\t\t\tarray = array ~ array(i);\n\t\t\tn = n / i;\n\t\t\
    \ti = 1;\n\t\t}\n\t}\n\treturn array;\n}\nunittest\n{\n    alias candidate = factorize;\n\
    \n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n\
    \    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L,\
    \ 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L)\
    \ == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L,\
    \ 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8ss8l9ih.d(22): Error: function expected before `()`, not `array`
    of type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8ss8l9ih.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of prime factors\
    \ of given integer in the order from smallest to largest.\n    Each of the factors\
    \ should be arrayed number of times corresponding to how many times it appeares\
    \ in factorization.\n    Input number should be equal to the product of all factors\n\
    \    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n\
    \    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n)\
    \ \n{ \n    long[] factors = new long[0];\n    foreach(p; primes(n + 1L)) \n \
    \   { \n        while (n % p == 0) \n        { \n            n /= p; \n      \
    \      factors ~= p; \n        } \n    } \n    return factors; \n} \n// since\
    \ we use factorize() to test for primeness, there is no need for caching\nunittest\n\
    {\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n  \
    \  assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n\
    \    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L,\
    \ 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n\
    \    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L)\
    \ == [2L, 3L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa7qhdx74.d(18): Error: undefined identifier `primes`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa7qhdx74.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of prime factors\
    \ of given integer in the order from smallest to largest.\n    Each of the factors\
    \ should be arrayed number of times corresponding to how many times it appeares\
    \ in factorization.\n    Input number should be equal to the product of all factors\n\
    \    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n\
    \    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n)\
    \ \n{\n    long[] result = [];\n    long prime = 2L;\n    long power = 0L;\n \
    \   long sqrtN = cast(long)Math.sqrt(n);\n    while (n &gt; 1 &amp;&amp; prime\
    \ &lt;= sqrtN) \n    {\n        while (n % prime == 0) \n        {\n         \
    \   n /= prime;\n            power++;\n        }\n        if (power &gt; 0) \n\
    \        {\n            result ~= repeat(prime, power);\n            power = 0;\n\
    \        }\n        prime++;\n    }\n    if (n &gt; 1) \n    {\n        result\
    \ ~= n;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = factorize;\n\
    \n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n\
    \    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L,\
    \ 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L)\
    \ == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L,\
    \ 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkoaxr5eu.d(21): Error: found `;` when expecting `)`

    /tmp/tmpkoaxr5eu.d(21): Error: found `&` instead of statement

    /tmp/tmpkoaxr5eu.d(21): Error: found `=` instead of statement

    /tmp/tmpkoaxr5eu.d(28): Error: declaration expected, not `if`

    /tmp/tmpkoaxr5eu.d(28): Error: declaration expected, not `0`

    /tmp/tmpkoaxr5eu.d(31): Error: no identifier for declarator `power`

    /tmp/tmpkoaxr5eu.d(31): Error: declaration expected, not `=`

    /tmp/tmpkoaxr5eu.d(32): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkoaxr5eu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of prime factors\
    \ of given integer in the order from smallest to largest.\n    Each of the factors\
    \ should be arrayed number of times corresponding to how many times it appeares\
    \ in factorization.\n    Input number should be equal to the product of all factors\n\
    \    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n\
    \    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n)\
    \ \n{\n    long[] factors;\n    while (n % 2 == 0) \n    {\n        n /= 2;\n\
    \        factors ~= 2;\n    }\n    for (long i = 3; i <= sqrt(n); i += 2) \n \
    \   {\n        while (n % i == 0) \n        {\n            n /= i;\n         \
    \   factors ~= i;\n        }\n    }\n    if (n > 2) \n    {\n        factors ~=\
    \ n;\n    }\n    return factors;\n}\n/*\n Return all divisors of given integer\n\
    \    >>> divisors(8L)\n    [1L, 2L, 4L, 8L]\n    >>> divisors(7L)\n    [1L, 7L]\n\
    */\nlong[] divisors(long n) \n{\n    long[] factors = factorize(n);\n    return\
    \ generateDivisors(factors, n);\n}\nunittest\n{\n    alias candidate = factorize;\n\
    \n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n\
    \    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L,\
    \ 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L)\
    \ == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L,\
    \ 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdgtnw59z.d(23): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    /tmp/tmpdgtnw59z.d(47): Error: undefined identifier `generateDivisors`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdgtnw59z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of prime factors\
    \ of given integer in the order from smallest to largest.\n    Each of the factors\
    \ should be arrayed number of times corresponding to how many times it appeares\
    \ in factorization.\n    Input number should be equal to the product of all factors\n\
    \    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n\
    \    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n)\
    \ \n{\n    // write your code here\n    long[] list = new long[100];\n    long[]\
    \ result = new long[100];\n    int i = 0;\n    while(n % 2 == 0)\n    {\n    \
    \    list[i] = 2;\n        n = n / 2;\n        i++;\n    }\n    for(long j = 3;\
    \ j <= sqrt(n); j = j + 2)\n    {\n        while(n % j == 0)\n        {\n    \
    \        list[i] = j;\n            n = n / j;\n            i++;\n        }\n \
    \   }\n    if(n > 2)\n    {\n        list[i] = n;\n        i++;\n    }\n    result\
    \ = list[0..i];\n    return result;\n}\nunittest\n{\n    alias candidate = factorize;\n\
    \n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n\
    \    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L,\
    \ 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L)\
    \ == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L,\
    \ 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppqfgdits.d(27): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppqfgdits.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of prime factors\
    \ of given integer in the order from smallest to largest.\n    Each of the factors\
    \ should be arrayed number of times corresponding to how many times it appeares\
    \ in factorization.\n    Input number should be equal to the product of all factors\n\
    \    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n\
    \    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n)\
    \ \n{\n    static long[] factorize(long n, long d)\n    {\n        if (n % d ==\
    \ 0)\n        {\n            auto factors = factorize(n / d, d);\n           \
    \ return [d] ~ factors;\n        }\n        else if (d * d > n)\n        {\n \
    \           return [n];\n        }\n        else\n        {\n            return\
    \ factorize(n, d + 1);\n        }\n    }\n    return factorize(n, 2);\n}\nunittest\n\
    {\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n  \
    \  assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n\
    \    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L,\
    \ 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n\
    \    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L)\
    \ == [2L, 3L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpv8j4lb_h.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428615]

    ??:? void tmpv8j4lb_h.__unittest_L35_C1() [0x427fa2]

    ??:? void tmpv8j4lb_h.__modtest() [0x428398]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c76b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5fe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430649]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430af8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4305d5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5d5]

    ??:? runModuleUnitTests [0x42c541]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428a64]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of prime factors\
    \ of given integer in the order from smallest to largest.\n    Each of the factors\
    \ should be arrayed number of times corresponding to how many times it appeares\
    \ in factorization.\n    Input number should be equal to the product of all factors\n\
    \    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n\
    \    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n)\
    \ \n{\n    long[] res = [2L,2L,2L];\n    return res;\n}\n \n/*\n Return the first\
    \ item from given range that matches the predicate.\n If no item matches the predicate\
    \ then None is returned\n \n    >>> first(10 .. 20, (i => i > 20))\n    None\n\
    \    >>> first(5 .. 15, (i => i % 3 == 0))\n    Some(6)\n*/\nauto first(R, alias\
    \ pred) (R r, pred) \n{\n    foreach (i; r) \n    {\n        if (pred(i)) \n \
    \       {\n            return Some(i);\n        }\n    }\n    return None;\n}\n\
    \ \n/*\n Determine how many items from the given range match the predicate\n \n\
    \    >>> count(10 .. 15, (i => i % 3 == 0))\n    2\n    >>> count(0 .. 100, (i\
    \ => i % 5 == 0))\n    20\n*/\nsize_t count(R, alias pred) (R r, pred) \n{\n \
    \   size_t res = 0;\n    foreach (i; r) \n    {\n        if (pred(i)) \n     \
    \   {\n            res += 1;\n        }\n    }\n    return res;\n}\n \n/*\n Return\
    \ set of items from given range that match the predicate\n \n    >>> filter(5\
    \ .. 20, (i => i % 3 == 0))\n    [6, 9, 12, 15, 18]\n    >>> filter(0 .. 100,\
    \ (i => i % 5 == 0))\n    [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65,\
    \ 70, 75, 80, 85, 90, 95, 100]\n*/\nR filter(R, alias pred) (R r, pred) \n{\n\
    \    R res;\n    foreach (i; r) \n    {\n        if (pred(i)) \n        {\n  \
    \          res ~= i;\n        }\n    }\n    return res;\n}\n \n/*\n Return array\
    \ of fibonacci sequence numbers of the given length\n    Numbers in array should\
    \ start from the 1st item and go\nunittest\n{\n    alias candidate = factorize;\n\
    \n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n\
    \    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L,\
    \ 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L)\
    \ == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L,\
    \ 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjoamz7ri.d(84): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjoamz7ri.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163163
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of prime factors\
    \ of given integer in the order from smallest to largest.\n    Each of the factors\
    \ should be arrayed number of times corresponding to how many times it appeares\
    \ in factorization.\n    Input number should be equal to the product of all factors\n\
    \    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n\
    \    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n)\
    \ \n{\n\tlong[] factors = new long[0];\n\tlong i = 2;\n\twhile (i * i <= n) \n\
    \t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\tfactors ~= i;\n\t\t\tn /= i;\n\t\t}\n\t\
    \telse \n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\tfactors ~= n;\n\treturn factors;\n}\n\
    unittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n\
    \    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L,\
    \ 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L)\
    \ == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L,\
    \ 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L)\
    \ == [2L, 3L, 3L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of prime factors\
    \ of given integer in the order from smallest to largest.\n    Each of the factors\
    \ should be arrayed number of times corresponding to how many times it appeares\
    \ in factorization.\n    Input number should be equal to the product of all factors\n\
    \    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n\
    \    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n)\
    \ \n{\n    long[] factors = new long[];\n    while(n%2 == 0)\n    {\n        factors\
    \ ~= 2;\n        n = n/2;\n    }\n    long i = 3;\n    while(i <= n)\n    {\n\
    \        if(n%i == 0)\n        {\n            factors ~= i;\n            n = n/i;\n\
    \        }\n        else\n        {\n            i += 2;\n        }\n    }\n \
    \   return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L)\
    \ == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L)\
    \ == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L)\
    \ == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L,\
    \ 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L)\
    \ == [2L, 3L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz0j6n9hs.d(17): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz0j6n9hs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of prime factors\
    \ of given integer in the order from smallest to largest.\n    Each of the factors\
    \ should be arrayed number of times corresponding to how many times it appeares\
    \ in factorization.\n    Input number should be equal to the product of all factors\n\
    \    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n\
    \    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n)\
    \ \n{\n    long[] res = [];\n    if (n <= 0) return res;\n    res ~= 1;\n    foreach\
    \ (i; 2..sqrt(n)+1) \n    {\n        while (n % i == 0) \n        {\n        \
    \    res ~= i;\n            n /= i;\n        }\n    }\n    if (n > 1) res ~= n;\n\
    \    return res;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L)\
    \ == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L)\
    \ == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L)\
    \ == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L,\
    \ 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L)\
    \ == [2L, 3L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2r20e8y4.d(20): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2r20e8y4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of prime factors\
    \ of given integer in the order from smallest to largest.\n    Each of the factors\
    \ should be arrayed number of times corresponding to how many times it appeares\
    \ in factorization.\n    Input number should be equal to the product of all factors\n\
    \    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n\
    \    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n)\
    \ \n{\n    long[] results;\n    long i;\n    long count;\n    long rem;\n    for\
    \ (i = 2; i <= n; i++)\n    {\n        rem = n % i;\n        count = 0;\n    \
    \    while (rem == 0)\n        {\n            count = count + 1;\n           \
    \ n = n / i;\n            rem = n % i;\n        }\n        if (count != 0)\n \
    \       {\n            results ~= repeat(i, count);\n        }\n    }\n    return\
    \ results;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L)\
    \ == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L)\
    \ == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L)\
    \ == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L,\
    \ 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L)\
    \ == [2L, 3L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo3lwkw_g.d(33): Error: undefined identifier `repeat`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo3lwkw_g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of prime factors\
    \ of given integer in the order from smallest to largest.\n    Each of the factors\
    \ should be arrayed number of times corresponding to how many times it appeares\
    \ in factorization.\n    Input number should be equal to the product of all factors\n\
    \    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n\
    \    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n)\
    \ \n{\n    long i = 2;\n    long[] result = new long[0];\n    long[] temp = new\
    \ long[0];\n    foreach(k; 2..n+1)\n    {\n        if(n%k == 0)\n        {\n \
    \           result ~= k;\n            n = n/k;\n            --k;\n        }\n\
    \    }\n    temp = result[0..$-1];\n    int count = 0;\n    while(result[$-1]\
    \ == temp[$-1])\n    {\n        temp = temp[0..$-1];\n        ++count;\n    }\n\
    \    long[] res = new long[0];\n    foreach(n; 0..count)\n    {\n        res ~=\
    \ result[$-1];\n    }\n    return res;\n}\nunittest\n{\n    alias candidate =\
    \ factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) ==\
    \ [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L)\
    \ == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L)\
    \ == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L,\
    \ 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_xhy208z.d(37): Error: variable `n` is shadowing variable `tmp_xhy208z.factorize.n`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_xhy208z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of prime factors\
    \ of given integer in the order from smallest to largest.\n    Each of the factors\
    \ should be arrayed number of times corresponding to how many times it appeares\
    \ in factorization.\n    Input number should be equal to the product of all factors\n\
    \    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n\
    \    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n)\
    \ \n{\n    assert(n > 0L);\n    auto factors = [];\n    foreach(i; 2L .. ceil(sqrt(n))\
    \ + 1L)\n    {\n        while(n % i == 0L)\n        {\n            n /= i;\n \
    \           factors ~= i;\n        }\n    }\n    if(n > 1L)\n        factors ~=\
    \ n;\n    return factors;\n}\n/*\n    Return array of prime factors of the given\
    \ integer.\n    Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n    The method should return\
    \ a tuple containing the prime factors and their multiplicities\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorizeWithCount(8L)\n\
    \    [(2L, 3L)]\n    >>> factorizeWithCount(25L)\n    [(5L, 2L)]\n    >>> factorizeWithCount(70L)\n\
    \    [(2L, 1L), (5L, 1L), (7L, 1L)]\n*/\ntuple!(long, long)[] factorizeWithCount(long\
    \ n) \n{\n    assert(n > 0L);\n    auto factors = [];\n    foreach(i; 2L .. ceil(sqrt(n))\
    \ + 1L)\n    {\n        auto count = 0L;\n        while(n % i == 0L)\n       \
    \ {\n            n /= i;\n            count++;\n        }\n        if(count >\
    \ 0L)\n            factors ~= tuple(i, count);\n    }\n    if(n > 1L)\n      \
    \  factors ~= tuple(n, 1L);\n    return factors;\n}\nunittest\n{\n    alias candidate\
    \ = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L)\
    \ == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L)\
    \ == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L)\
    \ == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L,\
    \ 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpse7wx8ty.d(43): Error: `tuple!(long, long)` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpse7wx8ty.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of prime factors\
    \ of given integer in the order from smallest to largest.\n    Each of the factors\
    \ should be arrayed number of times corresponding to how many times it appeares\
    \ in factorization.\n    Input number should be equal to the product of all factors\n\
    \    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n\
    \    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n)\
    \ \n{\n    if (n <= 1L) return [n];\nunittest\n{\n    alias candidate = factorize;\n\
    \n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n\
    \    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L,\
    \ 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L)\
    \ == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L,\
    \ 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptdrb48sx.d(18): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptdrb48sx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of prime factors\
    \ of given integer in the order from smallest to largest.\n    Each of the factors\
    \ should be arrayed number of times corresponding to how many times it appeares\
    \ in factorization.\n    Input number should be equal to the product of all factors\n\
    \    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n\
    \    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n)\
    \ \n{\n\tlong[] res = [];\n\tforeach(long i; [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97])\n\t{\n\t\t\
    if(n % i == 0)\n\t\t{\n\t\t\tres ~= i;\n\t\t\tn /= i;\n\t\t}\n\t}\n\tif(n != 1)\n\
    \t\tres ~= n;\n\treturn res;\n}\n/*\n    Test if given int is a prime\n    >>>\
    \ isPrime(8L)\n    false\n    >>> isPrime(3L)\n    true\n*/\nunittest\n{\n   \
    \ alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L)\
    \ == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L)\
    \ == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L)\
    \ == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L,\
    \ 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvnwpwam4.d(43): unittest failure

    ----------------

    ??:? _d_unittestp [0x42870d]

    ??:? void tmpvnwpwam4.__unittest_L37_C1() [0x42818a]

    ??:? void tmpvnwpwam4.__modtest() [0x428490]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d17b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c00e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a61]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f10]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bfe5]

    ??:? runModuleUnitTests [0x42cf51]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bd0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of prime factors\
    \ of given integer in the order from smallest to largest.\n    Each of the factors\
    \ should be arrayed number of times corresponding to how many times it appeares\
    \ in factorization.\n    Input number should be equal to the product of all factors\n\
    \    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n\
    \    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n)\
    \ \n{\n    long[] res = [];\n    foreach(i; 2..n) {\n        while(n % i == 0)\
    \ {\n            res ~= i;\n            n /= i;\n        }\n    }\n    return\
    \ res;\n}\n/*\n    Primes\n    ======\n    By listing the first six prime numbers:\
    \ 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.\n    What is the\
    \ 10001st prime number?\n*/\nauto primes(size_t n)\n{\n    // return the nth prime\
    \ number\n    // \n    long min = 1, max = 1000000;\n    long step = 1;\n    if(n\
    \ > 10000) {\n        step = 10;\n        if(n > 100000) {\n            step =\
    \ 100;\n            if(n > 1000000) {\n                step = 1000;\n        \
    \    }\n        }\n    }\n    int i = 0;\n    for(size_t i = 1; ; i += step) {\n\
    \        // check all numbers between min and max\n        for(long j = min; j\
    \ < max; j++) {\n            long[] fac = factorize(j);\n            if(fac.length\
    \ == 1) {\n                if(fac[0] == j) {\n                    n--;\n     \
    \               if(n == 0) {\n                        return j;\n            \
    \        }\n                }\n            }\n        }\n        min = max;\n\
    \        max = min + step * 1000;\n    }\n}\n/*\n    Distinct primes factors\n\
    \    =======================\n    The first two consecutive numbers to have two\
    \ distinct prime factors are:\n    14 = 2 \xD7 7\n    15 = 3 \xD7 5\n    The first\
    \ three consecutive numbers to have three distinct prime factors are:\n    644\
    \ = 2\xB2 \xD7 7 \xD7 23\n    645 = 3 \xD7 5 \xD7 43\n    646 = 2 \xD7 17 \xD7\
    \ 19.\n    Find the first four consecutive integers to have four distinct prime\
    \ factors. What is the first of these numbers?\n*/\nauto dpf(size_t n)\n{\n  \
    \  long max = 2000000;\n    long step = 1;\n    if(n > 10000) {\n        step\
    \ = 10;\n        if\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L)\
    \ == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L)\
    \ == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L)\
    \ == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L,\
    \ 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L)\
    \ == [2L, 3L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp1x7ndxe.d(84): Error: found `unittest` when expecting `(`

    /tmp/tmpp1x7ndxe.d(97): Error: found `void` when expecting `)`

    /tmp/tmpp1x7ndxe.d(97): Error: found `{` when expecting `;` following statement

    /tmp/tmpp1x7ndxe.d(97): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp1x7ndxe.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of prime factors\
    \ of given integer in the order from smallest to largest.\n    Each of the factors\
    \ should be arrayed number of times corresponding to how many times it appeares\
    \ in factorization.\n    Input number should be equal to the product of all factors\n\
    \    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n\
    \    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n)\
    \ \n{\n    if (n==1) return [1L];\n    long[] factors = [];\n    while (n % 2\
    \ == 0) \n    {\n        factors ~= 2L;\n        n /= 2;\n    }\n    for (long\
    \ i = 3; i <= n; i += 2) \n    {\n        while (n % i == 0) \n        {\n   \
    \         factors ~= i;\n            n /= i;\n        }\n    }\n    return factors;\n\
    }\nassert(factorize(8L) == [2L, 2L, 2L]);\nassert(factorize(25L) == [5L, 5L]);\n\
    assert(factorize(70L) == [2L, 5L, 7L]);\nunittest\n{\n    alias candidate = factorize;\n\
    \n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n\
    \    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L,\
    \ 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L)\
    \ == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L,\
    \ 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp73re67so.d(34): Error: declaration expected, not `assert`

    /tmp/tmp73re67so.d(35): Error: declaration expected, not `assert`

    /tmp/tmp73re67so.d(36): Error: declaration expected, not `assert`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp73re67so.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of prime factors\
    \ of given integer in the order from smallest to largest.\n    Each of the factors\
    \ should be arrayed number of times corresponding to how many times it appeares\
    \ in factorization.\n    Input number should be equal to the product of all factors\n\
    \    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n\
    \    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n)\
    \ \n{\n\tlong n2 = n;\n\tint nn = int(sqrt(n));\n\tint[] prim = new int[nn];\n\
    \tint k = 1;\n\tprim[0] = 2;\n\tfor (int i = 3; i < nn; i += 2)\n\t{\n\t\tbool\
    \ ok = true;\n\t\tfor (int j = 0; j < k; j++)\n\t\t{\n\t\t\tif (i % prim[j] ==\
    \ 0)\n\t\t\t{\n\t\t\t\tok = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (ok)\n\
    \t\t{\n\t\t\tprim[k] = i;\n\t\t\tk++;\n\t\t}\n\t}\n\t\n\tlong[] fct = new long[10];\n\
    \tint ct = 0;\n\tfor (int i = 0; i < k; i++)\n\t{\n\t\tif (n2 % prim[i] == 0)\n\
    \t\t{\n\t\t\twhile (n2 % prim[i] == 0)\n\t\t\t{\n\t\t\t\tn2 /= prim[i];\n\t\t\t\
    \tfct[ct] = prim[i];\n\t\t\t\tct++;\n\t\t\t}\n\t\t}\n\t}\n\tif (n2 != 1)\n\t{\n\
    \t\tfct[ct] = n2;\n\t\tct++;\n\t}\n\treturn fct[0..ct];\n}\nunittest\n{\n    alias\
    \ candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L)\
    \ == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L)\
    \ == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L)\
    \ == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L,\
    \ 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeh1yjfm4.d(18): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeh1yjfm4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of prime factors\
    \ of given integer in the order from smallest to largest.\n    Each of the factors\
    \ should be arrayed number of times corresponding to how many times it appeares\
    \ in factorization.\n    Input number should be equal to the product of all factors\n\
    \    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n\
    \    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n)\
    \ \n{\n    auto factors = [];\n    foreach(i; 2 .. ceil(sqrt(n)) + 1)\n    {\n\
    \        while(n % i == 0)\n        {\n            n /= i;\n            factors\
    \ ~= i;\n        }\n    }\n    if(n != 1)\n        factors ~= n;\n    return factors;\n\
    }\n/*\n    Return tuple (p, q, g, x, y) such that\n    p = g**x mod q and g**y\
    \ mod q = p**-1 mod q.\n    >>> generate_keypair(420L)\n    (311L, 431L, 7L, 5L,\
    \ 103L)\n    >>> (g, p, q, x, y) = generate_keypair(420L)\n    >>> g**x % q\n\
    \    311L\n    >>> g**y % q\n    311L\n*/\nTuple!(long, long, long, long, long)\
    \ generate_keypair(long x)\n{\n    //x = phi(n)\n    auto primes = factorize(x);\n\
    \    auto p = min(primes);\n    auto q = x / p;\n    foreach(i; 1 .. x)\n    {\n\
    \        if(i.powmod(x, p * q) != 1)\n        {\n            return tuple(i.powmod(x,\
    \ p), i.powmod(x, q), i, x, x);\n        }\n    }\n    return tuple(0L, 0L, 0L,\
    \ 0L, 0L);\n}\n/*\n    Return tuple (p, q, g, x, y) such that\n    p = g**x mod\
    \ q and g**y mod q = p**-1 mod q.\n    >>> generate_keypair(420L)\n    (311L,\
    \ 431L, 7L, 5L, 103L)\n    >>> (g, p, q, x, y) = generate_keypair(420L)\n    >>>\
    \ g**x % q\n    311L\n    >>> g**y % q\n    311L\n*/\nTuple!(long, long, long,\
    \ long, long) generate_keypair(long p, long\nunittest\n{\n    alias candidate\
    \ = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L)\
    \ == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L)\
    \ == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L)\
    \ == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L,\
    \ 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmput_ze7ta.d(68): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmput_ze7ta.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163163
