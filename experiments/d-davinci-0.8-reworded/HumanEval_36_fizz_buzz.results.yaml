language: d
name: HumanEval_36_fizz_buzz
results:
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long count = 0;\n    for (long\
    \ i = 0; i < n; i++) \n    {\n        string s = i.to!string;\n        if (i %\
    \ 11 == 0 || i % 13 == 0) \n        {\n            if (s.canFind(\"7\")) \n  \
    \          {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\nWrite an \"if\" statement that returns the same value as the\
    \ following ternary:\nunittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L)\
    \ == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n\
    \    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L)\
    \ == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuhp9ituj.d(29): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpuhp9ituj.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n\tlong fizz_buzz_count = 0;\n\t\
    foreach(i; 0 .. n) \n\t{\n\t\tif(i % 11 == 0 || i % 13 == 0) \n\t\t{\n\t\t\tauto\
    \ digit_array = i.to!string().to!immutable(ubyte)[];\n\t\t\tfizz_buzz_count +=\
    \ digit_array.count!(x => x == 53);\n\t\t}\n\t}\n\treturn fizz_buzz_count;\n}\n\
    unittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L) ==\
    \ 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n\
    \    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L)\
    \ == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnrpzxu5e.d(20): Error: template argument expected following
    `!`\n/tmp/tmpnrpzxu5e.d(20): Error: semicolon expected following auto declaration,
    not `immutable`\n/tmp/tmpnrpzxu5e.d(20): Error: no identifier for declarator `immutable(ubyte)[]`\n/tmp/tmpnrpzxu5e.d(20):
    Deprecation: use `{ }` for an empty statement, not `;`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpnrpzxu5e.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long count = 0;\n    for (auto\
    \ i = 0; i < n; i++) \n    {\n        if (i % 11 == 0 || i % 13 == 0) \n     \
    \   {\n            auto digit = i;\n            while (digit > 0) \n         \
    \   {\n                if (digit % 10 == 7) \n                {\n            \
    \        count++;\n                }\n                digit /= 10;\n         \
    \   }\n        }\n    }\n    return count;\n}\n/*\nReturn the kth fibonacci number\
    \ in the fibonacci sequence.\n    >>> fibonacci(7)\n    13L\n    >>> fibonacci(8)\n\
    \    21L\n    >>> fibonacci(9)\n    34L\n*/\nlong fibonacci(long k) \n{\n    return\
    \ k < 2 ? k : fibonacci(k - 1) + fibonacci(k - 2);\n}\nunittest\n{\n    alias\
    \ candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n    assert(candidate(78L)\
    \ == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L) == 3L);\n\
    \    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) == 192L);\n \
    \   assert(candidate(10000L) == 639L);\n    assert(candidate(100000L) == 8026L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long a = 0;\n    foreach (i;\
    \ iota(n))\n    {\n        auto x = to!string(i);\n        foreach (j; iota(x.length))\n\
    \        {\n            if (x[j] == '7')\n            {\n                a++;\n\
    \            }\n        }\n    }\n    return a;\n}\n/*\nReturn the length of the\
    \ longest run of consecutive numbers in the integer n.\n    >>> longest_run(1234)\n\
    \    1\n    >>> longest_run(12334)\n    2\n    >>> longest_run(23456)\n    2\n\
    \    >>> longest_run(33333)\n    5\n*/\nlong longest_run(long n) \n{\n    auto\
    \ a = to!string(n);\n    long x = 0;\n    long y = 0;\n    for (size_t i = 0;\
    \ i < a.length; i++)\n    {\n        if (i == 0)\n        {\n            y++;\n\
    \        }\n        else if (a[i] == a[i - 1])\n        {\n            y++;\n\
    \        }\n        else\n        {\n            if (y > x)\n            {\n \
    \               x = y;\n            }\n            y = 1;\n        }\n    }\n\
    \    if (y > x)\n    {\n        x = y;\n    }\n    return x;\n}\n/*\nReturn the\
    \ integer n without its last digit.\n    >>> without_last(123)\n    12\n    >>>\
    \ without_last(42)\n    4\n    >>> without_last(2013)\n    201\n*/\nlong without_last(long\
    \ n) \n{\n    auto x = to!string(n);\n    x = x[0..$ - 1];\n    return to!long(x);\n\
    }\n/*\nReturn the integer n reversed.\n    >>> reverse(123)\n    321\n    >>>\
    \ reverse(897)\n    798\n    >>> reverse(987654321)\n    123456789\n*/\nlong reverse(long\
    \ n) \n{\n    auto x = to!string(n);\n    x = x[$ - 1..0];\n    return to!long(\n\
    unittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L) ==\
    \ 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n\
    \    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L)\
    \ == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpoypdnagj.d(99): Error: expression expected, not `unittest`\n/tmp/tmpoypdnagj.d(100):
    Error: found `{` when expecting `,`\n/tmp/tmpoypdnagj.d(101): Error: expression
    expected, not `alias`\n/tmp/tmpoypdnagj.d(101): Error: found `candidate` when
    expecting `,`\n/tmp/tmpoypdnagj.d(101): Error: expression expected, not `=`\n/tmp/tmpoypdnagj.d(101):
    Error: found `fizz_buzz` when expecting `,`\n/tmp/tmpoypdnagj.d(101): Error: expression
    expected, not `;`\n/tmp/tmpoypdnagj.d(103): Error: found `assert` when expecting
    `,`\n/tmp/tmpoypdnagj.d(103): Error: found `;` when expecting `,`\n/tmp/tmpoypdnagj.d(104):
    Error: found `;` when expecting `,`\n/tmp/tmpoypdnagj.d(105): Error: found `;`
    when expecting `,`\n/tmp/tmpoypdnagj.d(106): Error: found `;` when expecting `,`\n/tmp/tmpoypdnagj.d(107):
    Error: found `;` when expecting `,`\n/tmp/tmpoypdnagj.d(108): Error: found `;`
    when expecting `,`\n/tmp/tmpoypdnagj.d(109): Error: found `;` when expecting `,`\n/tmp/tmpoypdnagj.d(110):
    Error: found `;` when expecting `,`\n/tmp/tmpoypdnagj.d(111): Error: expression
    expected, not `}`\n/tmp/tmpoypdnagj.d(112): Error: found `void` when expecting
    `,`\n/tmp/tmpoypdnagj.d(112): Error: found `{` when expecting `,`\n/tmp/tmpoypdnagj.d(112):
    Error: expression expected, not `}`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpoypdnagj.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long result = 0L;\n    for\
    \ (long i = 0L; i < n; i++) \n    {\n        long j = i;\n        while (j > 0L)\
    \ \n        {\n            if (j % 10L == 7L) \n            {\n              \
    \  result++;\n            }\n            j /= 10L;\n        }\n    }\n    return\
    \ result;\n}\n/*\nReturn the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50L)\n    0L\n  \
    \  >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n    3L\n    \n*/\nlong\
    \ fizz_buzz(long n) \n{\n    long result = 0L;\n    for (long i = 0L; i < n; i++)\
    \ \n    {\n        if (i % 11L == 0L || i % 13L == 0L) \n        {\n         \
    \   long j = i;\n            while (j > 0L) \n            {\n                if\
    \ (j % 10L == 7L) \n                {\n                    result++;\n       \
    \         }\n                j /= 10L;\n            }\n        }\n    }\n    return\
    \ result;\n}\n/*\nReturn the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50L)\n    0L\n  \
    \  >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n    3L\n    \n*/\nlong\
    \ fizz_buzz(long n) \n{\n    long result = 0L;\n    for (long i = 0L; i < n; i++)\
    \ \n    {\n        if (i % 11L == 0L || i % 13L == 0L) \n        {\n         \
    \   foreach (j; std.range(i, 0L, -1L)) \n            {\n                if (j\
    \ % 10L == 7L) \n                {\n                    result++;\n          \
    \      }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n    assert(candidate(78L)\
    \ == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L) == 3L);\n\
    \    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) == 192L);\n \
    \   assert(candidate(10000L) == 639L);\n    assert(candidate(100000L) == 8026L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpowus5zw4.d(77): Deprecation: package `std.range` is not accessible
    here\n/tmp/tmpowus5zw4.d(77): Error: function expected before `()`, not `package
    range` of type `void`\n/tmp/tmpowus5zw4.d(92): Error: `tmpowus5zw4.fizz_buzz`
    called with argument types `(long)` matches both:\n/tmp/tmpowus5zw4.d(13):     `tmpowus5zw4.fizz_buzz(long
    n)`\nand:\n/tmp/tmpowus5zw4.d(70):     `tmpowus5zw4.fizz_buzz(long n)`\n/tmp/tmpowus5zw4.d(93):
    Error: `tmpowus5zw4.fizz_buzz` called with argument types `(long)` matches both:\n/tmp/tmpowus5zw4.d(13):     `tmpowus5zw4.fizz_buzz(long
    n)`\nand:\n/tmp/tmpowus5zw4.d(70):     `tmpowus5zw4.fizz_buzz(long n)`\n/tmp/tmpowus5zw4.d(94):
    Error: `tmpowus5zw4.fizz_buzz` called with argument types `(long)` matches both:\n/tmp/tmpowus5zw4.d(13):     `tmpowus5zw4.fizz_buzz(long
    n)`\nand:\n/tmp/tmpowus5zw4.d(70):     `tmpowus5zw4.fizz_buzz(long n)`\n/tmp/tmpowus5zw4.d(95):
    Error: `tmpowus5zw4.fizz_buzz` called with argument types `(long)` matches both:\n/tmp/tmpowus5zw4.d(13):     `tmpowus5zw4.fizz_buzz(long
    n)`\nand:\n/tmp/tmpowus5zw4.d(70):     `tmpowus5zw4.fizz_buzz(long n)`\n/tmp/tmpowus5zw4.d(96):
    Error: `tmpowus5zw4.fizz_buzz` called with argument types `(long)` matches both:\n/tmp/tmpowus5zw4.d(13):     `tmpowus5zw4.fizz_buzz(long
    n)`\nand:\n/tmp/tmpowus5zw4.d(70):     `tmpowus5zw4.fizz_buzz(long n)`\n/tmp/tmpowus5zw4.d(97):
    Error: `tmpowus5zw4.fizz_buzz` called with argument types `(long)` matches both:\n/tmp/tmpowus5zw4.d(13):     `tmpowus5zw4.fizz_buzz(long
    n)`\nand:\n/tmp/tmpowus5zw4.d(70):     `tmpowus5zw4.fizz_buzz(long n)`\n/tmp/tmpowus5zw4.d(98):
    Error: `tmpowus5zw4.fizz_buzz` called with argument types `(long)` matches both:\n/tmp/tmpowus5zw4.d(13):     `tmpowus5zw4.fizz_buzz(long
    n)`\nand:\n/tmp/tmpowus5zw4.d(70):     `tmpowus5zw4.fizz_buzz(long n)`\n/tmp/tmpowus5zw4.d(99):
    Error: `tmpowus5zw4.fizz_buzz` called with argument types `(long)` matches both:\n/tmp/tmpowus5zw4.d(13):     `tmpowus5zw4.fizz_buzz(long
    n)`\nand:\n/tmp/tmpowus5zw4.d(70):     `tmpowus5zw4.fizz_buzz(long '
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n\tlong ret = 0;\n\tlong i = 0;\n\
    \tfor (; i < n; i++)\n\t{\n\t\tlong a = i;\n\t\twhile (a != 0)\n\t\t{\n\t\t\t\
    if (a % 10 == 7)\n\t\t\t{\n\t\t\t\tret++;\n\t\t\t}\n\t\t\ta /= 10;\n\t\t}\n\t\
    }\n\treturn ret;\n}\n/*\nReturn a list of the numbers in the Fibonacci sequence\
    \ below n.\n    >>> fib(10L)\n    [0L, 1L, 1L, 2L, 3L, 5L, 8L]\n    >>> fib(100L)\n\
    \    [0L, 1L, 1L, 2L, 3L, 5L, 8L, 13L, 21L, 34L, 55L, 89L]\n    >>> fib(0L)\n\
    \    []\n    >>> fib(1L)\n    [0L]\n*/\nList fib(long n)\n{\n\tList ret = new\
    \ List;\n\tlong a = 0;\n\tlong b = 1;\n\tlong tmp = 0;\n\tif (n <= 0)\n\t{\n\t\
    \treturn ret;\n\t}\n\tret.append(a);\n\tif (n == 1)\n\t{\n\t\treturn ret;\n\t\
    }\n\tret.append(b);\n\tlong i = 2;\n\tfor (; i < n; i++)\n\t{\n\t\ttmp = a + b;\n\
    \t\ta = b;\n\t\tb = tmp;\n\t\tret.append(tmp);\n\t}\n\treturn ret;\n}\n/*\nReturn\
    \ a list of Fibonacci numbers less than n which are divisible by 3.\n    >>> fib_mod(10L)\n\
    \    [3L, 6L]\n    >>> fib_mod(100L)\n    [3L, 6L, 21L, 33L, 66L]\n    >>> fib_mod(0L)\n\
    \    []\n    >>> fib_mod(1L)\n    []\n*/\nList fib_mod(long n)\n{\n\tList ret\
    \ = new List;\n\tlong a = 0;\n\tlong b = 1\nunittest\n{\n    alias candidate =\
    \ fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n    assert(candidate(78L) ==\
    \ 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L) == 3L);\n\
    \    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) == 192L);\n \
    \   assert(candidate(10000L) == 639L);\n    assert(candidate(100000L) == 8026L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpljuuckyi.d(84): Error: semicolon expected, not `unittest`\n/tmp/tmpljuuckyi.d(84):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpljuuckyi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    static immutable int[] divisors\
    \ = [11, 13];\n    int result = 0;\n    foreach (i; divisors)\n    {\n       \
    \ result += 7.count_in_range(0, n/i);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n   \
    \ assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L)\
    \ == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) ==\
    \ 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8bw34vku.d(19): Error: no property `count_in_range` for type
    `int`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8bw34vku.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long res = 0;\n    long init\
    \ = 11;\n    long eleven = 11;\n    long thirteen = 13;\n    if (n < 11)\n   \
    \     return 0;\n    for (long i = init; i < n; i++)\n    {\n        if (i % eleven\
    \ == 0)\n        {\n            res += i.digits().filter!((x) => x == 7).length;\n\
    \        }\n        else if (i % thirteen == 0)\n        {\n            res +=\
    \ i.digits().filter!((x) => x == 7).length;\n        }\n    }\n    return res;\n\
    }\n/*\nA machine learning classifier that can't make mistakes classifies a list\
    \ of integers into two categories.\nYour goal is to train it by telling it the\
    \ correct answer for each integer.\nThe classifier works as follows:\nGiven a\
    \ list of integers, it will choose the last integer in the list and compare it\
    \ to the rest.\nIt will then move it to either the top of the list if it's smaller\
    \ than the number it's being compared to,\nor leave it where it is if it's larger\
    \ than the number it's being compared to.\nIt will then do the same for each of\
    \ the remaining numbers in the list (i.e. it will compare each number\nto the\
    \ last number in the list and move it to the top if it's smaller).\nOnce the list\
    \ is sorted, the classifier will classify the list as category A if the last number\
    \ is even,\nand category B if the last number is odd.\nReturn the number of elements\
    \ that are in the wrong category.\n    >>> classify([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10])\n    4\n    >>> classify([10, 9, 8, 7, 6, 5, 4, 3, 2, 1])\n    4\n    >>>\
    \ classify([1, 3, 5, 7, 9, 2, 4, 6, 8, 10])\n    0\n    \n*/\nsize_t classify(in\
    \ int[] nums) \n{\n    size_t res = 0;\n    if (nums.length < 2)\n        return\
    \ 0;\n    if (nums[$ - 1] % 2 == 0)\n    {\n        for (size_t i =\nunittest\n\
    {\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n   \
    \ assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L)\
    \ == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) ==\
    \ 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5t9xis0y.d(62): Error: expression expected, not `unittest`\n/tmp/tmp5t9xis0y.d(63):
    Error: semicolon expected, not `{`\n/tmp/tmp5t9xis0y.d(75): Error: found `void`
    when expecting `;` following `for` condition\n/tmp/tmp5t9xis0y.d(75): Error: found
    `{` when expecting `)`\n/tmp/tmp5t9xis0y.d(75): Error: found `}` instead of statement\n/tmp/tmp5t9xis0y.d(75):
    Error: found `End of File` when expecting `}` following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5t9xis0y.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long counter = 0;\n    foreach(i;\
    \ 0 .. n)\n    {\n        //string s = format(\"%d\", i);\n        if(i % 11 ==\
    \ 0 || i % 13 == 0)\n        {\n            int num = i;\n            while(num\
    \ > 0)\n            {\n                if(num % 10 == 7)\n                {\n\
    \                    counter++;\n                }\n                num /= 10;\n\
    \            }\n        }\n    }\n    return counter;\n}\nunittest\n{\n    alias\
    \ candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n    assert(candidate(78L)\
    \ == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L) == 3L);\n\
    \    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) == 192L);\n \
    \   assert(candidate(10000L) == 639L);\n    assert(candidate(100000L) == 8026L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpemva4gon.d(21): Error: cannot implicitly convert expression
    `i` of type `long` to `int`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpemva4gon.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n\tlong count = 0;\n\t\n\tforeach(i;\
    \ 0..n) \n\t{\n\t\tif(i % 11 == 0 || i % 13 == 0) \n\t\t{\n\t\t\tauto str = to!string(i);\n\
    \t\t\tforeach(j; 0..str.length) \n\t\t\t{\n\t\t\t\tif(str[j] == '7') \n\t\t\t\t\
    {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\n/*\n\
    Return the number of permutations of a string in which no letter is followed by\
    \ the same letter.\n    >>> permutations(\"TAK\")\n    4L\n    >>> permutations(\"\
    TKTA\")\n    5L\n*/\nlong permutations(string str) \n{\n\tlong count = 0;\n\t\
    auto perms = permutations(str.dup);\n\tforeach(i; perms) \n\t{\n\t\tint j = 1;\n\
    \t\twhile(i[j] != '\\0') \n\t\t{\n\t\t\tif(i[j] == i[j-1]) \n\t\t\t{\n\t\t\t\t\
    break;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\tif(i[j] == '\\0') \n\t\t{\n\t\t\tcount++;\n\
    \t\t}\n\t}\n\treturn count;\n}\n/*\nReturn the sum of the all integers from 1\
    \ to n factorial, inclusive.\n    >>> factorial(3L)\n    8L\n    >>> factorial(5L)\n\
    \    153L\n*/\nlong factorial(long n) \n{\n\tlong sum = 0;\n\tforeach(i; 1..n)\
    \ \n\t{\n\t\tlong f = 1;\n\t\tforeach(j; 1..i) \n\t\t{\n\t\t\tf *= j;\n\t\t}\n\
    \t\tsum += f;\n\t}\n\treturn sum;\n}\n/*\nReturn the sum of the digits of a string.\n\
    \    >>> digit_sum(\"1234\")\n    10L\n    >>> digit\nunittest\n{\n    alias candidate\
    \ = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n    assert(candidate(78L)\
    \ == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L) == 3L);\n\
    \    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) == 192L);\n \
    \   assert(candidate(10000L) == 639L);\n    assert(candidate(100000L) == 8026L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2g_amo_i.d(83): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp2g_amo_i.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n  long count = 0;\n  long i = 11;\n\
    \  long i1 = 13;\n  long a = n - 1;\n  long b = n / 11;\n  long c = n / 13;\n\
    \  for (i = 11; i < n; i = i + 11) \n  {\n    if (i % 11 == 0)\n    {\n      count\
    \ = count + 1;\n    }\n  }\n  for (i1 = 13; i1 < n; i1 = i1 + 13) \n  {\n    if\
    \ (i1 % 13 == 0)\n    {\n      count = count + 1;\n    }\n  }\n  return count;\n\
    }\nlong start_time;\nlong stop_time;\nlong run_time(long test_num) \n{\n  long\
    \ i = 0;\n  start_time = now();\n  for (i = 0; i < test_num; i = i + 1) \n  {\n\
    \    fizz_buzz(i);\n  }\n  stop_time = now();\n  return stop_time - start_time;\n\
    }\nunittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L)\
    \ == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n\
    \    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L)\
    \ == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8nout949.d(42): Error: undefined identifier `now`, did you mean
    template `pow(F, G)(F x, G n) if (isFloatingPoint!F && isIntegral!G)`?\n/tmp/tmp8nout949.d(47):
    Error: undefined identifier `now`, did you mean template `pow(F, G)(F x, G n)
    if (isFloatingPoint!F && isIntegral!G)`?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp8nout949.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n\timmutable int a = 11;\n\timmutable\
    \ int b = 13;\n\timmutable long fizz = (n-1) / a;\n\timmutable long buzz = (n-1)\
    \ / b;\n\timmutable long fizzbuzz = (n-1) / (a*b);\n\t\n\treturn (n-1)/10 - fizz\
    \ - buzz + fizzbuzz;\n}\nunittest\n{\n    alias candidate = fizz_buzz;\n\n   \
    \ assert(candidate(50L) == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L)\
    \ == 3L);\n    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n\
    \    assert(candidate(4000L) == 192L);\n    assert(candidate(10000L) == 639L);\n\
    \    assert(candidate(100000L) == 8026L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmph4eeomeu.d(27): unittest failure\n----------------\n??:?
    _d_unittestp [0x427dfd]\n??:? void tmph4eeomeu.__unittest_L23_C1() [0x427a7b]\n??:?
    void tmph4eeomeu.__modtest() [0x427b80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb23]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb49]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff8]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fad5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a98d]\n??:? runModuleUnitTests [0x42b8f9]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42824c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4281d3]\n??:? _d_run_main [0x42813e]\n??:? main [0x427b93]\n??:?
    __libc_start_main [0x34a54554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n\tlong ret=0;\n\tlong count =n-1;\n\
    \twhile(count>0)\n\t{\n\t\tif(count%11==0 || count%13==0)\n\t\t{\n\t\t\tif(count%10==7)\n\
    \t\t\t{\n\t\t\t\tret++;\n\t\t\t}\n\t\t\telse if(count%100==7)\n\t\t\t{\n\t\t\t\
    \tret++;\n\t\t\t}\n\t\t\telse if(count%1000==7)\n\t\t\t{\n\t\t\t\tret++;\n\t\t\
    \t}\n\t\t\telse if(count%10000==7)\n\t\t\t{\n\t\t\t\tret++;\n\t\t\t}\n\t\t\telse\
    \ if(count%100000==7)\n\t\t\t{\n\t\t\t\tret++;\n\t\t\t}\n\t\t\telse if(count%1000000==7)\n\
    \t\t\t{\n\t\t\t\tret++;\n\t\t\t}\n\t\t\telse if(count%10000000==7)\n\t\t\t{\n\t\
    \t\t\tret++;\n\t\t\t}\n\t\t\telse if(count%100000000==7)\n\t\t\t{\n\t\t\t\tret++;\n\
    \t\t\t}\n\t\t\telse if(count%1000000000==7)\n\t\t\t{\n\t\t\t\tret++;\n\t\t\t}\n\
    \t\t\telse if(count%10000000000==7)\n\t\t\t{\n\t\t\t\tret++;\n\t\t\t}\n\t\t\t\
    else if(count%100000000000==7)\n\t\t\t{\n\t\t\t\tret++;\n\t\t\t}\n\t\t\telse if(count%1000000000000==7)\n\
    \t\t\t{\n\t\t\t\tret++;\n\t\t\t}\n\t\t\telse if(count%10000000000000==7)\n\t\t\
    \t{\n\t\t\t\tret++;\n\t\t\t}\n\t\t\telse if(count%100000000000000==7)\n\t\t\t\
    {\n\t\t\t\tret++;\n\t\t\t}\n\t\t\telse if(count%1000000000000000==7)\n\t\t\t{\n\
    \t\t\t\tret++;\nunittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L)\
    \ == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n\
    \    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L)\
    \ == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyi1zfg2f.d(80): Error: found `unittest` instead of statement\n/tmp/tmpyi1zfg2f.d(93):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpyi1zfg2f.d(93):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpyi1zfg2f.d(93):
    Error: found `End of File` when expecting `}` following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyi1zfg2f.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n\tauto res = 0L;\n\tforeach(i;\
    \ iota(n))\n\t{\n\t\t//auto j = i;\n\t\tif (mod(i, 11) || mod(i, 13))\n\t\t{\n\
    \t\t\tint x = 0;\n\t\t\twhile (i != 0)\n\t\t\t{\n\t\t\t\tauto digit = i % 10;\n\
    \t\t\t\tif (digit == 7)\n\t\t\t\t{\n\t\t\t\t\tx++;\n\t\t\t\t}\n\t\t\t\ti /= 10;\n\
    \t\t\t}\n\t\t\tres += x;\n\t\t}\n\t}\n\treturn res;\n}\n/*\nReturn true if exactly\
    \ three of the integers are positive, and the sum of the two largest is greater\
    \ than the smallest.\n    >>> check_three([1, 2, 3, 4, 5])\n    False\n    >>>\
    \ check_three([1, 2, 3, 4, 5, -6])\n    True\n*/\nunittest\n{\n    alias candidate\
    \ = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n    assert(candidate(78L)\
    \ == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L) == 3L);\n\
    \    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) == 192L);\n \
    \   assert(candidate(10000L) == 639L);\n    assert(candidate(100000L) == 8026L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbm0d4x1m.d(16): Error: undefined identifier `iota`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbm0d4x1m.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    return (n/11).filter!(x =>\
    \ x % 13 == 0).count!(x => contains_digit(x, 7));\n}\n \n/*\nReturn the number\
    \ of times the digit 7 appears in integers less than n which are divisible by\
    \ 11 or 13.\n    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n\
    \    >>> fizz_buzz(79L)\n    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    return\
    \ (n/11).filter!(x => x % 13 == 0).count!(x => contains_digit(x, 7));\n}\n/*\n\
    Return the number of times the digit 7 appears in integers less than n which are\
    \ divisible by 11 or 13.\n    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n\
    \    2L\n    >>> fizz_buzz(79L)\n    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n\
    \    return (n/11).filter!(x => x % 13 == 0).count!(x => contains_digit(x, 7));\n\
    }\n// very simple test\nunittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L)\
    \ == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n\
    \    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L)\
    \ == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgr0zp97e.d(15): Error: no property `filter` for type `long`\n/tmp/tmpgr0zp97e.d(30):
    Error: no property `filter` for type `long`\n/tmp/tmpgr0zp97e.d(44): Error: no
    property `filter` for type `long`\n/tmp/tmpgr0zp97e.d(51): Error: `tmpgr0zp97e.fizz_buzz`
    called with argument types `(long)` matches both:\n/tmp/tmpgr0zp97e.d(13):     `tmpgr0zp97e.fizz_buzz(long
    n)`\nand:\n/tmp/tmpgr0zp97e.d(42):     `tmpgr0zp97e.fizz_buzz(long n)`\n/tmp/tmpgr0zp97e.d(52):
    Error: `tmpgr0zp97e.fizz_buzz` called with argument types `(long)` matches both:\n/tmp/tmpgr0zp97e.d(13):     `tmpgr0zp97e.fizz_buzz(long
    n)`\nand:\n/tmp/tmpgr0zp97e.d(42):     `tmpgr0zp97e.fizz_buzz(long n)`\n/tmp/tmpgr0zp97e.d(53):
    Error: `tmpgr0zp97e.fizz_buzz` called with argument types `(long)` matches both:\n/tmp/tmpgr0zp97e.d(13):     `tmpgr0zp97e.fizz_buzz(long
    n)`\nand:\n/tmp/tmpgr0zp97e.d(42):     `tmpgr0zp97e.fizz_buzz(long n)`\n/tmp/tmpgr0zp97e.d(54):
    Error: `tmpgr0zp97e.fizz_buzz` called with argument types `(long)` matches both:\n/tmp/tmpgr0zp97e.d(13):     `tmpgr0zp97e.fizz_buzz(long
    n)`\nand:\n/tmp/tmpgr0zp97e.d(42):     `tmpgr0zp97e.fizz_buzz(long n)`\n/tmp/tmpgr0zp97e.d(55):
    Error: `tmpgr0zp97e.fizz_buzz` called with argument types `(long)` matches both:\n/tmp/tmpgr0zp97e.d(13):     `tmpgr0zp97e.fizz_buzz(long
    n)`\nand:\n/tmp/tmpgr0zp97e.d(42):     `tmpgr0zp97e.fizz_buzz(long n)`\n/tmp/tmpgr0zp97e.d(56):
    Error: `tmpgr0zp97e.fizz_buzz` called with argument types `(long)` matches both:\n/tmp/tmpgr0zp97e.d(13):     `tmpgr0zp97e.fizz_buzz(long
    n)`\nand:\n/tmp/tmpgr0zp97e.d(42):     `tmpgr0zp97e.fizz_buzz(long n)`\n/tmp/tmpgr0zp97e.d(57):
    Error: `tmpgr0zp97e.fizz_buzz` called with argument types `(long)` matches both:\n/tmp/tmpgr0zp97e.d(13):     `tmpgr0zp97e.fizz_buzz(long
    n)`\nand:\n/tmp/tmpgr0zp97e.d(42):     `tmpgr0zp97e.fizz_buzz(long n)`\n/tmp/tmpgr0zp97e.d(58):
    Error: `tmpgr0zp97e.fizz_buzz` called with argument types `(long)` matches both:\n/tmp/tmpgr0zp97e.d(13):     `tmpgr0zp97e.fizz_buzz(long
    n)`\nand:\n/tmp/tmpgr0zp97e.d(42):     '
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long res = 0;\n    bool x =\
    \ false;\n    for (long i = 1; i < n; i++)\n    {\n        x = false;\n      \
    \  if (i % 11 == 0 || i % 13 == 0)\n        {\n            x = true;\n       \
    \ }\n        if (x == true)\n        {\n            foreach (elem; to!string(i))\n\
    \            {\n                if (elem == '7')\n                {\n        \
    \            res += 1;\n                }\n            }\n        }\n    }\n \
    \   return res;\n}\nunittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L)\
    \ == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n\
    \    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L)\
    \ == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjvahfn2x.d(26): Error: template instance `to!string` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpjvahfn2x.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n  import std.algorithm.iteration\
    \ : filter, map;\n  import std.range : takeWhile;\n  import std.conv : to;\n \
    \ long res = 0;\n  foreach(int i;0..n)\n  {\n    if(i%11 == 0 || i%13 == 0)\n\
    \    {\n      int temp = i;\n      while(temp > 0)\n      {\n        if(temp%10\
    \ == 7)\n        {\n          res++;\n        }\n        temp /= 10;\n      }\n\
    \    }\n  }\n  return res;\n}\n/*\nReturn the mean number of characters needed\
    \ to add to a word to make it a palindrome.\n    >>> average_palindrome_length([\"\
    hello\", \"a\", \"bc\", \"d\"])\n    1.75\n    >>> average_palindrome_length([\"\
    hello\", \"A\", \"bc\", \"d\"])\n    2.0\n*/\nlong average_palindrome_length(string[]\
    \ words) \n{\n  import std.algorithm.iteration : map;\n  import std.range : takeWhile;\n\
    \  long res = 0;\n  foreach(string w;words)\n  {\n    long len = w.length;\n \
    \   long res1 = 0;\n    while(len > 0)\n    {\n      if(w[res1] != w[len-1])\n\
    \      {\n        res++;\n      }\n      len--;\n      res1++;\n    }\n  }\n \
    \ return res/(words.length);\n}\n/*\nReturn the average word length for the string,\
    \ ignoring all non-alphabetic characters and ignoring case.\n    >>> average_word_length(\"\
    Hello, world!\")\n    5.0\n    >>> average_word_length(\"I'm not crazy.\")\n \
    \   3.8\n    >>> average_word_length(\"I'm not crazy. At least, I don't think\
    \ I am.\")\n    4.0\n*/\ndouble average_word_length(string s) \n{\n  import std.algorithm.iteration\
    \ : map;\n  import std.range : takeWhile;\n  import std.conv : to;\n  import std.array\
    \ : split;\n  s\nunittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L)\
    \ == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n\
    \    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L)\
    \ == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgq0glo_7.d(80): Error: found `unittest` when expecting `;` following
    statement\n/tmp/tmpgq0glo_7.d(93): Error: found `End of File` when expecting `}`
    following compound statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgq0glo_7.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    return iota(n)\n        .filter!(i\
    \ => (i % 11 == 0) || (i % 13 == 0))\n        .map!(to!string)\n        .joiner(\"\
    \")\n        .filter!(a => a == '7')\n        .length;\n}\nunittest\n{\n    alias\
    \ candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n    assert(candidate(78L)\
    \ == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L) == 3L);\n\
    \    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) == 192L);\n \
    \   assert(candidate(10000L) == 639L);\n    assert(candidate(100000L) == 8026L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsyf15y52.d(15): Error: undefined identifier `iota`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsyf15y52.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long result = 0L;\n    for\
    \ (long i = 0L; i < n; i++) \n    {\n        if (i % 11L == 0L || i % 13L == 0L)\
    \ \n        {\n            result += count_7(i);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L)\
    \ == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n\
    \    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L)\
    \ == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqsmqso3h.d(20): Error: undefined identifier `count_7`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqsmqso3h.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long r = 0L;\n    foreach(i;\
    \ iota(n))\n    {\n        string s = to!string(i);\n        if(s.count(\"7\"\
    ) > 0)\n        {\n            if(i % 11 == 0 || i % 13 == 0)\n            {\n\
    \                r++;\n            }\n        }\n    }\n    return r;\n}\nunittest\n\
    {\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n   \
    \ assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L)\
    \ == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) ==\
    \ 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmps3yu2z1q.d(16): Error: undefined identifier `iota`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps3yu2z1q.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    return n == 0L ? 0L : n % 11L\
    \ == 0L || n % 13L == 0L ? count_sevens(n) + fizz_buzz(n - 1L) : fizz_buzz(n -\
    \ 1L);\n}\nunittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L)\
    \ == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n\
    \    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L)\
    \ == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1l16y_t9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015598
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long result = 0L;\n    long\
    \ a = 13L;\n    long b = 11L;\n    long n_a = n/a;\n    long n_b = n/b;\n    long\
    \ n_ab = n/(a*b);\n    result = n_a - n_ab + n_b - n_ab;\n    return result;\n\
    }\n/*\nThe maximum sum subarray problem consists in finding the maximum sum of\
    \ a contiguous subsequence in an array or list of integers:\n    >>> l = [7, -3,\
    \ -10, 4, 2, 8, -2, 4, -5, -2]\n    >>> max_subarray(l)\n    (15, [4, 2, 8])\n\
    \    >>> l = [-5, 6, 7, 1, 4, -8, 16]\n    >>> max_subarray(l)\n    (19, [6, 7,\
    \ 1, 4])\n    >>> l = [-5, -1, -8, -9]\n    >>> max_subarray(l)\n    (0, [])\n\
    \    \n*/\ntuple!(long, long[]) max_subarray(long[] l) \n{\n    long currentSum\
    \ = 0L;\n    long maxSum = 0L;\n    long[] currentIndexes = [];\n    long[] maxIndexes\
    \ = [];\n    foreach (index, e; l)\n    {\n        currentSum += e;\n        currentIndexes\
    \ ~= index;\n        if (currentSum > maxSum)\n        {\n            maxSum =\
    \ currentSum;\n            maxIndexes = currentIndexes;\n        }\n        if\
    \ (currentSum < 0L)\n        {\n            currentSum = 0L;\n            currentIndexes\
    \ = [];\n        }\n    }\n    return tuple(maxSum, maxIndexes);\n}\n/*\nGiven\
    \ a word, return the word with its letters reversed.\n    >>> reverse_word(\"\
    desserts\")\n    \"stressed\"\n    >>> reverse_word(\"yummy\")\n    \"mummyy\"\
    \n    >>> reverse_word(\"a\")\n    \"a\"\n    >>> reverse_word(\"\")\n    \"\"\
    \n    \n*/\nstring reverse_word(string word) \n{\nunittest\n{\n    alias candidate\
    \ = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n    assert(candidate(78L)\
    \ == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L) == 3L);\n\
    \    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) == 192L);\n \
    \   assert(candidate(10000L) == 639L);\n    assert(candidate(100000L) == 8026L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpljmry5dz.d(74): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpljmry5dz.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015598
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    int num_sevens = 0;\n    for\
    \ (int i = 1; i < n; i++) \n    {\n        if (i % 11 == 0 || i % 13 == 0) \n\
    \        {\n            num_sevens += (i.to!string).count('7');\n        }\n \
    \   }\n    return num_sevens;\n}\nunittest\n{\n    alias candidate = fizz_buzz;\n\
    \n    assert(candidate(50L) == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L)\
    \ == 3L);\n    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n\
    \    assert(candidate(4000L) == 192L);\n    assert(candidate(10000L) == 639L);\n\
    \    assert(candidate(100000L) == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk76kb305.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015598
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    import std.conv;\n    long\
    \ s = 0;\n    foreach(int i; 2..n) \n    {\n        if(i % 11 == 0 || i % 13 ==\
    \ 0) \n        {\n            string str = i.to!string;\n            foreach(int\
    \ j; 0..str.length) \n            {\n                if(str[j] == '7') \n    \
    \            {\n                    s++;\n                }\n            }\n \
    \       }\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = fizz_buzz;\n\
    \n    assert(candidate(50L) == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L)\
    \ == 3L);\n    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n\
    \    assert(candidate(4000L) == 192L);\n    assert(candidate(10000L) == 639L);\n\
    \    assert(candidate(100000L) == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpisa7dsfa.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015598
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    import std.conv : to;\n   \
    \ import std.math : round;\n    // Remove the digit 7 from the number and round\
    \ to the nearest integer.\n    return round(n.to!string.replace(\"7\", \"\").to!double);\n\
    }\nunittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L)\
    \ == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n\
    \    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L)\
    \ == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdzikmvj4.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015598
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long a = 0;\n    foreach (i;\
    \ 0..n)\n    {\n        if ((i % 11 == 0 || i % 13 == 0) && i.to!string.count(\"\
    7\") > 0)\n        {\n            a++;\n        }\n    }\n    return a;\n}\nunittest\n\
    {\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n   \
    \ assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L)\
    \ == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) ==\
    \ 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg6dtzyo9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015598
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long count = 0;\n    long mult\
    \ = 11;\n    long result = 0;\n    while (result < n) {\n        result = mult\
    \ * 13;\n        while (result < n) {\n            if (result % 11 != 0) {\n \
    \               if (result % 100 / 10 == 7) {\n                    count += 1;\n\
    \                }\n                if (result % 10 == 7) {\n                \
    \    count += 1;\n                }\n            }\n            mult += 1;\n \
    \           result = mult * 13;\n        }\n        mult = 13;\n        result\
    \ = mult * 11;\n        while (result < n) {\n            if (result % 100 / 10\
    \ == 7) {\n                count += 1;\n            }\n            if (result\
    \ % 10 == 7) {\n                count += 1;\n            }\n            mult +=\
    \ 1;\n            result = mult * 11;\n        }\n        mult = 11;\n       \
    \ result = mult * 13;\n    }\n    return count;\n}\n/*\nReturn how many prime\
    \ numbers less than n are not divisible by 2 or 3.\n    >>> fizz_buzz_2(30L)\n\
    \    5L\n    >>> fizz_buzz_2(3L)\n    0L\n    >>> fizz_buzz_2(5L)\n    1L\n*/\n\
    long fizz_buzz_2(long n) \n{\n    long count = 0;\n    long prime = 2;\n    while\
    \ (prime < n) {\n        if (prime % 2 != 0 && prime % 3 != 0) {\n           \
    \ count += 1;\n        }\n        prime += 1;\n    }\n    return count;\n}\n/*\n\
    Return the sum of all even integers between a and b (inclusive).\n    >>> fizz_buzz_3(2L,\
    \ 2L)\n    2L\n    >>> fizz_buzz_3(3L, 9L)\n    20L\n    >>> fizz_buzz_3(2L, 3L)\n\
    \    2L\n    >>> fizz_buzz_3(2L, 4L)\n    6L\n    >>> fizz_buzz_3(2L, 5L)\n  \
    \  8L\n*/\nlong\nunittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L)\
    \ == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n\
    \    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L)\
    \ == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpx9ta739a.d(84): Error: no identifier for declarator long\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx9ta739a.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015598
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long nResult = 0;\n    long\
    \ nNumber = 11;\n    long nDivisor = 11;\n    nNumber = (long)abs(n);\n    while\
    \ (nNumber > nDivisor)\n    {\n        if (mod(nNumber, nDivisor) == 0)\n    \
    \    {\n            long nLocalResult = nNumber;\n            while (nLocalResult\
    \ > 0)\n            {\n                auto[divisor, result] = div(nLocalResult,\
    \ 10);\n                if (result == 7)\n                {\n                \
    \    nResult++;\n                }\n                nLocalResult = divisor;\n\
    \            }\n        }\n        nDivisor += 11;\n        if (nDivisor > 13)\n\
    \        {\n            nDivisor = 13;\n        }\n    }\n    return nResult;\n\
    }\nunittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L)\
    \ == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n\
    \    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L)\
    \ == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfh7xsxx8.d(18): Error: C style cast illegal, use cast(long)abs(n)\n/tmp/tmpfh7xsxx8.d(26):
    Error: basic type expected, not [\n/tmp/tmpfh7xsxx8.d(26): Error: found \'',\''
    when expecting \'']\''\n/tmp/tmpfh7xsxx8.d(26): Error: semicolon expected, not
    \'']\''\n/tmp/tmpfh7xsxx8.d(26): Error: found \'']\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfh7xsxx8.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015598
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n\tlong cnt = 0;\n\tfor (int i =\
    \ 1; i <= n; i++) \n\t{\n\t\tif (i % 11 == 0 || i % 13 == 0)\n\t\t{\n\t\t\tint\
    \ j = i;\n\t\t\twhile (j > 0) \n\t\t\t{\n\t\t\t\tint d = j % 10;\n\t\t\t\tif (d\
    \ == 7)\n\t\t\t\t{\n\t\t\t\t\tcnt++;\n\t\t\t\t}\n\t\t\t\tj /= 10;\n\t\t\t}\n\t\
    \t}\n\t}\n\treturn cnt;\n}\n/*\nReturn the number of odd perfect numbers less\
    \ than n.\n>>> odd_perfect(10L)\n0L\n>>> odd_perfect(30L)\n0L\n>>> odd_perfect(80L)\n\
    2L\n>>> odd_perfect(100L)\n2L\n*/\nlong odd_perfect(long n) \n{\n\tlong cnt =\
    \ 0;\n\tfor (int i = 1; i <= n; i++) \n\t{\n\t\tif (i % 2 == 1) \n\t\t{\n\t\t\t\
    int j = i;\n\t\t\tint sum = 0;\n\t\t\twhile (j > 0) \n\t\t\t{\n\t\t\t\tint d =\
    \ j % 10;\n\t\t\t\tsum += d;\n\t\t\t\tj /= 10;\n\t\t\t}\n\t\t\tif (sum == i)\n\
    \t\t\t{\n\t\t\t\tcnt++;\n\t\t\t}\n\t\t}\n\t}\n\treturn cnt;\n}\n/*\nFind the number\
    \ of occurrences of a substring in a string.\n>>> count_substr(\"The quick brown\
    \ fox jumps over the lazy dog.\", \"o\")\n4L\n>>> count_substr(\"\", \"z\")\n\
    0L\n>>> count_substr(\"The quick brown fox jumps over the lazy dog.\", \"dog\"\
    )\n1L\n>>> count_substr(\"The quick brown fox jumps over the lazy dog.\", \"The\"\
    )\n1L\n*/\nlong count_substr(string s, string sub) \n{\n\tlong cnt = 0;\n\tfor\
    \ (int i\nunittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L)\
    \ == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n\
    \    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L)\
    \ == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0l7dnnpc.d(83): Error: semicolon expected, not \''unittest\''\n/tmp/tmp0l7dnnpc.d(83):
    Error: expression expected, not \''unittest\''\n/tmp/tmp0l7dnnpc.d(84): Error:
    found \''{\'' when expecting \'';\'' following for condition\n/tmp/tmp0l7dnnpc.d(85):
    Error: expression expected, not \''alias\''\n/tmp/tmp0l7dnnpc.d(85): Error: found
    \''candidate\'' when expecting \'')\''\n/tmp/tmp0l7dnnpc.d(85): Error: found \''=\''
    instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0l7dnnpc.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015598
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long count = 0;\n    for (long\
    \ i = 1; i < n; i++) \n    {\n        if ((i % 11 == 0) || (i % 13 == 0)) \n \
    \       {\n            if (i % 10 == 7) \n            {\n                count++;\n\
    \            }\n            else if (i / 10 == 7) \n            {\n          \
    \      count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n   \
    \ assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L)\
    \ == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) ==\
    \ 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprjpzeffn.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015598
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n\tlong res = 0;\n\tlong a = 0;\n\
    \tlong b = 0;\n\tlong c = 0;\n\t\n\twhile(n > 1)\n\t{\n\t\ta = n - 1;\n\t\twhile(a\
    \ % 11 != 0)\n\t\t{\n\t\t\ta = a - 1;\n\t\t}\n\t\t\n\t\tb = n - 1;\n\t\twhile(b\
    \ % 13 != 0)\n\t\t{\n\t\t\tb = b - 1;\n\t\t}\n\t\t\n\t\tc = max(a, b);\n\t\t\n\
    \t\twhile(c >= 1)\n\t\t{\n\t\t\tif(c % 10 == 7)\n\t\t\t{\n\t\t\t\tres = res +\
    \ 1;\n\t\t\t}\n\t\t\tc = c / 10;\n\t\t}\n\t\tn = n - 1;\n\t}\n\treturn res;\n\
    }\nunittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L)\
    \ == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n\
    \    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L)\
    \ == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp3lktbe0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015598
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long count = 0;\n    for (long\
    \ i = 0; i < n; i++) \n    {\n        long j = i;\n        while (j != 0) \n \
    \       {\n            if (j % 10 == 7) \n            {\n                count++;\n\
    \            }\n            j /= 10;\n        }\n    }\n    return count;\n}\n\
    unittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L) ==\
    \ 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n\
    \    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L)\
    \ == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp190or9z9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015598
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n    return to!(long)(n/7)*3 + (n%7\
    \ < 3 ? n%7 : (n%7 < 5 ? 1 : 2));\n//}\n//{\n//! void main()\n    static assert(fizz_buzz(50L)\
    \ == 0L);\n    static assert(fizz_buzz(78L) == 2L);\n    static assert(fizz_buzz(79L)\
    \ == 3L);\n    static assert(fizz_buzz(50L) == 0L);\n    static assert(fizz_buzz(78L)\
    \ == 2L);\n    static assert(fizz_buzz(79L) == 3L);\n    static assert(fizz_buzz(50L)\
    \ == 0L);\n    static assert(fizz_buzz(78L) == 2L);\n    static assert(fizz_buzz(79L)\
    \ == 3L);\n    static assert(fizz_buzz(50L) == 0L);\n    static assert(fizz_buzz(78L)\
    \ == 2L);\n    static assert(fizz_buzz(79L) == 3L);\n//}\n    /*\n    Return the\
    \ number of times the digit 7 appears in integers less than n which are divisible\
    \ by 11 or 13.\n    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n\
    \    >>> fizz_buzz(79L)\n    3L\n    \n    */\n    long fizz_buzz(long n) \n \
    \       return to!(long)(n/7)*3 + (n%7 < 3 ? n%7 : (n%7 < 5 ? 1 : 2));\n    //}\n\
    \    //{\n    //! void main()\n        static assert(fizz_buzz(50L) == 0L);\n\
    \        static assert(fizz_buzz(78L) == 2L);\n        static assert(fizz_buzz(79L)\
    \ == 3L);\n        static assert(fizz_buzz(50L) == 0L);\n        static assert(fizz_buzz(78L)\
    \ == 2L);\n        static assert(fizz_buzz\nunittest\n{\n    alias candidate =\
    \ fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n    assert(candidate(78L) ==\
    \ 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L) == 3L);\n\
    \    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) == 192L);\n \
    \   assert(candidate(10000L) == 639L);\n    assert(candidate(100000L) == 8026L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq21iybps.d(14): Error: semicolon expected following function
    declaration\n/tmp/tmpq21iybps.d(14): Error: Declaration expected, not \''return\''\n/tmp/tmpq21iybps.d(42):
    Error: semicolon expected following function declaration\n/tmp/tmpq21iybps.d(42):
    Error: Declaration expected, not \''return\''\n/tmp/tmpq21iybps.d(52): Error:
    found \''unittest\'' when expecting \'')\''\n/tmp/tmpq21iybps.d(53): Error: found
    \''{\'' when expecting \'';\''\n/tmp/tmpq21iybps.d(56): Error: Declaration expected,
    not \''assert\''\n/tmp/tmpq21iybps.d(57): Error: Declaration expected, not \''assert\''\n/tmp/tmpq21iybps.d(58):
    Error: Declaration expected, not \''assert\''\n/tmp/tmpq21iybps.d(59): Error:
    Declaration expected, not \''assert\''\n/tmp/tmpq21iybps.d(60): Error: Declaration
    expected, not \''assert\''\n/tmp/tmpq21iybps.d(61): Error: Declaration expected,
    not \''assert\''\n/tmp/tmpq21iybps.d(62): Error: Declaration expected, not \''assert\''\n/tmp/tmpq21iybps.d(63):
    Error: Declaration expected, not \''assert\''\n/tmp/tmpq21iybps.d(64): Error:
    unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq21iybps.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015598
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    auto matches = [] (long x)\
    \ { return x % 11 == 0 || x % 13 == 0; };\n    long count = 0;\n    foreach (long\
    \ i; 0 .. n)\n    {\n        if (matches(i))\n        {\n            auto s =\
    \ to!string(i);\n            foreach (j; 0 .. s.length)\n            {\n     \
    \           if (s[j] == '7')\n                {\n                    count +=\
    \ 1;\n                }\n            }\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L)\
    \ == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n\
    \    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L)\
    \ == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpismtmmpm.d(15): Error: found \''x\'' when expecting \''.\''
    following long\n/tmp/tmpismtmmpm.d(15): Error: found \'')\'' when expecting identifier
    following \''long.\''\n/tmp/tmpismtmmpm.d(15): Error: found \''{\'' when expecting
    \'',\''\n/tmp/tmpismtmmpm.d(15): Error: expression expected, not \''return\''\n/tmp/tmpismtmmpm.d(15):
    Error: found \''x\'' when expecting \'',\''\n/tmp/tmpismtmmpm.d(15): Error: expression
    expected, not \''%\''\n/tmp/tmpismtmmpm.d(15): Error: found \''11\'' when expecting
    \'',\''\n/tmp/tmpismtmmpm.d(15): Error: expression expected, not \''==\''\n/tmp/tmpismtmmpm.d(15):
    Error: found \''0\'' when expecting \'',\''\n/tmp/tmpismtmmpm.d(15): Error: expression
    expected, not \''||\''\n/tmp/tmpismtmmpm.d(15): Error: found \''x\'' when expecting
    \'',\''\n/tmp/tmpismtmmpm.d(15): Error: expression expected, not \''%\''\n/tmp/tmpismtmmpm.d(15):
    Error: found \''13\'' when expecting \'',\''\n/tmp/tmpismtmmpm.d(15): Error: expression
    expected, not \''==\''\n/tmp/tmpismtmmpm.d(15): Error: found \''0\'' when expecting
    \'',\''\n/tmp/tmpismtmmpm.d(15): Error: expression expected, not \'';\''\n/tmp/tmpismtmmpm.d(15):
    Error: found \''}\'' when expecting \'',\''\n/tmp/tmpismtmmpm.d(15): Error: expression
    expected, not \'';\''\n/tmp/tmpismtmmpm.d(16): Error: found \''long\'' when expecting
    \'',\''\n/tmp/tmpismtmmpm.d(16): Error: found \'';\'' when expecting \'',\''\n/tmp/tmpismtmmpm.d(17):
    Error: expression expected, not \''foreach\''\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpismtmmpm.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015598
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long count = 0;\n    long current\
    \ = 11;\n    while (current < n) {\n        long digits = 0;\n        long num\
    \ = current;\n        while (num > 0) {\n            digits++;\n            num\
    \ /= 10;\n        }\n        long d = current;\n        long digit = 1;\n    \
    \    while (digit <= digits) {\n            if (d % 10 == 7) {\n             \
    \   count++;\n            }\n            d /= 10;\n            digit++;\n    \
    \    }\n        if (current == 13) {\n            current = 17;\n        } else\
    \ {\n            current += 22;\n        }\n    }\n    return count;\n}\n    \n\
    /*\nReturn a new string where each character in the string is repeated count times.\n\
    \    >>> repeat_string('a', 5)\n    'aaaaa'\n    >>> repeat_string('', 5)\n  \
    \  ''\n    >>> repeat_string('abc', 0)\n    ''\n*/\nstring repeat_string(string\
    \ s, int count)\n{\n    string repeated = \"\";\n    for (int i = 0; i < s.length;\
    \ i++) {\n        for (int j = 0; j < count; j++) {\n            repeated += s[i];\n\
    \        }\n    }\n    return repeated;\n}\nunittest\n{\n    alias candidate =\
    \ fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n    assert(candidate(78L) ==\
    \ 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L) == 3L);\n\
    \    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) == 192L);\n \
    \   assert(candidate(10000L) == 639L);\n    assert(candidate(100000L) == 8026L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3w6mvg0v.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015598
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n\tlong count = 0;\n\tlong factor\
    \ = 1000000000L;\n\tfor (long i = 1; i < n; i++) \n\t{\n\t\tif (i % 11 == 0 ||\
    \ i % 13 == 0) \n\t\t{\n\t\t\twhile (factor > 1) \n\t\t\t{\n\t\t\t\tif (i % factor\
    \ == 7) \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tfactor /= 10;\n\t\t\
    \t}\n\t\t\tfactor = 1000000000L;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n\
    \    alias candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n    assert(candidate(78L)\
    \ == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L) == 3L);\n\
    \    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) == 192L);\n \
    \   assert(candidate(10000L) == 639L);\n    assert(candidate(100000L) == 8026L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_ab192rc.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015598
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n\tlong idx = 0L;\n\tlong sum =\
    \ 0L;\n\t//typedef tuple(long,long) Num_Tuple;\n\t//Num_Tuple num_tuple;\n\t//int*\
    \ num_tuple = (int*)malloc(sizeof(int)*2);\nunittest\n{\n    alias candidate =\
    \ fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n    assert(candidate(78L) ==\
    \ 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L) == 3L);\n\
    \    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) == 192L);\n \
    \   assert(candidate(10000L) == 639L);\n    assert(candidate(100000L) == 8026L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbjtxcixx.d(20): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbjtxcixx.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015598
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    \n    long result=0;\n    long\
    \ i;\n    if(n<13)\n        return 0;\n    else\n    {\n        for(i=13;i<n;i++)\n\
    \        {\n            if(i%11==0||i%13==0)\n            {\n                long\
    \ rem=0;\n                long temp=i;\n                while(temp!=0)\n     \
    \           {\n                    rem=temp%10;\n                    if(rem==7)\n\
    \                        result++;\n                    temp=temp/10;\n      \
    \          }\n            }\n        }\n        return result;\n    }\n}\n/*\n\
    Return the  first n numbers in the Fibonacci sequence.\n>>>fibonacci(0)\n[]\n\
    >>>fibonacci(1)\n[0]\n>>>fibonacci(2)\n[0, 1]\n>>>fibonacci(5)\n[0, 1, 1, 2, 3]\n\
    unittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L) ==\
    \ 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n\
    \    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L)\
    \ == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpka7gh6nn.d(40): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpka7gh6nn.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015598
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long count = 0;\n    foreach(i;\
    \ 2..n) \n    {\n        if (i % 11 || i % 13) \n        {\n            continue;\n\
    \        }\n        foreach(ch; to!string(i)) \n        {\n            if (ch\
    \ == '7') \n            {\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\n/*\nReturn whether a given string is a palindrome.\n\
    \    >>> is_palindrome(\"helloolleh\")\n    true\n    >>> is_palindrome(\"hello\
    \ world\")\n    false\n    \n*/\nunittest\n{\n    alias candidate = fizz_buzz;\n\
    \n    assert(candidate(50L) == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L)\
    \ == 3L);\n    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n\
    \    assert(candidate(4000L) == 192L);\n    assert(candidate(10000L) == 639L);\n\
    \    assert(candidate(100000L) == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvxi6jv04.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015598
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    import std.math;\n    import\
    \ std.typecons;\n    int count = 0;\n    foreach(const i; iota(0L, n))\n    {\n\
    \        if(i%11 == 0 || i%13 == 0)\n        {\n            long j = i;\n    \
    \        do\n            {\n                if(j%10 == 7)\n                {\n\
    \                    count += 1;\n                }\n                j /= 10;\n\
    \            }while(j != 0);\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n   \
    \ assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L)\
    \ == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) ==\
    \ 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkrcb6l3d.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015598
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n\tlong res = 0;\n\tif(n <= 0) return\
    \ res;\n\tfor(long i = 7; i < n; i += 11)\n\t{\n\t\tif(i % 13 == 0) \n\t\t{\n\t\
    \t\tres += ctpop(i);\n\t\t\tcontinue;\n\t\t}\n\t\tres += ctpop(i - i / 13);\n\t\
    }\n\treturn res;\n}\nunittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L)\
    \ == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n\
    \    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L)\
    \ == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptkq3gk4m.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015598
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    import std.range;\n    return\
    \ iota(0L, n)\n            .filter!((x) => x % 11 == 0 || x % 13 == 0)\n     \
    \       .count!((x) => x.to!string.count('7'));\n}\nfizz_buzz(20L);\nunittest\n\
    {\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n   \
    \ assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L)\
    \ == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) ==\
    \ 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2xqxpevk.d(20): Error: unexpected ( in declarator\n/tmp/tmp2xqxpevk.d(20):
    Error: basic type expected, not 20L\n/tmp/tmp2xqxpevk.d(20): Error: found \''20L\''
    when expecting \'')\''\n/tmp/tmp2xqxpevk.d(20): Error: no identifier for declarator
    fizz_buzz(int)\n/tmp/tmp2xqxpevk.d(20): Error: semicolon expected following function
    declaration\n/tmp/tmp2xqxpevk.d(20): Error: Declaration expected, not \'')\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2xqxpevk.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015598
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long res = 0;\n    long p =\
    \ 13;\n    for (int i = 1; i <= n; i++)\n    {\n        if (i % p == 0)\n    \
    \    {\n            if (p == 11)\n            {\n                p = 13;\n   \
    \         }\n            else\n            {\n                p = 11;\n      \
    \      }\n            res += count(i.to!string(), \"7\");\n        }\n    }\n\
    \    return res;\n}\n/*\nReturn the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50L)\n    0L\n\
    \    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n    3L\n    \n*/\nlong\
    \ fizz_buzz(long n) \n{\n    long res = 0;\n    long p = 13;\n    for (int i =\
    \ 1; i <= n; i++)\n    {\n        if (i % p == 0)\n        {\n            if (p\
    \ == 11)\n            {\n                p = 13;\n            }\n            else\n\
    \            {\n                p = 11;\n            }\n            res += count(i.to!string(),\
    \ \"7\");\n        }\n    }\n    return res;\n}\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long res = 0;\n    long p =\
    \ 13;\n    for (int i = 1; i <= n; i++)\n    {\n        if (i % p == 0)\n    \
    \    {\n            if (p == 11)\n            {\n                p = 13;\n   \
    \         }\n            else\n            {\n                p = 11;\n      \
    \      }\n            res += count(i.to!string(), \"7\");\n        }\n    }\n\
    \    return res;\n}\n/*\nunittest\n{\n    alias candidate = fizz_buzz;\n\n   \
    \ assert(candidate(50L) == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L)\
    \ == 3L);\n    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n\
    \    assert(candidate(4000L) == 192L);\n    assert(candidate(10000L) == 639L);\n\
    \    assert(candidate(100000L) == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnrurpeza.d(96): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpnrurpeza.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015598
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n  long c = 0;\n  for (long i =\
    \ 0; i < n; i++) \n  {\n    // if i is divisible by 11 or 13 and has a 7 in it\n\
    \    // increase the count\n    if (((i % 11 == 0) || (i % 13 == 0)) && (string(i).count('7')\
    \ > 0)) \n    {\n      c++;\n    }\n  }\n  return c;\n}\nunittest\n{\n    alias\
    \ candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n    assert(candidate(78L)\
    \ == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L) == 3L);\n\
    \    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) == 192L);\n \
    \   assert(candidate(10000L) == 639L);\n    assert(candidate(100000L) == 8026L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5otyfngn.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015598
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    import std.typecons;\n    import\
    \ std.math;\n    long count = 0;\n    if (n < 0) return -1;\n    foreach (i; 0\
    \ .. n)\n    {\n        //We should handle negative digits.\n        ulong copy\
    \ = i;\n        while (copy != 0)\n        {\n            if ((copy % 10) == 7)\
    \ count++;\n            copy /= 10;\n        }\n    }\n    return count;\n}\n\
    /*\nReturn a tuple containing the sum of the digit 7s in all integers less than\
    \ n which are divisible by 11 or 13,\n and the number of such integers.\n    >>>\
    \ sum_count(50L)\n    Tuple!(long, long)(3L, 4L)\n    >>> sum_count(78L)\n   \
    \ Tuple!(long, long)(8L, 6L)\n    >>> sum_count(79L)\n    Tuple!(long, long)(11L,\
    \ 6L)\n    >>> sum_count(360L)\n    Tuple!(long, long)(104L, 20L)\n*/\ntuple!(long,\
    \ long) sum_count(long n) \n{\n    long sum = 0;\n    long count = 0;\n    if\
    \ (n < 0) return tuple(0, -1);\n    foreach (i; 0 .. n)\n    {\n        //We should\
    \ handle negative digits.\n        ulong copy = i;\n        while (copy != 0)\n\
    \        {\n            if ((copy % 10) == 7) sum++;\n            copy /= 10;\n\
    \        }\n        count++;\n    }\n    return tuple(sum, count);\n}\n/*\nReturn\
    \ a tuple containing the sum of the digit 7s in all integers less than n which\
    \ are divisible by 11 or 13,\n and the number of such integers.\n    >>> sum_count(50L)\n\
    \    Tuple!(long, long)(3L, 4L)\n    >>> sum_count(78L)\n    Tuple!(long, long)(8L,\
    \ 6L)\n    >>> sum_count(79L)\n    Tuple!(long, long)(11L, 6L)\n    >>> sum_count(360L)\n\
    \nunittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L) ==\
    \ 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n\
    \    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L)\
    \ == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpb4gg5nz6.d(61): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpb4gg5nz6.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015598
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    // Either 11 or 13.\n    return\
    \ fizz_buzz_digit(n,(11L,13L));\n}\n/*\nReturn the number of times the digit 7\
    \ appears in integers less than n which are divisible by any element of factors.\n\
    \    >>> fizz_buzz_digit(100L,(11L,13L))\n    2L\n    >>> fizz_buzz_digit(100L,(7L,13L))\n\
    \    3L\n    >>> fizz_buzz_digit(100L,(7L,11L))\n    2L\n*/\nlong fizz_buzz_digit(long\
    \ n,Tuple!(long[]) factors) \n{\n    long i;\n    long k;\n    long l;\n    long\
    \ r = 0L;\n    foreach (int j; 0 .. 10)\n    {\n        if (j == 7)\n        {\n\
    \            continue;\n        }\n        i = n;\n        k = 0L;\n        while\
    \ (true)\n        {\n            if (i < 10L)\n            {\n               \
    \ break;\n            }\n            l = i % 10L;\n            if (l == j)\n \
    \           {\n                k += 1L;\n            }\n            i /= 10L;\n\
    \        }\n        if (i == j)\n        {\n            k += 1L;\n        }\n\
    \        r += k * fizz_buzz_multiple(n,j,factors);\n    }\n    return r;\n}\n\
    /*\nReturn the number of multiples of n less than m which have the digit n.\n\
    \    >>> fizz_buzz_multiple(100L,7L,(11L,13L))\n    8L\n    >>> fizz_buzz_multiple(100L,7L,(11L,))\n\
    \    3L\n    >>> fizz_buzz_multiple(100L,7L,(13L,))\n    5L\n*/\nlong fizz_buzz_multiple(long\
    \ m,long n,Tuple!(long[]) factors) \n{\n    long r = 0L;\n    long i = n;\n  \
    \  while (i < m)\n    {\n        if (div\nunittest\n{\n    alias candidate = fizz_buzz;\n\
    \n    assert(candidate(50L) == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L)\
    \ == 3L);\n    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n\
    \    assert(candidate(4000L) == 192L);\n    assert(candidate(10000L) == 639L);\n\
    \    assert(candidate(100000L) == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2k_1ihtv.d(78): Error: found \''unittest\'' when expecting \'')\''\n/tmp/tmp2k_1ihtv.d(91):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp2k_1ihtv.d(91):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2k_1ihtv.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015598
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long n0 = n / 10;\n    long\
    \ n1 = n0 * 10;\n    long n2 = n1 - 1;\n    long d7s = 0;\n    if (n0 > 1) {\n\
    \        d7s += n2 / 7;\n        d7s -= n2 / 70;\n        d7s -= n2 / 77;\n  \
    \      d7s += n2 / 770;\n    }\n    long d11s = 0;\n    if (n0 > 3) {\n      \
    \  d11s += n2 / 11;\n        d11s -= n2 / 110;\n    }\n    long d13s = 0;\n  \
    \  if (n0 > 5) {\n        d13s += n2 / 13;\n        d13s -= n2 / 130;\n    }\n\
    \    long d11_13s = 0;\n    if (n0 > 10) {\n        d11_13s += n2 / 143;\n   \
    \     d11_13s -= n2 / 1430;\n    }\n    long d7s_0 = d7s - d11s - d13s + d11_13s;\n\
    \    long d7s_1 = d7s_0;\n    long d7s_2 = d7s_0;\n    long d7s_3 = d7s_0;\n \
    \   long d7s_4 = d7s_0;\n    long d7s_5 = d7s_0;\n    long d7s_6 = d7s_0;\n  \
    \  long d7s_7 = d7s_0;\n    long d7s_8 = d7s_0;\n    long d7s_9 = d7s_0;\n   \
    \ int d0s = n - n1;\n    if (d0s < 0) {\n        d0s += 10;\n    }\n    long d7s_10\
    \ = d7s_0;\n    if (d0s > 1) {\n        d7s_10 += d0s - 1;\n    }\n    long res\
    \ = d7s_1 + d7s_11 + d7s_13 + d7s_111 + d7s_113\nunittest\n{\n    alias candidate\
    \ = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n    assert(candidate(78L)\
    \ == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L) == 3L);\n\
    \    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) == 192L);\n \
    \   assert(candidate(10000L) == 639L);\n    assert(candidate(100000L) == 8026L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpri8h3hus.d(59): Error: semicolon expected, not \''unittest\''\n/tmp/tmpri8h3hus.d(59):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpri8h3hus.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015598
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    import std.stdio;\n    long\
    \ res = 0;\n    for (long i = 1; i < n; i++) \n    {\n        if (i % 11 == 0\
    \ || i % 13 == 0) \n        {\n            res += count!(string, \"7\")(to!string(i));\n\
    \        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = fizz_buzz;\n\
    \n    assert(candidate(50L) == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L)\
    \ == 3L);\n    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n\
    \    assert(candidate(4000L) == 192L);\n    assert(candidate(10000L) == 639L);\n\
    \    assert(candidate(100000L) == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmploh7t_k0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015598
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long counter = 0;\n    foreach(l;iota(1L,n))\n\
    \    {\n        string i = to!string(l);\n        if((l % 11 == 0 || l % 13 ==\
    \ 0) && count(i.canFind,\"7\") > 0) counter++;\n    }\n    return counter;\n}\n\
    unittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L) ==\
    \ 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n\
    \    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L)\
    \ == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfb6jef5l.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015598
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n  import std.array;\n  import std.math;\n\
    \  import std.string;\n  import std.algorithm;\n  import std.range;\n  import\
    \ std.conv;\n  import std.array;\n  import std.typecons;\n  import std.traits;\n\
    \  import std.meta;\n  import std.iterator;\n  import std.range;\n  import std.conv;\n\
    \  import std.algorithm;\n  import std.math;\n  import std.traits;\n  import std.typecons;\n\
    \  import std.functional;\n  import std.array;\n  import std.range;\n  import\
    \ std.algorithm;\n  import std.regex;\n  import std.range;\n  import std.conv;\n\
    \  import std.typecons;\n  import std.typecons;\n  import std.typecons;\n  import\
    \ std.typecons;\n  import std.typecons;\n  import std.typecons;\n  import std.typecons;\n\
    \  import std.typecons;\n  import std.typecons;\n  import std.typecons;\n  import\
    \ std.typecons;\n  import std.typecons;\n  import std.typecons;\n  import std.typecons;\n\
    \  import std.typecons;\n  import std.typecons;\n  import std.typecons;\n  import\
    \ std.typecons;\n  import std.typecons;\n  import std.typecons;\n  import std.typecons;\n\
    \  import std.typecons;\n  import std.typecons;\n  import std.typecons;\n  import\
    \ std.typecons;\n  import std.typecons;\n  import std.typecons;\n  import std.typecons;\n\
    \  import std.typecons;\n  import std.typecons;\n  import std.typecons;\n  import\
    \ std.typecons;\n  import std.typecons;\n  import std.typecons;\n  import std.typecons;\n\
    \  import std.typecons;\n  import std.typecons;\n  import std.typecons;\n  import\
    \ std.typecons;\n  import std.typecons;\n  import std.typecons;\n  import std.type\n\
    unittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L) ==\
    \ 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n\
    \    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L)\
    \ == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpx77g61l9.d(81): Error: \'';\'' expected\n/tmp/tmpx77g61l9.d(94):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx77g61l9.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015598
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    alias M = Tuple!(bool, bool,\
    \ bool, bool, bool, bool, bool, bool, bool, bool);\n    alias Mat = Tuple!(M,\
    \ M, M, M, M, M, M, M, M, M);\n    alias T = Tuple!(Mat, Mat, Mat, Mat, Mat, Mat,\
    \ Mat, Mat, Mat, Mat);\n    long res = 0;\n    foreach(i; 0 .. n) \n    {\n  \
    \      if (i % 11 == 0 || i % 13 == 0) \n        {\n            T t = tuple(i);\n\
    \            foreach(x; t) \n            {\n                res += (x == 7L) ?\
    \ 1 : 0;\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n \
    \   alias candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n    assert(candidate(78L)\
    \ == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L) == 3L);\n\
    \    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) == 192L);\n \
    \   assert(candidate(10000L) == 639L);\n    assert(candidate(100000L) == 8026L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvprdm3g6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015598
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long count = 0;\n    foreach(i;\
    \ iota(n))\n    {\n        if ( i % 11 == 0 || i % 13 == 0)\n        {\n     \
    \       auto i_str = to!string(i);\n            count += count(startsWith(\"7\"\
    )(i_str));\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n    assert(candidate(78L)\
    \ == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L) == 3L);\n\
    \    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) == 192L);\n \
    \   assert(candidate(10000L) == 639L);\n    assert(candidate(100000L) == 8026L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyrxddkhq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015598
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long count;\n    long i;\n\
    \    count = 0L;\n    i = 0L;\n    while (i < n)\n    {\n        if (i % 11 ==\
    \ 0L)\n        {\n            count += i.countDigits(7L);\n        }\n       \
    \ else if (i % 13 == 0L)\n        {\n            count += i.countDigits(7L);\n\
    \        }\n        i++;\n    }\n    return count;\n}\n/*\nGiven a list of integers,\
    \ multiply together all of the numbers which are prime (have no divisors other\
    \ than 1 and themselves) in the list.\n    >>> primes_product([2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10])\n    15120L\n    >>> primes_product([-1, -2, -3, -4, -5, -6, -7,\
    \ -8, -9, -10])\n    -210L\n    >>> primes_product([1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1])\n    1L\n    \n*/\nlong primes_product(list.List!long numbers) \n{\n   \
    \ long product;\n    long i;\n    product = 1L;\n    i = 0L;\n    foreach (n;\
    \ numbers)\n    {\n        if (n > 1L && n.isPrime())\n        {\n           \
    \ product *= n;\n        }\n    }\n    return product;\n}\n/*\nGiven a list of\
    \ integers, return the largest prime integer in the list, or zero if there are\
    \ no primes.\n    >>> largest_prime([2, 3, 4, 5, 6, 7, 8, 9, 10])\n    7L\n  \
    \  >>> largest_prime([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])\n    0L\n    >>> largest_prime([-1,\
    \ -2, -3, -4, -5, -6, -7, -8, -9, -10])\n    -3L\n    \n*/\nlong largest_prime(list.List!long\
    \ numbers) \n{\n    long largest;\n    long i;\n    largest = 0L;\nunittest\n\
    {\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n   \
    \ assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L)\
    \ == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) ==\
    \ 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3z9hwk21.d(73): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3z9hwk21.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long count = 0;\n    while\
    \ (n > 0) {\n        n /= 10;\n        count += n % 10 == 7 ? 1 : 0;\n    }\n\
    \    return count;\n}\n/*\nFind the sum of the digits of 2**n for some n.\n  \
    \  >>> sum_powers_of_two(1L)\n    2L\n    >>> sum_powers_of_two(5L)\n    10L\n\
    \    >>> sum_powers_of_two(10L)\n    12L\n    >>> sum_powers_of_two(1000L)\n \
    \   1366L\n*/\nlong sum_powers_of_two(long n) \n{\n    long result = 0;\n    if\
    \ (n == 0)\n        return 1;\n    int digit = 7;\n    for (long i = 1; i <= n;\
    \ i++) {\n        result = (result * 2 + digit) % 10;\n        digit = (digit\
    \ * 2) % 10;\n    }\n    return result;\n}\n/*\nGiven an integer, find the number\
    \ of digits that appear an odd number of times.\n    >>> odd_digits(12345678)\n\
    \    3\n    >>> odd_digits(1)\n    1\n    >>> odd_digits(12312123)\n    6\n  \
    \  >>> odd_digits(47382938)\n    6\n*/\nlong odd_digits(long n) \n{\n    int result\
    \ = 0;\n    long digit;\n    while (n > 0) {\n        digit = n % 10;\n      \
    \  n /= 10;\n        if (odd(count_digit(n, digit)))\n            result++;\n\
    \    }\n    return result;\n}\n/*\nConvert a decimal number into a binary number.\n\
    \    >>> binary(4)\n    100\n    >>> binary(7)\n    111\n    >>> binary(100)\n\
    \    1100100\n    >>> binary(12345)\n    11000000111001\n*/\nlong binary(long\
    \ n) \n{\n    long result = 0;\n    long i = 1;\n    while (n > 0) {\n       \
    \ result += (n % 2) * i;\n        n /= 2;\n        i *= 10\nunittest\n{\n    alias\
    \ candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n    assert(candidate(78L)\
    \ == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L) == 3L);\n\
    \    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) == 192L);\n \
    \   assert(candidate(10000L) == 639L);\n    assert(candidate(100000L) == 8026L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpm12bpkya.d(87): Error: found \''unittest\'' when expecting \'';\''
    following statement\n/tmp/tmpm12bpkya.d(100): Error: found \''EOF\'' when expecting
    \''}\'' following compound statement\n/tmp/tmpm12bpkya.d(100): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpm12bpkya.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long x = 0;\n    long cnt =\
    \ 0;\n    long cnt_13 = 0;\n    long cnt_11 = 0;\n    while (x < n) {\n      \
    \  if (x % 13 == 0) {\n            cnt_13 += 1;\n            if (x % 11 == 0)\
    \ {\n                cnt_11 += 1;\n            }\n        }\n        else if (x\
    \ % 11 == 0) {\n            cnt_11 += 1;\n        }\n        x += 1;\n    }\n\
    \    int z = 0;\n    while (z < 10) {\n        if (z == 7) {\n            cnt\
    \ += cnt_13 + cnt_11;\n        }\n        else {\n            cnt += cnt_13;\n\
    \        }\n        z += 1;\n    }\n    return cnt;\n}\n/*\nImplement a class\
    \ that represents an n x n checkerboard. The class should contain an n x n private\
    \ array of Piece enum elements. The enum should be defined to contain two constants,\
    \ BLACK and WHITE, each of which should be of type Optional!Piece.\nunittest\n\
    {\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n   \
    \ assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L)\
    \ == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) ==\
    \ 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmps16z003x.d(43): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmps16z003x.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long ct = 0L;\n    foreach(i;\
    \ 0L .. n) \n    {\n        if(i % 11 == 0 || i % 13 == 0) \n        {\n     \
    \       ct += i.to!string.count(\"7\");\n        }\n    }\n    return ct;\n}\n\
    static assert(fizz_buzz(50L) == 0L);\nstatic assert(fizz_buzz(78L) == 2L);\nstatic\
    \ assert(fizz_buzz(79L) == 3L);\n/*\n    >>> fizz_buzz_2(50L)\n    0L\n    >>>\
    \ fizz_buzz_2(78L)\n    2L\n    >>> fizz_buzz_2(79L)\n    3L\n*/\nlong fizz_buzz_2(long\
    \ n) \n{\n    long ct = 0L;\n    foreach(i; 0L .. n) \n    {\n        if(i % 11\
    \ == 0 || i % 13 == 0) \n        {\n            ct += i.to!string.count(\"7\"\
    );\n        }\n    }\n    return ct;\n}\nstatic assert(fizz_buzz_2(50L) == 0L);\n\
    static assert(fizz_buzz_2(78L) == 2L);\nstatic assert(fizz_buzz_2(79L) == 3L);\n\
    /*\n    >>> fizz_buzz_3(50L)\n    0L\n    >>> fizz_buzz_3(78L)\n    2L\n    >>>\
    \ fizz_buzz_3(79L)\n    3L\n*/\nlong fizz_buzz_3(long n) \n{\n    long ct = 0L;\n\
    \    foreach(i; 0L .. n) \n    {\n        if(i % 11 == 0 || i % 13 == 0) \n  \
    \      {\n            ct += i.to!string.count(\"7\");\n        }\n    }\n    return\
    \ ct;\n}\nstatic assert(fizz_buzz_3(50L) == 0L);\nstatic assert(fizz_buzz_3(78\n\
    unittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L) ==\
    \ 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n\
    \    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L)\
    \ == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8phn0wlu.d(73): Error: found \''unittest\'' when expecting \'',\''\n/tmp/tmp8phn0wlu.d(86):
    Error: found \''void\'' when expecting \'',\''\n/tmp/tmp8phn0wlu.d(86): Error:
    found \''{\'' when expecting \'',\''\n/tmp/tmp8phn0wlu.d(86): Error: expression
    expected, not \''}\''\n/tmp/tmp8phn0wlu.d(86): Error: found \''EOF\'' when expecting
    \'',\''\n/tmp/tmp8phn0wlu.d(86): Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmp8phn0wlu.d(86):
    Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmp8phn0wlu.d(86): Error:
    found \''EOF\'' when expecting \'';\''\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp8phn0wlu.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015598
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long out = 0L;\n    // 7*11\
    \ = 77\n    // 7*13 = 91\n    for (long i = 11L; i < min(n, 77L); i += 11L) \n\
    \    {\n        out += i % 7L == 0L;\n    }\n    for (long i = 13L; i < min(n,\
    \ 91L); i += 13L) \n    {\n        out += i % 7L == 0L;\n    }\n    return out;\n\
    }\n/*\nunittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L)\
    \ == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n\
    \    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L)\
    \ == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv44h1f6p.d(15): Error: no identifier for declarator long\n/tmp/tmpv44h1f6p.d(15):
    Error: found \''out\'' instead of statement\n/tmp/tmpv44h1f6p.d(20): Error: found
    \''out\'' instead of statement\n/tmp/tmpv44h1f6p.d(24): Error: found \''out\''
    instead of statement\n/tmp/tmpv44h1f6p.d(26): Error: expression expected, not
    \''out\''\n/tmp/tmpv44h1f6p.d(28): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv44h1f6p.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    if (n<=0)\n        return 0;\n\
    \    //assert(n>0);\n    long fb_n_minus_11 = fizz_buzz(n-11);\n    long fb_n_minus_13\
    \ = fizz_buzz(n-13);\n    long fb_n = fb_n_minus_11 + fb_n_minus_13;\n    if (n\
    \ % 11 == 0)\n        fb_n += std.math.count_digits(n, 7);\n    if (n % 13 ==\
    \ 0)\n        fb_n += std.math.count_digits(n, 7);\n    return fb_n;\n}\nunittest\n\
    {\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n   \
    \ assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L)\
    \ == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) ==\
    \ 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2qqpf9a0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n  import std.array;\n  import std.range;\n\
    \  import std.conv;\n  long count = 0;\n  for (long i = 0; i < n; i++) \n  {\n\
    \    if (i % 11 == 0 || i % 13 == 0) \n    {\n      string s = to!string(i);\n\
    \      count += count(s, \"7\");\n    }\n  }\n  return count;\n}\nunittest\n{\n\
    \    alias candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n    assert(candidate(78L)\
    \ == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L) == 3L);\n\
    \    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) == 192L);\n \
    \   assert(candidate(10000L) == 639L);\n    assert(candidate(100000L) == 8026L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq0qdzjwt.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015598
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n\tlong count7 = 0;\n\tfor (long\
    \ i = 1; i < n; i++)\n\t{\n\t\tif (i % 11 == 0 || i % 13 == 0)\n\t\t{\n\t\t\t\
    for (long j = i; j > 0; j = j / 10)\n\t\t\t{\n\t\t\t\tif (j % 10 == 7)\n\t\t\t\
    \t{\n\t\t\t\t\tcount7++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count7;\n}\n\
    unittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L) ==\
    \ 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n\
    \    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L)\
    \ == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4b873ejn.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015598
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n    long ans = 0L;\n    foreach (i;\
    \ 0 .. n) \n        if ((i % 11L == 0L) || (i % 13L == 0L)) \n            ans\
    \ += count(\"7\", static_cast(string)(i));\n    return ans;\n}\nunittest\n{\n\
    \    alias candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n    assert(candidate(78L)\
    \ == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L) == 3L);\n\
    \    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) == 192L);\n \
    \   assert(candidate(10000L) == 639L);\n    assert(candidate(100000L) == 8026L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp19oe7t_z.d(14): Error: semicolon expected following function
    declaration\n/tmp/tmp19oe7t_z.d(15): Error: Declaration expected, not \''foreach\''\n/tmp/tmp19oe7t_z.d(15):
    Error: Declaration expected, not \''0\''\n/tmp/tmp19oe7t_z.d(18): Error: Declaration
    expected, not \''return\''\n/tmp/tmp19oe7t_z.d(19): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp19oe7t_z.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015598
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n\tlong result = 0;\n\tforeach(i;\
    \ iota(n)) \n\t{\n\t\tif(i % 11 == 0) \n\t\t{\n\t\t\twriteln(i);\n\t\t\tresult\
    \ += i % 10 == 7 ? 1 : 0;\n\t\t\tcontinue;\n\t\t}\n\t\tif(i % 13 == 0) \n\t\t\
    {\n\t\t\twriteln(i);\n\t\t\tresult += i % 10 == 7 ? 1 : 0;\n\t\t\tcontinue;\n\t\
    \t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = fizz_buzz;\n\
    \n    assert(candidate(50L) == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L)\
    \ == 3L);\n    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n\
    \    assert(candidate(4000L) == 192L);\n    assert(candidate(10000L) == 639L);\n\
    \    assert(candidate(100000L) == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7or7txnv.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n\tlong fizz = (1L, 11L ... n).filter!(x\
    \ => x % 11 == 0 || x % 13 == 0).map!(to!string).map!(to!long).filter!(x => x\
    \ == 7).sum;\n\treturn fizz;\n}\nunittest\n{\n    alias candidate = fizz_buzz;\n\
    \n    assert(candidate(50L) == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L)\
    \ == 3L);\n    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n\
    \    assert(candidate(4000L) == 192L);\n    assert(candidate(10000L) == 639L);\n\
    \    assert(candidate(100000L) == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpktrae6yz.d(15): Error: found \''...\'' when expecting \'')\''\n/tmp/tmpktrae6yz.d(15):
    Error: semicolon expected, not \''n\''\n/tmp/tmpktrae6yz.d(15): Error: found \'')\''
    when expecting \'';\'' following statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpktrae6yz.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n    //return (sum([1 for i in range(1,\
    \ n) if i % 11 == 0 or i % 13 == 0 and '7' in str(i)]))\n{\n    long result =\
    \ 0;\n    foreach(i; 1 .. n) \n    {\n        if(i % 11 == 0 || i % 13 == 0) \n\
    \        {\n            string str = to!string(i);\n            if(str.canFind(\"\
    7\")) \n            {\n                result += 1;\n            }\n        }\n\
    \    }\n    return result;\n}\n// Bytearray to integer\nunittest\n{\n    alias\
    \ candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n    assert(candidate(78L)\
    \ == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L) == 3L);\n\
    \    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) == 192L);\n \
    \   assert(candidate(10000L) == 639L);\n    assert(candidate(100000L) == 8026L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9d36ggq3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015598
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long r = 0L;\n    long t =\
    \ 0L;\n    long a = 11L;\n    long b = 13L;\n    long i = 0L;\n    long k = 0L;\n\
    \    long m = 0L;\n    long c = 0L;\n    long u = 0L;\n    long v = 0L;\n    long\
    \ x = 0L;\n    long y = 0L;\n    long z = 0L;\n    long w = 0L;\n    long[] b\
    \ = new long[1];\n    long[] d = new long[1];\n    if ((n < 0L))\n    {\n    \
    \    return (-1L);\n    }\n    if ((n < 11L))\n    {\n        return (0L);\n \
    \   }\n    n = n - 1L;\n    c = modp(n, a);\n    if ((c == 0L))\n    {\n     \
    \   r = n / a;\n        t = modp(r, 10L);\n        if ((t == 7L))\n        {\n\
    \            return (1L);\n        }\n        return (0L);\n    }\n    c = modp(n,\
    \ b);\n    if ((c == 0L))\n    {\n        r = n / b;\n        t = modp(r, 10L);\n\
    \        if ((t == 7L))\n        {\n            return (1L);\n        }\n    \
    \    return (0L);\n    }\n    b[0L] = a;\n    d[0L] = b;\n    if ((d[0L] < b[0L]))\n\
    \    {\n        k = b[0L];\n        b[0L] = d[0L];\n        d[0L] = k;\n    }\n\
    \    k = b[0L];\n    i = modp(n, k);\n    if ((i == 0L))\n    {\n        m = n\
    \ / k;\n        t = modp(m, 10L);\n        if ((t == 7L))\n        {\n       \
    \     return (1L);\n        }\n        return (0L);\n    }\n    r = n / b[0L];\n\
    \    t =\nunittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L)\
    \ == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n\
    \    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L)\
    \ == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5m0h3910.d(84): Error: expression expected, not \''unittest\''\n/tmp/tmp5m0h3910.d(85):
    Error: found \''{\'' when expecting \'';\'' following statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp5m0h3910.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015598
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long result = 0L;\n    long*\
    \ i = new long[1];\n    i[0] = 0L;\n    while (i[0] < n)\n    {\n        if (divisible(i[0],\
    \ 11L) || divisible(i[0], 13L))\n        {\n            result += count_sevens(i[0]);\n\
    \        }\n        i[0] += 1L;\n    }\n    return result;\n}\n/*\nReturn true\
    \ iff n is divisible by m.\n*/\nunittest\n{\n    alias candidate = fizz_buzz;\n\
    \n    assert(candidate(50L) == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L)\
    \ == 3L);\n    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n\
    \    assert(candidate(4000L) == 192L);\n    assert(candidate(10000L) == 639L);\n\
    \    assert(candidate(100000L) == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwz730xc1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long result = 0L;\n    if (n\
    \ == 0L) \n    {\n        return result;\n    }\n    immutable char ch = '7';\n\
    \    enum divisors = tuple(11L, 13L);\n    foreach (digits; iota(1L, n)) \n  \
    \  {\n        bool isDivisible = false;\n        foreach (d; divisors) \n    \
    \    {\n            if (digits % d == 0L) \n            {\n                isDivisible\
    \ = true;\n                break;\n            }\n        }\n        if (isDivisible)\
    \ \n        {\n            string strDigits = to!string(digits);\n           \
    \ foreach (chr; strDigits) \n            {\n                if (chr == ch) \n\
    \                {\n                    result++;\n                }\n       \
    \     }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n    assert(candidate(78L)\
    \ == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L) == 3L);\n\
    \    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) == 192L);\n \
    \   assert(candidate(10000L) == 639L);\n    assert(candidate(100000L) == 8026L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaa1fk06x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long i;\n    long num = 0;\n\
    \    foreach(i; 0 .. n)\n    {\n        if(i % 7 == 0)\n        {\n          \
    \  num++;\n        }\n        else if(i % 11 == 0)\n        {\n            num++;\n\
    \        }\n        else if(i % 13 == 0)\n        {\n            num++;\n    \
    \    }\n    }\n    return num;\n}\n/*\nb = number base\nReturn the length of the\
    \ base b representation of x.\n    >>> num_digits(0L, 10L)\n    1L\n    >>> num_digits(1L,\
    \ 10L)\n    1L\n    >>> num_digits(2L, 10L)\n    1L\n    >>> num_digits(9L, 10L)\n\
    \    1L\n    >>> num_digits(10L, 10L)\n    2L\n    >>> num_digits(11L, 10L)\n\
    \    2L\n    >>> num_digits(99L, 10L)\n    2L\n    >>> num_digits(100L, 10L)\n\
    \    3L\n    >>> num_digits(101L, 10L)\n    3L\n    >>> num_digits(123L, 10L)\n\
    \    3L\n    >>> num_digits(1000L, 10L)\n    4L\n    >>> num_digits(1100L, 10L)\n\
    \    4L\n    >>> num_digits(12345L, 10L)\n    5L\n    >>> num_digits(123456789L,\
    \ 10L)\n    9L\n    >>> num_digits(1234567890123456789L, 10L)\n    18L\n    >>>\
    \ num_digits(123456789012345678901234567890L, 10L)\n    30L\n    >>> num_digits(0L,\
    \ 2L)\n    1L\n    >>> num_digits(1L, 2L)\n    1L\n    >>> num_digits(10L, 2L)\n\
    \    4L\n    >>> num_digits(11L, 2L)\n    4L\n    >>> num_digits(\nunittest\n\
    {\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n   \
    \ assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L)\
    \ == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) ==\
    \ 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp10sdz_p.d(34): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpp10sdz_p.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n  long result = 0;\n  long index\
    \ = 0;\n  bool indexIsNumberOf7s = false;\n  bool numberIsDivisibleBy11 = false;\n\
    \  bool numberIsDivisibleBy13 = false;\n  bool numberIsDivisibleBy11Or13 = false;\n\
    \  string NumberAsString = \"\";\n  for (index = 7; index < n; index++)\n  {\n\
    \    numberIsDivisibleBy11 = (index % 11 == 0);\n    numberIsDivisibleBy13 = (index\
    \ % 13 == 0);\n    numberIsDivisibleBy11Or13 = (numberIsDivisibleBy11 || numberIsDivisibleBy13);\n\
    \    if (numberIsDivisibleBy11Or13)\n    {\n      indexIsNumberOf7s = true;\n\
    \      NumberAsString = to!string(index);\n      indexIsNumberOf7s = (NumberAsString.count('7')\
    \ > 0);\n      if (indexIsNumberOf7s)\n      {\n        result++;\n      }\n \
    \   }\n  }\n  return result;\n}\nunittest\n{\n    alias candidate = fizz_buzz;\n\
    \n    assert(candidate(50L) == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L)\
    \ == 3L);\n    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n\
    \    assert(candidate(4000L) == 192L);\n    assert(candidate(10000L) == 639L);\n\
    \    assert(candidate(100000L) == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc_da0zq3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long result = 0L;\n    foreach(immutable\
    \ i; 0L .. < n) \n    {\n        immutable x = cast(immutable) i;\n        immutable\
    \ digits = to!string(x).count(\"7\");\n        immutable fizz = x % 11;\n    \
    \    immutable buzz = x % 13;\n        if (digits > 0 && (fizz == 0 || buzz ==\
    \ 0)) \n        {\n            result += digits;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L)\
    \ == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n\
    \    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L)\
    \ == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprjhxx_44.d(16): Error: expression expected, not \''<\''\n/tmp/tmprjhxx_44.d(16):
    Error: found \''n\'' when expecting \'')\''\n/tmp/tmprjhxx_44.d(16): Error: found
    \'')\'' instead of statement\n/tmp/tmprjhxx_44.d(27): Error: Declaration expected,
    not \''return\''\n/tmp/tmprjhxx_44.d(28): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprjhxx_44.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long count = 0;\n    foreach(i;\
    \ 1..n) \n    {\n        if(i % 11 == 0 || i % 13 == 0) \n        {\n        \
    \    auto s = to!string(i);\n            auto index = find(s, \"7\");\n      \
    \      while(index != s.length) \n            {\n                count++;\n  \
    \              index = find(s[index..], \"7\");\n            }\n        }\n  \
    \  }\n    return count;\n}\n/*\nGiven a list of numbers, return a list of numbers\
    \ where each number is the sum of the corresponding two numbers.\n    >>> sum_pairs([11,\
    \ 20, 4, 2, 1, 5])\n    [31, 24, 6, 3]\n    >>> sum_pairs([0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0])\n    [0, 0, 0, 0, 0, 0, 0, 0]\n    \n*/\nunittest\n{\n    alias candidate\
    \ = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n    assert(candidate(78L)\
    \ == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L) == 3L);\n\
    \    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) == 192L);\n \
    \   assert(candidate(10000L) == 639L);\n    assert(candidate(100000L) == 8026L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg1uh_t1i.d(25): Error: expression expected, not \'']\''\n/tmp/tmpg1uh_t1i.d(25):
    Error: found \'',\'' when expecting \'']\''\n/tmp/tmpg1uh_t1i.d(25): Error: found
    \''"7"\'' when expecting \'',\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg1uh_t1i.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long count = 0;\n    for (long\
    \ i = 0; i < n; i++)\n    {\n        if (i % 11 == 0 || i % 13 == 0)\n       \
    \ {\n            int temp = i;\n            while (temp > 0)\n            {\n\
    \                if (temp % 10 == 7)\n                {\n                    count++;\n\
    \                }\n                temp /= 10;\n            }\n        }\n  \
    \  }\n    return count;\n}\nunittest\n{\n    alias candidate = fizz_buzz;\n\n\
    \    assert(candidate(50L) == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L)\
    \ == 3L);\n    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n\
    \    assert(candidate(4000L) == 192L);\n    assert(candidate(10000L) == 639L);\n\
    \    assert(candidate(100000L) == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0ikly700.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    return count(filter!((d){return\
    \ d == 7;})(concat(map!((i){return to!string(i);})(filter!((i){return i % 11 ==\
    \ 0 || i % 13 == 0;})(iota(n))))));\n}\nunittest\n{\n    alias candidate = fizz_buzz;\n\
    \n    assert(candidate(50L) == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L)\
    \ == 3L);\n    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n\
    \    assert(candidate(4000L) == 192L);\n    assert(candidate(10000L) == 639L);\n\
    \    assert(candidate(100000L) == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9p1ewt8i.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n\tlong res = 0;\n\tforeach(n;iota(n))\n\
    \t{\n\t\tif((i % 11 == 0 || i % 13 == 0) && has_digit(i, 7))\n\t\t\tres++;\n\t\
    }\n\treturn res;\n}\nunittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L)\
    \ == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n\
    \    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L)\
    \ == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppdqhljte.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n  /*\n  long i = 13L;\n  long count\
    \ = 0L;\n  while (i < n) {\n      if (i % 11L == 0L || i % 13L == 0L)\n      \
    \    count += count_digit(i, 7L);\n      i += 1L;\n  }\n  return count;\n  */\n\
    \  return iota(n).filter!(x => x % 11L == 0L || x % 13L == 0L).map!(x => count_digit(x,\
    \ 7L)).sum;\n}\nunittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L)\
    \ == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n\
    \    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L)\
    \ == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuyuk915j.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    // Do we need so many statements?\n\
    \    // Could we use a cast?\n    long fb = 0L;\n    if (n < 1L)\n    {\n    \
    \    return fb;\n    }\n    n -= 1L;\n    // Check if n can be divided by 11 or\
    \ 13 without remainder\n    long remainder = n % 11L;\n    if (remainder != 0L)\n\
    \    {\n        long remainder2 = n % 13L;\n        if (remainder2 != 0L)\n  \
    \      {\n            return fb;\n        }\n    }\n    // Using a range instead\
    \ of a while loop\n    // Look up the algorithm in the range.d file\n    // How\
    \ would we initialize the range without looking up the algorithm?\n    foreach\
    \ (i;0L..n)\n    {\n        if (i % 11L == 0L || i % 13L == 0L)\n        {\n \
    \           foreach (c; i.to!string())\n            {\n                if (c ==\
    \ '7')\n                {\n                    fb += 1L;\n                }\n\
    \            }\n        }\n    }\n    return fb;\n}\n/*\nReturn the number of\
    \ times the digit 7 appears in integers less than n which are divisible by 11\
    \ or 13.\n    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n   \
    \ >>> fizz_buzz(79L)\n    3L\n    \n*/\nlong fizz_buzz_func(long n) \n{\n    //\
    \ Do we need so many statements?\n    // Could we use a cast?\n    long fb = 0L;\n\
    \    if (n < 1L)\n    {\n        return fb;\n    }\n    n -= 1L;\n    // Check\
    \ if n can be divided by 11 or 13 without remainder\n    long remainder = n %\
    \ 11L;\n    if (remainder != 0L)\n    {\n        long remainder2 = n % 13L;\n\
    \        if (remainder2 != 0L)\n        {\n            return fb;\n        }\n\
    \    }\n    // Using a range instead of a while loop\n    // Look up the\nunittest\n\
    {\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n   \
    \ assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L)\
    \ == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) ==\
    \ 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9lufzql9.d(83): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9lufzql9.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long res = 0;\n    for (int\
    \ i = 0; i < n; i++) \n    {\n        if (i % 11 == 0 || i % 13 == 0) \n     \
    \   {\n            res += count_if!(a => a == '7')(i.to!string);\n        }\n\
    \    }\n    return res;\n}\n// BEGIN TEMPLATE\nunittest\n{\n    alias candidate\
    \ = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n    assert(candidate(78L)\
    \ == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L) == 3L);\n\
    \    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) == 192L);\n \
    \   assert(candidate(10000L) == 639L);\n    assert(candidate(100000L) == 8026L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp989jvt6z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long cnt = 0L;\n    foreach\
    \ (i; iota(2L, n)) {\n\tif ((i % 11 == 0 || i % 13 == 0) && i % 7 == 0)\n\t  \
    \  cnt += i.to!string.count('7');\n    }\n    return cnt;\n}\n/*\nReturn a tuple\
    \ of the first n numbers of the fibonacci sequence.\n    >>> fib_tuple(10)\n \
    \   tuple(0L, 1L, 1L, 2L, 3L, 5L, 8L, 13L, 21L, 34L)\n    >>> fib_tuple(1)\n \
    \   tuple(0L)\n    >>> fib_tuple(0)\n    tuple()\n*/\ntuple fib_tuple(long n)\
    \ \n{\n    tuple result = tuple();\n    long a = 0L, b = 1L;\n    foreach (i;\
    \ iota(0L, n)) {\n\tresult ~= a;\n\tlong c = a + b;\n\ta = b;\n\tb = c;\n    }\n\
    \    return result;\n}\n/*\nReturn the nth number of the fibonacci sequence.\n\
    \    >>> fib(10)\n    55L\n    >>> fib(1)\n    1L\n    >>> fib(0)\n    0L\n*/\n\
    long fib(long n) \n{\n    long a = 0L, b = 1L;\n    foreach (i; iota(0L, n)) {\n\
    \tlong c = a + b;\n\ta = b;\n\tb = c;\n    }\n    return a;\n}\n/*\nReturn whether\
    \ or not a number is a prime number.\n    >>> is_prime(3L)\n    true\n    >>>\
    \ is_prime(4L)\n    false\n    >>> is_prime(0L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n*/\nunittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L)\
    \ == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n\
    \    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L)\
    \ == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpducx2a5e.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n  long result = 0L;\n  \n  for\
    \ (long i = 0L; i < n; i++) \n  {\n    if (i % 11L == 0L || i % 13L == 0L) \n\
    \    {\n      string s = to!string(i);\n      auto pos = s.find('7');\n      while\
    \ (pos != string.npos)\n      {\n        result++;\n        pos = s.find('7',\
    \ pos + 1);\n      }\n    }\n  }\n  return result;\n}\nunittest\n{\n    alias\
    \ candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n    assert(candidate(78L)\
    \ == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L) == 3L);\n\
    \    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) == 192L);\n \
    \   assert(candidate(10000L) == 639L);\n    assert(candidate(100000L) == 8026L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7qgg7z_4.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    return iota(n).filter!(x =>\
    \ x % 11 == 0 || x % 13 == 0)\n                     .map!(to!string)\n       \
    \              .filter!(x => x.indexOf(\"7\") != -1)\n                     .reduce!(a\
    \ => a.length)();\n}\nunittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L)\
    \ == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n\
    \    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L)\
    \ == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd7kd2g36.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    ulong num = 0;\n    foreach(immutable\
    \ i; 1 .. n)\n    {\n        if(i % 11 == 0 || i % 13 == 0)\n        {\n     \
    \       string str = i.to!string;\n            foreach(immutable c; str)\n   \
    \         {\n                if(c == '7')\n                    num++;\n      \
    \      }\n        }\n    }\n    return num;\n}\nunittest\n{\n    alias candidate\
    \ = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n    assert(candidate(78L)\
    \ == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L) == 3L);\n\
    \    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) == 192L);\n \
    \   assert(candidate(10000L) == 639L);\n    assert(candidate(100000L) == 8026L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0qtfxi5a.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long[] m = new long[1];\n \
    \   long[] n_buf = new long[1];\n    n_buf[0] = n;\n    long[] l = new long[1];\n\
    \    long[] r = new long[1];\n    l[0] = 0L;\n    r[0] = n;\n    if ( ((n % 11L)\
    \ == 0L) || ((n % 13L) == 0L) )\n    {\n        m[0] = n / 2L;\n        if ( (m[0]\
    \ * 2L) < n )\n        {\n            m[0] = m[0] + 1L;\n        }\n        long[]\
    \ lr = new long[2];\n        long[] mr = new long[2];\n        long[] mlr = new\
    \ long[2];\n        long[] lr1 = new long[2];\n        long[] mr1 = new long[2];\n\
    \        long[] mlr1 = new long[2];\n        long[] lr_buf = new long[2];\n  \
    \      long[] mr_buf = new long[2];\n        long[] mlr_buf = new long[2];\n \
    \       lr_buf[0] = l[0];\n        lr_buf[1] = r[0];\n        mr_buf[0] = m[0];\n\
    \        mr_buf[1] = r[0];\n        mlr_buf[0] = m[0];\n        mlr_buf[1] = l[0];\n\
    \        lr1[0] = lr_buf[0];\n        lr1[1] = lr_buf[1];\n        mr1[0] = mr_buf[0];\n\
    \        mr1[1] = mr_buf[1];\n        mlr1[0] = mlr_buf[0];\n        mlr1[1] =\
    \ mlr_buf[1];\n        lr[0] = lr1[0];\n        lr[1] = lr1[1];\n        mr[0]\
    \ = mr1[0];\n        mr[1] = mr1[1];\n        m\nunittest\n{\n    alias candidate\
    \ = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n    assert(candidate(78L)\
    \ == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L) == 3L);\n\
    \    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) == 192L);\n \
    \   assert(candidate(10000L) == 639L);\n    assert(candidate(100000L) == 8026L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp32pohw48.d(55): Error: found \''unittest\'' when expecting \'';\''
    following statement\n/tmp/tmp32pohw48.d(68): Error: found \''EOF\'' when expecting
    \''}\'' following compound statement\n/tmp/tmp32pohw48.d(68): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp32pohw48.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    return sum(map!((int x) =>\
    \ x == 7 ? 1 : 0)(\n                map!((long x) => to!int(x))(\n           \
    \         filter!((long x) => x % 11 == 0 || x % 13 == 0)(\n                 \
    \       iota(n)))));\n}\n/*\nReturn the sum of the digits of a positive integer\
    \ n.\n    >>> digit_sum(128L)\n    11L\n*/\nlong digit_sum(long n) \n{\n    return\
    \ sum(map!((char c) => to!long(c - '0'))(to!string(n)));\n}\n/*\nReturn the number\
    \ of anagrams of word that appear in a list of words. \nYou can assume word will\
    \ not appear in the list of words more than once.\n    >>> anagrams(\"master\"\
    , [\"stream\", \"pigeon\", \"maters\"])\n    3L\n    >>> anagrams(\"master\",\
    \ [\"stream\", \"pigeon\", \"maters\", \"master\"])\n    4L\n*/\nlong anagrams(string\
    \ word, string[] words) \n{\n    return filter!((string x) => to!string(x.dup)\
    \ == to!string(word.dup))(words).length;\n}\n/*\nReturn the index of the list\
    \ of words where anagrams of word appear. \nYou can assume word will not appear\
    \ in the list of words more than once.\n    >>> indices(\"master\", [\"stream\"\
    , \"pigeon\", \"maters\"])\n    [0L, 2L]\n    >>> indices(\"master\", [\"stream\"\
    , \"pigeon\", \"maters\", \"master\"])\n    [0L, 2L, 3L]\n*/\nlong[] indices(string\
    \ word, string[] words) \n{\n    return map!((string x) => words.indexOf(x))(\n\
    \                filter!((string x) => to!string(x.dup) == to!string(word.dup))(words));\n\
    }\n/*\nReturn the two-dimensional array of the sorted version of each sublist\
    \ in xss.\n    >>> sort_array([[3L, 1L, 2L], [5L, 6L, 4L], [9L,\nunittest\n{\n\
    \    alias candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n    assert(candidate(78L)\
    \ == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L) == 3L);\n\
    \    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) == 192L);\n \
    \   assert(candidate(10000L) == 639L);\n    assert(candidate(100000L) == 8026L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1id43dae.d(54): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp1id43dae.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    import std.math : lgamma;\n\
    \    long count = 0;\n    foreach(i; 1..n)\n    {\n        if(i%11==0 || i%13==0)\n\
    \        {\n            auto test = i.to!string;\n            foreach(c; test)\n\
    \            {\n                if(c == '7')\n                {\n            \
    \        count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L)\
    \ == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n\
    \    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L)\
    \ == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphuu4i0mh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long result = 0L;\n    foreach(immutable\
    \ i; 0L .. n)\n    {\n        if(i % 11 == 0L || i % 13 == 0L)\n        {\n  \
    \          static immutable A = \"123456789\";\n            static immutable B\
    \ = \"012345678\";\n            static immutable C = \"001234567\";\n        \
    \    static immutable D = \"000123456\";\n            static immutable E = \"\
    000012345\";\n            static immutable F = \"000001234\";\n            static\
    \ immutable G = \"000000123\";\n            static immutable H = \"000000012\"\
    ;\n            static immutable I = \"000000001\";\n            auto key = std.algorithm.find!((a)\
    \ => a == '7')(i.to!string.dup);\n            if(i % 11 == 0L)\n            {\n\
    \                static immutable Z = \"000000000000\" ~ \"000000000000\" ~ A\
    \ ~ B ~ C ~ D ~ E ~ F ~ G ~ H ~ I;\n                auto index = key - i.to!string.dup.ptr;\n\
    \                result += Z[index .. index + 10].count(a => a == '7');\n    \
    \        }\n            else\n            {\n                static immutable\
    \ Z = \"000000000\" ~ A ~ B ~ C ~ D ~ E ~ F ~ G ~ H ~ I;\n                auto\
    \ index = key - i.to!string.dup.ptr;\n                result += Z[index .. index\
    \ + 9].count(a => a == '7');\n            }\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L)\
    \ == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n\
    \    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L)\
    \ == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvqrdt2_6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long count = 0;\n    long tmp\
    \ = 0;\n    if(n > 79)\n    {\n        tmp = n - 79;\n        count = 3;\n   \
    \ }\n    else if(n > 78)\n    {\n        tmp = n - 78;\n        count = 2;\n \
    \   }\n    else if(n > 11)\n    {\n        tmp = n - 11;\n        count = 1;\n\
    \    }\n    if(tmp > 0)\n    {\n        count += (div(tmp,11) + div(tmp,13));\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = fizz_buzz;\n\n\
    \    assert(candidate(50L) == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L)\
    \ == 3L);\n    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n\
    \    assert(candidate(4000L) == 192L);\n    assert(candidate(10000L) == 639L);\n\
    \    assert(candidate(100000L) == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeprvewvo.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    auto c = 0L;\n    auto p =\
    \ 7L;\n    auto c2 = 0L;\n    while( n>0L)\n    {\n        c = n%10L;\n      \
    \  if( c==p)\n        {\n            c2++;\n        }\n        n = n/10L;\n  \
    \  }\n    return c2;\n}\nunittest\n{\n    alias candidate = fizz_buzz;\n\n   \
    \ assert(candidate(50L) == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L)\
    \ == 3L);\n    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n\
    \    assert(candidate(4000L) == 192L);\n    assert(candidate(10000L) == 639L);\n\
    \    assert(candidate(100000L) == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcz2kb2vf.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long res = 0;\n    foreach(num;\
    \ iota(1L, n + 1L))\n    {\n        auto digit = 0;\n        while(num)\n    \
    \    {\n            digit = num % 10;\n            num /= 10;\n            if(digit\
    \ == 7)\n            {\n                res++;\n            }\n        }\n   \
    \ }\n    return res;\n}\nunittest\n{\n    alias candidate = fizz_buzz;\n\n   \
    \ assert(candidate(50L) == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L)\
    \ == 3L);\n    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n\
    \    assert(candidate(4000L) == 192L);\n    assert(candidate(10000L) == 639L);\n\
    \    assert(candidate(100000L) == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1q8tpu2_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    return ((n/11)*count('7', n/11)+(n/13)*count('7',\
    \ n/13)-(n/11/13)*count('7', n/11/13))-count('7', n);\n}\nunittest\n{\n    alias\
    \ candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n    assert(candidate(78L)\
    \ == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L) == 3L);\n\
    \    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) == 192L);\n \
    \   assert(candidate(10000L) == 639L);\n    assert(candidate(100000L) == 8026L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_o06vc7z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long res = 0;\n    foreach(i;\
    \ 0 .. n)\n    {\n        if(!(i % 11) || !(i % 13))\n        {\n            for(auto\
    \ c : to!string(i))\n            {\n                if(c == '7') res++;\n    \
    \        }\n        }\n    }\n    return res;\n}\n/*\nunittest\n{\n    alias candidate\
    \ = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n    assert(candidate(78L)\
    \ == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L) == 3L);\n\
    \    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) == 192L);\n \
    \   assert(candidate(10000L) == 639L);\n    assert(candidate(100000L) == 8026L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcmaw_qh2.d(20): Error: no identifier for declarator c\n/tmp/tmpcmaw_qh2.d(20):
    Error: expression expected, not \'':\''\n/tmp/tmpcmaw_qh2.d(20): Error: found
    \''to\'' when expecting \'';\'' following for condition\n/tmp/tmpcmaw_qh2.d(28):
    Error: unterminated /* */ comment\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcmaw_qh2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    int count = 0;\n    foreach(i;\
    \ 0..n) \n    {\n        if(i % 11 == 0 || i % 13 == 0) \n        {\n        \
    \    auto num = cast(long) i;\n            if(num.to!string.count(\"7\") != 0)\
    \ \n            {\n                count++;\n            }\n        }\n    }\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L)\
    \ == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n\
    \    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L)\
    \ == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxz81vrwi.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n\tstatic assert(is(typeof(unchecked((n\
    \ % 11 == 0) || (n % 13 == 0))) == bool));\n\treturn (n < 7) ? 0 : (unchecked((n\
    \ % 11 == 0) || (n % 13 == 0))) ? \n\t\t\tfizz_buzz(n - 1) + (unchecked((n % 100)\
    \ / 10 == 7)) : fizz_buzz(n - 1);\n}\n/*\n    >>> fizz_buzz(50L)\n    0L\n   \
    \ >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n    3L\n*/\nunittest\n{\n\
    \    alias candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n    assert(candidate(78L)\
    \ == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L) == 3L);\n\
    \    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) == 192L);\n \
    \   assert(candidate(10000L) == 639L);\n    assert(candidate(100000L) == 8026L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphexw4phw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    /*\n        >>> fizz_buzz(50L)\n\
    \        0L\n        >>> fizz_buzz(78L)\n        2L\n        >>> fizz_buzz(79L)\n\
    \        3L\n    */\n    long divs = 2;\n    long pos = 11;\n    long mod = n\
    \ % 11;\n    long sum = 0;\n    if (mod > 7)\n    {\n        sum += 11-mod;\n\
    \        pos += 11;\n    }\n    else\n    {\n        pos += mod;\n    }\n    for\
    \ (; pos < n; pos += 11)\n    {\n        sum += 1;\n        if (pos % 13 == 0)\n\
    \        {\n            sum += 1;\n            pos += 13;\n        }\n    }\n\
    \    return sum;\n}\nunittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L)\
    \ == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n\
    \    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L)\
    \ == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5tqvpoiq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    /*\n    >>> [x for x in range(50)\
    \ if x % 11 == 0 or x % 13 == 0]\n    [0, 11, 13, 22, 26, 33, 39, 44]\n    >>>\
    \ [x for x in range(79) if x % 11 == 0 or x % 13 == 0]\n    [0, 11, 13, 22, 26,\
    \ 33, 39, 44, 52, 56, 62, 65, 66, 70, 77]\n    >>> fizz_buzz(50L)\n    0L\n  \
    \  >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n    3L\n    */\n    return\
    \ n\n        .iota\n        .filter!(x => (x % 11 == 0 || x % 13 == 0))\n    \
    \    .map!(x => x.to!string)\n        .filter!(x => x.count(\"7\") > 0)\n    \
    \    .length;\n}\nunittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L)\
    \ == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n\
    \    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L)\
    \ == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4cd1m0kj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    int count = 0;\n    foreach(i;0..n)\n\
    \    {\n        auto str = to!string(i);\n        if(str.count('7') > 0)\n   \
    \     {\n            if(i % 11 == 0 || i % 13 == 0)\n            {\n         \
    \       count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n   \
    \ assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L)\
    \ == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) ==\
    \ 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi_qcpjy8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long count = 0;\n    //printf(\"\
    n = %d\\n\", n);\n    long i = 0;\n    while (i < n) {\n        long nn = i;\n\
    \        if ((nn % 11 == 0) || (nn % 13 == 0)) {\n            long nnn = nn;\n\
    \            while (nnn > 0) {\n                if (nnn % 10 == 7) {\n       \
    \             count++;\n                }\n                nnn /= 10;\n      \
    \      }\n        }\n        i++;\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n    assert(candidate(78L)\
    \ == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L) == 3L);\n\
    \    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) == 192L);\n \
    \   assert(candidate(10000L) == 639L);\n    assert(candidate(100000L) == 8026L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4rkjh5to.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long sum = 0;\n    long i =\
    \ 0;\n    while (i < n) {\n        if ((i % 11 == 0) || (i % 13 == 0)) {\n   \
    \         sum += count(std.string.format(\"%ld\", i), '7');\n        }\n     \
    \   i++;\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = fizz_buzz;\n\
    \n    assert(candidate(50L) == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L)\
    \ == 3L);\n    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n\
    \    assert(candidate(4000L) == 192L);\n    assert(candidate(10000L) == 639L);\n\
    \    assert(candidate(100000L) == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo18sb9wd.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n\tlong count = 0;\n\tlong fizz\
    \ = 11L;\n\tlong buzz = 13L;\n\tauto fizzes = tuple(n);\n\tauto buzzes = tuple(n);\n\
    \twhile (fizz < n) \n\t{\n\t\tfizzes ~= fizz;\n\t\tfizz += 11L;\n\t}\n\twhile\
    \ (buzz < n) \n\t{\n\t\tbuzzes ~= buzz;\n\t\tbuzz += 13L;\n\t}\n\tforeach (i;\
    \ fizzes) \n\t{\n\t\tif (any!\"a.contains('7')\"(std.string.format(\"%d\", i)))\n\
    \t\t\tcount++;\n\t}\n\tforeach (i; buzzes) \n\t{\n\t\tif (any!\"a.contains('7')\"\
    (std.string.format(\"%d\", i)))\n\t\t\tcount++;\n\t}\n\treturn count;\n}\nunittest\n\
    {\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n   \
    \ assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L)\
    \ == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) ==\
    \ 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbfuq2r4l.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long count = 0;\n    foreach(i;\
    \ 0 .. n)\n    {\n        if((i % 11 == 0 || i % 13 == 0) && count_digits(i, 7)\
    \ > 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L)\
    \ == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n\
    \    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L)\
    \ == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpemfp4249.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    return div(13, n) * num_times_digit_7_in_divisible_numbers(n)\
    \ + \n    div(11, n) * num_times_digit_7_in_divisible_numbers(n) - \n    div(143,\
    \ n) * num_times_digit_7_in_divisible_numbers(n);\n}\nunittest\n{\n    alias candidate\
    \ = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n    assert(candidate(78L)\
    \ == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L) == 3L);\n\
    \    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) == 192L);\n \
    \   assert(candidate(10000L) == 639L);\n    assert(candidate(100000L) == 8026L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkzjcrtw8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long result = 0L;\n    int\
    \ i = 1;\n    for (; i < n; i++) \n    {\n        if (i % 11 == 0 || i % 13 ==\
    \ 0) \n        {\n            int j = i;\n            for (; j > 0; j /= 10) \n\
    \            {\n                if (j % 10 == 7) \n                {\n       \
    \             result++;\n                }\n            }\n        }\n    }\n\
    \    return result;\n}\n/*\nReturn the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_slice(50L)\n\
    \    0L\n    >>> fizz_buzz_slice(78L)\n    2L\n    >>> fizz_buzz_slice(79L)\n\
    \    3L\n    >>> fizz_buzz_slice(78987L)\n    3L\n*/\nlong fizz_buzz_slice(long\
    \ n) \n{\n    long result = 0L;\n    int i = 1;\n    for (; i < n; i++) \n   \
    \ {\n        if (i % 11 == 0 || i % 13 == 0) \n        {\n            int j =\
    \ 0;\n            string s = to!string(i);\n            for (; j < s.length; j++)\
    \ \n            {\n                if (s[j] == '7') \n                {\n    \
    \                result++;\n                }\n            }\n        }\n    }\n\
    \    return result;\n}\n/*\nReturn the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_slice(50L)\n\
    \    0L\n    >>> fizz_buzz_slice(78L)\n    2L\n    >>> fizz_buzz_slice(79L)\n\
    \    3L\n    >>> fizz_buzz_slice(78987L)\n    3L\n*/\nlong fizz_buzz_regex(long\
    \ n) \n{\n    long result = 0L;\n    int i = 1;\n    for (; i < n; i++) \n   \
    \ {\n        if (i % 11 == 0\nunittest\n{\n    alias candidate = fizz_buzz;\n\n\
    \    assert(candidate(50L) == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L)\
    \ == 3L);\n    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n\
    \    assert(candidate(4000L) == 192L);\n    assert(candidate(10000L) == 639L);\n\
    \    assert(candidate(100000L) == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmghbotr8.d(83): Error: found \''unittest\'' when expecting \'')\''\n/tmp/tmpmghbotr8.d(96):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpmghbotr8.d(96):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmghbotr8.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n  long total = 0;\n  foreach(int\
    \ i; 0 .. n)\n  {\n    if((i % 11 == 0 || i % 13 == 0) && typeof(i).stringof.count(\"\
    7\") > 0)\n    {\n      total += typeof(i).stringof.count(\"7\");\n    }\n  }\n\
    \  return total;\n}\nunittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L)\
    \ == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n\
    \    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L)\
    \ == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp840kxhkc.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long count=0;\n    foreach(long\
    \ i; 0 .. n) \n    {\n        if (i % 11 == 0 || i % 13 == 0) \n        {\n  \
    \          auto s = to!string(i);\n            foreach(char c; s)\n          \
    \  {\n                if (c == '7')\n                {\n                    count++;\n\
    \                }\n            }\n        }\n    }\n    return count;\n}\n/*\n\
    Return a tuple representing the quotient and remainder of n/d.\n   >>> divmod(10L,3L)\n\
    \   (3L,1L)\n   >>> divmod(10L,6L)\n   (1L,4L)\n   >>> divmod(20L,4L)\n   (5L,0L)\n\
    \   >>> divmod(20L,0L)\n   Traceback (most recent call last):\n    ...\n   ZeroDivisionError:\
    \ long division or modulo by zero\nunittest\n{\n    alias candidate = fizz_buzz;\n\
    \n    assert(candidate(50L) == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L)\
    \ == 3L);\n    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n\
    \    assert(candidate(4000L) == 192L);\n    assert(candidate(10000L) == 639L);\n\
    \    assert(candidate(100000L) == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8ez39z2s.d(32): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp8ez39z2s.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long count = 0;\n    long i\
    \ = 0;\n    while (i < n) \n    {\n        i += 11;\n        if (i >= n)\n   \
    \         break;\n        if (i % 13 == 0)\n            ++count;\n        else\n\
    \            count += i.countDigits(7);\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n   \
    \ assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L)\
    \ == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) ==\
    \ 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpozxljxtz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long count = 0;\n    for (long\
    \ i = 7; i < n; i++)\n    {\n        if(i % 11 == 0 || i % 13 == 0)\n        {\n\
    \            foreach(d; i.to!string().toArray)\n            {\n              \
    \  if(d == '7')\n                {\n                    count++;\n           \
    \     }\n            }\n        }\n    }\n    return count;\n}\n// for i in range(1000000):\
    \ fizz_buzz(i)\nunittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L)\
    \ == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n\
    \    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L)\
    \ == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpet7p7fo1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    auto s = 0L;\n    for (auto\
    \ x = 11L; x < n; x+= 11)\n    {\n        if (x % 13 != 0)\n        {\n      \
    \      s += count(to!string(x), '7');\n        }\n    }\n    for (auto x = 13L;\
    \ x < n; x+= 13)\n    {\n        if (x % 11 != 0)\n        {\n            s +=\
    \ count(to!string(x), '7');\n        }\n    }\n    return s;\n}\n/*\nAn array\
    \ is called a holey array if it contains an empty array as one of its elements.\n\
    Write a function that returns True if the input array is a holey array and False\
    \ otherwise.\nExamples:\n    >>> is_holey_array([1,2,[]])\n    True\n    >>> is_holey_array([[]])\n\
    \    True\n    >>> is_holey_array([[1,2]])\n    False\n    >>> is_holey_array([1,2,3])\n\
    \    False\n    \n*/\nunittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L)\
    \ == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n\
    \    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L)\
    \ == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_jf5ksj4.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n\tlong result = 0;\n\t\n\tif(n\
    \ < 7L)\n\t\treturn result;\n\t\t\n\tauto iter = newAllocator!(long)();\n\tforeach(i;\
    \ iter.take(n))\n\t{\n\t\tif(i % 11 == 0 || i % 13 == 0)\n\t\t{\n\t\t\tint number\
    \ = i;\n\t\t\twhile(number != 0)\n\t\t\t{\n\t\t\t\tif(number % 10 == 7)\n\t\t\t\
    \t\tresult++;\n\t\t\t\tnumber /= 10;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n\
    }\nunittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L)\
    \ == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n\
    \    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L)\
    \ == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpycbs5uxz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n\t//Type inference only if return\
    \ type is declared\n\tlong num = 0;\n\tfor(int i = 1; i < n; i++) \n\t{\n\t\t\
    if (i % 11 == 0)\n\t\t{\n\t\t\tnum += 1;\n\t\t}\n\t\telse if (i % 13 == 0)\n\t\
    \t{\n\t\t\tnum += 1;\n\t\t}\n\t}\n\treturn num;\n}\nunittest\n{\n    alias candidate\
    \ = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n    assert(candidate(78L)\
    \ == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L) == 3L);\n\
    \    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) == 192L);\n \
    \   assert(candidate(10000L) == 639L);\n    assert(candidate(100000L) == 8026L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe673pzwq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long count = 0;\n    for (int\
    \ i = 0; i < n; i++)\n    {\n        //We use modulo to check if the number is\
    \ divisible by 11 or 13\n        if (i % 11 == 0 || i % 13 == 0)\n        {\n\
    \            //We convert the number to a string so we can work on it char by\
    \ char \n            string s = cast(string)i;\n            foreach(c; s)\n  \
    \          {\n                //If we encounter a 7 we increment the count\n \
    \               if (c == '7')\n                {\n                    count++;\n\
    \                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n   \
    \ assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L)\
    \ == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) ==\
    \ 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps_nyjteu.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n    long r = 0L;\n    foreach (i;\
    \ 0 .. n)\n        if (i % 11 == 0 || i % 13 == 0)\n            foreach (c; to!string(i))\n\
    \                if (c == '7')\n                    r++;\n    return r;\n}\n/*\n\
    Return a list of pairs of integers, each pair i and j\nsuch that i + j == n and\
    \ i is less than j.\n    >>> get_pairs(4)\n    [ [0, 4], [1, 3] ]\n    >>> get_pairs(2)\n\
    \    [ [0, 2] ]\n    >>> get_pairs(3)\n    []\n*/\nauto get_pairs(int n) \n  \
    \  auto a = [];\n    foreach (i; 0 .. n + 1)\n        foreach (j; i .. n + 1)\n\
    \            if (i + j == n)\n                a ~= tuple(i, j);\n    return a;\n\
    }\n/*\nGiven a string which contains a sequence of characters representing a number,\
    \ return the integer corresponding to the string.\n    >>> to_int(\"0\")\n   \
    \ 0\n    >>> to_int(\"10\")\n    10\n    >>> to_int(\"-12\")\n    -12\n    >>>\
    \ to_int(\"123\")\n    123\n*/\nunittest\n{\n    alias candidate = fizz_buzz;\n\
    \n    assert(candidate(50L) == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L)\
    \ == 3L);\n    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n\
    \    assert(candidate(4000L) == 192L);\n    assert(candidate(10000L) == 639L);\n\
    \    assert(candidate(100000L) == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnv7wsf7o.d(14): Error: semicolon expected following function
    declaration\n/tmp/tmpnv7wsf7o.d(15): Error: Declaration expected, not \''foreach\''\n/tmp/tmpnv7wsf7o.d(15):
    Error: Declaration expected, not \''0\''\n/tmp/tmpnv7wsf7o.d(17): Error: function
    declaration without return type. (Note that constructors are always named \''this\'')\n/tmp/tmpnv7wsf7o.d(17):
    Error: no identifier for declarator to!string(i)\n/tmp/tmpnv7wsf7o.d(17): Error:
    semicolon expected following function declaration\n/tmp/tmpnv7wsf7o.d(17): Error:
    Declaration expected, not \'')\''\n/tmp/tmpnv7wsf7o.d(20): Error: Declaration
    expected, not \''return\''\n/tmp/tmpnv7wsf7o.d(21): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnv7wsf7o.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    \n    \n    \n    \n}\nunittest\n\
    {\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n   \
    \ assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L)\
    \ == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) ==\
    \ 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4gwkkt3z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    /* Compute the maximum number\
    \ of occurrences of\n       7 in the decimal representation of a number\n    \
    \   less than n which is divisible by 11 or 13.\n      \n       Strategy: Traverse\
    \ the decimal representation of all numbers between\n       11 and n looking for\
    \ the digit 7. This is done by a simple divmod call.\n      \n       Note that\
    \ the digit 7 can appear only in the units position of a number\n       which\
    \ is divisible by 11 (as any position mod 11 is 1 - 10) and in the\n       10's\
    \ and units position of a number which is divisible by 13.\n      \n       The\
    \ number of occurrences of the digit 7 is then the number of numbers\n       divisible\
    \ by 11 plus twice the number of numbers divisible by 13.\n    */\n    enum n_occurrences\
    \ = mixin(stringOf!((n / 11) + 2 * (n / 13)));\n    return n_occurrences.count!(t\
    \ => t == '7');\n}\n/*\nReturn 1 if n contains the digit 7, otherwise 0.\n   \
    \ >>> has_digit7(0L)\n    0L\n    >>> has_digit7(7L)\n    1L\n    >>> has_digit7(78L)\n\
    \    1L\n    >>> has_digit7(79L)\n    1L\n*/\nlong has_digit7(long n) \n{\n  \
    \  /* Compute whether n contains the digit 7.\n       This is done by a simple\
    \ divmod call.\n    */\n    long d = n;\n    while (d > 0) \n    {\n        if\
    \ (d % 10 == 7) \n        {\n            return 1;\n        }\n        d /= 10;\n\
    \    }\n    return 0;\n}\n/*\nReturn the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_2(50L)\n\
    \    0L\n    >>> fizz_buzz_2(78L)\n    2L\n    >>> fizz_buzz_2(79L)\n    3L\n\
    \    \n*/\nlong fizz_buzz_2(long n) \n{\n    /* Compute the maximum number of\
    \ occurrences of\n       7 in the decimal representation\nunittest\n{\n    alias\
    \ candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n    assert(candidate(78L)\
    \ == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L) == 3L);\n\
    \    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) == 192L);\n \
    \   assert(candidate(10000L) == 639L);\n    assert(candidate(100000L) == 8026L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt1698xmv.d(71): Error: unterminated /* */ comment\n/tmp/tmpt1698xmv.d(86):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt1698xmv.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n    in(n >= 0L)\n    out(result >=\
    \ 0L)\n{\n    long result = 0L;\n    foreach (i; 0L .. n)\n        if (i % 11L\
    \ == 0L || i % 13L == 0L)\n            foreach (j; 0L .. i)\n                if\
    \ (j == 7L)\n                    result++;\n    return result;\n}\n/*\n    Prompt\
    \ the user for a number between 0 and 999.\n    Print out the English pronunciation\
    \ of that number.\n    >>> pronounce(42L)\n    40, 2\n    forty-two\n    >>> pronounce(0L)\n\
    \    0, 0\n    zero\n    >>> pronounce(10000L)\n    Traceback (most recent call\
    \ last):\n    ...\n    ValueError: n must be between 0 and 999\n*/\nunittest\n\
    {\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n   \
    \ assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L)\
    \ == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) ==\
    \ 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmsdzqsb6.d(14): Error: statement expected to be { }, not (\n/tmp/tmpmsdzqsb6.d(15):
    Error: found \''out\'' when expecting \'';\'' following statement\n/tmp/tmpmsdzqsb6.d(15):
    Error: Declaration expected, not \''(\''\n/tmp/tmpmsdzqsb6.d(18): Error: Declaration
    expected, not \''foreach\''\n/tmp/tmpmsdzqsb6.d(18): Error: Declaration expected,
    not \''0L\''\n/tmp/tmpmsdzqsb6.d(20): Error: Declaration expected, not \''0L\''\n/tmp/tmpmsdzqsb6.d(23):
    Error: Declaration expected, not \''return\''\n/tmp/tmpmsdzqsb6.d(24): Error:
    unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmsdzqsb6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long i;\n    long total = 0;\n\
    \    long d;\n    long digit;\n    for (i = 0; i < n; i++) \n    {\n        if\
    \ (i % 11 == 0 || i % 13 == 0) \n        {\n            for (d = 0; d < 2; d++)\
    \ \n            {\n                digit = (i / pow(10, d)) % 10;\n          \
    \      if (digit == 7) \n                {\n                    total++;\n   \
    \             }\n            }\n        }\n    }\n    return total;\n}\nunittest\n\
    {\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n   \
    \ assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L)\
    \ == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) ==\
    \ 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvo2b3k5e.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n\tlong i, numSeven = 0;\n\tfor\
    \ (i = 1; i < n; i++)\n\t{\n\t\tif ((i % 11 == 0) || (i % 13 == 0))\n\t\t{\n\t\
    \t\tlong tmp = i;\n\t\t\twhile (tmp > 0)\n\t\t\t{\n\t\t\t\tnumSeven += (tmp %\
    \ 10 == 7) ? 1 : 0;\n\t\t\t\ttmp /= 10;\n\t\t\t}\n\t\t}\n\t}\n\treturn numSeven;\n\
    }\nunittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L)\
    \ == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n\
    \    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L)\
    \ == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl7q7cqs3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long result = 0L;\n    for\
    \ (long i = 7L; i < n; i += 7L)\n    {\n        if (i % 11L == 0L || i % 13L ==\
    \ 0L) \n        {\n            ++result;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L)\
    \ == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n\
    \    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L)\
    \ == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmply92ssmk.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long result = 0L;\n    long\
    \ i = 0L;\n    for (i = 0L; i < n; i++) \n    {\n        if (i % 11L == 0L ||\
    \ i % 13L == 0L) \n        {\n            if (i % 10L == 7L) \n            {\n\
    \                result += 1L;\n            }\n            else if (i / 10L %\
    \ 10L == 7L) \n            {\n                result += 1L;\n            }\n \
    \       }\n    }\n    return result;\n}\n/*\nReturn the number of times the digit\
    \ 7 appears in integers less than n which are divisible by 11 or 13.\n    >>>\
    \ fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz2(long n) \n{\n    long result = 0L;\n    long\
    \ i = 0L;\n    for (i = 0L; i < n; i++) \n    {\n        if (i % 11L == 0L ||\
    \ i % 13L == 0L) \n        {\n            if (i % 10L == 7L) \n            {\n\
    \                result += 1L;\n            }\n            else if (i / 10L %\
    \ 10L == 7L) \n            {\n                result += 1L;\n            }\n \
    \       }\n    }\n    return result;\n}\n/*\nReturn the number of times the digit\
    \ 7 appears in integers less than n which are divisible by 11 or 13.\n    >>>\
    \ fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz3(long n) \n{\n    long result = 0L;\n    long\
    \ i = 0L;\n    for (i = 0L; i < n; i++) \n    {\n        if (i % 11L == 0L ||\
    \ i % 13L == 0L) \n        {\n            if (i % 10L ==\nunittest\n{\n    alias\
    \ candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n    assert(candidate(78L)\
    \ == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L) == 3L);\n\
    \    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) == 192L);\n \
    \   assert(candidate(10000L) == 639L);\n    assert(candidate(100000L) == 8026L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxx21_uil.d(82): Error: expression expected, not \''unittest\''\n/tmp/tmpxx21_uil.d(83):
    Error: found \''{\'' when expecting \'')\''\n/tmp/tmpxx21_uil.d(95): Error: found
    \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpxx21_uil.d(95):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxx21_uil.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    auto fizz = [](long x) {return\
    \ (x % 11 == 0) || (x % 13 == 0);};\n    auto buzz = [](long x) {return x % 7\
    \ == 0;};\n    auto ans = filter!(fizz)(iota(1L, n));\n    return ans.count!(buzz).length;\n\
    }\nunittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L)\
    \ == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n\
    \    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L)\
    \ == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpprtsvadv.d(15): Error: found \''x\'' when expecting \''.\''
    following long\n/tmp/tmpprtsvadv.d(15): Error: found \'')\'' when expecting identifier
    following \''long.\''\n/tmp/tmpprtsvadv.d(15): Error: found \''{\'' when expecting
    \'',\''\n/tmp/tmpprtsvadv.d(15): Error: expression expected, not \''return\''\n/tmp/tmpprtsvadv.d(15):
    Error: found \'';\'' when expecting \'',\''\n/tmp/tmpprtsvadv.d(15): Error: expression
    expected, not \''}\''\n/tmp/tmpprtsvadv.d(15): Error: found \'';\'' when expecting
    \'',\''\n/tmp/tmpprtsvadv.d(16): Error: expression expected, not \''auto\''\n/tmp/tmpprtsvadv.d(16):
    Error: found \''buzz\'' when expecting \'',\''\n/tmp/tmpprtsvadv.d(16): Error:
    expression expected, not \''=\''\n/tmp/tmpprtsvadv.d(16): Error: found \''x\''
    when expecting \''.\'' following long\n/tmp/tmpprtsvadv.d(16): Error: found \'')\''
    when expecting identifier following \''long.\''\n/tmp/tmpprtsvadv.d(16): Error:
    found \''{\'' when expecting \'',\''\n/tmp/tmpprtsvadv.d(16): Error: expression
    expected, not \''return\''\n/tmp/tmpprtsvadv.d(16): Error: found \''x\'' when
    expecting \'',\''\n/tmp/tmpprtsvadv.d(16): Error: expression expected, not \''%\''\n/tmp/tmpprtsvadv.d(16):
    Error: found \''7\'' when expecting \'',\''\n/tmp/tmpprtsvadv.d(16): Error: expression
    expected, not \''==\''\n/tmp/tmpprtsvadv.d(16): Error: found \''0\'' when expecting
    \'',\''\n/tmp/tmpprtsvadv.d(16): Error: expression expected, not \'';\''\n/tmp/tmpprtsvadv.d(16):
    Error: found \''}\'' when expecting \'',\''\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpprtsvadv.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n\treturn sum(map!((a) => a[0])([iota(n\
    \ / 11L), iota(n / 13L)]));\n}\nunittest\n{\n    alias candidate = fizz_buzz;\n\
    \n    assert(candidate(50L) == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L)\
    \ == 3L);\n    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n\
    \    assert(candidate(4000L) == 192L);\n    assert(candidate(10000L) == 639L);\n\
    \    assert(candidate(100000L) == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0fo786d9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    if (n < 14)\n        return\
    \ 0;\n    long count = 0;\n    for (long i = 7; i < n; i += 7)\n    {\n      \
    \  if (i % 11 == 0 || i % 13 == 0)\n            count++;\n    }\n    return count;\n\
    }\n/*\nReturn the number of times the digit 7 appears in n!\n    >>> sevens_factorial(0L)\n\
    \    0L\n    >>> sevens_factorial(1L)\n    0L\n    >>> sevens_factorial(2L)\n\
    \    0L\n    >>> sevens_factorial(3L)\n    0L\n    >>> sevens_factorial(4L)\n\
    \    0L\n    >>> sevens_factorial(5L)\n    1L\n    >>> sevens_factorial(6L)\n\
    \    1L\n    >>> sevens_factorial(7L)\n    1L\n    >>> sevens_factorial(8L)\n\
    \    1L\n    >>> sevens_factorial(9L)\n    1L\n    >>> sevens_factorial(10L)\n\
    \    2L\n    >>> sevens_factorial(11L)\n    2L\n    >>> sevens_factorial(12L)\n\
    \    2L\n    >>> sevens_factorial(13L)\n    2L\n    >>> sevens_factorial(14L)\n\
    \    2L\n    >>> sevens_factorial(15L)\n    3L\n    >>> sevens_factorial(16L)\n\
    \    3L\n    >>> sevens_factorial(17L)\n    3L\n    >>> sevens_factorial(18L)\n\
    \    3L\n    >>> sevens_factorial(19L)\n    3L\n    >>> sevens_factorial(20L)\n\
    \    4L\n    >>> sevens_factorial(21L)\n    4L\n    >>> sevens_factorial(22L)\n\
    \    4L\n    >>> sevens_factorial(23L)\n    4L\n    >>> sevens_factorial(24L)\n\
    \    4L\n    >>> sevens_factorial(25L)\n    5L\n    >>> sevens_factorial(\nunittest\n\
    {\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n   \
    \ assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L)\
    \ == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) ==\
    \ 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5cy1mxel.d(25): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp5cy1mxel.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n\tif (n == 0L)\n\t{\n\t\treturn\
    \ 0L;\n\t}\n\tif (n < 0L)\n\t{\n\t\treturn -fizz_buzz(-n);\n\t}\n\tif (n <= 7L)\n\
    \t{\n\t\treturn 0L;\n\t}\n\tlong c0 = 0L;\n\tlong c1 = 0L;\n\tlong num_7s = 0L;\n\
    \tint exp = 0;\n\tint digit = 0;\n\tlong div = divider(n);\n\tauto reverse = false;\n\
    \tint check = (int)modulo(div, 11L);\n\tif (check != 0)\n\t{\n\t\tcheck = (int)modulo(div,\
    \ 13L);\n\t\tif (check != 0)\n\t\t{\n\t\t\treturn 0L;\n\t\t}\n\t}\n\tint len =\
    \ 0;\n\tlong tmp = n;\n\tif (tmp == div)\n\t{\n\t\tif (modulo(div, 10L) == 7L)\n\
    \t\t{\n\t\t\treturn 1L;\n\t\t}\n\t\treturn 0L;\n\t}\n\tlong last_digit = modulo(tmp,\
    \ 10L);\n\tlong tmp2 = div;\n\tint len2 = 0;\n\twhile (tmp2 > 0L)\n\t{\n\t\t++len2;\n\
    \t\ttmp2 /= 10L;\n\t}\n\tint size = len2;\n\tlong first_digit = 0L;\n\tlong last_number\
    \ = 0L;\n\tlong first_number = 0L;\n\tlong last_digit2 = 0L;\n\tlong tmp_1 = 0L;\n\
    \tlong tmp_2 = 0L;\n\tlong N = 0L;\n\tlong M = 0L;\n\tlong N1 = 0L;\n\tlong M1\
    \ = 0L;\n\tlong div1 = 0L;\n\tlong div2 = 0L;\n\tif (size == 1)\n\t{\n\t\tif (last_digit\
    \ == 7L)\n\t\t{\n\t\t\treturn 1L;\n\t\t}\n\t\treturn 0L;\n\t}\n\tfor (int\nunittest\n\
    {\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n   \
    \ assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L)\
    \ == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) ==\
    \ 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcuvsn1al.d(34): Error: C style cast illegal, use cast(int)modulo(div,
    11L)\n/tmp/tmpcuvsn1al.d(37): Error: C style cast illegal, use cast(int)modulo(div,
    13L)\n/tmp/tmpcuvsn1al.d(83): Error: no identifier for declarator int\n/tmp/tmpcuvsn1al.d(83):
    Error: expression expected, not \''unittest\''\n/tmp/tmpcuvsn1al.d(84): Error:
    found \''{\'' when expecting \'';\'' following for condition\n/tmp/tmpcuvsn1al.d(85):
    Error: expression expected, not \''alias\''\n/tmp/tmpcuvsn1al.d(85): Error: found
    \''candidate\'' when expecting \'')\''\n/tmp/tmpcuvsn1al.d(85): Error: found \''=\''
    instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcuvsn1al.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long sevens = 0L;\n    long\
    \ tmp = n;\n    // loop through all digits of n\n    do \n    {\n        // is\
    \ it a 7?\n        if (tmp % 10L == 7L)\n            ++sevens;\n        tmp /=\
    \ 10L;\n    } while (tmp > 0L);\n    return sevens;\n}\nunittest\n{\n    alias\
    \ candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n    assert(candidate(78L)\
    \ == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L) == 3L);\n\
    \    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) == 192L);\n \
    \   assert(candidate(10000L) == 639L);\n    assert(candidate(100000L) == 8026L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1erbmakv.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    return (typeof(n) == long)?\
    \ count_7(n): 0;\n}\nunittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L)\
    \ == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n\
    \    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L)\
    \ == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkegqnr38.d(15): Error: found \'')\'' when expecting \''.\''
    following long\n/tmp/tmpkegqnr38.d(15): Error: found \''?\'' when expecting identifier
    following \''long.\''\n/tmp/tmpkegqnr38.d(15): Error: found \''count_7\'' when
    expecting \'')\''\n/tmp/tmpkegqnr38.d(15): Error: found \'':\'' when expecting
    \'';\'' following return statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpkegqnr38.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long count=0;\n    for(long\
    \ i=0;i<n;i++)\n    {\n        if(i%7==0)\n        {\n            if(i%11==0)\n\
    \            {\n                if(i%13==0)\n                {\n             \
    \       count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L)\
    \ == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n\
    \    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L)\
    \ == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp389i8qpu.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long i = 1;\n    long count\
    \ = 0;\n    while (i < n) {\n        if (i % 11 == 0 || i % 13 == 0) {\n     \
    \       if (i % 10 == 7) {\n                count++;\n            }\n        \
    \    else if (i % 100 == 7) {\n                count++;\n            }\n     \
    \       else if (i % 1000 == 7) {\n                count++;\n            }\n \
    \       }\n        i++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n    assert(candidate(78L)\
    \ == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L) == 3L);\n\
    \    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) == 192L);\n \
    \   assert(candidate(10000L) == 639L);\n    assert(candidate(100000L) == 8026L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf8bf3xe1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    assert(n > 0);\n    return\
    \ count(iota(n).filter!(n => n % 11 == 0 || n % 13 == 0).map!(num => num.to!string).filter!(str\
    \ => str.countOf('7') > 0));\n}\nunittest\n{\n    alias candidate = fizz_buzz;\n\
    \n    assert(candidate(50L) == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L)\
    \ == 3L);\n    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n\
    \    assert(candidate(4000L) == 192L);\n    assert(candidate(10000L) == 639L);\n\
    \    assert(candidate(100000L) == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps5s4n21r.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n  long count = 0;\n  foreach(immutable\
    \ curr; iota(n))\n  {\n    if(curr % 11 == 0 || curr % 13 == 0)\n    {\n     \
    \ import std.conv : to;\n      auto temp = to!string(curr);\n      import std.algorithm.iteration\
    \ : filter, map;\n      count += temp.filter!(a => a == '7').map!(a => to!int(a)).sum();\n\
    \    }\n  }\n  return count;\n}\n/*\nReturn the number of times the digit 7 appears\
    \ in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_2(50L)\n\
    \    0L\n    >>> fizz_buzz_2(78L)\n    2L\n    >>> fizz_buzz_2(79L)\n    3L\n\
    \    \n*/\nlong fizz_buzz_2(long n) \n{\n  long count = 0;\n  foreach(immutable\
    \ curr; iota(n))\n  {\n    if(curr % 11 == 0 || curr % 13 == 0)\n    {\n     \
    \ import std.conv : to;\n      auto temp = to!string(curr);\n      import std.algorithm.iteration\
    \ : filter, map;\n      import std.range : retro;\n      count += temp.retro.filter!(a\
    \ => a == '7').map!(a => to!int(a)).sum();\n    }\n  }\n  return count;\n}\n/*\n\
    Return the number of times the digit 7 appears in integers less than n which are\
    \ divisible by 11 or 13.\n    >>> fizz_buzz_3(50L)\n    0L\n    >>> fizz_buzz_3(78L)\n\
    \    2L\n    >>> fizz_buzz_3(79L)\n    3L\n    \n*/\nlong fizz_buzz_3(long n)\
    \ \n{\n  long count = 0;\n  foreach(immutable curr; iota(n))\n  {\n    if(curr\
    \ % 11 == 0 || curr % 13 == 0)\n    {\n      import std\nunittest\n{\n    alias\
    \ candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n    assert(candidate(78L)\
    \ == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L) == 3L);\n\
    \    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) == 192L);\n \
    \   assert(candidate(10000L) == 639L);\n    assert(candidate(100000L) == 8026L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr4lmpflv.d(72): Error: \'';\'' expected\n/tmp/tmpr4lmpflv.d(85):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpr4lmpflv.d(85):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpr4lmpflv.d(85):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr4lmpflv.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long m = 1L;\n    long count\
    \ = 0L;\n    while (m <= n) \n    {\n        if (m % 11L == 0L || m % 13L == 0L)\
    \ \n        {\n            long div = 10L;\n            while (m / div > 0L) \n\
    \            {\n                long dig = m % div;\n                if (dig ==\
    \ 7L) \n                {\n                    count += 1L;\n                }\n\
    \                div *= 10L;\n            }\n        }\n        m += 1L;\n   \
    \ }\n    return count;\n}\n/*\n    >>> square_root(4L)\n    2L\n    >>> square_root(81L)\n\
    \    9L\n    >>> square_root(88L)\n    0L\n*/\nlong square_root(long n)\n{\n \
    \   long m = 1L;\n    while (m * m < n) \n    {\n        m += 1L;\n    }\n   \
    \ if (m * m == n) \n    {\n        return m;\n    }\n    else \n    {\n      \
    \  return 0L;\n    }\n}\n/*\n    >>> sum_numbers_in_string(\"hello2world9\", 0L)\n\
    \    11L\n    >>> sum_numbers_in_string(\"hello2world9\", 1L)\n    10L\n    >>>\
    \ sum_numbers_in_string(\"hello2world9\", 2L)\n    9L\n    >>> sum_numbers_in_string(\"\
    hello2world9\", 3L)\n    2L\n    >>> sum_numbers_in_string(\"hello2world9\", 4L)\n\
    \    0L\n    >>> sum_numbers_in_string(\"hello2world9\", 5L)\n    0L\n    >>>\
    \ sum_numbers_in_string(\"hello2world9\", 6L)\n    0L\n    >>> sum_numbers_in_string(\"\
    hello2world9\", 7L)\n    0L\n    >>> sum_numbers_in_string(\"hello2world9\", 8L)\n\
    \    0L\n    >>> sum_numbers_in_string(\"hello2world9\", 9L)\n    0L\n\nunittest\n\
    {\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n   \
    \ assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L)\
    \ == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) ==\
    \ 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3h552t5e.d(60): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp3h552t5e.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long cnt = 0L;\n    foreach\
    \ (int x; iota(n))\n    {\n        if (x % 11 || x % 13)\n            continue;\n\
    \        cnt += x.to!string.count('7');\n    }\n    return cnt;\n}\nunittest\n\
    {\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n   \
    \ assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L)\
    \ == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) ==\
    \ 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyj729jox.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    int result = 0;\n    for (int\
    \ i = 11; i < n; i++) \n    {\n        if (i % 11 == 0) \n        {\n        \
    \    string s = to!string(i);\n            if (s.canFind(\"7\")) \n          \
    \  {\n                result++;\n            }\n        } \n        else if (i\
    \ % 13 == 0) \n        {\n            string s = to!string(i);\n            if\
    \ (s.canFind(\"7\")) \n            {\n                result++;\n            }\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fizz_buzz;\n\
    \n    assert(candidate(50L) == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L)\
    \ == 3L);\n    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n\
    \    assert(candidate(4000L) == 192L);\n    assert(candidate(10000L) == 639L);\n\
    \    assert(candidate(100000L) == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqz7k_1_w.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    int res = 0;\n    for (int\
    \ i = 11; i < n; i += 11)\n    {\n        if (i%13 == 0)\n        {\n        \
    \    foreach (c; to!string(i))\n            {\n                if (c == '7')\n\
    \                    res++;\n            }\n        }\n    }\n    return res;\n\
    }\n/*\nGiven two integers a and b, return their tens digit.\n    >>> get_tens(12L,\
    \ 33L)\n    3L\n    >>> get_tens(71L, 100L)\n    7L\n    >>> get_tens(98L, 11L)\n\
    \    9L\n*/\nlong get_tens(long a, long b)\n{\n    string s1 = to!string(a);\n\
    \    string s2 = to!string(b);\n    string res = \"\";\n    if (s1.length >= 2)\n\
    \        res ~= s1[$-2];\n    if (s2.length >= 2)\n        res ~= s2[$-2];\n \
    \   return to!long(res);\n}\n/*\nGiven two integers a and b, return their tens\
    \ digit.\n    >>> get_tens(12L, 33L)\n    3L\n    >>> get_tens(71L, 100L)\n  \
    \  7L\n    >>> get_tens(98L, 11L)\n    9L\n*/\nlong get_tens2(long a, long b)\n\
    {\n    string s1 = format(\"%d\", a);\n    string s2 = format(\"%d\", b);\n  \
    \  string res = \"\";\n    if (s1.length >= 2)\n        res ~= s1[$-2];\n    if\
    \ (s2.length >= 2)\n        res ~= s2[$-2];\n    return to!long(res);\n}\n/*\n\
    Return the sum of the squares of the digits of the integer n.\n    >>> sum_of_squares(1L)\n\
    \    1L\n    >>> sum_of_squares(9L)\n    81L\n    >>> sum_of_squares(11L)\n  \
    \  2L\n    >>> sum_of\nunittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L)\
    \ == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n\
    \    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L)\
    \ == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8dnbfrw0.d(69): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp8dnbfrw0.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long counter = 0;\n    immutable\
    \ std.string s = to!string(n);\n    foreach(char c; s) {\n        if(c == '7')\
    \ {\n            counter++;\n        }\n    }\n    return counter;\n}\nunittest\n\
    {\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n   \
    \ assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L)\
    \ == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) ==\
    \ 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0ftifmv_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long count = 0;\n    foreach(i;\
    \ 1 .. n) \n    {\n        string s = to!string(i);\n        if(i % 11 == 0 ||\
    \ i % 13 == 0) \n        {\n            foreach(c; s) \n            {\n      \
    \          if(c == '7') \n                {\n                    count += 1;\n\
    \                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n   \
    \ assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L)\
    \ == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) ==\
    \ 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4l19ot0h.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long result = 0L;\n    foreach(i;\
    \ 0L .. n)\n    {\n        if(i % 11 == 0 || i % 13 == 0)\n        {\n       \
    \     foreach(c; to!string(i))\n            {\n                if(c == '7')\n\
    \                {\n                    result++;\n                }\n       \
    \     }\n        }\n    }\n    return result;\n}\n/*\nYou're given an array. The\
    \ function has to return a new array of all its odd elements.\n    >>> odd([1,\
    \ 2, 3, 4, 5])\n    [1, 3, 5]\n    >>> odd([2, 4, 6, 8, 10])\n    []\n    >>>\
    \ odd([1, 3, 5, 7, 9])\n    [1, 3, 5, 7, 9]\n*/\nunittest\n{\n    alias candidate\
    \ = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n    assert(candidate(78L)\
    \ == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L) == 3L);\n\
    \    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) == 192L);\n \
    \   assert(candidate(10000L) == 639L);\n    assert(candidate(100000L) == 8026L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe84szjad.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n\tint cnt = 0;\n\tfor (int i =\
    \ 0; i < n; i++) {\n\t\tstring s = to!string(i);\n\t\tif (s.count('7') > 0 &&\
    \ ((i % 11 == 0) || (i % 13 == 0)))\n\t\t\tcnt++;\n\t}\n\treturn cnt;\n}\n/*\n\
    Return a tuple in which each element represents the number of times a given letter\n\
    appears in a string.  The result is sorted from most-frequent to least-frequent.\n\
    unittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L) ==\
    \ 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n\
    \    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L)\
    \ == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmposcxzgw1.d(23): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmposcxzgw1.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    if (n<=0) \n        return\
    \ 0;\n    return count(iota(n).map!(to!string).filter!((s) => s.canFind(\"7\"\
    )), (s) => true);\n}\nunittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L)\
    \ == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n\
    \    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L)\
    \ == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp07ek_x9y.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n\tbool isPrime = false;\n\tif (n\
    \ == 1 || n == 0) return 0;\n\telse if (n == 2) isPrime = true;\n\telse if (n\
    \ % 2 == 0) isPrime = false;\n\telse\n\t{\n\t\tfor (long i = 3; i * i <= n; i\
    \ += 2)\n\t\t{\n\t\t\tif (n % i == 0)\n\t\t\t{\n\t\t\t\tisPrime = false;\n\t\t\
    \t\tbreak;\n\t\t\t}\n\t\t}\n\t\tisPrime = true;\n\t}\n\tif (isPrime) return (n\
    \ - 2) / 2;\n\telse return 0;\n\t/*\n    return 0;\n    */\n}\nunittest\n{\n \
    \   alias candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n    assert(candidate(78L)\
    \ == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L) == 3L);\n\
    \    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) == 192L);\n \
    \   assert(candidate(10000L) == 639L);\n    assert(candidate(100000L) == 8026L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpowrjnodd.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n  const int divisors[] = [11, 13];\n\
    \  long result = 0;\n  foreach (divisor; divisors) \n  {\n    for (int i = divisor;\
    \ i < n; i += divisor) \n    {\n      result += count(to!string(i), '7');\n  \
    \  }\n  }\n  return result;\n}\n/*\nunittest\n{\n    alias candidate = fizz_buzz;\n\
    \n    assert(candidate(50L) == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L)\
    \ == 3L);\n    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n\
    \    assert(candidate(4000L) == 192L);\n    assert(candidate(10000L) == 639L);\n\
    \    assert(candidate(100000L) == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjdt2yuum.d(26): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpjdt2yuum.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    return n <= 7 ? 0 : fizz_buzz(n\
    \ - 11) + (n % 11 == 0 || n % 13 == 0 ? 1 : 0) + fizz_buzz(n - 13) + (n % 11 ==\
    \ 0 || n % 13 == 0 ? 1 : 0);\n}\nunittest\n{\n    alias candidate = fizz_buzz;\n\
    \n    assert(candidate(50L) == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L)\
    \ == 3L);\n    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n\
    \    assert(candidate(4000L) == 192L);\n    assert(candidate(10000L) == 639L);\n\
    \    assert(candidate(100000L) == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp__la1th_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long count = 0;\n    foreach(i;\
    \ 0 .. n + 1)\n    {\n        if(i % 11 == 0 || i % 13 == 0)\n        {\n    \
    \        int x = i;\n            while(x > 0)\n            {\n               \
    \ count += x % 10 == 7 ? 1 : 0;\n                x /= 10;\n            }\n   \
    \     }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = fizz_buzz;\n\
    \n    assert(candidate(50L) == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L)\
    \ == 3L);\n    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n\
    \    assert(candidate(4000L) == 192L);\n    assert(candidate(10000L) == 639L);\n\
    \    assert(candidate(100000L) == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5g9fe7r2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n\tif (n < 0)\n\t\treturn 0;\n\t\
    long count = 0;\n\tbool flag = false;\n\tfor (long i = 1; i < n; i++)\n\t{\n\t\
    \tif (i % 11 == 0)\n\t\t{\n\t\t\tflag = true;\n\t\t}\n\t\telse if (i % 13 == 0)\n\
    \t\t{\n\t\t\tflag = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tflag = false;\n\t\t}\n\
    \t\tif (flag)\n\t\t{\n\t\t\tauto s = to!string(i);\n\t\t\tint j = 0;\n\t\t\twhile\
    \ (j < s.length)\n\t\t\t{\n\t\t\t\tif (s[j] == '7')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\
    \t\t\t\t}\n\t\t\t\tj++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\n/*\nA simple\
    \ puzzle that adds a twist to the classic game of \"Rock, Paper, Scissors\". \n\
    Return the number of three-element sequences of numbers in A that satisfy the\
    \ following criteria:\nunittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L)\
    \ == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n\
    \    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L)\
    \ == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwulk8fau.d(49): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpwulk8fau.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    return 0L;\n}\nunittest\n{\n\
    \    alias candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n    assert(candidate(78L)\
    \ == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L) == 3L);\n\
    \    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) == 192L);\n \
    \   assert(candidate(10000L) == 639L);\n    assert(candidate(100000L) == 8026L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwn9jwufa.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    assert(n > 0);\n    long result\
    \ = 0;\n    foreach(i; iota(n)) \n    {\n        int m = i % 11;\n        if ((m\
    \ == 0) || (m == 10)) \n        {\n            result += (i / 10) + 1;\n     \
    \   }\n        else \n        {\n            m = i % 13;\n            if ((m ==\
    \ 0) || (m == 12)) \n            {\n                result += (i / 10) + 1;\n\
    \            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n    assert(candidate(78L)\
    \ == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L) == 3L);\n\
    \    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) == 192L);\n \
    \   assert(candidate(10000L) == 639L);\n    assert(candidate(100000L) == 8026L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjed8r7cl.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long count = 0;\n    foreach(j;\
    \ 0 .. n) \n    {\n        if(((j % 11 == 0 || j % 13 == 0) && !(j % 11 == 0 &&\
    \ j % 13 == 0)) && sevens(j) > 0) \n        {\n            count++;\n        }\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = fizz_buzz;\n\n\
    \    assert(candidate(50L) == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L)\
    \ == 3L);\n    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n\
    \    assert(candidate(4000L) == 192L);\n    assert(candidate(10000L) == 639L);\n\
    \    assert(candidate(100000L) == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyfwpdc7j.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n  long res = 0;\n  foreach(immutable\
    \ long i; 0..n)\n  {\n    if(i % 11 == 0 || i % 13 == 0)\n    {\n      immutable\
    \ long j = i;\n      while(j)\n      {\n        if(j % 10 == 7)\n        {\n \
    \         res += 1;\n        }\n        j /= 10;\n      }\n    }\n  }\n  return\
    \ res;\n}\nunittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L)\
    \ == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n\
    \    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L)\
    \ == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprmo7laby.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long s = 0;\n    if(n > 0)\n\
    \    {\n        auto i = 11;\n        while(i < n)\n        {\n            while(!(i\
    \ % 11 || i % 13))\n            {\n                if(std.string.canFind(i.to!string(),\
    \ \"7\"))\n                    s++;\n                i++;\n            }\n   \
    \         i++;\n        }\n    }\n    return s;\n}\nunittest\n{\n    alias candidate\
    \ = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n    assert(candidate(78L)\
    \ == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L) == 3L);\n\
    \    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) == 192L);\n \
    \   assert(candidate(10000L) == 639L);\n    assert(candidate(100000L) == 8026L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps51xss8m.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n\tstatic immutable int[string]\
    \ fizzbuzz = [\"\" : 0, \"fizz\" : 1, \"buzz\" : 2, \"fizzbuzz\" : 3];\n\talias\
    \ div_tuple = typeof(div(1,2));\n\tauto fizzbuzzpred = [&](div_tuple t) { return\
    \ (t.rem == 0) || (t.rem == 7); };\n\tauto fizzer = [&](div_tuple t) { return\
    \ (t.rem == 0) || (t.rem == 3); };\n\tauto buzzer = [&](div_tuple t) { return\
    \ (t.rem == 0) || (t.rem == 5); };\n\t\n\tauto f = iota(1L, n + 1L).map!(div!(11L)).filter!(fizzbuzzpred).length;\n\
    \tauto g = iota(1L, n + 1L).map!(div!(13L)).filter!(fizzbuzzpred).length;\n\t\
    auto h = iota(1L, n + 1L).map!(div!(39L)).filter!(fizzbuzzpred).length;\n\treturn\
    \ f + g - h;\n}\nunittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L)\
    \ == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n\
    \    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L)\
    \ == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_ch2j5yi.d(17): Error: expression expected, not \'']\''\n/tmp/tmp_ch2j5yi.d(17):
    Error: found \''t\'' when expecting \'',\''\n/tmp/tmp_ch2j5yi.d(17): Error: found
    \''{\'' when expecting \'',\''\n/tmp/tmp_ch2j5yi.d(17): Error: expression expected,
    not \''return\''\n/tmp/tmp_ch2j5yi.d(17): Error: found \'';\'' when expecting
    \'',\''\n/tmp/tmp_ch2j5yi.d(17): Error: expression expected, not \''}\''\n/tmp/tmp_ch2j5yi.d(17):
    Error: found \'';\'' when expecting \'',\''\n/tmp/tmp_ch2j5yi.d(18): Error: expression
    expected, not \''auto\''\n/tmp/tmp_ch2j5yi.d(18): Error: found \''fizzer\'' when
    expecting \'',\''\n/tmp/tmp_ch2j5yi.d(18): Error: expression expected, not \''=\''\n/tmp/tmp_ch2j5yi.d(18):
    Error: expression expected, not \'']\''\n/tmp/tmp_ch2j5yi.d(18): Error: found
    \''t\'' when expecting \'',\''\n/tmp/tmp_ch2j5yi.d(18): Error: found \''{\'' when
    expecting \'']\''\n/tmp/tmp_ch2j5yi.d(18): Error: found \''return\'' when expecting
    \'',\''\n/tmp/tmp_ch2j5yi.d(18): Error: found \'';\'' when expecting \'',\''\n/tmp/tmp_ch2j5yi.d(18):
    Error: expression expected, not \''}\''\n/tmp/tmp_ch2j5yi.d(18): Error: found
    \'';\'' when expecting \'',\''\n/tmp/tmp_ch2j5yi.d(19): Error: expression expected,
    not \''auto\''\n/tmp/tmp_ch2j5yi.d(19): Error: found \''buzzer\'' when expecting
    \'',\''\n/tmp/tmp_ch2j5yi.d(19): Error: expression expected, not \''=\''\n/tmp/tmp_ch2j5yi.d(19):
    Error: expression expected, not \'']\''\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp_ch2j5yi.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long count = 0;\n    int digit\
    \ = 7;\n    int first = 1;\n    int second = 1;\n    while (first < n) {\n   \
    \     while (second < n) {\n            int temp = first * second;\n         \
    \   if (temp < n) {\n                int comp = log10(temp);\n               \
    \ int div = pow(10, comp);\n                int dig = temp / div;\n          \
    \      if (dig == digit) {\n                    count += 1;\n                }\n\
    \            }\n            else\n                break;\n            second +=\
    \ 1;\n        }\n        first += 1;\n        second = 1;\n    }\n    return count;\n\
    }\n/*\nReturns a tuple of (a, b) such that a**2 + b**2 == n, or None if such a\
    \ tuple does not exist.\n    >>> f(25)\n    (3, 4)\n    >>> f(18)\n    (3, 3)\n\
    \    >>> f(0)\n    (0, 0)\n    >>> f(1)\n    None\n*/\nauto f(int n) \n{\n   \
    \ enum {x, y} a;\n    // int result;\n    foreach (i; 0 .. n+1) {\n        foreach\
    \ (j; 0 .. n+1) {\n            if (i*i + j*j == n) {\n                a = tuple(i,\
    \ j);\n                return a;\n            }\n        }\n    }\n    return\
    \ none;\n}\nunittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L)\
    \ == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n\
    \    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L)\
    \ == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcwq3l7hi.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long count = 0;\n    foreach(i;\
    \ 0 .. n)\n    {\n        if(i%11 == 0 || i%13 == 0)\n        {\n            count\
    \ += (i.to!string.filter!(\"x == '7'\").length);\n        }\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L)\
    \ == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n\
    \    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L)\
    \ == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv9danlyf.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    return 7L * (n / 11L + n /\
    \ 13L - n / (11L * 13L));\n}\nunittest\n{\n    alias candidate = fizz_buzz;\n\n\
    \    assert(candidate(50L) == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L)\
    \ == 3L);\n    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n\
    \    assert(candidate(4000L) == 192L);\n    assert(candidate(10000L) == 639L);\n\
    \    assert(candidate(100000L) == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm1tj5c20.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long cnt = 0L;\n    long d\
    \ = 0L;\n    long i = 1L;\n    long q = 0L;\n    long r = 0L;\n    long x = 0L;\n\
    \    long y = 0L;\n    for ( ;i < n; i++ ) {\n        r = i % 11L;\n        x\
    \ = (r != 0L) ? i : 0L;\n        q = i / 11L;\n        r = i % 13L;\n        y\
    \ = (r != 0L) ? i : 0L;\n        d = max(x, y);\n        if (d == 0L) {\n    \
    \        cnt = (i / 7L) + 1L;\n        } else {\n            cnt = (d / 7L) +\
    \ 1L;\n        }\n    }\n    return cnt;\n}\n/*\nDetermine how many seconds are\
    \ in the given number of hours, minutes, and seconds.\n    >>> g(2, 30, 30)\n\
    \    9180\n    >>> g(2, 0, 0)\n    7200\n    >>> g(0, 2, 0)\n    120\n    >>>\
    \ g(0, 0, 42)\n    42\n    >>> g(0, -10, 10)\n    -590\nunittest\n{\n    alias\
    \ candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n    assert(candidate(78L)\
    \ == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L) == 3L);\n\
    \    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) == 192L);\n \
    \   assert(candidate(10000L) == 639L);\n    assert(candidate(100000L) == 8026L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpm07xgi_f.d(37): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpm07xgi_f.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    if (n <= 6) return 0;\n   \
    \ long res = 0;\n    long div = 1;\n    while (n/div >= 10) div *= 10;\n    while\
    \ (div != 0)\n    {\n        auto res_div = n/div;\n        if (res_div != 7)\n\
    \        {\n            auto cnt = n/div - n/(div*10) * 10;\n            if (res_div\
    \ % 11 == 0 || res_div % 13 == 0) \n                res += cnt * div/11;\n   \
    \     }\n        else\n        {\n            if (n/div == 7)\n              \
    \  res += n - n/10 * 10 + 1;\n            else\n                res += div;\n\
    \        }\n        div /= 10;\n    }\n    return res;\n}\n/*\nThe greatest common\
    \ divisor of positive integers a and b is the largest integer that divides both\
    \ of them without a remainder. E.g. gcd(22,132) = 2, gcd(14,15) = 1, gcd(18,27)\
    \ = 9.\n    >>> gcd(22L, 132L)\n    2L\n    >>> gcd(14L, 15L)\n    1L\n    >>>\
    \ gcd(18L, 27L)\n    9L\n*/\nlong gcd(long a, long b) \n{\n    long c;\n    while\
    \ (a != 0)\n    {\n        c = a;\n        a = b % a;\n        b = c;\n    }\n\
    \    return b;\n}\nunittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L)\
    \ == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n\
    \    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L)\
    \ == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv0au_mkc.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long sum=0;\n    foreach( i;1..n){\n\
    \        int index=i;\n        if(index%11==0||index%13==0){\n        while(index>0){\n\
    \            if(index%10==7){\n                sum++;\n            }\n       \
    \     index=index/10;\n        }\n    }\n    }\n    return sum;\n}\n/*\nFind the\
    \ number of ways to express n as the sum of a pair of integers.\nIf the result\
    \ has no digits in common with n, the result is valid. Otherwise, it is not valid.\n\
    The answer should be the sum of the number of valid and invalid results.\n   \
    \ >>> split_sum(100L)\n    7L\n    >>> split_sum(13L)\n    3L\n    >>> split_sum(67L)\n\
    \    5L\n*/\nlong split_sum(long n) \n{\n    long sum=0;\n    foreach( i;1..n){\n\
    \        int index1=i;\n        int index2=n-i;\n        if(! (has_digit(index1,index2))){\n\
    \            sum++;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias\
    \ candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n    assert(candidate(78L)\
    \ == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L) == 3L);\n\
    \    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) == 192L);\n \
    \   assert(candidate(10000L) == 639L);\n    assert(candidate(100000L) == 8026L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpne6_lnw5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n  long x = 0;\n  foreach (i; iota(n))\
    \ \n  {\n    if ((i % 11) == 0 || (i % 13) == 0) \n    {\n      foreach (immutable\
    \ c; to!string(i)) \n      {\n        if (c == '7') \n        {\n          x++;\n\
    \        }\n      }\n    }\n  }\n  return x;\n}\n/*\nCreate an array of size nn,\
    \ such that arr[i] == i**3.\n    >>> cube_array(3L)\n    [0L, 1L, 8L]\n    >>>\
    \ cube_array(6L)\n    [0L, 1L, 8L, 27L, 64L, 125L]\n    \n*/\nlong[] cube_array(long\
    \ n) \n{\n  return iota(n).map!(a => a ^^ 3).array;\n}\n/*\nReturn the number\
    \ of prime numbers between 1 and n.\n    >>> count_primes(5L)\n    2L\n    >>>\
    \ count_primes(10L)\n    4L\n    \n*/\nlong count_primes(long n) \n{\n  long x\
    \ = 0;\n  foreach (i; iota(n)) \n  {\n    if (isPrime(i)) \n    {\n      x++;\n\
    \    }\n  }\n  return x;\n}\n/*\nReturn the number of prime numbers which are\
    \ less than or equal to n.\n    >>> sieve(100L)\n    25L\n    >>> sieve(200L)\n\
    \    46L\n    >>> sieve(500L)\n    95L\n    \n*/\nlong sieve(long n) \n{\n  long\
    \ x = 0;\n  foreach (i; iota(n + 1)) \n  {\n    if (isPrime(i)) \n    {\n    \
    \  x++;\n    }\n  }\n  return x;\n}\n/*\nReturn the first n non-negative numbers\
    \ whose sum of square digits is a prime.\n    >>> goldbach(5L)\n    [0L, 1L, 2L,\
    \ 4L, 5L]\n    >>> goldbach(10\nunittest\n{\n    alias candidate = fizz_buzz;\n\
    \n    assert(candidate(50L) == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L)\
    \ == 3L);\n    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n\
    \    assert(candidate(4000L) == 192L);\n    assert(candidate(10000L) == 639L);\n\
    \    assert(candidate(100000L) == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg1aky7mp.d(85): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpg1aky7mp.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long res = 0;\n    foreach(i;0..n)\
    \ \n    {\n        if((i % 11 == 0) || (i % 13 == 0)) \n        {\n          \
    \  res += dcount(i, 7);\n        }\n    }\n    return res;\n}\n/*\nImplement the\
    \ \"base conversion\" from section 1.2 (pages 30-32) of the textbook.\n    >>>\
    \ base_conversion(10, 10, \"7\")\n    \"7\"\n    >>> base_conversion(10, 2, \"\
    7\")\n    \"111\"\n    >>> base_conversion(10, 8, \"7\")\n    \"7\"\n    >>> base_conversion(10,\
    \ 16, \"7\")\n    \"7\"\n    >>> base_conversion(16, 16, \"7\")\n    \"7\"\n \
    \   >>> base_conversion(16, 10, \"7\")\n    \"7\"\n    >>> base_conversion(16,\
    \ 2, \"7\")\n    \"111\"\n    >>> base_conversion(16, 8, \"7\")\n    \"7\"\n \
    \   >>> base_conversion(2, 10, \"111\")\n    \"7\"\n    >>> base_conversion(2,\
    \ 16, \"111\")\n    \"7\"\n    >>> base_conversion(2, 8, \"111\")\n    \"7\"\n\
    \    >>> base_conversion(2, 2, \"111\")\n    \"111\"\n    >>> base_conversion(8,\
    \ 8, \"7\")\n    \"7\"\n    >>> base_conversion(8, 10, \"7\")\n    \"7\"\n   \
    \ >>> base_conversion(8, 2, \"7\")\n    \"111\"\n    >>> base_conversion(8, 16,\
    \ \"7\")\n    \"7\"\n    >>> base_conversion(1000, 1000, \"7\")\n    \"7\"\n*/\n\
    string base_conversion(long b1, long b2, string s) \n{\n    int n;\n    string\
    \ digits = \"0123456789ABCDEF\";\n    if(b1 == b2) \n    {\n        return s;\n\
    \    }\n    if(b1 == 10) \n    {\nunittest\n{\n    alias candidate = fizz_buzz;\n\
    \n    assert(candidate(50L) == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L)\
    \ == 3L);\n    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n\
    \    assert(candidate(4000L) == 192L);\n    assert(candidate(10000L) == 639L);\n\
    \    assert(candidate(100000L) == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplrx9lca_.d(72): Error: found \''unittest\'' instead of statement\n/tmp/tmplrx9lca_.d(85):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplrx9lca_.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n\tlong count = 0;\n\tforeach(i;\
    \ 1..n) \n\t{\n\t\tif(i % 11 == 0 || i % 13 == 0) \n\t\t{\n\t\t\tlong tmp = i;\n\
    \t\t\twhile(tmp > 0) \n\t\t\t{\n\t\t\t\tif(tmp % 10 == 7) \n\t\t\t\t{\n\t\t\t\t\
    \tcount++;\n\t\t\t\t}\n\t\t\t\ttmp /= 10;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n\
    }\n/*\nGiven the names of your two best friends, return the name of the friend\
    \ that has the longest name.\n    >>> longest_friend(\"Jesus\", \"Peter\")\n \
    \   \"Jesus\"\n    >>> longest_friend(\"Peter\", \"Jesus\")\n    \"Jesus\"\n \
    \   >>> longest_friend(\"Tom\", \"Jerry\")\n    \"Jerry\"\n    \n*/\nstring longest_friend(string\
    \ name1, string name2) \n{\n\treturn (name1.length > name2.length) ? name1 : name2;\n\
    }\n/*\nGiven a list of integers, return the first integer that is divisible by\
    \ 3 and greater than 0. \nIf none are divisible by 3, return the first integer\
    \ that is positive. \nIf the list is empty, return 0.\n    >>> first_divisible_by_3([-5,\
    \ -4, -3, -2, -1, 1, 2, 3, 4, 5])\n    3\n    >>> first_divisible_by_3([-4, 1,\
    \ 2, -3, 4, 5])\n    3\n    >>> first_divisible_by_3([])\n    0\n    \n*/\nunittest\n\
    {\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n   \
    \ assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L)\
    \ == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) ==\
    \ 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpttkdm5we.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    import std.string : format;\n\
    \    import std.math : ceil;\n    import std.typecons : tuple;\n    import std.algorithm\
    \ : map, joiner;\n    import std.range : takeExactly;\n    import std.algorithm.comparison\
    \ : startsWith;\n    long res = 0;\n    foreach(i;1..n)\n    {\n        if(i%11==0||i%13==0)\n\
    \        {\n            if(cast(string)i~\"7\")\n            {\n             \
    \   res++;\n            }\n        }\n    }\n    return res;\n    \n    \n}\n\
    // **********\n/*\nYou like to watch fireworks, and you want to invite your best\
    \ friend to join you. To send a friendly invitation to your friend, you put your\
    \ name and your friend's name on a piece of paper, and you write a positive integer\
    \ that is guaranteed to be divisible by both of your names. Now you can fold the\
    \ paper up so that the friend's name is hidden.\nunittest\n{\n    alias candidate\
    \ = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n    assert(candidate(78L)\
    \ == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L) == 3L);\n\
    \    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) == 192L);\n \
    \   assert(candidate(10000L) == 639L);\n    assert(candidate(100000L) == 8026L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6yyrt94b.d(37): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp6yyrt94b.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    assert(n >= 0);\n    /*\n \
    \   long nums = [for (i in 0 .. <n) if (i % 11 == 0 || i % 13 == 0) i];\n    long\
    \ numsStr = [for (num in nums) std.conv.to!string(num)];\n    long numsStrJoin\
    \ = std.algorithm.join(numsStr, \"\");\n    long numsStrJoinStr = std.conv.to!string(numsStrJoin);\n\
    \    long numsStrJoinStrFilter = [for (c in numsStrJoinStr) if (c == '7') c];\n\
    \    return numsStrJoinStrFilter.length;\n    */\n    return 0;\n}\nunittest\n\
    {\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n   \
    \ assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L)\
    \ == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) ==\
    \ 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7ag16hkq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n\t//Count the numbers that satisfy\
    \ the condition.\n\tlong count = 0;\n\t\n\t//Check integers less than n.\n\tforeach(int\
    \ i; 0..n) \n\t{\n\t\t//Compare the last digit.\n\t\tint last_digit = i % 10;\n\
    \t\t\n\t\t//count numbers that are divisible by 11 or 13 and contain the digit\
    \ 7.\n\t\tif((last_digit == 7) && ((i % 11 == 0) || (i % 13 == 0))) \n\t\t{\n\t\
    \t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate\
    \ = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n    assert(candidate(78L)\
    \ == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L) == 3L);\n\
    \    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) == 192L);\n \
    \   assert(candidate(10000L) == 639L);\n    assert(candidate(100000L) == 8026L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaj4eob2s.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n\treturn filter!(a => (a % 11 ==\
    \ 0 || a % 13 == 0))(iota(n)).count!(a => a % 10 == 7);\n}\nunittest\n{\n    alias\
    \ candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n    assert(candidate(78L)\
    \ == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L) == 3L);\n\
    \    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) == 192L);\n \
    \   assert(candidate(10000L) == 639L);\n    assert(candidate(100000L) == 8026L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9vx_kwnu.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long count = 0;\n    foreach(i;\
    \ 1..n)\n    {\n        if(modulo(i, 11) == 0 || modulo(i, 13) == 0)\n       \
    \ {\n            count += count_if!(r => r == '7')(i.to!string).total;\n     \
    \   }\n    }\n    return count;\n}\n \n/*\nGiven a string, return a new string\
    \ where the first and last chars have been exchanged.\n    >>> front_back('code')\n\
    \    'eodc'\n    >>> front_back('a')\n    'a'\n    >>> front_back('ab')\n    'ba'\n\
    \    >>> front_back('cab')\n    'bca'\n*/\nstring front_back(string s) \n{\n \
    \   if(s.length > 1)\n    {\n        string first = s[0..1];\n        string last\
    \ = s[$-1..$];\n        return last ~ s[1..$-1] ~ first;\n    }\n    return s;\n\
    }\n \n/*\nGiven a string, return a string where for every char in the original,\
    \ there are two chars.\n    >>> double_char('The')\n    'TThhee'\n    >>> double_char('AAbb')\n\
    \    'AAAAbbbb'\n    >>> double_char('Hi-There')\n    'HHii--TThheerree'\n*/\n\
    string double_char(string s) \n{\n    string doubled;\n    foreach(c; s)\n   \
    \ {\n        doubled ~= c ~ c;\n    }\n    return doubled;\n}\n \n/*\nReturn the\
    \ number of times that the string \"hi\" appears anywhere in the given string.\n\
    \    >>> count_hi('abc hi ho')\n    1\n    >>> count_hi('ABChi hi')\n    2\n \
    \   >>> count_hi('hihi')\n    2\n*/\nlong count_hi(string s) \n{\n    return count_if!(s2\
    \ => s2 == \"hi\")(s.split);\n}\n \n/*\nReturn True if the string \"cat\" and\
    \ \"dog\" appear the same number of times in the given string.\n\nunittest\n{\n\
    \    alias candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n    assert(candidate(78L)\
    \ == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L) == 3L);\n\
    \    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) == 192L);\n \
    \   assert(candidate(10000L) == 639L);\n    assert(candidate(100000L) == 8026L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzhs2zpwn.d(81): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpzhs2zpwn.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long count = 0;\n    foreach(immutable\
    \ i; 0..n) \n    {\n        if((i % 11 == 0 || i % 13 == 0) && i.to!string.find(\"\
    7\") != -1) \n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L)\
    \ == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n\
    \    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L)\
    \ == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1qb11pk7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n  long nn;\n  long count = 0;\n\
    \  long retval = 0;\n  long i;\n  int x;\n  int y;\n  int digit;\n  int div_11;\n\
    \  int div_13;\n  div_11 = 0;\n  div_13 = 0;\n  count = 0;\n  nn = (n - 1);\n\
    \  while (count < nn)\n  {\n    if (count % 13 == 0)\n    {\n      div_13 = 1;\n\
    \    }\n    else\n    {\n      div_13 = 0;\n    }\n    if (count % 11 == 0)\n\
    \    {\n      div_11 = 1;\n    }\n    else\n    {\n      div_11 = 0;\n    }\n\
    \    if (div_11 == 1)\n    {\n      retval = (retval + 1);\n    }\n    if (div_13\
    \ == 1)\n    {\n      retval = (retval + 1);\n    }\n    count = (count + 1);\n\
    \  }\n  return retval;\n}\n/*\nfills a 3D array with dots, where the edges are\
    \ pipes and the corners are plus signs\n    >>> output = [[['.', '.', '.'],\n\
    \    ...            ['.', '.', '.'],\n    ...            ['.', '.', '.']],\n \
    \   ...           [['.', '.', '.'],\n    ...            ['.', '.', '.'],\n   \
    \ ...            ['.', '.', '.']],\n    ...           [['.', '.', '.'],\n    ...\
    \            ['.', '.', '.'],\n    ...            ['.', '.', '.']]]\n    >>> generate_2d_array(output)\n\
    \    [['+', '-', '-', '-', '+'],\n     ['|', '.', '.', '.', '|'],\n     ['|',\
    \ '.', '.', '.', '|'],\n     ['|', '.', '.', '.', '|'],\n     ['+', '-', '-',\
    \ '-', '+']]\n    >>> generate_\nunittest\n{\n    alias candidate = fizz_buzz;\n\
    \n    assert(candidate(50L) == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L)\
    \ == 3L);\n    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n\
    \    assert(candidate(4000L) == 192L);\n    assert(candidate(10000L) == 639L);\n\
    \    assert(candidate(100000L) == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzxykt4z8.d(58): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpzxykt4z8.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long count = 0;\n    long i\
    \ = 0;\n    foreach(int a; 0..n)\n    {\n        if(a % 11 == 0 || a % 13 == 0)\n\
    \        {\n            foreach(int aa; a.to!string)\n            {\n        \
    \        if(aa == 7)\n                {\n                    count++;\n      \
    \          }\n            }\n        }\n    }\n    return count;\n}\n/*\nReturns\
    \ the maximum multiple of 3 that can divide the sum of the digits of integer n.\n\
    \    >>> maximum_multiple_of_three(105L)\n    9L\n    >>> maximum_multiple_of_three(999L)\n\
    \    9L\n    >>> maximum_multiple_of_three(1001L)\n    0L\n*/\nlong maximum_multiple_of_three(long\
    \ n) \n{\n    return n.sumof.divisibleBy(3);\n}\n/*\n    You are given an array\
    \ of integers. You need to find the maximum sum of a contiguous\n    subarray.\
    \ E.g.\n    >>> maximum_subarray_sum([-2, 3, -4, 5, -7, 9, 10])\n    15\n    >>>\
    \ maximum_subarray_sum([])\n    0\n*/\nlong maximum_subarray_sum(long[] arr) \n\
    {\n    if(arr.length == 0)\n    {\n        return 0;\n    }\n    else\n    {\n\
    \        long max_so_far = arr[0];\n        long curr_max = arr[0];\n        for(int\
    \ i = 1; i < arr.length; i++)\n        {\n            curr_max = max(arr[i], curr_max\
    \ + arr[i]);\n            max_so_far = max(max_so_far, curr_max);\n        }\n\
    \        return max_so_far;\n    }\n}\n/*\nReturns the number of integer partitions\
    \ of n using integers from 1 to m.\n    >>> partitions(3L, 3L)\n    3L\n    >>>\
    \ partitions(6L, 4L)\n    9L\n    >>> partitions(6L, 5L)\n    7L\n*/\nlong partitions(long\
    \ n, long m) \nunittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L)\
    \ == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n\
    \    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L)\
    \ == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpom51rv1k.d(81): Error: semicolon expected following function
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpom51rv1k.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long result = 0L;\n    long\
    \ remainder7 = 0L;\n    long remainder11 = 0L;\n    long remainder13 = 0L;\n \
    \   while (n > 0L) {\n        remainder7 = n % 7L;\n        remainder11 = n %\
    \ 11L;\n        remainder13 = n % 13L;\n        if (remainder7 == 0L || remainder11\
    \ == 0L || remainder13 == 0L) {\n            result += 1L;\n        }\n      \
    \  n -= 1L;\n    }\n    return result;\n}\n/*\n    >>> fizz_buzz_sum(0L)\n   \
    \ 0L\n    >>> fizz_buzz_sum(11L)\n    4L\n    >>> fizz_buzz_sum(15L)\n    9L\n\
    \    >>> fizz_buzz_sum(27L)\n    14L\n*/\nlong fizz_buzz_sum(long n)\n{\n    return\
    \ (n > 0L) ? fizz_buzz(n) + fizz_buzz_sum(n - 1L) : 0L;\n}\n/*\n// Calcuate the\
    \ nth digit of PI\n    >>> nth_digit_of_pi(1)\n    1\n    >>> nth_digit_of_pi(2)\n\
    \    4\n    >>> nth_digit_of_pi(3)\n    1\n    >>> nth_digit_of_pi(4)\n    5\n\
    \    >>> nth_digit_of_pi(5)\n    9\n    >>> nth_digit_of_pi(6)\n    2\n    >>>\
    \ nth_digit_of_pi(7)\n    6\n    >>> nth_digit_of_pi(8)\n    5\n    >>> nth_digit_of_pi(9)\n\
    \    3\n    >>> nth_digit_of_pi(10)\n    5\n    >>> nth_digit_of_pi(11)\n    8\n\
    \    >>> nth_digit_of_pi(12)\n    9\n    >>> nth_digit_of_pi(13)\n    7\n    >>>\
    \ nth_digit_of_pi(14)\n    9\n    >>>\nunittest\n{\n    alias candidate = fizz_buzz;\n\
    \n    assert(candidate(50L) == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L)\
    \ == 3L);\n    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n\
    \    assert(candidate(4000L) == 192L);\n    assert(candidate(10000L) == 639L);\n\
    \    assert(candidate(100000L) == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt8m28gt8.d(44): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpt8m28gt8.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n     return div(n-1,11) + div(n-1,13)\
    \ - div(n-1,11*13);\n}\nunittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L)\
    \ == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n\
    \    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L)\
    \ == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9em5rikt.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n\tlong result = 0;\n\tbool divisible_by_11\
    \ = false;\n\tbool divisible_by_13 = false;\n\tlong temp_n = n;\n\twhile (temp_n\
    \ > 1) {\n\t\tif (divisible_by_11) {\n\t\t\tresult += 2;\n\t\t}\n\t\tif (divisible_by_13)\
    \ {\n\t\t\tresult += 3;\n\t\t}\n\t\tdivisible_by_11 = divisible_by_11 || (temp_n\
    \ % 11 == 0);\n\t\tdivisible_by_13 = divisible_by_13 || (temp_n % 13 == 0);\n\t\
    \ttemp_n -= 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = fizz_buzz;\n\
    \n    assert(candidate(50L) == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L)\
    \ == 3L);\n    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n\
    \    assert(candidate(4000L) == 192L);\n    assert(candidate(10000L) == 639L);\n\
    \    assert(candidate(100000L) == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3wyedf91.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n     auto ans = 0L;\n     auto\
    \ k = 7L;\n     auto factor = 7L;\n     auto f = 7L;\n     auto next_f = f;\n\
    \     auto d = 0L;\n     auto m = 0L;\n     for (auto i = 0L; i < n; i++)\n  \
    \   {\n          if (i % 11 == 0 || i % 13 == 0)\n          {\n              \
    \ auto i_new = i;\n               while (i_new > 0)\n               {\n      \
    \              if (i_new % 10 == 7)\n                    {\n                 \
    \        ans += 1;\n                    }\n                    i_new /= 10;\n\
    \               }\n          }\n     }\n     return ans;\n}\n/*\nA positive integer\
    \ k is given. The equations\n    2x\xB2 - 5y\xB2 = -k\n    2x\xB2 - 5y\xB2 = k\n\
    are solved, where x and y are integers. Find the quantity of pairs (x, y) that\
    \ satisfy the first equation and the quantity of pairs that satisfy the second\
    \ equation. The result is the difference between these quantities. The quantity\
    \ of all pairs must be given modulo 1'000'000'007.\n    >>> f(0)\n    1\n    >>>\
    \ f(1)\n    -1\n    >>> f(2)\n    -1\n    >>> f(23)\n    0\n    >>> f(137)\n \
    \   0\n    >>> f(313)\n    0\n    >>> f(101)\n    1\n*/\nunittest\n{\n    alias\
    \ candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n    assert(candidate(78L)\
    \ == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L) == 3L);\n\
    \    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) == 192L);\n \
    \   assert(candidate(10000L) == 639L);\n    assert(candidate(100000L) == 8026L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg0u_bhq2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n\tlong res = 0;\n\tforeach(i; 11\
    \ .. n)\n\t{\n\t\tif (i % 11 == 0 || i % 13 == 0)\n\t\t{\n\t\t\tres += std.string.count(std.to!string(i),\
    \ \"7\");\n\t\t}\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = fizz_buzz;\n\
    \n    assert(candidate(50L) == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L)\
    \ == 3L);\n    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n\
    \    assert(candidate(4000L) == 192L);\n    assert(candidate(10000L) == 639L);\n\
    \    assert(candidate(100000L) == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt58ct5cp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n  long count = 0;\n  long i;\n\
    \  long n0;\n  long n1;\n  long n2;\n  long n3;\n  long n4;\n  long n5;\n  long\
    \ n6;\n  long n7;\n  long n8;\n  long n9;\n  long n10;\n  long n11;\n  long n12;\n\
    \  long n13;\n  long n14;\n  long n15;\n  long n16;\n  long n17;\n  long n18;\n\
    \  long n19;\n  long n20;\n  long n21;\n  long n22;\n  long n23;\n  long n24;\n\
    \  long n25;\n  long n26;\n  long n27;\n  long n28;\n  long n29;\n  long n30;\n\
    \  long n31;\n  long n32;\n  long n33;\n  long n34;\n  long n35;\n  long n36;\n\
    \  long n37;\n  long n38;\n  long n39;\n  long n40;\n  long n41;\n  long n42;\n\
    \  long n43;\n  long n44;\n  long n45;\n  long n46;\n  long n47;\n  long n48;\n\
    \  long n49;\n  long n50;\n  long n51;\n  long n52;\n  long n53;\n  long n54;\n\
    \  long n55;\n  long n56;\n  long n57;\n  long n58;\n  long n59;\n  long n60;\n\
    \  long n61;\n  long n62;\n  long n63;\n  long n64;\n  long n65;\n  long n66;\n\
    \  long n67;\n  long n68;\n  long n69;\n  long n70;\n  long n71;\n  long n72;\n\
    \  long n73;\n  long n74;\n  long n75;\n  long n76;\n  long n77;\n  long n78;\n\
    \  long n79;\n  long n80;\n  long n81;\n  long n82;\nunittest\n{\n    alias candidate\
    \ = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n    assert(candidate(78L)\
    \ == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L) == 3L);\n\
    \    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) == 192L);\n \
    \   assert(candidate(10000L) == 639L);\n    assert(candidate(100000L) == 8026L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqgvxq4cq.d(100): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqgvxq4cq.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long number_sevens = 0L;\n\
    \    bool is_divisible_by_11_or_13;\n    bool is_remainder_seven;\n    foreach\
    \ (i; 0L .. n)\n    {\n        is_divisible_by_11_or_13 = (i % 11L == 0L) || (i\
    \ % 13L == 0L);\n        is_remainder_seven = (i % 10L == 7L);\n        if (is_divisible_by_11_or_13\
    \ && is_remainder_seven)\n        {\n            number_sevens += 1L;\n      \
    \  }\n    }\n    return number_sevens;\n}\nunittest\n{\n    alias candidate =\
    \ fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n    assert(candidate(78L) ==\
    \ 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L) == 3L);\n\
    \    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) == 192L);\n \
    \   assert(candidate(10000L) == 639L);\n    assert(candidate(100000L) == 8026L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpil3czlsz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long r = 0L;\n    string[]\
    \ x = new string[$];\n    foreach(var i; iota(n))\n    {\n        if((i % 11)\
    \ == 0 || (i % 13) == 0)\n        {\n            x ~= to!string(i);\n        }\n\
    \    }\n    foreach(var j; x)\n    {\n        foreach(immutable char c; j)\n \
    \       {\n            if(c == '7')\n            {\n                r++;\n   \
    \         }\n        }\n    }\n    return r;\n}\nunittest\n{\n    alias candidate\
    \ = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n    assert(candidate(78L)\
    \ == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L) == 3L);\n\
    \    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) == 192L);\n \
    \   assert(candidate(10000L) == 639L);\n    assert(candidate(100000L) == 8026L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcaknkunb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long result = 0L;\n    for\
    \ (long i = 1L; i < n; i++) \n    {\n        if ((i % 11L == 0L) || (i % 13L ==\
    \ 0L)) \n        {\n            foreach (ch; to!string(i)) \n            {\n \
    \               if (ch == '7') \n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n   \
    \ assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L)\
    \ == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) ==\
    \ 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx4mijzff.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long times = 0;\n    for (long\
    \ i = 0; i < n; i++)\n    {\n        if ((i % 11 == 0 || i % 13 == 0) && i.to!string.count('7')\
    \ != 0)\n        {\n            times++;\n        }\n    }\n    return times;\n\
    }\n/*\nReturn the number of times the digit 7 appears in integers less than n\
    \ which are divisible by 11 or 13.\n    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n\
    \    2L\n    >>> fizz_buzz(79L)\n    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n\
    \    long times = 0;\n    for (long i = 0; i < n; i++)\n    {\n        if ((i\
    \ % 11 == 0 || i % 13 == 0) && i.to!string.count('7') != 0)\n        {\n     \
    \       times++;\n        }\n    }\n    return times;\n}\nunittest\n{\n    alias\
    \ candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n    assert(candidate(78L)\
    \ == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L) == 3L);\n\
    \    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) == 192L);\n \
    \   assert(candidate(10000L) == 639L);\n    assert(candidate(100000L) == 8026L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0bre32dd.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    size_t result = 0;\n    foreach(num;\
    \ iota(1L, n+1))\n    {\n        if(num % 11 == 0 || num % 13 == 0)\n        {\n\
    \            while(num > 0)\n            {\n                if(num % 10 == 7)\n\
    \                {\n                    result++;\n                }\n       \
    \         num /= 10;\n            }\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L) ==\
    \ 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n\
    \    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L)\
    \ == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi_mnkhwn.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    return (n > 0) ?\n        ((n\
    \ % 11 == 0) ?\n            ((n % 13 == 0) ? 2 : 1) :\n            (fizz_buzz(n\
    \ - 1) + ((n % 13 == 0) ? 1 : 0))) :\n        0;\n}\nunittest\n{\n    alias candidate\
    \ = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n    assert(candidate(78L)\
    \ == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L) == 3L);\n\
    \    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) == 192L);\n \
    \   assert(candidate(10000L) == 639L);\n    assert(candidate(100000L) == 8026L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnbnhw5_a.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    assert(n >= 0);\n    long m\
    \ = 0;\n    long c = 0;\n    while(true)\n    {\n        m = m + 11;\n       \
    \ if(m > n)\n            break;\n        if(m % 11 == 0)\n        {\n        \
    \    //cout << m << endl;\n            if(m % 10 == 7)\n                c++;\n\
    \            else if((m / 10) % 10 == 7)\n                c++;\n        }\n  \
    \  }\n    m = 0;\n    while(true)\n    {\n        m = m + 13;\n        if(m >\
    \ n)\n            break;\n        if(m % 13 == 0)\n        {\n            //cout\
    \ << m << endl;\n            if(m % 10 == 7)\n                c++;\n         \
    \   else if((m / 10) % 10 == 7)\n                c++;\n        }\n    }\n    return\
    \ c;\n}\nunittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L)\
    \ == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n\
    \    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L)\
    \ == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj7bkfyvx.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n\tlong a = 0;\n\tforeach(immutable\
    \ i; 0 .. n) \n\t{\n\t\tif(i % 11 == 0 || i % 13 == 0) \n\t\t{\n\t\t\timmutable\
    \ i_string = i.to!string;\n\t\t\tauto pos = find(i_string.dup, \"7\");\n\t\t\t\
    a += pos.length;\n\t\t}\n\t}\n\treturn a;\n}\n/*\nunittest\n{\n    alias candidate\
    \ = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n    assert(candidate(78L)\
    \ == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L) == 3L);\n\
    \    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) == 192L);\n \
    \   assert(candidate(10000L) == 639L);\n    assert(candidate(100000L) == 8026L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_58z_nak.d(27): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp_58z_nak.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long res = 0;\n    foreach(i;\
    \ 1 .. n)\n    {\n        if(i % 11 == 0 || i % 13 == 0)\n        {\n        \
    \    string x = to!string(i);\n            res += count(x.rbegin, x.rend, '7');\n\
    \        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = fizz_buzz;\n\
    \n    assert(candidate(50L) == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L)\
    \ == 3L);\n    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n\
    \    assert(candidate(4000L) == 192L);\n    assert(candidate(10000L) == 639L);\n\
    \    assert(candidate(100000L) == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqrcayxod.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long tot = 0L;\n    long i\
    \ = 0L;\n    long x = 0L;\n    long y = 0L;\n    long z = 0L;\n    long w = 0L;\n\
    \    long q = 0L;\n    while (i < n) {\n        i += 1L;\n        x = modulo(i,\
    \ 11L);\n        y = modulo(i, 13L);\n        z = (x == 0L) || (y == 0L);\n  \
    \      if (z) {\n            w = i;\n            while (w > 0L) {\n          \
    \      q = modulo(w, 10L);\n                w = div(w, 10L);\n               \
    \ if (q == 7L) {\n                    tot += 1L;\n                }\n        \
    \    }\n        }\n    }\n    return tot;\n}\nunittest\n{\n    alias candidate\
    \ = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n    assert(candidate(78L)\
    \ == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L) == 3L);\n\
    \    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) == 192L);\n \
    \   assert(candidate(10000L) == 639L);\n    assert(candidate(100000L) == 8026L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcu3ae1md.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    return iota(n).retro().filter!(n\
    \ => n % 11 == 0 || n % 13 == 0)().count!(n => n == '7').front;\n}\nunittest\n\
    {\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n   \
    \ assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L)\
    \ == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) ==\
    \ 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqwnq27_2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n\tlong a = n / 11;\n\tlong b =\
    \ n / 13;\n\tlong c = n / (11 * 13);\n\tlong count;\n\ta -= c;\n\tb -= c;\n\t\
    c = to!string(n).count('7');\n\tcount = a + b + c;\n\treturn count;\n}\nunittest\n\
    {\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n   \
    \ assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L)\
    \ == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) ==\
    \ 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxn0gmui4.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    return 7L * (n/11L + n/13L\
    \ - n/143L);\n}\nunittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L)\
    \ == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n\
    \    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L)\
    \ == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcujmrnxz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n\tlong count = 0;\n\tfor (long\
    \ i = 0; i < n; i += 11)\n\t{\n\t\tcount += to!string(i).count(\"7\");\n\t}\n\t\
    for (long i = 0; i < n; i += 13)\n\t{\n\t\tcount += to!string(i).count(\"7\");\n\
    \t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = fizz_buzz;\n\n   \
    \ assert(candidate(50L) == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L)\
    \ == 3L);\n    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n\
    \    assert(candidate(4000L) == 192L);\n    assert(candidate(10000L) == 639L);\n\
    \    assert(candidate(100000L) == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb3k42o7n.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n\tlong count = 0;\n\tfor (long\
    \ i = 0; i < n; i++) \n\t{\n\t\tif ((i % 11 == 0) || (i % 13 == 0))\n\t\t{\n\t\
    \t\tif (i % 10 == 7)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if (i / 10\
    \ == 7)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\n\
    unittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L) ==\
    \ 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n\
    \    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L)\
    \ == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1g7yq74d.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    if (n < 7)\n        return\
    \ 0;\n    else if (n < 78)\n        return 1;\n    else if (n < 778)\n       \
    \ return 2;\n    else\n        return 3;\n}\n/*\nReturn a list of the digits of\
    \ n in ascending order.\n    >>> digit_sort(43267L)\n    [2, 3, 4, 6, 7]\n   \
    \ >>> digit_sort(367531L)\n    [1, 3, 3, 5, 6, 7]\n*/\nauto digit_sort(long n)\
    \ \n{\n    long L = 0;\n    long R = 0;\n    auto result = new long[0];\n    for\
    \ (int i = 0; i < 6; i++)\n    {\n        if (i < 3)\n        {\n            L\
    \ += n % 10 * pow(10, i);\n        }\n        else\n        {\n            R +=\
    \ n % 10 * pow(10, i - 3);\n        }\n        n /= 10;\n    }\n    n = L + R;\n\
    \    for (int i = 0; i < 6; i++)\n    {\n        if (n % 10 == 0)\n        {\n\
    \            result ~= 0;\n        }\n        else if (n % 10 == 1)\n        {\n\
    \            result ~= 1;\n        }\n        else if (n % 10 == 2)\n        {\n\
    \            result ~= 2;\n        }\n        else if (n % 10 == 3)\n        {\n\
    \            result ~= 3;\n        }\n        else if (n % 10 == 4)\n        {\n\
    \            result ~= 4;\n        }\n        else if (n % 10 == 5)\n        {\n\
    \            result ~= 5;\n        }\n        else if (n % 10 == 6)\n        {\n\
    \            result ~= 6;\n        }\n        else if (n % 10 == 7)\n        {\n\
    \            result ~= 7;\n        }\n        else if (n % 10 == 8)\n        {\n\
    \            result ~= 8;\n        }\n        else if (n % 10 == 9)\n        {\n\
    \            result ~= 9;\n        }\n        n /= 10;\n\nunittest\n{\n    alias\
    \ candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n    assert(candidate(78L)\
    \ == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L) == 3L);\n\
    \    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) == 192L);\n \
    \   assert(candidate(10000L) == 639L);\n    assert(candidate(100000L) == 8026L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_ocj4lm4.d(93): Error: found \''unittest\'' instead of statement\n/tmp/tmp_ocj4lm4.d(106):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_ocj4lm4.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    if (n <= 6) \n        return\
    \ 0;\n    long count = 0;\n    foreach (i; 2..n) \n    {\n        if (i % 11 ==\
    \ 0 || i % 13 == 0) \n        {\n            string str = to!string(i);\n    \
    \        foreach (char ch; str) \n            {\n                if (ch == '7')\
    \ \n                    count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\nCalculate the sum of the `n` first Fibonacci numbers.\n    >>>\
    \ fibonacci_sum(5)\n    5L\n    >>> fibonacci_sum(10)\n    143L\n*/\nlong fibonacci_sum(long\
    \ n) \n{\n    long f1 = 0;\n    long f2 = 1;\n    long sum = 1;\n    for (long\
    \ i = 2; i <= n; i++) \n    {\n        auto fib = f1 + f2;\n        sum += fib;\n\
    \        f1 = f2;\n        f2 = fib;\n    }\n    return sum;\n}\n/*\nCalculate\
    \ the area of a right triangle given its two catheti.\n  >>> right_triangle_area(1,\
    \ 1)\n  0.5\n  >>> right_triangle_area(3, 4)\n  6.0\n*/\nreal right_triangle_area(real\
    \ c1, real c2) \n{\n    return c1 * c2 / 2;\n}\n/*\nReturn an array of the `n`\
    \ first triangle numbers.\n  >>> first_triangle_numbers(5)\n  [1, 3, 6, 10, 15]\n\
    \  >>> first_triangle_numbers(3)\n  [1, 3, 6]\n*/\nlong[] first_triangle_numbers(long\
    \ n) \n{\n    long sum = 0;\n    long[] result;\n    foreach (i; 0..n) \n    {\n\
    \        sum += i;\n        result ~= sum;\n    }\n    return result;\n}\n/*\n\
    Return the word which the most common letter appears in.\n  >>> word_with_most_common_\n\
    unittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L) ==\
    \ 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n\
    \    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L)\
    \ == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz9w_o6p0.d(82): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpz9w_o6p0.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    return reduce!((a, b) => a\
    \ + b,\n        filter!(x =>\n            elem(x, [7, 17, 27, 37, 47, 57, 70,\
    \ 71, 72, 73, 74, 75, 76, 77, 78, 79]),\n            map!(x =>\n             \
    \   to!long(str(x).count('7')),\n                iota(1L, n, 11L)\n          \
    \  )\n        )\n    );\n}\nunittest\n{\n    alias candidate = fizz_buzz;\n\n\
    \    assert(candidate(50L) == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L)\
    \ == 3L);\n    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n\
    \    assert(candidate(4000L) == 192L);\n    assert(candidate(10000L) == 639L);\n\
    \    assert(candidate(100000L) == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp66jmn7vn.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    if (n < 0) \n    {\n      \
    \  return fizz_buzz(-n);\n    }\n    if (n == 0) \n    {\n        return 0;\n\
    \    }\n    // calc 11s\n    long elevens = (n-1) / 11;\n    // calc 13s\n   \
    \ long thirteens = (n-1) / 13;\n    // calc divisible by 11 and 13\n    long elevens_and_thirteens\
    \ = elevens < thirteens ? elevens : thirteens;\n    // calc 7s in the nums \n\
    \    long sevens = sevens_in_num(n);\n    // calc 7s in the nums divisible by\
    \ 11\n    long sevens_in_elevens = sevens_in_num(11 * elevens);\n    // calc 7s\
    \ in the nums divisible by 13\n    long sevens_in_thirteens = sevens_in_num(13\
    \ * thirteens);\n    // calc 7s in the nums divisible by 11 and 13\n    long sevens_in_elevens_and_thirteens\
    \ = sevens_in_num(11 * thirteen * elevens_and_thirteens);\n    // return the difference\n\
    \    return sevens - sevens_in_elevens - sevens_in_thirteens + sevens_in_elevens_and_thirteens;\n\
    }\nunittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L)\
    \ == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n\
    \    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L)\
    \ == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2xb4hjpi.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    ulong seven_count = 0;\n  \
    \  for (uint i = 0; i < n; i++)\n    {\n        if (i % 11 == 0 || i % 13 == 0)\n\
    \        {\n            bool[7] digits = to!bool[7](i);\n            seven_count\
    \ += digits.count;\n        }\n    }\n    return seven_count;\n}\nunittest\n{\n\
    \    alias candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n    assert(candidate(78L)\
    \ == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L) == 3L);\n\
    \    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) == 192L);\n \
    \   assert(candidate(10000L) == 639L);\n    assert(candidate(100000L) == 8026L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpngz_o9s5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n    long i = 0L;\n    long count =\
    \ 0L;\n    long digit = 0L;\n    long tens = 0L;\n    long n_mod_11 = n % 11L;\n\
    \    long n_mod_13 = n % 13L;\n    long n_mod_11_and_13 = n_mod_11 % 13L;\n  \
    \  static assert(n > 0L);\n    static assert(n_mod_11 > 0L);\n    static assert(n_mod_13\
    \ > 0L);\n    static assert(n_mod_11_and_13 > 0L);\n    while (((n % 11L) > i))\
    \ \n        if ((((n % 11L) - i) % 13L) == 0L) \n            digit = 7L;\n   \
    \         tens = 7L;\n            while ((digit > 0L)) \n                while\
    \ ((tens > 0L)) \n                    if ((tens == digit)) \n                \
    \        count += 1L;\n                    tens /= 10L;\n                digit\
    \ /= 10L;\n            i += 11L;\n        else \n            i += 13L;\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L)\
    \ == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n\
    \    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L)\
    \ == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv4hkg2qc.d(14): Error: semicolon expected following function
    declaration\n/tmp/tmpv4hkg2qc.d(25): Error: Declaration expected, not \''while\''\n/tmp/tmpv4hkg2qc.d(28):
    Error: no identifier for declarator tens\n/tmp/tmpv4hkg2qc.d(28): Error: Declaration
    expected, not \''=\''\n/tmp/tmpv4hkg2qc.d(29): Error: Declaration expected, not
    \''while\''\n/tmp/tmpv4hkg2qc.d(33): Error: no identifier for declarator tens\n/tmp/tmpv4hkg2qc.d(33):
    Error: Declaration expected, not \''/=\''\n/tmp/tmpv4hkg2qc.d(34): Error: no identifier
    for declarator digit\n/tmp/tmpv4hkg2qc.d(34): Error: Declaration expected, not
    \''/=\''\n/tmp/tmpv4hkg2qc.d(35): Error: no identifier for declarator i\n/tmp/tmpv4hkg2qc.d(35):
    Error: Declaration expected, not \''+=\''\n/tmp/tmpv4hkg2qc.d(36): Error: Declaration
    expected, not \''else\''\n/tmp/tmpv4hkg2qc.d(38): Error: Declaration expected,
    not \''return\''\n/tmp/tmpv4hkg2qc.d(39): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv4hkg2qc.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    return 10L;\n}\n/*\nSum the\
    \ digits of the base-10 digits of a number.\n    >>> digital_sum(123456789)\n\
    \    45L\n    >>> digital_sum(10)\n    1L\n*/\nlong digital_sum(long n) \n{\n\
    \    return 0L;\n}\n/*\nA number is considered factorial-sum-happy if the sum\
    \ of the factorials of its digits is equal to the number itself. Return whether\
    \ a number is factorial-sum-happy.\n    >>> is_factorial_sum_happy(145)\n    True\n\
    \    >>> is_factorial_sum_happy(11)\n    False\n    >>> is_factorial_sum_happy(363601)\n\
    \    True\n    >>> is_factorial_sum_happy(3333)\n    False\n*/\nunittest\n{\n\
    \    alias candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n    assert(candidate(78L)\
    \ == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L) == 3L);\n\
    \    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) == 192L);\n \
    \   assert(candidate(10000L) == 639L);\n    assert(candidate(100000L) == 8026L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdr3sdft7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n    long count = 0L;\n    long a =\
    \ 0L;\n    long b = 0L;\n    long x = 0L;\n    foreach (i; 1L .. n)\n    {\n \
    \       if (i % 11L == 0L || i % 13L == 0L)\n        {\n            a = i;\n \
    \           b = i;\n            while (a != 0L)\n            {\n             \
    \   x = a % 10L;\n                if (x == 7L)\n                {\n          \
    \          count += 1L;\n                }\n                a = a / 10L;\n   \
    \         }\n        }\n    }\n    return count;\n}\n/*\nCount the number of elements\
    \ which occur in both of the sets.\n    >>> intersect_count([\"a\", \"b\", \"\
    c\"], [\"b\", \"c\", \"a\"])\n    3\n    >>> intersect_count([\"a\", \"b\", \"\
    c\"], [\"b\", \"c\", \"a\", \"a\"])\n    3\n    >>> intersect_count([\"a\", \"\
    b\", \"c\"], [\"b\", \"c\", \"d\"])\n    2\n    >>> intersect_count([\"a\", \"\
    b\", \"c\"], [\"b\", \"c\", \"a\", \"b\"])\n    3\n*/\nlong intersect_count(T[]\
    \ a, T[] b)\n    if (a.length == 0L)\n    {\n        return 0L;\n    }\n    else\
    \ if (b.length == 0L)\n    {\n        return 0L;\n    }\n    else\n    {\n   \
    \     return a.intersect(b).length;\n    }\n}\n/*\n    >>> unique_pairs(1L, 2L)\n\
    \    1L\n    >>> unique_pairs(2L, 1L)\n    1L\n    >>> unique_pairs(3L, 4L)\n\
    \    6L\n    >>> unique_pairs(4L, 3L)\n    6L\n    >>> unique_pairs(2L, 2L)\n\
    \    2L\n    >>> unique_pairs(10L, 20L)\n    190L\n    >>> unique_pairs(20L, 10L)\n\
    \    190L\n*/\nlong unique_pairs(long\nunittest\n{\n    alias candidate = fizz_buzz;\n\
    \n    assert(candidate(50L) == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L)\
    \ == 3L);\n    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n\
    \    assert(candidate(4000L) == 192L);\n    assert(candidate(10000L) == 639L);\n\
    \    assert(candidate(100000L) == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_ch91gnv.d(14): Error: semicolon expected following function
    declaration\n/tmp/tmp_ch91gnv.d(18): Error: Declaration expected, not \''foreach\''\n/tmp/tmp_ch91gnv.d(18):
    Error: Declaration expected, not \''1L\''\n/tmp/tmp_ch91gnv.d(23): Error: no identifier
    for declarator b\n/tmp/tmp_ch91gnv.d(23): Error: Declaration expected, not \''=\''\n/tmp/tmp_ch91gnv.d(24):
    Error: Declaration expected, not \''while\''\n/tmp/tmp_ch91gnv.d(27): Error: Declaration
    expected, not \''if\''\n/tmp/tmp_ch91gnv.d(30): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_ch91gnv.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n\tlong res = 0;\n\tlong result\
    \ = 0;\n\tforeach(i; iota(n))\n\t{\n\t\tif(i % 11 == 0 || i % 13 == 0)\n\t\t{\n\
    \t\t\tresult = i;\n\t\t\twhile(result > 0)\n\t\t\t{\n\t\t\t\tif(result % 10 ==\
    \ 7)\n\t\t\t\t{\n\t\t\t\t\tres++;\n\t\t\t\t}\n\t\t\t\tresult /= 10;\n\t\t\t}\n\
    \t\t}\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = fizz_buzz;\n\n\
    \    assert(candidate(50L) == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L)\
    \ == 3L);\n    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n\
    \    assert(candidate(4000L) == 192L);\n    assert(candidate(10000L) == 639L);\n\
    \    assert(candidate(100000L) == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptcscoc3z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n  long result = 0;\n  immutable\
    \ (long, long) digits;\n  long base = 10;\n  for (; n > 0; n /= base) \n  {\n\
    \    digits = pair(n % base, n / base);\n    if (digits[0] == 7)\n    {\n    \
    \  //std.stdio.writeln(digits[1]);\n      if ((digits[1] % 11 == 0) || (digits[1]\
    \ % 13 == 0))\n      {\n        //std.stdio.writeln(digits[1]);\n        result++;\n\
    \      }\n    }\n  }\n  return result;\n}\nunittest\n{\n    alias candidate =\
    \ fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n    assert(candidate(78L) ==\
    \ 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L) == 3L);\n\
    \    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) == 192L);\n \
    \   assert(candidate(10000L) == 639L);\n    assert(candidate(100000L) == 8026L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgyec8xyx.d(16): Error: found \'',\'' when expecting \'')\''\n/tmp/tmpgyec8xyx.d(16):
    Error: no identifier for declarator immutable(long)\n/tmp/tmpgyec8xyx.d(16): Error:
    no identifier for declarator long\n/tmp/tmpgyec8xyx.d(16): Error: found \'')\''
    instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgyec8xyx.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    long r;\n    int i;\n    auto\
    \ v = new int[n];\n    foreach(i; 0 .. n)\n        v[i] = 7;\n    foreach(i; 0\
    \ .. n)\n        if (i % 11 == 0 || i % 13 == 0) \n            foreach(j; 0 ..\
    \ i)\n                v[j] = 0;\n    foreach(i; 0 .. n)\n        r += v[i];\n\
    \    return r;\n}\n/*\nCheck if a number is prime.\n    >>> is_prime(1L)\n   \
    \ False\n    >>> is_prime(2L)\n    True\n    >>> is_prime(3L)\n    True\n    >>>\
    \ is_prime(4L)\n    False\n    >>> is_prime(49L)\n    False\n    >>> is_prime(59L)\n\
    \    True\n    >>> is_prime(79L)\n    True\n    \n*/\nunittest\n{\n    alias candidate\
    \ = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n    assert(candidate(78L)\
    \ == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L) == 3L);\n\
    \    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) == 192L);\n \
    \   assert(candidate(10000L) == 639L);\n    assert(candidate(100000L) == 8026L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5pgp32zp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    return count!(x => x % 11 ==\
    \ 0 || x % 13 == 0 && x < n && x.to!string.count(\"7\") > 0)(iota(n));\n}\nunittest\n\
    {\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n   \
    \ assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L)\
    \ == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) ==\
    \ 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpenmspfqz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    return ((n < 1) ? 0L :\n  \
    \          (n < 8) ? 0L :\n            (n < 57) ? 1L :\n            (n < 77) ?\
    \ 2L :\n            (n < 78) ? 3L :\n            (n < 79) ? 3L :\n           \
    \ (n < 84) ? 4L :\n            (n < 99) ? 5L :\n            (n < 100) ? 7L :\n\
    \            (n < 111) ? 8L :\n            (n < 113) ? 9L :\n            (n <\
    \ 117) ? 10L :\n            (n < 121) ? 11L :\n            (n < 133) ? 12L :\n\
    \            (n < 143) ? 13L :\n            (n < 144) ? 14L :\n            (n\
    \ < 156) ? 15L :\n            (n < 177) ? 16L :\n            (n < 187) ? 17L :\n\
    \            (n < 199) ? 18L :\n            (n < 200) ? 19L :\n            (n\
    \ < 211) ? 20L :\n            (n < 222) ? 21L :\n            (n < 233) ? 22L :\n\
    \            (n < 277) ? 23L :\n            (n < 289) ? 24L :\n            (n\
    \ < 299) ? 25L :\n            (n < 300) ? 26L :\n            (n < 311) ? 27L :\n\
    \            (n < 333) ? 28L :\n            (n < 344) ? 29L :\n            (n\
    \ < 355) ? 30L :\n            (n < 366) ? 31L :\n            (n < 377) ? 32L :\n\
    \            (n < 399) ? 33L :\n            (n < 400) ? 34L :\n            (n\
    \ < 411) ? 35L :\n            (n < 422) ? 36L :\n            (n < 477) ? 37L :\n\
    \            (n < 488) ? 38L :\n            (n < 499) ? 39L :\n            (n\
    \ < 500) ? 40L :\n            (n < 557) ? 41L :\n            (n < 566) ? 42L :\n\
    \            (n < 577) ? 43L :\n            (n < 588) ?\nunittest\n{\n    alias\
    \ candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n    assert(candidate(78L)\
    \ == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L) == 3L);\n\
    \    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) == 192L);\n \
    \   assert(candidate(10000L) == 639L);\n    assert(candidate(100000L) == 8026L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvnc3pbp5.d(61): Error: expression expected, not \''unittest\''\n/tmp/tmpvnc3pbp5.d(62):
    Error: found \''{\'' when expecting \'':\''\n/tmp/tmpvnc3pbp5.d(63): Error: expression
    expected, not \''alias\''\n/tmp/tmpvnc3pbp5.d(15): Error: found \''candidate\''
    when expecting \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvnc3pbp5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    enum {\n      i_max_digits\
    \ = 21,\n      i_max_size = i_max_digits + 1,\n    };\n    int[i_max_size] digits;\n\
    \    long count = 0;\n    for (long i = 0; i < n; i++) \n    {\n        if ((i\
    \ % 11 != 0) && (i % 13 != 0)) \n        {\n            continue;\n        }\n\
    \        long rem = i;\n        int sz = 0;\n        while (rem > 0) \n      \
    \  {\n            digits[sz] = rem % 10;\n            rem /= 10;\n           \
    \ sz++;\n        }\n        count += std.array.count!(isSeven)(digits[0..sz]);\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = fizz_buzz;\n\n\
    \    assert(candidate(50L) == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L)\
    \ == 3L);\n    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n\
    \    assert(candidate(4000L) == 192L);\n    assert(candidate(10000L) == 639L);\n\
    \    assert(candidate(100000L) == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprf531ytz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n    auto n_digits = n.digits();\n\
    \    long n_count = 0;\n    foreach(i; 0 .. n_digits.length)\n    {\n        if(n_digits[i]\
    \ == 7)\n        {\n            n_count++;\n        }\n    }\n    return n_count;\n\
    }\n/*\nWrite a function that takes a string, and returns a map from characters\
    \ to their number of occurrences in the string.\n    >>> count_characters(\"hello\"\
    )\n    [\"h\": 1, \"e\": 1, \"l\": 2, \"o\": 1]\n*/\nauto count_characters(string\
    \ s)\n{\n    auto letters = new Map!char[int](['\\0', 0]);\n    foreach(i; 0 ..\
    \ s.length)\n    {\n        if(letters.count(s[i]) == 0)\n        {\n        \
    \    letters[s[i]] = 1;\n        }\n        else\n        {\n            letters[s[i]]++;\n\
    \        }\n    }\n    return letters;\n}\n/*\nWrite a function that accepts a\
    \ uint64_t and returns the first prime number to occur in its prime factorization.\n\
    \    >>> first_prime_in_factorization(42L)\n    2L\n    >>> first_prime_in_factorization(27L)\n\
    \    3L\n    >>> first_prime_in_factorization(100L)\n    2L\n    >>> first_prime_in_factorization(96L)\n\
    \    2L\n*/\nlong first_prime_in_factorization(ulong n)\n{\n    ulong factor_start\
    \ = 2;\n    if(n == 2)\n    {\n        return n;\n    }\n    while(n % factor_start\
    \ != 0)\n    {\n        factor_start++;\n    }\n    return factor_start;\n}\n\
    unittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L) ==\
    \ 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n\
    \    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L)\
    \ == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6vqwtneq.d(33): Error: need size of rightmost array, not type
    int\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6vqwtneq.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015599
