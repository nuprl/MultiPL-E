name: HumanEval_95_check_dict_case
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n\n    Given an associative array,\
  \ return true if all keys are strings in lower \n    case or all keys are strings\
  \ in upper case, else return false.\n    The function should return false is the\
  \ given associative array is empty.\n    Examples:\n    >>> check_dict_case([\"\
  a\": \"apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"\
  a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n   \
  \ >>> check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
  \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
  : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
  , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
  \ dict) \n"
tests: "unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
  p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
  p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
  \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
  ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"36\"\
  , \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\":\
  \ \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
  : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
  \ == false);\n}\nvoid main(){}"
completions: ["{ \n    if(dict.isNull) return false;\n    int dict_length = dict.get.length;\n\
    \    if(dict_length == 0) return false;\n    bool is_upper_case = false;\n   \
    \ foreach(key; dict.get.keys)\n    {\n        if(key.length == 0) return false;\n\
    \        if(key.length > 1) is_upper_case = key[0].isUpper;\n        if(is_upper_case\
    \ && !key.isUpper) return false;\n        if(!is_upper_case && !key.isLower) return\
    \ false;\n    }\n    return true;\n}", "{\n    if(dict is null)\n        return\
    \ false;\n    if(dict.length == 0)\n        return false;\n    auto keys = dict.keys;\n\
    \    auto b = any!(isUpper(keys[0][0]));\n    return !any!(isLower(keys[0][0]))\
    \ == b;\n}", "{ \n    if (dict.isNull)\n        return false;\n    \n    enum\
    \ is_upper = true;\n    enum is_lower = true;\n    //foreach (k, v; dict) {\n\
    \    for (auto key : dict.keys) {\n        string k = key;\n        string v =\
    \ dict[key];\n        is_upper = is_upper && k.toUpper() == k;\n        is_lower\
    \ = is_lower && k.toLower() == k;\n    }\n    return is_upper || is_lower;\n}",
  "{\n    if (dict == null)\n        return false;\n    bool result = true;\n    bool\
    \ upper;\n    foreach (k, v; dict)\n    {\n        if (k.length == 0) \n     \
    \   {\n            result = false;\n            break;\n        }\n        if\
    \ (upper == false && k[0].isUpper())\n        {\n            upper = true;\n \
    \       }\n        if (upper == true && k[0].isLower())\n        {\n         \
    \   result = false;\n            break;\n        }\n    }\n    return result;\n\
    }", "{\n    if (dict is null)\n        return false;\n    bool is_lower = dict.keys[0].isLower;\n\
    \    bool is_upper = dict.keys[0].isUpper;\n    if (is_lower || is_upper)\n  \
    \  {\n        foreach (key; dict.keys)\n        {\n            if (is_lower)\n\
    \            {\n                if (!key.isLower)\n                    return\
    \ false;\n            }\n            else if (is_upper)\n            {\n     \
    \           if (!key.isUpper)\n                    return false;\n           \
    \ }\n        }\n        return true;\n    }\n    return false;\n}\n/*\n    Return\
    \ the number of vowels in a given string.\n    The function should return an integer.\n\
    \    Example:\n    >>> count_vowels(\"apple\".nullable)\n    2\n    >>> count_vowels(\"\
    HELLO\".nullable)\n    2\n    >>> count_vowels(\"fun\".nullable)\n    1\n    >>>\
    \ count_vowels(\"123\".nullable)\n    0\n*/", "{\n    if (dict == null) return\
    \ false;\n    string[] keys = dict.keys;\n    bool lower_case = true;\n    bool\
    \ upper_case = true;\n    foreach (key; keys) \n    {\n        if (lower_case)\
    \ \n        {\n            if (key.length != key.toLower().length) \n        \
    \    {\n                lower_case = false;\n            }\n        }\n      \
    \  if (upper_case) \n        {\n            if (key.length != key.toUpper().length)\
    \ \n            {\n                upper_case = false;\n            }\n      \
    \  }\n        if (!lower_case && !upper_case) \n        {\n            return\
    \ false;\n        }\n    }\n    return true;\n}", "{\n    if(dict.isNull)\n  \
    \      return false;\n    string[] keyList = dict.get.keys.array;\n    bool allUpper\
    \ = true;\n    bool allLower = true;\n    foreach(key; keyList) \n    {\n    \
    \    if(isUpper(key))\n            allLower = false;\n        else\n         \
    \   allUpper = false;\n    }\n    return allUpper || allLower;\n}", "{\n    if(dict\
    \ is null) return false;\n    if(dict.empty) return false;\n    bool first_is_upper\
    \ = dict.keys[0].isUpper;\n    foreach(key; dict.keys) \n    {\n        if(key.isUpper\
    \ == first_is_upper) continue;\n        return false;\n    }\n    return true;\n\
    }", "{\n    string caseType;\n    if (dict is null) return false;\n    foreach\
    \ (key, value; dict)\n    {\n        if (is(typeof(key) == string))\n        {\n\
    \            if (caseType.empty)\n            {\n                if (key.isUpperCase)\n\
    \                    caseType = \"upper\";\n                else if (key.isLowerCase)\n\
    \                    caseType = \"lower\";\n                else\n           \
    \         return false;\n            }\n            else\n            {\n    \
    \            if (caseType == \"upper\" && !key.isUpperCase)\n                \
    \    return false;\n                else if (caseType == \"lower\" && !key.isLowerCase)\n\
    \                    return false;\n            }\n        }\n        else\n \
    \           return false;\n    }\n    return true;\n}", "{\n    bool isLowercase\
    \ = true;\n    bool isUppercase = true;\n    if (dict.isNull)\n        return\
    \ false;\n    foreach (k, v; dict) \n    {\n        isLowercase &= isAlpha(k[0])\
    \ && k.toLower == k;\n        isUppercase &= isAlpha(k[0]) && k.toUpper == k;\n\
    \    }\n    return isLowercase || isUppercase;\n}", "in\n{\n    import std.algorithm;\n\
    \    import std.ascii;\n    import std.conv;\n    import std.range;\n    import\
    \ std.regex;\n    import std.traits;\n}\nbody\n{\n    auto result = dict.value\n\
    \        .all!\"a.isUpper\" || dict.value\n        .all!\"a.isLower\";\n    return\
    \ result;\n}", "in {\n    assert(dict !is null);\n}\nbody {\n    if (dict.isNull)\
    \ return false;\n    auto dict_keys = dict.keys.sort;\n    foreach (key; dict_keys)\
    \ {\n        if (!isUpperCase(key) && !isLowerCase(key)) return false;\n    }\n\
    \    if (dict_keys.length <= 1) return true;\n    if (isUpperCase(dict_keys[0]))\
    \ {\n        foreach (key; dict_keys)\n            if (!isUpperCase(key)) return\
    \ false;\n    } else {\n        foreach (key; dict_keys)\n            if (!isLowerCase(key))\
    \ return false;\n    }\n    return true;\n}", "    if (isInputRange!(typeof(dict)))\n\
    {\n    if (dict is null) return false;\n    /*\n        In Nim we can make a String\
    \ to be upper or lower case by adding\n        ^ to the front of it (see https://nim-lang.org/docs/manual.html#case-conversion)\n\
    \        so we can use that as a way to determine if all keys are upper or all\
    \ \n        keys are lower.\n        str.isupper seems to return false all the\
    \ time, so we can't use that.\n    */\n    // This is just a cheat to get us started,\
    \ this is not the answer\n    return dict.all!((pair) => pair.key.isupper);\n}",
  "    if(is(TypeOf!(dict) == Nullable!(string[string])))\n{\n    if(dict.isNull)\n\
    \        return false;\n    bool allUpper = true;\n    bool allLower = true;\n\
    \    foreach(key; dict.get.keys)\n    {\n        if(!allUpper)\n            break;\n\
    \        allUpper = !(allUpper && anyLower(key));\n    }\n    foreach(key; dict.get.keys)\n\
    \    {\n        if(!allLower)\n            break;\n        allLower = !(allLower\
    \ && anyUpper(key));\n    }\n    return (allUpper || allLower);\n}", "{\n    if\
    \ (dict.isNull) return false;\n    string[] ks = dict.keys();\n    if (ks.length\
    \ == 0) return false;\n    bool is_lower = true;\n    bool is_upper = true;\n\
    \    foreach (int k; ks) {\n        if (is_lower && k >= 'A' && k <= 'Z')\n  \
    \          is_lower = false;\n        if (is_upper && k >= 'a' && k <= 'z')\n\
    \            is_upper = false;\n    }\n    return is_lower || is_upper;\n}", "{\n\
    \    if (dict is null)\n        return false;\n    bool lower = dict.byKey.all!(k\
    \ => k.all!(c => c.isLower));\n    bool upper = dict.byKey.all!(k => k.all!(c\
    \ => c.isUpper));\n    return lower || upper;\n}", "{\n    if (dict is null) return\
    \ false;\n    else if (dict.length == 0) return false;\n    bool isLower = dict.keys[0].isLower;\n\
    \    foreach (k, v; dict)\n    {\n        if (k.isLower != isLower) return false;\n\
    \    }\n    return true;\n}", "{\n    static immutable digitR = appender!(Chain)(\"\
    0\" .. \"9\");\n    static immutable upperR = appender!(Chain)(\"A\" .. \"Z\"\
    );\n    static immutable lowerR = appender!(Chain)(\"a\" .. \"z\");\n    bool\
    \ lower = true;\n    bool upper = true;\n    if (dict is null)\n        return\
    \ false;\n    foreach (key; dict.keys)\n    {\n        foreach (ch; key)\n   \
    \     {\n            if (digitR.canFind(ch))\n                return false;\n\
    \            if (lowerR.canFind(ch))\n                upper = false;\n       \
    \     if (upperR.canFind(ch))\n                lower = false;\n        }\n   \
    \ }\n    return lower || upper;\n}", "{\n    if (dict.isNull) return false;\n\
    \    else \n    {\n        string[] keys = dict.isNull ? [] : dict.get.keys;\n\
    \        if (keys.length == 0) return false;\n        bool allLowerCase = true;\n\
    \        bool allUpperCase = true;\n        foreach (key; keys)\n        {\n \
    \           if (key.isLower) allUpperCase = false;\n            else if (key.isUpper)\
    \ allLowerCase = false;\n            else return false;\n        }\n        return\
    \ allLowerCase || allUpperCase;\n    }\n}", "{\n    \n    if (dict is null) \n\
    \    {\n        return false;\n    }\n    int lower = 0;\n    int upper = 0;\n\
    \    foreach (key; dict.keys) \n    {\n        if (key.isLower) \n        {\n\
    \            lower++;\n        }\n        else if (key.isUpper) \n        {\n\
    \            upper++;\n        }\n        else \n        {\n            return\
    \ false;\n        }\n    }\n    if (lower == 0 || upper == 0) \n    {\n      \
    \  return true;\n    }\n    return false;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
