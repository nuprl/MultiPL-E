name: HumanEval_111_histogram
language: d
results:
- program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    // check length\
    \ of string\n    if (test.length < 1) \n    {\n        return null;\n    }\n \
    \   // store the letters and their count in an associative array\n    auto dict\
    \ = test.split(\" \").assocArray;\n    // store the letters with highest count\n\
    \    auto highest_letters = new Nullable!(string[])(null);\n    // store the highest\
    \ count\n    auto highest_count = 0L;\n    foreach (word; dict) \n    {\n    \
    \    // if count is greater than highest update highest\n        if (word.value\
    \ > highest_count) \n        {\n            highest_count = word.value;\n    \
    \        highest_letters = new Nullable!(string[])([word.key]);\n        }\n \
    \       // if count is equal to highest add to highest\n        else if (word.value\
    \ == highest_count) \n        {\n            highest_letters.value ~= word.key;\n\
    \        }\n    }\n    // create a return dict\n    auto return_dict = new Nullable!(long[string])(null);\n\
    \    // if highest_letters is null return null\n    if (highest_letters is null)\
    \ \n    {\n        return return_dict;\n    }\n    // copy the highest_letters\
    \ into return_dict\n    foreach (letter; highest_letters.value) \n    {\n    \
    \    return_dict.value[letter] = highest_count;\n    }\n    return return_dict;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_lzqy6km.d(30): Error: no property `split` for type `string`\\\
    n/tmp/tmp_lzqy6km.d(57): Error: no property `value` for type `Nullable!(string[])*`\\\
    n/tmp/tmp_lzqy6km.d(27): Error: cannot implicitly convert expression `null` of\
    \ type `typeof(null)` to `Nullable!(long[string])`\\n/tmp/tmp_lzqy6km.d(54): Error:\
    \ cannot implicitly convert expression `return_dict` of type `Nullable!(long[string])*`\
    \ to `Nullable!(long[string])`\\n/tmp/tmp_lzqy6km.d(61): Error: cannot implicitly\
    \ convert expression `return_dict` of type `Nullable!(long[string])*` to `Nullable!(long[string])`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_lzqy6km.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n\tauto words =\
    \ test.split();\n\tlong[string] counter;\n\tforeach(word; words) {\n\t\t++counter[word];\n\
    \t}\n\tlong max = -1;\n\tforeach(key, value; counter) {\n\t\tif(value > max) max\
    \ = value;\n\t}\n\tlong[string] result;\n\tforeach(key, value; counter) {\n\t\t\
    if(value == max) result[key] = value;\n\t}\n\tif(result.empty) {\n\t\treturn null;\n\
    \t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n\
    \        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5hgnaceb.d(24): Error: no property `split` for type `string`\\\
    n/tmp/tmp5hgnaceb.d(37): Error: no property `empty` for type `long[string]`\\\
    n/tmp/tmp5hgnaceb.d(38): Error: cannot implicitly convert expression `null` of\
    \ type `typeof(null)` to `Nullable!(long[string])`\\n/tmp/tmp5hgnaceb.d(40): Error:\
    \ cannot implicitly convert expression `result` of type `long[string]` to `Nullable!(long[string])`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5hgnaceb.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result;\n    /*\n    1)\n    // way too much work\n    //std.regex.split(test,\
    \ \"\\\\s\") - splits by any whitespace character, as mentioned in the end of\
    \ the doc page:\n    //\"For example, if the whitespace characters in the input\
    \ string are a tab character, followed by a newline character, followed by the\
    \ letter 'c', the array returned by the Split method contains three elements:\
    \ two empty strings, and the letter 'c'.\"\n    // thus the order of the elements\
    \ in the result array will be the same as the order in which they were extracted\
    \ from the input string\n    // this way we can map the position in the array\
    \ with the letter\n    if (test == \"\")\n    {\n        result = ___null_dict___;\n\
    \    } else\n    {\n        auto splitted = std.regex.split(test, \"\\\\s\");\n\
    \        // result = std.array.count(splitted);\n        // auto aaa = to!(string[])(splitted);\n\
    \        // auto idx = std.array.position(splitted, \"a\");\n        // auto aaa\
    \ = to!(string[])splitted;\n        // auto idx = std.array.position(splitted,\
    \ \"a\");\n        // auto test = std.algorithm.find(splitted, \"a\");\n     \
    \   // writeln(test.current);\n        // auto test = std.array.find(splitted,\
    \ \"a\");\n        // writeln(test);\n        // auto test = std.array.find(splitted,\
    \ \"b\");\n        // writeln(test);\n        // auto test = std.array.find(splitted,\
    \ \"c\");\n        // writeln(test);\n        // TODO: sort the resulting array\
    \ so the most repeating letter comes first\n        // TODO: extract the letter\
    \ with the most repetitions\n        // TODO: count the number of times the letter\
    \ occurs in the original string\n        // TODO: return the resulting associative\
    \ array\n    }\n    */\n    /*\n    2)\n    // must be in a loop\n    if (test\
    \ == \"\")\n    {\n        result = ___null_dict___;\n    } else\n    {\n\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprr2w_9ok.d(57): Error: unterminated /* */ comment\\n/tmp/tmprr2w_9ok.d(111):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprr2w_9ok.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    enum letters\
    \ = test.split(' ');\n    if (letters.length == 0) \n    {\n        return ___null_dict___;\n\
    \    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result\
    \ = candidate(\"a b b a\");\n        assert(!result.isNull && result.get == [\"\
    a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgtpok41b.d(29): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgtpok41b.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n    pure \n{\n  \
    \  import std.algorithm.comparison : max;\n    auto res = test.split(' ');\n \
    \   auto len = res.length;\n    if (len == 0) return null;\n    long[string] ret;\n\
    \    for (auto i = 0; i < len; i++)\n    {\n        if (ret.find(res[i]) != null)\
    \ ret[res[i]]++;\n        else ret[res[i]] = 1;\n    }\n    auto max = ret.values.max;\n\
    \    auto key = ret.keys.filter!(t => ret[t] == max);\n    ret = ret.retain!(k\
    \ => key.canFind(k));\n    return ret;\n}\n/*\ngiven an array of strings and an\
    \ integer, determine the difference between \nthe maximum and minimum length of\
    \ the strings.\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto\
    \ result = candidate(\"a b b a\");\n        assert(!result.isNull && result.get\
    \ == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c\
    \ a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpumpb0kcm.d(40): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpumpb0kcm.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    import std.algorithm;\n\
    \    import std.conv;\n    import std.exception;\n    Nullable!(long[string])\
    \ ret;\n    if(!test.length)\n        return ret;\n    long[string] arr;\n   \
    \ foreach(i,v;test.split(\" \"))\n    {\n        if(arr.count(v)==0)\n       \
    \     arr[v]=1;\n        else\n            arr[v]++;\n    }\n    long max=arr.maxElement!((a,b)=>a>b).value;\n\
    \    ret=new long[string];\n    foreach(i,v;arr)\n    {\n        if(v.value==max)\n\
    \            ret.get.insert(v.key,v.value);\n    }\n    return ret;\n}\n/*\nGiven\
    \ a string representing a space separated lowercase letters, return an associative\
    \ array\n    of the letter with the most repetition and containing the corresponding\
    \ count.\n    If several letters have the same occurrence, return all of them.\n\
    \    \n    Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L,\
    \ \"c\": 1L].nullable\n    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\":\
    \ 2L].nullable\n    >>> histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n\
    \    >>> histogram(\"b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\
    \")\n    ___null_dict___\nunittest\n{\n    alias candidate = histogram;\n\n{\n\
    \        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnqfxc1lw.d(47): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnqfxc1lw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    auto testTot\
    \ = test.length;\n    if (testTot == 0) return null;\n    auto words = test.split(\"\
    \ \");\n    auto wordsTot = words.length;\n    int[] ocurr = new int[](wordsTot);\n\
    \    int most = 0;\n    foreach (i, word; words) \n    {\n        if (word !in\
    \ ocurr) \n        {\n            ocurr[word] = words.count(word);\n         \
    \   if (ocurr[word] > most) \n            {\n                most = ocurr[word];\n\
    \            }\n        }\n    }\n    auto ret = new Nullable!(long[string])();\n\
    \    auto ret2 = new long[string]();\n    foreach (word, n; ocurr) \n    {\n \
    \       if (n == most) \n        {\n            ret2[word] = n;\n        }\n \
    \   }\n    ret.data = ret2;\n    return ret;\n}\n/*\nThe previous function, even\
    \ if is working, can be improved by not adding a new key in the associative array\n\
    \    if it already exists.\n    If a key is not in the associative array, you\
    \ can add a new key and its value with `[] = value`.\n    If a key is already\
    \ in the associative array, you can update its value with `[] = newValue`.\n \
    \   You can also get the value of a key, with `[]`.\n    You can have a look at\
    \ the following example to get the idea:\n    \n    >>> auto a = [\"a\": 0L, \"\
    b\": 1L];\n    >>> a[\"a\"] = 10L;\n    >>> a[\"b\"] = 20L;\n    >>> a[\"c\"]\
    \ = 30L;\n    >>> a\n    [\"a\": 10L, \"b\": 20L, \"c\": 30L]\n    >>> a[\"d\"\
    ] = 40L;\n    >>> a\n    [\"a\": 10L, \"b\": 20L, \"c\": 30L, \"d\": 40L]\n  \
    \  >>> a[\"d\"]\n    40L\n    >>> a[\"e\"]\n    ___null_dict___\n    >>> a[\"\
    e\"] = 50L\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result\
    \ = candidate(\"a b b a\");\n        assert(!result.isNull && result.get == [\"\
    a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf69isafl.d(53): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf69isafl.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    import std.algorithm.iteration\
    \ : maxElement;\n    return test.words\n        .groupBy!((a) => a)\n        .map!((a)\
    \ => tuple(a[0], a[1].length))\n        .tupleof\n        .maxElement!((a, b)\
    \ => a[1] < b[1])\n        .filter!((a) => a[1] == maxElement!((a, b) => a[1]\
    \ < b[1]).tupleof[1])\n        .assocArray\n        .nullable;\n}\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpds5tpjua.d(24): Error: module `std.algorithm.iteration` import\
    \ `maxElement` not found\\n/tmp/tmpds5tpjua.d(25): Error: no property `words`\
    \ for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpds5tpjua.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    import std.algorithm\
    \ : max;\n    import std.algorithm : fill;\n    import std.algorithm : copy;\n\
    \    import std.algorithm : count;\n    import std.range : map;\n    import std.array\
    \ : array;\n    import std.string : split;\n    import std.range : isEmpty;\n\
    \    long[] histo = new long[test.length];\n    histo.fill(0);\n    test.split(\"\
    \ \").each!(s => \n    {\n        histo[s[0]]++;\n    });\n    long max = histo.max();\n\
    \    if (max == 0)\n    {\n        return null;\n    }\n    auto result = new\
    \ long[char]().init;\n    foreach (i, c; histo)\n    {\n        if (c == max)\n\
    \        {\n            result[char(i)] = c;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuhnpsymz.d(43): Error: need size of rightmost array, not type\
    \ `char`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuhnpsymz.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    //see if there\
    \ are any letters\n    if(test.length == 0)\n    {\n        return null;\n   \
    \ }\n    //tokenize the string\n    auto tokens = test.split;\n    //get an array\
    \ of the set of letters\n    auto set_tokens = tokens.unique;\n    //initialize\
    \ a dictionary\n    auto map = typeof(return)();\n    //iterate over the set of\
    \ letters\n    foreach(letter; set_tokens)\n    {\n        //set the dictionary\
    \ value\n        map[letter] = tokens.count(letter);\n    }\n    //get the maximum\
    \ value for this dictionary\n    auto max = map.values.max;\n    //get the keys\
    \ that have that value\n    auto keys = map.keys.filter!(l => map[l] == max);\n\
    \    //declare return variable\n    Nullable!(long[string]) result;\n    //get\
    \ the resulting dictionary\n    foreach(key; keys)\n    {\n        result[key]\
    \ = map[key];\n    }\n    //return\n    return result;\n}\n/*\n    >>> histogram(\"\
    a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n    >>> histogram(\"\
    a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"a b c a b\"\
    )\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"b b b b a\")\n   \
    \ [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n*/\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp29wsmcol.d(30): Error: no property `split` for type `string`\\\
    n/tmp/tmp29wsmcol.d(42): Error: no property `max` for type `long[]`\\n/tmp/tmp29wsmcol.d(44):\
    \ Error: no property `filter` for type `string[]`\\n/tmp/tmp29wsmcol.d(27): Error:\
    \ cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!(long[string])`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp29wsmcol.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    if (test.empty)\
    \ \n    {\n        return null;\n    }\n    //split the string\n    string[] splitArray\
    \ = test.split(\" \");\n    long[string] full = [splitArray[0]: 1L];\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppvj62xh5.d(31): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppvj62xh5.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    import std.array;\n\
    \    import std.conv;\n    import std.range;\n    import std.string;\n    import\
    \ std.traits;\n    import std.typecons;\n    import std.algorithm;\n    import\
    \ std.math;\n    import std.typecons;\n    import std.stdio;\n    import std.algorithm\
    \ : max;\n    Nullable!(long[string]) histo(string test) \n    {\n        return\
    \ test.split.groupBy.values.max;\n    }\n    if (test.empty) \n    {\n       \
    \ return ___null_dict___;\n    }\n    else \n    {\n        return histo(test);\n\
    \    }\n}\n/*\nReturn the average of a given slice of numbers.\n    If the slice\
    \ is empty, return a Nullable!T\n    where T is the type of the elements in the\
    \ array.\n    \n    Example:\n    >>> mean([1, 2, 3])\n    2.0\n    >>> mean([])\n\
    \    ___null___\n    \n*/\nunittest\n{\n    alias candidate = histogram;\n\n{\n\
    \        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpiwnyt51k.d(37): Error: no property `groupBy` for type `string[]`\\\
    n/tmp/tmpiwnyt51k.d(41): Error: undefined identifier `___null_dict___`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiwnyt51k.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result;\n    if (test.length) \n    {\n        auto test_array = test.split(\"\
    \ \");\n        result = new long[string];\n        foreach (char; test_array)\n\
    \        {\n            if (!result.isNull)\n            {\n                result[char]++;\n\
    \            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp55fubcj3.d(29): Error: no identifier for declarator `char`\\\
    n/tmp/tmp55fubcj3.d(33): Error: found `]` when expecting `.` following char\\\
    n/tmp/tmp55fubcj3.d(33): Error: found `++` when expecting identifier following\
    \ `char`.\\n/tmp/tmp55fubcj3.d(33): Error: found `;` when expecting `,`\\n/tmp/tmp55fubcj3.d(34):\
    \ Error: expression expected, not `}`\\n/tmp/tmp55fubcj3.d(35): Error: found `}`\
    \ when expecting `,`\\n/tmp/tmp55fubcj3.d(36): Error: expression expected, not\
    \ `}`\\n/tmp/tmp55fubcj3.d(37): Error: found `return` when expecting `,`\\n/tmp/tmp55fubcj3.d(37):\
    \ Error: found `;` when expecting `,`\\n/tmp/tmp55fubcj3.d(38): Error: expression\
    \ expected, not `}`\\n/tmp/tmp55fubcj3.d(39): Error: found `unittest` when expecting\
    \ `,`\\n/tmp/tmp55fubcj3.d(84): Error: found `void` when expecting `,`\\n/tmp/tmp55fubcj3.d(84):\
    \ Error: found `{` when expecting `,`\\n/tmp/tmp55fubcj3.d(84): Error: expression\
    \ expected, not `}`\\n/tmp/tmp55fubcj3.d(84): Error: found `End of File` when\
    \ expecting `,`\\n/tmp/tmp55fubcj3.d(84): Error: found `End of File` when expecting\
    \ `]`\\n/tmp/tmp55fubcj3.d(84): Error: found `End of File` when expecting `;`\
    \ following statement\\n/tmp/tmp55fubcj3.d(84): Error: found `End of File` when\
    \ expecting `}` following compound statement\\n/tmp/tmp55fubcj3.d(84): Error:\
    \ found `End of File` when expecting `}` following compound statement\\n/tmp/tmp55fubcj3.d(84):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp55fubcj3.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    auto parts\
    \ = test.split;\n    if (parts.length == 0)\n        return null;\n    auto ret\
    \ = to(long[string]).init;\n    foreach (t; parts)\n    {\n        if (t !in ret)\n\
    \            ret[t] = 1;\n        else\n            ret[t] += 1;\n    }\n    //get\
    \ the max element\n    int max = ret.values.max;\n    ret.removeIf!(k, v => v\
    \ != max);\n    return ret;\n}\nstatic assert(histogram(\"a b c\") == [\"a\":\
    \ 1L, \"b\": 1L, \"c\": 1L].nullable);\nstatic assert(histogram(\"a b b a\") ==\
    \ [\"a\": 2L, \"b\": 2L].nullable);\nstatic assert(histogram(\"a b c a b\") ==\
    \ [\"a\": 2L, \"b\": 2L].nullable);\nstatic assert(histogram(\"b b b b a\") ==\
    \ [\"b\": 4L].nullable);\nstatic assert(histogram(\"\") == null);\nstatic assert(histogram(\"\
    a a b b b\") == [\"b\": 3L].nullable);\n \n \n \n /*\n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdx7_3f0n.d(27): Error: found `[` when expecting `.` following\
    \ long\\n/tmp/tmpdx7_3f0n.d(27): Error: found `]` when expecting `,`\\n/tmp/tmpdx7_3f0n.d(49):\
    \ Error: unterminated /* */ comment\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpdx7_3f0n.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    import std.traits;\n\
    \    import std.algorithm;\n    import std.algorithm.comparison;\n    import std.array;\n\
    \    import std.conv;\n    import std.range;\n    import std.stdio;\n    import\
    \ std.string;\n    import std.typecons;\n    import std.container;\n    import\
    \ std.math;\n    import std.algorithm.iteration;\n    import std.format;\n   \
    \ import std.typecons;\n    import std.typecons;\n    import std.typecons;\n \
    \   import std.bigint;\n    import std.bigint;\n    import std.bigint;\n    import\
    \ std.bigint;\n    import std.bigint;\n    import std.bigint;\n    import std.bigint;\n\
    \    import std.bigint;\n    import std.bigint;\n    import std.bigint;\n    import\
    \ std.bigint;\n    import std.bigint;\n    import std.bigint;\n    import std.bigint;\n\
    \    import std.bigint;\n    import std.bigint;\n    import std.bigint;\n    import\
    \ std.bigint;\n    import std.bigint;\n    import std.bigint;\n    import std.bigint;\n\
    \    import std.bigint;\n    import std.bigint;\n    import std.bigint;\n    import\
    \ std.bigint;\n    import std.bigint;\n    import std.bigint;\n    import std.bigint;\n\
    \    import std.bigint;\n    import std.bigint;\n    import std.bigint;\n    import\
    \ std.bigint;\n    import std.bigint;\n    import std.bigint;\n    import std.bigint;\n\
    \    import std.bigint;\n    import std.bigint;\n    import std.bigint;\n    import\
    \ std.bigint;\n    import std.bigint;\n    import std.bigint;\n    import std.bigint;\n\
    \    import std.bigint;\n    import std.bigint;\n    import std.bigint;\n    import\
    \ std.bigint;\n    import std.bigint;\n    import std.big\nunittest\n{\n    alias\
    \ candidate = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4w4paww2.d(88): Error: `;` expected\\n/tmp/tmp4w4paww2.d(133):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4w4paww2.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ result = to!(long[string])(null);\n    string[] list = test.split(\" \");\n\
    \    if (list.length == 0) return null;\n    foreach (element; list)\n    {\n\
    \        if (result.contains(element)) result[element] += 1;\n        else result[element]\
    \ = 1;\n    }\n    long max = maxElement(result.values);\n    foreach (key, value;\
    \ result)\n    {\n        if (value != max) result.remove(key);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto\
    \ result = candidate(\"a b b a\");\n        assert(!result.isNull && result.get\
    \ == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c\
    \ a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpv0k4_9fy.d(24): Error: template instance `to!(long[string])`\
    \ template `to` is not defined, did you mean No?\\n/tmp/tmpv0k4_9fy.d(25): Error:\
    \ no property `split` for type `string`\\n/tmp/tmpv0k4_9fy.d(29): Error: no property\
    \ `contains` for type `long[string]`\\n/tmp/tmpv0k4_9fy.d(32): Error: undefined\
    \ identifier `maxElement`\\n/tmp/tmpv0k4_9fy.d(26): Error: cannot implicitly convert\
    \ expression `null` of type `typeof(null)` to `Nullable!(long[string])`\\n/tmp/tmpv0k4_9fy.d(37):\
    \ Error: cannot implicitly convert expression `result` of type `long[string]`\
    \ to `Nullable!(long[string])`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpv0k4_9fy.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    // TODO: implement\
    \ this function\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto\
    \ result = candidate(\"a b b a\");\n        assert(!result.isNull && result.get\
    \ == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c\
    \ a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplzuuytlc.d(25): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplzuuytlc.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n\tif (test.empty)\
    \ \n\t{\n\t\treturn null;\n\t}\n\timmutable charSeparator = ' ';\n\tauto words\
    \ = test.split(charSeparator);\n\tassert(words.length > 0);\n\tauto strHistogram\
    \ = new long[string];\n\tauto wordCounter = new long[string];\n\t\n\tforeach(w;\
    \ words)\n\t{\n\t\tauto i = wordCounter[w];\n\t\twordCounter[w] = i + 1;\n\t\t\
    strHistogram[w] = i + 1;\n\t}\n\t\n\tauto max = wordCounter.values.max;\n\tauto\
    \ ret = new long[string];\n\t\n\tforeach(k,v; strHistogram)\n\t{\n\t\tif (v ==\
    \ max)\n\t\t{\n\t\t\tret[k] = v;\n\t\t}\n\t}\n\t\n\tif (ret.length == 0)\n\t{\n\
    \t\treturn null;\n\t}\n\t\n\treturn ret;\n}\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnpxmh17i.d(24): Error: no property `empty` for type `string`\\\
    n/tmp/tmpnpxmh17i.d(29): Error: no property `split` for type `string`\\n/tmp/tmpnpxmh17i.d(31):\
    \ Error: cannot pass type `string` as a function argument\\n/tmp/tmpnpxmh17i.d(32):\
    \ Error: cannot pass type `string` as a function argument\\n/tmp/tmpnpxmh17i.d(42):\
    \ Error: cannot pass type `string` as a function argument\\n/tmp/tmpnpxmh17i.d(26):\
    \ Error: cannot implicitly convert expression `null` of type `typeof(null)` to\
    \ `Nullable!(long[string])`\\n/tmp/tmpnpxmh17i.d(54): Error: cannot implicitly\
    \ convert expression `null` of type `typeof(null)` to `Nullable!(long[string])`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnpxmh17i.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    size_t letterCount\
    \ = test.length;\n    Nullable!(long[string])letters = Nullable!(long[string])();\n\
    \    Nullable!(long[string])results = Nullable!(long[string])();\n    if (letterCount\
    \ > 0) \n    {\n        long[string] letters = new long[string](min(letterCount,\
    \ 256L));\n        foreach (index, letter; test) \n        {\n            ++letters[letter];\n\
    \        }\n        size_t maxValue = 0;\n        foreach (index, letter; test)\
    \ \n        {\n            if (letters[letter] > maxValue) \n            {\n \
    \               maxValue = letters[letter];\n            }\n        }\n      \
    \  foreach (index, letter; test) \n        {\n            if (letters[letter]\
    \ == maxValue) \n            {\n                results[letter] = maxValue;\n\
    \            }\n        }\n    }\n    return results;\n}\nunittest\n{\n    alias\
    \ candidate = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgzfsvrlu.d(29): Error: cannot pass type `string` as a function\
    \ argument\\n/tmp/tmpgzfsvrlu.d(29): Error: variable `letters` is shadowing variable\
    \ `tmpgzfsvrlu.histogram.letters`\\n/tmp/tmpgzfsvrlu.d(32): Error: cannot implicitly\
    \ convert expression `letter` of type `immutable(char)` to `string`\\n/tmp/tmpgzfsvrlu.d(37):\
    \ Error: cannot implicitly convert expression `letter` of type `immutable(char)`\
    \ to `string`\\n/tmp/tmpgzfsvrlu.d(39): Error: cannot implicitly convert expression\
    \ `letter` of type `immutable(char)` to `string`\\n/tmp/tmpgzfsvrlu.d(44): Error:\
    \ cannot implicitly convert expression `letter` of type `immutable(char)` to `string`\\\
    n/tmp/tmpgzfsvrlu.d(46): Error: cannot implicitly convert expression `letter`\
    \ of type `immutable(char)` to `string`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpgzfsvrlu.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ res = [].assumeUnique;\n    long max_num = 0;\n    foreach(i, c; test) \n  \
    \  {\n        ++res[c];\n        if(res[c] > max_num) \n        {\n          \
    \  max_num = res[c];\n        }\n    }\n    return filter!(x => x.value == max_num)(res).map!(x\
    \ => x.key).nullable;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n\
    \        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpze6nuffo.d(24): Error: no property `assumeUnique` for type `void[]`\\\
    n/tmp/tmpze6nuffo.d(28): Error: cannot implicitly convert expression `c` of type\
    \ `immutable(char)` to `string`\\n/tmp/tmpze6nuffo.d(29): Error: cannot implicitly\
    \ convert expression `c` of type `immutable(char)` to `string`\\n/tmp/tmpze6nuffo.d(31):\
    \ Error: cannot implicitly convert expression `c` of type `immutable(char)` to\
    \ `string`\\n/tmp/tmpze6nuffo.d(34): Error: template instance `filter!((x) =>\
    \ x.value == max_num)` template `filter` is not defined\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpze6nuffo.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
