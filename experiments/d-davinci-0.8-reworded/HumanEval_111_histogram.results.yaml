language: d
name: HumanEval_111_histogram
results:
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    // check length\
    \ of string\n    if (test.length < 1) \n    {\n        return null;\n    }\n \
    \   // store the letters and their count in an associative array\n    auto dict\
    \ = test.split(\" \").assocArray;\n    // store the letters with highest count\n\
    \    auto highest_letters = new Nullable!(string[])(null);\n    // store the highest\
    \ count\n    auto highest_count = 0L;\n    foreach (word; dict) \n    {\n    \
    \    // if count is greater than highest update highest\n        if (word.value\
    \ > highest_count) \n        {\n            highest_count = word.value;\n    \
    \        highest_letters = new Nullable!(string[])([word.key]);\n        }\n \
    \       // if count is equal to highest add to highest\n        else if (word.value\
    \ == highest_count) \n        {\n            highest_letters.value ~= word.key;\n\
    \        }\n    }\n    // create a return dict\n    auto return_dict = new Nullable!(long[string])(null);\n\
    \    // if highest_letters is null return null\n    if (highest_letters is null)\
    \ \n    {\n        return return_dict;\n    }\n    // copy the highest_letters\
    \ into return_dict\n    foreach (letter; highest_letters.value) \n    {\n    \
    \    return_dict.value[letter] = highest_count;\n    }\n    return return_dict;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj4i6f_2g.d(30): Error: no property `split` for type `string`

    /tmp/tmpj4i6f_2g.d(57): Error: no property `value` for type `Nullable!(string[])*`

    /tmp/tmpj4i6f_2g.d(27): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    /tmp/tmpj4i6f_2g.d(54): Error: cannot implicitly convert expression `return_dict`
    of type `Nullable!(long[string])*` to `Nullable!(long[string])`

    /tmp/tmpj4i6f_2g.d(61): Error: cannot implicitly convert expression `return_dict`
    of type `Nullable!(long[string])*` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj4i6f_2g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164342
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n\tauto words =\
    \ test.split();\n\tlong[string] counter;\n\tforeach(word; words) {\n\t\t++counter[word];\n\
    \t}\n\tlong max = -1;\n\tforeach(key, value; counter) {\n\t\tif(value > max) max\
    \ = value;\n\t}\n\tlong[string] result;\n\tforeach(key, value; counter) {\n\t\t\
    if(value == max) result[key] = value;\n\t}\n\tif(result.empty) {\n\t\treturn null;\n\
    \t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n\
    \        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppf9xptd5.d(24): Error: no property `split` for type `string`

    /tmp/tmppf9xptd5.d(37): Error: no property `empty` for type `long[string]`

    /tmp/tmppf9xptd5.d(38): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    /tmp/tmppf9xptd5.d(40): Error: cannot implicitly convert expression `result` of
    type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppf9xptd5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164342
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result;\n    /*\n    1)\n    // way too much work\n    //std.regex.split(test,\
    \ \"\\\\s\") - splits by any whitespace character, as mentioned in the end of\
    \ the doc page:\n    //\"For example, if the whitespace characters in the input\
    \ string are a tab character, followed by a newline character, followed by the\
    \ letter 'c', the array returned by the Split method contains three elements:\
    \ two empty strings, and the letter 'c'.\"\n    // thus the order of the elements\
    \ in the result array will be the same as the order in which they were extracted\
    \ from the input string\n    // this way we can map the position in the array\
    \ with the letter\n    if (test == \"\")\n    {\n        result = ___null_dict___;\n\
    \    } else\n    {\n        auto splitted = std.regex.split(test, \"\\\\s\");\n\
    \        // result = std.array.count(splitted);\n        // auto aaa = to!(string[])(splitted);\n\
    \        // auto idx = std.array.position(splitted, \"a\");\n        // auto aaa\
    \ = to!(string[])splitted;\n        // auto idx = std.array.position(splitted,\
    \ \"a\");\n        // auto test = std.algorithm.find(splitted, \"a\");\n     \
    \   // writeln(test.current);\n        // auto test = std.array.find(splitted,\
    \ \"a\");\n        // writeln(test);\n        // auto test = std.array.find(splitted,\
    \ \"b\");\n        // writeln(test);\n        // auto test = std.array.find(splitted,\
    \ \"c\");\n        // writeln(test);\n        // TODO: sort the resulting array\
    \ so the most repeating letter comes first\n        // TODO: extract the letter\
    \ with the most repetitions\n        // TODO: count the number of times the letter\
    \ occurs in the original string\n        // TODO: return the resulting associative\
    \ array\n    }\n    */\n    /*\n    2)\n    // must be in a loop\n    if (test\
    \ == \"\")\n    {\n        result = ___null_dict___;\n    } else\n    {\n\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk_jz5w8b.d(57): Error: unterminated /* */ comment

    /tmp/tmpk_jz5w8b.d(111): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk_jz5w8b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164341
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    enum letters\
    \ = test.split(' ');\n    if (letters.length == 0) \n    {\n        return ___null_dict___;\n\
    \    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result\
    \ = candidate(\"a b b a\");\n        assert(!result.isNull && result.get == [\"\
    a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv6x_71cx.d(29): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv6x_71cx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164341
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n    pure \n{\n  \
    \  import std.algorithm.comparison : max;\n    auto res = test.split(' ');\n \
    \   auto len = res.length;\n    if (len == 0) return null;\n    long[string] ret;\n\
    \    for (auto i = 0; i < len; i++)\n    {\n        if (ret.find(res[i]) != null)\
    \ ret[res[i]]++;\n        else ret[res[i]] = 1;\n    }\n    auto max = ret.values.max;\n\
    \    auto key = ret.keys.filter!(t => ret[t] == max);\n    ret = ret.retain!(k\
    \ => key.canFind(k));\n    return ret;\n}\n/*\ngiven an array of strings and an\
    \ integer, determine the difference between \nthe maximum and minimum length of\
    \ the strings.\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto\
    \ result = candidate(\"a b b a\");\n        assert(!result.isNull && result.get\
    \ == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c\
    \ a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6jmo5ift.d(40): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6jmo5ift.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164341
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    import std.algorithm;\n\
    \    import std.conv;\n    import std.exception;\n    Nullable!(long[string])\
    \ ret;\n    if(!test.length)\n        return ret;\n    long[string] arr;\n   \
    \ foreach(i,v;test.split(\" \"))\n    {\n        if(arr.count(v)==0)\n       \
    \     arr[v]=1;\n        else\n            arr[v]++;\n    }\n    long max=arr.maxElement!((a,b)=>a>b).value;\n\
    \    ret=new long[string];\n    foreach(i,v;arr)\n    {\n        if(v.value==max)\n\
    \            ret.get.insert(v.key,v.value);\n    }\n    return ret;\n}\n/*\nGiven\
    \ a string representing a space separated lowercase letters, return an associative\
    \ array\n    of the letter with the most repetition and containing the corresponding\
    \ count.\n    If several letters have the same occurrence, return all of them.\n\
    \    \n    Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L,\
    \ \"c\": 1L].nullable\n    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\":\
    \ 2L].nullable\n    >>> histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n\
    \    >>> histogram(\"b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\
    \")\n    ___null_dict___\nunittest\n{\n    alias candidate = histogram;\n\n{\n\
    \        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4w4ux3i7.d(47): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4w4ux3i7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164341
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    auto testTot\
    \ = test.length;\n    if (testTot == 0) return null;\n    auto words = test.split(\"\
    \ \");\n    auto wordsTot = words.length;\n    int[] ocurr = new int[](wordsTot);\n\
    \    int most = 0;\n    foreach (i, word; words) \n    {\n        if (word !in\
    \ ocurr) \n        {\n            ocurr[word] = words.count(word);\n         \
    \   if (ocurr[word] > most) \n            {\n                most = ocurr[word];\n\
    \            }\n        }\n    }\n    auto ret = new Nullable!(long[string])();\n\
    \    auto ret2 = new long[string]();\n    foreach (word, n; ocurr) \n    {\n \
    \       if (n == most) \n        {\n            ret2[word] = n;\n        }\n \
    \   }\n    ret.data = ret2;\n    return ret;\n}\n/*\nThe previous function, even\
    \ if is working, can be improved by not adding a new key in the associative array\n\
    \    if it already exists.\n    If a key is not in the associative array, you\
    \ can add a new key and its value with `[] = value`.\n    If a key is already\
    \ in the associative array, you can update its value with `[] = newValue`.\n \
    \   You can also get the value of a key, with `[]`.\n    You can have a look at\
    \ the following example to get the idea:\n    \n    >>> auto a = [\"a\": 0L, \"\
    b\": 1L];\n    >>> a[\"a\"] = 10L;\n    >>> a[\"b\"] = 20L;\n    >>> a[\"c\"]\
    \ = 30L;\n    >>> a\n    [\"a\": 10L, \"b\": 20L, \"c\": 30L]\n    >>> a[\"d\"\
    ] = 40L;\n    >>> a\n    [\"a\": 10L, \"b\": 20L, \"c\": 30L, \"d\": 40L]\n  \
    \  >>> a[\"d\"]\n    40L\n    >>> a[\"e\"]\n    ___null_dict___\n    >>> a[\"\
    e\"] = 50L\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result\
    \ = candidate(\"a b b a\");\n        assert(!result.isNull && result.get == [\"\
    a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu03ea7cq.d(53): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu03ea7cq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164341
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    import std.algorithm.iteration\
    \ : maxElement;\n    return test.words\n        .groupBy!((a) => a)\n        .map!((a)\
    \ => tuple(a[0], a[1].length))\n        .tupleof\n        .maxElement!((a, b)\
    \ => a[1] < b[1])\n        .filter!((a) => a[1] == maxElement!((a, b) => a[1]\
    \ < b[1]).tupleof[1])\n        .assocArray\n        .nullable;\n}\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl9ywpw98.d(24): Error: module `std.algorithm.iteration` import
    `maxElement` not found

    /tmp/tmpl9ywpw98.d(25): Error: no property `words` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl9ywpw98.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164342
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    import std.algorithm\
    \ : max;\n    import std.algorithm : fill;\n    import std.algorithm : copy;\n\
    \    import std.algorithm : count;\n    import std.range : map;\n    import std.array\
    \ : array;\n    import std.string : split;\n    import std.range : isEmpty;\n\
    \    long[] histo = new long[test.length];\n    histo.fill(0);\n    test.split(\"\
    \ \").each!(s => \n    {\n        histo[s[0]]++;\n    });\n    long max = histo.max();\n\
    \    if (max == 0)\n    {\n        return null;\n    }\n    auto result = new\
    \ long[char]().init;\n    foreach (i, c; histo)\n    {\n        if (c == max)\n\
    \        {\n            result[char(i)] = c;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz23sh1wr.d(43): Error: need size of rightmost array, not type `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz23sh1wr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164341
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    //see if there\
    \ are any letters\n    if(test.length == 0)\n    {\n        return null;\n   \
    \ }\n    //tokenize the string\n    auto tokens = test.split;\n    //get an array\
    \ of the set of letters\n    auto set_tokens = tokens.unique;\n    //initialize\
    \ a dictionary\n    auto map = typeof(return)();\n    //iterate over the set of\
    \ letters\n    foreach(letter; set_tokens)\n    {\n        //set the dictionary\
    \ value\n        map[letter] = tokens.count(letter);\n    }\n    //get the maximum\
    \ value for this dictionary\n    auto max = map.values.max;\n    //get the keys\
    \ that have that value\n    auto keys = map.keys.filter!(l => map[l] == max);\n\
    \    //declare return variable\n    Nullable!(long[string]) result;\n    //get\
    \ the resulting dictionary\n    foreach(key; keys)\n    {\n        result[key]\
    \ = map[key];\n    }\n    //return\n    return result;\n}\n/*\n    >>> histogram(\"\
    a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n    >>> histogram(\"\
    a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"a b c a b\"\
    )\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"b b b b a\")\n   \
    \ [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n*/\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr10yq66p.d(30): Error: no property `split` for type `string`

    /tmp/tmpr10yq66p.d(42): Error: no property `max` for type `long[]`

    /tmp/tmpr10yq66p.d(44): Error: no property `filter` for type `string[]`

    /tmp/tmpr10yq66p.d(27): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr10yq66p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164342
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    if (test.empty)\
    \ \n    {\n        return null;\n    }\n    //split the string\n    string[] splitArray\
    \ = test.split(\" \");\n    long[string] full = [splitArray[0]: 1L];\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnce0p8lu.d(31): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnce0p8lu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164341
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    import std.array;\n\
    \    import std.conv;\n    import std.range;\n    import std.string;\n    import\
    \ std.traits;\n    import std.typecons;\n    import std.algorithm;\n    import\
    \ std.math;\n    import std.typecons;\n    import std.stdio;\n    import std.algorithm\
    \ : max;\n    Nullable!(long[string]) histo(string test) \n    {\n        return\
    \ test.split.groupBy.values.max;\n    }\n    if (test.empty) \n    {\n       \
    \ return ___null_dict___;\n    }\n    else \n    {\n        return histo(test);\n\
    \    }\n}\n/*\nReturn the average of a given slice of numbers.\n    If the slice\
    \ is empty, return a Nullable!T\n    where T is the type of the elements in the\
    \ array.\n    \n    Example:\n    >>> mean([1, 2, 3])\n    2.0\n    >>> mean([])\n\
    \    ___null___\n    \n*/\nunittest\n{\n    alias candidate = histogram;\n\n{\n\
    \        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp36pttnlc.d(37): Error: no property `groupBy` for type `string[]`

    /tmp/tmp36pttnlc.d(41): Error: undefined identifier `___null_dict___`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp36pttnlc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164342
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result;\n    if (test.length) \n    {\n        auto test_array = test.split(\"\
    \ \");\n        result = new long[string];\n        foreach (char; test_array)\n\
    \        {\n            if (!result.isNull)\n            {\n                result[char]++;\n\
    \            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbnw1m2gp.d(29): Error: no identifier for declarator `char`

    /tmp/tmpbnw1m2gp.d(33): Error: found `]` when expecting `.` following char

    /tmp/tmpbnw1m2gp.d(33): Error: found `++` when expecting identifier following
    `char`.

    /tmp/tmpbnw1m2gp.d(33): Error: found `;` when expecting `,`

    /tmp/tmpbnw1m2gp.d(34): Error: expression expected, not `}`

    /tmp/tmpbnw1m2gp.d(35): Error: found `}` when expecting `,`

    /tmp/tmpbnw1m2gp.d(36): Error: expression expected, not `}`

    /tmp/tmpbnw1m2gp.d(37): Error: found `return` when expecting `,`

    /tmp/tmpbnw1m2gp.d(37): Error: found `;` when expecting `,`

    /tmp/tmpbnw1m2gp.d(38): Error: expression expected, not `}`

    /tmp/tmpbnw1m2gp.d(39): Error: found `unittest` when expecting `,`

    /tmp/tmpbnw1m2gp.d(84): Error: found `void` when expecting `,`

    /tmp/tmpbnw1m2gp.d(84): Error: found `{` when expecting `,`

    /tmp/tmpbnw1m2gp.d(84): Error: expression expected, not `}`

    /tmp/tmpbnw1m2gp.d(84): Error: found `End of File` when expecting `,`

    /tmp/tmpbnw1m2gp.d(84): Error: found `End of File` '
  stdout: ''
  timestamp: 1660164341
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    auto parts\
    \ = test.split;\n    if (parts.length == 0)\n        return null;\n    auto ret\
    \ = to(long[string]).init;\n    foreach (t; parts)\n    {\n        if (t !in ret)\n\
    \            ret[t] = 1;\n        else\n            ret[t] += 1;\n    }\n    //get\
    \ the max element\n    int max = ret.values.max;\n    ret.removeIf!(k, v => v\
    \ != max);\n    return ret;\n}\nstatic assert(histogram(\"a b c\") == [\"a\":\
    \ 1L, \"b\": 1L, \"c\": 1L].nullable);\nstatic assert(histogram(\"a b b a\") ==\
    \ [\"a\": 2L, \"b\": 2L].nullable);\nstatic assert(histogram(\"a b c a b\") ==\
    \ [\"a\": 2L, \"b\": 2L].nullable);\nstatic assert(histogram(\"b b b b a\") ==\
    \ [\"b\": 4L].nullable);\nstatic assert(histogram(\"\") == null);\nstatic assert(histogram(\"\
    a a b b b\") == [\"b\": 3L].nullable);\n \n \n \n /*\n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl1n85wbz.d(27): Error: found `[` when expecting `.` following long

    /tmp/tmpl1n85wbz.d(27): Error: found `]` when expecting `,`

    /tmp/tmpl1n85wbz.d(49): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl1n85wbz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164341
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    import std.traits;\n\
    \    import std.algorithm;\n    import std.algorithm.comparison;\n    import std.array;\n\
    \    import std.conv;\n    import std.range;\n    import std.stdio;\n    import\
    \ std.string;\n    import std.typecons;\n    import std.container;\n    import\
    \ std.math;\n    import std.algorithm.iteration;\n    import std.format;\n   \
    \ import std.typecons;\n    import std.typecons;\n    import std.typecons;\n \
    \   import std.bigint;\n    import std.bigint;\n    import std.bigint;\n    import\
    \ std.bigint;\n    import std.bigint;\n    import std.bigint;\n    import std.bigint;\n\
    \    import std.bigint;\n    import std.bigint;\n    import std.bigint;\n    import\
    \ std.bigint;\n    import std.bigint;\n    import std.bigint;\n    import std.bigint;\n\
    \    import std.bigint;\n    import std.bigint;\n    import std.bigint;\n    import\
    \ std.bigint;\n    import std.bigint;\n    import std.bigint;\n    import std.bigint;\n\
    \    import std.bigint;\n    import std.bigint;\n    import std.bigint;\n    import\
    \ std.bigint;\n    import std.bigint;\n    import std.bigint;\n    import std.bigint;\n\
    \    import std.bigint;\n    import std.bigint;\n    import std.bigint;\n    import\
    \ std.bigint;\n    import std.bigint;\n    import std.bigint;\n    import std.bigint;\n\
    \    import std.bigint;\n    import std.bigint;\n    import std.bigint;\n    import\
    \ std.bigint;\n    import std.bigint;\n    import std.bigint;\n    import std.bigint;\n\
    \    import std.bigint;\n    import std.bigint;\n    import std.bigint;\n    import\
    \ std.bigint;\n    import std.bigint;\n    import std.big\nunittest\n{\n    alias\
    \ candidate = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9a08_k50.d(88): Error: `;` expected

    /tmp/tmp9a08_k50.d(133): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9a08_k50.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164341
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ result = to!(long[string])(null);\n    string[] list = test.split(\" \");\n\
    \    if (list.length == 0) return null;\n    foreach (element; list)\n    {\n\
    \        if (result.contains(element)) result[element] += 1;\n        else result[element]\
    \ = 1;\n    }\n    long max = maxElement(result.values);\n    foreach (key, value;\
    \ result)\n    {\n        if (value != max) result.remove(key);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto\
    \ result = candidate(\"a b b a\");\n        assert(!result.isNull && result.get\
    \ == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c\
    \ a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphmw21gcf.d(24): Error: template instance `to!(long[string])` template
    `to` is not defined, did you mean No?

    /tmp/tmphmw21gcf.d(25): Error: no property `split` for type `string`

    /tmp/tmphmw21gcf.d(29): Error: no property `contains` for type `long[string]`

    /tmp/tmphmw21gcf.d(32): Error: undefined identifier `maxElement`

    /tmp/tmphmw21gcf.d(26): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    /tmp/tmphmw21gcf.d(37): Error: cannot implicitly convert expression `result` of
    type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphmw21gcf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164342
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    // TODO: implement\
    \ this function\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto\
    \ result = candidate(\"a b b a\");\n        assert(!result.isNull && result.get\
    \ == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c\
    \ a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8iytcsnk.d(25): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8iytcsnk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164341
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n\tif (test.empty)\
    \ \n\t{\n\t\treturn null;\n\t}\n\timmutable charSeparator = ' ';\n\tauto words\
    \ = test.split(charSeparator);\n\tassert(words.length > 0);\n\tauto strHistogram\
    \ = new long[string];\n\tauto wordCounter = new long[string];\n\t\n\tforeach(w;\
    \ words)\n\t{\n\t\tauto i = wordCounter[w];\n\t\twordCounter[w] = i + 1;\n\t\t\
    strHistogram[w] = i + 1;\n\t}\n\t\n\tauto max = wordCounter.values.max;\n\tauto\
    \ ret = new long[string];\n\t\n\tforeach(k,v; strHistogram)\n\t{\n\t\tif (v ==\
    \ max)\n\t\t{\n\t\t\tret[k] = v;\n\t\t}\n\t}\n\t\n\tif (ret.length == 0)\n\t{\n\
    \t\treturn null;\n\t}\n\t\n\treturn ret;\n}\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptbve6iuh.d(24): Error: no property `empty` for type `string`

    /tmp/tmptbve6iuh.d(29): Error: no property `split` for type `string`

    /tmp/tmptbve6iuh.d(31): Error: cannot pass type `string` as a function argument

    /tmp/tmptbve6iuh.d(32): Error: cannot pass type `string` as a function argument

    /tmp/tmptbve6iuh.d(42): Error: cannot pass type `string` as a function argument

    /tmp/tmptbve6iuh.d(26): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    /tmp/tmptbve6iuh.d(54): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptbve6iuh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164342
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    size_t letterCount\
    \ = test.length;\n    Nullable!(long[string])letters = Nullable!(long[string])();\n\
    \    Nullable!(long[string])results = Nullable!(long[string])();\n    if (letterCount\
    \ > 0) \n    {\n        long[string] letters = new long[string](min(letterCount,\
    \ 256L));\n        foreach (index, letter; test) \n        {\n            ++letters[letter];\n\
    \        }\n        size_t maxValue = 0;\n        foreach (index, letter; test)\
    \ \n        {\n            if (letters[letter] > maxValue) \n            {\n \
    \               maxValue = letters[letter];\n            }\n        }\n      \
    \  foreach (index, letter; test) \n        {\n            if (letters[letter]\
    \ == maxValue) \n            {\n                results[letter] = maxValue;\n\
    \            }\n        }\n    }\n    return results;\n}\nunittest\n{\n    alias\
    \ candidate = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9fk_yiny.d(29): Error: cannot pass type `string` as a function
    argument

    /tmp/tmp9fk_yiny.d(29): Error: variable `letters` is shadowing variable `tmp9fk_yiny.histogram.letters`

    /tmp/tmp9fk_yiny.d(32): Error: cannot implicitly convert expression `letter` of
    type `immutable(char)` to `string`

    /tmp/tmp9fk_yiny.d(37): Error: cannot implicitly convert expression `letter` of
    type `immutable(char)` to `string`

    /tmp/tmp9fk_yiny.d(39): Error: cannot implicitly convert expression `letter` of
    type `immutable(char)` to `string`

    /tmp/tmp9fk_yiny.d(44): Error: cannot implicitly convert expression `letter` of
    type `immutable(char)` to `string`

    /tmp/tmp9fk_yiny.d(46): Error: cannot implicitly convert expression `letter` of
    type `immutable(char)` to `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9fk_yiny.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164342
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ res = [].assumeUnique;\n    long max_num = 0;\n    foreach(i, c; test) \n  \
    \  {\n        ++res[c];\n        if(res[c] > max_num) \n        {\n          \
    \  max_num = res[c];\n        }\n    }\n    return filter!(x => x.value == max_num)(res).map!(x\
    \ => x.key).nullable;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n\
    \        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprrrcpfmo.d(24): Error: no property `assumeUnique` for type `void[]`

    /tmp/tmprrrcpfmo.d(28): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmprrrcpfmo.d(29): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmprrrcpfmo.d(31): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmprrrcpfmo.d(34): Error: template instance `filter!((x) => x.value == max_num)`
    template `filter` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprrrcpfmo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164342
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \nin\n{\n    assert(\
    \ test.all!\"a in 'a'..'z'\" );\n}\nbody\n{\n    Nullable!(long[string]) r = null;\n\
    \    long max = 0;\n    immutable long[string] hist = test.split(' ').histogram;\n\
    \    foreach( v; hist.values )\n    {\n        max = max(v, max);\n    }\n   \
    \ return hist.retrieve(max);\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6xh96ue_.d(31): Error: no property `split` for type `string`

    /tmp/tmp6xh96ue_.d(34): Error: function expected before `()`, not `max` of type
    `long`

    /tmp/tmp6xh96ue_.d(36): Error: no property `retrieve` for type `immutable(long[string])`

    /tmp/tmp6xh96ue_.d(25): Error: no property `all` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6xh96ue_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164342
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    struct histo\n\
    \    {\n        string[] keys;\n        size_t[] counts;\n    }\n    histo h;\n\
    \    if(test.length == 0)\n        return null;\n    size_t l = test.length;\n\
    \    auto splits = test.split(\" \");\n    foreach(j, k; splits)\n    {\n    \
    \    bool not_found = true;\n        foreach(i, ch; h.keys)\n        {\n     \
    \       if(ch == k)\n            {\n                not_found = false;\n     \
    \           h.counts[i]++;\n            }\n        }\n        if(not_found)\n\
    \        {\n            h.keys ~= k;\n            h.counts ~= 1;\n        }\n\
    \    }\n    size_t max_index = 0;\n    size_t max_count = 0;\n    foreach(i, ch;\
    \ h.keys)\n    {\n        if(h.counts[i] > max_count)\n        {\n           \
    \ max_count = h.counts[i];\n            max_index = i;\n        }\n    }\n   \
    \ long[string] ret;\n    foreach(i, ch; h.keys)\n    {\n        if(h.counts[i]\
    \ == max_count)\n            ret[ch] = max_count;\n    }\n    return ret;\n}\n\
    unittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppiu9pfbi.d(33): Error: no property `split` for type `string`

    /tmp/tmppiu9pfbi.d(31): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    /tmp/tmppiu9pfbi.d(67): Error: cannot implicitly convert expression `ret` of type
    `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppiu9pfbi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164342
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n\tlong[string]\
    \ result = null;\n\tif(test.empty)\n\t{\n\t\treturn result;\n\t}\n\t\n\tresult\
    \ = new long[string];\n\tauto s = test.split(\" \");\n\tfor(size_t i = 0; i <\
    \ s.length; i++)\n\t{\n\t\tresult[s[i]]++;\n\t}\n\t\n\tlong max = 0;\n\tfor(auto\
    \ key = result.byKey(); !key.empty; key.popFront())\n\t{\n\t\tmax = max(max, key.front.value);\n\
    \t}\n\t\n\tfor(auto key = result.byKey(); !key.empty; key.popFront())\n\t{\n\t\
    \tif(key.front.value != max)\n\t\t{\n\t\t\tresult.remove(key.front.key);\n\t\t\
    }\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8bkntbyi.d(25): Error: no property `empty` for type `string`

    /tmp/tmp8bkntbyi.d(30): Error: cannot pass type `string` as a function argument

    /tmp/tmp8bkntbyi.d(31): Error: no property `split` for type `string`

    /tmp/tmp8bkntbyi.d(40): Error: no property `value` for type `string`

    /tmp/tmp8bkntbyi.d(45): Error: no property `value` for type `string`

    /tmp/tmp8bkntbyi.d(47): Error: no property `key` for type `string`

    /tmp/tmp8bkntbyi.d(27): Error: cannot implicitly convert expression `result` of
    type `long[string]` to `Nullable!(long[string])`

    /tmp/tmp8bkntbyi.d(51): Error: cannot implicitly convert expression `result` of
    type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8bkntbyi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164342
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ result;\n    long maxCount = 0;\n    string[] keys;\n    foreach(c; test.split)\n\
    \    {\n        if(result.contains(c))\n        {\n            result[c] += 1;\n\
    \        }\n        else\n        {\n            result[c] = 1;\n        }\n \
    \       if(result[c] > maxCount)\n        {\n            maxCount = result[c];\n\
    \            keys = [c];\n        }\n        else if(result[c] == maxCount)\n\
    \        {\n            keys ~= c;\n        }\n    }\n    if(keys.length == 0)\n\
    \    {\n        return null;\n    }\n    long[string] output;\n    foreach(k;\
    \ keys)\n    {\n        output[k] = result[k];\n    }\n    return output;\n}\n\
    unittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4_ohcr5w.d(27): Error: no property `split` for type `string`

    /tmp/tmp4_ohcr5w.d(49): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    /tmp/tmp4_ohcr5w.d(56): Error: cannot implicitly convert expression `output` of
    type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4_ohcr5w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164342
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = typeof(result).init;\n    if (test.length == 0) return result;\n  \
    \  string[] letters = test.split();\n    long[] counts = new long[letters.length];\n\
    \    for (int i = 0; i < letters.length; i++)\n    {\n        for (int j = 0;\
    \ j < letters.length; j++)\n        {\n            if (letters[i] == letters[j])\n\
    \            {\n                counts[i]++;\n            }\n        }\n    }\n\
    \    long max = maxElement(counts);\n    result.assign(maxElement, counts);\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n \
    \       auto result = candidate(\"a b b a\");\n        assert(!result.isNull &&\
    \ result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd_odxn5b.d(24): Error: undefined identifier `result`

    /tmp/tmpd_odxn5b.d(26): Error: no property `split` for type `string`

    /tmp/tmpd_odxn5b.d(38): Error: undefined identifier `maxElement`

    /tmp/tmpd_odxn5b.d(39): Error: no property `assign` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd_odxn5b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164342
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    \n    import\
    \ std.algorithm;\n    import std.algorithm.comparison;\n    import std.conv;\n\
    \    import std.range;\n    import std.typecons;\n    import std.container;\n\
    \    import std.string;\n    import std.array;\n    import std.bigint;\n    import\
    \ std.math;\n    import std.meta;\n    import std.bitmanip;\n    import std.range;\n\
    \    import std.conv;\n    import std.exception;\n    import std.traits;\n   \
    \ import std.stdio;\n    import std.math;\n    import std.typecons;\n    Nullable!(long[string])\
    \ hi = Nullable!(long[string]).init;\n    if(test.length == 0) \n    {\n     \
    \   return hi;\n    }\n    auto splitted = test.split();\n    auto to_set = splitted.sort();\n\
    \    auto set = to_set.uniq;\n    auto max = to_set.maxElement;\n    size_t counter\
    \ = 0;\n    auto count_fn = (string s)\n    {\n        counter = 0;\n        foreach(i;\
    \ splitted)\n        {\n            if(i == s) \n            {\n             \
    \   counter++;\n            }\n        }\n        return counter;\n    };\n  \
    \  long[string] result;\n    foreach(i; set)\n    {\n        if(i == max) \n \
    \       {\n            result[i] = count_fn(i);\n        }\n    }\n    hi.__nullable_obj\
    \ = result;\n    return hi;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpei25rpiz.d(74): Error: no property `__nullable_obj` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpei25rpiz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164343
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{ \n    Nullable!(long[string])\
    \ ret;\n    if (test.length == 0)\n        return ret;\n    auto m = test.split();\n\
    \    if (m.length == 0)\n        return ret;\n    auto h = m.length.iota.map!(i\
    \ => m[i]).groupBy!(i => i);\n    h.values.each!(v => v[0] = v.length);\n    ret\
    \ = h.values.map!(v => v[0]).maxBy!(v => v);\n    return h.filter!(kv => kv.value[0]\
    \ == ret).map!(kv => kv.key => kv.value[0]).array;\n}\nunittest\n{\n    alias\
    \ candidate = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb8va4vgb.d(33): Error: found `=>` when expecting `)` following
    template argument list

    /tmp/tmpb8va4vgb.d(33): Error: found `kv` when expecting `;` following `return`
    statement

    /tmp/tmpb8va4vgb.d(33): Error: found `)` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb8va4vgb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164341
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    // Need to\
    \ store a count of each letter and the maximum count\n    long[string] counts;\n\
    \    long maxCount = 0;\n    // Loop through every letter, count it and increment\
    \ the maxCount\n    foreach(letter; test.split()) \n    {\n        counts[letter]++;\n\
    \        maxCount = max(maxCount, counts[letter]);\n    }\n    // Return an associative\
    \ array of letters with the maximum count\n    if(maxCount == 0) \n    {\n   \
    \     return __null_dict__;\n    }\n    else \n    {\n        long[string] result;\n\
    \        foreach(letter; counts.keys) \n        {\n            if(counts[letter]\
    \ == maxCount) \n            {\n                result[letter] = maxCount;\n \
    \           }\n        }\n        return result;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd453z52r.d(28): Error: no property `split` for type `string`

    /tmp/tmpd453z52r.d(36): Error: undefined identifier `__null_dict__`

    /tmp/tmpd453z52r.d(48): Error: cannot implicitly convert expression `result` of
    type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd453z52r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164343
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    if (test.empty)\
    \ \n    {\n        return ___null_dict___;\n    }\n    long[string] result;\n\
    \    foreach (str; test.split()) \n    {\n        if (str in result) \n      \
    \  {\n            result[str] += 1L;\n        } \n        else \n        {\n \
    \           result[str] = 1L;\n        }\n    }\n    /*auto maxKey = test[0];\n\
    \    foreach (key; test.keys)\n    {\n        if (test[key] > test[maxKey])\n\
    \        {\n            maxKey = key;\n        }\n    }*/\n    long maxVal = 0L;\n\
    \    foreach (value; result.values) \n    {\n        if (value > maxVal) \n  \
    \      {\n            maxVal = value;\n        }\n    }\n    auto maxKeys = test.keys.filter!(a\
    \ => test[a] == maxVal);\n    Nullable!(long[string]) nullableResult;\n    auto\
    \ newValue = new long[string](maxKeys.length);\n    size_t i = 0;\n    foreach\
    \ (key; maxKeys) \n    {\n        newValue[i] = result[key];\n        i++;\n \
    \   }\n    nullableResult.nullable = newValue;\n    return nullableResult;\n}\n\
    //\nunittest \n{\n    auto hist = histogram(\"a b c\");\n    assert(hist.nullable.get[\"\
    a\"] == 1L);\n    assert(hist.nullable.get[\"b\"] == 1L);\n    assert(hist.nullable.get[\"\
    c\"] == 1L);\n    assert(hist.nullable.length == 3);\n    hist = histogram(\"\
    a b b a\");\n    assert(hist.nullable.get[\"a\"] == 2L);\n    assert(hist.nullable.get[\"\
    b\"] == 2L);\n    assert(hist.nullable.length == 2);\n    hist = histogram(\"\
    a b c a b\");\n    assert(hist.nullable.get[\"a\"] == 2L);\n    assert(hist.nullable.get[\"\
    b\"] == 2L);\n\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto\
    \ result = candidate(\"a b b a\");\n        assert(!result.isNull && result.get\
    \ == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c\
    \ a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0yzly5pj.d(84): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0yzly5pj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164341
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    if (test.empty)\n\
    \        return typeof(return).init;\n    auto words = test.split;\n    Nullable!(long[string])\
    \ result = typeof(return).init;\n    long[] histo = new long[words.length];\n\
    \    for (int i = 0; i < words.length; i++)\n    {\n        foreach (word; words)\n\
    \        {\n            if (word == words[i])\n                histo[i]++;\n \
    \       }\n    }\n    auto tmp = zip(words, histo);\n    foreach (key, val; tmp)\n\
    \    {\n        if (val == max(histo))\n            result[key] = val;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n \
    \       auto result = candidate(\"a b b a\");\n        assert(!result.isNull &&\
    \ result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp81brt3ww.d(24): Error: no property `empty` for type `string`

    /tmp/tmp81brt3ww.d(26): Error: no property `split` for type `string`

    /tmp/tmp81brt3ww.d(37): Error: undefined identifier `zip`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp81brt3ww.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164343
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[] res;\n\
    \    if (test.empty) \n    {\n        res = null;\n    } \n    else \n    {\n\
    \        res = [test.split()\n                    .map!(x => test.countUntil(x,\
    \ test.indexOf(x)))(0)\n                    .max()];\n        res ~= test.split()\n\
    \                 .map!(x => test.countUntil(x, test.indexOf(x)))(0)\n       \
    \          .filter!(x => x >= res[0]);\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxvzl59l5.d(25): Error: no property `empty` for type `string`

    /tmp/tmpxvzl59l5.d(31): Error: no property `split` for type `string`

    /tmp/tmpxvzl59l5.d(34): Error: no property `split` for type `string`

    /tmp/tmpxvzl59l5.d(38): Error: cannot implicitly convert expression `res` of type
    `long[]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxvzl59l5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164343
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    auto test\
    \ = test.split;\n    test.sort;\n    long maxval = 0;\n    long[] res = long[string]();\n\
    \    long[string] test2 = long[string]();\n    foreach(t; test)\n    {\n     \
    \   if(t !in test2)\n        {\n            test2[t] = 1;\n        }\n       \
    \ else\n        {\n            test2[t] += 1;\n        }\n    }\n    foreach(t;\
    \ test2)\n    {\n        if(t.value > maxval)\n        {\n            maxval =\
    \ t.value;\n        }\n    }\n    if(maxval == 0)\n    {\n        return Nullable!(long[string]).init;\n\
    \    }\n    foreach(t; test2)\n    {\n        if(t.value == maxval)\n        {\n\
    \            res[t.key] = t.value;\n        }\n    }\n    return res.nullable;\n\
    }\n/*\nWrite a function that takes a non-negative integer and returns an array\
    \ of bits\nfor the integer.\nunittest\n{\n    alias candidate = histogram;\n\n\
    {\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplras9izz.d(27): Error: found `[` when expecting `.` following long

    /tmp/tmplras9izz.d(27): Error: semicolon expected, not `]`

    /tmp/tmplras9izz.d(27): Error: found `]` instead of statement

    /tmp/tmplras9izz.d(28): Error: found `[` when expecting `.` following long

    /tmp/tmplras9izz.d(28): Error: semicolon expected, not `]`

    /tmp/tmplras9izz.d(28): Error: found `]` instead of statement

    /tmp/tmplras9izz.d(60): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplras9izz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164341
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    if (test.empty)\n\
    \        return null;\n    auto tst = test.splitter.noempty.array;\n    auto rst\
    \ = tst.map!(a => a ~ \": \" ~ std.string.to!string(tst.count(a)));\n    if (rst.length\
    \ == 1)\n        return null;\n    auto keys = tst.filter!(a => rst.count(a ~\
    \ \": \" ~ std.string.to!string(tst.count(a))) == 1).array;\n    auto max = tst.max!(a\
    \ => tst.count(a));\n    return keys.array.map!(a => a ~ \": \" ~ std.string.to!string(tst.count(a))).filter!(a\
    \ => a[$-1 .. $] == std.string.to!string(max));\n}\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvjtykrcf.d(24): Error: no property `empty` for type `string`

    /tmp/tmpvjtykrcf.d(26): Error: no property `splitter` for type `string`

    /tmp/tmpvjtykrcf.d(25): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    /tmp/tmpvjtykrcf.d(29): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvjtykrcf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164343
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[] letters_count;\n\
    \    long temp;\n    foreach(c; test) \n    {\n        if(std.uni.isAlpha(c))\
    \ \n        {\n            temp = letters_count[c.toLower()];\n            letters_count[c.toLower()]\
    \ = temp + 1;\n        }\n    }\n    long[] high;\n    long high_value = 0;\n\
    \    foreach(k, v; letters_count) \n    {\n        if(v > high_value) \n     \
    \   {\n            high = [k];\n            high_value = v;\n        }\n     \
    \   else if(v == high_value) \n        {\n            high ~= k;\n        }\n\
    \    }\n    return [high : high_value].nullable;\n}\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2eroxmxg.d(28): Error: undefined identifier `uni` in package `std`

    /tmp/tmp2eroxmxg.d(30): Error: no property `toLower` for type `immutable(char)`

    /tmp/tmp2eroxmxg.d(31): Error: no property `toLower` for type `immutable(char)`

    /tmp/tmp2eroxmxg.d(48): Error: cannot implicitly convert expression `nullable([high:high_value])`
    of type `Nullable!(long[const(long)[]])` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2eroxmxg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164343
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    import std.algorithm\
    \ : max;\n    if (test.empty)\n        return null;\n    string[] arr = test.split;\n\
    \    long[string] result = [arr[0]: 1L];\n    foreach (s; arr[1..$])\n    {\n\
    \        if (result.contains(s))\n            result[s]++;\n        else\n   \
    \         result[s] = 1L;\n    }\n    auto max = result.values.max;\n    return\
    \ result.filter!(v => v.value == max);\n}\nunittest\n{\n    alias candidate =\
    \ histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2iui34dg.d(25): Error: no property `empty` for type `string`

    /tmp/tmp2iui34dg.d(27): Error: no property `split` for type `string`

    /tmp/tmp2iui34dg.d(31): Error: no property `contains` for type `long[string]`

    /tmp/tmp2iui34dg.d(36): Error: template `std.algorithm.comparison.max` cannot
    deduce function from argument types `!()(long[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/algorithm/comparison.d(1550):        `std.algorithm.comparison.max(T...)(T
    args) if (T.length >= 2)`

    /tmp/tmp2iui34dg.d(36): Error: declaration `tmp2iui34dg.histogram.max` is already
    defined

    /tmp/tmp2iui34dg.d(37): Error: no property `filter` for type `long[string]`

    /tmp/tmp2iui34dg.d(26): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2iui34dg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164343
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n\tauto result\
    \ = test.map!(c => c.to!string()).arrayof.groupBy.values.map!(a => a.length).max;\n\
    \tif (result is null) \n\t{\n\t\treturn null;\n\t}\n\telse \n\t{\n\t\treturn test.map!(c\
    \ => c.to!string()).arrayof.groupBy.filter!(a => a.value.length == result).map!(a\
    \ => a.value[0] ~ a.value.length).dict;\n\t}\n}\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp78fewliv.d(24): Error: no property `map` for type `string`

    /tmp/tmp78fewliv.d(31): Error: no property `map` for type `string`

    /tmp/tmp78fewliv.d(27): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp78fewliv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164343
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    /*\n    if(test.length\
    \ == 0)\n        return null;\n    */\n    Nullable!(long[string]) dict;\n   \
    \ dict.init;\n    string[] split = test.split(\" \");\n    long[] times;\n   \
    \ times.length = split.length;\n    for(long i = 0; i < split.length; i++)\n \
    \   {\n        dict[split[i]]++;\n        times[i] = dict[split[i]];\n    }\n\
    \    long max = times[0];\n    long maxIndex = 0;\n    foreach(idx, value; times)\n\
    \    {\n        if(max < value)\n        {\n            max = value;\n       \
    \     maxIndex = idx;\n        }\n    }\n    if(max == 1)\n        return null;\n\
    \    string[] keys = dict.keys();\n    dict.reset;\n    foreach(key; keys)\n \
    \   {\n        if(dict[key] == max)\n            dict[key] = max;\n    }\n   \
    \ return dict;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n      \
    \  auto result = candidate(\"a b b a\");\n        assert(!result.isNull && result.get\
    \ == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c\
    \ a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbkyjuz72.d(29): Error: `Nullable(null, true)` has no effect

    /tmp/tmpbkyjuz72.d(30): Error: no property `split` for type `string`

    /tmp/tmpbkyjuz72.d(51): Error: no property `reset` for type `Nullable!(long[string])`

    /tmp/tmpbkyjuz72.d(49): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbkyjuz72.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164343
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result;\n    import std.algorithm;\n    import std.array;\n    import std.functional;\n\
    \    import std.range;\n    import std.math;\n    import std.typecons;\n    /*\n\
    \    Given a string representing a space separated lowercase letters, return an\
    \ associative array\n        of the letter with the most repetition and containing\
    \ the corresponding count.\n        If several letters have the same occurrence,\
    \ return all of them.\n        \n        Example:\n        >>> histogram(\"a b\
    \ c\")\n        [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n        >>> histogram(\"\
    a b b a\")\n        [\"a\": 2L, \"b\": 2L].nullable\n        >>> histogram(\"\
    a b c a b\")\n        [\"a\": 2L, \"b\": 2L].nullable\n        >>> histogram(\"\
    b b b b a\")\n        [\"b\": 4L].nullable\n        >>> histogram(\"\")\n    \
    \    ___null_dict___\n    \n        \n    */\n    Nullable!(long[string]) histogram(string\
    \ test)\n    {\n        Nullable!(long[string]) result;\n        import std.algorithm;\n\
    \        import std.array;\n        import std.functional;\n        import std.range;\n\
    \        import std.math;\n        import std.typecons;\n        /*\n        Given\
    \ a string representing a space separated lowercase letters, return an associative\
    \ array\n            of the letter with the most repetition and containing the\
    \ corresponding count.\n            If several letters have the same occurrence,\
    \ return all of them.\n            \n            Example:\n            >>> histogram(\"\
    a b c\")\n            [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n           \
    \ >>> histogram(\"a b b a\")\n            [\"a\": 2L, \"b\": 2L].nullable\n  \
    \          >>> histogram(\"a b c a b\")\n            [\"a\": 2L, \"b\": 2L].nullable\n\
    \            >>> histogram(\"b b b b a\")\n            [\"b\": 4L].nullable\n\
    \            >>> histogram(\"\")\n            ___null_dict___\n        \n    \
    \        \n        */\n        Nullable!\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1pizrnuu.d(79): Error: template argument expected following `!`

    /tmp/tmp1pizrnuu.d(79): Error: found `unittest` when expecting `;` following statement

    /tmp/tmp1pizrnuu.d(124): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp1pizrnuu.d(124): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1pizrnuu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164342
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    //1. Create\
    \ an associative array\n    long[string] alist;\n    //2. for each letter in the\
    \ test string\n    foreach(letter; test.split())\n    {\n        //3. increment\
    \ the count for that letter by 1\n        alist[letter]++;\n    }\n    //4. Create\
    \ nullable variables for the maximum count and the letter with that count\n  \
    \  Nullable!long maxCount = ___null_long___;\n    Nullable!string maxLetter =\
    \ ___null_string___;\n    foreach(item; alist)\n    {\n        //5. if the current\
    \ letter has a count larger than the max count\n        if(item.value > maxCount)\n\
    \        {\n            //6. update the maxcount to equal the current count\n\
    \            maxCount = item.value;\n            //7. update the letter to equal\
    \ the current letter\n            maxLetter = item.key;\n        }\n        //8.\
    \ else if the current letter has a count equal to the max count\n        else\
    \ if(item.value == maxCount)\n        {\n            //9. update the letter to\
    \ be a tuple of the old letter and the current letter\n            maxLetter =\
    \ maxLetter ~ item.key;\n        }\n    }\n    //10. return the nullable tuple\n\
    \    return cast(Nullable!(long[string]))maxLetter.map!((string x) => alist[x]);\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo7txpbry.d(27): Error: no property `split` for type `string`

    /tmp/tmpo7txpbry.d(33): Error: undefined identifier `___null_long___`

    /tmp/tmpo7txpbry.d(34): Error: undefined identifier `___null_string___`

    /tmp/tmpo7txpbry.d(38): Error: no property `value` for type `long`

    /tmp/tmpo7txpbry.d(41): Error: no property `value` for type `long`

    /tmp/tmpo7txpbry.d(43): Error: no property `key` for type `long`

    /tmp/tmpo7txpbry.d(46): Error: no property `value` for type `long`

    /tmp/tmpo7txpbry.d(49): Error: no property `key` for type `long`

    /tmp/tmpo7txpbry.d(53): Error: no property `map` for type `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo7txpbry.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164344
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    import std.array\
    \ : array;\n    import std.algorithm : sort, uniq, count;\n    import std.range\
    \ : iota;\n    import std.typecons : tuple;\n    import std.conv : to;\n    Nullable!(long[string])\
    \ output;\n    if (test.length > 0)\n    {\n        long[] histo;\n        size_t[]\
    \ freq;\n        // We convert the string in a range, then in an array of tuple\
    \ to be able to\n        // sort and uniq the characters. Then we create a dictionary\
    \ and return it.\n        histo = test.split()\n            .iota\n          \
    \  .array\n            .sort\n            .uniq\n            .map!(a => tuple(a,\
    \ a))\n            .array;\n        freq = test.split()\n            .iota\n \
    \           .map!(a => count(test.split, a))\n            .array;\n        output\
    \ = histo.map!(a => a[0] => freq[a[1]]).assocArray.nullable;\n    }\n    return\
    \ output;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto\
    \ result = candidate(\"a b b a\");\n        assert(!result.isNull && result.get\
    \ == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c\
    \ a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphur3m1d0.d(47): Error: found `=>` when expecting `)` following
    template argument list

    /tmp/tmphur3m1d0.d(47): Error: found `freq` when expecting `;` following statement

    /tmp/tmphur3m1d0.d(47): Error: found `)` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphur3m1d0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164342
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    int[char]\
    \ charMap;\n    foreach(char c; test) \n    {\n        ++charMap[c];\n    }\n\
    \    long[string] max_ = [ \"\": 0L ];\n    foreach(key, value; charMap) \n  \
    \  {\n        if(value > max_[\"\"]) \n        {\n            max_ = [ key: value\
    \ ];\n        } \n        else if(value == max_[\"\"]) \n        {\n         \
    \   max_[key] = value;\n        }\n    }\n    return max_ == [ \"\": 0L ] ? null\
    \ : max_;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto\
    \ result = candidate(\"a b b a\");\n        assert(!result.isNull && result.get\
    \ == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c\
    \ a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9aaxtqch.d(34): Error: cannot implicitly convert expression `[key:value]`
    of type `int[char]` to `long[string]`

    /tmp/tmp9aaxtqch.d(38): Error: cannot implicitly convert expression `key` of type
    `char` to `string`

    /tmp/tmp9aaxtqch.d(41): Error: cannot implicitly convert expression `max_ == ["":0L]
    ? cast(long[string])null : max_` of type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9aaxtqch.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164344
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    \n    import\
    \ std.algorithm;\n    import std.range;\n    import std.array;\n    import std.conv;\n\
    \    import std.traits;\n    import std.datetime;\n    import std.range;\n   \
    \ import std.typecons;\n    import std.math;\n    import std.string;\n    import\
    \ std.format;\n    import std.range;\n    import std.algorithm;\n    import std.traits;\n\
    \    import std.typecons;\n    import std.datetime;\n    import std.math;\n  \
    \  import std.stdio;\n    import std.conv;\n    import std.range;\n    import\
    \ std.container;\n    import std.bitmanip;\n    import std.exception;\n    import\
    \ std.array;\n    import std.range;\n    import std.stdio;\n    import std.string;\n\
    \    import std.algorithm;\n    import std.conv;\n    import std.format;\n   \
    \ import std.range;\n    import std.traits;\n    import std.typecons;\n    import\
    \ std.math;\n    import std.range;\n    import std.algorithm;\n    import std.bitmanip;\n\
    \    import std.exception;\n    import std.datetime;\n    import std.stdio;\n\
    \    import std.string;\n    import std.algorithm;\n    import std.conv;\n   \
    \ import std.format;\n    import std.range;\n    import std.traits;\n    import\
    \ std.typecons;\n    import std.math;\n    import std.range;\n    import std.algorithm;\n\
    \    import std.bitmanip;\n    import std.exception;\n    import std.datetime;\n\
    \    import std.range;\n    import std.algorithm;\n    import std.traits;\n  \
    \  import std.typecons;\n    import std.math;\n    import std.range;\n    import\
    \ std.algorithm;\n    import std.traits;\n    import std.typecons;\n    import\
    \ std.math;\n    import std.range;\n    import std.algorithm;\n    import std.traits;\n\
    \    import std.typecons;\nunittest\n{\n    alias candidate = histogram;\n\n{\n\
    \        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwkeh4w9v.d(92): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwkeh4w9v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164343
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    if (test.empty)\n\
    \        return Nullable!(long[string]).init;\n    Nullable!(long[string]) result;\n\
    \    int[] count;\n    foreach (c; test.split(\" \")) \n    {\n        if (result.isNull)\
    \ \n        {\n            count = [0L];\n            result = Nullable!(long[string]).init;\n\
    \            result.assign(c, count);\n        }\n        else \n        {\n \
    \           if (result.get(c)) \n            {\n                count = result.get(c);\n\
    \                count[0] += 1L;\n            }\n            else \n         \
    \   {\n                count = [1L];\n                result.assign(c, count);\n\
    \            }\n        }\n    }\n    if (result.isNull)\n        return Nullable!(long[string]).init;\n\
    \    auto max = result.get(result.byKeyValue!((\"a\", 0L))[0][0]);\n    foreach\
    \ (c; result.byKeyValue!((\"a\", 0L))[0]) \n    {\n        if (result.get(c) >\
    \ max)\n            max = result.get(c);\n    }\n    Nullable!(long[string]) res;\n\
    \    foreach (c; result.byKeyValue!((\"a\", 0L))[0]) \n    {\n        if (result.get(c)\
    \ == max) \n        {\n            if (res.isNull) \n            {\n         \
    \       res = Nullable!(long[string]).init;\n                res.assign(c, max);\n\
    \            }\n            else \n            {\n                res.assign(c,\
    \ max);\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n  \
    \  alias candidate = histogram;\n\n{\n        auto result = candidate(\"a b b\
    \ a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt08de20h.d(24): Error: no property `empty` for type `string`

    /tmp/tmpt08de20h.d(28): Error: no property `split` for type `string`

    /tmp/tmpt08de20h.d(52): Error: Using the result of a comma expression is not allowed

    /tmp/tmpt08de20h.d(52): Error: template `object.byKeyValue` cannot deduce function
    from argument types `!(0L)(Nullable!(long[string]))`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/druntime/import/object.d(2995):        `object.byKeyValue(T
    : V[K], K, V)(T aa)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/druntime/import/object.d(3035):        `object.byKeyValue(T
    : V[K], K, V)(T* aa)`

    /tmp/tmpt08de20h.d(53): Error: Using the result of a comma expression is not allowed

    /tmp/tmpt08de20h.d(53): Error: template `object.byKeyValue` cannot deduce function
    from argument types `!(0L)(Nullable!(long[string]))`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/druntime/import/object.d(2995):        `object.byKeyValue(T
    : V[K], K, V)(T aa)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/druntime/import/object.d(3035):        `object.byKeyValue(T
    : V[K], K, V)(T* aa)`

    /tmp/tmpt08de20h.d(59): Error: Using the result of a comma expression is not allowed

    /tmp/tmpt08de20h.d(59): Error: template `object.byKeyValue` cannot deduce function
    from argument types `!(0L)(Nullable!(long[string]))`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/druntime/import/object.d(2995):        `object.byKeyValue(T
    : V[K], K, V)(T aa)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/b'
  stdout: ''
  timestamp: 1660164344
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    import std.algorithm;\n\
    \    import std.array;\n    import std.range;\n    import std.typecons;\n    import\
    \ std.traits;\n    import std.uni;\n    import std.math;\n    import std.stdio;\n\
    \    import std.conv;\n    import std.range;\n    import std.traits;\n    import\
    \ std.algorithm;\n    import std.array;\n    import std.string;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.type\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp68zy9h4t.d(89): Error: `;` expected

    /tmp/tmp68zy9h4t.d(134): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp68zy9h4t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164343
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ res = typeof(res)();\n    if (test.length == 0) return res;\n    int test_length\
    \ = test.length;\n    int[string] counts = test.idup.split().map!(a => a[0]).reduce!q{a[b]\
    \ += 1; return a;}();\n    //Test all letters of the alphabet\n    foreach(key;\
    \ \"abcdefghijklmnopqrstuvwxyz\".dup.idup.split())\n    {\n        if (key in\
    \ counts)\n        {\n            if (res is null)\n            {\n          \
    \      res = typeof(res)();\n                res.value = [key: counts[key]];\n\
    \            }\n            else if (counts[key] == max(res.value.values))\n \
    \           {\n                res.value[key] = counts[key];\n            }\n\
    \            else if (counts[key] > max(res.value.values))\n            {\n  \
    \              res.value = [key: counts[key]];\n            }\n        }\n   \
    \ }\n    return res;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n\
    \        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplkd82rhw.d(24): Error: undefined identifier `res`, did you mean
    struct `Yes`?

    /tmp/tmplkd82rhw.d(26): Error: cannot implicitly convert expression `test.length`
    of type `ulong` to `int`

    /tmp/tmplkd82rhw.d(27): Error: no property `split` for type `string`

    /tmp/tmplkd82rhw.d(29): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplkd82rhw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164344
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n\tlong[string]\
    \ result;\n\tforeach(chr; test.splitter()) \n\t{\n\t\tresult[chr]++;\n\t}\n\t\
    return result;\n}\n/*\nReturn the amount of times a char appears in a string.\n\
    \    Example:\n    >>> count('a', \"a b c\")\n    1L\n    >>> count('b', \"a b\
    \ c\")\n    1L\n    >>> count('c', \"a b c\")\n    1L\n    >>> count('a', \"a\
    \ b b a\")\n    2L\n    >>> count('b', \"a b b a\")\n    2L\n    >>> count('a',\
    \ \"a b c a b\")\n    2L\n    >>> count('b', \"a b c a b\")\n    2L\n    >>> count('b',\
    \ \"b b b b a\")\n    4L\n    >>> count('b', \"\")\n    0L\n*/\nlong count(string\
    \ chr, string test) \n{\n\tlong res = 0;\n\tforeach(c; test.splitter()) \n\t{\n\
    \t\tif(c == chr) \n\t\t{\n\t\t\tres++;\n\t\t}\n\t}\n\treturn res;\n}\n/*\nGiven\
    \ a string representing a space separated lowercase letters, return an associative\
    \ array\n    of the letter with the most repetition and containing the corresponding\
    \ count.\n    If several letters have the same occurrence, return all of them.\n\
    \    Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\"\
    : 1L].nullable\n    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n\
    \    >>> histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n\
    \    ___null_dict___\n*/\nNullable!(long[string]) histogram(string test) \n{\n\
    \tlong[string] result;\n\tforeach(chr; test.splitter()) \n\t{\n\t\t\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptx8u3sm8.d(87): Error: found `unittest` instead of statement

    /tmp/tmptx8u3sm8.d(132): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptx8u3sm8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164343
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n\tlong[] letter_counts\
    \ = new long[test.length];\n\tforeach(index, char a; test) \n\t{\n\t\tforeach(other_index,\
    \ char b; test) \n\t\t{\n\t\t\tif(a == b) \n\t\t\t{\n\t\t\t\tletter_counts[index]\
    \ += 1L;\n\t\t\t}\n\t\t}\n\t}\n\tlong max = max(letter_counts);\n\tlong[] most_often\
    \ = new long[test.length];\n\tforeach(i, char a; test) \n\t{\n\t\tif(letter_counts[i]\
    \ == max) \n\t\t{\n\t\t\tmost_often[i] = max;\n\t\t}\n\t}\n\tstring[] letters\
    \ = test.split(\" \");\n\treturn zip(letters, most_often);\n}\n/*\nTest cases:\n\
    */\nstatic assert(histogram(\"a b c\") == [[\"a\": 1L, \"b\": 1L, \"c\": 1L]].nullable);\n\
    static assert(histogram(\"a b b a\") == [[\"a\": 2L, \"b\": 2L]].nullable);\n\
    static assert(histogram(\"a b c a b\") == [[\"a\": 2L, \"b\": 2L]].nullable);\n\
    static assert(histogram(\"b b b b a\") == [[\"b\": 4L]].nullable);\nstatic assert(histogram(\"\
    \") == ___null_dict___);\nstatic assert(histogram(\"a b c a b\") == [[\"a\": 2L,\
    \ \"b\": 2L]].nullable);\nstatic assert(histogram(\"a b b c c b a c a\") == [[\"\
    a\": 3L, \"b\": 3L, \"c\": 3L]].nullable);\nstatic assert(histogram(\"i h i\"\
    ) == [[\"i\": 2L, \"h\": 1L]].nullable);\nstatic assert(histogram(\"a\") == [[\"\
    a\": 1L]].nullable);\nstatic assert(histogram(\"a b\") == [[\"a\": 1L, \"b\":\
    \ 1L]].nullable);\nstatic assert(histogram(\"a b c\") ==\nunittest\n{\n    alias\
    \ candidate = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoveodgs2.d(61): Error: expression expected, not `unittest`

    /tmp/tmpoveodgs2.d(62): Error: found `{` when expecting `)`

    /tmp/tmpoveodgs2.d(63): Error: found `alias` when expecting `;`

    /tmp/tmpoveodgs2.d(63): Error: no identifier for declarator `candidate`

    /tmp/tmpoveodgs2.d(63): Error: declaration expected, not `=`

    /tmp/tmpoveodgs2.d(65): Error: declaration expected, not `{`

    /tmp/tmpoveodgs2.d(67): Error: declaration expected, not `assert`

    /tmp/tmpoveodgs2.d(68): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoveodgs2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164343
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    string[] splitted\
    \ = test.split();\n    if (splitted.length == 0)\n        return null;\n    long[]\
    \ result = new long[0];\n    long[] counter = new long[splitted.length];\n   \
    \ foreach (index, item; splitted)\n    {\n        int c = 0;\n        foreach\
    \ (i, j; splitted)\n        {\n            if (item == j)\n                c++;\n\
    \        }\n        counter[index] = c;\n    }\n    long max = counter[0];\n \
    \   foreach (i, j; counter)\n    {\n        if (j > max)\n            max = j;\n\
    \    }\n    foreach (index, item; splitted)\n    {\n        if (counter[index]\
    \ == max)\n            result ~= item;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphjoml5w0.d(24): Error: no property `split` for type `string`

    /tmp/tmphjoml5w0.d(48): Error: cannot append type `string` to type `long[]`

    /tmp/tmphjoml5w0.d(26): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    /tmp/tmphjoml5w0.d(50): Error: cannot implicitly convert expression `result` of
    type `long[]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphjoml5w0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164344
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ counts;\n    string[] words = test.split(\" \");\n    foreach(w; words)\n  \
    \  {\n        counts[w]++;\n    }\n    long max = counts.values.max;\n    if(max\
    \ == 0)\n    {\n        return null;\n    }\n    Nullable!(long[string]) res;\n\
    \    res.init;\n    foreach(w; counts.keys)\n    {\n        if(counts[w] == max)\n\
    \        {\n            res.value[w] = max;\n        }\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxtcs81b7.d(25): Error: no property `split` for type `string`

    /tmp/tmpxtcs81b7.d(30): Error: no property `max` for type `long[]`

    /tmp/tmpxtcs81b7.d(36): Error: `Nullable(null, true)` has no effect

    /tmp/tmpxtcs81b7.d(41): Error: no property `value` for type `Nullable!(long[string])`,
    did you mean `std.typecons.Nullable!(long[string]).Nullable._value`?

    /tmp/tmpxtcs81b7.d(33): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxtcs81b7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164344
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ nres;\n    import std.array : array;\n    //    nres.assign(array);\n    if\
    \ (test.length > 0) \n    {\n        string[] list = test.split(' ');\n      \
    \  immutable string[] a = list.array;\n        long[] result = new long[a.length];\n\
    \        foreach (item; a) \n        {\n            //            immutable string\
    \ b = item;\n            immutable size_t c = a.count(item);\n            immutable\
    \ long d = c;\n            result[a.indexOf(item)] = d;\n        }\n        long\
    \ max = result.max;\n        long[] maxarray = result.filter!((i) => (i == max)).array;\n\
    \        import std.typecons : tuple;\n        auto xy = tuple(maxarray, a);\n\
    \        import std.container : Array;\n        Array!(string[]) res = Array!(string[])\
    \ (xy);\n        //        res.each!((x) {\n        //            writeln(x[0],\
    \ \": \", x[1]);\n        //        });\n        //        writeln(res.length);\n\
    \        long[string] res1 = new long[res.length];\n        foreach (i; 0 .. res.length)\
    \ \n        {\n            string[2] key = res[i];\n            //           \
    \ writeln(key[0]);\n            string newkey = key[1];\n            long newval\
    \ = key[0].to!long;\n            res1[newkey] = newval;\n        }\n        import\
    \ std.traits : Unqual;\n        auto result1 = new Unqual!(typeof(res1))(res1);\n\
    \        nres.assign(result1);\n    }\n    return nres;\n}\nunittest\n{\n    alias\
    \ candidate = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp09n8amyk.d(29): Error: no property `split` for type `string`

    /tmp/tmp09n8amyk.d(30): Error: cannot implicitly convert expression `array(list)`
    of type `string[]` to `immutable(string[])`

    /tmp/tmp09n8amyk.d(35): Error: no property `count` for type `immutable(string[])`

    /tmp/tmp09n8amyk.d(37): Error: no property `indexOf` for type `immutable(string[])`

    /tmp/tmp09n8amyk.d(39): Error: no property `max` for type `long[]`

    /tmp/tmp09n8amyk.d(40): Error: no property `filter` for type `long[]`

    /tmp/tmp09n8amyk.d(44): Error: template `std.container.array.Array!(string[]).Array.__ctor`
    cannot deduce function from argument types `!()(Tuple!(long[], immutable(string)[]))`,
    candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/container/array.d(440):        `std.container.array.Array!(string[]).Array.__ctor(U)(U[]
    values...) if (isImplicitlyConvertible!(U, T))`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/container/array.d(465):        `std.container.array.Array!(string[]).Array.__ctor(Range)(Range
    r) if (isInputRange!Range && isImplicitlyConvertible!(ElementType!Range, T) &&
    !is(Range == T[]))`

    /tmp/tmp09n8amyk.d(49): Error: cannot implicitly convert expression `new long[](res.length())`
    of type `long[]` to `long[string]`

    /tmp/tmp09n8amyk.d(55): Error: no property `to` for type `string`

    /tmp/tmp09n8amyk.d(59): Error: new can only create structs, dynamic arrays or
    class objects, not `long[string]`''s

    /tmp/tmp09n8amyk.d(60): Error: no property `assign` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp09n8amyk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164344
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ res = null;\n    long max = 0;\n    foreach(i, c; test) \n    {\n        auto\
    \ s = test[i..i + 1];\n        if (s.length != 1)\n            continue;\n   \
    \     auto r = test.count(s);\n        if (r > max) \n        {\n            max\
    \ = r;\n            res = new Nullable!(long[string])([s: r].nullable);\n    \
    \    } \n        else if (r == max) \n        {\n            if (res.isNull)\n\
    \                res = new Nullable!(long[string])([s: r].nullable);\n       \
    \     else\n                res.get.put(s, r);\n        }\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7xkvq0tt.d(31): Error: no property `count` for type `string`

    /tmp/tmp7xkvq0tt.d(42): Error: no property `put` for type `long[string]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7xkvq0tt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164344
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ max_value = null;\n    int max_count = 0;\n    long[string] my_map;\n    foreach(str;\
    \ test.split) \n    {\n        auto it = my_map.find(str);\n        if(it !is\
    \ null)\n        {\n            it.value++;\n        }\n        else\n       \
    \ {\n            my_map[str] = 1;\n        }\n    }\n    foreach(k, v; my_map)\n\
    \    {\n        if(v == max_count)\n        {\n            if(max_value !is null)\n\
    \            {\n                max_value[k] = v;\n            }\n           \
    \ else\n            {\n                max_value = [k: v];\n            }\n  \
    \      }\n        else if(v > max_count)\n        {\n            max_value = [k:\
    \ v];\n            max_count = v;\n        }\n    }\n    return max_value;\n}\n\
    unittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmwpwxvpj.d(27): Error: no property `split` for type `string`

    /tmp/tmpmwpwxvpj.d(55): Error: cannot implicitly convert expression `v` of type
    `long` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmwpwxvpj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164344
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    /*\n    const\
    \ char[] stringToCharArray(in string myString)\n    {\n        import std.array;\n\
    \        char[] ret = new char[myString.length];\n        ret[] = myString[];\n\
    \        return ret;\n    }\n    */\n    Nullable!(long[string]) ret = null;\n\
    \    long max = 0;\n    long[string] temp;\n    foreach(i; 0 .. test.length)\n\
    \    {\n        if(test[i] is in ('a' .. 'z'))\n        {\n            auto idx\
    \ = temp.indexOf(test[i]);\n            if(idx is null)\n            {\n     \
    \           temp.insert(test[i], 1);\n            }\n            else\n      \
    \      {\n                temp[idx] = temp[idx] + 1;\n            }\n        }\n\
    \    }\n    foreach(idx, val; temp)\n    {\n        if(val > max)\n        {\n\
    \            max = val;\n        }\n    }\n    foreach(idx, val; temp)\n    {\n\
    \        if(val == max)\n        {\n            ret.insert(idx, val);\n      \
    \  }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpisxs6gc2.d(38): Error: expression expected, not `in`

    /tmp/tmpisxs6gc2.d(38): Error: found `..` when expecting `,`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpisxs6gc2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164343
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{ \n    auto r =\
    \ new long[string];\n    foreach(i,t; test.lowercase.split(\" \"))\n    {\n  \
    \      r[t]++;\n    }\n    return r;\n}\n/*\nCreate a program that loops indefinitely\
    \ and asks the user if they want to enter a string\n    to be analysed.\n    If\
    \ the user says yes, get the input and print the result of histogram.\n    If\
    \ the user says no, print \"Bye\" and terminate the program.\n    If the user\
    \ inputs something else, print \"Bad input\" and ask again.\n    \n    Example:\n\
    \    >>> \n    >>> do you want to enter a string? \n    >>> Yes\n    >>> Enter\
    \ a string:\n    >>> a a b c\n    >>> \n    >>> a: 2\n    >>> b: 1\n    >>> c:\
    \ 1\n    >>> \n    >>> do you want to enter a string? \n    >>> yes\n    >>> Enter\
    \ a string:\n    >>> a b c\n    >>> \n    >>> a: 1\n    >>> b: 1\n    >>> c: 1\n\
    \    >>> \n    >>> do you want to enter a string? \n    >>> no\n    >>> Bye\n\
    */\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result =\
    \ candidate(\"a b b a\");\n        assert(!result.isNull && result.get == [\"\
    a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgigvrswf.d(24): Error: cannot pass type `string` as a function
    argument

    /tmp/tmpgigvrswf.d(25): Error: no property `lowercase` for type `string`

    '
  stdout: ''
  timestamp: 1660164344
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    if (test.empty)\
    \ \n    {\n        return null;\n    }\n    long[string] result;\n    foreach\
    \ (a; test.split) \n    {\n        if (a in result) \n        {\n            result[a]\
    \ += 1;\n        } \n        else \n        {\n            result[a] = 1;\n  \
    \      }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgy_4w992.d(24): Error: no property `empty` for type `string`

    /tmp/tmpgy_4w992.d(29): Error: no property `split` for type `string`

    /tmp/tmpgy_4w992.d(26): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    /tmp/tmpgy_4w992.d(40): Error: cannot implicitly convert expression `result` of
    type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgy_4w992.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164344
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    auto a = test.split(\"\
    \ \");\n    if (a.length == 0) return Nullable!(long[string])();\n    auto counter\
    \ = a.dup;\n    counter.sort;\n    auto result = counter.reduce!\"a + (test[0]\
    \ == test[1] ? 1 : 0)\";\n    if (result.length == 1) return Nullable!(long[string])(result[0]);\n\
    \    if (result.length == 2) return Nullable!(long[string])(result[0]);\n    if\
    \ (result.length != 3) return Nullable!(long[string])(result[0]);\n    if (result[0].value\
    \ == result[1].value)\n    {\n        auto key = [result[0].key, result[1].key];\n\
    \        return Nullable!(long[string])([key: result[0].value]);\n    }\n    return\
    \ Nullable!(long[string])(result[0]);\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvb6nod37.d(24): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvb6nod37.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164344
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[] histogram;\n\
    \    for (c; test)\n    {\n        if (c == ' ')\n            continue;\n    \
    \    if (histogram.length == 0)\n            histogram[c] = 1;\n        else\n\
    \            histogram[c] = histogram[c] + 1;\n    }\n    if (histogram.length\
    \ == 0)\n        return null;\n    long max = 0;\n    foreach (c, count; histogram)\n\
    \    {\n        if (count > max)\n            max = count;\n    }\n    long[string]\
    \ result;\n    foreach (c, count; histogram)\n    {\n        if (count == max)\n\
    \            result[c] = count;\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = histogram;\n\n{\n        auto result = candidate(\"a b b\
    \ a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx5jgve0u.d(25): Error: found `)` when expecting `;` following `for`
    condition

    /tmp/tmpx5jgve0u.d(34): Error: found `if` when expecting `)`

    /tmp/tmpx5jgve0u.d(35): Error: found `return` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx5jgve0u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164343
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ a;\n    long[long] countMap;\n    foreach(t; test.split()) \n    {\n       \
    \ if (a.count(t) == 0) \n        {\n            a[t] = 1;\n        } \n      \
    \  else \n        {\n            a[t] += 1;\n        }\n        countMap[a[t]]\
    \ = 1;\n    }\n    long max = max(countMap.keys());\n    long[string] res;\n \
    \   foreach(k, v; a) \n    {\n        if (v == max) \n        {\n            res[k]\
    \ = v;\n        }\n    }\n    return res.length == 0 ? Nullable!(long[string]).init\
    \ : res;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto\
    \ result = candidate(\"a b b a\");\n        assert(!result.isNull && result.get\
    \ == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c\
    \ a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnm7j1j9q.d(26): Error: no property `split` for type `string`

    /tmp/tmpnm7j1j9q.d(38): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmpnm7j1j9q.d(47): Error: cannot implicitly convert expression `_aaLen(res)
    == 0LU ? Nullable(null, true).get() : res` of type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnm7j1j9q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164344
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ allLetters=null;\n    int[long] histLetters=null;\n    char[] splited=test.split;\n\
    \    foreach(ch;splited)\n    {\n        string letters=ch.idup;\n        if(letters.length==1)\n\
    \        {\n            if(allLetters[letters] is null)\n            {\n     \
    \           allLetters[letters]=1;\n            }\n            else\n        \
    \    {\n                allLetters[letters]++;\n            }\n            if(histLetters[allLetters[letters]]\
    \ is null)\n            {\n                histLetters[allLetters[letters]]=1;\n\
    \            }\n            else\n            {\n                histLetters[allLetters[letters]]++;\n\
    \            }\n        }\n    }\n    long[string] finalLetters=null;\n    int\
    \ max=histLetters.length;\n    int index=0;\n    long maxValue=0;\n    while(index<max)\n\
    \    {\n        if(histLetters[index] is null)\n        {\n            index++;\n\
    \        }\n        else\n        {\n            maxValue=index;\n           \
    \ break;\n        }\n    }\n    if(maxValue!=0)\n    {\n        foreach(k,v;allLetters)\n\
    \        {\n            if(v==maxValue)\n            {\n                finalLetters[k]=v;\n\
    \            }\n        }\n    }\n    return finalLetters.nullable;\n}\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaynkd_42.d(26): Error: no property `split` for type `string`

    /tmp/tmpaynkd_42.d(29): Error: template `object.idup` cannot deduce function from
    argument types `!()(char)`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/druntime/import/object.d(4308):        `object.idup(T)(T[]
    a)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/druntime/import/object.d(4321):        `object.idup(T
    : void)(const(T)[] a)`

    /tmp/tmpaynkd_42.d(32): Error: incompatible types for `(allLetters[letters]) is
    (null)`: `long` and `typeof(null)`

    /tmp/tmpaynkd_42.d(40): Error: incompatible types for `(histLetters[allLetters[letters]])
    is (null)`: `int` and `typeof(null)`

    /tmp/tmpaynkd_42.d(51): Error: cannot implicitly convert expression `_aaLen(histLetters)`
    of type `ulong` to `int`

    /tmp/tmpaynkd_42.d(56): Error: incompatible types for `(histLetters[cast(long)index])
    is (null)`: `int` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaynkd_42.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164344
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{ \n    alias D =\
    \ long[string];\n    D storage;\n    foreach(i, e; test.split)\n    {\n      \
    \  storage[e] = storage.getOrInit(e, 0) + 1;\n    }\n    long max = storage.max();\n\
    \    D res;\n    foreach(e; storage)\n    {\n        if(e.value == max)\n    \
    \    {\n            res[e.key] = e.value;\n        }\n    }\n    return res.empty\
    \ ? null : res;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n     \
    \   auto result = candidate(\"a b b a\");\n        assert(!result.isNull && result.get\
    \ == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c\
    \ a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7fgpa884.d(26): Error: no property `split` for type `string`

    /tmp/tmp7fgpa884.d(30): Error: no property `max` for type `long[string]`

    /tmp/tmp7fgpa884.d(34): Error: no property `value` for type `long`

    /tmp/tmp7fgpa884.d(36): Error: no property `key` for type `long`

    /tmp/tmp7fgpa884.d(39): Error: no property `empty` for type `long[string]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7fgpa884.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164344
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    immutable\
    \ countMap = test.split.countMap;\n    immutable maxCount = countMap.values.max;\n\
    \    if (maxCount == -1)\n        return null;\n    return makeUniqueKeys(countMap.assocArray,\
    \ maxCount);\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto\
    \ result = candidate(\"a b b a\");\n        assert(!result.isNull && result.get\
    \ == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c\
    \ a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl98er8x2.d(24): Error: no property `split` for type `string`

    /tmp/tmpl98er8x2.d(28): Error: undefined identifier `makeUniqueKeys`

    /tmp/tmpl98er8x2.d(27): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl98er8x2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164344
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \nin {\n    assert(test.length\
    \ > 0);\n}\nout (result) {\n    invariant(result.length > 0);\n}\n{\n    long[string]\
    \ counts;\n    string[] elems = test.split(' ');\n    foreach(elem; elems)\n \
    \   {\n        if (elem.length > 0)\n        {\n            auto[exists, count]\
    \ = counts.insert(elem, 1L);\n            if (!exists) \n            {\n     \
    \           ++counts[elem];\n            }\n        }\n    }\n    return counts;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzkka9clo.d(27): Error: found `invariant` instead of statement

    /tmp/tmpzkka9clo.d(29): Error: missing `do { ... }` after `in` or `out`

    /tmp/tmpzkka9clo.d(36): Error: basic type expected, not `[`

    /tmp/tmpzkka9clo.d(36): Error: found `,` when expecting `]`

    /tmp/tmpzkka9clo.d(36): Error: semicolon expected, not `]`

    /tmp/tmpzkka9clo.d(36): Error: found `]` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzkka9clo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164343
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{ \n    import std.algorithm;\n\
    \    Nullable!(long[string]) result;\n    auto letters = test.split(' ');\n  \
    \  auto uniqueLetters = letters.sort().uniq;\n    long[] counts;\n    foreach(index,\
    \ letter; uniqueLetters)\n    {\n        counts ~= letters.count(letter);\n  \
    \  }\n    long maxCount = counts.max;\n    if(maxCount == 0)\n    {\n        return\
    \ result;\n    }\n    auto maxIndexes = counts.indicesOf(maxCount);\n    auto\
    \ maxLetters = uniqueLetters[maxIndexes];\n    result = maxLetters.zip(maxCount.dup);\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n \
    \       auto result = candidate(\"a b b a\");\n        assert(!result.isNull &&\
    \ result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxion7j8x.d(26): Error: no property `split` for type `string`

    /tmp/tmpxion7j8x.d(33): Error: template `std.algorithm.comparison.max` cannot
    deduce function from argument types `!()(long[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/algorithm/comparison.d(1550):        `std.algorithm.comparison.max(T...)(T
    args) if (T.length >= 2)`

    /tmp/tmpxion7j8x.d(38): Error: no property `indicesOf` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxion7j8x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164344
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    import std.range;\n\
    \    import std.algorithm;\n    import std.container;\n    import std.traits;\n\
    \    import std.array;\n    import std.typecons;\n    import std.stdio;\n    import\
    \ std.string;\n    import std.conv;\n    import std.math;\n    import std.typecons;\n\
    \    if (test.empty)\n    {\n        return null;\n    }\n    long[] counts =\
    \ new long[256];\n    foreach (c; test)\n    {\n        counts[c]++;\n    }\n\
    \    long max = reduce!((a, b) => max(a, b))(counts);\n    string[long] reverse\
    \ = new string[long];\n    foreach (c; test)\n    {\n        if (counts[c] ==\
    \ max)\n        {\n            reverse[max] ~= cast(string)c;\n        }\n   \
    \ }\n    return  reverse[max].assocArray.nullable;\n}\nunittest\n{\n    alias\
    \ candidate = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc1hub693.d(45): Error: need size of rightmost array, not type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc1hub693.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164343
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \nin\n{\n    assert(test);\n\
    }\nbody\n{\n    Nullable!(long[string]) res = null;\n    long maxCount = 0;\n\
    \    foreach(i, c; test)\n    {\n        string s = c.to!string;\n        if(res.isNull)\n\
    \        {\n            res = [s: 1L];\n            maxCount = 1;\n        }\n\
    \        else if(res.count is 1 && res.contains(s))\n        {\n            if(res[s]\
    \ is maxCount)\n            {\n                long[string] tmp = [s: maxCount\
    \ + 1];\n                tmp[s] = res[s] + 1;\n                res = tmp;\n  \
    \              maxCount++;\n            }\n            else if(res[s] is maxCount\
    \ - 1)\n            {\n                res[s] = res[s] + 1;\n                maxCount++;\n\
    \            }\n            else\n            {\n                res[s] = res[s]\
    \ + 1;\n            }\n        }\n        else if(res.count is 1 && !res.contains(s))\n\
    \        {\n            if(res.byValue.value is maxCount)\n            {\n   \
    \             long[string] tmp = [s: 1L];\n                res = tmp;\n      \
    \      }\n            else\n            {\n                res[s] = 1L;\n    \
    \        }\n        }\n        else if(res.count > 1)\n        {\n           \
    \ if(res.contains(s))\n            {\n                if(res[s] is maxCount)\n\
    \                {\n                    res[s] = res[s] + 1;\n               \
    \     maxCount++;\n                }\n                else if(res[s] is maxCount\
    \ - 1)\n                {\n                    res[s] = res[s] + 1;\n        \
    \            maxCount++;\n                }\n                else\n          \
    \      {\n                    res[s] = res[s] + 1;\n                }\n      \
    \      }\n            else\n            {\n                if(res.byValue.value\
    \ is maxCount)\n                {\n                    res[s] = 1L;\n        \
    \        }\n                else\n                {\n                    long[string]\
    \ tmp = [s: 1L];\nunittest\n{\n    alias candidate = histogram;\n\n{\n       \
    \ auto result = candidate(\"a b b a\");\n        assert(!result.isNull && result.get\
    \ == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c\
    \ a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm0nw2ig6.d(98): Error: found `unittest` instead of statement

    /tmp/tmpm0nw2ig6.d(143): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpm0nw2ig6.d(143): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpm0nw2ig6.d(143): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpm0nw2ig6.d(143): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm0nw2ig6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164343
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ histo;\n    int len = test.length;\n    bool[int] hits;\n    int matches;\n\
    \    int index;\n    int i;\n    int endIndex;\n    int k;\n    int matchCount;\n\
    \    Nullable!(long[string]) result;\n    string key;\n    if (len > 0) {\n  \
    \      hits = true.repeat(len);\n        matches = 0;\n        index = 0;\n  \
    \      i = 0;\n        while (i < len) {\n            while (i < len && hits[i])\
    \ {\n                i += 1;\n            }\n            if (i < len) {\n    \
    \            endIndex = i;\n                k = i + 1;\n                while\
    \ (k < len) {\n                    if (test[i] == test[k]) {\n               \
    \         hits[k] = false;\n                        matches += 1;\n          \
    \              endIndex = k;\n                    }\n                    k +=\
    \ 1;\n                }\n                key = test[i .. endIndex + 1];\n    \
    \            if (histo.count(key) == 0) {\n                    histo[key] = 1L;\n\
    \                } else {\n                    histo[key] += 1L;\n           \
    \     }\n                index += 1;\n            }\n            i += 1;\n   \
    \     }\n        if (matches > 0) {\n            long max = histo.values.max;\n\
    \            long[string] temp;\n            foreach (pair; histo) {\n       \
    \         if (pair.value == max) {\n                    temp[pair.key] = pair.value;\n\
    \                }\n            }\n            result = temp;\n        } else\
    \ {\n            result = null;\n        }\n    } else {\n        result = null;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg6k8kppp.d(25): Error: cannot implicitly convert expression `test.length`
    of type `ulong` to `int`

    /tmp/tmpg6k8kppp.d(36): Error: no property `repeat` for type `bool`

    /tmp/tmpg6k8kppp.d(56): Error: no property `count` for type `long[string]`

    /tmp/tmpg6k8kppp.d(66): Error: no property `max` for type `long[]`

    /tmp/tmpg6k8kppp.d(69): Error: no property `value` for type `long`

    /tmp/tmpg6k8kppp.d(70): Error: no property `key` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg6k8kppp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164344
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    import std.algorithm\
    \ : max, min, reduce;\n    import std.typecons : Nullable;\n    import std.array\
    \ : array;\n    import std.algorithm.comparison : max, min;\n    import std.algorithm.iteration\
    \ : maxElement,minElement;\n    import std.typecons : Nullable;\n    import std.traits\
    \ : isIntegral;\n    import std.conv : to;\n    import std.range : max, min;\n\
    \    import std.algorithm.iteration : maxElement,minElement;\n    import std.meta\
    \ : AliasSeq;\n    import std.meta : AliasSeq;\n    import std.traits : isIntegral;\n\
    \    import std.range : max, min;\n    import std.range : max, min;\n    import\
    \ std.range : max, min;\n    import std.algorithm.searching : count;\n    import\
    \ std.array : array;\n    import std.typecons : Nullable;\n    import std.array\
    \ : array;\n    import std.algorithm.comparison : max, min;\n    import std.algorithm.iteration\
    \ : maxElement,minElement;\n    import std.typecons : Nullable;\n    import std.traits\
    \ : isIntegral;\n    import std.conv : to;\n    import std.range : max, min;\n\
    \    import std.algorithm.iteration : maxElement,minElement;\n    import std.meta\
    \ : AliasSeq;\n    import std.meta : AliasSeq;\n    import std.traits : isIntegral;\n\
    \    import std.range : max, min;\n    import std.range : max, min;\n    import\
    \ std.range : max, min;\n    import std.algorithm.searching : count;\n    import\
    \ std.array : array;\n    import std.typecons : Nullable;\n    import std.array\
    \ : array;\n    import std.algorithm.comparison : max, min;\n    import std.algorithm.iteration\
    \ : maxElement,minElement;\n    import std.typecons : Nullable;\n    import std.traits\
    \ : isIntegral;\n    import std.conv : to;\n    import\nunittest\n{\n    alias\
    \ candidate = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplw0ra4fs.d(67): Error: identifier expected following `import`

    /tmp/tmplw0ra4fs.d(67): Error: `;` expected

    /tmp/tmplw0ra4fs.d(112): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplw0ra4fs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164343
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    enum vowels\
    \ = \"aoeui\";\n    int[char] count;\n    foreach(i, c; test)\n    {\n       \
    \ if (c !in vowels)\n            continue;\n        count[c]++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto\
    \ result = candidate(\"a b b a\");\n        assert(!result.isNull && result.get\
    \ == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c\
    \ a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxhtzrkgp.d(28): Error: incompatible types for `(c) in ("aoeui")`:
    `immutable(char)` and `string`

    /tmp/tmpxhtzrkgp.d(32): Error: cannot implicitly convert expression `count` of
    type `int[char]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxhtzrkgp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164344
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ letters;\n    import std.algorithm : max;\n    import std.array : split;\n \
    \   import std.conv : to;\n    import std.functional : compose;\n    import std.map\
    \ : filter, count;\n    import std.range : iota;\n    import std.range : take;\n\
    \    import std.range : sort;\n    import std.string : strip;\n    import std.typecons\
    \ : tuple;\n    letters = test.strip.split.count.sort.map!(tuple(to!string, (_)\
    \ => 1L)).count.filter!(\n        (_) => _.second == test.strip.split.count.sort.map!(tuple(to!string,\
    \ (_) => 1L)).count.max!(compose!(\n            (_) => _[1])).second).map!(tuple(tuple(compose!((_)\
    \ => _[0]), (_) => _[1]))).take(1);\n    return letters;\n}\nunittest\n{\n   \
    \ alias candidate = histogram;\n\n{\n        auto result = candidate(\"a b b a\"\
    );\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8w6vgrek.d(29): Error: module `map` is in file ''std/map.d'' which
    cannot be read

    import path[0] = /tmp

    import path[1] = /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos

    import path[2] = /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/druntime/import

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8w6vgrek.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164343
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    if (test.empty)\n\
    \        return null;\n    auto tmp = split(test);\n    long[string] arr;\n  \
    \  foreach (index, value; tmp)\n    {\n        arr[value]++;\n    }\n    long\
    \ max = max(arr.values);\n    long[string] tmp2;\n    foreach (index, value; arr)\n\
    \    {\n        if (value == max)\n            tmp2[index] = value;\n    }\n \
    \   return tmp2;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n    \
    \    auto result = candidate(\"a b b a\");\n        assert(!result.isNull && result.get\
    \ == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c\
    \ a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptw321pgv.d(24): Error: no property `empty` for type `string`

    /tmp/tmptw321pgv.d(26): Error: undefined identifier `split`

    /tmp/tmptw321pgv.d(32): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmptw321pgv.d(25): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    /tmp/tmptw321pgv.d(39): Error: cannot implicitly convert expression `tmp2` of
    type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptw321pgv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164344
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    immutable\
    \ max_char = 26;\n    // List!(char)[] arr = new List!(char)[](max_char); \n \
    \   long[char] arr = new long[char](max_char);\n    // dict!(char, int) dict =\
    \ new dict!(char, int);\n    Nullable!(long[string]) dict;\n    foreach(c; test)\n\
    \    {\n        static if(!is(typeof(arr[c]))\n            assert(0, \"Wrong char\"\
    );\n        arr[c]++;\n    }\n    long max = 0;\n    string keys = \"\";\n   \
    \ foreach(i, value; arr)\n    {\n        static if(!is(typeof(i)))\n         \
    \   assert(0, \"Wrong char\");\n        // dict[i] = value;\n        if(value\
    \ > max)\n        {\n            max = value;\n            keys = format(\"%s\"\
    , i);\n        }\n        else if(value == max)\n        {\n            keys ~=\
    \ format(\"%s\", i);\n        }\n    }\n    if(max > 0)\n    {\n        dict =\
    \ keys.assumeArray.dup.sorted().assumeUnique().map!((x){return [x : max]; }.array).array.reduce!((a,\
    \ b){ return a ~ b; }.array).array;\n    }\n    return dict;\n}\nunittest\n{\n\
    \    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a b\
    \ b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6r3czxei.d(26): Error: need size of rightmost array, not type `char`

    /tmp/tmp6r3czxei.d(32): Error: found `assert` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6r3czxei.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164343
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    static struct\
    \ rec(T)\n    {\n        size_t cnt;\n        T val;\n    }\n    auto max_ = null;\n\
    \    auto recs = new rec!(string)[100];\n    size_t recs_cnt = 0;\n    foreach(token;\
    \ test.split)\n    {\n        bool found = false;\n        for(auto rec = recs[0\
    \ .. recs_cnt]; rec)\n        {\n            if(rec.val == token)\n          \
    \  {\n                ++rec.cnt;\n                found = true;\n            \
    \    break;\n            }\n        }\n        if(!found)\n        {\n       \
    \     recs[recs_cnt] = rec!(string)(0, token);\n            ++recs_cnt;\n    \
    \    }\n    }\n    foreach(rec; recs[0 .. recs_cnt])\n    {\n        if(!max_)\n\
    \        {\n            max_ = rec;\n        }\n        else if(max_.cnt == rec.cnt)\n\
    \        {\n            max_ = null;\n            break;\n        }\n        else\
    \ if(max_.cnt < rec.cnt)\n        {\n            max_ = rec;\n        }\n    }\n\
    \    auto res = new long[string]();\n    if(max_)\n    {\n        res[max_.val]\
    \ = max_.cnt;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_s99p8wq.d(35): Error: found `)` when expecting `;` following `for`
    condition

    /tmp/tmp_s99p8wq.d(44): Error: found `if` when expecting `)`

    /tmp/tmp_s99p8wq.d(44): Error: basic type expected, not `!`

    /tmp/tmp_s99p8wq.d(44): Error: found `!` when expecting `)`

    /tmp/tmp_s99p8wq.d(44): Error: missing `{ ... }` for function literal

    /tmp/tmp_s99p8wq.d(44): Error: found `found` when expecting `;` following statement

    /tmp/tmp_s99p8wq.d(44): Error: found `)` instead of statement

    /tmp/tmp_s99p8wq.d(50): Error: declaration expected, not `foreach`

    /tmp/tmp_s99p8wq.d(50): Error: no identifier for declarator `recs[0 .. recs_cnt]`

    /tmp/tmp_s99p8wq.d(50): Error: declaration expected, not `)`

    /tmp/tmp_s99p8wq.d(55): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_s99p8wq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164343
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{ \n    import std.array;\
    \ \n    import std.algorithm; \n    import std.conv; \n    Nullable!(long[string])\
    \ result = null; \n    long[string] arr; \n    long value; \n    if(test.length)\
    \ \n    { \n        value = 1; \n        foreach(index, char c; test) \n     \
    \   { \n            if(index && c == test[index - 1]) \n            { \n     \
    \           value++; \n            } \n            else \n            { \n   \
    \             if(index) \n                { \n                    arr[test[index\
    \ - 1 .. index - 1]] = value; \n                } \n                value = 1;\
    \ \n            } \n        } \n        arr[test[$ - 1 .. $ - 1]] = value; \n\
    \        value = max(arr.values); \n        auto keys = arr.keys.filter!(a =>\
    \ arr[a] == value); \n        result = to!(Nullable!(long[string]))(keys.map!(a\
    \ => [a: value]).array); \n    } \n    return result; \n} \n/*\n    Notes:\n \
    \   * Might not be the most efficient solution as there are loops within loops\n\
    \    * For the last value to be added to the associative array, I had to add a\
    \ check to see if \n    the index != 0 (see line 23), if not, the last value would\
    \ not be added\n    * I used the $ to get the last character of the string\n*/\n\
    unittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplxykfooj.d(49): Error: template `std.algorithm.comparison.max`
    cannot deduce function from argument types `!()(long[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/algorithm/comparison.d(1550):        `std.algorithm.comparison.max(T...)(T
    args) if (T.length >= 2)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/conv.d(222):
    Error: template `std.conv.toImpl` cannot deduce function from argument types `!(Nullable!(long[string]))(long[string][])`,
    candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/conv.d(493):        `std.conv.toImpl(T,
    S)(S value) if (isImplicitlyConvertible!(S, T) && !isEnumStrToStr!(S, T) && !isNullToStr!(S,
    T))`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/conv.d(607):        `std.conv.toImpl(T,
    S)(ref S s) if (isStaticArray!S)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/conv.d(623):        `std.conv.toImpl(T,
    S)(S value) if (!isImplicitlyConvertible!(S, T) && is(typeof(S.init.opCast!T())
    : T) && !isExactSomeString!T && !is(typeof(T(value))))`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/conv.d(674):        `std.conv.toImpl(T,
    S)(S value) if (!isImplicitlyConvertible!(S, T) && is(T == struct) && is(typeof(T(value))))`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/conv.d(723):        `std.conv.toImpl(T,
    S)(S value) if (!isImplicitlyConvertible!(S, T) && is(T == class) && is(ty'
  stdout: ''
  timestamp: 1660164344
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    auto str_array\
    \ = test.split(\" \");\n    long[string] result;\n    foreach(str; str_array)\
    \ \n    {\n        result[str] += 1L;\n    }\n    long max_val = max(result.values);\n\
    \    if(max_val == 0L)\n    {\n        return null;\n    }\n    result.removeIf!(a\
    \ => a[1] != max_val);\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbqmn31on.d(24): Error: no property `split` for type `string`

    /tmp/tmpbqmn31on.d(30): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmpbqmn31on.d(35): Error: no property `removeIf` for type `long[string]`

    /tmp/tmpbqmn31on.d(33): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    /tmp/tmpbqmn31on.d(36): Error: cannot implicitly convert expression `result` of
    type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbqmn31on.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164344
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    // Make a\
    \ histogram of each letter in the string and the count\n    auto hist = test.histogram();\n\
    \    // Sort the histogram by value\n    // https://forum.dlang.org/post/dk3zqjd2fs.fsf@fungible.pink\n\
    \    struct Comp(alias map) {\n        static bool opCmp(typeof(map.pairs[0])\
    \ a, typeof(map.pairs[0]) b) {\n            return a.value > b.value;\n      \
    \  }\n    }\n    hist.pairs[] = sort!(Comp!(typeof(hist)))(hist.pairs);\n    //\
    \ If the first item's value is the same as the second item's value\n    // then\
    \ we have a tie and should return null.\n    if (hist.pairs[0].value == hist.pairs[1].value)\n\
    \        return ___null_dict___;\n    // Otherwise return an array of the first\
    \ pair's key and value.\n    return long[string](hist.pairs[0].key, hist.pairs[0].value);\n\
    }\n \n \nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result\
    \ = candidate(\"a b b a\");\n        assert(!result.isNull && result.get == [\"\
    a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsz83jb3q.d(39): Error: found `[` when expecting `.` following long

    /tmp/tmpsz83jb3q.d(39): Error: found `]` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsz83jb3q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164343
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n    pure nothrow\
    \ @nogc {\n    long[string] result;\n    static assert(test.length == 0 || test[test.length\
    \ - 1] != ' ');\n    foreach(index, letter; test.split(\" \"))\n        result[letter]++;\n\
    \    if(result.length == 0)\n        return null;\n    long max = result.values.max;\n\
    \    foreach(key, value; result) {\n        if(value < max)\n            result.remove(key);\n\
    \    }\n    return result;\n}\nstring[] test_histogram(bool verbose = false) {\n\
    \    long[string] test1 = [\"a\": 1L, \"b\": 1L, \"c\": 1L];\n    long[string]\
    \ test2 = [\"a\": 2L, \"b\": 2L];\n    long[string] test3 = [\"b\": 4L];\n   \
    \ string[] tests = [\"a b c\", \"a b b a\", \"a b c a b\", \"b b b b a\", \"\"\
    ];\n    string[] results = [\"a b c\", \"a b\", \"a b\", \"b\", \"\"];\n    string[]\
    \ ret = [];\n    foreach(i, test; tests) {\n        auto result = histogram(test);\n\
    \        if(verbose) {\n            writeln(test, \": \", result);\n        }\n\
    \        if(results[i] == \"\" ? (result is null) : result.keys.join(\" \") ==\
    \ results[i]) {\n            ret ~= \"true\";\n        } else {\n            ret\
    \ ~= \"false\";\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias\
    \ candidate = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp94wrabv1.d(25): Error: variable `test` cannot be read at compile
    time

    /tmp/tmp94wrabv1.d(25):        while evaluating: `static assert(test.length ==
    0LU || test[test.length - 1] != '' '')`

    /tmp/tmp94wrabv1.d(26): Error: no property `split` for type `string`

    /tmp/tmp94wrabv1.d(30): Error: `@nogc` function `tmp94wrabv1.histogram` cannot
    call non-@nogc function `object.values!(long[string], long, string).values`

    /tmp/tmp94wrabv1.d(30): Error: no property `max` for type `long[]`

    /tmp/tmp94wrabv1.d(29): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    /tmp/tmp94wrabv1.d(35): Error: cannot implicitly convert expression `result` of
    type `long[string]` to `Nullable!(long[string])`

    /tmp/tmp94wrabv1.d(47): Error: `writeln` is not defined, perhaps `import std.stdio;`
    is needed?

    /tmp/tmp94wrabv1.d(49): Error: no property `join` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp94wrabv1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164344
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{ \n    Nullable!(long[string])\
    \ histogram;\n    string[] tokens = test.split(\" \");\n    long[string] histo;\n\
    \    long max = 0;\n    foreach(token; tokens)\n    {\n        histo[token] +=\
    \ 1;\n        if(histo[token] > max)\n        {\n            max = histo[token];\n\
    \        }\n    }\n    foreach(token; tokens)\n    {\n        if(histo[token]\
    \ == max)\n        {\n            histogram.insert(token, histo[token]);\n   \
    \     }\n    }\n    return histogram;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9trdyyn_.d(25): Error: no property `split` for type `string`

    /tmp/tmp9trdyyn_.d(40): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9trdyyn_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164345
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{ \n    // the input\
    \ string is a list of space separated words\n    string[] wordList = test.split(\"\
    \ \");\n    // we want to count the number of times each word appears in the array\n\
    \    // to do this we create a variable called `counts` which is a dictionary\n\
    \    // which uses the word as a key, and the value is the number of times the\
    \ word occurs.\n    // Note: since this is a dictionary, the order in which things\
    \ are added is not important\n    //  the dictionary uses a hashing function to\
    \ find the value associated with a key.\n    long[string] counts;\n    foreach(word;\
    \ wordList) \n    {\n        // counts is a dictionary, so we need to use `[]`\
    \ to get the value associated with a key\n        // we use the `getOrUpdate`\
    \ function because it automatically initializes the entry to \n        // 0L for\
    \ us if the word does not exist in the dictionary.\n        long count = counts.getOrUpdate(word,\
    \ 0L);\n        // we have now retrieved the value associated with the key `word`\
    \ from the dictionary `counts`\n        // we can now increment the value as if\
    \ it were a variable.\n        ++count;\n        // and then store the value back\
    \ into the dictionary using the same `[]` accessor.\n        counts[word] = count;\n\
    \    }\n    // we now have a dictionary of word -> count, but we only want the\
    \ words with the most count.\n    // so we need to find the maximum count\n  \
    \  // we start with the maximum value being 0.\n    long maxCount = 0L;\n    //\
    \ and then iterate over all the counts, and update the maximum count\n    foreach(wordCount;\
    \ counts)\n    {\n        maxCount = max(maxCount, wordCount.value);\n    }\n\
    \    // now that we have the maximum count, we can create a dictionary that contains\
    \ only the values\n    // from the original dictionary that have the maximum count.\n\
    \    // we use the `[]` accessor and `=` to initialize the new dictionary\n  \
    \  long[string] maxCountWords;\n    foreach(wordCount; counts)\n    {\n      \
    \  if(wordCount.value == maxCount)\n        {\n            maxCountWords[wordCount.key]\n\
    unittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptasotda_.d(62): Error: found `unittest` when expecting `;` following
    statement

    /tmp/tmptasotda_.d(107): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmptasotda_.d(107): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmptasotda_.d(107): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptasotda_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164344
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    return test.split().reduce!((a,b)\
    \ => a[b]++, nullable!(long[string])().init.get).get;\n}\nunittest\n{\n    alias\
    \ candidate = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6frmc2qu.d(24): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6frmc2qu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164345
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ count;\n    foreach(item; test.split)\n    {\n        if(count.count(item) ==\
    \ 0)\n        {\n            count[item] = 1;\n        }\n        else\n     \
    \   {\n            count[item]++;\n        }\n    }\n    int max = 0;\n    long[string]\
    \ result;\n    foreach(item; count)\n    {\n        if(max < item.value)\n   \
    \     {\n            max = item.value;\n        }\n    }\n    foreach(item; count)\n\
    \    {\n        if(item.value == max)\n        {\n            result[item.key]\
    \ = item.value;\n        }\n    }\n    if(result.length == 0)\n    {\n       \
    \ return null;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl4avaxc2.d(25): Error: no property `split` for type `string`

    /tmp/tmpl4avaxc2.d(40): Error: no property `value` for type `long`

    /tmp/tmpl4avaxc2.d(42): Error: no property `value` for type `long`

    /tmp/tmpl4avaxc2.d(47): Error: no property `value` for type `long`

    /tmp/tmpl4avaxc2.d(49): Error: no property `key` for type `long`

    /tmp/tmpl4avaxc2.d(54): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    /tmp/tmpl4avaxc2.d(56): Error: cannot implicitly convert expression `result` of
    type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl4avaxc2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164345
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n  Nullable!(long[string])\
    \ result = Nullable!(long[string]).init;\n  long[string] value = [:] ;\n  foreach(s;\
    \ test.split(\" \"))\n  {\n    value[s]++;\n  }\n  foreach(k,v; value)\n  {\n\
    \    if(!result.isValid || result.get.values.max > v)\n    {\n      value = [k:v];\n\
    \      result = value;\n    }\n    else if(result.get.values.max == v)\n    {\n\
    \      result.get[k] = v;\n    }\n  }\n  return result;\n}\nunittest\n{\n    alias\
    \ candidate = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxzrgfrg4.d(25): Error: expression expected, not `:`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxzrgfrg4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164344
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    auto letters\
    \ = test.split();\n    auto letter_counts = typeof(return)();\n    foreach(letter;\
    \ letters) \n    {\n        if(letter_counts.contains(letter)) \n        {\n \
    \           letter_counts[letter] += 1L;\n        }\n        else \n        {\n\
    \            letter_counts[letter] = 1L;\n        }\n    }\n    long max_count\
    \ = max(letter_counts.values);\n    auto histogram = typeof(return)();\n    foreach(k,\
    \ v; letter_counts) \n    {\n        if(v == max_count) \n        {\n        \
    \    histogram[k] = v;\n        }\n    }\n    return histogram;\n}\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp77p9097x.d(24): Error: no property `split` for type `string`

    /tmp/tmp77p9097x.d(37): Error: undefined identifier `max`, did you mean function
    `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp77p9097x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164345
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    import std.algorithm;\n\
    \    auto testArr = test.split();\n    long[string] res;\n    long max = 0;\n\
    \    for(string s; s = testArr.front)\n    {\n        long count = testArr.count(s);\n\
    \        max = max(max, count);\n        res[s] = count;\n        testArr.remove(s);\n\
    \    }\n    import std.algorithm.searching : all;\n    if(res.all!(key, value\
    \ => value == max))\n    {\n        import std.array;\n        res = res.filter!(kvp\
    \ => kvp.value == max).array;\n    }\n    import std.meta : AliasSeq;\n    return\
    \ typeof(res) == AliasSeq!(string, long) ? res : null;\n}\nunittest\n{\n    alias\
    \ candidate = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkc7dt4g9.d(28): Error: found `)` when expecting `;` following `for`
    condition

    /tmp/tmpkc7dt4g9.d(35): Error: found `import` when expecting `)`

    /tmp/tmpkc7dt4g9.d(35): Error: found `:` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkc7dt4g9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164344
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{ \n    Nullable!(long[string])\
    \ result = null;\n    long[string] temp = [_: 0L];\n    foreach(ch; test.assumeUnique())\n\
    \    {\n        temp[ch]++;\n    }\n    long max = maxElement(temp.values);\n\
    \    foreach(k, v; temp)\n    {\n        if(v == max)\n        {\n           \
    \ if(result.isNull)\n            {\n                result = [k: v];\n       \
    \     } else {\n                result[k] = v;\n            }\n        }\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n\
    {\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqqc6hmoe.d(25): Error: undefined identifier `_`

    /tmp/tmpqqc6hmoe.d(26): Error: no property `assumeUnique` for type `string`

    /tmp/tmpqqc6hmoe.d(30): Error: undefined identifier `maxElement`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqqc6hmoe.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164345
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ result;\n    long[long] counter;\n    foreach(letter; test.splitter)\n    {\n\
    \        if(!letter.empty)\n        {\n            result[letter] += 1L;\n   \
    \         counter[result[letter]] += 1L;\n        }\n    }\n    return !result.empty\
    \ ? result.byPair.filter!(pair => pair.value == counter.max).array.assocArray\
    \ : null;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto\
    \ result = candidate(\"a b b a\");\n        assert(!result.isNull && result.get\
    \ == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c\
    \ a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpswkawrqu.d(26): Error: no property `splitter` for type `string`

    /tmp/tmpswkawrqu.d(34): Error: no property `empty` for type `long[string]`

    /tmp/tmpswkawrqu.d(34): Error: no property `byPair` for type `long[string]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpswkawrqu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164345
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{ \n    Nullable!(long[string])\
    \ histogram;\n    foreach(char; test.byValue.split(cast(dchar)\" \")) \n    {\n\
    \        if(histogram.isNull)\n        {\n            histogram = [char: 1L];\n\
    \        }\n        else\n        {\n            histogram[char]++;\n        }\n\
    \    }\n    return histogram;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeeoh2j24.d(25): Error: no identifier for declarator `char`

    /tmp/tmpeeoh2j24.d(29): Error: found `:` when expecting `.` following char

    /tmp/tmpeeoh2j24.d(29): Error: found `1L` when expecting identifier following
    `char`.

    /tmp/tmpeeoh2j24.d(33): Error: found `]` when expecting `.` following char

    /tmp/tmpeeoh2j24.d(33): Error: found `++` when expecting identifier following
    `char`.

    /tmp/tmpeeoh2j24.d(33): Error: found `;` when expecting `,`

    /tmp/tmpeeoh2j24.d(34): Error: expression expected, not `}`

    /tmp/tmpeeoh2j24.d(35): Error: found `}` when expecting `,`

    /tmp/tmpeeoh2j24.d(36): Error: expression expected, not `return`

    /tmp/tmpeeoh2j24.d(36): Error: found `histogram` when expecting `,`

    /tmp/tmpeeoh2j24.d(36): Error: expression expected, not `;`

    /tmp/tmpeeoh2j24.d(37): Error: found `}` when expecting `,`

    /tmp/tmpeeoh2j24.d(38): Error: expression expected, not `unittest`

    /tmp/tmpeeoh2j24.d(39): Error: found `{` when expecting `,`

    /tmp/tmpeeoh2j24.d(40): Error: expression expected, not `alias`

    /tmp/tmpeeo'
  stdout: ''
  timestamp: 1660164344
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ n = Nullable!(long[string])(false, [string.init], [long.init]);\n    foreach(letter;\
    \ test.split(\" \"))\n    {\n        if(n.isNull)\n        {\n            n.value.insert(letter,\
    \ 0L);\n        }\n        if(n.value.find(letter) is null)\n        {\n     \
    \       n.value.insert(letter, 0L);\n        }\n        n.value[letter] += 1L;\n\
    \    }\n    auto longest = max(n.value.values);\n    Nullable!(long[string]) longest_letters\
    \ = null;\n    foreach(i; n.value.byKeyValue)\n    {\n        if(i.value == longest)\n\
    \        {\n            if(longest_letters.isNull)\n            {\n          \
    \      longest_letters = Nullable!(long[string])(false, [string.init], [long.init]);\n\
    \            }\n            longest_letters.value.insert(i.key, i.value);\n  \
    \      }\n    }\n    return longest_letters;\n}\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpku2gyoet.d(24): Error: `inout` method `std.typecons.Nullable!(long[string]).Nullable.this`
    is not callable using a mutable object

    /tmp/tmpku2gyoet.d(25): Error: no property `split` for type `string`

    /tmp/tmpku2gyoet.d(37): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmpku2gyoet.d(39): Error: no property `value` for type `Nullable!(long[string])`,
    did you mean `std.typecons.Nullable!(long[string]).Nullable._value`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpku2gyoet.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164345
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    return \"\
    unimplemented\";\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n    \
    \    auto result = candidate(\"a b b a\");\n        assert(!result.isNull && result.get\
    \ == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c\
    \ a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpifastshw.d(24): Error: cannot implicitly convert expression `"unimplemented"`
    of type `string` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpifastshw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164345
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result;\n    if(test.length != 0)\n    {\n        long[string] res;\n      \
    \  int[string] a;\n        string[] words = test.split(\" \");\n        foreach(ref\
    \ word; words)\n        {\n            a[word]++;\n        }\n        long max\
    \ = a.values.max;\n        foreach(ref key; a.keys)\n        {\n            if(a[key]\
    \ == max)\n            {\n                res[key] = max;\n            }\n   \
    \     }\n        result = res;\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = histogram;\n\n{\n        auto result = candidate(\"a b b\
    \ a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6zku1m66.d(29): Error: no property `split` for type `string`

    /tmp/tmp6zku1m66.d(34): Error: no property `max` for type `int[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6zku1m66.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164345
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    import std.algorithm;\n\
    \    import std.array;\n    import std.conv;\n    import std.string;\n    import\
    \ std.range;\n    import std.typecons;\n    import std.traits;\n    import std.math;\n\
    \    import std.ascii;\n    import std.stdio;\n    import std.exception;\n   \
    \ import std.format;\n    import std.datetime;\n    import std.algorithm;\n  \
    \  import std.array;\n    import std.typecons;\n    import std.math;\n    import\
    \ std.range;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.type\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuhe5nz4b.d(89): Error: `;` expected

    /tmp/tmpuhe5nz4b.d(134): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuhe5nz4b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164344
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ result;\n    if (test.empty)\n        return typeof(result).init;\n    foreach\
    \ (ch; test.toLower().split())\n    {\n        result[ch]++;\n    }\n    long\
    \ max = result.values.max();\n    if (max == 0)\n        return result.init;\n\
    \    foreach (elem; result.keys)\n    {\n        if (result[elem] < max)\n   \
    \         result.remove(elem);\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = histogram;\n\n{\n        auto result = candidate(\"a b b\
    \ a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp96oqnuo_.d(25): Error: no property `empty` for type `string`

    /tmp/tmp96oqnuo_.d(27): Error: no property `toLower` for type `string`

    /tmp/tmp96oqnuo_.d(31): Error: no property `max` for type `long[]`

    /tmp/tmp96oqnuo_.d(26): Error: cannot implicitly convert expression `null` of
    type `long[string]` to `Nullable!(long[string])`

    /tmp/tmp96oqnuo_.d(33): Error: cannot implicitly convert expression `null` of
    type `long[string]` to `Nullable!(long[string])`

    /tmp/tmp96oqnuo_.d(39): Error: cannot implicitly convert expression `result` of
    type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp96oqnuo_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164345
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{ \n    Nullable!(long[string])\
    \ nullableDict = null;\n    long[string] tmpDict;\n    long count;\n    foreach(key;\
    \ test.split(\" \"))\n    {\n        if(key !in tmpDict)\n        {\n        \
    \    tmpDict[key] = 1L;\n        }\n        else\n        {\n            tmpDict[key]\
    \ += 1L;\n        }\n        count = tmpDict[key];\n    }\n    if(!tmpDict.empty)\n\
    \    {\n        count = max(tmpDict.values);\n        foreach(key; tmpDict.keys)\n\
    \        {\n            if(tmpDict[key] == count)\n            {\n           \
    \     nullableDict[key] = count;\n            }\n        }\n    }\n    return\
    \ nullableDict;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n     \
    \   auto result = candidate(\"a b b a\");\n        assert(!result.isNull && result.get\
    \ == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c\
    \ a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx0xq7dio.d(27): Error: no property `split` for type `string`

    /tmp/tmpx0xq7dio.d(39): Error: no property `empty` for type `long[string]`

    /tmp/tmpx0xq7dio.d(41): Error: undefined identifier `max`, did you mean function
    `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx0xq7dio.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164345
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    if (test.empty)\
    \ \n    {\n        return null;\n    }\n    auto a = test.split();\n    auto hist\
    \ = to!(dchar[])[\"\"].assoc;\n    foreach (c; a)\n    {\n        if (c !in hist)\n\
    \        {\n            hist[c] = 1;\n        }\n        else\n        {\n   \
    \         hist[c]++;\n        }\n    }\n    alias entry = typeof(hist[a[0]]);\n\
    \    entry max = maxElement(hist);\n    long[string] res;\n    foreach (c; hist)\n\
    \    {\n        if (c.value == max)\n        {\n            res[c.key] = c.value;\n\
    \        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk6llwyd3.d(24): Error: no property `empty` for type `string`

    /tmp/tmpk6llwyd3.d(28): Error: no property `split` for type `string`

    /tmp/tmpk6llwyd3.d(29): Error: template instance `to!(dchar[])` template `to`
    is not defined, did you mean No?

    /tmp/tmpk6llwyd3.d(42): Error: undefined identifier `maxElement`

    /tmp/tmpk6llwyd3.d(26): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    /tmp/tmpk6llwyd3.d(51): Error: cannot implicitly convert expression `res` of type
    `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk6llwyd3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164345
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ ret = null;\n    alias MC = MaxCount;\n    int[MC] letterCounts;\n    foreach(char\
    \ c; test)\n    {\n        if(!letterCounts.contains(MC(c, 0)))\n        {\n \
    \           letterCounts[MC(c, 0)] = 1;\n        }\n        else\n        {\n\
    \            ++letterCounts[MC(c, 0)];\n        }\n    }\n    long maxCount =\
    \ letterCounts.values.max;\n    foreach(MC k, int v; letterCounts)\n    {\n  \
    \      if(v == maxCount)\n        {\n            if(ret.isNull)\n            {\n\
    \                ret = [k.letter: maxCount];\n            }\n            else\n\
    \            {\n                ret[k.letter] = maxCount;\n            }\n   \
    \     }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk1x_iuva.d(25): Error: undefined identifier `MaxCount`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk1x_iuva.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164345
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = Nullable!(long[string]).init;\n    auto chars = test.split();\n   \
    \ foreach(ch; chars)\n    {\n        if(result.isNull)\n        {\n          \
    \  result.assign(long[string](1.max, ch: 1L));\n        }\n        else\n    \
    \    {\n            auto it = result.get.byKey(ch);\n            if(it.find !\
    \ is null)\n            {\n                it.find.value++;\n            }\n \
    \           else\n            {\n                result.get[ch] = 1L;\n      \
    \      }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnjwi_l_9.d(30): Error: found `[` when expecting `.` following long

    /tmp/tmpnjwi_l_9.d(30): Error: found `]` when expecting `,`

    /tmp/tmpnjwi_l_9.d(30): Error: found `:` when expecting `)`

    /tmp/tmpnjwi_l_9.d(30): Error: found `1L` when expecting `,`

    /tmp/tmpnjwi_l_9.d(30): Error: found `)` when expecting `;` following statement

    /tmp/tmpnjwi_l_9.d(30): Deprecation: use `{ }` for an empty statement, not `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnjwi_l_9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164344
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \nin \n{\n\tassert(test.length\
    \ == 0L || test.strip().equals(test));\n}\nbody \n{\n    return\n        test.strip().split().\n\
    \        reduce!((string lhs, string rhs) \n        {\n            if (lhs.strip.length\
    \ == 0)\n                return rhs;\n            else\n                return\
    \ lhs;\n        }).\n        frequency.\n        filter!((Tuple!(size_t, \"a\"\
    ) p) \n        {\n            return p[1].count == test.strip().split().length;\n\
    \        }).\n        map!((Tuple!(size_t, \"a\") p) \n        {\n           \
    \ return tuple(p[1].value, p[0]);\n        }).\n        array.\n        nullable;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx5vwrafi.d(30): Error: no property `strip` for type `string`

    /tmp/tmpx5vwrafi.d(25): Error: no property `strip` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx5vwrafi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164345
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    if (test.empty)\
    \ return ___null_dict___;\n    auto str = test.split();\n    long[string] letterCounts;\n\
    \    foreach (chr; str) {\n        if (letterCounts.byKey.contains(chr)) letterCounts[chr]++;\n\
    \        else letterCounts[chr] = 1;\n    }\n    long max = maxElement(letterCounts.values);\n\
    \    return array(filter!(l =&gt; l.value == max)(letterCounts.byKey)).nullable;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpipkzd210.d(32): Error: found `;` when expecting `)` following template
    argument list

    /tmp/tmpipkzd210.d(32): Error: found `l` when expecting `,`

    /tmp/tmpipkzd210.d(32): Error: found `)` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpipkzd210.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164344
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ dict = new long[string];\n    if(test == \"\") \n    {\n        return ___null_dict___;\n\
    \    }\n    foreach(t; test.split(\" \")) \n    {\n        dict[t] += 1L;\n  \
    \  }\n    int highest = 0;\n    string[] keys = [];\n    foreach(t; dict) \n \
    \   {\n        if(t.value > highest) \n        {\n            highest = t.value;\n\
    \            keys = [t.key];\n        }\n        else if(t.value == highest) \n\
    \        {\n            keys ~= t.key;\n        }\n    }\n    //keys are now all\
    \ the keys with the highest number of occurrence\n    long[string] res = new long[string];\n\
    \    foreach(t; keys) \n    {\n        res[t] = dict[t];\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1jxk8tgs.d(24): Error: cannot pass type `string` as a function
    argument

    /tmp/tmp1jxk8tgs.d(27): Error: undefined identifier `___null_dict___`

    /tmp/tmp1jxk8tgs.d(29): Error: no property `split` for type `string`

    /tmp/tmp1jxk8tgs.d(37): Error: no property `value` for type `long`

    /tmp/tmp1jxk8tgs.d(39): Error: no property `value` for type `long`

    /tmp/tmp1jxk8tgs.d(40): Error: no property `key` for type `long`

    /tmp/tmp1jxk8tgs.d(42): Error: no property `value` for type `long`

    /tmp/tmp1jxk8tgs.d(44): Error: no property `key` for type `long`

    /tmp/tmp1jxk8tgs.d(48): Error: cannot pass type `string` as a function argument

    /tmp/tmp1jxk8tgs.d(53): Error: cannot implicitly convert expression `res` of type
    `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1jxk8tgs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164345
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    import std.algorithm;\n\
    \    import std.array;\n    import std.conv;\n    import std.range;\n    import\
    \ std.string;\n    import std.typecons;\n    import std.uni;\n    import std.utf;\n\
    \    // Type checked.\n    // Sometimes you may have to specifiy the return type.\n\
    \    Nullable!(long[string]) ret = Nullable!(long[string])().init;\n    test =\
    \ strip(test);\n    if (test.length == 0) \n    {\n        return ret;\n    }\n\
    \    ulong[] occurences = new ulong[test.length];\n    long[] counts = new long[test.length];\n\
    \    long max = 0;\n    long maxCount = 0;\n    long i = 0;\n    foreach (char\
    \ c; test) \n    {\n        ulong o = c.isLower;\n        occurences[i] = o;\n\
    \        if (o != 0) \n        {\n            counts[o] += 1;\n            if\
    \ (counts[o] > maxCount) \n            {\n                maxCount = counts[o];\n\
    \                max = o;\n            }\n        }\n        i += 1;\n    }\n\
    \    // ditto\n    if (maxCount == 0) \n    {\n        return ret;\n    }\n  \
    \  ret.get().length = 2;\n    // We cannot initialize just like this, because\n\
    \    // you cannot initialize an associative array.\n    // foreach (c; occurences)\n\
    \    // {\n    //     if (c == max)\n    //     {\n    //         ret.get()[c]\
    \ = counts[c];\n    //     }\n    // }\n    // So we have to do it step by step\n\
    \    foreach (c; occurences) \n    {\n        if (c == max) \n        {\n    \
    \        ret.get()[c] = counts[c];\n        }\n    }\n    // if you want to initialize\
    \ on the fly,\n    // use the following constructor\n    // ret.get() = [max:\
    \ counts[max]];\n    return ret;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0yicpatn.d(65): Error: `ret.get().length` is not an lvalue and
    cannot be modified

    /tmp/tmp0yicpatn.d(80): Error: cannot implicitly convert expression `c` of type
    `ulong` to `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0yicpatn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164345
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    import std.array\
    \ : array;\n    import std.algorithm : max, equal;\n    import std.range : iota;\n\
    \    import std.stdio;\n    import std.string : split;\n    import std.typecons\
    \ : Nullable;\n    Nullable!(long[string]) nd;\n    string[] words = test.split;\n\
    \    long[] cnt;\n    foreach(i, word; words)\n    {\n        cnt[word]++;\n \
    \   }\n    long max = cnt.max;\n    auto index = iota(cnt.length).filter!(i =>\
    \ cnt[i] == max);\n    if(index.length == 1)\n    {\n        nd = Nullable!(long[string])(cnt[index[0]]);\n\
    \    } else\n    {\n        nd = Nullable!(long[string])(index.map!(i => cnt[i]).array);\n\
    \    }\n    return nd;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n\
    \        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfe0u6dvy.d(35): Error: cannot implicitly convert expression `word`
    of type `string` to `ulong`

    /tmp/tmpfe0u6dvy.d(37): Error: template `std.algorithm.comparison.max` cannot
    deduce function from argument types `!()(long[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/algorithm/comparison.d(1550):        `std.algorithm.comparison.max(T...)(T
    args) if (T.length >= 2)`

    /tmp/tmpfe0u6dvy.d(37): Error: declaration `tmpfe0u6dvy.histogram.max` is already
    defined

    /tmp/tmpfe0u6dvy.d(38): Error: no property `filter` for type `Result`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfe0u6dvy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164345
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ reval = null;\n    long[string] histogram_dict = new long[string];\n    string[]\
    \ letters = test.split(\" \");\n    for (size_t i = 0; i < letters.length; i++)\n\
    \    {\n        if (histogram_dict.count(letters[i]) != 0)\n        {\n      \
    \      histogram_dict[letters[i]] += 1;\n        } else {\n            histogram_dict[letters[i]]\
    \ = 1;\n        }\n    }\n    if (histogram_dict.length == 0)\n    {\n       \
    \ return reval;\n    }\n    long max_count = histogram_dict.values[0];\n    foreach\
    \ (val; histogram_dict.values)\n    {\n        if (val > max_count)\n        {\n\
    \            max_count = val;\n        }\n    }\n    long[string] max_count_dict\
    \ = new long[string];\n    foreach (key, val; histogram_dict)\n    {\n       \
    \ if (val == max_count)\n        {\n            max_count_dict[key] = val;\n \
    \       }\n    }\n    return max_count_dict;\n}\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpou5tr451.d(25): Error: cannot pass type `string` as a function
    argument

    /tmp/tmpou5tr451.d(26): Error: no property `split` for type `string`

    /tmp/tmpou5tr451.d(29): Error: no property `count` for type `long[string]`

    /tmp/tmpou5tr451.d(48): Error: cannot pass type `string` as a function argument

    /tmp/tmpou5tr451.d(56): Error: cannot implicitly convert expression `max_count_dict`
    of type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpou5tr451.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164345
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    import std.array;\n\
    \    import std.algorithm;\n    import std.range;\n    import std.conv;\n    import\
    \ std.string;\n    import std.stdio;\n    import std.array;\n    import std.range;\n\
    \    import std.algorithm;\n    import std.math;\n    import std.conv;\n    import\
    \ std.typecons;\n    import std.exception;\n    Nullable!(long[string]) max_hist_key_dict(in\
    \ Nullable!(long[string]) mhd) \n    {\n        static if (is (typeof(mhd.ptr)))\
    \ \n        {\n            auto map_it = mhd.ptr;\n            if (map_it.length\
    \ > 0) \n            {\n                //std.algorithm.sort!\"a.value > b.value\"\
    (map_it);\n                long max_count = map_it[0].value;\n               \
    \ return map_it.filter!\"a.value == max_count\".idup;\n            }\n       \
    \ }\n        return ___null_dict___;\n    }\n    Nullable!(long[string]) curr_hist_key_dict(in\
    \ Nullable!(long[string]) chd, string key) \n    {\n        if (chd.isNull) \n\
    \        {\n            return null;\n        }\n        auto map_it = chd.ptr;\n\
    \        if (map_it.length > 0) \n        {\n            if (map_it.canFind(key))\
    \ \n            {\n                map_it[key]++;\n            }\n           \
    \ else \n            {\n                map_it[key] = 1L;\n            }\n   \
    \     }\n        return map_it;\n    }\n    Nullable!(long[string]) curr_hist_key_dict_null(in\
    \ Nullable!(long[string]) chd, string key) \n    {\n        if (chd.isNull) \n\
    \        {\n            auto map_it = new long[string];\n            map_it[key]\
    \ = 1L;\n            return map_it;\n        }\n        return curr_hist_key_dict(chd,\
    \ key);\n\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result\
    \ = candidate(\"a b b a\");\n        assert(!result.isNull && result.get == [\"\
    a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxgk_5iz3.d(81): Error: found `unittest` instead of statement

    /tmp/tmpxgk_5iz3.d(126): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxgk_5iz3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164344
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ ret;\n    long len = test.length;\n    long max = 0;\n    long[string] max_keys;\n\
    \    if (len > 0)\n    {\n        foreach (key; test.split())\n        {\n   \
    \         if (ret.contains(key))\n            {\n                ret[key]++;\n\
    \            }\n            else\n            {\n                ret[key] = 1;\n\
    \            }\n            if (ret[key] > max)\n            {\n             \
    \   max = ret[key];\n                max_keys = [];\n                max_keys[key]\
    \ = max;\n            }\n            else if (ret[key] == max)\n            {\n\
    \                max_keys[key] = max;\n            }\n        }\n    }\n    return\
    \ max_keys.nullable;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n\
    \        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkkc06bw5.d(30): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkkc06bw5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164345
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    auto v = test.split;\n\
    \    return v.walkLength \n        ? v.walkLength.reduce!((a,b) => a.count > b.count\
    \ ? a : b)\n        : null;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf69vwqk5.d(24): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf69vwqk5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164345
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[] a;\n\
    \    foreach(c; test.split())\n    {\n        a[c]++;\n    }\n    long max = 0;\n\
    \    long[] b;\n    foreach(c; a.keys)\n    {\n        if(a[c] > max)\n      \
    \  {\n            max = a[c];\n            b = new long[string][];\n         \
    \   b[c] = a[c];\n        }\n        else if(a[c] == max)\n        {\n       \
    \     b[c] = a[c];\n        }\n    }\n    return b;\n}\nunittest\n{\n    alias\
    \ candidate = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaaarnzva.d(25): Error: no property `split` for type `string`

    /tmp/tmpaaarnzva.d(31): Error: template `object.keys` cannot deduce function from
    argument types `!()(long[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/druntime/import/object.d(3040):        `object.keys(T
    : Value[Key], Value, Key)(T aa)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/druntime/import/object.d(3048):        `object.keys(T
    : Value[Key], Value, Key)(T* aa)`

    /tmp/tmpaaarnzva.d(44): Error: cannot implicitly convert expression `b` of type
    `long[]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaaarnzva.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164345
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    string []\
    \ words = test.split(cast(string[])[\" \"]);\n    long[string] histo = new long[string];\n\
    \    foreach(word; words)\n    {\n        histo[word] += 1L;\n    }\n    long\
    \ maxValue = 0L;\n    foreach(key, value; histo)\n    {\n        if(value > maxValue)\n\
    \        {\n            maxValue = value;\n        }\n    }\n    string[] maxKeys\
    \ = new string[];\n    foreach(key, value; histo)\n    {\n        if(value ==\
    \ maxValue)\n        {\n            maxKeys ~= key;\n        }\n    }\n    if(maxKeys.length\
    \ == 0)\n    {\n        return ___null_dict___;\n    }\n    long[string] result\
    \ = new long[string];\n    foreach(key; maxKeys)\n    {\n        result[key] =\
    \ maxValue;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr3d0szyh.d(24): Error: no property `split` for type `string`

    /tmp/tmpr3d0szyh.d(25): Error: cannot pass type `string` as a function argument

    /tmp/tmpr3d0szyh.d(38): Error: new can only create structs, dynamic arrays or
    class objects, not `string[]`''s

    /tmp/tmpr3d0szyh.d(48): Error: undefined identifier `___null_dict___`

    /tmp/tmpr3d0szyh.d(50): Error: cannot pass type `string` as a function argument

    /tmp/tmpr3d0szyh.d(55): Error: cannot implicitly convert expression `result` of
    type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr3d0szyh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164345
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ retValue = Nullable!(long[string])(true);\n    int i = 0;\n    int len = test.length;\n\
    \    int j = 0;\n    string[] letters = new string[len];\n    letters = test.split(\"\
    \ \");\n    bool found = false;\n    if (letters.length == 0)\n    {\n       \
    \ return ___null_dict___;\n    }\n    for (int k = 0; k < letters.length; k++)\n\
    \    {\n        for (i = 0; i < len; i++)\n        {\n            for (j = i +\
    \ 1; j < len; j++)\n            {\n                if (letters[i] == letters[j])\n\
    \                {\n                    if (!retValue.containsKey(letters[i]))\n\
    \                    {\n                        retValue[letters[i]] = 0;\n  \
    \                  }\n                    retValue[letters[i]]++;\n          \
    \          found = true;\n                }\n            }\n        }\n    }\n\
    \    return retValue;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n\
    \        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph9nvksq4.d(24): Error: `inout` method `std.typecons.Nullable!(long[string]).Nullable.this`
    is not callable using a mutable object

    /tmp/tmph9nvksq4.d(26): Error: cannot implicitly convert expression `test.length`
    of type `ulong` to `int`

    /tmp/tmph9nvksq4.d(29): Error: no property `split` for type `string`

    /tmp/tmph9nvksq4.d(33): Error: undefined identifier `___null_dict___`

    /tmp/tmph9nvksq4.d(43): Error: no property `containsKey` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph9nvksq4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164346
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    if (test.empty)\n\
    \        return ___null_dict___;\n    long[string] max;\n    long[string] count;\n\
    \    foreach (elem; test.split(\" \"))\n    {\n        if (!count.contains(elem))\n\
    \            count[elem] = 1;\n        else\n            count[elem]++;\n    }\n\
    \    long maxValue = 0;\n    foreach (elem; count)\n    {\n        if (elem.value\
    \ == maxValue)\n            max[elem.key] = elem.value;\n        else if (elem.value\
    \ > maxValue)\n        {\n            maxValue = elem.value;\n            max\
    \ = [ elem.key : elem.value ];\n        }\n    }\n    return Nullable!(long[string])(max);\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp_4pl76s.d(24): Error: no property `empty` for type `string`

    /tmp/tmpp_4pl76s.d(25): Error: undefined identifier `___null_dict___`

    /tmp/tmpp_4pl76s.d(28): Error: no property `split` for type `string`

    /tmp/tmpp_4pl76s.d(38): Error: no property `value` for type `long`

    /tmp/tmpp_4pl76s.d(39): Error: no property `key` for type `long`

    /tmp/tmpp_4pl76s.d(40): Error: no property `value` for type `long`

    /tmp/tmpp_4pl76s.d(42): Error: no property `value` for type `long`

    /tmp/tmpp_4pl76s.d(43): Error: no property `key` for type `long`

    /tmp/tmpp_4pl76s.d(43): Error: no property `value` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp_4pl76s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164346
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    // return\
    \ histogram(test.split(\" \"));\n    auto words = test.split(\" \");\n    if (words.length\
    \ == 0)\n        return null;\n    auto result = new long[string];\n    foreach\
    \ (word; words)\n    {\n        long count = 0;\n        foreach (w; words)\n\
    \        {\n            if (w == word)\n                count++;\n        }\n\
    \        result[word] = count;\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = histogram;\n\n{\n        auto result = candidate(\"a b b\
    \ a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpslnc37h3.d(25): Error: no property `split` for type `string`

    /tmp/tmpslnc37h3.d(28): Error: cannot pass type `string` as a function argument

    /tmp/tmpslnc37h3.d(27): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpslnc37h3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164346
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    import std.algorithm;\n\
    \    import std.array;\n    import std.range;\n    import std.stdio;\n    import\
    \ std.string;\n    import std.typecons;\n    import std.typecons;\n    import\
    \ std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\
    \ std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\
    \ std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\
    \ std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\
    \ std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\
    \ std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\
    \ std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\
    \ std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\
    \ std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\
    \ std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\
    \ std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\
    \ std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\
    \ std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\
    \ std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\
    \ std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\
    \ std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\
    \ std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\
    \ std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\
    \ std.typecons;\n    import std.typecons;\n    import std.typecons;\n\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk99vimb9.d(89): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk99vimb9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164345
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \npure nothrow \n{\n\
    \    return test.split(' ').frequency.filter!((k,v) => v == test.split(' ').frequency.values.max).nullable;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7411i0yh.d(25): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7411i0yh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164346
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    // read the\
    \ characters into an array\n    import std.algorithm;\n    import std.array;\n\
    \    import std.range;\n    // count the number of characters\n    // char[] temp\
    \ = test.dup;\n    // auto s = temp.dedup;\n    // auto result = s.map!(a => test.countUntil(a)).array;\n\
    \    // return result.assocArray.nullable;\n    auto temp = test.split(\" \");\n\
    \    auto result = temp.enumerate.map!(a => a.value.countUntil(a.index.to!string));\n\
    \    return result.assocArray.nullable;\n}\nunittest\n{\n    alias candidate =\
    \ histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu76awvab.d(34): Error: no property `to` for type `ulong`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/algorithm/iteration.d(499):        instantiated
    from here: `MapResult!(__lambda2, Result)`

    /tmp/tmpu76awvab.d(34):        instantiated from here: `map!(Result)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu76awvab.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164346
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    import std.algorithm\
    \ : reduce, max, equal;\n    import std.array : iota;\n    import std.range :\
    \ zip;\n    import std.typecons : tuple;\n    import std.conv : to;\n    import\
    \ std.typecons : Nullable;\n    string[] split_test = test.split;\n    long[string]\
    \ tally;\n    foreach(str; split_test)\n    {\n        tally[str]++;\n    }\n\
    \    long max = tally.values.max;\n    string[] keys = (tally.keys.length == 0)\
    \ ? \"\": tally.keys[iota(tally.keys.length)];\n    long[] values = (tally.values.length\
    \ == 0) ? 0L : tally.values[iota(tally.values.length)];\n    Nullable!(long[string])\
    \ the_return;\n    foreach(t; zip(keys, values))\n    {\n        if(t[1] == max)\n\
    \        {\n            the_return[t[0]] = t[1];\n        }\n    }\n    return\
    \ the_return;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n       \
    \ auto result = candidate(\"a b b a\");\n        assert(!result.isNull && result.get\
    \ == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c\
    \ a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo_dfvs0d.d(25): Error: module `std.array` import `iota` not found

    /tmp/tmpo_dfvs0d.d(30): Error: no property `split` for type `string`

    /tmp/tmpo_dfvs0d.d(36): Error: template `std.algorithm.comparison.max` cannot
    deduce function from argument types `!()(long[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/algorithm/comparison.d(1550):        `std.algorithm.comparison.max(T...)(T
    args) if (T.length >= 2)`

    /tmp/tmpo_dfvs0d.d(36): Error: declaration `tmpo_dfvs0d.histogram.max` is already
    defined

    /tmp/tmpo_dfvs0d.d(42): Error: void has no value

    /tmp/tmpo_dfvs0d.d(42): Error: incompatible types for `(t.__expand_field_1) ==
    (max(T...)(T args) if (T.length >= 2))`: `long` and `void`

    '
  stdout: ''
  timestamp: 1660164346
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    return test.split.histogram;\n\
    }\npublic static void main(string[] args) \n{\n    assert (histogram(\"a b c\"\
    ) == [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable);\n    assert (histogram(\"a b\
    \ b a\") == [\"a\": 2L, \"b\": 2L].nullable);\n    assert (histogram(\"a b c a\
    \ b\") == [\"a\": 2L, \"b\": 2L].nullable);\n    assert (histogram(\"b b b b a\"\
    ) == [\"b\": 4L].nullable);\n    assert (histogram(\"\") == ___null_dict___);\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyxb6ovn4.d(24): Error: no property `split` for type `string`

    /tmp/tmpyxb6ovn4.d(32): Error: undefined identifier `___null_dict___`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyxb6ovn4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164346
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = typeof(result)();\n    if(test.length == 0)\n        return result;\n\
    \    bool[string] alphabet = typeof(alphabet)();\n    int[string] dict = typeof(dict)();\n\
    \    foreach(const character; test.split)\n    {\n        if(!alphabet.contains(character))\n\
    \        {\n            alphabet[character] = true;\n            dict[character]\
    \ = 1;\n        }\n        else\n            dict[character] += 1;\n    }\n  \
    \  int maxOccurence = 0;\n    foreach(const key, const value; dict)\n    {\n \
    \       if(value == maxOccurence)\n            result.get.insert(key, value);\n\
    \        else if(value > maxOccurence)\n        {\n            maxOccurence =\
    \ value;\n            result = typeof(result)();\n            result.get.insert(key,\
    \ value);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzan7en6y.d(24): Error: undefined identifier `result`

    /tmp/tmpzan7en6y.d(27): Error: undefined identifier `alphabet`

    /tmp/tmpzan7en6y.d(28): Error: undefined identifier `dict`

    /tmp/tmpzan7en6y.d(29): Error: no property `split` for type `string`

    /tmp/tmpzan7en6y.d(43): Error: no property `insert` for type `long[string]`

    /tmp/tmpzan7en6y.d(48): Error: no property `insert` for type `long[string]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzan7en6y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164346
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    /*\n     \
    \   This function uses the associative array to count the number of repetitions\n\
    \        I have used a Nullable type in case the input is an empty string\n  \
    \  */\n    Nullable!(long[string]) dict = Nullable!(long[string]).init;\n    foreach(letter;\
    \ test.splitter(\" \"))\n    {\n        if(letter == \"\") continue;\n       \
    \ if(auto d = dict.get)\n        {\n            if(d.get.keyExists(letter)) \n\
    \            {\n                dict.get.set(letter, d.get[letter] + 1);\n   \
    \         }\n            else\n            {\n                dict.get.set(letter,\
    \ 1);\n            }\n        }\n        else\n        {\n            dict.set\
    \ = long[string]().init;\n            dict.get.set(letter, 1);\n        }\n  \
    \  }\n    if(auto d = dict.get)\n    {\n        return dict;\n    }\n    else\n\
    \    {\n        return ___null_dict___;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuin7rlva.d(45): Error: found `[` when expecting `.` following long

    /tmp/tmpuin7rlva.d(45): Error: found `]` when expecting `;` following statement

    /tmp/tmpuin7rlva.d(45): Error: expression expected, not `)`

    /tmp/tmpuin7rlva.d(45): Error: found `;` when expecting `)`

    /tmp/tmpuin7rlva.d(46): Error: found `dict` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuin7rlva.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164345
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    auto result\
    \ = [[\"b\", 0], [\"a\", 0], [\"c\", 0]];\n    string[] chars = test.split(\"\
    \ \");\n    foreach(c; chars)\n    {\n        result[c]++;\n    }\n    long max\
    \ = max(result.values);\n    return filter!(key => result[key] == max)(result).keys.nullable;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbiarhnqn.d(24): Error: incompatible types for `("b") : (0)`: `string`
    and `int`

    /tmp/tmpbiarhnqn.d(25): Error: no property `split` for type `string`

    /tmp/tmpbiarhnqn.d(30): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmpbiarhnqn.d(31): Error: template instance `filter!((key) => result[key]
    == max)` template `filter` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbiarhnqn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164346
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ letter_counts;\n    foreach(ch; test.split())\n    {\n        letter_counts[ch]++;\n\
    \    }\n    if(letter_counts.empty) return null;\n    long max_count = max(letter_counts.values);\n\
    \    return filter!(item => item.value == max_count)(letter_counts).assumeUnique;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuv35_06k.d(25): Error: no property `split` for type `string`

    /tmp/tmpuv35_06k.d(29): Error: no property `empty` for type `long[string]`

    /tmp/tmpuv35_06k.d(30): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmpuv35_06k.d(31): Error: template instance `filter!((item) => item.value
    == max_count)` template `filter` is not defined

    /tmp/tmpuv35_06k.d(29): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuv35_06k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164346
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    int[string]\
    \ count_list;\n    foreach(x; test.split()) \n    {\n        if(count_list.count(x)\
    \ == 0) \n        {\n            count_list[x] = 1;\n        } \n        else\
    \ \n        {\n            count_list[x] += 1;\n        }\n    }\n    count_list\
    \ = count_list.filter!(a => a.value > 1);\n    if(count_list.length == 0) \n \
    \   {\n        return null;\n    }\n    return count_list;\n}\nunittest\n{\n \
    \   alias candidate = histogram;\n\n{\n        auto result = candidate(\"a b b\
    \ a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1hs0j8r8.d(25): Error: no property `split` for type `string`

    /tmp/tmp1hs0j8r8.d(36): Error: no property `filter` for type `int[string]`

    /tmp/tmp1hs0j8r8.d(39): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    /tmp/tmp1hs0j8r8.d(41): Error: cannot implicitly convert expression `count_list`
    of type `int[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1hs0j8r8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164346
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    //\"b b b\
    \ b a b b\"\n    //[\"b\" : [0,2,4,6,8,10]]\n    //[\"a\" : [5]]\n    //if (auto\
    \ result = in_array(\"a\", test.split(\" \"))[0]);\n    Nullable!(long[string])\
    \ nullableDict;\n    auto words = test.split(\" \");\n    bool[string] found;\n\
    \    bool[string] max;\n    int[string]count;\n    bool first = true;\n    long\
    \ maxCount = 0;\n    foreach(i, word; words)\n    {\n        if (count.count(word))\n\
    \        {\n            count[word]++;\n        }\n        else\n        {\n \
    \           count[word] = 1;\n        }\n        if (first)\n        {\n     \
    \       max[word] = true;\n            first = false;\n            maxCount =\
    \ count[word];\n        }\n        else\n        {\n            if (count[word]\
    \ == maxCount)\n            {\n                max[word] = true;\n           \
    \ }\n            else if (count[word] > maxCount)\n            {\n           \
    \     max.clear();\n                max[word] = true;\n                maxCount\
    \ = count[word];\n            }\n        }\n        found[word] = true;\n    }\n\
    \    if (max.count != 0)\n    {\n        nullableDict = Nullable!(long[string])(maxCount);\n\
    \        foreach(word; max)\n        {\n            nullableDict.data[word] =\
    \ maxCount;\n        }\n    }\n    return nullableDict;\n}\n/*\nA simple and somewhat\
    \ naive hashing function which adds the square of each character value in a string.\n\
    unittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxb0kdqsc.d(76): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxb0kdqsc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164345
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    enum numberToLookFor\
    \ = test.split().map!(a => a.length).max;\n    return test.split().filter!(a =>\
    \ a.length == numberToLookFor).map!(a => a.length).assocArray.nullable;\n}\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkoycdcmf.d(24): Error: no property `split` for type `string`

    /tmp/tmpkoycdcmf.d(25): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkoycdcmf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164346
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ ret = null;\n    long[] hist =  new long[string];\n    size_t testLen = test.length;\n\
    \    size_t counter;\n    if (testLen == 0) \n    {\n        return ret;\n   \
    \ }\n    test.length = testLen - 1;\n    for (counter = 0; counter < testLen;\
    \ counter++) \n    {\n        char letter = test[counter];\n        if (letter\
    \ >= 'a' && letter <= 'z') \n        {\n            letter = letter - 'a';\n \
    \           if (letter in hist) \n            {\n                hist[letter]++;\n\
    \            }\n            else \n            {\n                hist[letter]\
    \ = 1;\n            }\n        }\n    }\n    auto highest = hist.values.max();\n\
    \    foreach (key, value; hist) \n    {\n        if (value == highest) \n    \
    \    {\n            ret.insert(key, value);\n        }\n    }\n    return ret;\n\
    }\n// void main(string[] args) \n// {\n//     Nullable!(long[string]) result =\
    \ histogram(\"b b b b a\");\n//     writeln(result);\n// }\nunittest\n{\n    alias\
    \ candidate = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwm8whfox.d(25): Error: cannot pass type `string` as a function
    argument

    /tmp/tmpwm8whfox.d(38): Error: cannot implicitly convert expression `cast(int)letter
    - 97` of type `int` to `char`

    /tmp/tmpwm8whfox.d(39): Error: incompatible types for `(letter) in (hist)`: `char`
    and `long[]`

    /tmp/tmpwm8whfox.d(49): Error: template `object.values` cannot deduce function
    from argument types `!()(long[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/druntime/import/object.d(3053):        `object.values(T
    : Value[Key], Value, Key)(T aa)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/druntime/import/object.d(3061):        `object.values(T
    : Value[Key], Value, Key)(T* aa)`

    /tmp/tmpwm8whfox.d(54): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwm8whfox.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164346
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ array = Nullable!(long[string])(null);\n    if (test == \"\")\n    {\n     \
    \   return array;\n    }\n    string[] letters = test.split(\" \");\n    array\
    \ = Nullable!(long[string])(long[string]());\n    array.get!(long[string])().[]\
    \ = 0L;\n    for (i, letter; i < letters.length; i++)\n    {\n        //DLog.format(\"\
    i = {}, letter = {}\", i, letter);\n        if (array.get!(long[string])().keyExists(letter))\n\
    \        {\n            array.get!(long[string])().set(letter, array.get!(long[string])().get(letter)\
    \ + 1L);\n        }\n        else\n        {\n            array.get!(long[string])().set(letter,\
    \ 1L);\n        }\n    }\n    //DLog.format(\"array = {}\", array);\n    long\
    \ greatest = long.min;\n    foreach (a; array.get!(long[string])().keys)\n   \
    \ {\n        if (array.get!(long[string])().get(a) > greatest)\n        {\n  \
    \          greatest = array.get!(long[string])().get(a);\n        }\n    }\n \
    \   //DLog.format(\"greatest = {}\", greatest);\n    string[] keys = array.get!(long[string])().keys;\n\
    \    long[] values = array.get!(long[string])().values;\n    for (i, key; i <\
    \ keys.length; i++)\n    {\n        if (values[i] != greatest)\n        {\n  \
    \          array.get!(long[string])().remove(key);\n        }\n    }\n    //DLog.format(\"\
    histogram = {}\", array);\n    return array;\n}\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkjv3mexg.d(30): Error: found `[` when expecting `.` following long

    /tmp/tmpkjv3mexg.d(30): Error: found `]` when expecting `,`

    /tmp/tmpkjv3mexg.d(30): Error: expression expected, not `)`

    /tmp/tmpkjv3mexg.d(30): Error: found `;` when expecting `,`

    /tmp/tmpkjv3mexg.d(31): Error: identifier expected following `.`, not `[`

    /tmp/tmpkjv3mexg.d(31): Error: found `]` when expecting `,`

    /tmp/tmpkjv3mexg.d(31): Error: expression expected, not `=`

    /tmp/tmpkjv3mexg.d(31): Error: found `0L` when expecting `,`

    /tmp/tmpkjv3mexg.d(31): Error: expression expected, not `;`

    /tmp/tmpkjv3mexg.d(32): Error: found `for` when expecting `,`

    /tmp/tmpkjv3mexg.d(32): Error: found `;` when expecting `)`

    /tmp/tmpkjv3mexg.d(32): Error: found `i` when expecting `,`

    /tmp/tmpkjv3mexg.d(32): Error: expression expected, not `<`

    /tmp/tmpkjv3mexg.d(32): Error: found `letters` when expecting `,`

    /tmp/tmpkjv3mexg.d(32): Error: found `;` when expecting `,`

    /tmp/tmpkjv3mexg.d(33): Error: found `{` when expecting `;` following statement

    /tmp/t'
  stdout: ''
  timestamp: 1660164345
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    if (test.empty)\n\
    \        return ___null_dict___;\n    immutable string[] letters = test.split(isAlpha);\n\
    \    long[string] counts;\n    foreach (l; letters)\n    {\n        auto count\
    \ = counts[l];\n        counts[l] = count.defined ? count + 1 : 1;\n    }\n  \
    \  alias letters = keys(counts);\n    long max = maxElement(counts.values);\n\
    \    Nullable!(long[string]) result = Nullable!(long[string]).init;\n    foreach\
    \ (l; letters)\n    {\n        if (counts[l] == max)\n            result.associate(l,\
    \ counts[l]);\n    }\n    return result;\n}\n/*\nGiven a string representing a\
    \ space separated lowercase letters, return an associative array\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    unittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9tqkqb88.d(33): Error: function declaration without return type.
    (Note that constructors are always named `this`)

    /tmp/tmp9tqkqb88.d(43): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9tqkqb88.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164345
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{ \n    Nullable!(long[string])\
    \ result = null;\n    if (test.length == 0) return null;\n    long[] counters\
    \ = new long[test.length];\n    int i = 0;\n    long[string] letters = new long[string]();\n\
    \    foreach (ch; test) \n    {\n        auto letter = ch.toString();\n      \
    \  if (letters.contains(letter)) \n        {\n            auto count = letters[letter];\n\
    \            ++count;\n            letters[letter] = count;\n        }\n     \
    \   else\n        {\n            letters[letter] = 1L;\n        }\n        counters[i]\
    \ = letters[letter];\n        ++i;\n    }\n    long maxValue = counters[0];\n\
    \    int j = 0;\n    foreach (value; counters) \n    {\n        if (value > maxValue)\
    \ maxValue = value;\n        ++j;\n    }\n    foreach (key, value; letters) \n\
    \    {\n        if (value == maxValue) result[key] = value;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto\
    \ result = candidate(\"a b b a\");\n        assert(!result.isNull && result.get\
    \ == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c\
    \ a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoyfufa90.d(28): Error: cannot pass type `string` as a function
    argument

    /tmp/tmpoyfufa90.d(31): Error: no property `toString` for type `immutable(char)`

    /tmp/tmpoyfufa90.d(32): Error: no property `contains` for type `long[string]`

    /tmp/tmpoyfufa90.d(25): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoyfufa90.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164346
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    import std.range\
    \ : filter, maxElement, take, takeExactly;\n    import std.algorithm : map, split,\
    \ to;\n    import std.container : SortedRange;\n    import std.array : sorted;\n\
    \    import std.stdio : writeln;\n    import std.typecons : nullable;\n    import\
    \ std.range : count;\n    import std.algorithm : iota;\n    import std.internal.math.xmath\
    \ : ipow;\n    auto dict = test.split.groupBy!((a) => a).map!((a) => [a[0]: a.length]).array;\n\
    \    auto max = dict.maxElement!((a, b) => a[1] > b[1]).map!((a) => a[1]).front.nullable;\n\
    \    auto filtered = dict.filter!((a) => a[1] == max);\n    writeln(dict);\n \
    \   writeln(max);\n    writeln(filtered);\n    if (filtered.length > 1)\n    {\n\
    \        auto x = filtered.take(filtered.length).map!((a) => tuple(a[0], a[1])).filter!((a)\
    \ => a[1] == max).map!((a) => a[0]).iota(filtered.length);\n        writeln(x);\n\
    \        return x.array.sorted;\n    }\n    else if (filtered.length == 1)\n \
    \   {\n        return filtered.take(1).map!((a) => a[0]).array.sorted;\n    }\n\
    \    else \n    {\n        return null;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqa8rjnz8.d(24): Error: module `std.range` import `filter` not found,
    did you mean template `std.meta.Filter(alias pred, TList...)`?

    /tmp/tmpqa8rjnz8.d(24): Error: module `std.range` import `maxElement` not found

    /tmp/tmpqa8rjnz8.d(25): Error: module `std.algorithm` import `split` not found

    /tmp/tmpqa8rjnz8.d(25): Error: module `std.algorithm` import `to` not found

    /tmp/tmpqa8rjnz8.d(26): Error: module `std.container` import `SortedRange` not
    found

    /tmp/tmpqa8rjnz8.d(27): Error: module `std.array` import `sorted` not found

    /tmp/tmpqa8rjnz8.d(30): Error: module `std.range` import `count` not found

    /tmp/tmpqa8rjnz8.d(31): Error: module `std.algorithm` import `iota` not found

    /tmp/tmpqa8rjnz8.d(32): Error: module `xmath` is in file ''std/internal/math/xmath.d''
    which cannot be read

    import path[0] = /tmp

    import path[1] = /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos

    import path[2] = /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/druntime/import

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqa8rjnz8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164346
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    if (test.empty)\
    \ return null;\n    Nullable!(long[string]) ret = new long[string];\n    Nullable!long\
    \ max = null;\n    string[] ltest = test.split(\" \");\n    foreach (key; ltest)\
    \ \n    {\n        if (ret.contains(key)) \n        {\n            ret[key]++;\n\
    \        } \n        else \n        {\n            ret[key] = 1;\n        }\n\
    \        if (max.isNull || ret[key] > max) \n        {\n            max = ret[key];\n\
    \        }\n    }\n    Nullable!(long[string]) ret2 = new long[string];\n    foreach\
    \ (key; ret.keys) \n    {\n        if (ret[key] == max) \n        {\n        \
    \    ret2[key] = ret[key];\n        }\n    }\n    return ret2;\n}\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiw38bedg.d(24): Error: no property `empty` for type `string`

    /tmp/tmpiw38bedg.d(25): Error: cannot pass type `string` as a function argument

    /tmp/tmpiw38bedg.d(26): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpiw38bedg.d(27): Error: no property `split` for type `string`

    /tmp/tmpiw38bedg.d(30): Error: no property `contains` for type `Nullable!(long[string])`

    /tmp/tmpiw38bedg.d(43): Error: cannot pass type `string` as a function argument

    /tmp/tmpiw38bedg.d(24): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiw38bedg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164346
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    auto foo =\
    \ test.split(\" \");\n    long temp = 0;\n    long max;\n    long[string] bar;\n\
    \    long[string] bar2;\n    string[] maxx;\n    long[] to_sort;\n    foreach(letter;\
    \ foo)\n    {\n        if(bar.count(letter) == 0)\n        {\n            bar[letter]\
    \ = 1;\n        }\n        else\n        {\n            bar[letter]++;\n     \
    \   }\n    }\n    foreach(value; bar.values)\n    {\n        to_sort ~= value;\n\
    \    }\n    to_sort.sort();\n    to_sort.reverse;\n    max = to_sort[0];\n   \
    \ foreach(key, value; bar)\n    {\n        if(value == max)\n        {\n     \
    \       maxx ~= key;\n        }\n    }\n    maxx.sort;\n    foreach(item; maxx)\n\
    \    {\n        bar2[item] = max;\n    }\n    return bar2.nullable;\n}\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplckkl8h3.d(24): Error: no property `split` for type `string`

    /tmp/tmplckkl8h3.d(46): Error: no property `sort` for type `long[]`

    /tmp/tmplckkl8h3.d(47): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(long[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmplckkl8h3.d(56): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplckkl8h3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164346
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    if (test.empty)\
    \ return ___null_dict___;\n    long[string] d = [\"a\":1L];\n    d.test = 1L;\n\
    \    return d;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n      \
    \  auto result = candidate(\"a b b a\");\n        assert(!result.isNull && result.get\
    \ == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c\
    \ a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3fs32159.d(24): Error: no property `empty` for type `string`

    /tmp/tmp3fs32159.d(24): Error: undefined identifier `___null_dict___`

    /tmp/tmp3fs32159.d(26): Error: no property `test` for type `long[string]`

    /tmp/tmp3fs32159.d(27): Error: cannot implicitly convert expression `d` of type
    `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3fs32159.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164346
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ null_dict;\n    if (test.empty) \n    {\n        return null_dict;\n    }\n\
    \    long[string] result = ['a': 0L, 'b': 0L, 'c': 0L, 'd': 0L, 'e': 0L, 'f':\
    \ 0L, 'g': 0L, 'h': 0L, 'i': 0L, 'j': 0L, 'k': 0L, 'l': 0L, 'm': 0L, 'n': 0L,\
    \ 'o': 0L, 'p': 0L, 'q': 0L, 'r': 0L, 's': 0L, 't': 0L, 'u': 0L, 'v': 0L, 'w':\
    \ 0L, 'x': 0L, 'y': 0L, 'z': 0L];\n    immutable letters = ['a', 'b', 'c', 'd',\
    \ 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',\
    \ 'u', 'v', 'w', 'x', 'y', 'z'];\n    foreach (char; test) \n    {\n        if\
    \ (char in letters) \n        {\n            result[char]++;\n        }\n    }\n\
    \    long max = result[test[0]];\n    foreach (key, value; result) \n    {\n \
    \       if (value > max) \n        {\n            max = value;\n        }\n  \
    \  }\n    Nullable!(long[string]) res = Nullable!(long[string])(['a': 0L, 'b':\
    \ 0L, 'c': 0L, 'd': 0L, 'e': 0L, 'f': 0L, 'g': 0L, 'h': 0L, 'i': 0L, 'j': 0L,\
    \ 'k': 0L, 'l': 0L, 'm': 0L, 'n': 0L, 'o': 0L, 'p': 0L, 'q': 0L, 'r': 0L, 's':\
    \ 0L, 't\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result\
    \ = candidate(\"a b b a\");\n        assert(!result.isNull && result.get == [\"\
    a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaqgcylsw.d(31): Error: no identifier for declarator `char`

    /tmp/tmpaqgcylsw.d(33): Error: found `in` when expecting `.` following char

    /tmp/tmpaqgcylsw.d(35): Error: found `]` when expecting `.` following char

    /tmp/tmpaqgcylsw.d(35): Error: found `++` when expecting identifier following
    `char`.

    /tmp/tmpaqgcylsw.d(35): Error: found `;` when expecting `,`

    /tmp/tmpaqgcylsw.d(36): Error: expression expected, not `}`

    /tmp/tmpaqgcylsw.d(37): Error: found `}` when expecting `,`

    /tmp/tmpaqgcylsw.d(38): Error: found `max` when expecting `.` following long

    /tmp/tmpaqgcylsw.d(38): Error: found `=` when expecting identifier following `long`.

    /tmp/tmpaqgcylsw.d(38): Error: found `result` when expecting `,`

    /tmp/tmpaqgcylsw.d(38): Error: found `;` when expecting `,`

    /tmp/tmpaqgcylsw.d(39): Error: expression expected, not `foreach`

    /tmp/tmpaqgcylsw.d(39): Error: found `;` when expecting `,`

    /tmp/tmpaqgcylsw.d(40): Error: found `{` when expecting `,`

    /tmp/tmpaqgcylsw.d(41): Error: expression expected, not `if`

    /tmp/t'
  stdout: ''
  timestamp: 1660164345
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    import std.algorithm;\n\
    \    import std.array;\n    import std.conv;\n    import std.typecons;\n    import\
    \ std.math;\n    import std.range;\n    import std.algorithm;\n    import std.ascii;\n\
    \    import std.datetime;\n    import std.stdio;\n    import std.range;\n    import\
    \ std.algorithm;\n    import std.math;\n    import std.typecons;\n    import std.algorithm;\n\
    \    import std.ascii;\n    import std.range;\n    import std.math;\n    import\
    \ std.algorithm;\n    import std.range;\n    import std.algorithm;\n    import\
    \ std.math;\n    import std.algorithm;\n    import std.math;\n    import std.typecons;\n\
    \    // first we create a list of unique letters\n    string[] res;\n    auto\
    \ words = test.split(\" \");\n    // res.put(\"a\", 1);\n    // res.put(\"b\"\
    , 1);\n    foreach(i, w; words)\n    {\n        //std.datetime.stopWatch sw;\n\
    \        // sw.start();\n        bool found = false;\n        foreach(j, r; res)\n\
    \        {\n            if(w == r)\n            {\n                // sw.stop();\n\
    \                // sw.reset();\n                found = true;\n             \
    \   break;\n            }\n        }\n        if(!found)\n        {\n        \
    \    // sw.stop();\n            // sw.reset();\n            res ~= w;\n      \
    \  }\n        //std.stdio.writeln(to!string(sw.peek()));\n    }\n    // then we\
    \ create a dictionary of these letters and their corresponding counts\n    auto\
    \ occs = res.map!(r => [r: words.count(r)]).array;\n    // finally we look at\
    \ the maximum count and return the correponding letters\n    auto maxOcc = reduce!max(occs.map!(o\
    \ => o.values[0]));\n    return res.filter!(r => words.count(r) == maxOcc).nullable;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzvsxordz.d(81): Error: cannot implicitly convert expression `nullable(filter(res))`
    of type `Nullable!(FilterResult!(__lambda4, string[]))` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzvsxordz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{ \n    import std.array;\n\
    \    long[string] ret = null;\n    if (test.empty) return ret;\n    string[] letters\
    \ = test.split(\" \");\n    int[] cnt = new int[letters.length];\n    cnt[] =\
    \ 0;\n    foreach ( i, letter; letters)\n    {\n        foreach (j, ltr; letters)\n\
    \        {\n            if (ltr == letter) cnt[i]++;\n        }\n    }\n    int\
    \ max = cnt[0];\n    foreach (i, c; cnt)\n    {\n        if (c > max) max = c;\n\
    \    }\n    ret = new long[string];\n    foreach (i, c; cnt)\n    {\n        if\
    \ (c == max)\n        {\n            ret[letters[i]] = c;\n        }\n    }\n\
    \    return ret;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n    \
    \    auto result = candidate(\"a b b a\");\n        assert(!result.isNull && result.get\
    \ == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c\
    \ a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoye5bwrn.d(42): Error: cannot pass type `string` as a function
    argument

    /tmp/tmpoye5bwrn.d(26): Error: cannot implicitly convert expression `ret` of type
    `long[string]` to `Nullable!(long[string])`

    /tmp/tmpoye5bwrn.d(50): Error: cannot implicitly convert expression `ret` of type
    `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoye5bwrn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    auto result\
    \ = Nullable!(long[string]).init;\n    if (test.length) \n    {\n        import\
    \ std.algorithm.comparison : max;\n        auto split = test.split(\" \");\n \
    \       auto group = split.group;\n        auto maxSize = group.max!\"a.length\"\
    ().length;\n        foreach (k, v; group) \n        {\n            if (maxSize\
    \ == v.length)\n                result.assign(k, v.length);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n \
    \       auto result = candidate(\"a b b a\");\n        assert(!result.isNull &&\
    \ result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk30yyd8y.d(28): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk30yyd8y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    auto counter\
    \ = test.split;\n    auto result = counter.group().select!((e) => e.length > 1).array();\n\
    \    if (result.length) \n    {\n        auto max = result.max!((e) => e.length);\n\
    \        auto ids = result.filter!((e) => e.length == max.length).map!((e) =>\
    \ e[0]);\n        return ids.array().assocArray.nullable;\n    }\n    return ___null_dict___;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe_bt9t4n.d(24): Error: no property `split` for type `string`

    /tmp/tmpe_bt9t4n.d(32): Error: undefined identifier `___null_dict___`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe_bt9t4n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164346
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ data;\n    foreach(elem; test.split)\n    {\n        if(elem.length == 0)\n\
    \            continue;\n        if(data.keyExists(elem))\n            data[elem]++;\n\
    \        else\n            data[elem] = 1;\n    }\n    if(data.empty)\n      \
    \  return Nullable!(long[string])();\n    long max_value = data.values.max;\n\
    \    long[string] max_dict;\n    foreach(key,value; data)\n    {\n        if(value\
    \ == max_value)\n            max_dict[key] = value;\n    }\n    return Nullable!(long[string])(max_dict);\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj80xjcl_.d(25): Error: no property `split` for type `string`

    /tmp/tmpj80xjcl_.d(34): Error: no property `empty` for type `long[string]`

    /tmp/tmpj80xjcl_.d(36): Error: no property `max` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj80xjcl_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ nullable_result;\n    long[string] histogram_map;\n    // split the input string\
    \ into it's separate elements\n    string[] words = test.split;\n    int len =\
    \ words.length;\n    string curr_word;\n    long count;\n    int i;\n    int j;\n\
    \    int max_count = 0;\n    string max_word;\n    int max_index;\n    // initialize\
    \ the histogram_map with null values for each word\n    for (i = 0; i < len; i++)\n\
    \    {\n        curr_word = words[i];\n        histogram_map[curr_word] = null;\n\
    \    }\n    // fill the histogram_map with values for each word\n    for (i =\
    \ 0; i < len; i++)\n    {\n        curr_word = words[i];\n        count = 0;\n\
    \        for (j = 0; j < len; j++)\n        {\n            if (words[j] == curr_word)\n\
    \            {\n                count++;\n            }\n        }\n        histogram_map[curr_word]\
    \ = count;\n    }\n    // initialize the max_word to be used in the search for\
    \ the max_count\n    for (string key = histogram_map.keys[0]; !key.empty; key\
    \ = histogram_map.keys[key.indexOf(key) + 1])\n    {\n        max_word = key;\n\
    \        break;\n    }\n    // find the max_count and the max_word\n    for (string\
    \ key = histogram_map.keys[0]; !key.empty; key = histogram_map.keys[key.indexOf(key)\
    \ + 1])\n    {\n        max_index = max_word.indexOf(max_word);\n        max_count\
    \ = histogram_map[max_word];\n        if (histogram_map[key] > max_count)\n  \
    \      {\n            max_word = key;\n            max_count = histogram_map[key];\n\
    \        }\n    }\n    // fill the nullable_result with the max_word and max_count\n\
    \    for (string key =\nunittest\n{\n    alias candidate = histogram;\n\n{\n \
    \       auto result = candidate(\"a b b a\");\n        assert(!result.isNull &&\
    \ result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8rfmwfxn.d(75): Error: expression expected, not `unittest`

    /tmp/tmp8rfmwfxn.d(76): Error: semicolon expected, not `{`

    /tmp/tmp8rfmwfxn.d(120): Error: found `void` when expecting `;` following `for`
    condition

    /tmp/tmp8rfmwfxn.d(120): Error: found `{` when expecting `)`

    /tmp/tmp8rfmwfxn.d(120): Error: found `}` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8rfmwfxn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164346
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ hist;\n    foreach( ch; test.split) {\n        if (ch != \"\") {\n         \
    \   if (hist.containsKey(ch))\n                hist[ch]++;\n            else\n\
    \                hist[ch] = 1;\n        }\n    }\n    return hist.empty ? null\
    \ : typeof(return).init;\n}\nunittest\n{\n    alias candidate = histogram;\n\n\
    {\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplv729aba.d(25): Error: no property `split` for type `string`

    /tmp/tmplv729aba.d(33): Error: no property `empty` for type `long[string]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplv729aba.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    if (test.empty)\
    \ \n    {\n        return typeof(return)();\n    }\n    string[] letters = test.split();\n\
    \    long[string] counts;\n    foreach (letter; letters) \n    {\n        if (counts.count(letter)\
    \ != 0) \n        {\n            counts[letter] += 1;\n        } \n        else\
    \ \n        {\n            counts[letter] = 1;\n        }\n    }\n    long maxCount\
    \ = max(counts.values);\n    long[string] maxCounts;\n    foreach (count; counts)\
    \ \n    {\n        if (count[1] == maxCount) \n        {\n            maxCounts[count[0]]\
    \ = count[1];\n        }\n    }\n    return typeof(return)(maxCounts);\n}\n/*\n\
    A small frog wants to get to the other side of a river. The frog is initially\
    \ located on one bank of the river (position 0) and wants to get to the opposite\
    \ bank (position X+1). Leaves fall from a tree onto the surface of the river.\n\
    unittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9g3nsz40.d(52): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9g3nsz40.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164346
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ count;\n    long highest = 0;\n    string[] keys;\n    foreach(ele; test.split('\
    \ '))\n    {\n        count[ele]++;\n        if(count[ele] >= highest)\n     \
    \   {\n            highest = count[ele];\n        }\n    }\n    foreach(ele; test.split('\
    \ '))\n    {\n        if(count[ele] == highest)\n        {\n            keys ~=\
    \ ele;\n        }\n    }\n    if(keys.length == 0)\n    {\n        return null;\n\
    \    }\n    return keys;\n}\n/*\n    >>> histogram([\"a\", \"b\", \"c\"])\n  \
    \  [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n    >>> histogram([\"a\", \"b\"\
    , \"b\", \"a\"])\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram([\"a\"\
    , \"b\", \"c\", \"a\", \"b\"])\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram([\"\
    b\", \"b\", \"b\", \"b\", \"a\"])\n    [\"b\": 4L].nullable\n    >>> histogram([])\n\
    \    ___null_dict___\n*/\nNullable!(long[string]) histogram(string[] test) \n\
    {\n    long[string] count;\n    long highest = 0;\n    string[] keys;\n    foreach(ele;\
    \ test)\n    {\n        count[ele]++;\n        if(count[ele] >= highest)\n   \
    \     {\n            highest = count[ele];\n        }\n    }\n    foreach(ele;\
    \ test)\n    {\n        if(count[ele] == highest)\n        {\n            keys\
    \ ~= ele;\n        }\n    }\n    if(keys.length == 0)\n    {\n        return null;\n\
    \    }\n    return keys;\n}\n/*\n    Take two string arrays, return a tuple of\
    \ two long arrays, where array one contains\n    the count of each element of\
    \ array one in array two, and array two contains the count\n    of each element\
    \ of array two in array one\nunittest\n{\n    alias candidate = histogram;\n\n\
    {\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc1hmy0hm.d(86): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc1hmy0hm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164346
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long max =\
    \ 0;\n    Nullable!(long[string]) r = null;\n    long[string] occurrences;\n \
    \   foreach(char c; test)\n    {\n        if(occurrences.count(c) == 0)\n    \
    \    {\n            occurrences[c] = 1;\n        }\n        else\n        {\n\
    \            occurrences[c]++;\n        }\n        if(occurrences[c] > max)\n\
    \        {\n            max = occurrences[c];\n        }\n    }\n    foreach(string\
    \ s; occurrences.keys)\n    {\n        if(occurrences[s] == max)\n        {\n\
    \            if(r is null)\n            {\n                r = occurrences;\n\
    \            }\n            else\n            {\n                r[s] = occurrences[s];\n\
    \            }\n        }\n    }\n    return r;\n}\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3q3uvwey.d(29): Error: no property `count` for type `long[string]`

    /tmp/tmp3q3uvwey.d(31): Error: cannot implicitly convert expression `c` of type
    `char` to `string`

    /tmp/tmp3q3uvwey.d(35): Error: cannot implicitly convert expression `c` of type
    `char` to `string`

    /tmp/tmp3q3uvwey.d(37): Error: cannot implicitly convert expression `c` of type
    `char` to `string`

    /tmp/tmp3q3uvwey.d(39): Error: cannot implicitly convert expression `c` of type
    `char` to `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3q3uvwey.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    if (test.empty)\
    \ return null;\n    Nullable!(long[string]) hist = null;\n    long v;\n    long\
    \ max = 0;\n    char[] tmp = test.toLower().split(\"\\\\s+\");\n    string[] tmp2\
    \ = tmp.idup;\n    hist = new long[string];\n    foreach (char c; tmp) {\n   \
    \     v = ++hist[c];\n        if (v > max) {\n            max = v;\n        }\n\
    \    }\n    return to(hist.byKeyValue.filter!(x => x.value == max).keys);\n}\n\
    /*\nNow rewrite the function, so that it can return the letters by their order\
    \ of appearance.\nIf the same letter appears several times in a row, include in\
    \ the count only one occurrence.\n    \n    >>> histogram(\"a b c\")\n    [\"\
    a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n    >>> histogram(\"a b b a\")\n    [\"\
    a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"a b c a b\")\n    [\"a\": 2L,\
    \ \"b\": 2L].nullable\n    >>> histogram(\"b b b b a\")\n    [\"b\": 4L].nullable\n\
    \    >>> histogram(\"b ba bb\")\n    [\"b\": 3L, \"a\": 1L, \"b\": 1L].nullable\n\
    \    >>> histogram(\"b b b\")\n    [\"b\": 1L].nullable\n    >>> histogram(\"\"\
    )\n    ___null_dict___\n*/\nNullable!(long[string]) histogram2(string test) \n\
    {\n    if (test.empty) return null;\n    Nullable!(long[string]) hist = null;\n\
    \    long v;\n    long max = 0;\n    char[] tmp = test.toLower().split(\"\\\\\
    s+\");\n    string[] tmp2 = tmp.idup;\n    hist = new long[string];\n    char\
    \ last = tmp[0];\n    foreach (char c; tmp) {\n        if (c != last) {\n    \
    \        v = ++hist[c];\n            if (v > max) {\n                max = v;\n\
    unittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcu4i1vya.d(73): Error: found `unittest` instead of statement

    /tmp/tmpcu4i1vya.d(118): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpcu4i1vya.d(118): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpcu4i1vya.d(118): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcu4i1vya.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164346
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ result;\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result\
    \ = candidate(\"a b b a\");\n        assert(!result.isNull && result.get == [\"\
    a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7idawf0q.d(25): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7idawf0q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164346
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    return null;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps6tuon34.d(24): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps6tuon34.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{ \n    if (test.empty)\
    \ \n        return null;\n    long[string] occurrences;\n    foreach (letter;\
    \ test.split)\n    {\n        occurrences[letter]++;\n    }\n    long[string]\
    \ results;\n    long max = 0;\n    foreach (letter, count; occurrences)\n    {\n\
    \        if (count > max)\n        {\n            max = count;\n            results.clear;\n\
    \        }\n        if (count == max)\n        {\n            results[letter]\
    \ = count;\n        }\n    }\n    return results;\n}\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0jlet562.d(24): Error: no property `empty` for type `string`

    /tmp/tmp0jlet562.d(27): Error: no property `split` for type `string`

    /tmp/tmp0jlet562.d(25): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    /tmp/tmp0jlet562.d(45): Error: cannot implicitly convert expression `results`
    of type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0jlet562.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    auto hist\
    \ = new long[string];\n    foreach(letter; test.split)\n    {\n        auto key\
    \ = letter;\n        hist[key]++;\n    }\n    long max = 0;\n    auto max_value\
    \ = new long[string];\n    foreach(key, value; hist)\n    {\n        if(value\
    \ > max)\n        {\n            max = value;\n            max_value.clear;\n\
    \            max_value[key] = value;\n        }\n        else if(value == max)\n\
    \        {\n            max_value[key] = value;\n        }\n    }\n    return\
    \ max_value.nullable;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n\
    \        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3315yv38.d(24): Error: cannot pass type `string` as a function
    argument

    /tmp/tmp3315yv38.d(25): Error: no property `split` for type `string`

    /tmp/tmp3315yv38.d(31): Error: cannot pass type `string` as a function argument

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3315yv38.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \nin\n{\n    assert(test.length\
    \ > 0);\n}\nbody\n{\n    immutable aa = test.split;\n    immutable bb = aa.join(\"\
    \ \");\n    immutable cc = \" \".join(aa);\n    const d = new SortedSet!string(aa);\n\
    \    return [\"\" : 1L].init;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk_m7jvzk.d(29): Error: no property `split` for type `string`

    /tmp/tmpk_m7jvzk.d(31): Error: no property `join` for type `string`

    /tmp/tmpk_m7jvzk.d(32): Error: template instance `SortedSet!string` template `SortedSet`
    is not defined

    /tmp/tmpk_m7jvzk.d(33): Error: cannot implicitly convert expression `null` of
    type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk_m7jvzk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    import std.algorithm.iteration\
    \ : filter, maxElement, sort;\n    import std.array : splitter;\n    import std.conv\
    \ : to;\n    import std.range : map, retro;\n    import std.range.primitives :\
    \ isForwardRange;\n    import std.typecons : Tuple;\n    import std.typecons :\
    \ tuple;\n    import std.algorithm.comparison : equal;\n    import std.typecons\
    \ : Nullable;\n    import std.functional : unaryFun;\n    Nullable!(long[string])\
    \ dict ;\n    dict.writable = true;\n    dict.writable = null;\n    if (test ==\
    \ \"\" || test.length == 0) \n    {\n        dict.writable = null;\n        return\
    \ dict;\n    }\n    string[] letterCount = test.splitter(\" \").filter!(\"a\"\
    \ != \"b\").array;\n    long[] count = new long[letterCount.length];\n    foreach\
    \ (index, item; letterCount) \n    {\n        foreach (index2, item2; letterCount)\
    \ \n        {\n            if (item == item2) \n            {\n              \
    \  count[index]++;\n            }\n        }\n    }\n    Tuple!(long, string)[]\
    \ counts = new Tuple!(long, string)[count.length];\n    foreach (index, item;\
    \ counts) \n    {\n        counts[index] = tuple(count[index], letterCount[index]);\n\
    \    }\n    auto maxElement2 = maxElement!q{a[0] < b[0]}(counts);\n    Tuple!(long,\
    \ string)[] final = new Tuple!(long, string)[counts.length];\n    int index =\
    \ 0;\n    foreach (item; counts) \n    {\n        if (maxElement2[0] == item[0])\
    \ \n        {\n            final[index] = item;\n            index++;\n      \
    \  }\n    }\n    dict.writable = new long[][string](final.length);\n    foreach\
    \ (index, item; final) \n    {\n        dict.writable[index] = [item[1], item[0]];\n\
    unittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcuijhnuq.d(60): Error: found `final` when expecting `;` following
    statement

    /tmp/tmpcuijhnuq.d(60): Error: found `=` instead of statement

    /tmp/tmpcuijhnuq.d(66): Error: basic type expected, not `[`

    /tmp/tmpcuijhnuq.d(66): Error: no identifier for declarator `_error_[index]`

    /tmp/tmpcuijhnuq.d(66): Error: found `=` instead of statement

    /tmp/tmpcuijhnuq.d(70): Error: expression expected, not `final`

    /tmp/tmpcuijhnuq.d(71): Error: expression expected, not `final`

    /tmp/tmpcuijhnuq.d(74): Error: found `unittest` instead of statement

    /tmp/tmpcuijhnuq.d(119): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcuijhnuq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164346
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    \n    long[string]\
    \ occurrences;\n    long[string] occurrences_top;\n    long max_occurrences =\
    \ 0;\n    int index = 0;\n    string current_letter;\n    bool first_letter =\
    \ true;\n    bool multiple_letters = false;\n    // If there is no string input,\
    \ return a null dictionary\n    if (test.length == 0)\n    {\n        return ___null_dict___;\n\
    \    }\n    // Iterate through each letter in the string\n    foreach (i, letter;\
    \ test)\n    {\n        current_letter = test[i];\n        // On the first letter,\
    \ initialize occurrences with a count of 1 for that letter\n        if (first_letter)\n\
    \        {\n            occurrences[current_letter] = 1;\n            first_letter\
    \ = false;\n        }\n        // On subsequent letters, if the letter has already\
    \ been seen, add 1 to the count\n        else if (occurrences.count(current_letter)\
    \ > 0)\n        {\n            occurrences[current_letter]++;\n        }\n   \
    \     // If the letter hasn't been seen, initialize the count to 1\n        else\n\
    \        {\n            occurrences[current_letter] = 1;\n        }\n        //\
    \ If the current letter has reached the maximum number of occurrences, then record\
    \ it\n        if (occurrences[current_letter] == max_occurrences)\n        {\n\
    \            occurrences_top[current_letter] = occurrences[current_letter];\n\
    \            multiple_letters = true;\n        }\n        // If the current letter\
    \ has exceeded the maximum number of occurrences, then reset the \n        //\
    \ top occurrences list to only contain the current letter, and update the max\
    \ occurrence\n        else if (occurrences[current_letter] > max_occurrences)\n\
    \        {\n            max_occurrences = occurrences[current_letter];\n     \
    \       occurrences_top.clear();\n            occurrences_top[current_letter]\
    \ = occurrences[current_letter];\n            multiple_letters = false;\n    \
    \    }\n        // Move to the next letter\n        index++;\n    }\n    // If\
    \ there are several letters with the maximum number of occurrences, return them\
    \ all,\n    // otherwise, return the single max occurrence\n    if (multiple_letters)\n\
    \    {\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result\
    \ = candidate(\"a b b a\");\n        assert(!result.isNull && result.get == [\"\
    a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnoantunc.d(79): Error: found `unittest` instead of statement

    /tmp/tmpnoantunc.d(124): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnoantunc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164346
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    return sort(test.split(\"\
    \ \").array()).groupBy!((string a) => a).values.map!((string[] b) => b.length).max();\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphruvi4ti.d(24): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphruvi4ti.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ result = null;\n    long[string] dict = long[string].init;\n    foreach(character;\
    \ test.toLower()) \n    {\n        if (character != ' ')\n        {\n        \
    \    dict[character]++;\n        }\n    }\n    long maxval = dict.values.max;\n\
    \    if (maxval == 0) \n    {\n        return null;\n    }\n    foreach(character;\
    \ dict.keys) \n    {\n        if (dict[character] == maxval) \n        {\n   \
    \         result[character] = maxval;\n        }\n    }\n    return result;\n\
    }\n/*\nDetermine whether a string is a palindrome or not.\n    Example:\n    >>>\
    \ isPalindrome(\"aa\")\n    true\n    >>> isPalindrome(\"aaabbb\")\n    false\n\
    \    >>> isPalindrome(\"abac\")\n    false\n    >>> isPalindrome(\"a\")\n    true\n\
    \    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"abcbabcb\")\n  \
    \  true\n    >>> isPalindrome(\"abcba\")\n    true\n    >>> isPalindrome(\"abcbaabcba\"\
    )\n    true\n    >>> isPalindrome(\"a a\")\n    true\n    >>> isPalindrome(\"\
    ab cba\")\n    true\n*/\nunittest\n{\n    alias candidate = histogram;\n\n{\n\
    \        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdxpoflva.d(25): Error: found `[` when expecting `.` following long

    /tmp/tmpdxpoflva.d(25): Error: semicolon expected, not `]`

    /tmp/tmpdxpoflva.d(25): Error: found `]` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdxpoflva.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164346
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    import std.algorithm\
    \ : max, min, maxElement, minElement;\n    import std.array : array;\n    import\
    \ std.range : map, iota, filter, zip, unzip;\n    import std.conv : to;\n    import\
    \ std.typecons : tuple;\n    Nullable!(long[string]) map;\n    static if(test.length)\n\
    \    {\n        auto words = test.split();\n        string max = words[0];\n \
    \       words = test.split();\n        auto wordsCount = words.map!(a => a.length).array;\n\
    \        auto maxCount = wordsCount[0];\n        foreach(i, a;words)\n       \
    \ {\n            map[a]++;\n        }\n        auto mapCount = map.values.array;\n\
    \        static if(mapCount.length > 1)\n        {\n            static if(mapCount.max\
    \ == mapCount.min)\n            {\n                return maxElements(map.byValue).map!(a\
    \ => a.key).array;\n            }\n            else\n            {\n         \
    \       return maxElements(map.byValue).map!(a => a.key).array[0..1];\n      \
    \      }\n        }\n        else\n        {\n            return mapCount[0];\n\
    \        }\n    }\n    else\n    {\n        return null;\n    }\n}\n \nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps_3qdwcl.d(26): Error: module `std.range` import `map` not found

    /tmp/tmps_3qdwcl.d(26): Error: module `std.range` import `filter` not found, did
    you mean template `std.meta.Filter(alias pred, TList...)`?

    /tmp/tmps_3qdwcl.d(26): Error: module `std.range` import `unzip` not found, did
    you mean template `std.range.zip(Ranges...)(Ranges ranges) if (Ranges.length &&
    allSatisfy!(isInputRange, Ranges))`?

    /tmp/tmps_3qdwcl.d(29): Error: declaration `tmps_3qdwcl.histogram.map` is already
    defined

    /tmp/tmps_3qdwcl.d(30): Error: variable `test` cannot be read at compile time

    /tmp/tmps_3qdwcl.d(60): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps_3qdwcl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164348
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    import std.algorithm;\n\
    \    import std.array;\n    import std.conv;\n    import std.functional;\n   \
    \ import std.range;\n    import std.unordered_map;\n    if (test.empty) return\
    \ ___null_dict___;\n    string[] test_arr = test.split;\n    unordered_map!(string,\
    \ long) dict = test_arr.associate!(x => x, x => 0).array;\n    foreach (i; test_arr)\
    \ \n    {\n        dict[i]++;\n    }\n    long max = dict.values.max;\n    return\
    \ dict.filter!(x => x.value == max).toArray.values;\n}\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    unittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl09or9oz.d(40): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl09or9oz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164346
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ frequencies;\n    foreach(ch; test.split) \n    {\n        frequencies[ch]++;\n\
    \    }\n    long maxFreq = frequencies.values.max;\n    if(maxFreq == 0)\n   \
    \ {\n        return ___null_dict___;\n    }\n    long[string] histo;\n    foreach(ch;\
    \ frequencies.keys) \n    {\n        if(frequencies[ch] == maxFreq) \n       \
    \ {\n            histo[ch] = maxFreq;\n        }\n    }\n    return histo.nullable;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm03ngnx_.d(25): Error: no property `split` for type `string`

    /tmp/tmpm03ngnx_.d(29): Error: no property `max` for type `long[]`

    /tmp/tmpm03ngnx_.d(32): Error: undefined identifier `___null_dict___`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm03ngnx_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164348
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{ \n    auto counts\
    \ = long[string](test.split);\n    auto reduced = counts.reduce!((a, b) => a.length\
    \ > b.length ? a : b);\n    if (reduced.length == 0) return null;\n    return\
    \ reduced.reduce!((a, b) => a.value > b.value ? a : b).key.length;\n}\n \n/*\n\
    \    sum function is defined in std.algorithm.iteration\n*/\nunittest \n{\n  \
    \  assert(histogram(\"a b c\") == 1);\n    assert(histogram(\"a b b a\") == 2);\n\
    \    assert(histogram(\"a b c a b\") == 2);\n    assert(histogram(\"b b b b a\"\
    ) == 4);\n    assert(histogram(\"\") == null);\n}\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_of_8zkc.d(24): Error: found `[` when expecting `.` following long

    /tmp/tmp_of_8zkc.d(24): Error: semicolon expected following auto declaration,
    not `]`

    /tmp/tmp_of_8zkc.d(24): Error: found `]` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_of_8zkc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ m = new long[string]();\n    size_t len = test.length;\n    if(len != 0)\n \
    \   {\n        foreach(t; test.split)\n        {\n            m[t] += 1L;\n  \
    \      }\n    }\n    Nullable!(long[string]) res = Nullable!(long[string]).init;\n\
    \    long count = 0L;\n    foreach(t; m)\n    {\n        if(t.value > count)\n\
    \        {\n            count = t.value;\n            res.value = new long[string]();\n\
    \            res.value[t.key] = t.value;\n        }\n        else if(t.value ==\
    \ count)\n        {\n            res.value[t.key] = t.value;\n        }\n    }\n\
    \    return res;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n    \
    \    auto result = candidate(\"a b b a\");\n        assert(!result.isNull && result.get\
    \ == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c\
    \ a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy4qvya5i.d(24): Error: cannot pass type `string` as a function
    argument

    /tmp/tmpy4qvya5i.d(28): Error: no property `split` for type `string`

    /tmp/tmpy4qvya5i.d(37): Error: no property `value` for type `long`

    /tmp/tmpy4qvya5i.d(39): Error: no property `value` for type `long`

    /tmp/tmpy4qvya5i.d(40): Error: no property `value` for type `Nullable!(long[string])`,
    did you mean `std.typecons.Nullable!(long[string]).Nullable._value`?

    /tmp/tmpy4qvya5i.d(40): Error: cannot pass type `string` as a function argument

    /tmp/tmpy4qvya5i.d(41): Error: no property `value` for type `Nullable!(long[string])`,
    did you mean `std.typecons.Nullable!(long[string]).Nullable._value`?

    /tmp/tmpy4qvya5i.d(43): Error: no property `value` for type `long`

    /tmp/tmpy4qvya5i.d(45): Error: no property `value` for type `Nullable!(long[string])`,
    did you mean `std.typecons.Nullable!(long[string]).Nullable._value`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy4qvya5i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164348
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n\tauto dict =\
    \ TypeTuple!(string, long)[];\n\tforeach(unchecked c; test) \n\t{\n\t\tbool found\
    \ = false;\n\t\tforeach(unchecked int j, ref item; dict) \n\t\t{\n\t\t\tif(item[0]\
    \ == c) \n\t\t\t{\n\t\t\t\titem[1]++;\n\t\t\t\tfound = true;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif(!found) \n\t\t{\n\t\t\tappend(dict, TypeTuple!(string,\
    \ long)(c, 1L));\n\t\t}\n\t}\n\t\n\tauto max = TypeTuple!(string, long)(\"\",\
    \ 0L);\n\tforeach(unchecked item; dict) \n\t{\n\t\tif(item[1] > max[1]) \n\t\t\
    {\n\t\t\tmax = item;\n\t\t}\n\t}\n\t\n\tNullable!(long[string]) nullableHistogram;\n\
    \tforeach(unchecked item; dict) \n\t{\n\t\tif(item[1] == max[1]) \n\t\t{\n\t\t\
    \tnullableHistogram.set(item[0], item[1]);\n\t\t}\n\t}\n\treturn nullableHistogram;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeh8v1_vg.d(28): Error: no identifier for declarator `unchecked`

    /tmp/tmpeh8v1_vg.d(28): Error: found `int` when expecting `;`

    /tmp/tmpeh8v1_vg.d(28): Error: expression expected, not `ref`

    /tmp/tmpeh8v1_vg.d(28): Error: found `item` when expecting `)`

    /tmp/tmpeh8v1_vg.d(28): Error: use `{ }` for an empty statement, not `;`

    /tmp/tmpeh8v1_vg.d(28): Error: found `)` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeh8v1_vg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    if (test.empty)\
    \ \n    {\n        return ___null_dict___;\n    }\n    import std.algorithm.iteration\
    \ : map, maxElement;\n    import std.algorithm.comparison : equal;\n    import\
    \ std.range : takeExactly;\n    import std.typecons : Nullable;\n    import std.traits\
    \ : ElementType;\n    import std.conv : to;\n    import std.stdio : writeln;\n\
    \    //import std.meta : Filter;\n    auto testArray = test.split(\" \");\n  \
    \  enum firstLetter = testArray[0];\n    //auto testArray = test.split(\" \").filter!(a\
    \ => a.length == 1);\n    //writeln(testArray);\n    auto A = testArray.map!(a\
    \ => a.filter!(b => b == firstLetter).length).maxElement;\n    //writeln(A);\n\
    \    auto B = testArray.filter!(a => a.filter!(b => b == firstLetter).length ==\
    \ A);\n    //writeln(B);\n    auto C = testArray.filter!(a => a.filter!(b => b\
    \ == firstLetter).length != A);\n    //writeln(C);\n    auto D = B.map!(a => [a:\
    \ A]);\n    //writeln(D);\n    auto E = C.map!(a => a.filter!(b => b != firstLetter));\n\
    \    //writeln(E);\n    /*auto E = testArray.filter!(a => a.filter!(b => b !=\
    \ firstLetter))\n                .map!(a => a.filter!(b => b != firstLetter));*/\n\
    \    //writeln(E);\n    auto F = E.map!(a => a.takeExactly(a.length - 1));\n \
    \   //writeln(F);\n    auto G = F.map!(a => a.filter!(b => b == F[0]));\n    //writeln(G);\n\
    \    auto H = G.map!(a => a.length);\n    //writeln(H);\n    auto I = H.maxElement;\n\
    \    //writeln(I);\n    auto J = F.\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfv0cmt89.d(62): Error: identifier expected following `.`, not `unittest`

    /tmp/tmpfv0cmt89.d(63): Error: semicolon expected following auto declaration,
    not `{`

    /tmp/tmpfv0cmt89.d(107): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfv0cmt89.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ d = [:] ;\n    string[] test = test.split ;\n    foreach(index, value; test)\n\
    \    {\n        if( value.length > 0)\n        {\n            d[value]++ ;\n \
    \       }\n    }\n    Nullable!(long[string]) res ;\n    if(d.length > 0)\n  \
    \  {\n        res = d ;\n    }\n    return res ;\n}\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1yo_whw0.d(24): Error: expression expected, not `:`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1yo_whw0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164346
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ result;\n    foreach(char c; test)\n    {\n        result[c] += 1L;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n \
    \       auto result = candidate(\"a b b a\");\n        assert(!result.isNull &&\
    \ result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp50v9ce8r.d(27): Error: cannot implicitly convert expression `c`
    of type `char` to `string`

    /tmp/tmp50v9ce8r.d(29): Error: cannot implicitly convert expression `result` of
    type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp50v9ce8r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164348
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    import std.algorithm\
    \ : max;\n    import std.array : max;\n    import std.range : iota;\n    import\
    \ std.range : empty;\n    import std.range : zip;\n    import std.range : map;\n\
    \    import std.range : filter;\n    import std.traits : isDynamicArray;\n   \
    \ import std.traits : isStaticArray;\n    import std.traits : isAssociativeArray;\n\
    \    import std.traits : isArray;\n    import std.traits : isInputRange;\n   \
    \ import std.traits : isOutputRange;\n    import std.traits : isForwardRange;\n\
    \    import std.traits : isBidirectionalRange;\n    import std.traits : isRandomAccessRange;\n\
    \    import std.traits : isInfinite;\n    import std.typecons : AliasSeq;\n  \
    \  import std.typecons : is;\n    import std.conv : to;\n    import std.array\
    \ : array;\n    import std.algorithm : max;\n    import std.algorithm : maxElement;\n\
    \    import std.algorithm : equal;\n    import std.algorithm : count;\n    import\
    \ std.algorithm : countUntil;\n    import std.algorithm : countUntil;\n    import\
    \ std.algorithm : countUntil;\n    import std.algorithm : replace;\n    import\
    \ std.algorithm : replaceUntil;\n    import std.algorithm : replaceInPlace;\n\
    \    import std.algorithm : replaceInPlaceUntil;\n    import std.algorithm : copy;\n\
    \    import std.algorithm : copyUntil;\n    import std.algorithm : fill;\n   \
    \ import std.algorithm : fillUntil;\n    import std.algorithm : move;\n    import\
    \ std.algorithm : moveUntil;\n    import std.algorithm : swap;\n    import std.algorithm\
    \ : generate;\n    import std.algorithm : generateUntil;\n    import std.algorithm\
    \ : formatValue;\n    import std.algorithm : find;\n    import std.algorithm :\
    \ findUntil;\n    import std.algorithm : findIn;\n    import std.algorithm : findInUntil;\n\
    \    import std.algorithm : findSplit\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_yrdmdej.d(42): Error: identifier expected following `:`

    /tmp/tmp_yrdmdej.d(42): Error: `;` expected

    /tmp/tmp_yrdmdej.d(42): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmp_yrdmdej.d(71): Error: `;` expected

    /tmp/tmp_yrdmdej.d(116): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_yrdmdej.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    if (test.empty)\n\
    \        return ___null_dict___;\n    long[string] count;\n    foreach (c; test.split)\n\
    \    {\n        count[c]++;\n    }\n    long max = maxElement(count.values);\n\
    \    Nullable!(long[string]) result = typeof(result)();\n    foreach (c; count.keys)\n\
    \    {\n        if (count[c] == max)\n            result[c] = max;\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n   \
    \     auto result = candidate(\"a b b a\");\n        assert(!result.isNull &&\
    \ result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4z71lvi2.d(24): Error: no property `empty` for type `string`

    /tmp/tmp4z71lvi2.d(25): Error: undefined identifier `___null_dict___`

    /tmp/tmp4z71lvi2.d(27): Error: no property `split` for type `string`

    /tmp/tmp4z71lvi2.d(31): Error: undefined identifier `maxElement`

    /tmp/tmp4z71lvi2.d(32): Error: undefined identifier `result`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4z71lvi2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164348
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ _histo = Nullable!(long[string]).init;\n    _histo.isValid = true;\n    foreach(character;\
    \ test)\n    {\n        if (character != ' ')\n        {\n            if (_histo.data.count(character)\
    \ == 0)\n            {\n                _histo.data[character] = 1L;\n       \
    \     }\n            else\n            {\n                _histo.data[character]\
    \ += 1L;\n            }\n        }\n    }\n    if (_histo.data.length == 0)\n\
    \    {\n        _histo.isValid = false;\n    }\n    return _histo;\n}\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm6cdp6a8.d(25): Error: no property `isValid` for type `Nullable!(long[string])`

    /tmp/tmpm6cdp6a8.d(30): Error: no property `data` for type `Nullable!(long[string])`

    /tmp/tmpm6cdp6a8.d(32): Error: no property `data` for type `Nullable!(long[string])`

    /tmp/tmpm6cdp6a8.d(36): Error: no property `data` for type `Nullable!(long[string])`

    /tmp/tmpm6cdp6a8.d(40): Error: no property `data` for type `Nullable!(long[string])`

    /tmp/tmpm6cdp6a8.d(42): Error: no property `isValid` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm6cdp6a8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164348
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    import std.algorithm;\n\
    \    Nullable!(long[string]) nullable;\n    if (test.empty)\n    {\n        return\
    \ nullable;\n    }\n    test = test.strip;\n    auto x = test.split(\" \");\n\
    \    auto y = x.groupBy!((a) => a);\n    long temp1 = 0;\n    long[] temp2;\n\
    \    long[string] a;\n    foreach (item; y)\n    {\n        auto temp = item.value.length;\n\
    \        if (temp > temp1)\n        {\n            temp1 = temp;\n           \
    \ temp2 = item.value;\n        }\n        if (temp == temp1)\n        {\n    \
    \        temp2 ~= item.value;\n        }\n    }\n    temp2 = temp2.groupBy!((a)\
    \ => a).values.expand.array;\n    foreach (item; temp2)\n    {\n        a[item]\
    \ = temp1;\n    }\n    nullable = a;\n    return nullable;\n}\nunittest\n{\n \
    \   alias candidate = histogram;\n\n{\n        auto result = candidate(\"a b b\
    \ a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0xg5nmta.d(26): Error: no property `empty` for type `string`

    /tmp/tmp0xg5nmta.d(30): Error: template `std.algorithm.mutation.strip` cannot
    deduce function from argument types `!()(string)`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/algorithm/mutation.d(2588):        `std.algorithm.mutation.strip(Range,
    E)(Range range, E element) if (isBidirectionalRange!Range && is(typeof(range.front
    == element) : bool))`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/algorithm/mutation.d(2595):        `std.algorithm.mutation.strip(alias
    pred, Range)(Range range) if (isBidirectionalRange!Range && is(typeof(pred(range.back))
    : bool))`

    /tmp/tmp0xg5nmta.d(31): Error: no property `split` for type `string`

    /tmp/tmp0xg5nmta.d(49): Error: no property `groupBy` for type `long[]`

    /tmp/tmp0xg5nmta.d(52): Error: cannot implicitly convert expression `item` of
    type `long` to `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0xg5nmta.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164348
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    if (test.empty)\
    \ return Nullable!(long[string])();\n    Nullable!(long[string]) res = null;\n\
    \    long[string] hist = new long[string];\n    foreach (i, item; test.split())\n\
    \    {\n        hist[item]++;\n    }\n    long max = -1;\n    foreach (k, v; hist)\n\
    \    {\n        if (v > max)\n        {\n            max = v;\n            res\
    \ = null;\n        }\n        if (v == max)\n        {\n            if (res.isNull)\
    \ res = new long[string];\n            res.get().insert(k, v);\n        }\n  \
    \  }\n    return res;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n\
    \        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvws16w8y.d(24): Error: no property `empty` for type `string`

    /tmp/tmpvws16w8y.d(26): Error: cannot pass type `string` as a function argument

    /tmp/tmpvws16w8y.d(27): Error: no property `split` for type `string`

    /tmp/tmpvws16w8y.d(41): Error: cannot pass type `string` as a function argument

    /tmp/tmpvws16w8y.d(42): Error: no property `insert` for type `long[string]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvws16w8y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164348
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    immutable\
    \ chars = test.strip().split;\n    immutable counts = chars.mangle !((a, b) =>\
    \ (a == b, b));\n    immutable letter = counts.map !(a => a[1]).maxElement;\n\
    \    immutable group = counts.filter !(a => a[1] == letter);\n    return group.groupBy\
    \ !(a => a[1]).find(letter);\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpng4_9du7.d(24): Error: no property `strip` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpng4_9du7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164348
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ ret;\n    long[char] tmp;\n    long max = 0;\n    ret.length = test.length;\n\
    \    foreach(line; test.split(\" \")) {\n        foreach(ch; line) {\n       \
    \     tmp[ch]++;\n            if(tmp[ch] > max) {\n                max = tmp[ch];\n\
    \            }\n        }\n    }\n    foreach(c; tmp.keys) {\n        if(tmp[c]\
    \ == max) {\n            ret[c] = max;\n        }\n    }\n    return ret.length\
    \ == 0 ? null : ret;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n\
    \        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoec6wlnu.d(27): Error: `ret.length` is not an lvalue and cannot
    be modified

    /tmp/tmpoec6wlnu.d(28): Error: no property `split` for type `string`

    /tmp/tmpoec6wlnu.d(38): Error: cannot implicitly convert expression `c` of type
    `char` to `string`

    /tmp/tmpoec6wlnu.d(41): Error: cannot implicitly convert expression `_aaLen(ret)
    == 0LU ? cast(long[string])null : ret` of type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoec6wlnu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164348
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    /*\n    Should\
    \ i use a hash table?\n    \n    If i use a hash table, it would be easy to get\
    \ the maximum value\n    also I would be able to return a Nullable!string[] by\
    \ using .tupleof\n    .tupleof returns a dynamic array which can be easily converted\
    \ to a dynamic array\n    of strings\n    \n    I will use a hash table.\n   \
    \ */\n    HashTable!(string, long) letterCount = HashTable!(string, long)();\n\
    \    immutable(string)[] letters = test.split();\n    auto max = 0L;\n    for(immutable(string)\
    \ letter ; letters)\n    {\n        auto count = letterCount.insert(letter, 0L);\n\
    \        count.second = count.second + 1L;\n        if(count.second > max)\n \
    \       {\n            max = count.second;\n        }\n    }\n    /*\n    Now\
    \ that i know what is the largest number (max), i will iterate through the hash\
    \ table\n    and find all the keys which have the max value.\n    A hash table\
    \ has a struct property called .table which is an array of tuples\n    Each tuple\
    \ contains a tuple containing the key and value of a HashNode and the next pointer.\n\
    \    This means that to get all the values of the hash table i have to iterate\
    \ through the array\n    and look for tuples which don't have a null pointer.\n\
    \    */\n    immutable(string)[] mostCommon = immutable(string)[]().init;\n  \
    \  for(auto node : letterCount.table)\n    {\n        if(node.next !is null)\n\
    \        {\n            if(node.next.value.second == max)\n            {\n   \
    \             mostCommon ~= node.next.value.first;\n            }\n        }\n\
    \    }\n    /*\n    Now that i have all the values which are repeated the most,\n\
    \    i will return a nullable!string[] which contains these values\n    */\n \
    \   return to!(Nullable!(long[string]))(mostCommon);\n}\nunittest\n{\n    alias\
    \ candidate = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvjz86g0z.d(37): Error: found `)` when expecting `;` following `for`
    condition

    /tmp/tmpvjz86g0z.d(54): Error: found `immutable` when expecting `)`

    /tmp/tmpvjz86g0z.d(54): Error: found `mostCommon` when expecting `;` following
    statement

    /tmp/tmpvjz86g0z.d(54): Error: found `=` instead of statement

    /tmp/tmpvjz86g0z.d(55): Error: no identifier for declarator `node`

    /tmp/tmpvjz86g0z.d(55): Error: expression expected, not `:`

    /tmp/tmpvjz86g0z.d(55): Error: found `letterCount` when expecting `;` following
    `for` condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvjz86g0z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result;\n    // your code here\n    return result;\n}\n```\nunittest\n{\n  \
    \  alias candidate = histogram;\n\n{\n        auto result = candidate(\"a b b\
    \ a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr6ygpt0u.d(28): Error: declaration expected, not `""`

    /tmp/tmpr6ygpt0u.d(28): Error: unterminated string constant starting at /tmp/tmpr6ygpt0u.d(28)

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr6ygpt0u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{ \n    auto letters\
    \ = test.split; \n    long max = 0; \n    foreach(i, e; letters) { \n        if(letters[e]\
    \ is null) letters[e] = 1; \n        else letters[e] += 1; \n        if(letters[e]\
    \ > max) max = letters[e]; \n    } \n    Nullable!(long[string]) result = null;\
    \ \n    foreach(i, e; letters) { \n        if(letters[e] == max) { \n        \
    \    if(result is null) result = to!(Nullable!(long[string]))[e:max]; \n     \
    \       else result[e] = max; \n        } \n    } \n    return result; \n}\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4q1eaz6t.d(34): Error: found `:` when expecting `,`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4q1eaz6t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    typeof(return)\
    \ result;\n    foreach(c; test.chunks(1)) \n    {\n        if(result.count.length\
    \ == 0)\n        {\n            result.count = [c[0]: 1L];\n        }\n      \
    \  else if(result.count.count(c[0]) == 0)\n        {\n            result.count[c[0]]\
    \ = 1L;\n        }\n        else\n        {\n            result.count[c[0]] +=\
    \ 1L;\n        }\n    }\n    if(result.count.length == 0) \n    {\n        return\
    \ ___null_dict___;\n    }\n    const int MAX = result.count.values.max;\n    foreach(key,\
    \ value; result.count) \n    {\n        if(value < MAX) \n        {\n        \
    \    result.count.remove(key);\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqj4fs7ce.d(25): Error: no property `chunks` for type `string`

    /tmp/tmpqj4fs7ce.d(40): Error: no property `count` for type `Nullable!(long[string])`

    /tmp/tmpqj4fs7ce.d(42): Error: undefined identifier `___null_dict___`

    /tmp/tmpqj4fs7ce.d(44): Error: no property `count` for type `Nullable!(long[string])`

    /tmp/tmpqj4fs7ce.d(45): Error: no property `count` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqj4fs7ce.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164348
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ ret = ___null_dict___;\n    import std.algorithm;\n    auto split = test.split(\"\
    \ \");\n    int max = 0;\n    foreach(i; split)\n    {\n        if(ret.contains(i))\n\
    \        {\n            ret[i]++;\n        }\n        else\n        {\n      \
    \      ret[i] = 1;\n        }\n        if(ret[i] > max)\n        {\n         \
    \   max = ret[i];\n        }\n    }\n    Nullable!(long[string]) ret2 = new long[string]();\n\
    \    foreach(i;ret)\n    {\n        if(i.value == max)\n        {\n          \
    \  ret2[i.key] = i.value;\n        }\n    }\n    return ret2;\n}\nunittest\n{\n\
    \    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a b\
    \ b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd6xuj962.d(24): Error: undefined identifier `___null_dict___`

    /tmp/tmpd6xuj962.d(26): Error: no property `split` for type `string`

    /tmp/tmpd6xuj962.d(43): Error: cannot pass type `string` as a function argument

    /tmp/tmpd6xuj962.d(46): Error: no property `value` for type `long`

    /tmp/tmpd6xuj962.d(48): Error: no property `key` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd6xuj962.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164348
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    auto lookup\
    \ = test.splitter().frequencyMap();\n    auto max = lookup.values.max();\n   \
    \ auto result = new long[string];\n    foreach(k,v; lookup)\n    {\n        if(v\
    \ == max)\n        {\n            result[k] = v;\n        }\n    }\n    return\
    \ result.nullable;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n  \
    \      auto result = candidate(\"a b b a\");\n        assert(!result.isNull &&\
    \ result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpneiuc6it.d(24): Error: no property `splitter` for type `string`

    /tmp/tmpneiuc6it.d(26): Error: cannot pass type `string` as a function argument

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpneiuc6it.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164348
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ result;\n    long[long] freq;\n    for (auto it : test.split())\n    {\n   \
    \     if (result.byKey(it) == null)\n        {\n            result[it] = 1L;\n\
    \        }\n        else\n        {\n            ++result[it];\n        }\n  \
    \      freq[result[it]] = result[it];\n    }\n    if (result.length == 0)\n  \
    \  {\n        return null;\n    }\n    long max = freq.byKey(freq.length-1);\n\
    \    long[string] output;\n    for (auto[key, value] = result.front; !value.empty;\
    \ value.popFront())\n    {\n        if (value.front == max)\n        {\n     \
    \       output[key] = value.front;\n        }\n    }\n    return output;\n}\n\
    unittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm9wu8zuo.d(26): Error: no identifier for declarator `it`

    /tmp/tmpm9wu8zuo.d(26): Error: expression expected, not `:`

    /tmp/tmpm9wu8zuo.d(26): Error: found `test` when expecting `;` following `for`
    condition

    /tmp/tmpm9wu8zuo.d(44): Error: basic type expected, not `[`

    /tmp/tmpm9wu8zuo.d(44): Error: found `,` when expecting `]`

    /tmp/tmpm9wu8zuo.d(44): Error: semicolon expected, not `]`

    /tmp/tmpm9wu8zuo.d(44): Error: expression expected, not `]`

    /tmp/tmpm9wu8zuo.d(44): Error: found `;` when expecting `)`

    /tmp/tmpm9wu8zuo.d(44): Error: found `)` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm9wu8zuo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    if (test.empty)\n\
    \        return null;\n    Nullable!(long[string]) letters = null;\n    string[]\
    \ space_splitted = test.split(' ');\n    immutable(long[string]) tmp = [];\n \
    \   foreach(i, letter; space_splitted)\n    {\n        if (letter in tmp)\n  \
    \          tmp[letter]++;\n        else\n            tmp[letter] = 1;\n    }\n\
    \    long max_value = tmp.values.max();\n    foreach(value; tmp.values)\n    {\n\
    \        if (value == max_value)\n            letters ~= (tmp.keys[value] : value);\n\
    \    }\n    return letters;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmx0f2x5l.d(40): Error: found `:` when expecting `)`

    /tmp/tmpmx0f2x5l.d(40): Error: found `value` when expecting `;` following statement

    /tmp/tmpmx0f2x5l.d(40): Error: found `)` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmx0f2x5l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ result;\n    long[string] temp;\n    long[string] max;\n    long[string] value;\n\
    \    long[string] key;\n    long maxCount;\n    long currentCount;\n    long count;\n\
    \    long index;\n    string[long] repeat;\n    foreach(index, letter; test.split)\
    \ \n    {\n        repeat = result.byKey(letter);\n        if(repeat is null)\
    \ \n        {\n            result[letter] = 1L;\n        } \n        else \n \
    \       {\n            result[letter] = repeat + 1L;\n        }\n    }\n    value\
    \ = result.values();\n    key = result.keys();\n    count = 0L;\n    maxCount\
    \ = value[0L];\n    foreach(count, currentCount; value) \n    {\n        if(currentCount\
    \ == maxCount) \n        {\n            max[key[count]] = currentCount;\n    \
    \    } \n        else if(currentCount > maxCount) \n        {\n            maxCount\
    \ = currentCount;\n            max = typeof(max).init;\n            max[key[count]]\
    \ = currentCount;\n        }\n    }\n    return max;\n}\n/*\nAn O(n^2) algorithm\
    \ to decide if a string is an anagram of another.\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfywvzf7x.d(65): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfywvzf7x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    auto a = test.split(\"\
    \ \");\n    auto b = a.slicedup.array;\n    auto c = b.tupleof;\n    auto d =\
    \ a.countmap;\n    long maxValue = 0;\n    string maxKey = \"\";\n    foreach(k,\
    \ v; d)\n    {\n        if(v > maxValue)\n        {\n            maxValue = v;\n\
    \            maxKey = k;\n        }\n    }\n    if(maxValue == 0)\n    {\n   \
    \     return null;\n    }\n    else\n    {\n        return [maxKey: maxValue];\n\
    \    }\n}\n/*\nYou are given a string of lowercase letters, and an integer. \n\
    \    Write a function that iterates through the string, \n    builds a new string,\
    \ and returns it. \n    The new string should contain the characters in the original\
    \ string \n    and the integer number of occurrences of each character in the\
    \ new string. \n    For example:\n    >>> build(\"a\", 2)\n    \"a\"\n    >>>\
    \ build(\"a\", 3)\n    \"aaa\"\n    >>> build(\"aa\", 2)\n    \"aaaa\"\n    >>>\
    \ build(\"ab\", 3)\n    \"ababab\"\n    >>> build(\"abc\", 2)\n    \"aabbcc\"\n\
    \    >>> build(\"aaa\", 2)\n    \"aaaaaaa\"\n    >>> build(\"\", 3)\n    \"\"\n\
    */\nstring build(string s, int n) \n{\n    string result = \"\";\n    foreach(c;\
    \ s)\n    {\n        result ~= repeat(c, n);\n    }\n    return result;\n}\n/*\n\
    You are given a rectangular matrix of numbers. \n    Write a function that rotates\
    \ the matrix by 90 degrees clockwise and returns the result.\n    >>> rotate(\"\
    1,2,3;4,5,6;7,8,9\")\n    \"7,4,1;8,5,2;9,6,3\"\n    >>> rotate(\"0,0,0;0,0,0;0,0,0\"\
    )\n    \"0,0,0;0,0,0;0,0,0\"\n    >>> rotate(\"0\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppswex2ra.d(78): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppswex2ra.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    import std.algorithm\
    \ : max, maxElement;\n    import std.container : SortedRange;\n    import std.conv\
    \ : to;\n    import std.range : zip;\n    import std.string : split;\n    if (test.empty)\n\
    \        return null;\n    string[] spl = test.split(\" \");\n    Nullable!(long[string])\
    \ result = long[string].init;\n    foreach (const element; spl)\n    {\n     \
    \   if (element in result)\n            result[element] += 1L;\n        else\n\
    \            result[element] = 1L;\n    }\n    auto maxIt = maxElement(result);\n\
    \    if (maxIt == null)\n        return null;\n    long maxV = *maxIt;\n    auto\
    \ resRange = zip(result.byPair.map!(a => a[1]))\n    .filter!(a => a[0] == maxV)\n\
    \    .map!(a => a[1].key);\n    SortedRange!(string) res = resRange.array;\n \
    \   return res;\n}\n/*\n    Given an array of numbers, apply the following rules,\
    \ until there are no numbers left in the array:\n    \n    - If there is an even\
    \ number of elements, take the first half and append it to the end of the array.\n\
    \    - If there is an odd number of elements, take the middle element and append\
    \ it to the end of the array.\n    - Return the array after all numbers have been\
    \ removed.\n    \n    Example:\n    >>> snake(0.0, 1.0, 2.0, 3.0, 4.0, 5.0)\n\
    \    [3.0, 4.0, 5.0, 0.0, 1.0, 2.0]\n    >>> snake(1.0, 2.0, 3.0, 4.0, 5.0)\n\
    \    [3.0, 4.0, 5.0, 1.0, 2.0]\n    >>> snake(1.0, 2.0, 3.0, 4.0)\n    [2.0, 3.0,\
    \ 4.0, 1.0]\n    >>> snake(1.0, 2.0, 3.\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkq4td3y1.d(32): Error: found `[` when expecting `.` following long

    /tmp/tmpkq4td3y1.d(32): Error: semicolon expected, not `]`

    /tmp/tmpkq4td3y1.d(32): Error: found `]` instead of statement

    /tmp/tmpkq4td3y1.d(50): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkq4td3y1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    // TODO: implement\
    \ this\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result\
    \ = candidate(\"a b b a\");\n        assert(!result.isNull && result.get == [\"\
    a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqrq61nla.d(25): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqrq61nla.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result;\n    if (test.length > 0) \n    {\n        auto aa = test.split(\" \"\
    );\n        long[string] aCount;\n        foreach (a; aa) \n        {\n      \
    \      if (aCount.contains(a)) \n            {\n                aCount[a]++;\n\
    \            } \n            else \n            {\n                aCount[a] =\
    \ 1;\n            }\n        }\n        long max = aCount.values.max;\n      \
    \  if (max > 0) \n        {\n            auto sMax = aCount.values.max;\n    \
    \        long[string] same;\n            foreach (a; aCount) \n            {\n\
    \                if (a.value == sMax) \n                {\n                  \
    \  same[a.key] = a.value;\n                }\n            }\n            result\
    \ = same;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3r4xp7na.d(27): Error: no property `split` for type `string`

    /tmp/tmp3r4xp7na.d(40): Error: no property `max` for type `long[]`

    /tmp/tmp3r4xp7na.d(43): Error: no property `max` for type `long[]`

    /tmp/tmp3r4xp7na.d(47): Error: no property `value` for type `long`

    /tmp/tmp3r4xp7na.d(49): Error: no property `key` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3r4xp7na.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164348
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ ret = null;\n    long[string] histogram;\n    foreach( char c; test)\n    {\n\
    \        if(c != ' ')\n        {\n            auto p = histogram.get(cast(string)c);\n\
    \            if(p)\n            {\n                *p.key++;\n            }\n\
    \            else\n            {\n                histogram[cast(string)c] = 1L;\n\
    \            }\n        }\n    }\n    long max = 0L;\n    foreach(key, value;\
    \ histogram)\n    {\n        if(value > max)\n        {\n            max = value;\n\
    \        }\n    }\n    if(max > 0L)\n    {\n        ret = new long[string];\n\
    \        foreach(key, value; histogram)\n        {\n            if(value == max)\n\
    \            {\n                ret.get!true[key] = value;\n            }\n  \
    \      }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjyx1b_rq.d(30): Error: cannot cast expression `c` of type `char`
    to `string`

    /tmp/tmpjyx1b_rq.d(37): Error: cannot cast expression `c` of type `char` to `string`

    /tmp/tmpjyx1b_rq.d(51): Error: cannot pass type `string` as a function argument

    /tmp/tmpjyx1b_rq.d(56): Error: template instance `get!true` does not match template
    declaration `get(U)(inout(U) fallback)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjyx1b_rq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164348
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    import std.algorithm\
    \ : max;\n    import std.string : join;\n    import std.array : equal;\n    import\
    \ std.conv : to;\n    import std.typecons : Tuple;\n    import std.uni : isLetter;\n\
    \    import std.range : unique;\n    Nullable!(long[string]) result;\n    string[]\
    \ histo;\n    if(test.length == 0)\n    {\n        return null;\n    }\n    foreach(t;\
    \ test.chunks(2))\n    {\n        if(t.length == 2)\n        {\n            if(isLetter(t[0])\
    \ && isLetter(t[1]))\n            {\n                histo ~= t[0..1];\n     \
    \       }\n            else if(isLetter(t[0]))\n            {\n              \
    \  histo ~= t[0..1];\n            }\n        }\n        else if(t.length == 1)\n\
    \        {\n            if(isLetter(t[0]))\n            {\n                histo\
    \ ~= t[0..1];\n            }\n        }\n    }\n    long max = 0;\n    long[]\
    \ res;\n    foreach(t; histo.unique)\n    {\n        long count = histo.count!(x\
    \ => equal(x, t));\n        if(count > max)\n        {\n            max = count;\n\
    \            res.length = 0;\n            res ~= count;\n        }\n        else\
    \ if(count == max)\n        {\n            res ~= count;\n        }\n    }\n \
    \   if(res.length == 0)\n    {\n        return null;\n    }\n    result = [].init;\n\
    \    foreach(res2; res)\n    {\n        foreach(t; histo.unique)\n        {\n\
    \            long count = histo.count!(x => equal(x, t));\n            if(count\
    \ == res2)\n            {\n                result.assocUpdate(t, res2);\n    \
    \        }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbn44ltuo.d(26): Error: module `std.array` import `equal` not found,
    did you mean template `std.traits.Unqual(T)`?

    /tmp/tmpbn44ltuo.d(29): Error: module `std.uni` import `isLetter` not found

    /tmp/tmpbn44ltuo.d(30): Error: module `std.range` import `unique` not found

    /tmp/tmpbn44ltuo.d(37): Error: no property `chunks` for type `string`

    /tmp/tmpbn44ltuo.d(58): Error: declaration `tmpbn44ltuo.histogram.max` is already
    defined

    /tmp/tmpbn44ltuo.d(78): Error: template `std.typecons.Nullable!(long[string]).Nullable.opAssign`
    cannot deduce function from argument types `!()(void[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(2804):        `std.typecons.Nullable!(long[string]).Nullable.opAssign()(T
    value)`

    /tmp/tmpbn44ltuo.d(35): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    /tmp/tmpbn44ltuo.d(76): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbn44ltuo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164348
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ nullableMap;\n    if (test.length == 0)\n    {\n        return nullableMap;\n\
    \    }\n    else\n    {\n        long[string] map = new long[string];\n      \
    \  foreach (ch; test.split)\n        {\n            if (map.count > 0)\n     \
    \       {\n                map[ch]++;\n            }\n            else\n     \
    \       {\n                map[ch] = 1;\n            }\n        }\n        long\
    \ max = map.values.max;\n        return map.byValue(max);\n    }\n}\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpha5it19d.d(31): Error: cannot pass type `string` as a function
    argument

    /tmp/tmpha5it19d.d(32): Error: no property `split` for type `string`

    /tmp/tmpha5it19d.d(43): Error: no property `max` for type `long[]`

    /tmp/tmpha5it19d.d(44): Error: template `object.byValue` cannot deduce function
    from argument types `!()(long[string], long)`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/druntime/import/object.d(2968):        `object.byValue(T
    : V[K], K, V)(T aa)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/druntime/import/object.d(2990):        `object.byValue(T
    : V[K], K, V)(T* aa)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpha5it19d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164349
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[] result\
    \ = long[string]().init;\n    foreach(char letter; test) \n    {\n        if(isAlpha(letter))\n\
    \        {\n            result[letter]++;\n        }\n    }\n    long max = 0;\n\
    \    foreach(value; result)\n    {\n        if(value > max)\n        {\n     \
    \       max = value;\n        }\n    }\n    return (result.filter!(v => v == max)\
    \ & result).nullable;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n\
    \        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjoq2i8yd.d(24): Error: found `[` when expecting `.` following long

    /tmp/tmpjoq2i8yd.d(24): Error: semicolon expected, not `]`

    /tmp/tmpjoq2i8yd.d(24): Error: found `]` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjoq2i8yd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \nin {\n    assert(test.length\
    \ >= 0);\n} \nbody {\n    import std.algorithm;\n    import std.array;\n    import\
    \ std.conv;\n    import std.range;\n    import std.string;\n    import std.typecons;\n\
    \    import std.uni;\n    if (test.length == 0) return Nullable!(long[string]).init;\n\
    \    auto split = test.split(\" \");\n    long[string] result;\n    long maxCount\
    \ = 0;\n    long count = 0;\n    foreach (i,s; split) {\n        result[s] = result.getOrInit(s,\
    \ 0) + 1;\n        if (result[s] > maxCount) {\n            maxCount = result[s];\n\
    \        }\n    }\n    foreach (i,s; split) {\n        if (result[s] == maxCount)\
    \ {\n            count++;\n        }\n    }\n    if (count == 0) {\n        return\
    \ Nullable!(long[string]).init;\n    }\n    long[string] histogram(count);\n \
    \   foreach (i,s; split) {\n        if (result[s] == maxCount) {\n           \
    \ histogram[s] = maxCount;\n        }\n    }\n    return Nullable!(long[string])(histogram);\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpittz_b_v.d(40): Error: no property `getOrInit` for type `long[string]`

    /tmp/tmpittz_b_v.d(53): Error: `count` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpittz_b_v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164349
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    //It's called\
    \ a histogram, so the array will be the values and the string will be the keys.\n\
    \    long[string] histogram;\n    string[] letters;\n    string letter;\n    long\
    \ counter;\n    long maxCount;\n    //Break the string into an array of strings.\n\
    \    letters = test.split;\n    //As we're looking for strings with the most repetitions,\
    \ \n    //    we'll want to keep track of the max count of each letter.\n    maxCount\
    \ = 0;\n    //We will start by iterating through each letter.\n    foreach(letter;\
    \ letters)\n    {\n        //We will start the counter at 1 to count the current\
    \ letter.\n        counter = 1;\n        //We will iterate through all the letters\
    \ again.\n        foreach(string s; letters)\n        {\n            //If the\
    \ letter we are searching is the same as the current letter,\n            // \
    \   we will increment the counter.\n            if(letter == s)\n            {\n\
    \                counter++;\n            }\n        }\n        //Store the letter\
    \ and the counter in the histogram.\n        histogram[letter] = counter;\n  \
    \      //If the counter is greater than the max count,\n        //    the counter\
    \ will become the new max count.\n        if(counter > maxCount)\n        {\n\
    \            maxCount = counter;\n        }\n    }\n    //Iterate through each\
    \ letter and count of the histogram.\n    foreach(string key; histogram.keys)\n\
    \    {\n        //If the count is not equal to the max count,\n        //    remove\
    \ the entry from the histogram.\n        if(histogram[key] != maxCount)\n    \
    \    {\n            histogram.remove(key);\n        }\n    }\n    //If the histogram\
    \ is empty, return null.\n    if(histogram.empty)\n    {\n        return Nullable!(long[string])(null);\n\
    \    }\n    //Else, return the histogram.\n    return Nullable!(long[string])(histogram);\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpppzfxhul.d(31): Error: no property `split` for type `string`

    /tmp/tmpppzfxhul.d(36): Error: variable `letter` is shadowing variable `tmpppzfxhul.histogram.letter`

    /tmp/tmpppzfxhul.d(70): Error: no property `empty` for type `long[string]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpppzfxhul.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164349
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    import std.algorithm;\n\
    \    import std.range;\n    import std.stdio;\n    import std.array;\n    import\
    \ std.typecons;\n    import std.meta;\n    import std.getopt;\n    import std.exception;\n\
    \    import std.math;\n    import std.typecons;\n    import std.uni;\n    import\
    \ std.utf;\n    import std.conv;\n    import std.algorithm;\n    import std.string;\n\
    \    import std.utf;\n    import std.uni;\n    import std.getopt;\n    import\
    \ std.traits;\n    import std.array;\n    import std.range;\n    import std.typecons;\n\
    \    import std.meta;\n    import std.algorithm;\n    import std.range;\n    import\
    \ std.math;\n    import std.typecons;\n    auto tokenizer = test.split(\" \");\n\
    \    writeln(tokenizer);\n    auto counts = tokenizer.group.map!(t => [t[0]: t.length]);\n\
    \    writeln(counts);\n    auto max = counts.max!((a, b) => a[0].toString.length\
    \ < b[0].toString.length)();\n    writeln(max);\n    auto max_count = max[0].toString.length;\n\
    \    writeln(max_count);\n    return counts.find!(a => a[0].toString.length ==\
    \ max_count)\n    .map!(a => a[0]);\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_psl2i9o.d(55): Error: template instance `tmp_psl2i9o.histogram.max!((a,
    b) => a[0].toString.length < b[0].toString.length)` does not match template declaration
    `max(T...)(T args) if (T.length >= 2)`

    /tmp/tmp_psl2i9o.d(59): Error: cannot implicitly convert expression `0` of type
    `int` to `string`

    /tmp/tmp_psl2i9o.d(59):        instantiated from here: `find!((a) => a[0].toString.length
    == max_count, MapResult!(__lambda2, Group!("a == b", string[])))`

    /tmp/tmp_psl2i9o.d(60): Error: cannot implicitly convert expression `0` of type
    `int` to `string`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/algorithm/iteration.d(499):        instantiated
    from here: `MapResult!(__lambda5, MapResult!(__lambda2, Group!("a == b", string[])))`

    /tmp/tmp_psl2i9o.d(60):        instantiated from here: `map!(MapResult!(__lambda2,
    Group!("a == b", string[])))`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_psl2i9o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164349
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    if (test.empty)\
    \ return Nullable!(long[string]).init;\n    /*\n     * Split each element into\
    \ a separate String and return the array of strings.\n     * The delimiters are\
    \ searched for and returned as elements of the resulting array.\n     * Note that\
    \ if parameter `keepTerminators` is false, the delimiters are not returned.\n\
    \     *\n     * Examples:\n     * \n     * >>> \"a b c\".split()\n     * [\"a\"\
    , \"b\", \"c\"]\n     * >>> \"a b c\".split(keepTerminators = false)\n     * [\"\
    a\", \"b\", \"c\"]\n     * >>> \"abc\".split()\n     * [\"abc\"]\n     * >>> \"\
    a b c\".split(' ')\n     * [\"a\", \" \", \"b\", \" \", \"c\"]\n     * >>> \"\
    a b c\".split(' ', keepTerminators = false)\n     * [\"a\", \"b\", \"c\"]\n  \
    \   * >>> \"a b c\".split(' ')\n     * [\"a\", \" \", \"b\", \" \", \"c\"]\n \
    \    * >>> \"a b c\".split(' ', keepTerminators = false)\n     * [\"a\", \"b\"\
    , \"c\"]\n     * >>> \"a b c\".split(' ', keepTerminators = true)\n     * [\"\
    a\", \" \", \"b\", \" \", \"c\"]\n     * >>> \" a b c \".split(' ', keepTerminators\
    \ = true)\n     * [\"\", \" \", \"a\", \" \", \"b\", \" \", \"c\", \" \"]\n  \
    \   * >>> \"a b\".split(' ', true)\n     * [\"a\", \" \", \"b\"]\n     * >>> \"\
    a \".split(' ', true)\n     * [\"a\", \" \"]\n     * >>> \" a\".split(' ', true)\n\
    \     * [\"\", \" \", \"a\"]\n     * >>> \" \".split(' ', true)\n     * [\"\"\
    , \" \"]\n     * >>> \"\".split(' ', true)\n     * []\n     * >>> \" \".split('\
    \ ', false)\n     * []\n     * >>> \"a\".split(' ', false)\n     * [\"a\"]\n \
    \    * >>> \"\".split(' ', false)\n     * []\n     * >>> \" a b c\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphjd1neca.d(25): Error: unterminated /* */ comment

    /tmp/tmphjd1neca.d(112): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphjd1neca.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164348
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    immutable\
    \ string test_array[] = test.split();\n    return histogram(test_array);\n}\n\
    unittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpri4ndijh.d(24): Deprecation: instead of C-style syntax, use D-style
    syntax `string[] test_array`

    /tmp/tmpri4ndijh.d(24): Error: no property `split` for type `string`

    /tmp/tmpri4ndijh.d(25): Error: function `tmpri4ndijh.histogram(string test)` is
    not callable using argument types `(immutable(string[]))`

    /tmp/tmpri4ndijh.d(25):        cannot pass argument `test_array` of type `immutable(string[])`
    to parameter `string test`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpri4ndijh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164349
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    if (test.empty)\n\
    \        return ___null_dict___;\n    auto occurrences = test.split.groupBy!(a\
    \ => a);\n    return occurrences.retro(a => a.value.length).max.indices.map!(a\
    \ => tuple(a, occurrences[a].length)).array.nullable;\n}\nunittest\n{\n    alias\
    \ candidate = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdqmz57s2.d(24): Error: no property `empty` for type `string`

    /tmp/tmpdqmz57s2.d(25): Error: undefined identifier `___null_dict___`

    /tmp/tmpdqmz57s2.d(26): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdqmz57s2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164349
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ dict;\n    if(test.length == 0) return ___null_dict___;\n    foreach(i,c;test)\n\
    \    {\n        if(!dict.count(c)) dict[c] = 1L;\n        else dict[c]++;\n  \
    \  }\n    auto max = dict.values.max;\n    long[string] result;\n    foreach(i,k;dict.keys)\n\
    \    {\n        if(dict[k] == max) result[k] = max;\n    }\n    return to!Nullable(result);\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfm33tjam.d(25): Error: undefined identifier `___null_dict___`

    /tmp/tmpfm33tjam.d(28): Error: no property `count` for type `long[string]`

    /tmp/tmpfm33tjam.d(28): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpfm33tjam.d(29): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpfm33tjam.d(31): Error: no property `max` for type `long[]`

    /tmp/tmpfm33tjam.d(37): Error: template instance `to!Nullable` template `to` is
    not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfm33tjam.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164349
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    import std.algorithm;\n\
    \    import std.typecons;\n    import std.string;\n    Nullable!(long[string])\
    \ res;\n    if(test.empty)\n        return ___null_dict___;\n    string[] words\
    \ = test.split;\n    words.sort;\n    long maxcnt = -1;\n    res = new long[string];\n\
    \    foreach(i, w; words)\n    {\n        if(i == 0 || words[i] != words[i-1])\n\
    \        {\n            if(res.get(words[i]))\n                res.get(words[i])++;\n\
    \            else\n                res.set(words[i], 1L);\n        }\n       \
    \ else\n            res.get(words[i])++;\n        if(res.get(words[i]) > maxcnt)\n\
    \            maxcnt = res.get(words[i]);\n    }\n    foreach(word; res.keys)\n\
    \    {\n        if(res.get(word) != maxcnt)\n            res.remove(word);\n \
    \   }\n    return res;\n}\n/*\nGiven a string, representing a sequence of numbers\
    \ separated by spaces,\n    return the maximum difference between any pair of\
    \ consecutive numbers.\n    \n    Example:\n    >>> max_diff(\"7 1 2 8 4\")\n\
    \    7\n    >>> max_diff(\"-3 -3 -3 -3\")\n    0\n    >>> max_diff(\"2 5 3 2 3\"\
    )\n    3\n    >>> max_diff(\"\")\n    0\n*/\nlong max_diff(string numbers)\n{\n\
    \    import std.string;\n    import std.algorithm;\n    long res = 0;\n    if(numbers.empty)\n\
    \        return res;\n    int[] nums = numbers.split.map!(a => to!int(a)).array;\n\
    \    res = abs(nums[0] - nums[1]);\n    foreach(i, n; nums)\n    {\n        if(i\
    \ > 0)\n        {\n            long diff = abs(nums[i] - nums[i-1]);\n       \
    \     if(diff > res)\n                res = diff;\n       \nunittest\n{\n    alias\
    \ candidate = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfcmp8op2.d(86): Error: found `unittest` instead of statement

    /tmp/tmpfcmp8op2.d(131): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpfcmp8op2.d(131): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfcmp8op2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164348
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long max =\
    \ 0;\n    auto ret;\n    auto tbl = count(split(test));\n    foreach(k, v; tbl)\n\
    \    {\n        if(v == max)\n        {\n            ret[k] = v;\n        }\n\
    \        else if(v > max)\n        {\n            max = v;\n            ret =\
    \ null;\n            ret[k] = v;\n        }\n    }\n    return ret;\n}\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1qm_hskg.d(25): Error: no identifier for declarator `ret`

    /tmp/tmp1qm_hskg.d(25): Deprecation: use `{ }` for an empty statement, not `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1qm_hskg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164348
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ letters;\n    foreach(letter; test.split()) \n    {\n        if (letters.contains(letter))\n\
    \        {\n            letters[letter]++;\n        }\n        else\n        {\n\
    \            letters[letter] = 1;\n        }\n    }\n    if (letters.empty)\n\
    \    {\n        return ___null_dict___;\n    }\n    else\n    {\n        long\
    \ max = 0;\n        foreach(key, val; letters)\n        {\n            if (val\
    \ > max)\n            {\n                max = val;\n            }\n        }\n\
    \        long[string] result;\n        foreach(key, val; letters)\n        {\n\
    \            if (val == max)\n            {\n                result[key] = val;\n\
    \            }\n        }\n        return result;\n    }\n}\nunittest\n{\n   \
    \ alias candidate = histogram;\n\n{\n        auto result = candidate(\"a b b a\"\
    );\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpts75y699.d(25): Error: no property `split` for type `string`

    /tmp/tmpts75y699.d(36): Error: no property `empty` for type `long[string]`

    /tmp/tmpts75y699.d(38): Error: undefined identifier `___null_dict___`

    /tmp/tmpts75y699.d(58): Error: cannot implicitly convert expression `result` of
    type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpts75y699.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164349
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n    {\n        return result;\n    }\n \
    \   string[] words = test.split(\" \");\n    long[] counts = new long[words.length];\n\
    \    auto freqTable = new HashTable!(int, long);\n    auto maxFreq = 0;\n    foreach\
    \ (i, word; words)\n    {\n        long value = counts[i] = to!long(freqTable.get(word,\
    \ 0L)) + 1;\n        freqTable[word] = value;\n        if (value > maxFreq)\n\
    \        {\n            maxFreq = value;\n        }\n    }\n    if (maxFreq !=\
    \ 0)\n    {\n        result = typeof(result)();\n        foreach (i, word; words)\n\
    \        {\n            if (counts[i] == maxFreq)\n            {\n           \
    \     result[word] = maxFreq;\n            }\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpese42rhm.d(29): Error: no property `split` for type `string`

    /tmp/tmpese42rhm.d(31): Error: template instance `HashTable!(int, long)` template
    `HashTable` is not defined

    /tmp/tmpese42rhm.d(35): Error: template instance `to!long` template `to` is not
    defined, did you mean No?

    /tmp/tmpese42rhm.d(39): Error: cannot implicitly convert expression `value` of
    type `long` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpese42rhm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164349
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    if (test.empty)\
    \ return typeof(return).init;\n    string[] splitTest = test.split();\n    int[]\
    \ occurance = splitTest.occurance;\n    int maxVal = occurance.max;\n    string[]\
    \ keys = splitTest.dup;\n    keys.removeDuplicates();\n    Nullable!(long[string])\
    \ output = typeof(return).init;\n    foreach(i, key; keys)\n    {\n        if\
    \ (occurance[i] == maxVal)\n        {\n            output[key] = maxVal;\n   \
    \     }\n    }\n    return output;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv3esjq9l.d(24): Error: no property `empty` for type `string`

    /tmp/tmpv3esjq9l.d(25): Error: no property `split` for type `string`

    /tmp/tmpv3esjq9l.d(26): Error: no property `occurance` for type `string[]`

    /tmp/tmpv3esjq9l.d(27): Error: no property `max` for type `int[]`

    /tmp/tmpv3esjq9l.d(29): Error: no property `removeDuplicates` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv3esjq9l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164349
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    \n    Nullable!(long[string])\
    \ nullable_histogram;\n    long[string] histogram;\n    char[] test_char_arr =\
    \ test.to!char[];\n    int max_occurrences = 0;\n    for(int i = 0; i < test_char_arr.length;\
    \ i++) \n    {\n        if(test_char_arr[i] == ' ')\n            continue;\n \
    \       string current_letter = test_char_arr[i].to!string;\n        if(histogram.contains(current_letter))\n\
    \        {\n            histogram[current_letter]++;\n        }\n        else\n\
    \        {\n            histogram[current_letter] = 1;\n        }\n        if(histogram[current_letter]\
    \ > max_occurrences)\n        {\n            max_occurrences = histogram[current_letter];\n\
    \        }\n    }\n    nullable_histogram = new Nullable!(long[string])();\n \
    \   if(max_occurrences == 0)\n    {\n        nullable_histogram.nullify();\n \
    \   }\n    else\n    {\n        nullable_histogram.value = new long[string];\n\
    \        for(int i = 0; i < test_char_arr.length; i++) \n        {\n         \
    \   if(test_char_arr[i] == ' ')\n                continue;\n            string\
    \ current_letter = test_char_arr[i].to!string;\n            if(histogram[current_letter]\
    \ == max_occurrences)\n            {\n                nullable_histogram.value[current_letter]\
    \ = histogram[current_letter];\n            }\n        }\n    }\n    return nullable_histogram;\n\
    }\n/*\nGiven a nonempty array of integers, return the maximum sum that can be\
    \ obtained by\n    summing exactly 2 elements in the array.\n    Example:\n  \
    \  >>> maxSum([2, 4, 6, 2, 5])\n    11\n    >>> maxSum([5, 1, 1, 5])\n    10\n\
    \    >>> maxSum([0, 1, 0, 0, 1])\n    1\n    >>> maxSum([2, 3, 5,\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3fdn7xpp.d(68): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3fdn7xpp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164348
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    if (test.empty)\n\
    \        return null;\n    // create a histogram\n    auto h = [string: long]().init;\n\
    \    foreach (letter; test.split)\n    {\n        h[letter]++;\n    }\n    //\
    \ find the max\n    long max = h.values.front;\n    foreach (val; h.values[1..$])\n\
    \    {\n        if (val > max)\n            max = val;\n    }\n    // return\n\
    \    return h.byValue.retro.retro[max].byKey.nullable;\n}\nunittest\n{\n    alias\
    \ candidate = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphe_77ral.d(27): Error: found `]` when expecting `.` following long

    /tmp/tmphe_77ral.d(27): Error: found `(` when expecting identifier following `long`.

    /tmp/tmphe_77ral.d(27): Error: found `)` when expecting `,`

    /tmp/tmphe_77ral.d(27): Error: `key:value` expected for associative array literal

    /tmp/tmphe_77ral.d(27): Error: found `;` when expecting `,`

    /tmp/tmphe_77ral.d(28): Error: expression expected, not `foreach`

    /tmp/tmphe_77ral.d(28): Error: found `;` when expecting `,`

    /tmp/tmphe_77ral.d(29): Error: found `{` when expecting `,`

    /tmp/tmphe_77ral.d(30): Error: found `;` when expecting `,`

    /tmp/tmphe_77ral.d(31): Error: expression expected, not `}`

    /tmp/tmphe_77ral.d(33): Error: found `long` when expecting `,`

    /tmp/tmphe_77ral.d(33): Error: found `;` when expecting `,`

    /tmp/tmphe_77ral.d(34): Error: expression expected, not `foreach`

    /tmp/tmphe_77ral.d(34): Error: found `;` when expecting `,`

    /tmp/tmphe_77ral.d(35): Error: found `{` when expecting `,`

    /tmp/tmphe_77ral.d(36): Error: expression expec'
  stdout: ''
  timestamp: 1660164348
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    static int[]\
    \ _asciiTable = [char.init]()\n        .assumeUnique.save.dup(char.max);\n   \
    \ int[] occurences = _asciiTable.dup;\n    foreach(c; test)\n    {\n        occurences[c]++;\n\
    \    }\n    Nullable!(long[string]) result = Nullable.init;\n    long highestOccurence\
    \ = 0;\n    foreach(c; occurences)\n    {\n        if(c > highestOccurence)\n\
    \        {\n            highestOccurence = c;\n        }\n    }\n    if(highestOccurence\
    \ != 0)\n    {\n        result = typeof(result).init;\n        foreach(i, c; occurences)\n\
    \        {\n            if(c == highestOccurence)\n            {\n           \
    \     result.get!(string).put(cast(string)i, c);\n            }\n        }\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n\
    {\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9gyd1cat.d(24): Error: function expected before `()`, not `[''\xff'']`
    of type `char[]`

    /tmp/tmp9gyd1cat.d(31): Error: template `Nullable(T)` does not have property `init`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(2852):
    Error: incompatible types for `(fallback) : (this._value)`: `inout(string)` and
    `inout(long[string])`

    /tmp/tmp9gyd1cat.d(47): Error: template instance `std.typecons.Nullable!(long[string]).Nullable.get!string`
    error instantiating

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9gyd1cat.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164349
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ test_dict;\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto\
    \ result = candidate(\"a b b a\");\n        assert(!result.isNull && result.get\
    \ == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c\
    \ a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuj4v3hhf.d(25): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuj4v3hhf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164348
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    import std.algorithm.searching\
    \ : count;\n    import std.array : array;\n    import std.typecons : Nullable;\n\
    \    import std.uni : isAlpha;\n    test = test.strip();\n    if(test.length==0)\n\
    \        return null;\n    long[] result = test.split(new string(\" \")).filter!(s\
    \ => s.length > 0).\n        map!(s => s.filter!(c => c.isAlpha).length).array();\n\
    \    long max = result.max();\n    if(result.count(max) > 1)\n        return new\
    \ typeof(result).init.idup;\n    return result.assocArray.retro;\n}\n/*\n    string\
    \ test = test.strip();\n    if(test.length==0)\n        return ___null_dict___;\n\
    \    long[] result = test.split(new string(\" \")).filter!(s => s.length > 0).\n\
    \        map!(s => s.filter!(c => c.isAlpha).length).array();\n    long max =\
    \ result.max();\n    if(result.count(max) > 1)\n        return result.assocArray.retro;\n\
    \    return result.assocArray.retro;\n*/\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxeldgbe0.d(28): Error: no property `strip` for type `string`

    /tmp/tmpxeldgbe0.d(31): Error: no property `split` for type `string`

    /tmp/tmpxeldgbe0.d(33): Error: no property `max` for type `long[]`

    /tmp/tmpxeldgbe0.d(35): Error: `typeof(result).init.idup` is used as a type

    /tmp/tmpxeldgbe0.d(36): Error: no property `assocArray` for type `long[]`

    /tmp/tmpxeldgbe0.d(30): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxeldgbe0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164349
