name: HumanEval_45_triangle_area
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\nGiven length of a side and high\
  \ return area for a triangle.\n    >>> triangle_area(5L, 3L)\n    7.5\n    \n*/\n\
  float triangle_area(long a, long h) \n"
tests: "unittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(5L,\
  \ 3L) == 7.5);\n    assert(candidate(2L, 2L) == 2.0);\n    assert(candidate(10L,\
  \ 8L) == 40.0);\n}\nvoid main(){}"
completions: ["{\n    return a * h / 2.0;\n}\n/*\nGiven two sides of a triangle, return\
    \ the length of its third side.\n    >>> pythagorean_triple(4L, 5L)\n    3\n*/\n\
    long pythagorean_triple(long a, long b) \n{\n    //return std.math.sqrt(std.math.pow(a,\
    \ 2) + std.math.pow(b, 2));\n    return std.math.sqrt(a*a + b*b);\n}\n/*\nGiven\
    \ two sides of a triangle, return its area.\n    >>> triangle_area2(3L, 4L)\n\
    \    6.0\n*/\nfloat triangle_area2(long a, long b) \n{\n    long c = pythagorean_triple(a,\
    \ b);\n    return triangle_area(a, c);\n}\n/*\nGiven length of a side and high\
    \ return area for a trapezoid.\n    >>> trapezoid_area(1L, 4L, 5L)\n    7.0\n\
    */\nfloat trapezoid_area(long a, long b, long h) \n{\n    return (a + b) * h /\
    \ 2.0;\n}\n/*\nGiven radius of a circle return its area.\n    >>> circle_area(1.0)\n\
    \    3.141592653589793\n*/\nfloat circle_area(float r) \n{\n    //return 3.141592653589793\
    \ * pow(r, 2);\n    return 3.141592653589793 * r * r;\n}\n/*\nGiven radius of\
    \ a circle return its perimeter.\n    >>> circle_perimeter(2.0)\n    12.566370614359172\n\
    */\nfloat circle_perimeter(float r) \n{\n    //return 2 * 3.141592653589793 *\
    \ r;\n    return 2 * 3.141592653589793 * r;\n}\n/*\nGiven length of a side of\
    \ square return its area.\n    >>> square_area(2L)\n    4\n*/\nlong square_area(long\
    \ a) \n{\n    return a * a;\n}\n/*\nGiven length", "{\n    float result;\n   \
    \ if(a <= 0L || h <= 0L)\n    {\n        throw new InvalidInput(\"Length or height\
    \ should be greater than 0\");\n    }\n    result = (a * h) / 2.0;\n    return\
    \ result;\n}\n/*\nGiven length of the sides of a right triangle return a tuple\
    \ (hypotenuse, area).\n    >>> right_triangle(6L, 8L)\n    (10.0, 24.0)\n*/\n\
    alias Triangle = Tuple!(float, float);\nTriangle right_triangle(long a, long b)\n\
    {\n    Triangle result;\n    if(a <= 0L || b <= 0L)\n    {\n        throw new\
    \ InvalidInput(\"Length of sides should be greater than 0\");\n    }\n    result[0]\
    \ = sqrt(a * a + b * b);\n    result[1] = triangle_area(a, b);\n    return result;\n\
    }", "{\n    return (a * h) / 2.0;\n}", "{\n    float s = a * h / 2.0f;\n    return\
    \ s;\n}\n/*\nGiven length of a side of a cube return volume of the cube.\n   \
    \ >>> cube_volume(5L)\n    125\n*/\nlong cube_volume(long a) \n{\n    long v =\
    \ a ^^ 3;\n    return v;\n}\n/*\nGiven length of a side of a cylinder and height\
    \ of a cylinder return volume of the cylinder.\n    >>> cylinder_volume(5L, 4L)\n\
    \    157.07963267948966\n*/\nfloat cylinder_volume(long r, long h) \n{\n    auto\
    \ vol = pi * r ^^ 2 * h;\n    return vol;\n}\n/*\nGiven length of a side and height\
    \ of a prism return volume of the prism.\n    >>> prism_volume(5L, 3L)\n    75\n\
    */\nlong prism_volume(long a, long h) \n{\n    long v = a ^^ 2 * h;\n    return\
    \ v;\n}\n/*\nGiven the radius of a sphere return its volume.\n    >>> sphere_volume(5L)\n\
    \    523.5987755982989\n*/\nfloat sphere_volume(long r) \n{\n    auto v = 4.0\
    \ / 3.0 * pi * r ^^ 3;\n    return v;\n}\n/*\nGiven the radius of a circle return\
    \ its area.\n    >>> circle_area(5L)\n    78.53981633974483\n*/\nfloat circle_area(long\
    \ r) \n{\n    float a = pi * r ^^ 2;\n    return a;\n}\n/*\nGiven two integers\
    \ return greatest common divisor.\n    >>> gcd(42L, 56L)\n    14\n*/\nlong gcd(long\
    \ a, long b) \n{\n    auto gcd_ = std.math.gcd(a, b);\n    return gcd_;\n}\n/*\n\
    Given two integers return least common multiple.\n    >>> lcm(4L, 6L)\n    12\n\
    */\nlong lcm(long a, long b) \n{\n    auto lcm_ = a * b / std.math.gcd(a", "{\n\
    \    return ((float) a * h) / 2;\n}", "{\n    return 0.5 * a * h;\n}\n/*\nGiven\
    \ a radius return circumference for a circle.\n    >>> circle_circumference(2.0)\n\
    \    12.566370614359172\n*/\nfloat circle_circumference(double r) \n{\n    return\
    \ 2 * pi * r;\n}\n/*\nGiven a radius return area for a circle.\n    >>> circle_area(2.0)\n\
    \    12.566370614359172\n*/\nfloat circle_area(double r) \n{\n    return pi *\
    \ r * r;\n}\n/*\nGiven a radius return volume for a sphere.\n    >>> sphere_volume(2.0)\n\
    \    33.510321638291124\n*/\nfloat sphere_volume(double r) \n{\n    return 4.0/3.0\
    \ * pi * r * r * r;\n}\n/*\nGiven a radius return surface area for a sphere.\n\
    \    >>> sphere_surface_area(2.0)\n    50.26548245743669\n*/\nfloat sphere_surface_area(double\
    \ r) \n{\n    return 4 * pi * r * r;\n}\n/*\nGiven length of the 3 sides of a\
    \ triangle return the area of the triangle.\n    >>> herons_formula(3L, 4L, 5L)\n\
    \    6.0\n*/\nfloat herons_formula(long a, long b, long c) \n{\n    double s =\
    \ (a + b + c) / 2.0;\n    return sqrt(s * (s - a) * (s - b) * (s - c));\n}\n/*\n\
    Given length of the 3 sides of a triangle check if it's a right angle triangle.\n\
    \    >>> pythagoras(3L, 4L, 5L)\n    true\n*/", "{\n\treturn float(a * h) / 2.0;\n\
    }", "{\n    return a * h / 2.0;\n}\n/*\nGiven length of 3 sides return area for\
    \ a triangle.\n    >>> triangle_area_by_sides(3L, 4L, 5L)\n    6.0\n    \n*/\n\
    float triangle_area_by_sides(long a, long b, long c) \n{\n    float s = (a + b\
    \ + c) / 2.0;\n    return sqrt(s * (s - a) * (s - b) * (s - c));\n}", "{\n   \
    \ return (float) (a * h) / 2;\n}\n/*\nGiven list of numbers and a number p, return\
    \ the list of numbers multiplied by p.", "{\n\treturn float(a) * float(h) / 2.0;\n\
    }\n/*\nGiven length of 2 sides and angle between them return area for a triangle.\n\
    \    >>> triangle_area_by_angles(5L, 5L, 60L)\n    10.825317\n*/\nfloat triangle_area_by_angles(long\
    \ a, long b, long angle)\n{\n\treturn triangle_area(a, b) * sin(angle / 2);\n\
    }\n/*\nGiven length of a side, return area for a square.\n    >>> square_area(5L)\n\
    \    25\n*/\nlong square_area(long side)\n{\n\treturn side * side;\n}\n/*\nGiven\
    \ length of a side and high return area for a rectangle.\n    >>> rectangle_area(5L,\
    \ 3L)\n    15\n*/\nlong rectangle_area(long a, long b)\n{\n\treturn a * b;\n}\n\
    /*\nGiven length of a side and radius return area for a rhombus.\n    >>> rhombus_area(5L,\
    \ 3L)\n    15\n*/\nlong rhombus_area(long a, long r)\n{\n\treturn rectangle_area(a,\
    \ r);\n}\n/*\nGiven length of a side and high return area for a trapezoid.\n \
    \   >>> trapezoid_area(5L, 3L, 2L)\n    9\n*/\nlong trapezoid_area(long a, long\
    \ b, long h)\n{\n\treturn (a + b) * h / 2;\n}\n/*\nGiven length of a side and\
    \ radius return area for a parallelogram.\n    >>> parallelogram_area(5L, 3L)\n\
    \    15\n*/\nlong parallelogram_area(long a, long r)\n{\n\treturn rectangle_area(a,\
    \ r);\n}\n/*\nGiven length of side return area for a regular pentagon.\n    >>>\
    \ regular_pentagon_area(5L)\n    43.30127\n*/\nfloat regular_pentagon_area(long\
    \ a)\n{\n\treturn a * a * 1.7204774;\n}\n/*\nGiven length of side return area\
    \ for a regular hexagon.\n    >>> regular_hexagon", "{\n    return 1.0/2.0 * a\
    \ * h;\n}", "{\n    return (float)a * h / 2;\n}", "{\n\treturn (a*h)/2;\n}", "{\n\
    \    float area = a * h * 0.5;\n    return area;\n}\n/*\nGiven length of a side\
    \ and high return area for a rectangle.\n    >>> rectangle_area(5L, 3L)\n    15\n\
    */\nfloat rectangle_area(long a, long b) \n{\n    float area = a * b;\n    return\
    \ area;\n}\n/*\nGiven length of a side and high return area for a quadrangle.\n\
    \    >>> quadrangle_area(5L, 3L)\n    7.5\n*/\nfloat quadrangle_area(long a, long\
    \ b) \n{\n    float area = a * b;\n    return area;\n}\n/*\nGiven radius return\
    \ area for a circle.\n    >>> circle_area(5L)\n    78.5398\n*/\nfloat circle_area(long\
    \ r) \n{\n    float area = PI * r * r;\n    return area;\n}\n/*\nGiven length\
    \ of a side and high return area for a paralelogram.\n    >>> paralelogram_area(5L,\
    \ 3L)\n    15\n*/\nfloat paralelogram_area(long a, long h) \n{\n    float area\
    \ = a * h;\n    return area;\n}\n/*\nGiven length of a side return area for a\
    \ square.\n    >>> square_area(5L)\n    25\n*/\nfloat square_area(long a) \n{\n\
    \    float area = a * a;\n    return area;\n}\n/*\nGiven length of a side return\
    \ area for a hexagon.\n    >>> hexagon_area(5L)\n    64.9519\n*/\nfloat hexagon_area(long\
    \ a) \n{\n    float area = 6 * a * a * sqrt(3) / 4;\n    return area;\n}\n/*\n\
    Given height and radius return area for a cylinder.\n    >>> cylinder_area(5L,\
    \ 3L)\n    141.3716\n*/\nfloat cylinder_area(long h, long r) \n{\n    float area\
    \ = 2 * PI * r * h + 2 * PI * r * r;\n    return area;\n}\n/*\nGiven length of\
    \ a side and radius return area", "    in {\n        assert(a > 0L);\n       \
    \ assert(h > 0L);\n    }\n    out (result) {\n        assert(result >= 0.f);\n\
    \    }\n    body {\n        float fahr, celsius;\n        \n        fahr = float(a)\
    \ * float(h) / 2.f;\n        \n        return fahr;\n    }", "{\n    return float(a*h)/2;\n\
    }", "{\n    return (float)a * h / 2;\n}\n/*\nGiven two points in 2D space return\
    \ distance between them.", "{\n    return a * h / 2.0;\n}\n/*\nReturn expected\
    \ value of a lognormal random variable with\nscale parameter mu and shape parameter\
    \ sigma.\n    >>> lognormal_mean(3.0, 4.0)\n    5.463680559536612\n*/\ndouble\
    \ lognormal_mean(double mu, double sigma) \n{\n    return exp(mu + 0.5 * sigma\
    \ * sigma);\n}\n/*\nReturn maximum length of numbers in a list,\nignoring non-numeric\
    \ values.\n    >>> max_length([1, 3, 5, 7])\n    1\n    >>> max_length([1, 3,\
    \ 5, 7, 101])\n    3\n    >>> max_length([1, 3, 5, '7'])\n    1\n*/\nlong max_length(string[]\
    \ xs) \n{\n    return xs.map!(x => \n        x.to!long).filter!(isNaN).reduce!max.stringof.length;\n\
    }\n/*\nReturn a tuple of mean and median for a list of numbers.\n    >>> mean_median([1,\
    \ 3, 5, 7])\n    (4, 4)\n    >>> mean_median([1, 3, 5, 7, 101])\n    (17.6, 5)\n\
    */\nTuple!(double, double) mean_median(long[] xs) \n{\n    double mean;\n    double\
    \ median;\n    return tuple(mean, median);\n}\n/*\nReturn standard deviation of\
    \ a list of numbers.\n    >>> standard_deviation([1, 3, 5, 7])\n    2.581988897471611\n\
    \    >>> standard_deviation([1, 3, 5, 7, 101])\n    48.596077783547644\n*/\ndouble\
    \ standard_deviation(long[] xs) \n{\n    return 0.0;\n}\n/*\nReturn inner product\
    \ of two vectors.\n    >>> inner_product([1, 2, 3], [4, 5, 6])\n    32\n*/\nlong\
    \ inner_product(long[] xs, long[] ys) \n{\n    return 0L;\n}\n/*\nTransform a\
    \ list", "{\n    return (float)a * h / 2;\n}", "{\n    return (a * h) / 2.0f;\n\
    }\n/*\nGiven radius return area for a circle.\n    >>> circle_area(2L)\n    12.566370964050293\n\
    */\nfloat circle_area(long r) \n{\n    return pi * r * r;\n}\n/*\nGiven length\
    \ return area for a square.\n    >>> square_area(5L)\n    25\n*/\nlong square_area(long\
    \ a) \n{\n    return a * a;\n}\n/*\nGiven length of the side and high return perimeter\
    \ for a triangle.\n    >>> triangle_perimeter(5L, 3L)\n    16\n*/\nlong triangle_perimeter(long\
    \ a, long h) \n{\n    return 2 * a + sqrt(2 * a * a - 2 * a * a * cos(pi / h));\n\
    }\n/*\nGiven radius return perimeter for a circle.\n    >>> circle_perimeter(2L)\n\
    \    12.566370964050293\n*/\nfloat circle_perimeter(long r) \n{\n    return 2\
    \ * pi * r;\n}\n/*\nGiven length return perimeter for a square.\n    >>> square_perimeter(5L)\n\
    \    20\n*/\nlong square_perimeter(long a) \n{\n    return 4 * a;\n}\n/*\nGiven\
    \ radius return volume for a circle.\n    >>> circle_volume(2L)\n    50.26548385620117\n\
    */\nfloat circle_volume(long r) \n{\n    return (4 * pi * r * r * r) / 3;\n}\n\
    /*\nGiven length return volume for a square.\n    >>> square_volume(5L)\n    125\n\
    */\nlong square_volume(long a) \n{\n    return a * a * a;\n}\n/*\nGiven length\
    \ of a side and high return volume for a triangle.\n    >>> triangle_volume(5L,\
    \ 3L)\n    25\n*/\nlong triangle_volume(long a, long h) \n{\n    return (a * h\
    \ * h) / 4;\n}\n/*\nGiven tuple with elements length of a side and high return\
    \ volume for a triangle.\n    >>> triangle_"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
