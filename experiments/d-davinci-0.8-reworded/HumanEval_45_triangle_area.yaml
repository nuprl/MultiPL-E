name: HumanEval_45_triangle_area
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\nGiven length of a side and high\
  \ return area for a triangle.\n    >>> triangle_area(5L, 3L)\n    7.5\n    \n*/\n\
  float triangle_area(long a, long h) \n"
tests: "unittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(5L,\
  \ 3L) == 7.5);\n    assert(candidate(2L, 2L) == 2.0);\n    assert(candidate(10L,\
  \ 8L) == 40.0);\n}\nvoid main(){}"
completions: ["{\n    return a * h / 2.0;\n}\n/*\nGiven two sides of a triangle, return\
    \ the length of its third side.\n    >>> pythagorean_triple(4L, 5L)\n    3\n*/\n\
    long pythagorean_triple(long a, long b) \n{\n    //return std.math.sqrt(std.math.pow(a,\
    \ 2) + std.math.pow(b, 2));\n    return std.math.sqrt(a*a + b*b);\n}\n/*\nGiven\
    \ two sides of a triangle, return its area.\n    >>> triangle_area2(3L, 4L)\n\
    \    6.0\n*/\nfloat triangle_area2(long a, long b) \n{\n    long c = pythagorean_triple(a,\
    \ b);\n    return triangle_area(a, c);\n}\n/*\nGiven length of a side and high\
    \ return area for a trapezoid.\n    >>> trapezoid_area(1L, 4L, 5L)\n    7.0\n\
    */\nfloat trapezoid_area(long a, long b, long h) \n{\n    return (a + b) * h /\
    \ 2.0;\n}\n/*\nGiven radius of a circle return its area.\n    >>> circle_area(1.0)\n\
    \    3.141592653589793\n*/\nfloat circle_area(float r) \n{\n    //return 3.141592653589793\
    \ * pow(r, 2);\n    return 3.141592653589793 * r * r;\n}\n/*\nGiven radius of\
    \ a circle return its perimeter.\n    >>> circle_perimeter(2.0)\n    12.566370614359172\n\
    */\nfloat circle_perimeter(float r) \n{\n    //return 2 * 3.141592653589793 *\
    \ r;\n    return 2 * 3.141592653589793 * r;\n}\n/*\nGiven length of a side of\
    \ square return its area.\n    >>> square_area(2L)\n    4\n*/\nlong square_area(long\
    \ a) \n{\n    return a * a;\n}\n/*\nGiven length", "{\n    float result;\n   \
    \ if(a <= 0L || h <= 0L)\n    {\n        throw new InvalidInput(\"Length or height\
    \ should be greater than 0\");\n    }\n    result = (a * h) / 2.0;\n    return\
    \ result;\n}\n/*\nGiven length of the sides of a right triangle return a tuple\
    \ (hypotenuse, area).\n    >>> right_triangle(6L, 8L)\n    (10.0, 24.0)\n*/\n\
    alias Triangle = Tuple!(float, float);\nTriangle right_triangle(long a, long b)\n\
    {\n    Triangle result;\n    if(a <= 0L || b <= 0L)\n    {\n        throw new\
    \ InvalidInput(\"Length of sides should be greater than 0\");\n    }\n    result[0]\
    \ = sqrt(a * a + b * b);\n    result[1] = triangle_area(a, b);\n    return result;\n\
    }", "{\n    return (a * h) / 2.0;\n}", "{\n    float s = a * h / 2.0f;\n    return\
    \ s;\n}\n/*\nGiven length of a side of a cube return volume of the cube.\n   \
    \ >>> cube_volume(5L)\n    125\n*/\nlong cube_volume(long a) \n{\n    long v =\
    \ a ^^ 3;\n    return v;\n}\n/*\nGiven length of a side of a cylinder and height\
    \ of a cylinder return volume of the cylinder.\n    >>> cylinder_volume(5L, 4L)\n\
    \    157.07963267948966\n*/\nfloat cylinder_volume(long r, long h) \n{\n    auto\
    \ vol = pi * r ^^ 2 * h;\n    return vol;\n}\n/*\nGiven length of a side and height\
    \ of a prism return volume of the prism.\n    >>> prism_volume(5L, 3L)\n    75\n\
    */\nlong prism_volume(long a, long h) \n{\n    long v = a ^^ 2 * h;\n    return\
    \ v;\n}\n/*\nGiven the radius of a sphere return its volume.\n    >>> sphere_volume(5L)\n\
    \    523.5987755982989\n*/\nfloat sphere_volume(long r) \n{\n    auto v = 4.0\
    \ / 3.0 * pi * r ^^ 3;\n    return v;\n}\n/*\nGiven the radius of a circle return\
    \ its area.\n    >>> circle_area(5L)\n    78.53981633974483\n*/\nfloat circle_area(long\
    \ r) \n{\n    float a = pi * r ^^ 2;\n    return a;\n}\n/*\nGiven two integers\
    \ return greatest common divisor.\n    >>> gcd(42L, 56L)\n    14\n*/\nlong gcd(long\
    \ a, long b) \n{\n    auto gcd_ = std.math.gcd(a, b);\n    return gcd_;\n}\n/*\n\
    Given two integers return least common multiple.\n    >>> lcm(4L, 6L)\n    12\n\
    */\nlong lcm(long a, long b) \n{\n    auto lcm_ = a * b / std.math.gcd(a", "{\n\
    \    return ((float) a * h) / 2;\n}", "{\n    return 0.5 * a * h;\n}\n/*\nGiven\
    \ a radius return circumference for a circle.\n    >>> circle_circumference(2.0)\n\
    \    12.566370614359172\n*/\nfloat circle_circumference(double r) \n{\n    return\
    \ 2 * pi * r;\n}\n/*\nGiven a radius return area for a circle.\n    >>> circle_area(2.0)\n\
    \    12.566370614359172\n*/\nfloat circle_area(double r) \n{\n    return pi *\
    \ r * r;\n}\n/*\nGiven a radius return volume for a sphere.\n    >>> sphere_volume(2.0)\n\
    \    33.510321638291124\n*/\nfloat sphere_volume(double r) \n{\n    return 4.0/3.0\
    \ * pi * r * r * r;\n}\n/*\nGiven a radius return surface area for a sphere.\n\
    \    >>> sphere_surface_area(2.0)\n    50.26548245743669\n*/\nfloat sphere_surface_area(double\
    \ r) \n{\n    return 4 * pi * r * r;\n}\n/*\nGiven length of the 3 sides of a\
    \ triangle return the area of the triangle.\n    >>> herons_formula(3L, 4L, 5L)\n\
    \    6.0\n*/\nfloat herons_formula(long a, long b, long c) \n{\n    double s =\
    \ (a + b + c) / 2.0;\n    return sqrt(s * (s - a) * (s - b) * (s - c));\n}\n/*\n\
    Given length of the 3 sides of a triangle check if it's a right angle triangle.\n\
    \    >>> pythagoras(3L, 4L, 5L)\n    true\n*/", "{\n\treturn float(a * h) / 2.0;\n\
    }", "{\n    return a * h / 2.0;\n}\n/*\nGiven length of 3 sides return area for\
    \ a triangle.\n    >>> triangle_area_by_sides(3L, 4L, 5L)\n    6.0\n    \n*/\n\
    float triangle_area_by_sides(long a, long b, long c) \n{\n    float s = (a + b\
    \ + c) / 2.0;\n    return sqrt(s * (s - a) * (s - b) * (s - c));\n}", "{\n   \
    \ return (float) (a * h) / 2;\n}\n/*\nGiven list of numbers and a number p, return\
    \ the list of numbers multiplied by p.", "{\n\treturn float(a) * float(h) / 2.0;\n\
    }\n/*\nGiven length of 2 sides and angle between them return area for a triangle.\n\
    \    >>> triangle_area_by_angles(5L, 5L, 60L)\n    10.825317\n*/\nfloat triangle_area_by_angles(long\
    \ a, long b, long angle)\n{\n\treturn triangle_area(a, b) * sin(angle / 2);\n\
    }\n/*\nGiven length of a side, return area for a square.\n    >>> square_area(5L)\n\
    \    25\n*/\nlong square_area(long side)\n{\n\treturn side * side;\n}\n/*\nGiven\
    \ length of a side and high return area for a rectangle.\n    >>> rectangle_area(5L,\
    \ 3L)\n    15\n*/\nlong rectangle_area(long a, long b)\n{\n\treturn a * b;\n}\n\
    /*\nGiven length of a side and radius return area for a rhombus.\n    >>> rhombus_area(5L,\
    \ 3L)\n    15\n*/\nlong rhombus_area(long a, long r)\n{\n\treturn rectangle_area(a,\
    \ r);\n}\n/*\nGiven length of a side and high return area for a trapezoid.\n \
    \   >>> trapezoid_area(5L, 3L, 2L)\n    9\n*/\nlong trapezoid_area(long a, long\
    \ b, long h)\n{\n\treturn (a + b) * h / 2;\n}\n/*\nGiven length of a side and\
    \ radius return area for a parallelogram.\n    >>> parallelogram_area(5L, 3L)\n\
    \    15\n*/\nlong parallelogram_area(long a, long r)\n{\n\treturn rectangle_area(a,\
    \ r);\n}\n/*\nGiven length of side return area for a regular pentagon.\n    >>>\
    \ regular_pentagon_area(5L)\n    43.30127\n*/\nfloat regular_pentagon_area(long\
    \ a)\n{\n\treturn a * a * 1.7204774;\n}\n/*\nGiven length of side return area\
    \ for a regular hexagon.\n    >>> regular_hexagon", "{\n    return 1.0/2.0 * a\
    \ * h;\n}", "{\n    return (float)a * h / 2;\n}", "{\n\treturn (a*h)/2;\n}", "{\n\
    \    float area = a * h * 0.5;\n    return area;\n}\n/*\nGiven length of a side\
    \ and high return area for a rectangle.\n    >>> rectangle_area(5L, 3L)\n    15\n\
    */\nfloat rectangle_area(long a, long b) \n{\n    float area = a * b;\n    return\
    \ area;\n}\n/*\nGiven length of a side and high return area for a quadrangle.\n\
    \    >>> quadrangle_area(5L, 3L)\n    7.5\n*/\nfloat quadrangle_area(long a, long\
    \ b) \n{\n    float area = a * b;\n    return area;\n}\n/*\nGiven radius return\
    \ area for a circle.\n    >>> circle_area(5L)\n    78.5398\n*/\nfloat circle_area(long\
    \ r) \n{\n    float area = PI * r * r;\n    return area;\n}\n/*\nGiven length\
    \ of a side and high return area for a paralelogram.\n    >>> paralelogram_area(5L,\
    \ 3L)\n    15\n*/\nfloat paralelogram_area(long a, long h) \n{\n    float area\
    \ = a * h;\n    return area;\n}\n/*\nGiven length of a side return area for a\
    \ square.\n    >>> square_area(5L)\n    25\n*/\nfloat square_area(long a) \n{\n\
    \    float area = a * a;\n    return area;\n}\n/*\nGiven length of a side return\
    \ area for a hexagon.\n    >>> hexagon_area(5L)\n    64.9519\n*/\nfloat hexagon_area(long\
    \ a) \n{\n    float area = 6 * a * a * sqrt(3) / 4;\n    return area;\n}\n/*\n\
    Given height and radius return area for a cylinder.\n    >>> cylinder_area(5L,\
    \ 3L)\n    141.3716\n*/\nfloat cylinder_area(long h, long r) \n{\n    float area\
    \ = 2 * PI * r * h + 2 * PI * r * r;\n    return area;\n}\n/*\nGiven length of\
    \ a side and radius return area", "    in {\n        assert(a > 0L);\n       \
    \ assert(h > 0L);\n    }\n    out (result) {\n        assert(result >= 0.f);\n\
    \    }\n    body {\n        float fahr, celsius;\n        \n        fahr = float(a)\
    \ * float(h) / 2.f;\n        \n        return fahr;\n    }", "{\n    return float(a*h)/2;\n\
    }", "{\n    return (float)a * h / 2;\n}\n/*\nGiven two points in 2D space return\
    \ distance between them.", "{\n    return a * h / 2.0;\n}\n/*\nReturn expected\
    \ value of a lognormal random variable with\nscale parameter mu and shape parameter\
    \ sigma.\n    >>> lognormal_mean(3.0, 4.0)\n    5.463680559536612\n*/\ndouble\
    \ lognormal_mean(double mu, double sigma) \n{\n    return exp(mu + 0.5 * sigma\
    \ * sigma);\n}\n/*\nReturn maximum length of numbers in a list,\nignoring non-numeric\
    \ values.\n    >>> max_length([1, 3, 5, 7])\n    1\n    >>> max_length([1, 3,\
    \ 5, 7, 101])\n    3\n    >>> max_length([1, 3, 5, '7'])\n    1\n*/\nlong max_length(string[]\
    \ xs) \n{\n    return xs.map!(x => \n        x.to!long).filter!(isNaN).reduce!max.stringof.length;\n\
    }\n/*\nReturn a tuple of mean and median for a list of numbers.\n    >>> mean_median([1,\
    \ 3, 5, 7])\n    (4, 4)\n    >>> mean_median([1, 3, 5, 7, 101])\n    (17.6, 5)\n\
    */\nTuple!(double, double) mean_median(long[] xs) \n{\n    double mean;\n    double\
    \ median;\n    return tuple(mean, median);\n}\n/*\nReturn standard deviation of\
    \ a list of numbers.\n    >>> standard_deviation([1, 3, 5, 7])\n    2.581988897471611\n\
    \    >>> standard_deviation([1, 3, 5, 7, 101])\n    48.596077783547644\n*/\ndouble\
    \ standard_deviation(long[] xs) \n{\n    return 0.0;\n}\n/*\nReturn inner product\
    \ of two vectors.\n    >>> inner_product([1, 2, 3], [4, 5, 6])\n    32\n*/\nlong\
    \ inner_product(long[] xs, long[] ys) \n{\n    return 0L;\n}\n/*\nTransform a\
    \ list", "{\n    return (float)a * h / 2;\n}", "{\n    return (a * h) / 2.0f;\n\
    }\n/*\nGiven radius return area for a circle.\n    >>> circle_area(2L)\n    12.566370964050293\n\
    */\nfloat circle_area(long r) \n{\n    return pi * r * r;\n}\n/*\nGiven length\
    \ return area for a square.\n    >>> square_area(5L)\n    25\n*/\nlong square_area(long\
    \ a) \n{\n    return a * a;\n}\n/*\nGiven length of the side and high return perimeter\
    \ for a triangle.\n    >>> triangle_perimeter(5L, 3L)\n    16\n*/\nlong triangle_perimeter(long\
    \ a, long h) \n{\n    return 2 * a + sqrt(2 * a * a - 2 * a * a * cos(pi / h));\n\
    }\n/*\nGiven radius return perimeter for a circle.\n    >>> circle_perimeter(2L)\n\
    \    12.566370964050293\n*/\nfloat circle_perimeter(long r) \n{\n    return 2\
    \ * pi * r;\n}\n/*\nGiven length return perimeter for a square.\n    >>> square_perimeter(5L)\n\
    \    20\n*/\nlong square_perimeter(long a) \n{\n    return 4 * a;\n}\n/*\nGiven\
    \ radius return volume for a circle.\n    >>> circle_volume(2L)\n    50.26548385620117\n\
    */\nfloat circle_volume(long r) \n{\n    return (4 * pi * r * r * r) / 3;\n}\n\
    /*\nGiven length return volume for a square.\n    >>> square_volume(5L)\n    125\n\
    */\nlong square_volume(long a) \n{\n    return a * a * a;\n}\n/*\nGiven length\
    \ of a side and high return volume for a triangle.\n    >>> triangle_volume(5L,\
    \ 3L)\n    25\n*/\nlong triangle_volume(long a, long h) \n{\n    return (a * h\
    \ * h) / 4;\n}\n/*\nGiven tuple with elements length of a side and high return\
    \ volume for a triangle.\n    >>> triangle_", "{\n    return float(a * h) / 2.0;\n\
    }", "{\n\tfloat ar = 0.5 * a * h;\n\treturn ar;\n}", "{\n    return a * h / 2.0;\n\
    }\n/*\nCalculate a pair of intersecting segments.\n    >>> intersecting_segments({{1L,\
    \ 1L}, {3L, 1L}}, {{3L, 0L}, {3L, 2L}})\n    {{3L, 1L}, {3L, 1L}}\n*/\nTuple!(long,\
    \ long, long, long) intersecting_segments(Tuple!(long, long, long, long) segment1,\n\
    \                                                     Tuple!(long, long, long,\
    \ long) segment2) \n{\n    assert(segment1[0] <= segment1[2]);\n    assert(segment2[0]\
    \ <= segment2[2]);\n    assert(segment1[1] <= segment1[3]);\n    assert(segment2[1]\
    \ <= segment2[3]);\n    long min_x = max(segment1[0], segment2[0]);\n    long\
    \ max_x = min(segment1[2], segment2[2]);\n    long min_y = max(segment1[1], segment2[1]);\n\
    \    long max_y = min(segment1[3], segment2[3]);\n    if (min_x < max_x && min_y\
    \ < max_y)\n        return tuple(min_x, min_y, max_x, max_y);\n    else\n    \
    \    return tuple(0L, 0L, 0L, 0L);\n}\n/*\nGiven a list of integers output the\
    \ count of even numbers.\n    >>> even_count([1, 2, 4, 5, 6])\n    3\n*/\nsize_t\
    \ even_count(in int[] values) \n{\n    size_t count = 0;\n    foreach (i; values)\n\
    \        if (i % 2 == 0)\n            count++;\n    return count;\n}\n/*\nGiven\
    \ a list of integers output the count of even numbers.\n    >>> even_count_2([1,\
    \ 2, 4, 5, 6])\n    3\n*/\nsize_t even_count_2(in int[] values) \n{\n    size_t\
    \ count = 0;\n    foreach (i", "{\n    return (float)a * h / 2;\n}", "{\n    return\
    \ (float)a*h/2.0;\n}\n/*\nGiven length of a side, return area for a square.\n\
    \    >>> square_area(5L)\n    25\n*/\nlong square_area(long a)\n{\n    return\
    \ a*a;\n}\n/*\nGiven length of a side, return area for a pentagon.\n    >>> pentagon_area(5L)\n\
    \    55\n*/\nlong pentagon_area(long a)\n{\n    return a*a*5L/4L;\n}\n/*\nGiven\
    \ length of a side, return area for a hexagon.\n    >>> hexagon_area(5L)\n   \
    \ 65\n*/\nlong hexagon_area(long a)\n{\n    return a*a*3L/2L;\n}\n/*\nGiven length\
    \ of a side, return area for a octagon.\n    >>> octagon_area(5L)\n    130\n*/\n\
    long octagon_area(long a)\n{\n    return a*a*4L;\n}\n/*\nGiven radius of a circle,\
    \ return area.\n    >>> circle_area(5L)\n    78.5\n*/\nfloat circle_area(long\
    \ r)\n{\n    return (float)PI*r*r;\n}\n/*\nGiven one side, return area for an\
    \ equilateral triangle.\n    >>> equilateral_triangle_area(5L)\n    10.8253\n\
    */\nfloat equilateral_triangle_area(long a)\n{\n    return float(sqrt(3.0)*a*a/4.0);\n\
    }\n/*\nGiven one side, return area for a right triangle.\n    >>> right_triangle_area(5L)\n\
    \    12.5\n*/\nfloat right_triangle_area(long a)\n{\n    return float(a*a/2.0);\n\
    }\n/*\nGiven one side, return area for a regular n-gon.\n    >>> regular_ngon_area(4L,\
    \ 4L)\n    16\n*/\nlong regular_ngon_area(long a, long n)\n{\n    return a*a*n/4L*tan(PI/n);\n\
    }\n/*\nGiven a", "{\n    float half = (float)a/2;\n    float ret = half * h;\n\
    \    return ret;\n}\n/*\nGiven length of a side, return area for a square.\n \
    \   >>> square_area(5L)\n    25\n*/", "    in(\n        assert(a > 0L),\n    \
    \    assert(h > 0L)\n    )\n    out(\n        assert(result > 0.0)\n    )\n{\n\
    \    return cast(float) a * h / 2.0;\n}", "{\n    // TODO: triangle_area function\n\
    \    return a*h/2;\n}", "{\n    return a * h / 2.0;\n}\n/*\nGiven length of a\
    \ side and high return area for a rectangle.\n    >>> rectangle_area(2L, 3L)\n\
    \    6.0\n*/\nfloat rectangle_area(long a, long b) \n{\n    return a * b;\n}\n\
    /*\nGiven length of a side return area for a square.\n    >>> square_area(2L)\n\
    \    4.0\n*/\nfloat square_area(long a) \n{\n    return a * a;\n}\n/*\nGiven length\
    \ of a diagonal return area for a rhombus.\n    >>> rhombus_area(2L, 1L)\n   \
    \ 1.0\n*/\nfloat rhombus_area(long a, long h) \n{\n    return a * h / 2.0;\n}\n\
    /*\nGiven length of two sides return area for a trapezoid.\n    >>> trapezoid_area(2L,\
    \ 3L, 4L)\n    7.0\n*/\nfloat trapezoid_area(long a, long b, long h) \n{\n   \
    \ return (a + b) * h / 2.0;\n}\n/*\nGiven length of a radius return area for a\
    \ circle.\n    >>> circle_area(3L)\n    28.274333882308138\n*/\nfloat circle_area(long\
    \ r) \n{\n    return pi * r * r;\n}\n/*\nGiven length of a diagonal return area\
    \ for a parallelogram.\n    >>> parallelogram_area(3L, 4L)\n    6.0\n*/\nfloat\
    \ parallelogram_area(long a, long h) \n{\n    return a * h;\n}\n/*\nGiven length\
    \ of a side return area for a hexagon.\n    >>> hexagon_area(3L)\n    15.588457268119896\n\
    */\nfloat hexagon_area(long a) \n{\n    return a * a * 3 * sqrt(3.0) / 2.0;\n\
    }\n/*\nGiven length of a side return area for a pentagon.\n    >>> pentagon_area(3L)\n\
    \    9.934793977642826\n*/\nfloat", "{\n\treturn (float) (a * h) / 2;\n}", "{\n\
    \    return 0.5 * a * h;\n}\n/*\nGiven length of a side and high return area for\
    \ a rectangle.\n    >>> rectangle_area(5L, 3L)\n    15.0\n*/\nfloat rectangle_area(long\
    \ a, long b) \n{\n    return a * b;\n}\n/*\nGiven a circle radius return area.\n\
    \    >>> circle_area(5L)\n    78.539816\n*/\nfloat circle_area(long r) \n{\n \
    \   return PI * r * r;\n}\n/*\nGiven two points (x1, y1) and (x2, y2) return distance.\n\
    \    >>> distance(0L, 0L, 3L, 4L)\n    5.0\n*/\nfloat distance(long x1, long y1,\
    \ long x2, long y2) \n{\n    long xs = x2 - x1;\n    long ys = y2 - y1;\n    long\
    \ xsq = xs * xs;\n    long ysq = ys * ys;\n    return sqrt(xsq + ysq);\n}", "{\n\
    \treturn 0.5f * a * h;\n}", "{\n   return 0.5f * a * h;\n}", "{\n    // auto s\
    \ = sqrt(pow(h, 2) + pow(a/2, 2));\n    auto s = h * (a/2);\n    return s * 0.5f;\n\
    }", "{\n\treturn a * h / 2.0;\n}", "{\n\treturn (a * h) / 2.0;\n}", "{\n    float\
    \ triarea;\n    triarea = (a * h / 2);\n    return triarea;\n}\n/*\nGiven a radius,\
    \ return area for a circle.\n    \n    >>> circle_area(3L)\n    28.274333882308138\n\
    */\nfloat circle_area(long r) \n{\n    float cirarea;\n    cirarea = pi * r *\
    \ r;\n    return cirarea;\n}\n/*\nGiven two points on a Cartesian plane, return\
    \ distance between them.\n    \n    >>> distance(1L, 2L, 4L, 6L)\n    5.0\n  \
    \  \n*/\nfloat distance(long x1, long y1, long x2, long y2) \n{\n    float dist;\n\
    \    dist = sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n    return dist;\n\
    }\n/*\nGiven two points on a Cartesian plane, return a point that is the midpoint\
    \ between them.\n    \n    >>> midpoint(1L, 2L, 4L, 6L)\n    (2, 4)\n    \n*/\n\
    std.typecons.Tuple!(long, long) midpoint(long x1, long y1, long x2, long y2) \n\
    {\n    std.typecons.Tuple!(long, long) mpoint;\n    mpoint = std.typecons.tuple(x1\
    \ + x2 / 2, y1 + y2 / 2);\n    return mpoint;\n}\n/*\nGiven the three sides of\
    \ a triangle, return the area of that triangle.\n    \n    >>> herons_formula(5L,\
    \ 3L, 4L)\n    6.0\n    \n*/\nfloat herons_formula(long a, long b, long c) \n\
    {\n    float herons;\n    herons = sqrt((a + b + c) * (a + b - c) * (a - b + c)\
    \ * (-a + b + c)) / 4;\n    return herons;\n}\n/*\nGiven two points in 2D space,\
    \ return the slope of the line through them.\nIf the slope is not", "{\n    return\
    \ a * h / 2.0f;\n}", "{\n    return (a * h) / 2.0;\n}\n/*\nGiven a temperature\
    \ in Celsius, return Fahrenheit temperature.\n    >>> celsius_to_fahrenheit(0)\n\
    \    32.0\n*/\nfloat celsius_to_fahrenheit(long c) \n{\n    return c * 1.8 + 32;\n\
    }\n/*\nGiven a temperature in Fahrenheit, return Celsius temperature.\n    >>>\
    \ fahrenheit_to_celsius(0)\n    -17.777778\n    >>> fahrenheit_to_celsius(32)\n\
    \    0.0\n*/\nfloat fahrenheit_to_celsius(long f) \n{\n    return (f - 32) / 1.8;\n\
    }\n/*\nGiven length of sides of a triangle, return area of the triangle.\n   \
    \ >>> triangle_area(2L, 3L, 4L)\n    2.904737\n*/\nfloat triangle_area(long a,\
    \ long b, long c) \n{\n    auto s = (a + b + c) / 2.0;\n    return sqrt(s * (s\
    \ - a) * (s - b) * (s - c));\n}\n/*\nGiven two points, return distance between\
    \ them.\n    >>> distance(Pt{}, Pt{2, 0})\n    2.0\n*/\nfloat distance(Pt a, Pt\
    \ b) \n{\n    return sqrt((a.x - b.x) ^^ 2 + (a.y - b.y) ^^ 2);\n}\n/*\nCheck\
    \ if a string is a palindrome.\n    >>> is_palindrome(\"elevator\")\n    false\n\
    \    >>> is_palindrome(\"kayak\")\n    true\n*/", "{\n\tauto float_h = cast(double)h;\n\
    \tauto float_a = cast(double)a;\n\treturn float_h * float_a * 0.5;\n}\n \n/*\n\
    Given values of a, b, c and d return the expression.\n    >>> calculate_expression(1,\
    \ 2, 1, 2)\n    -6\n    >>> calculate_expression(2, 1, 2, 2)\n    2\n*/\nfloat\
    \ calculate_expression(long a, long b, long c, long d)\n{\n\tauto float_a = cast(double)a;\n\
    \tauto float_b = cast(double)b;\n\tauto float_c = cast(double)c;\n\tauto float_d\
    \ = cast(double)d;\n\treturn (float_a * float_c) - (float_b * float_d);\n}", "{\n\
    \   return (a * h) / 2.0f;\n}\n/*\nReturns area for a square.\n    >>> square_area(2)\n\
    \    4\n    \n*/\nlong square_area(long a) \n{\n   return a * a;\n}", "{\n   \
    \ return a * h / 2;\n}\n/*\nGiven two tuples(a, b) and (c, d) of vectors return\
    \ a tuple (x, y) of scalars representing their dot product.\n    >>> vector_dot((2L,\
    \ 2L), (3L, 4L))\n    11\n    \n*/\nlong vector_dot(tuple(long, long) a, tuple(long,\
    \ long) b)\n{\n    return a[0] * b[0] + a[1] * b[1];\n}\n/*\nGiven a tuple of\
    \ vector of length 2 return a tuple of vector of length 3 with the third coordinate\
    \ being 1.\n    >>> vector_homogenize((2L, 4L))\n    (2L, 4L, 1L)\n    \n*/\n\
    tuple(long, long, long) vector_homogenize(tuple(long, long) a)\n{\n    return\
    \ tuple(a[0], a[1], 1L);\n}\n/*\nGiven a tuple of vectors (a, b) return a tuple\
    \ of vectors (c, d) representing the given vectors rotated by 90 degrees.\n  \
    \  >>> vector_rotate((2L, 3L), (4L, 5L))\n    (-3L, 2L, -5L, 4L)\n    \n*/\ntuple(long,\
    \ long, long, long) vector_rotate(tuple(long, long) a, tuple(long, long) b)\n\
    {\n    return tuple(-a[1], a[0], -b[1], b[0]);\n}\n/*\nGiven a float from interval\
    \ [-1, 1] return an angle in interval [0, pi].\n    >>> acos_clamped(0.5)\n  \
    \  1.0471975511965976\n    \n*/\ndouble acos_clamped(double a)\n{\n    return\
    \ acos(clamp(a, -1, 1));\n}\n/*\nGiven a tuple of vectors (a, b) return true if\
    \ a is rotated counter-clockwise by b with respect to origin.\n    >>> ccw((2L,\
    \ 3L), (4L, 5L))\n    True\n    \n*/", "{\n  \n  return a*h/2;\n}\n/*\nGiven length\
    \ of a side and high return area for a circle.\n    >>> round(circle_area(5L),\
    \ 2)\n    78.54\n    \n*/\nfloat circle_area(long r) \n{\n  return pi*r*r;\n}\n\
    /*\nGiven length of a side and high return area for a rectangle.\n    >>> rectangle_area(3L,\
    \ 2L)\n    6\n    \n*/\nlong rectangle_area(long a, long b) \n{\n  return a*b;\n\
    }\n/*\nGiven length of a side and high return area for a square.\n    >>> square_area(3L)\n\
    \    9\n    \n*/\nlong square_area(long a) \n{\n  return a*a;\n}\n/*", "{\n  \
    \  return 0.5*float(a)*float(h);\n}\n/*\nGiven length of a side and high return\
    \ volume for a triangle.\n    >>> triangle_volume(5L, 3L)\n    10.0\n    \n*/\n\
    float triangle_volume(long a, long h) \n{\n    return triangle_area(a, h)*float(a);\n\
    }\n/*\nGiven length of a side and high return perimetr for a triangle.\n    >>>\
    \ triangle_perimetr(5L, 3L)\n    11.0\n    \n*/\nfloat triangle_perimetr(long\
    \ a, long h) \n{\n    return sqrt(float(h)*float(h)+float(a)*float(a))*2+float(a);\n\
    }\n/*\nGiven 3 sides of a triangle return the area.\n    >>> triangle_area_3sides(3L,\
    \ 4L, 5L)\n    6.0\n*/\nfloat triangle_area_3sides(long a, long b, long c) \n\
    {\n    float p = (float(a)+float(b)+float(c))/2;\n    return sqrt(p*(p-float(a))*(p-float(b))*(p-float(c)));\n\
    }\n/*\nGiven 3 sides of a triangle return the volume.\n    >>> triangle_volume_3sides(3L,\
    \ 4L, 5L)\n    6.0\n*/\nfloat triangle_volume_3sides(long a, long b, long c) \n\
    {\n    return triangle_area_3sides(a, b, c)*(float(a)+float(b)+float(c))/3;\n\
    }\n/*\nGiven 3 sides of a triangle return the perimetr.\n    >>> triangle_perimetr_3sides(3L,\
    \ 4L, 5L)\n    12.0\n*/\nfloat triangle_perimetr_3sides(long a, long b, long c)\
    \ \n{\n    return float(a)+float(b)+float(c);\n}\n/*\nGiven 3 coordinates return\
    \ length of a side.\n    >>> triangle_side_3vertex(0L, 0L, 1L, 0L", "{\n\treturn\
    \ float(a * h) / 2;\n}", "{\n    return a * h / 2f;\n}", "{\n    return float(0.5\
    \ * a * h);\n}\n/*\nGiven length of 3 sides of a triangle, return true if triangle\
    \ is right angled.\n    >>> right_angled_triangle(3L, 4L, 5L)\n    true\n    >>>\
    \ right_angled_triangle(3L, 4L, 4L)\n    false\n*/", "{\n    // assume a is base\
    \ of triangle\n    return (a*h)/2;\n}\n/*\nGiven a string, return True if its\
    \ length is even.\n    >>> is_even_length(\"abc\")\n    False\n*/", "{\n    float\
    \ area = (a * h) / 2.0;\n    return area;\n}\n/*\nGiven length of a side, high\
    \ and angle calculate area for a triangle.\n    >>> triangle_area(5L, 3L, 60)\n\
    \    3.75\n*/\nfloat triangle_area(long a, long h, long angle) \n{\n    float\
    \ area = a * h * sin(degtorad(angle)) / 2.0;\n    return area;\n}\n/*\nGiven a,\
    \ b, c sides calculate area for a triangle.\n    >>> triangle_area(3L, 4L, 5L)\n\
    \    6.0\n*/\nfloat triangle_area(long a, long b, long c) \n{\n    float s = (a\
    \ + b + c) / 2.0;\n    float area = sqrt(s * (s - a) * (s - b) * (s - c));\n \
    \   return area;\n}\n/*\nGiven two vectors calculate area for a triangle.\n  \
    \  >>> triangle_area([3,4], [4,0])\n    6.0\n*/\nfloat triangle_area(Vector a,\
    \ Vector b) \n{\n    float area = a.cross(b).length / 2.0;\n    return area;\n\
    }\n/*\nGiven a list of points calculate area for a triangle.\n    >>> triangle_area([[0,0],\
    \ [0,2], [2,0]])\n    2.0\n*/\nfloat triangle_area(Points points) \n{\n    float\
    \ area = triangle_area(points[0], points[1], points[2]);\n    return area;\n}\n\
    /*\nGiven 3 points calculate area for a triangle.\n    >>> triangle_area([[0,0],\
    \ [0,2], [2,0]])\n    2.0\n*/\nfloat triangle_area(Point a, Point b, Point c)\
    \ \n{\n    Vector ab = b - a;\n    Vector ac = c - a;\n    float area = triangle_area(ab,\
    \ ac);\n    return area;\n}\nfloat triangle_perimeter(long a, long b, long c)\n\
    {\n    float s = (a + b + c) / 2.0;\n   ", "{\n    return float(a * h) / 2;\n}",
  "{\n    float a1 = (float) a;\n    float h1 = (float) h;\n    float out = (a1 *\
    \ h1) / 2.0;\n    return out;\n}\n/*\nGiven an integer n>=0, return n! as a float\n\
    \    >>> factorial(5L)\n    120.0\n*/\nfloat factorial(long n)\n{\n    if (n ==\
    \ 0L)\n    {\n        return 1.0f;\n    }\n    float f1 = (float) n;\n    float\
    \ f2 = factorial(n - 1L);\n    return f1 * f2;\n}\n/*\nGiven a string s and an\
    \ integer n, return an array of integers of length n\n        containing a word\
    \ from the given string s repeated n times\n        >>> rep_str(\"hi\", 5L)\n\
    \        [0, 1, 2, 3, 4]\n*/\nlong[] rep_str(dstring s, long n) \n{\n    auto\
    \ out = new long[n];\n    long i = 0L;\n    while (i < n)\n    {\n        out[i]\
    \ = i;\n        i = i + 1L;\n    }\n    return out;\n}\n/*\nGiven a string s,\
    \ an integer n and a char c, return the string s repeated n times\nwith each character\
    \ separated by the given char c\n        >>> rep_str_ch(\"hi\", 5L, '|')\n   \
    \     \"0|1|2|3|4\"\n*/\ndstring rep_str_ch(dstring s, long n, char c) \n{\n \
    \   auto out = new dstring[n];\n    long i = 0L;\n    while (i < n)\n    {\n \
    \       out[i] = to!dstring(i);\n        i = i + 1L;\n    }\n    return join(out,\
    \ c);\n}\n/*\nGiven a string s, an integer n and a char c, return the string s\
    \ repeated n times\nwith each character separated by the given char c\n      \
    \  >>> rep_str_ch(\"hi\", 5L, '|')\n        \"0|1|2|3|4\"\n*/\ndstring rep_str_ch2",
  "{\n    return a * h / 2.0;\n}\n/*\nGiven length of a rectangle return area for\
    \ a rectangle.\n    >>> rectangle_area(5L, 3L)\n    15\n*/\nlong rectangle_area(long\
    \ a, long b) \n{\n    return a * b;\n}\n/*\nGiven length of a side for square\
    \ return area for a square.\n    >>> square_area(5L)\n    25\n*/\nlong square_area(long\
    \ a) \n{\n    return a * a;\n}\n/*\nGiven length of a circle return area for a\
    \ circle.\n    >>> circle_area(5L)\n    78.539816\n*/\ndouble circle_area(long\
    \ r) \n{\n    return r * r * pi;\n}\n/*\nGiven length of a rectangle return perimeter\
    \ for a rectangle.\n    >>> rectangle_perimeter(5L, 3L)\n    16\n*/\nlong rectangle_perimeter(long\
    \ a, long b) \n{\n    return 2 * (a + b);\n}\n/*\nGiven length of a side for square\
    \ return perimeter for a square.\n    >>> square_perimeter(5L)\n    20\n*/\nlong\
    \ square_perimeter(long a) \n{\n    return 4 * a;\n}\n/*\nGiven length of a circle\
    \ return perimeter for a circle.\n    >>> circle_perimeter(5L)\n    31.415927\n\
    */\ndouble circle_perimeter(long r) \n{\n    return 2 * r * pi;\n}\n/*\nGiven\
    \ length of a rectangle return diagonal for a rectangle.\n    >>> rectangle_diagonal(5L,\
    \ 3L)\n    5.8309519\n*/\ndouble rectangle_diagonal(long a, long b) \n{\n    return\
    \ sqrt(cast(real) a * a + b * b);\n}\n/*\nGiven length of a side for square return\
    \ diagonal for a square.\n    >>> square_diagonal(5L)\n    7.0710678\n*/\ndouble\
    \ square_diagonal(long a) \n{\n    return sqrt(2) * a;\n}\n/*\n*/\ndouble circle_radius(long\
    \ a) \n{\n    return a / 2;\n}", "{\n    return (float)a * h / 2;\n}", "{\n  \
    \  return float(a * h) / 2.0;\n}\n/*\nGiven 2 sides of a triangle and angle return\
    \ area for a triangle.\n    >>> triangle_area(3L, 4L, 30.0)\n    6.0\n    \n*/\n\
    float triangle_area(long a, long b, float angle)\n{\n    return float(a * b *\
    \ sin(degtorad(angle))) / 2.0;\n}\n/*\nGiven length of 3 sides return area for\
    \ a triangle.\n    >>> triangle_area(3L, 4L, 5L)\n    6.0\n*/\nfloat triangle_area(long\
    \ a, long b, long c)\n{\n    auto p = (a + b + c) / 2.0;\n    return sqrt(p *\
    \ (p - a) * (p - b) * (p - c));\n}", "{\n    return (a * h) / 2.0;\n}", "pure\
    \ nothrow @nogc \n{\n    enum float ah = float(a * h);\n    return ah / 2.0f;\n\
    }", "{\n    float area;\n    area = float(a*h/2);\n    return area;\n}\n/*\nGiven\
    \ radius of a circle return area of a circle.\n    >>> circle_area(5L)\n    78.5\n\
    \    \n*/\nfloat circle_area(long r) \n{\n    float area;\n    area = float(PI*r*r);\n\
    \    return area;\n}\n/*\nGiven length of a side return area of a square.\n  \
    \  >>> square_area(5L)\n    25\n    \n*/\nlong square_area(long a) \n{\n    long\
    \ area;\n    area = a*a;\n    return area;\n}\n/*\nGiven length of a and b return\
    \ area of a rectangle.\n    >>> rectangle_area(5L, 3L)\n    15\n    \n*/\nlong\
    \ rectangle_area(long a, long b) \n{\n    long area;\n    area = a*b;\n    return\
    \ area;\n}\n/*\nGiven length of a side and the number of sides return area of\
    \ a regular polygon.\n    >>> polygon_area(5L, 5L)\n    97.3893722172612\n   \
    \ \n*/\nfloat polygon_area(long a, long n) \n{\n    float area;\n    area = float(a*a*n/4*tan(PI/n));\n\
    \    return area;\n}\n/*\nGiven length of base and height return area of a trapezoid.\n\
    \    >>> trapezoid_area(5L, 3L, 4L)\n    14\n    \n*/\nlong trapezoid_area(long\
    \ a, long b, long h) \n{\n    long area;\n    area = (a+b)*h/2;\n    return area;\n\
    }\n/*\nGiven length of a side and an equilateral triangle will return the area\
    \ of a regular polygon.\n    >>> polygon_area_triangle(5L, 3L)\n    25.731\n \
    \   \n*/\nfloat polygon_area_triangle(long a, long n) \n{\n    float area;\n \
    \   area = float(a*a*n/4*tan(PI/n)/2);\n    return area", "{\n    return (float)\
    \ a * h / 2.0;\n}", "{\n\tfloat S = 0.5f * a * h;\n\treturn S;\n}\n/*\nGiven side\
    \ length return area for a square.\n    >>> square_area(5L)\n    25\n    \n*/\n\
    long square_area(long a) \n{\n\tlong S = a * a;\n\treturn S;\n}\n/*\nGiven a side\
    \ length return area for a circle.\n    >>> circle_area(5L)\n    78.5398\n   \
    \ \n*/\nfloat circle_area(long r) \n{\n\tfloat S = PI * r * r;\n\treturn S;\n\
    }\n/*\nGiven a triangle side and a height return area.\n    >>> triangle_area_hm(Point2D(0L,\
    \ 0L), Point2D(0L, 3L), Point2D(4L, 0L))\n    6\n    \n*/\nlong triangle_area_hm(Point2D\
    \ p1, Point2D p2, Point2D p3) \n{\n\tauto x1 = p1.x;\n\tauto y1 = p1.y;\n\tauto\
    \ x2 = p2.x;\n\tauto y2 = p2.y;\n\tauto x3 = p3.x;\n\tauto y3 = p3.y;\n\tlong\
    \ a = dist(p1, p2);\n\tlong b = dist(p2, p3);\n\tlong c = dist(p3, p1);\n\tlong\
    \ P = (a + b + c) / 2;\n\tlong S = sqrt(P * (P - a) * (P - b) * (P - c));\n\t\
    return S;\n}\n/*\nGiven a triangle points return area.\n    >>> triangle_area_points(Point2D(0L,\
    \ 0L), Point2D(0L, 3L), Point2D(4L, 0L))\n    6\n    \n*/\nlong triangle_area_points(Point2D\
    \ p1, Point2D p2, Point2D p3) \n{\n\tauto x1 = p1.x;\n\tauto y1 = p1.y;\n\tauto\
    \ x2 = p2.x;\n\tauto y2 = p2.", "{\n    return a * h / 2;\n}\n/*\nFind volume\
    \ of a cube.\n    >>> cube_volume(3L)\n    27\n*/\nlong cube_volume(long a) \n\
    {\n    return a * a * a;\n}\n/*\nFind volume of a sphere.\n    >>> sphere_volume(1L)\n\
    \    3.141592653589793\n*/\nfloat sphere_volume(long r) \n{\n    float PI = 3.14;\n\
    \    return 4 / 3 * PI * r * r * r;\n}\n/*\nFind volume of a cylinder.\n    >>>\
    \ cylinder_volume(3L, 2L)\n    37.69911184307752\n*/\nfloat cylinder_volume(long\
    \ r, long h) \n{\n    float PI = 3.14;\n    return PI * r * r * h;\n}\n/*\nFind\
    \ area of a sector (slice of a circle).\n    >>> sector_area(100L, 60)\n    15707.963267948966\n\
    */\nfloat sector_area(long r, float angle) \n{\n    float PI = 3.14;\n    return\
    \ PI * r * r * angle / 360;\n}\n/*\nFind the volume of a conus(cone).\n    >>>\
    \ cone_volume(5L, 2L)\n    25.132741228718345\n*/\nfloat cone_volume(long r, long\
    \ h) \n{\n    float PI = 3.14;\n    return PI * r * r * h / 3;\n}\n/*\nReturn\
    \ area of a pyramide.\n    >>> pyramid_area(5L, 3L)\n    30.0\n*/\nfloat pyramid_area(long\
    \ a, long h) \n{\n    return a * a * h / 3;\n}\n/*\nWrite a function that returns\
    \ the average length of a word.\n    >>> average_word_length([\"this\", \"is\"\
    , \"a\", \"sentence\"])\n    2.25\n*/\nfloat average_word_length(T)(in T[] xs)\
    \ \n{\n    int sum = 0;\n    foreach (x; xs) \n    {\n        sum += x.length;\n\
    \    }\n    return sum", "{\n\treturn a * h / 2.0;\n}\n/*\nGiven length of a side\
    \ return area for a square.\n    >>> square_area(5L)\n    25\n    \n*/\nlong square_area(long\
    \ a) \n{\n\treturn a * a;\n}\n/*\nGiven height and radius return area for a cylinder.\n\
    \    >>> cylinder_area(3L, 2L)\n    56.547008547008545\n    \n*/\nfloat cylinder_area(long\
    \ h, long r) \n{\n\treturn 2 * PI * r * (r + h);\n}\n/*\nGiven length of a side\
    \ return area for a cube.\n    >>> cube_area(5L)\n    150\n    \n*/\nlong cube_area(long\
    \ a) \n{\n\treturn 6 * a * a;\n}\n/*\nGiven length of a side return volume for\
    \ a cube.\n    >>> cube_volume(5L)\n    125\n    \n*/\nlong cube_volume(long a)\
    \ \n{\n\treturn a * a * a;\n}\n/*\nGiven length of a side return surface area\
    \ for a cube.\n    >>> cube_surface_area(5L)\n    150\n    \n*/\nlong cube_surface_area(long\
    \ a) \n{\n\treturn 6 * a * a;\n}\n/*\nGiven height and radius return volume for\
    \ a cylinder.\n    >>> cylinder_volume(3L, 2L)\n    75.39822368615503\n    \n\
    */\nfloat cylinder_volume(long h, long r) \n{\n\treturn PI * r * r * h;\n}\n/*\n\
    Given length of a side return volume for a pyramid.\n    >>> pyramid_volume(5L,\
    \ 2L)\n    33.333333333333336\n    \n*/\nfloat pyramid_volume(long s, long h)\
    \ \n{\n\treturn s * s * h / 3.0;\n}\n/*\nGiven length of a side return area for\
    \ a square pyramid.\n    >>> square_pyramid_area(5L, 2L)\n    40.0\n    \n*/\n\
    float square_pyramid_area(long s, long h) \n{\n\treturn s * s + 2 * s", "{\n \
    \   return a * h / 2;\n}\n/*\nGiven length of a side and high return area for\
    \ a right triangle.\n    >>> right_triangle_area(5L, 3L)\n    7.5\n    \n*/\n\
    float right_triangle_area(long a, long h) \n{\n    return a * h / 2;\n}\n/*\n\
    Given length of three sides return area for a triangle.\n    >>> area_heron(3L,\
    \ 4L, 5L)\n    6.0\n    \n*/\nfloat area_heron(long a, long b, long c) \n{\n \
    \   /*\n    Heron's formula for calculating triangle area from three side lengths\n\
    \    */\n    float semiperimeter = (a + b + c) / 2;\n    return sqrt(semiperimeter\
    \ * (semiperimeter - a) * (semiperimeter - b) * (semiperimeter - c));\n}\n/*\n\
    Given length of two sides and angle return area for a triangle.\n    >>> area_with_sides_and_angle(3L,\
    \ 4L, 30)\n    6.0\n    \n*/\nfloat area_with_sides_and_angle(long a, long b,\
    \ float alpha) \n{\n    return a * b * sin(alpha) / 2;\n}\n/*\nGiven one side\
    \ and two angles return area for a triangle.\n    >>> area_with_side_and_angles(3L,\
    \ 30, 60)\n    2.598076211353316\n    \n*/\nfloat area_with_side_and_angles(long\
    \ a, float alpha, float beta) \n{\n    return a * a * sin(alpha) * sin(beta) /\
    \ (2 * sin(alpha + beta));\n}\n/*\nGiven length of two sides and angle return\
    \ area for a triangle.\n    >>> area_with_sides_and_opposite_angle(3L, 4L, 30)\n\
    \    6.0\n    \n*/\nfloat area_with_sides_and_opposite_angle(long a, long b, float\
    \ alpha) \n{\n    return a * b * sin(alpha) / 2;\n}\n/*\nGiven length of three\
    \ sides return area for a triangle", "{\n\tfloat area;\n\tarea = cast(float)a*h/2;\n\
    \treturn area;\n}\n/*\nGiven length of a side and high return area for a triangle.\n\
    \    >>> triangle_area(5L, 3L)\n    7.5\n    \n*/\nfloat triangle_area2(tuple(long,\
    \ long) a) \n{\n\tfloat area;\n\tarea = cast(float)a[0]*a[1]/2;\n\treturn area;\n\
    }", "{\n    return float(a) * float(h) / 2;\n}", "{\n    return cast(float)a *\
    \ cast(float)h / 2;\n}\n/*\nGiven length of a side and high return area for a\
    \ triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \n*/\nfloat triangle_area(int\
    \ a, int h) \n{\n    return cast(float)a * cast(float)h / 2;\n}\n/*\nFind bigger\
    \ side of a right triangle.\n    >>> biggest_side(5L, 3L)\n    5\n    \n*/\nlong\
    \ biggest_side(long a, long b)\n{\n    if (a == b) return a;\n    return a > b\
    \ ? a : b;\n}\n/*\nFind bigger side of a right triangle.\n    >>> biggest_side(5,\
    \ 3)\n    5\n    \n*/", "{\n  return a * h / 2;\n}", "{\n    return a * h / 2.0;\n\
    }", "{\n    return float(a*h)/2.0;\n}\n/*\nGiven the base a and high h of a rectangle\
    \ return area for the rectangle.\n    >>> rectangle_area(5L, 2L)\n    10\n   \
    \ \n*/\nlong rectangle_area(long a, long h) \n{\n    return a*h;\n}\n/*\nGiven\
    \ a side x of a square return area for the square.\n    >>> square_area(5L)\n\
    \    25\n    \n*/\nlong square_area(long x) \n{\n    return x*x;\n}\n/*\nGiven\
    \ the radius of a circle return area for the circle.\n    >>> circle_area(5L)\n\
    \    78.53981633974483\n    \n*/\nfloat circle_area(long r) \n{\n    return r*r*pi;\n\
    }\n/*\nGiven length of a side and high return area for a triangle.\n    >>> triangle_area_v2(5L,\
    \ 3L)\n    7.5\n    \n*/\nfloat triangle_area_v2(long a, long h) \n{\n    return\
    \ float(a*h)/2.0;\n}\n/*\nGiven the base a and high h of a rectangle return area\
    \ for the rectangle.\n    >>> rectangle_area_v2(5L, 2L)\n    10\n    \n*/\nlong\
    \ rectangle_area_v2(long a, long h) \n{\n    return a*h;\n}\n/*\nGiven a side\
    \ x of a square return area for the square.\n    >>> square_area_v2(5L)\n    25\n\
    \    \n*/\nlong square_area_v2(long x) \n{\n    return x*x;\n}\n/*\nGiven the\
    \ radius of a circle return area for the circle.\n    >>> circle_area_v2(5L)\n\
    \    78.53981633974483\n    \n*/\nfloat circle_area_v2(long r) \n{\n    return\
    \ r*r*pi;\n}\n/*\nGiven the base a and high h of a rectangle return area for the\
    \ rectangle.\n    >>> rectangle_area_v3(5L, 2L)\n    10\n    \n*/\n", "    if\
    \ (a < 0 || h < 0)\n    {\n        return -1;\n    }\n    else \n    {\n     \
    \   return  (float) a * h / 2;\n    }\n}", "{\n    // your code here\n    return\
    \ (a * h / 2.0);\n}\n/*\nGiven length of two sides and high return area for a\
    \ trapezoid.\n    >>> trapezoid_area(1L, 2L, 3L)\n    3.0\n*/\nfloat trapezoid_area(long\
    \ a, long b, long h)\n{\n    // your code here\n    return ((a + b) * h / 2.0);\n\
    }\n/*\nGiven radius of a circle return area for a circle.\n    >>> circle_area(1L)\n\
    \    3.14159\n*/\nfloat circle_area(long r)\n{\n    // your code here\n    return\
    \ (pi * r * r);\n}\n/*\nGiven length of a side and high return area for a square.\n\
    \    >>> square_area(5L)\n    25\n*/\nlong square_area(long a)\n{\n    // your\
    \ code here\n    return (a * a);\n}\n/*\nGiven radius of a circle return area\
    \ for a circle.\n    >>> circle_area(1L)\n    3.14159\n*/\nlong ellipse_area(long\
    \ a, long b)\n{\n    // your code here\n    return (pi * a * b);\n}\n/*\nGiven\
    \ one side return area for a rhombus.\n    >>> rhombus_area(2L)\n    4\n*/\nlong\
    \ rhombus_area(long a)\n{\n    // your code here\n    return (a * a);\n}\n/*\n\
    Given two sides return area for a kite.\n    >>> kite_area(2L, 4L)\n    4\n*/\n\
    long kite_area(long a, long b)\n{\n    // your code here\n    return (a * b /\
    \ 2.0);\n}\n/*\nGiven length of a side return area for a square.\n    >>> heptagon_area(5L)\n\
    \    43.30127\n*/\nfloat heptagon_area(long a)\n{\n    // your code here\n   \
    \ return (a * a * 7 / 4.0 * tan(180 / 7.0));\n}\n/*\nGiven length of a side return\
    \ area for a square.\n   ", "{\n\treturn 0.5 * a * h;\n}", "{\n    return a *\
    \ h / 2;\n}\n/*\nGiven two sequences find if they are permutations of each other.\n\
    \    >>> is_permutation([1, 2, 3], [3, 2, 1])\n    true\n    >>> is_permutation([1,\
    \ 2, 3], [3, 2, 1, 5])\n    false\n    >>> is_permutation([1, 2, 3], [3, 1, 2])\n\
    \    true\n    >>> is_permutation([1, 2, 3], [3, 1, 2, 5])\n    false\n    >>>\
    \ is_permutation([1, 2, 3], [3, 1, 2, 2])\n    false\n*/", "{\n\treturn a * h\
    \ / 2;\n}", "{\n    return cast(float) 0.5 * a * h;\n}", "{\n    return (float)\
    \ a * h / 2;\n}", "{\n    return a * h / 2;\n}", "{\n    return 0.5 * a * h;\n\
    }", "{\n    return a*h/2;\n}\n/*\nReturn product of two floating point numbers.\n\
    \    >>> mul(2.0, 3.0)\n    6.0\n    \n*/\nfloat mul(float a, float b) \n{\n \
    \   return a*b;\n}\n/*\nReturn length of a side of a regular hexagon with area.\n\
    \    >>> hexagon_side(12.0)\n    3.0\n    \n*/\nfloat hexagon_side(float area)\
    \ \n{\n    return sqrt(2*area/3*sqrt(3));\n}\n/*\nReturn length of a side of a\
    \ regular hexagon with area.\n    >>> hexagon_side(12L)\n    3.0\n    \n*/\nfloat\
    \ hexagon_side(long area) \n{\n    return sqrt(2*(float)area/3*sqrt(3));\n}\n\
    /*\nCreate a tuple of squares of numbers 1 to 5.\n    >>> squares_tuple()\n  \
    \  (1, 4, 9, 16, 25)\n    \n*/\nTuple!(uint,uint,uint,uint,uint) squares_tuple()\
    \ \n{\n    return tuple(1, 4, 9, 16, 25);\n}\n/*\nCreate a tuple of squares of\
    \ numbers 1 to 5.\n    >>> squares_tuple_returning_immutable()\n    (1, 4, 9,\
    \ 16, 25)\n    \n*/\nimmutable(Tuple!(uint,uint,uint,uint,uint)) squares_tuple_returning_immutable()\
    \ \n{\n    return tuple(1, 4, 9, 16, 25);\n}\n/*\nCreate a tuple of squares of\
    \ numbers 1 to 5.\n    >>> squares_tuple_returning_const()\n    (1, 4, 9, 16,\
    \ 25)\n    \n*/\nconst(Tuple!(uint,uint,uint,uint,uint)) squares_tuple_returning_const()\
    \ \n{\n    return tuple(1, 4, 9, 16, 25);\n}\n/*\nCreate a tuple of squares of\
    \ numbers 1 to 5.\n    >>> squares_tuple_returning_shared()\n    (1, 4, 9, 16,\
    \ 25)", "{\n    return (float) a*h/2.0;\n}", "{\n    return (float)(a * h) / 2;\n\
    }", "@safe pure nothrow @nogc\n{\n    float A = (a*h)/2.0f;\n    return A;\n}",
  "{\n    return (a * h) / 2.0f;\n}", "{\n    return a*h/2.0;\n}", "{\n    return\
    \ float(a) * float(h) / 2.0;\n}\n \n/*\nGiven length of a side, return area for\
    \ a square.\n    >>> square_area(5L)\n    25\n    \n*/", "{\n    return float(a\
    \ * h) / 2.0;\n}\n/*\nGiven a list of non-negative integers representing the histogram's\
    \ bar height where the width of each bar is 1, \n    find the area of largest\
    \ rectangle in the histogram.\n    >>> largest_rect_area([2, 1, 5, 6, 2, 3])\n\
    \    10\n    >>> largest_rect_area([6, 2, 5, 4, 5, 1, 6])\n    12\n*/\nlong largest_rect_area(T)(T\
    \ list) \n{\n    long maxarea = 0;\n    long tp = 0;\n    long[long] stk = [];\n\
    \    long area_with_top = 0;\n    long i = 0;\n    long n = list.length;\n   \
    \ while (i < n) \n    {\n        while (stk.length > 0 && list[stk.back] >= list[i])\
    \ \n        {\n            tp = stk.popBack();\n            area_with_top = list[tp]\
    \ * (stk.length > 0 ? i - stk.back - 1 : i);\n            maxarea = max(maxarea,\
    \ area_with_top);\n        }\n        stk.pushBack(i++);\n    }\n    while (stk.length\
    \ > 0) \n    {\n        tp = stk.popBack();\n        area_with_top = list[tp]\
    \ * (stk.length > 0 ? i - stk.back - 1 : i);\n        maxarea = max(maxarea, area_with_top);\n\
    \    }\n    return maxarea;\n}\n/*\nYou are given a string representing an attendance\
    \ record for a student. \nThe record only contains the following three characters:\n\
    'A' : Absent.\n'L' : Late.\n'P' : Present.\nA student could be rewarded if his\
    \ attendance record doesn't contain more than one 'A' (absent) or more than two\
    \ continuous 'L' (late).\nYou need to return whether the student could be rewarded\
    \ according to his attendance record.\n    >>> check_record(\"PPALLP\")\n    true\n\
    \    >>> check_record(\"PPALLL\")\n    false\n*/", "{\n    return 0.5 * a * h;\n\
    }", "pure nothrow @safe @nogc\n{\n    return a * h / 2.0;\n}", "{\n    return\
    \ h * a / 2;\n}", "{\n    return a*h/2.0f;\n}\n/*\nGiven length of a side return\
    \ area for square.\n    >>> square_area(5L)\n    25\n    \n*/\nlong square_area(long\
    \ a) \n{\n    return a*a;\n}\n/*\nGiven two catheti return hypotenuse.\n    >>>\
    \ hypo(3L, 4L)\n    5.0\n    \n*/\nfloat hypo(long cat1, long cat2) \n{\n    return\
    \ sqrt(cat1*cat1 + cat2*cat2);\n}\n/*\nGiven length and width of rectangle return\
    \ its area.\n    >>> rectangle_area(5L, 7L)\n    35\n    \n*/\nlong rectangle_area(long\
    \ a, long b) \n{\n    return a*b;\n}\n/*\nGiven length of a side return area for\
    \ a hexagon.\n    >>> hexagon_area(5L)\n    52.36220472440945\n    \n*/\nfloat\
    \ hexagon_area(long a) \n{\n    return 3*sqrt(3)*a*a/2;\n}\n/*\nGiven length of\
    \ a side return area for a rhombus.\n    >>> rhombus_area(5L)\n    25.0\n    \n\
    */\nfloat rhombus_area(long a) \n{\n    return a*a;\n}\n/*\nGiven a point and\
    \ a shape return true if the point is inside the shape, false otherwise.\n   \
    \ >>> point_inside_shape(\"Triangle\", (5L, 3L), (2L, 5L))\n    True\n    \n*/",
  "{\n    return float(a) * float(h) / 2;\n}", "{\n    return a*h/2;\n}\n/*\nIn a\
    \ triangle ABC the angle BAC is 90 degrees. \nIf AB=length(AB) and AC=length(AC)\
    \ and BC=length(BC) are the lengths of the sides, \nthen the area of the triangle\
    \ ABC is equal to", "{\n    return a * h / 2;\n}\n// Function for cout triangle",
  "    in(a, h)\n    out(result)\n{\n    float result = (float)(a * h) / 2.0f;\n \
    \   return result;\n}", "{\n\treturn (float) (a * h) / 2;\n}", "{\n\treturn a*h/2.0;\n\
    }\n/*\nGiven two sides of a right triangle return hypotenuse.\n    >>> hypotenuse(2L,\
    \ 3L)\n    3.605551275463989\n*/\nfloat hypotenuse(long a, long b) \n{\n\treturn\
    \ sqrt(a*a + b*b);\n}\n/*\nGiven length of a side and high return perimeter for\
    \ a rectangle.\n    >>> rectangle_perimeter(5L, 3L)\n    16\n*/\nlong rectangle_perimeter(long\
    \ a, long b) \n{\n\treturn 2*(a+b);\n}\n/*\nGiven length of a side and high return\
    \ area for a rectangle.\n    >>> rectangle_area(5L, 3L)\n    15\n*/\nlong rectangle_area(long\
    \ a, long b) \n{\n\treturn a*b;\n}\n/*\nGiven side return perimeter for a square.\n\
    \    >>> square_perimeter(5L)\n    20\n*/\nlong square_perimeter(long a) \n{\n\
    \treturn 4*a;\n}\n/*\nGiven side return area for a square.\n    >>> square_area(5L)\n\
    \    25\n*/\nlong square_area(long a) \n{\n\treturn a*a;\n}\n/*\nReturn square\
    \ root of a number.\n    >>> square_root(100L)\n    10.0\n*/\nfloat square_root(long\
    \ a) \n{\n\treturn sqrt(a);\n}\n/*\nReturn square of a number.\n    >>> square(100L)\n\
    \    10000\n*/\nlong square(long a) \n{\n\treturn a*a;\n}\n/*\nReturn cube of\
    \ a number.\n    >>> cube(100L)\n    1000000\n*/\nlong cube(long a) \n{\n\treturn\
    \ a*a*a;\n}\n/*\nReturn cube root of a number.\n    >>> cube_root(1000L)\n   \
    \ 10.0\n*/\nfloat cube_root(long a) \n{\n\treturn pow(a, 1.0/3.0);\n}\n/*\nReturn\
    \ power of a number.\n    >>> power(3L, 3", "{\n    return cast(float)a * cast(float)h\
    \ / 2.0;\n}\n/*\nGiven base and height return area for a rectangle.\n    >>> rectangle_area(5L,\
    \ 3L)\n    15\n    \n*/\nlong rectangle_area(long a, long b) \n{\n    return a\
    \ * b;\n}\n/*\nGiven side return area for a square.\n    >>> square_area(5L)\n\
    \    25\n    \n*/\nlong square_area(long a) \n{\n    return rectangle_area(a,\
    \ a);\n}\n/*\nGiven length of a side return perimeter for a square.\n    >>> square_perimeter(5L)\n\
    \    20\n    \n*/\nlong square_perimeter(long a) \n{\n    return 4 * a;\n}\n/*\n\
    Given length of a side return area for a hexagon.\n    >>> hexagon_area(5L)\n\
    \    64.9519052838329\n    \n*/\nfloat hexagon_area(long a) \n{\n    return cast(float)a\
    \ * cast(float)a * sqrt(3.0) / 2.0;\n}\n/*\nGiven length of a side return perimeter\
    \ for a hexagon.\n    >>> hexagon_perimeter(5L)\n    30\n    \n*/\nlong hexagon_perimeter(long\
    \ a) \n{\n    return 6 * a;\n}\n/*\nGiven a diameter return circumference of a\
    \ circle.\n    >>> circle_circumference(5L)\n    15.707963267949\n    \n*/\nfloat\
    \ circle_circumference(long d) \n{\n    return d * pi;\n}\n/*\nGiven a diameter\
    \ return area of a circle.\n    >>> circle_area(5L)\n    19.634954084936208\n\
    \    \n*/\nfloat circle_area(long d) \n{\n    return d * d * pi / 4.0;\n}\n/*\n\
    Given a radius return area of a circle.\n    >>> circle_area_radius(5L)\n    78.53981633974483\n\
    \    \n*/\nfloat circle_area_radius(long r) \n{\n    return r * r * pi", "{\n\
    \    float area = a*h/2;\n    return area;\n}", "{\n    float area = (a * h) /\
    \ 2;\n    return area;\n}\n/*\nReturn true if a sequence contains a value, else\
    \ return false.\n    >>> contains('abc', 'b')\n    true\n    >>> contains('abc',\
    \ 'x')\n    false\n*/", "{\n    return a*h/2;\n}", "{\n    return a * h / 2;\n\
    }\n/*\nGiven radius return area for a circle.\n    >>> circle_area(3L)\n    28.274333877\n\
    */\ndouble circle_area(long r)\n{\n    return r * r * PI;\n}\n/*\nGiven width,\
    \ height and depth return volume of a cuboid.\n    >>> cuboid_volume(2L, 5L, 7L)\n\
    \    70\n*/\nlong cuboid_volume(long a, long b, long c)\n{\n    return a * b *\
    \ c;\n}", "{\n    float half_a = (float)a / 2;\n    float a_square = half_a *\
    \ half_a;\n    float h_square = (float)h * (float)h;\n    float area = sqrt(h_square\
    \ - a_square) * half_a;\n    return area;\n}", "{\n    return a * h / 2.0;\n}",
  "{\n    return (float) (a * h) / 2;\n}", "{\n   return (a * h) / 2;\n}", "{\n\t\
    float res = 0.5 * float(a) * float(h);\n\treturn res;\n}", "{\n  return (a * h)\
    \ / 2.0;\n}", "{\n    return (a * h) / 2;\n}", "{\n    return ((float)a * (float)h)\
    \ / 2;\n}", "{\n    return (float)(a * h / 2);\n}", "{\n    return (a*h)/2;\n}",
  "{\n    return 0.5f * a * h;\n}\n/*\nGiven length of a side and high return area\
    \ for a trapezoid.\n    >>> trapezoid_area(2L, 8L, 5L)\n    15.0\n*/\nfloat trapezoid_area(long\
    \ a, long b, long h) \n{\n    return (a + b) * 0.5f * h;\n}\n/*\nGiven length\
    \ of a side return area for a square.\n    >>> square_area(5L)\n    25.0\n*/\n\
    float square_area(long a) \n{\n    return a * a;\n}\n/*\nGiven length of a side\
    \ return area for a rhombus.\n    >>> rhombus_area(4L, 5L)\n    10.0\n*/\nfloat\
    \ rhombus_area(long a, long h) \n{\n    return a * h;\n}\n/*\nGiven length of\
    \ a side return area for a cube.\n    >>> cube_area(6L)\n    216.0\n*/\nfloat\
    \ cube_area(long a) \n{\n    return a * a * a;\n}\n/*\nGiven length of a side\
    \ return area for a parallelepiped.\n    >>> parallelepiped_area(2L, 5L, 6L)\n\
    \    60.0\n*/\nfloat parallelepiped_area(long a, long b, long c) \n{\n    return\
    \ a * b * c;\n}\n/*\nGiven length of a side return area for a prism.\n    >>>\
    \ prism_area(2L, 3L, 4L)\n    96.0\n*/\nfloat prism_area(long a, long b, long\
    \ h) \n{\n    return 2.0f * (a * b + a * h + b * h);\n}\n/*\nGiven length of a\
    \ side return area for a cylinder.\n    >>> cylinder_area(2L, 3L)\n    37.68\n\
    */\nfloat cylinder_area(long r, long h) \n{\n    return 2.0f * PI * r * h + 2.0f\
    \ * PI * r * r;\n}\n/*\nGiven length of a side return area for a pyramid.\n   ",
  "{\n    return 0.5 * cast(float) a * cast(float) h;\n}\n/*\nReturns the length of\
    \ hypotenuse.\n    >>> hypotenuse(5L, 12L)\n    13.0\n    \n*/\nfloat hypotenuse(long\
    \ a, long b)\n{\n    return sqrt(a * a + b * b);\n}\n/*\nGiven an integer calculate\
    \ the factorial.\n    >>> factorial(5L)\n    120\n    >>> factorial(0L)\n    1\n\
    \    >>> factorial(1L)\n    1\n    \n*/\nlong factorial(long n)\n{\n    if (n\
    \ <= 1L)\n        return 1L;\n    else\n        return n * factorial(n - 1L);\n\
    }\n/*\nGiven integer calculate the number of integers divisors.\n    >>> divisors(15L)\n\
    \    4\n    >>> divisors(1L)\n    1\n    >>> divisors(10L)\n    4\n    \n*/\n\
    long divisors(long n)\n{\n    long count = 0L;\n    foreach (d; 1L ..= n)\n  \
    \  {\n        if (n % d == 0L)\n            count += 1L;\n    }\n    return count;\n\
    }\n/*\nGiven integer n return n+nn+nnn\n    >>> add_digits(5L)\n    615\n    >>>\
    \ add_digits(9L)\n    11106\n    \n*/\nlong add_digits(long n)\n{\n    long nn\
    \ = n * 10L + n;\n    long nnn = nn * 10L + n;\n    return n + nn + nnn;\n}\n\
    /*\nGiven three integers return the largest of them.\n    >>> max_of_three(2L,\
    \ 4L, 1L)\n    4\n    >>> max_of_three(10L, 9L, 12L)\n    12\n    \n*/\nlong max_of_three(long\
    \ a, long b, long c)\n{\n    return max(a, max(b, c));\n}\n/*\nGiven an array\
    \ of integers return the sum of the integers.\n    >>> sum_array", "{\n    return\
    \ a * h / 2;\n}\n/*\nGiven length of a side and high return area for a triangle.\n\
    \    >>> triangle_area(5, 3)\n    7.5\n    \n*/\nfloat triangle_area(int a, int\
    \ h) \n{\n    return a * h / 2;\n}\n/*\nGiven length of a side and high return\
    \ area for a triangle.\n    >>> triangle_area(5.0, 3.0)\n    7.5\n    \n*/\nfloat\
    \ triangle_area(double a, double h) \n{\n    return a * h / 2;\n}\n/*\nGiven length\
    \ of a side and high return area for a triangle.\n    >>> triangle_area(5.0f,\
    \ 3.0f)\n    7.5\n    \n*/\nfloat triangle_area(float a, float h) \n{\n    return\
    \ a * h / 2;\n}\n/*\nReturns the average of two numbers\n    >>> avg(3, 5)\n \
    \   4\n    \n*/\nfloat avg(int a, int b) \n{\n    return (a + b) / 2;\n}\n/*\n\
    Returns the average of two numbers\n    >>> avg(3L, 5L)\n    4\n    \n*/\nfloat\
    \ avg(long a, long b) \n{\n    return (a + b) / 2;\n}\n/*\nReturns the average\
    \ of two numbers\n    >>> avg(3.0, 5.0)\n    4.0\n    \n*/\nfloat avg(double a,\
    \ double b) \n{\n    return (a + b) / 2;\n}\n/*\nReturns the average of two numbers\n\
    \    >>> avg(3.0f, 5.0f)\n    4.0\n    \n*/\nfloat avg(float a, float b) \n{\n\
    \    return (a + b) / 2;\n}\n/*\nReturns the average of two numbers\n    >>> avg(a,\
    \ b)\n    4\n    >>> avg(a, b)\n    4\n    \n*/\nfloat avg(auto ref int a, auto\
    \ ref int b) \n{\n    return (a + b) / 2;\n}\n/*\nReturns the average of two numbers\n\
    \    >>> avg(a,", "{\n    auto a = to!double(a);\n    auto h = to!double(h);\n\
    \    return (a * h) / 2;\n}\n/*\nReturn the area of a circle for given radius\n\
    \    >>> circle_area(4L)\n    50.26548245743669\n*/\nfloat circle_area(long r)\
    \ \n{\n    return pi * to!double(r) * to!double(r);\n}\n/*\nGiven length of a\
    \ side return area for a square.\n    >>> square_area(5L)\n    25\n*/\nlong square_area(long\
    \ a) \n{\n    return a * a;\n}\n/*\nGiven length of two sides, return area for\
    \ a rectangle.\n    >>> rectangle_area(5L, 3L)\n    15\n*/\nlong rectangle_area(long\
    \ a, long b) \n{\n    return a * b;\n}\n/*\nGiven lengths of three sides, return\
    \ area for a triangle.\n    >>> triangle_area_three_sides(5L, 3L, 4L)\n    6\n\
    */\nlong triangle_area_three_sides(long a, long b, long c) \n{\n    auto s = (a\
    \ + b + c) / 2;\n    return sqrt(s * (s - a) * (s - b) * (s - c));\n}\n/*\nReturn\
    \ the sum of all numbers in an array.\n    >>> sum_array([1, 2, 3, 4, 5])\n  \
    \  15\n*/\nlong sum_array(long[] a) \n{\n    long total = 0;\n    foreach (e;\
    \ a) {\n        total += e;\n    }\n    return total;\n}\n/*\nReturn the product\
    \ of all numbers in an array.\n    >>> multiply_array([1, 2, 3, 4, 5])\n    120\n\
    */\nlong multiply_array(long[] a) \n{\n    long total = 1;\n    foreach (e; a)\
    \ {\n        total *= e;\n    }\n    return total;\n}\n/*\nReturn the largest\
    \ number in an array.\n    >>> max_array([1, 2, 3, 4, 5])\n    5\n*/", "{\n  return\
    \ float(a * h) / 2.0;\n}", "{\n  float s = 0.5f * float(a) * float(h);\n  return\
    \ s;\n}\n/*\nA non-empty array A consisting of N integers is given.\nA peak is\
    \ an array element which is larger than its neighbours. More precisely, it is\
    \ an index P such that 0 < P < N \u2212 1 and A[P \u2212 1] < A[P] > A[P + 1].\n\
    For example, the following array A:\n    A[0] = 1\n    A[1] = 5\n    A[2] = 3\n\
    \    A[3] = 4\n    A[4] = 3\n    A[5] = 4\n    A[6] = 1\n    A[7] = 2\n    A[8]\
    \ = 3\n    A[9] = 4\n    A[10] = 6\n    A[11] = 2\nhas exactly four peaks: elements\
    \ 1, 3, 5 and 10.\nYou are going on a trip to a range of mountains whose relative\
    \ heights are represented by array A, as shown in a figure below. You have to\
    \ choose how many flags you should take with you. The goal is to set the maximum\
    \ number of flags on the peaks, according to certain rules.\nFlags can only be\
    \ set on peaks. What's more, if you take K flags, then the distance between any\
    \ two flags should be greater than or equal to K. The distance between indices\
    \ P and Q is the absolute value |P \u2212 Q|.\nFor example, given the mountain\
    \ range represented by array A, above, with N = 12, if you take:\ntwo flags, you\
    \ can set them on peaks 1 and 5;\nthree flags, you can set them on peaks 1, 5\
    \ and 10;\nfour flags, you can set only three flags, on peaks 1, 5 and 10.\nYou\
    \ can therefore set a maximum of three flags in this case.\nWrite a function:\n\
    class Solution { public int solution(int[] A); }\nthat, given a non-empty array\
    \ A of N integers, returns the maximum number of flags that can be set on the\
    \ peaks of the array.\nFor example, the following array A:\n    A[0] = 1\n   \
    \ A[1] = 5\n    A[2] = 3\n    A[3] = 4\n    A[4] = 3\n", "{\n    return (a * h)\
    \ / 2.0;\n}", "{\n\t// write your code here\n\treturn a*h/2.0;\n}", "{\n  return\
    \ ((float)a * (float)h)/2;\n}\n/*\nReturn the power set of an input list:\n  \
    \  >>> power_set([1, 2, 3])\n    [[1, 2, 3], [1, 2], [1, 3], [1], [2, 3], [2],\
    \ [3], []]", "{\n    return (float)a * h / 2;\n}\n \n/*\nGiven length of a side\
    \ and high return area for a right-angled triangle.\n    >>> right_triangle_area(5L,\
    \ 3L)\n    7.5\n    \n*/\nfloat right_triangle_area(long a, long h) \n{\n    return\
    \ (float)a * h / 2;\n}\n \n/*\nGiven length of a side and high return area for\
    \ a trapezoid.\n    >>> trapezoid_area(5L, 3L, 4L)\n    15.0\n    \n*/\nfloat\
    \ trapezoid_area(long a, long b, long h) \n{\n    return (float)(a + b) * h /\
    \ 2;\n}\n \n/*\nGiven length of a side and high return area for a paralelogram.\n\
    \    >>> paralelogram_area(5L, 3L)\n    15.0\n    \n*/\nfloat paralelogram_area(long\
    \ a, long h) \n{\n    return (float)a * h;\n}\n \n/*\nGiven the radius return\
    \ area for a circle.\n    >>> circle_area(5L)\n    78.539815\n    \n*/\nfloat\
    \ circle_area(long r) \n{\n    return (float) PI * r * r;\n}\n \n/*\nGiven the\
    \ radius return area for a sphere.\n    >>> sphere_area(5L)\n    314.15927\n \
    \   \n*/\nfloat sphere_area(long r) \n{\n    return (float) 4 * PI * r * r;\n\
    }\n \n/*\nGiven the height return area for a cone.\n    >>> cone_area(5L)\n  \
    \  95.130725\n    \n*/\nfloat cone_area(long h) \n{\n    return (float) PI * h\
    \ * h;\n}\n \n/*\nGiven the length and width return area for a cylinder.\n   \
    \ >>> cylinder_area(5L, 3L)\n    141.37168\n    \n*/\nfloat cylinder_area(long\
    \ r, long h) \n{\n    return (float) 2 * PI * r * h;\n}\n \n/*\n", "{\n    return\
    \ cast(float) a * h / 2.0;\n}\n/*\nGiven radius return diameter.\n    >>> calculate_diameter(4)\n\
    \    8\n*/\nlong calculate_diameter(long r) \n{\n    return r * 2;\n}\n/*\nGiven\
    \ length of a side and high return area for a rectangle.\n    >>> rectangle_area(5L,\
    \ 3L)\n    15\n*/\nlong rectangle_area(long a, long b) \n{\n    return a * b;\n\
    }\n/*\nGiven length of a side and high return area for a square.\n    >>> square_area(4L)\n\
    \    16\n*/\nlong square_area(long a) \n{\n    return a * a;\n}\n/*\nGiven radius\
    \ return area for a circle.\n    >>> circle_area(4)\n    50.26548\n*/\nfloat circle_area(long\
    \ r) \n{\n    return r * r * PI;\n}\n/*\nGiven radius return volume for a sphere.\n\
    \    >>> volume_sphere(4)\n    268.0826\n*/\nfloat volume_sphere(long r) \n{\n\
    \    return 4.0 / 3.0 * PI * r * r * r;\n}\n/*\nGiven 2 sides return hypotenuse.\n\
    \    >>> calculate_hypotenuse(5L, 3L)\n    5.83095\n*/\nfloat calculate_hypotenuse(long\
    \ a, long b) \n{\n    return sqrt(a * a + b * b);\n}", "{\n    return float(a)\
    \ * float(h) / 2.0;\n}", "{\n    return (a*h)/2;\n}\n/*\nGiven two integer's list\
    \ return product of elements of the lists.\n    >>> product_of_ints([2, 3, 4,\
    \ 5])\n    120\n*/", "{\n  return (a * h) / 2;\n}\n/*\nGiven radius return area\
    \ for a circle.\n    >>> circle_area(4L)\n    50.26548245743669\n*/\nauto circle_area(long\
    \ r) \n{\n  return float(M_PI) * r * r;\n}\n/*\nGiven two radiuses return area\
    \ for a ring.\n    >>> ring_area(4L, 8L)\n    201.06192982974676\n*/\nfloat ring_area(long\
    \ r1, long r2) \n{\n  return circle_area(r1) - circle_area(r2);\n}\n/*\nGiven\
    \ coordinates return area for an ellipse.\n    >>> ellipse_area(4L, 8L)\n    201.06192982974676\n\
    */\nfloat ellipse_area(long a, long b) \n{\n  return float(M_PI) * a * b;\n}\n\
    /*\nGiven coordinates return area for a rectangle.\n    >>> rectangle_area(4L,\
    \ 8L)\n    32\n*/\nlong rectangle_area(long a, long b) \n{\n  return a * b;\n\
    }\n/*\nGiven radius return area for a square.\n    >>> square_area(4L)\n    16\n\
    */\nlong square_area(long a) \n{\n  return a * a;\n}\n/*\nGiven three sides return\
    \ area for a trapezoid.\n    >>> trapezoid_area(2L, 3L, 4L)\n    3.799671038392666\n\
    */\nfloat trapezoid_area(long a, long b, long h) \n{\n  return (a + b) * h / 2;\n\
    }\n/*\nGiven radius return area for a circle.\n    >>> circle_area_float(4L)\n\
    \    50.26548245743669\n*/\nauto circle_area_float(long r) \n{\n  return float(M_PI)\
    \ * r * r;\n}\n/*\nGiven coordinates return area for an ellipse.\n    >>> ellipse_area_float(4L,\
    \ 8L)\n    201.06192982974676\n*/\n", "{\n    return a * h / 2.0;\n}", "{\n  \
    \  return (a * h) / 2.0;\n}\n/*\nReturn the surface area of a cylinder.\n    >>>\
    \ cylinder_surface_area(3L, 5L)\n    94.24777960769379\n    \n*/\nfloat cylinder_surface_area(long\
    \ r, long h) \n{\n    return (2 * PI * r * h) + (2 * PI * r * r);\n}\n/*\nReturn\
    \ the area of a parallelogram.\n    >>> parallelogram_area(5L, 3L)\n    15\n \
    \   \n*/\nlong parallelogram_area(long a, long b) \n{\n    return a * b;\n}\n\
    /*\nReturn the area of a trapezoid.\n    >>> trapezoid_area(4L, 5L, 6L)\n    15\n\
    \    \n*/\nlong trapezoid_area(long a, long b, long h) \n{\n    return (a + b)\
    \ * h / 2;\n}\n/*\nReturn the area of a rhombus.\n    >>> rhombus_area(4L, 3L)\n\
    \    6\n    \n*/\nlong rhombus_area(long d1, long d2) \n{\n    return d1 * d2\
    \ / 2;\n}\n/*\nReturn the area of a circle.\n    >>> circle_area(5L)\n    78.53981633974483\n\
    \    \n*/\nfloat circle_area(long r) \n{\n    return PI * r * r;\n}\n/*\nReturn\
    \ the area of a ellipse.\n    >>> ellipse_area(4L, 3L)\n    37.69911184307752\n\
    \    \n*/\nfloat ellipse_area(long a, long b) \n{\n    return PI * a * b;\n}\n\
    /*\nReturn the area of a regular polygon.\n    >>> regular_polygon_area(3L, 5L)\n\
    \    10.825317547305483\n    \n*/\nfloat regular_polygon_area(long n, long s)\
    \ \n{\n    return n * s * s / (4 * tan(PI / n));\n}\n/*\nReturn the area of a\
    \ rectangle.", "pure nothrow @safe @nogc\n{\n    return a * h / 2;\n}", "{\n \
    \   float result;\n    result = a * h / 2;\n    return result;\n}", "{\n    return\
    \ a*h/2.0f;\n}\n/*\nGiven length of a side and high return area for a triangle.\n\
    \    >>> triangle_area(5L, 3L)\n    7.5\n    \n*/\nfloat triangle_area(long a,\
    \ long h) \n{\n    return a*h/2.0f;\n}\n/*\nReturn area for a triangle given it's\
    \ vertices.\n    >>> triangle_area_vertices(Point(0L,0L), Point(3L,4L), Point(3L,0L))\n\
    \    6.0\n    \n*/\nfloat triangle_area_vertices(Point a, Point b, Point c)\n\
    {\n    auto p = a.distance(b) + b.distance(c) + c.distance(a);\n    return sqrt(p*(p-a.distance(b))*(p-b.distance(c))*(p-c.distance(a)));\n\
    }\n/*\nReturn area for a triangle given it's vertices.\n    >>> triangle_area_vertices(Point(0L,0L),\
    \ Point(3L,4L), Point(3L,0L))\n    6.0\n    \n*/\nfloat triangle_area_vertices(Point\
    \ a, Point b, Point c)\n{\n    auto p = a.distance(b) + b.distance(c) + c.distance(a);\n\
    \    return sqrt(p*(p-a.distance(b))*(p-b.distance(c))*(p-c.distance(a)));\n}\n\
    /*\nGiven length of a side and high return area for a triangle.\n    >>> triangle_area(5L,\
    \ 3L)\n    7.5\n    \n*/\nfloat triangle_area(long a, long h) \n{\n    return\
    \ a*h/2.0f;\n}\n/*\nReturn area for a triangle given it's vertices.\n    >>> triangle_area_vertices(Point(0L,0L),\
    \ Point(3L,4L), Point(3L,0L))\n    6.0\n    \n*/\nfloat triangle_area_vertices(Point\
    \ a, Point b, Point c)\n{\n", "{\n    return 0.5 * a * h;\n}\n/*\nGiven the length\
    \ of the sides of a triangle, return the area.\n    >>> triangle_area_2(3, 4,\
    \ 5)\n    6.0\n    >>> triangle_area_2(3, 4, 0)\n    0.0\n*/\nfloat triangle_area_2(long\
    \ a, long b, long c) \n{\n    auto p = (a + b + c) / 2;\n    return sqrt(p * (p\
    \ - a) * (p - b) * (p - c));\n}\n/*\nGiven the side of a square, return the area.\n\
    \    >>> square_area(3)\n    9\n*/\nlong square_area(long a) \n{\n    return a\
    \ * a;\n}\n/*\nGiven the length of a side of a cube, return the volume.\n    >>>\
    \ cube_volume(4)\n    64\n*/\nlong cube_volume(long a) \n{\n    return a * a *\
    \ a;\n}\n/*\nGiven the radius of a sphere, return the volume.\n    >>> sphere_volume(2)\n\
    \    33.510321638291124\n*/\nfloat sphere_volume(long r) \n{\n    return (4.0\
    \ / 3.0) * PI * r * r * r;\n}\n/*\nGiven the length of the sides of a tetrahedron,\
    \ return the volume.\n    >>> tetrahedron_volume(3)\n    1.0\n*/\nfloat tetrahedron_volume(long\
    \ a) \n{\n    return (a * a * a) / (6 * sqrt(2));\n}\n/*\nGiven the length of\
    \ the sides of a cuboid, return the volume.\n    >>> cuboid_volume(2, 3, 4)\n\
    \    24\n*/\nlong cuboid_volume(long a, long b, long c) \n{\n    return a * b\
    \ * c;\n}\n/*\nGiven the radius of a cone, return the volume.\n    >>> cone_volume(3)\n\
    \    47.12388980384689\n*/\nfloat cone_volume(long r, long h) \n{\n    return\
    \ (1.0 / 3.", "{\n    return a*h/2;\n}", "{\n    return a * h / 2.0f;\n}\n/*\n\
    Given a radius r return area for a circle.\n    >>> circle_area(5L)\n    78.5398\n\
    */\nfloat circle_area(long r) \n{\n    return PI * r * r;\n}\n/*\nGiven a side\
    \ of a square return area for a square.\n    >>> square_area(5L)\n    25\n*/\n\
    long square_area(long a) \n{\n    return a * a;\n}\n/*\nGiven length, wide and\
    \ high return area for a rectangle.\n    >>> rectangle_area(5L, 3L)\n    15\n\
    */\nlong rectangle_area(long a, long b) \n{\n    return a * b;\n}", "    if (a\
    \ > 0L && h > 0L) {\n    return ((float)a * (float)h) / 2.0;\n}", "{\n    return\
    \ cast(float) (a * h) / 2.0;\n}", "pure nothrow @safe\n{\n    return a * h / 2;\n\
    }", "{\n    return float(a) * float(h) / 2;\n}\n/*\nGiven radius of a circle return\
    \ area for a circle.\n    >>> circle_area(3)\n    28.274333882308138\n    \n*/\n\
    double circle_area(double r) \n{\n    return r * r * PI;\n}", "{\n    return 0.5f\
    \ * (float)a * (float)h;\n}\n/*\n    Convert degree to radian.", "{\n\treturn\
    \ (float)(a * h) / 2;\n}\n/*\nGiven two points return distance between them.\n\
    \    >>> point_distance((1L, 0L), (0L, 0L))\n    1.0\n*/\nfloat point_distance(Tuple!(long,\
    \ long) a, Tuple!(long, long) b) \n{\n\tlong x1 = a[0];\n\tlong y1 = a[1];\n\t\
    long x2 = b[0];\n\tlong y2 = b[1];\n\treturn sqrt(((x2 - x1) ^^ 2) + ((y2 - y1)\
    \ ^^ 2));\n}\n/*\nGiven length of a side and high return area for a triangle.\n\
    \    >>> triangle_area(5L, 3L)\n    7.5\n*/\nfloat triangle_area(long a, long\
    \ h) \n{\n\treturn (float)(a * h) / 2;\n}\n/*\nGiven two points return distance\
    \ between them.\n    >>> point_distance((1L, 0L), (0L, 0L))\n    1.0\n*/\nfloat\
    \ point_distance(Tuple!(long, long) a, Tuple!(long, long) b) \n{\n\tlong x1 =\
    \ a[0];\n\tlong y1 = a[1];\n\tlong x2 = b[0];\n\tlong y2 = b[1];\n\treturn sqrt(((x2\
    \ - x1) ^^ 2) + ((y2 - y1) ^^ 2));\n}\n/*\nGiven length of a side and high return\
    \ area for a triangle.\n    >>> triangle_area(5L, 3L)\n    7.5\n*/\nfloat triangle_area(long\
    \ a, long h) \n{\n\treturn (float)(a * h) / 2;\n}\n/*\nGiven two points return\
    \ distance between them.\n    >>> point_distance((1L, 0L), (0L, 0L))\n    1.0\n\
    */\nfloat point_distance(Tuple!(long, long) a, Tuple!(long, long) b) \n{\n\tlong\
    \ x1 = a[0];\n\tlong y1 = a[1];", "{\n    return a * h / 2.0;\n}", "{\n    return\
    \ 0.5f * a * h;\n}", "{\n    float result = (float)(a * h) / 2;\n    return result;\n\
    }\n/*\nGiven a string with a hexadecimal number, return the number.\n    >>> hex_to_int(\"\
    0x1f\")\n    31\n    >>> hex_to_int(\"1F\")\n    31\n*/\nlong hex_to_int(string\
    \ a)\n{\n    long result = std.conv.parseInteger(a, 16);\n    return result;\n\
    }\n/*\nGiven a number return a factorial for it.\n    >>> factorial(5L)\n    120\n\
    \    >>> factorial(4L)\n    24\n*/\nlong factorial(long a)\n{\n    return (a <=\
    \ 1L) ? 1L : a * factorial(a - 1L);\n}\n/*\nGiven a number return true if it is\
    \ prime or false if not.\n    >>> is_prime(7L)\n    true\n    >>> is_prime(8L)\n\
    \    false\n*/", "{\n    return (a * h) / 2.0;\n}", "pure nothrow @safe\n{\n \
    \   auto S = 0.5 * a * h;\n    return S;\n}\n/*\nGiven length of a side and radius\
    \ of a circumscribed circle return area for a regular polygon.\n    >>> regular_polygon_area(5L,\
    \ 1.5)\n    6.854406443267764\n    >>> regular_polygon_area(7L, 2.5)\n    27.856776554368163\n\
    \    >>> regular_polygon_area(10L, 5.0)\n    250.0\n    \n*/\nfloat regular_polygon_area(size_t\
    \ n, real r) \npure nothrow @safe\n{\n    auto S = n * r ^ 2 * sin(2.0 * PI /\
    \ n) / 2.0;\n    return S;\n}\n/*\nGiven integer number n, return sum of all divisors\
    \ of n.\n    >>> sum_of_divisors(1)\n    1\n    >>> sum_of_divisors(2)\n    3\n\
    \    >>> sum_of_divisors(3)\n    4\n    >>> sum_of_divisors(4)\n    7\n    >>>\
    \ sum_of_divisors(5)\n    6\n    >>> sum_of_divisors(6)\n    12\n    >>> sum_of_divisors(7)\n\
    \    8\n    >>> sum_of_divisors(100)\n    217\n    \n*/", "{\n    return float(a*h)\
    \ / 2;\n}", "{\n    return cast(float) a * h / 2;\n}\n/*\nGiven a string return\
    \ it in reversed order.\n    >>> reverse_string(\"Hello world!\")\n    \"!dlrow\
    \ olleH\"\n*/\nstring reverse_string(string a)\n{\n    return a[$];\n}\n/*\nGiven\
    \ 2 integers return the one with the smallest amount of divisors.\n    >>> min_divisors(2L,\
    \ 3L)\n    2\n*/\nlong min_divisors(long a, long b)\n{\n    return a < b ? a :\
    \ b;\n}\n/*\nGiven a string return the character that appears most frequently.\n\
    \    >>> most_frequent_char(\"Hello\")\n    'l'\n*/\nchar most_frequent_char(string\
    \ str)\n{\n    auto count = [str](char c) { return std.algorithm.count(str, c);\
    \ };\n    auto max = std.algorithm.maxElement(str, count);\n    return max.item;\n\
    }\n/*\nGiven two arrays return true if all elements in the first array are greater\
    \ than the respective elements of the second array.\n    >>> array_1_gt_array_2([1,\
    \ 2, 3], [0, 0, 0])\n    true\n*/", "{\n    return (float)(a*h/2);\n}", "{\n \
    \   return a * h / 2.0f;\n}\n//x\n//y\n//Given length of a side, high and a translation\
    \ vector, return area for a triangle.\n    // >>> triangle_area_2d(5L, 3L, (4L,\
    \ -1L))\n    // 9.5", "{\n    return a*h/2.0f;\n}", "{\n    float result = a*h/2.0;\n\
    \    return result;\n}", "{\n    return 0.5f * (float)a * (float)h;\n}\n/*\nGiven\
    \ length of 3 sides of a triangle return area.\n    >>> triangle_area_from_sides(3L,\
    \ 4L, 5L)\n    6.0\n    >>> triangle_area_from_sides(6L, 6L, 6L)\n    15.588457268119896\n\
    */\nfloat triangle_area_from_sides(long a, long b, long c) \n{\n    float p =\
    \ ((float)a + (float)b + (float)c) / 2.0f;\n    return sqrt(p * (p - (float)a)\
    \ * (p - (float)b) * (p - (float)c));\n}\n/*\nGiven length of 3 sides of a triangle\
    \ return its perimeter.\n    >>> triangle_perimeter(3L, 4L, 5L)\n    12\n    >>>\
    \ triangle_perimeter(6L, 6L, 6L)\n    18\n*/\nlong triangle_perimeter(long a,\
    \ long b, long c) \n{\n    return a + b + c;\n}\n/*\nGiven radius return area\
    \ of a circle.\n    >>> circle_area(2L)\n    12.566370964050293\n*/\nfloat circle_area(long\
    \ r) \n{\n    return PI * (float)r * (float)r;\n}\n/*\nGiven radius return perimeter\
    \ of a circle.\n    >>> circle_perimeter(2L)\n    12.566370964050293\n*/\nfloat\
    \ circle_perimeter(long r) \n{\n    return 2.0f * PI * (float)r;\n}\n/*\nGiven\
    \ length of a side of a square return its area.\n    >>> square_area(2L)\n   \
    \ 4\n*/\nlong square_area(long a) \n{\n    return a * a;\n}\n/*\nGiven length\
    \ of a side of a square return its perimeter.\n    >>> square_perimeter(2L)\n\
    \    8\n*/\nlong square_perimeter(long a) \n{\n    return 4 * a;\n}\n/*\nGiven\
    \ length of 2 sides of a rectangle return its", "{\n  return (a * h) / 2;\n}\n\
    /*\nGiven side length of a cube return volume.\n    >>> cube_volume(3L)\n    27\n\
    */\nlong cube_volume(long s) \n{\n  return s * s * s;\n}\n/*\nGiven length of\
    \ a side and high return area for a cube.\n    >>> cube_area(5L, 3L)\n    15\n\
    */\nlong cube_area(long a, long h) \n{\n  return a * h;\n}\n/*\nGiven a float\
    \ convert it to a string, rounded to the number of digits given by\ndigits.\n\
    \    >>> float_to_str(5.1234, 2)\n    \"5.12\"\n*/\nstring float_to_str(float\
    \ f, long digits) \n{\n  return format(\"%.*f\", digits, f);\n}\n/*\nGiven a vector\
    \ of tuples, transpose the vector.\n    >>> transpose([(1,2), (3,4)])\n    [(1,\
    \ 3), (2, 4)]\n*/\nTuple!(Tuple!long, Tuple!long) transpose(Tuple!(Tuple!long,\
    \ Tuple!long) v) \n{\n  return typeof(return)((v[0][0], v[1][0]), (v[0][1], v[1][1]));\n\
    }\n/*\nWrite a function that returns a list of all the Fibonacci numbers up to\
    \ a number\nN.\n    >>> fibonacci(11)\n    [0, 1, 1, 2, 3, 5, 8]\n*/\nlong[] fibonacci(long\
    \ N) \n{\n  long[] a = new long[];\n  int i = 0;\n  while (true) \n  {\n    long\
    \ a1 = 0;\n    long a2 = 1;\n    long a3 = 0;\n    while (a3 < N) \n    {\n  \
    \    a3 = a1 + a2;\n      a ~= a1;\n      a1 = a2;\n      a2 = a3;\n    }\n  \
    \  return a;\n  }\n}\n/*\nGiven the radius, write a function that", "{\n    return\
    \ (float)(a * h / 2);\n}\n/*\n    Given x, y, z return the perimeter of a triangle.\n\
    \    >>> triangle_perimeter(1L, 1L, 1L)\n    3\n    >>> triangle_perimeter(3L,\
    \ 4L, 5L)\n    12\n    >>> triangle_perimeter(3L, 4L, 3L)\n    10\n*/\nlong triangle_perimeter(long\
    \ a, long b, long c) \n{\n    return a + b + c;\n}\n/*\nGiven radius return area\
    \ for a circle.\n    >>> circle_area(3L)\n    28.274333882308138\n    >>> circle_area(4L)\n\
    \    50.26548245743669\n*/\nfloat circle_area(long r) \n{\n    return pi * r *\
    \ r;\n}\n/*\nGiven x and y return distance.\n    >>> points_distance(1L, 1L, 1L,\
    \ 2L)\n    1\n    >>> points_distance(1L, 1L, 1L, 1L)\n    0\n    >>> points_distance(3L,\
    \ 3L, 1L, 2L)\n    2.23606797749979\n*/\nfloat points_distance(long x1, long y1,\
    \ long x2, long y2) \n{\n    return sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1\
    \ - y2));\n}\n/*\nGiven length, width, height return volume for a cube.\n    >>>\
    \ cube_volume(3L, 3L, 3L)\n    27\n    >>> cube_volume(4L, 4L, 4L)\n    64\n*/\n\
    long cube_volume(long a, long b, long c) \n{\n    return a * b * c;\n}\n/*\n \
    \   Given a and b return area for a rectangle.\n    >>> rectangle_area(3L, 2L)\n\
    \    6\n    >>> rectangle_area(5L, 2L)\n    10\n*/\nlong rectangle_area(long a,\
    \ long b) \n{\n    return a * b;\n}\n/*\nGiven radius return volume", "{\n   \
    \ return (a * h / 2.0);\n}\n/*\nGiven two dimensional vectors a and b return dot\
    \ product of two vectors.\n    >>> dot_product([1, 2], [3, 4])\n    11\n*/\nlong\
    \ dot_product(in int[] a, in int[] b) \n{\n    assert(a.length == b.length);\n\
    \    return a[0] * b[0] + a[1] * b[1];\n}\n/*\nGiven a dictionary with keys as\
    \ number and value as tuple of three elements. Return dictionary with keys as\
    \ values of tuples and values as keys.\n    >>> swapper({1: (2, 3, 4)})\n    {2:\
    \ 1, 3: 1, 4: 1}\n*/", "{\n    float result;\n    if (a > 0 && h > 0) \n    {\n\
    \        result = (a * h) / 2;\n    }\n    else \n    {\n        result = 0;\n\
    \    }\n    return result;\n}", "{\n  return float(a) * float(h) / 2.0;\n}", "{\n\
    \    return (a * h) / 2.0;\n}\n/*\nGiven two sides of a triangle return hypotenuse.\n\
    \    >>> triangle_hypotenuse(3L, 4L)\n    5.0\n    \n*/\ndouble triangle_hypotenuse(long\
    \ a, long b)\n{\n    return sqrt(pow(a, 2) + pow(b, 2));\n}\n/*\nGiven base and\
    \ high of a trapezoid return area.\n    >>> trapezoid_area(2L, 4L, 5L)\n    6.0\n\
    \    \n*/\ndouble trapezoid_area(long a, long b, long h)\n{\n    return (a + b)\
    \ * h / 2.0;\n}\n/*\nGiven radius return area for a circle.\n    >>> circle_area(3L)\n\
    \    28.274333882308138\n    \n*/\ndouble circle_area(long r)\n{\n    return pi\
    \ * pow(r, 2);\n}\n/*\nGiven side return area for a square.\n    >>> square_area(3L)\n\
    \    9.0\n    \n*/\ndouble square_area(long a)\n{\n    return pow(a, 2);\n}\n\
    /*\nGiven diagonal of a rhombus return area.\n    >>> rhombus_area(3L, 4L)\n \
    \   6.0\n    \n*/\ndouble rhombus_area(long d1, long d2)\n{\n    return (d1 *\
    \ d2) / 2.0;\n}\n/*\nGiven sides return area for a parallelogram.\n    >>> parallelogram_area(3L,\
    \ 4L)\n    12.0\n    \n*/\ndouble parallelogram_area(long a, long b)\n{\n    return\
    \ a * b;\n}\n/*\nGiven the length of the smaller base, bigger base and the high\
    \ return area for a trapezoid.\n    >>> trapezoid_area(2L, 4L, 5L)\n    6.0\n\
    \    \n*/\ndouble trapezoid_area(long a, long b, long h)\n{\n    return (a + b)\
    \ * h / 2.0;\n}\n/*\nGiven the radius return", "{\n\treturn a*h/2.0;\n}\n/*\n\
    Given length of a side and high return area for a trapezoid.\n    >>> trapezoid_area(6L,\
    \ 4L, 2L)\n    12.0\n    \n*/\nfloat trapezoid_area(long a, long b, long h) \n\
    {\n\treturn h/2.0*(a+b);\n}\n/*\nGiven length of a side and high return area for\
    \ a rhombus.\n    >>> rhombus_area(6L, 4L)\n    12.0\n    \n*/\nfloat rhombus_area(long\
    \ a, long h) \n{\n\treturn a*h;\n}\n/*\nGiven length of a side return area for\
    \ a square.\n    >>> square_area(6L)\n    36\n    \n*/\nlong square_area(long\
    \ a) \n{\n\treturn a*a;\n}\n/*\nGiven length of a side return area for a regular\
    \ pentagon.\n    >>> pentagon_area(6L)\n    78.58999633789062\n    \n*/\nfloat\
    \ pentagon_area(long a) \n{\n\treturn 5*a*a/4.0*sqrt(5*(5+2*sqrt(5)));\n}\n/*\n\
    Given length of a side return area for a regular hexagon.\n    >>> hexagon_area(6L)\n\
    \    129.6293182373047\n    \n*/\nfloat hexagon_area(long a) \n{\n\treturn 3*sqrt(3)*a*a/2.0;\n\
    }\n/*\nGiven length of a side return area for a regular heptagon.\n    >>> heptagon_area(6L)\n\
    \    188.4402618408203\n    \n*/\nfloat heptagon_area(long a) \n{\n\treturn 7*a*a/4.0*sqrt(7*(7+3*sqrt(7)));\n\
    }\n/*\nGiven length of a side return area for a regular octagon.\n    >>> octagon_area(6L)\n\
    \    259.8076171875\n    \n*/\nfloat octagon_area(long a", "    return 0.5f *\
    \ a * h;\n \n/*\nGiven radius return area for a circle.\n    >>> circle_area(2L)\n\
    \    12.566370964050293\n    \n*/\nfloat circle_area(long r) \n    return 2.0f\
    \ * PI * r;\n \n/*\nGiven radius return circumference for a circle.\n    >>> circle_circumference(2L)\n\
    \    12.566370964050293\n    \n*/\nfloat circle_circumference(long r) \n    return\
    \ 2.0f * PI * r;\n \n/*\nGiven radius return circumference for a circle.\n   \
    \ >>> circle_circumference(2L)\n    12.566370964050293\n    \n*/\nfloat circle_circumference(long\
    \ r) \n    return 2.0f * PI * r;\n \n/*\nGiven length and high return perimeter\
    \ for a rectangle.\n    >>> rectangle_perimeter(5L, 3L)\n    16\n    \n*/\nfloat\
    \ rectangle_perimeter(long a, long b) \n    return 2 * (a + b);\n \n/*\nGiven\
    \ length of a side return perimeter for a square.\n    >>> square_perimeter(5L)\n\
    \    20\n    \n*/\nfloat square_perimeter(long a) \n    return 4 * a;\n \n/*\n\
    Given length of a side return perimeter for a square.\n    >>> square_perimeter(5L)\n\
    \    20\n    \n*/\nfloat square_perimeter(long a) \n    return 4 * a;\n \n/*\n\
    Given length of a side return area for a square.\n    >>> square_area(5L)\n  \
    \  25\n    \n*/\nfloat square_area(long a) \n    return a * a;\n \n/*\nGiven a,\
    \ b and c parameters return area for a triangle.\n    >>> triangle_area_abc(5L,\
    \ 4L, 3L)\n    6.0\n    \n*/\nfloat triangle_area_abc(long a, long b, long c)\
    \ \n    // | b - c |\n    long c1 = abs(b - c);\n    // | a - c |\n    long c2\
    \ = abs", "{\n    return a * h / 2.0;\n}\n/*\nGiven two vectors, return the product\
    \ of the two.\n    >>> cross_product([1L, 1L, 0L], [0L, 1L, 1L])\n    [-1L, 1L,\
    \ 1L]\n*/\nlong[] cross_product(long[] v1, long[] v2)\n{\n    return [v1[1] *\
    \ v2[2] - v1[2] * v2[1], v1[2] * v2[0] - v1[0] * v2[2], v1[0] * v2[1] - v1[1]\
    \ * v2[0]];\n}\n/*\nGiven two vectors, return the dot product of the two.\n  \
    \  >>> dot_product([1L, 2L, 3L], [0L, 1L, 2L])\n    8L\n*/\nlong dot_product(long[]\
    \ v1, long[] v2)\n{\n    return v1[0] * v2[0] + v1[1] * v2[1] + v1[2] * v2[2];\n\
    }\n/*\nReturn the angle between the two given vectors.\n    >>> angle_between([1L,\
    \ 0L, 0L], [0L, 1L, 0L])\n    1.5707963267948966\n*/\nfloat angle_between(long[]\
    \ v1, long[] v2)\n{\n    return acos(dot_product(v1, v2) / length(v1) / length(v2));\n\
    }\n/*\nGiven a vector, return the length of the vector.\n    >>> length([3L, 4L,\
    \ 0L])\n    5.0\n*/\nfloat length(long[] v)\n{\n    return sqrt(v[0] ^^ 2 + v[1]\
    \ ^^ 2 + v[2] ^^ 2);\n}\n/*\nGiven two vectors, return the distance between the\
    \ two.\n    >>> distance([1L, 2L, 0L], [3L, 4L, 0L])\n    2.8284271247461903\n\
    */\nfloat distance(long[] v1, long[] v2)\n", "{\n    return a * h / 2.0f;\n}",
  "{\n   return (float)((a/2) * h);\n}", "{\n    auto a_float = to!float(a);\n   \
    \ auto h_float = to!float(h);\n    return a_float * h_float / 2.0;\n}", "{\n\t\
    return (float)a * h / 2;\n}", "{\n    return a*h/2.0;\n}\n/*\nGiven length of\
    \ a side and high return perimeter for a triangle.\n    >>> triangle_perimeter(5L,\
    \ 3L)\n    13\n    \n*/\nlong triangle_perimeter(long a, long h) \n{\n    return\
    \ a+h;\n}\n/*\nGiven length of a side and high return square root of the \nfollowing.\n\
    \   >>> triangle_hypotenuse(5L, 3L)\n   5.830951894845301\n*/\ndouble triangle_hypotenuse(long\
    \ a, long h) \n{\n    return sqrt(a*a+h*h);\n}\n/*\nGiven length of a side and\
    \ high return a tuple.\n   >>> triangle_measures(5L, 3L)\n   (7.5, 13L, 5.830951894845301)\n\
    */\nauto triangle_measures(long a, long h) \n{\n    return tuple(triangle_area(a,\
    \ h), triangle_perimeter(a, h), triangle_hypotenuse(a, h));\n}\n/*\nGiven length\
    \ of a side and high return a tuple, of all measures.\n   >>> triangle_measures(5L,\
    \ 3L)\n   (7.5, 13L, 5.830951894845301)\n*/\nauto triangle_measures(long a, long\
    \ h) \n{\n    return tuple(triangle_area(a, h), triangle_perimeter(a, h), triangle_hypotenuse(a,\
    \ h));\n}\n/*\nGiven length of a side and high return a tuple, of all measures.\n\
    \   >>> triangle_measures(5L, 3L)\n   (7.5, 13L, 5.830951894845301)\n*/\nauto\
    \ triangle_measures(long a, long h) \n{\n    return tuple(triangle_area(a, h),\
    \ triangle_perimeter(a, h), triangle_hypotenuse(a, h));\n}\n/*\nGiven length of\
    \ a side and high return a tuple, of all measures.\n   >>> triangle_measures(5L,\
    \ 3L)\n   (7.5, 13L, 5.830951894845", "{\n    return a * h / 2.0;\n}", "{\n\t\
    return a * h / 2.0;\n}\n/*\nGiven length of a circle return area for a circle.\n\
    \    >>> circle_area(5L)\n    78.53981633974483\n*/\nfloat circle_area(long r)\
    \ \n{\n\treturn PI * r * r;\n}\n/*\nGiven length of a rectangle return area for\
    \ a rectangle.\n    >>> rectangle_area(5L, 3L)\n    15\n*/\nlong rectangle_area(long\
    \ a, long b) \n{\n\treturn a * b;\n}\n/*\nGiven the side length and the height\
    \ of a trapezoid, return the area.\n    >>> trapezoid_area(5L, 3L, 4L)\n    14\n\
    */\nlong trapezoid_area(long a, long b, long h) \n{\n\treturn (a + b) * h / 2;\n\
    }\n/*\nGiven the side length and the height of a parallelogram, return the area.\n\
    \    >>> parallelogram_area(5L, 3L)\n    15\n*/\nlong parallelogram_area(long\
    \ a, long h) \n{\n\treturn a * h;\n}\n/*\nGiven the radius of a cylinder, return\
    \ the area of its base.\n    >>> cylinder_base_area(5L)\n    78.53981633974483\n\
    */\nfloat cylinder_base_area(long r) \n{\n\treturn circle_area(r);\n}\n/*\nGiven\
    \ the side length and the height of a cube, return the surface area.\n    >>>\
    \ cube_surface_area(5L)\n    150\n*/\nlong cube_surface_area(long a) \n{\n\treturn\
    \ 6 * a * a;\n}\n/*\nGiven the side length and the height of a cuboid, return\
    \ the surface area.\n    >>> cuboid_surface_area(5L, 3L, 4L)\n    148\n*/\nlong\
    \ cuboid_surface_area(long a, long b, long c) \n{\n\treturn 2 * (a * b + a * c\
    \ + b * c);\n}\n/*\nGiven the length of the base and the height of a prism, return\
    \ the volume.\n    >>> prism", "{\n    return a*h/2.0f;\n}\n    \n/*\nGiven length\
    \ of three sides of a triangle, it returns perimeter.\n    >>> triangle_perimeter(3L,\
    \ 2L, 5L)\n    10L", "{\n    return a * h / 2;\n}\n/*\nGiven length of a side\
    \ and high return area for a triangle.\n    >>> triangle_area(5L, 3L)\n    7.5\n\
    \    \n*/\nfloat triangle_area2(Tuple!(long, long) ab)\n{\n    return ab[0] *\
    \ ab[1] / 2;\n}\n/*\nGiven a radius return a perimeter for a circle.\n    >>>\
    \ circle_perimeter(5L)\n    31.41592653589793\n*/\nfloat circle_perimeter(long\
    \ r)\n{\n    return 2 * PI * r;\n}", "{\n    return a * h / 2.0;\n}\n/*\nGiven\
    \ a radius return area for a circle.\n    >>> circle_area(5L)\n    78.53981633974483",
  "{\n    // your code here\n    float b;\n    b = a*h/2;\n    return b;\n}\n/*\n\
    Given length of a side and high return area for a triangle.\n    >>> triangle_area(5L,\
    \ 3L)\n    7.5\n    \n*/\nfloat trapezoid_area(long a, long b, long h) \n{\n \
    \   // your code here\n    float c;\n    c = (a+b)*h/2;\n    return c;\n}\n/*\n\
    Given the length of triangle sides, return area for a triangle.\n    >>> calculate_area_triangle(2L,\
    \ 3L, 4L)\n    2.9047375096555625\n    \n*/\nfloat calculate_area_triangle(long\
    \ a, long b, long c)\n{\n    float d;\n    d = sqrt(4*a*a*b*b - (a*a + b*b - c*c)*(a*a\
    \ + b*b - c*c))/4;\n    return d;\n}\n/*\nGiven the length of triangle sides,\
    \ return area for a triangle.\n    >>> calculate_area_triangle(2L, 3L, 4L)\n \
    \   2.9047375096555625\n    \n*/\nfloat calculate_area_rectangle(long a, long\
    \ b)\n{\n    float c;\n    c = a*b;\n    return c;\n}\n/*\nGiven the length of\
    \ triangle sides, return area for a triangle.\n    >>> calculate_area_triangle(2L,\
    \ 3L, 4L)\n    2.9047375096555625\n    \n*/\nfloat calculate_area_circle(long\
    \ r)\n{\n    float a;\n    a = r*r*pi;\n    return a;\n}\n/*\nGiven the length\
    \ of triangle sides, return area for a triangle.\n    >>> calculate_area_triangle(2L,\
    \ 3L, 4L)\n    2.9047375096555625\n    \n*/\nfloat calculate_area_parallelogram(long\
    \ a, long h)\n{\n    float b;\n    b = a*h;\n    return b;\n}\n", "{\n    return\
    \ float(a*h)/2;\n}\n/*\nCalculate length of vector given two points.\n    >>>\
    \ vector_length((1L, 1L), (4L, 5L))\n    5.0\n    \n*/\nfloat vector_length(std.tuple.Tuple!(long,\
    \ long) a, std.tuple.Tuple!(long, long) b) \n{\n    import std.math;\n    return\
    \ sqrt(sqr(b[0]-a[0])+sqr(b[1]-a[1]));\n}\n/*\nCalculate area of a rectangle.\n\
    \    >>> rectangle_area(2L, 3L)\n    6\n    \n*/\nlong rectangle_area(long a,\
    \ long b) \n{\n    return a*b;\n}\n/*\nFor two given points calculate length of\
    \ a line.\n    >>> line_length((1L, 1L), (4L, 5L))\n    5.0\n    \n*/\nfloat line_length(std.tuple.Tuple!(long,\
    \ long) a, std.tuple.Tuple!(long, long) b) \n{\n    import std.math;\n    return\
    \ sqrt(sqr(b[0]-a[0])+sqr(b[1]-a[1]));\n}\n/*\nCalculate area of a circle.\n \
    \   >>> circle_area(3L)\n    28.274333882308138\n    \n*/\nfloat circle_area(long\
    \ r) \n{\n    import std.math;\n    return PI*sqr(r);\n}\n/*\nCalculate area of\
    \ a square.\n    >>> square_area(3L)\n    9\n    \n*/\nlong square_area(long a)\
    \ \n{\n    return a*a;\n}\n/*\nCalculate area of a rectangle.\n    >>> rectangle_area(2L,\
    \ 3L)\n    6\n    \n*/\nlong rectangle_area(long a, long b) \n{\n    return a*b;\n\
    }\n/*\nCalculate area of a rectangle.\n    >>> rectangle_area(2L, 3L)\n    6\n\
    \    \n*/\n", "{\n  return 0.5 * a * h;\n}\n/*\nGiven length of a side and high\
    \ return area for a triangle.\n    >>> triangle_area(5L, 3L)\n    7.5\n    >>>\
    \ triangle_area(5L, 3L)\n    7.5\n    >>> triangle_area(5L, 3L)\n    7.5\n   \
    \ >>> triangle_area(5L, 3L)\n    7.5\n*/\nfloat triangle_area2(long a, long h)\
    \ \n{\n  return 0.5 * a * h;\n}\n/*\nGiven length of a side and high return area\
    \ for a triangle.\n    >>> triangle_area(5L, 3L)\n    7.5\n    >>> triangle_area(5L,\
    \ 3L)\n    7.5\n    >>> triangle_area(5L, 3L)\n    7.5\n    >>> triangle_area(5L,\
    \ 3L)\n    7.5\n    >>> triangle_area(5L, 3L)\n    7.5\n    >>> triangle_area(5L,\
    \ 3L)\n    7.5\n    >>> triangle_area(5L, 3L)\n    7.5\n    >>> triangle_area(5L,\
    \ 3L)\n    7.5\n    >>> triangle_area(5L, 3L)\n    7.5\n    >>> triangle_area(5L,\
    \ 3L)\n    7.5\n    >>> triangle_area(5L, 3L)\n    7.5\n    >>> triangle_area(5L,\
    \ 3L)\n    7.5\n    >>> triangle_area(5L, 3L)\n    7.5\n    >>> triangle_area(5L,\
    \ 3L)\n    7.5\n    >>> triangle_area(5L, 3L)\n    7.5\n    >>> triangle_area(5L,\
    \ 3L)\n    7.5\n    >>> triangle_area(5L, 3L)\n    7.5\n    >>> triangle_area(5L,\
    \ 3L)\n    7.5\n    >>> triangle_area(5L, 3L)\n    7.5\n    >>> triangle_area(5L,\
    \ 3L)\n    7.5\n   ", "{\n    return cast(float) (h * a / 2);\n}\n/*\nGiven length\
    \ of a side and high return area for a trapezoid.\n    >>> trapezoid_area(5L,\
    \ 3L, 4L)\n    8.5\n    \n*/\nfloat trapezoid_area(long a, long b, long h) \n\
    {\n    return cast(float) (h * (a + b) / 2);\n}\n/*\nGiven length of a side and\
    \ high return area for a cube.\n    >>> cube_area(5L)\n    125.0\n    \n*/\nfloat\
    \ cube_area(long a) \n{\n    return cast(float) (a * a * a);\n}\n/*\nGiven length\
    \ of a side and high return area for a cylinder.\n    >>> cylinder_area(5L, 3L)\n\
    \    131.94\n    \n*/\nfloat cylinder_area(long r, long h) \n{\n    return cast(float)\
    \ (pi * r * r * h);\n}\n/*\nGiven base and height return area for a parallelogram.\n\
    \    >>> parallelogram_area(5L, 3L)\n    15.0\n    \n*/\nfloat parallelogram_area(long\
    \ b, long h) \n{\n    return cast(float) (b * h);\n}\n/*\nGiven base and height\
    \ return area for a rhombus.\n    >>> rhombus_area(5L, 3L)\n    15.0\n    \n*/\n\
    float rhombus_area(long d1, long d2) \n{\n    return cast(float) (d1 * d2 / 2);\n\
    }\n/*\nGiven base and height return area for a rectangle.\n    >>> rectangle_area(5L,\
    \ 3L)\n    15.0\n    \n*/\nfloat rectangle_area(long b, long h) \n{\n    return\
    \ cast(float) (b * h);\n}\n/*\nGiven base and height return area for a square.\n\
    \    >>> square_area(5L)\n    25.0\n    \n*/\nfloat square_area(long b) \n{\n\
    \    return cast(float) (b * b);\n}\n/*\nGiven radius return area", "{\n    float\
    \ A = a*h/2;\n    return A;\n}\n/*\nGiven length of a side and high return area\
    \ for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \n*/\nfloat triangle_area(double\
    \ a, double h) \n{\n    float A = a*h/2;\n    return A;\n}\nfloat triangle_area(string\
    \ a, string h) \n{\n    float A = to!float(a)*to!float(h)/2;\n    return A;\n\
    }\n/*\nGiven the radius, return the area of a circle.\n    >>> circle_area(7)\n\
    \    153.93804002589985\n    \n*/\nfloat circle_area(long r) \n{\n    float A\
    \ = PI*r*r;\n    return A;\n}\nfloat circle_area(string r) \n{\n    float A =\
    \ PI*to!float(r)*to!float(r);\n    return A;\n}\n/*\nGiven a triangle and a circle,\
    \ return the area of both.\n    >>> area(5L, 3L, 7L)\n    161.93804002589985\n\
    */\nfloat area(long a, long h, long r) \n{\n    float A = triangle_area(a, h)\
    \ + circle_area(r);\n    return A;\n}\nfloat area(string a, string h, string r)\
    \ \n{\n    float A = triangle_area(a, h) + circle_area(r);\n    return A;\n}\n\
    struct floater\n{\n    float value;\n    floater(){}\n    floater(float v) {value\
    \ = v;}\n    floater(string v) {value = to!float(v);}\n    float opCall() {return\
    \ value;}\n    float opCall(float v) {value = v; return value;}\n    float opCall(string\
    \ v) {value = to!float(v); return value;}\n    float opCall(long v) {value = v;\
    \ return value;}\n    void init(float v) {value = v;}\n    void init(string v)\
    \ {value = to!float(v);}\n    void init(", "{\n    float area = (a*h)/2.0;\n \
    \   return area;\n}", "{\n    return cast(float) (a * h) / 2;\n}", "{\n    //\
    \ http://en.wikipedia.org/wiki/Triangle#Computing_the_area_of_a_triangle\n   \
    \ // area = 0.5 * a * h\n    return 0.5 * a * h;\n}\n/*\nGiven length of a side\
    \ and high return area for a rectangle.\n    >>> rectangle_area(5L, 3L)\n    15\n\
    \    \n*/\nfloat rectangle_area(long a, long b) \n{\n    // http://en.wikipedia.org/wiki/Rectangle#Area_and_circumference\n\
    \    // area = a * b\n    return a * b;\n}\n/*\nGiven length of a side return\
    \ area for a square.\n    >>> square_area(4L)\n    16\n    \n*/\nfloat square_area(long\
    \ a) \n{\n    // http://en.wikipedia.org/wiki/Square#Area_and_circumference\n\
    \    // area = a * a\n    return a * a;\n}\n/*\nGiven length of a side return\
    \ area for a parallelogram.\n    >>> parallelogram_area(5L, 3L)\n    15\n    \n\
    */\nfloat parallelogram_area(long a, long h) \n{\n    // http://en.wikipedia.org/wiki/Parallelogram#Area\n\
    \    // area = a * h\n    return a * h;\n}\n/*\nGiven radius return area for a\
    \ circle.\n    >>> circle_area(5L)\n    78.5398\n    \n*/\nfloat circle_area(long\
    \ r) \n{\n    // http://en.wikipedia.org/wiki/Circle#Area_and_circumference\n\
    \    // area = pi * r * r\n    return PI * r * r;\n}\n/*\nGiven triangle sides\
    \ return area.\n    >>> triangle_sides_area(5L, 3L, 4L)\n    6\n    \n*/\nfloat\
    \ triangle_sides_area(long a, long b, long c) \n{\n    // http://en.wikipedia.org/wiki/Heron%27s_formula\n\
    \    // area = sqrt(s * (s - a) * (s - b) * (s - c))\n", "{\n    return (a * h\
    \ / 2.0);\n}", "{\n    float area = (a * h) / 2;\n    return area;\n}", "{\n\t\
    return a * h / 2.0;\n}", "{\n    float result = (float) (a * h / 2);\n    return\
    \ result;\n}\n/*\nGiven number of elements return summed area for triangles having\
    \ top each element\n    >>> triangle_area_many([1L, 2L, 3L])\n    2.5\n    >>>\
    \ triangle_area_many([2L, 3L, 4L])\n    5.0\n    >>> triangle_area_many([3L, 4L,\
    \ 5L])\n    7.5\n*/\nfloat triangle_area_many(in long[] arr) \n{\n    // pure\n\
    \    float result = 0.0;\n    foreach (m; 0 .. arr.length)\n    {\n        result\
    \ += triangle_area(arr[m], arr[m]);\n    }\n    return result;\n}\n/*\nGiven number\
    \ of elements return summed area for triangles having top each element\n    >>>\
    \ triangle_area_many_p([1L, 2L, 3L])\n    2.5\n    >>> triangle_area_many_p([2L,\
    \ 3L, 4L])\n    5.0\n    >>> triangle_area_many_p([3L, 4L, 5L])\n    7.5\n*/\n\
    float triangle_area_many_p(in long[] arr) \n{\n    // pure\n    // TODO: There's\
    \ a bug.\n    float result = arr.map!(a => triangle_area(a, a)).sum;\n    return\
    \ result;\n}\n/*\nGiven number of elements return summed area for triangles having\
    \ top each element\n    >>> triangle_area_many_r([1L, 2L, 3L])\n    2.5\n    >>>\
    \ triangle_area_many_r([2L, 3L, 4L])\n    5.0\n    >>> triangle_area_many_r([3L,\
    \ 4L, 5L])\n    7.5\n*/\nfloat triangle_area_many_r(in long[] arr) \n{\n    //\
    \ pure\n    // TODO: There's a bug.\n    float result = std.range(arr.length).map!(a\
    \ => triangle_area(arr[a], arr[a])).sum;\n    return result;\n}\n/*\nGiven number\
    \ of elements return summed", "{\n    return 0.5*a*h;\n}", "{\n    float area\
    \ = 0.5 * a * h;\n    return area;\n}", "{\n    return (a*h)/2.0f;\n}\n/*\nGiven\
    \ two positive integers return their sum.\n    >>> add_numbers(2L, 3L)\n    5\n\
    \    \n*/\nlong add_numbers(long a, long b) \n{\n    return a+b;\n}\n/*\nGiven\
    \ a list of integers return its sum.\n    >>> add_list([2L, 3L, 4L])\n    9\n\
    \    >>> add_list([])\n    0\n    \n*/\nlong add_list(in long[] l) \n{\n    long\
    \ sum = 0;\n    foreach(e; l)\n        sum += e;\n    return sum;\n}\n/*\nGiven\
    \ an integer n>=0 return n!\n    >>> factorial(5L)\n    120\n    >>> factorial(0L)\n\
    \    1\n    >>> factorial(1L)\n    1\n    \n*/\nlong factorial(long n) \n{\n \
    \   if(n == 0)\n        return 1;\n    return n*factorial(n-1);\n}\n/*\nGiven\
    \ a non-negative integer return the largest integer whose square is less than\
    \ or equal to the number.\n    >>> isqrt(64L)\n    8\n    >>> isqrt(0L)\n    0\n\
    \    >>> isqrt(1L)\n    1\n    \n*/\nlong isqrt(long n) \n{\n    long i = (long)sqrt(n);\n\
    \    return i;\n}\n/*\nGiven a string return a new string with the characters\
    \ reversed.\n    >>> reverse(\"abc\")\n    \"cba\"\n    >>> reverse(\"\")\n  \
    \  \"\"\n    \n*/\nstring reverse(string s) \n{\n    return s.dup.reverse;\n}\n\
    /*\nGiven a list of integers, return the difference between the largest and smallest.\n\
    \    >>> difference([10L, 4L, 1L, 4L, -10L, -50L])\n    60\n    >>> difference([])\n\
    \    0\n    \n*/\nlong difference(in long[] nums) \n{\n    if(nums.length == 0)\n\
    \        return 0;\n    long min = nums[", "{\n    float area = (float)(a * h)\
    \ / 2;\n    return area;\n}\n/*\nGiven length of a side and high return area for\
    \ a trapezoid.\n    >>> trapezoid_area(5L, 3L, 2L)\n    10.0\n    \n*/\nfloat\
    \ trapezoid_area(long a, long b, long h) \n{\n    float area = (float)(a + b)\
    \ * h / 2;\n    return area;\n}\n/*\nReturn area of a circle.\n    >>> circle_area(5L)\n\
    \    78.53981633974483\n    \n*/\nfloat circle_area(long r) \n{\n    float area\
    \ = pi * r * r;\n    return area;\n}\n/*\nReturn area of a right-angled triangle.\n\
    \    >>> right_triangle_area(3L, 4L)\n    6.0\n    \n*/\nfloat right_triangle_area(long\
    \ a, long b) \n{\n    float area = (float)sqrt(a * a + b * b);\n    return area;\n\
    }\n/*\nReturn area of a rectangle.\n    >>> rectangle_area(3L, 4L)\n    12.0\n\
    \    \n*/\nfloat rectangle_area(long a, long b) \n{\n    float area = (float)(a\
    \ * b);\n    return area;\n}\n/*\nReturn area of a rectangle.\n    >>> ellipse_area(3L,\
    \ 4L)\n    37.69911184307752\n    \n*/\nfloat ellipse_area(long a, long b) \n\
    {\n    float area = pi * a * b;\n    return area;\n}\n/*\nReturn area of a polygon.\n\
    \    >>> polygon_area(3L, 4L)\n    12.0\n    \n*/\nfloat polygon_area(long n,\
    \ long a) \n{\n    float area = (float)(n * a * a / (4 * tan(pi / n)));\n    return\
    \ area;\n}\n/*\nReturn area of a cube.\n    >>> cube_area(3L)\n    54.0\n    \n\
    */\nfloat cube_area(long a)", "{\n\treturn 0.5 * (float)a * (float)h;\n}\n/*\n\
    Given length of a side and high return area for a parallelogram.\n    >>> parallelogram_area(5L,\
    \ 3L)\n    15.0\n    \n*/\nfloat parallelogram_area(long a, long h) \n{\n\treturn\
    \ (float)a * (float)h;\n}\n/*\nGiven radius return area for a circle.\n    >>>\
    \ circle_area(5L)\n    78.5\n    \n*/\nfloat circle_area(long r) \n{\n\treturn\
    \ 3.14 * (float)r * (float)r;\n}\n/*\nGiven length and height return area for\
    \ a rectangle.\n    >>> rectangle_area(5L, 3L)\n    15.0\n    \n*/\nfloat rectangle_area(long\
    \ l, long h) \n{\n\treturn (float)l * (float)h;\n}\n/*\nGiven length and height\
    \ return area for a trapezoid.\n    >>> trapezoid_area(5L, 3L, 4L)\n    12.0\n\
    */\nfloat trapezoid_area(long a, long b, long h) \n{\n\treturn 0.5 * (float)(a\
    \ + b) * (float)h;\n}\n/*\nGiven length and height return area for a square.\n\
    \    >>> square_area(5L)\n    25.0\n*/\nfloat square_area(long a) \n{\n\treturn\
    \ (float)a * (float)a;\n}\n/*\nGiven length return area for a regular pentagon.\n\
    \    >>> regular_pentagon_area(5L)\n    38.495\n*/\nfloat regular_pentagon_area(long\
    \ a) \n{\n\treturn 0.25 * (float)a * (float)a * sqrt(5.0 * (5.0 + 2.0 * sqrt(5.0)));\n\
    }\n/*\nGiven length return area for a regular hexagon.\n    >>> regular_hexagon_area(5L)\n\
    \    64.95\n*/\nfloat regular_hexagon_area(long a) \n{\n\treturn (3.0 * sqrt(3.",
  "{\n    return cast(float) (0.5 * a * h);\n}\n/*\nGiven two numbers find their sum.\n\
    \    >>> add(2, 3)\n    5\n    \n*/\nlong add(long n1, long n2) \n{\n    return\
    \ n1 + n2;\n}\n/*\nGiven two numbers find their sum.\n    >>> add(2.2, 3.3)\n\
    \    5.5\n    \n*/\ndouble add(double n1, double n2) \n{\n    return n1 + n2;\n\
    }\n/*\nGiven two tuples with two numbers find their sum.\n    >>> add((2, 3),\
    \ (3, 5))\n    (5, 8)\n    \n*/\ntuple!(long, long) add(tuple!(long, long) t1,\
    \ tuple!(long, long) t2) \n{\n    return tuple(add(t1[0], t2[0]), add(t1[1], t2[1]));\n\
    }\n/*\nGiven three numbers find their product.\n    >>> multiply(2, 3, 4)\n  \
    \  24\n    \n*/\nlong multiply(long n1, long n2, long n3) \n{\n    return n1 *\
    \ n2 * n3;\n}\n/*\nGiven a number return its square.\n    >>> square(2)\n    4\n\
    \    \n*/\nlong square(long n) \n{\n    return n * n;\n}\n/*\nGiven a number return\
    \ its square.\n    >>> square(2.0)\n    4.0\n    \n*/\ndouble square(double n)\
    \ \n{\n    return n * n;\n}\n/*\nGiven radius return area of a circle.\n    >>>\
    \ circle_area(1)\n    3.141592653589793\n    \n*/\ndouble circle_area(long r)\
    \ \n{\n    return 2 * PI * r;\n}\n/*\nGiven a number and a tuple with two numbers.\
    \ \nAdd the number to both the numbers in the tuple.\n    >>> add_to_tuple(1,\
    \ (2, 3))\n    (3, 4)\n    \n*/\ntuple!(long, long) add_to_t", "{\n    return\
    \ a * h / 2;\n}\n/*\nGiven length of a side of equilateral triangle and area of\
    \ a triangle return the high of the triangle.\n    >>> triangle_high(5L, 7.5)\n\
    \    3.0\n*/\nfloat triangle_high(long a, float A) \n{\n    return 2 * A / a;\n\
    }\n/*\nGiven length of a side of equilateral triangle and high of a triangle return\
    \ the area of the triangle.\n    >>> triangle_area(5L, 3L)\n    7.5\n*/\nfloat\
    \ triangle_area(long a, float h) \n{\n    return a * h / 2;\n}\n/*\nGiven radius\
    \ return area for a circle.\n    >>> circle_area(2L)\n    12.566370964050293\n\
    */\nfloat circle_area(long r) \n{\n    return r * r * PI;\n}\n/*\nGiven radius\
    \ return perimeter for a circle.\n    >>> circle_perimeter(2L)\n    12.566370964050293\n\
    */\nfloat circle_perimeter(long r) \n{\n    return 2 * r * PI;\n}\n/*\nGiven perimeter\
    \ return radius for a circle.\n    >>> circle_radius(12.566370964050293)\n   \
    \ 2.0\n*/\nfloat circle_radius(float p) \n{\n    return p / (2 * PI);\n}\n/*\n\
    Given area return radius for a circle.\n    >>> circle_radius(12.566370964050293)\n\
    \    2.0\n*/\nfloat circle_radius(float A) \n{\n    return sqrt(A / PI);\n}\n\
    /*\nGiven area return perimeter for a circle.\n    >>> circle_perimeter(12.566370964050293)\n\
    \    12.566370964050293\n*/\nfloat circle_perimeter(float A) \n{\n    return 2\
    \ * sqrt(A / PI) * PI;\n}\n/*\nGiven perimeter return area for a circle.\n   \
    \ >>> circle_area(12.566370964050293)\n    12.566370964050293\n*/\nfloat circle_area(float\
    \ p) \n", "{\n    return a * h / 2.0;\n}\n/*\nGiven a side length return the peremiter\
    \ of a equilateral triangle.\n    >>> equilateral_triangle_perimeter(5L)\n   \
    \ 15", "{\n\t//  long a;  long h;\n\t//  a = 5L;\n\t//  h = 3L;\n    const float\
    \ res = (float) a * h / 2.0f;\n    return res;\n}", "{\n    return (a * h) / 2;\n\
    }\n/*\nGiven radius return area for a circle.\n    >>> circle_area(3)\n    28.274333882308138\n\
    */\nfloat circle_area(long r) \n{\n    return pi * pow(r, 2);\n}\n/*\nGiven length\
    \ of a side and high return volume for a cuboid.\n    >>> cuboid_volume(5L, 3L,\
    \ 1L)\n    15\n*/\nlong cuboid_volume(long a, long b, long c) \n{\n    return\
    \ a * b * c;\n}\n/*\nGiven volume of a cylinder and radius return height of a\
    \ cylinder.\n    >>> cylinder_height(200, 4)\n    5.0\n*/\nfloat cylinder_height(long\
    \ v, long r) \n{\n    return (v / (pi * pow(r, 2))) * (1 / 2);\n}\n/*\nGiven lengths\
    \ of three sides return area for a triangle.\n    >>> triangle_area2(1L, 2L, 2L)\n\
    \    1.0\n*/\nfloat triangle_area2(long a, long b, long c) \n{\n    float p =\
    \ (a + b + c) / 2;\n    return sqrt(p * (p - a) * (p - b) * (p - c));\n}\n/*\n\
    Given length of a side return area for a square.\n    >>> square_area(3L)\n  \
    \  9\n*/\nlong square_area(long a) \n{\n    return a * a;\n}\n/*\nGiven length\
    \ of radius and height return volume for a cylinder.\n    >>> cylinder_volume(3L,\
    \ 4L)\n    113.09733552923255\n*/\nfloat cylinder_volume(long r, long h) \n{\n\
    \    return pi * pow(r, 2) * h;\n}\n/*\nGiven length of sides return area for\
    \ a cube.\n    >>> cube_area(3L)\n    27\n*/\nlong cube_area(long a) \n{\n   \
    \ return 6 * a * a;\n}\n/*\nGiven volume of a sphere and radius return surface\
    \ area for a sphere.\n    >>> sphere_surface_area(200,", "{\n    return a * h\
    \ / 2.0f;\n}\n/*\nGet the hypotenuse of a right triangle.\n    >>> hypotenuse(3L,\
    \ 4L)\n    5.0\n    >>> hypotenuse(6L, 8L)\n    10.0\n*/\nfloat hypotenuse(long\
    \ a, long b) \n{\n    return sqrt(a * a + b * b);\n}\n/*\nGiven length of a side\
    \ and high return area for a triangle.\n    >>> triangle_area(5L, 3L)\n    7.5\n\
    \    \n*/\nfloat triangle_area(long a, long h) \n{\n    return a * h / 2.0f;\n\
    }\n/*\nGet the hypotenuse of a right triangle.\n    >>> hypotenuse(3L, 4L)\n \
    \   5.0\n    >>> hypotenuse(6L, 8L)\n    10.0\n*/\nfloat hypotenuse(long a, long\
    \ b) \n{\n    return sqrt(a * a + b * b);\n}\n/*\nGet the closest integer of x.\n\
    \    >>> closest_int(3.14)\n    3\n    >>> closest_int(3.99)\n    4\n    >>> closest_int(-2.75)\n\
    \    -3\n*/\nlong closest_int(double x)\n{\n    return cast(long) floor(x + 0.5);\n\
    }\n/*\nReturn the sign of the input value\n    >>> sign(3)\n    1\n    >>> sign(-3)\n\
    \    -1\n    >>> sign(0)\n    0\n*/", "{\n    float result;\n    result = a *\
    \ h / 2;\n    return result;\n}", "    pure nothrow @safe \n{\n    float result\
    \ = h * a / 2;\n    return result;\n}", "{\n\treturn (float)(a * h) / 2;\n}",
  "{\n\treturn a * h / 2;\n}\n/*\nGiven two points return distance between them.\n\
    \    >>> distance((1,1), (1,1))\n    0.0\n    >>> distance((0,0), (3,4))\n   \
    \ 5.0\n    >>> distance((2,7), (4,4))\n    5.0\n*/\nfloat distance(Tuple!(long,\
    \ long) a, Tuple!(long, long) b) \n{\n\tlong x = a[0] - b[0];\n\tlong y = a[1]\
    \ - b[1];\n\treturn sqrt(x * x + y * y);\n}\n/*\nGiven first and second cathetus\
    \ return area of the triangle.\n    >>> cathetus_area(3L, 4L)\n    6.0\n    >>>\
    \ cathetus_area(3L, 5L)\n    7.5\n    >>> cathetus_area(5L, 3L)\n    7.5\n*/\n\
    float cathetus_area(long c1, long c2) \n{\n\treturn triangle_area(c1, c2);\n}\n\
    /*\nGiven three lengths of the sides return area of the triangle.\n    >>> sides_area(3L,\
    \ 4L, 5L)\n    6.0\n    >>> sides_area(3L, 4L, 6L)\n    7.5\n    >>> sides_area(4L,\
    \ 3L, 6L)\n    7.5\n*/\nfloat sides_area(long a, long b, long c) \n{\n\tfloat\
    \ p = (a + b + c) / 2;\n\treturn sqrt(p * (p - a) * (p - b) * (p - c));\n}\n/*\n\
    Given point return if it is inside a rectangle.\n    >>> point_inside_rectangle((0,0),\
    \ (0,0), (5,5))\n    true\n    >>> point_inside_rectangle((0,0), (1,1), (5,5))\n\
    \    false\n    >>> point_inside_rectangle((1,1), (0,0), (5,5))\n    true\n  \
    \  >>> point_inside_rectangle((5,", "{\n    float area;\n    area = (a * h) /\
    \ 2;\n    return area;\n}", "{\n    // area = (base * height) / 2\n    // http://en.wikipedia.org/wiki/Triangle#Using_coordinates\n\
    \    return (a * h) / 2;\n}", "{\n    return (float)(a * h)/2.0;\n}", "{\n   \
    \ return cast(float) (a * h) / 2;\n}\n/*\nGiven the radius of a circle return\
    \ circumference.\n    >>> circle_circumference(10L)\n    62.83185307179586\n \
    \   \n*/\nlong circle_circumference(long r) \n{\n    return cast(long) (math.pi\
    \ * r * 2);\n}\n/*\nGiven length of a side and high return area for a square.\n\
    \    >>> square_area(10L)\n    100\n    \n*/\nlong square_area(long a) \n{\n \
    \   return a * a;\n}\n/*\nGiven a string return a copy where all occurrences of\
    \ a substring is replaced by the replacement.\n    >>> replace(\"Zanuda\", \"\
    a\", \"e\")\n    \"Zenude\"\n    >>> replace(\"Zanuda\", \"u\", \"a\")\n    \"\
    Zanada\"\n    \n*/\nstring replace(string s, string m, string f) \n{\n    import\
    \ std.string;\n    return replace(s, m, f);\n}\n/*\nGiven a string return a copy\
    \ where all chars from a to z are replaced by the next char.\n    >>> caesar(\"\
    abcdz\")\n    \"bcdea\"\n    >>> caesar(\"Zanuda\")\n    \"Aboevb\"\n    \n*/\n\
    string caesar(string s) \n{\n    import std.string;\n    string res = \"\";\n\
    \    foreach (char c; s) {\n        if (c == 'z') {\n            res ~= 'a';\n\
    \        } else if (c == 'Z') {\n            res ~= 'A';\n        } else {\n \
    \           res ~= to!string(c + 1);\n        }\n    }\n    return res;\n}\n/*\n\
    Return a range from a to b.\n    >>> listRange(2L, 5L)\n    [2, 3, 4, 5]\n   \
    \ \n*/\nlong[] listRange(long a, long b) \n{\n    import std.algorithm : iota;\n\
    \    return iota(a, b).array;\n}\n/*\nReturn a list with all elements of a list\
    \ duplicated.\n    >>> duplicate("]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
