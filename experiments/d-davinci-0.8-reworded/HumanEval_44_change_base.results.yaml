language: d
name: HumanEval_44_change_base
results:
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    if (x == 0) \n\
    \    {\n        return \"0\";\n    }\n    ulong y = x;\n    string s = \"\";\n\
    \    while (y != 0) \n    {\n        s = ulong.toString(y % base) + s;\n     \
    \   y /= base;\n    }\n    return s;\n}\n/*\nPrints the digits of number x in\
    \ reverse order.\n    >>> print_reverse(123L)\n    321\n    >>> print_reverse(0L)\n\
    \    0\n    >>> print_reverse(7L)\n    7\n*/\nunittest\n{\n    alias candidate\
    \ = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc2cr_kmm.d(25): Error: no property `toString` for type `ulong`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc2cr_kmm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    immutable data\
    \ = `0 1 2 3 4 5 6 7 8 9`;\n    // https://github.com/ldc-developers/ldc/issues/1365\n\
    \    // This is a bug of DMD 2.079.1\n    // The following code should be used\
    \ in the future.\n    //string data = \"0123456789\";\n    string res = \"\";\n\
    \    while (x > 0) {\n        res = data[(int)(x % base)] ~ res;\n        x /=\
    \ base;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf7xr9w8i.d(24): Error: C style cast illegal, use `cast(int)(x %
    base)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf7xr9w8i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164229
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    static string[]\
    \ digits = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"\
    9\"];\n    string y = \"\";\n    while (x > 0) \n    {\n        long remainder\
    \ = x % base;\n        y = digits[remainder] ~ y;\n        x = x / base;\n   \
    \ }\n    return y;\n}\n/*\nreturn whether x is a palindrome number.\n    >>> is_palindrome(10001L)\n\
    \    true\n    >>> is_palindrome(10002L)\n    false\n    >>> is_palindrome(100101L)\n\
    \    true\n*/\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string output\
    \ = \"\";\n    // x is positive\n    assert(x >= 0);\n    // base is positive\n\
    \    assert(base > 0);\n    // base is less than 10\n    assert(base < 10);\n\
    \    int rem;\n    while (x != 0) {\n        rem = x % base;\n        x = x /\
    \ base;\n        output = std.conv.to!string(rem) ~ output;\n    }\n    return\
    \ output;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpasx3f9j0.d(26): Error: cannot implicitly convert expression `x
    % base` of type `long` to `int`

    /tmp/tmpasx3f9j0.d(28): Error: undefined identifier `conv` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpasx3f9j0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    import std.algorithm\
    \ : joiner;\n    alias char[] Clist;\n    Clist result = \"\";\n    while (x >\
    \ 0) \n    {\n        long remainder = x % base;\n        result ~= to!string(remainder);\n\
    \        x /= base;\n    }\n    return std.algorithm.joiner(result.reversed).join();\n\
    }\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9sfi26so.d(19): Error: cannot implicitly convert expression `""`
    of type `string` to `char[]`

    /tmp/tmp9sfi26so.d(23): Error: template instance `to!string` template `to` is
    not defined, did you mean No?

    /tmp/tmp9sfi26so.d(26): Deprecation: package `std.algorithm` is not accessible
    here, perhaps add `static import std.algorithm;`

    /tmp/tmp9sfi26so.d(26): Error: no property `reversed` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9sfi26so.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string ret = \"\
    \";\n    long r = 0L;\n    for (;x;x/=base)\n    {\n        r = x % base;\n  \
    \      ret = std.string.toString(r) ~ ret;\n    }\n    return ret;\n}\nunittest\n\
    {\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\"\
    );\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L)\
    \ == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbq_84410.d(22): Error: undefined identifier `string` in package
    `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbq_84410.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string res;\n\
    \    while (x != 0) {\n        res = stringof(x % base) ~ res;\n        x /= base;\n\
    \    }\n    return res;\n}\n/*\nJudge whether a string of number is a magic number.\n\
    \    A magic number is a number whose digits, \n    with any number of additions,\
    \ \n    can arrive at the number 1.\n    >>> is_magic_number(\"8\")\n    True\n\
    \    >>> is_magic_number(\"111\")\n    True\n    >>> is_magic_number(\"123\")\n\
    \    False\n*/\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy5c_jt39.d(19): Error: undefined identifier `stringof`, did you
    mean alias `string`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy5c_jt39.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n  const string\n \
    \ get_digit(string[10] digits, long base) pure nothrow @nogc\n  {\n    return\
    \ digits[base];\n  }\n  string [10] digits = [\"0\", \"1\", \"2\", \"3\", \"4\"\
    , \"5\", \"6\", \"7\", \"8\", \"9\"];\n  string result = \"\";\n  immutable long\
    \ max_num = 9L;\n  for (;;) {\n    immutable long index = x % base;\n    result\
    \ = get_digit(digits, index) ~ result;\n    x /= base;\n    if (x <= max_num)\
    \ {\n      result = get_digit(digits, x) ~ result;\n      break;\n    }\n  }\n\
    \  return result;\n}\n/*\nChange list of numerical base of input number x to base.\n\
    \    return tuples of (the-power-of-the-base, remainder)\n    >>> change_base_list(8L,\
    \ 3L)\n    [(0L, 2L), (1L, 2L)]\n    >>> change_base_list(8L, 2L)\n    [(0L, 0L),\
    \ (1L, 0L), (2L, 0L), (3L, 1L)]\n    >>> change_base_list(7L, 2L)\n    [(0L, 1L),\
    \ (1L, 1L), (2L, 1L)]\n*/\nauto change_base_list(long x, long base) \n{\n  typeof(return)\
    \ result;\n  immutable long counter = 0L;\n  for (;;) {\n    immutable long remainder\
    \ = x % base;\n    const typeof(return) item = tuple(counter, remainder);\n  \
    \  result ~= item;\n    x /= base;\n    if (x == 0L) break;\n    counter++;\n\
    \  }\n  return result;\n}\n/*\nCalculate remainder of x, base.\n    return the\
    \ remainder.\n    >>> change_base_remainder(8L, 3L)\n    2L\n    >>> change_base_remainder(8L,\
    \ 2L)\n    0L\n    >>> change_base_remainder(7\nunittest\n{\n    alias candidate\
    \ = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdjq2yzu7.d(60): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdjq2yzu7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    enum result =\
    \ [];\n    while (x > 0) \n    {\n        result ~= x % base;\n        x /= base;\n\
    \    }\n    return to!string(result);\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl3njpwis.d(20): Error: `[]` is not an lvalue and cannot be modified

    /tmp/tmpl3njpwis.d(23): Error: template instance `to!string` template `to` is
    not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl3njpwis.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n\tstring s = \"\"\
    ;\n\twhile (x != 0) \n\t{\n\t\ts = to!string(x % base) ~ s;\n\t\tx /= base;\n\t\
    }\n\treturn s;\n}\n/*\nReturn a list that contains digits of a number x.\n   \
    \ if base is not zero, then it is a base of number x.\n    >>> digits(8L, 10L)\n\
    \    [8]\n    >>> digits(8L, 3L)\n    [2, 2]\n    >>> digits(7L, 2L)\n    [1,\
    \ 1, 1]\n    \n*/\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzcxrjr3j.d(20): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzcxrjr3j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string output;\n\
    \    while (x != 0) {\n        output ~= to!string(x % base);\n        x /= base;\n\
    \    }\n    return output;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi4ot9xdb.d(19): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi4ot9xdb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string _buffer;\n\
    \    long n;\n    n = x;\n    _buffer = \"\";\n    while (n > 0) {\n        _buffer\
    \ += to!string(n % base);\n        n /= base;\n    }\n    reverse(_buffer);\n\
    \    return _buffer;\n}\nunittest\n{\n    alias candidate = change_base;\n\n \
    \   assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\"\
    );\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgecl2tfv.d(22): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpgecl2tfv.d(25): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string)`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgecl2tfv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = null;\n    while (x != 0) \n    {\n        if (x % base < 10) \n        {\n\
    \            result = result ~ cast(string)(x % base);\n        }\n        else\
    \ \n        {\n            result = result ~ cast(string)(x % base - 10 + 'A');\n\
    \        }\n        x /= base;\n    }\n    return std.array.array(result).reverse().idup;\n\
    }\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpidudcb5p.d(22): Error: cannot cast expression `x % base` of type
    `long` to `string`

    /tmp/tmpidudcb5p.d(26): Error: cannot cast expression `x % base - cast(long)10
    + cast(long)cast(int)''A''` of type `long` to `string`

    /tmp/tmpidudcb5p.d(30): Error: undefined identifier `array` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpidudcb5p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    enum { width =\
    \ sizeof(long) * 8 };\n    string temp = \"\";\n    long p = 1;\n    for (size_t\
    \ i = 0; i < width; i++) \n    {\n        if ((x & (p << i)) != 0) \n        {\n\
    \            temp = temp ~ '1';\n        } \n        else \n        {\n      \
    \      temp = temp ~ '0';\n        }\n    }\n    temp = temp.idup;\n    temp =\
    \ temp.chomp;\n    auto reversed_temp = temp.dup;\n    while (reversed_temp.length)\
    \ \n    {\n        reversed_temp.popFront;\n    }\n    auto L = array(long)(reversed_temp.length);\n\
    \    foreach (i, c; temp) \n    {\n        if (c == '1') \n        {\n       \
    \     L[i] = 1;\n        }\n        else \n        {\n            L[i] = 0;\n\
    \        }\n    }\n    string ret = \"\";\n    long in = reversed_temp.length\
    \ - 1;\n    while (in >= 0) \n    {\n        long t = 0;\n        for (size_t\
    \ i = 0; i <= in; i++) \n        {\n            t = L[i] * pow(2L, in - i) + t;\n\
    \        }\n        in--;\n        long q = t / base;\n        long r = t % base;\n\
    \        if (t == 0) \n        {\n            break;\n        }\n        ret =\
    \ ret ~ to!string(r);\n        if (in == -1) \n        {\n            break;\n\
    \        }\n        for (size_t i = 0; i <= in; i++) \n        {\n           \
    \ L[i] = q % 2;\n            q = q / 2;\n        }\n    }\n    return ret.dup.idup;\n\
    }\n/*\n    return the absolute value of x.\n    >>> abs_plus(-2L)\n    2\n   \
    \ >>> abs_plus(0L)\n    0\n    >>> abs_plus(4L)\n    4\n*/\nlong abs\nunittest\n\
    {\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\"\
    );\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L)\
    \ == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkf2bl2iz.d(17): Error: found `)` when expecting `.` following long

    /tmp/tmpkf2bl2iz.d(17): Error: found `*` when expecting identifier following `long`.

    /tmp/tmpkf2bl2iz.d(17): Error: found `8` when expecting `,`

    /tmp/tmpkf2bl2iz.d(17): Error: expression expected, not `}`

    /tmp/tmpkf2bl2iz.d(17): Error: found `;` when expecting `,`

    /tmp/tmpkf2bl2iz.d(18): Error: found `temp` when expecting `,`

    /tmp/tmpkf2bl2iz.d(18): Error: expression expected, not `=`

    /tmp/tmpkf2bl2iz.d(18): Error: found `""` when expecting `,`

    /tmp/tmpkf2bl2iz.d(18): Error: expression expected, not `;`

    /tmp/tmpkf2bl2iz.d(19): Error: found `long` when expecting `,`

    /tmp/tmpkf2bl2iz.d(19): Error: found `;` when expecting `,`

    /tmp/tmpkf2bl2iz.d(20): Error: expression expected, not `for`

    /tmp/tmpkf2bl2iz.d(20): Error: found `i` when expecting `,`

    /tmp/tmpkf2bl2iz.d(20): Error: expression expected, not `=`

    /tmp/tmpkf2bl2iz.d(20): Error: found `0` when expecting `,`

    /tmp/tmpkf2bl2iz.d(20): Error: expression expected, not `;`

    /tmp/tmpkf2bl2i'
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    immutable base_index\
    \ = [0x0000, 0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0007, 0x0008, 0x0009,\
    \ 0x000A, 0x000B, 0x000C, 0x000D, 0x000E, 0x000F, 0x0010, 0x0011, 0x0012, 0x0013,\
    \ 0x0014, 0x0015, 0x0016, 0x0017, 0x0018, 0x0019, 0x001A, 0x001B, 0x001C, 0x001D,\
    \ 0x001E, 0x001F, 0x0020, 0x0021, 0x0022, 0x0023, 0x0024, 0x0025, 0x0026, 0x0027,\
    \ 0x0028, 0x0029, 0x002A, 0x002B, 0x002C, 0x002D, 0x002E, 0x002F, 0x0030, 0x0031,\
    \ 0x0032, 0x0033, 0x0034, 0x0035, 0x0036, 0x0037, 0x0038, 0x0039, 0x003A, 0x003B,\
    \ 0x003C, 0x003D, 0x003E, 0x003F, 0x0040, 0x0041, 0x0042, 0x0043, 0x0044, 0x0045,\
    \ 0x0046, 0x0047, 0x0048, 0x0049, 0x004A, 0x004B, 0x004C, 0x004D, 0x004E, 0x004F,\
    \ 0x0050, 0x0051, 0x0052, 0x0053, 0x0054, 0x0055, 0x0056, 0x0057, 0x0058, 0x0059,\
    \ 0x005A, 0x005B, 0x005C, 0x005D, 0x005E, 0x005F, 0x0060, 0x0061, 0x0062, 0x0063,\
    \ 0x0064, 0\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc8yae665.d(18): Error: comma expected separating array initializers,
    not `unittest`

    /tmp/tmpc8yae665.d(19): Error: semicolon expected following auto declaration,
    not `{`

    /tmp/tmpc8yae665.d(35): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc8yae665.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n    in(0..10)\n{\n  \
    \  import std.conv;\n    string result;\n    do\n    {\n        result ~= to!string(x\
    \ % base);\n        x /= base;\n    } while (x != 0);\n    return result.reverse;\n\
    }\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpra67t3h7.d(16): Error: found `..` when expecting `)`

    /tmp/tmpra67t3h7.d(16): Error: semicolon expected following function declaration

    /tmp/tmpra67t3h7.d(16): Error: declaration expected, not `10`

    /tmp/tmpra67t3h7.d(20): Error: declaration expected, not `do`

    /tmp/tmpra67t3h7.d(23): Error: no identifier for declarator `x`

    /tmp/tmpra67t3h7.d(23): Error: declaration expected, not `/=`

    /tmp/tmpra67t3h7.d(24): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpra67t3h7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    auto c_digit =\
    \ (x >= 0 ? [](long x)\n    {\n        return char('0' + x);\n    } : [](long\
    \ x)\n    {\n        return char('a' + x - 10);\n    });\n    string res;\n  \
    \  long sign = signbit(x);\n    auto remainder = x;\n    if (sign != 0)\n    {\n\
    \        remainder = -x;\n    }\n    do \n    {\n        auto remain = remainder\
    \ % base;\n        remainder /= base;\n        res += c_digit(remain);\n    }\
    \ while (remainder > 0);\n    if (sign != 0)\n    {\n        res += '-';\n   \
    \ }\n    reverse(res);\n    return res;\n}\nunittest\n{\n    alias candidate =\
    \ change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdy_cy7mu.d(17): Error: found `x` when expecting `.` following long

    /tmp/tmpdy_cy7mu.d(17): Error: found `)` when expecting identifier following `long`.

    /tmp/tmpdy_cy7mu.d(18): Error: found `{` when expecting `,`

    /tmp/tmpdy_cy7mu.d(19): Error: expression expected, not `return`

    /tmp/tmpdy_cy7mu.d(19): Error: found `char` when expecting `,`

    /tmp/tmpdy_cy7mu.d(19): Error: found `;` when expecting `,`

    /tmp/tmpdy_cy7mu.d(20): Error: expression expected, not `}`

    /tmp/tmpdy_cy7mu.d(20): Error: found `:` when expecting `,`

    /tmp/tmpdy_cy7mu.d(20): Error: found `x` when expecting `.` following long

    /tmp/tmpdy_cy7mu.d(20): Error: found `)` when expecting identifier following `long`.

    /tmp/tmpdy_cy7mu.d(21): Error: found `{` when expecting `,`

    /tmp/tmpdy_cy7mu.d(22): Error: expression expected, not `return`

    /tmp/tmpdy_cy7mu.d(22): Error: found `char` when expecting `,`

    /tmp/tmpdy_cy7mu.d(22): Error: found `;` when expecting `,`

    /tmp/tmpdy_cy7mu.d(23): Error: expression expected, not `}`

    /tmp/tmpdy_cy7mu.d(23): Erro'
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n\tenum digits = \"\
    0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\tauto n = (cast(string)digits[x % base]).dup;\n\
    \twhile (x /= base)\n\t{\n\t\tn ~= (cast(string)digits[x % base]);\n\t}\n\treturn\
    \ n.reverse;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6wmyd78x.d(18): Error: cannot cast expression `"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"[cast(ulong)(x
    % base)]` of type `immutable(char)` to `string`

    /tmp/tmp6wmyd78x.d(21): Error: cannot cast expression `"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"[cast(ulong)(x
    % base)]` of type `immutable(char)` to `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6wmyd78x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    char[32] result;\
    \ // size to hold 32 digits of a 32-bit integer.\n    int y = 0; // counter to\
    \ iterate through the array.\n    for (; x > 0; ++y) \n    {\n        result[y]\
    \ = to!char('0' + x % base);\n        x /= base;\n    }\n    return result[0..y].idup.reverse;\n\
    }\n/*\nConvert input number (hex string) to decimal string representation.\n \
    \   >>> hex_to_dec(\"FF\")\n    \"255\"\n    >>> hex_to_dec(\"FFFFFFF0\")\n  \
    \  \"4294967280\"\n    >>> hex_to_dec(\"10\")\n    \"16\"\n    >>> hex_to_dec(\"\
    \")\n    \"0\"\n*/\nstring hex_to_dec(string hex) \n{\n    enum hex_index = [\
    \ \n\t\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"\
    A\", \"B\", \"C\", \"D\", \"E\", \"F\"\n    ];\n    long result = 0;\n    for\
    \ (int i = 0; i < hex.length; ++i) \n    {\n        int j = hex_index.indexOf(hex[i]);\n\
    \        result += j * (16 ** (hex.length - i - 1));\n    }\n    return result.to!string;\n\
    }\n/*\nConvert input number (decimal string) to hex string representation.\n \
    \   >>> dec_to_hex(\"255\")\n    \"FF\"\n    >>> dec_to_hex(\"4294967280\")\n\
    \    \"FFFFFFF0\"\n    >>> dec_to_hex(\"16\")\n    \"10\"\n    >>> dec_to_hex(\"\
    0\")\n    \"0\"\n    >>> dec_to_hex(\"-255\")\n    \"-FF\"\n*/\nstring dec_to_hex(string\
    \ dec) \n{\n    long long x = to!long(dec);\n    if (x < 0) \n    {\n        x\
    \ = -x;\n        return \"-\" ~ change_base(x, 16);\n    }\n    return change_\n\
    unittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L)\
    \ == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc55n6jpe.d(65): Error: use `long` for a 64 bit integer instead
    of `long long`

    /tmp/tmpc55n6jpe.d(72): Error: found `unittest` when expecting `;` following `return`
    statement

    /tmp/tmpc55n6jpe.d(89): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc55n6jpe.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    return base !=\
    \ 10 ? format(\"%s\", x.change_base(base)) :\n        format(\"%s\", x);\n}\n\
    unittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L)\
    \ == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3iv7bb4n.d(17): Error: undefined identifier `format`

    /tmp/tmp3iv7bb4n.d(18): Error: undefined identifier `format`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3iv7bb4n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string out;\n\
    \    while (x != 0) {\n        out ~= (x % base).to!string;\n        x /= base;\n\
    \    }\n    return out.dup.reverse;\n}\n/*\nCompute parity of a number.\n    >>>\
    \ parity(8L)\n    0\n    >>> parity(9L)\n    1\n*/\nlong parity(long x) \n{\n\
    \    long res = 0;\n    while (x != 0) {\n        res ^= x % 2;\n        x /=\
    \ 2;\n    }\n    return res;\n}\n/*\nSwap even and odd bits of a given number\
    \ x.\n    >>> swap_bits(8L)\n    1\n    >>> swap_bits(9L)\n    10\n*/\nlong swap_bits(long\
    \ x) \n{\n    return ((x & 0xAAAAAAAAAAAAAAAL) >> 1) | ((x & 0x5555555555555555L)\
    \ << 1);\n}\n/*\nGet the k-th lowest bit of a number x.\n    >>> reverse_bits(8L,\
    \ 2L)\n    1\n    >>> reverse_bits(9L, 2L)\n    0\n*/\nlong reverse_bits(long\
    \ x, long k) \n{\n    return (x >> k) & 1;\n}\n/*\nReverse the bit order of a\
    \ number x.\n    >>> reverse_bits(8L)\n    1\n    >>> reverse_bits(9L)\n    20\n\
    */\nlong reverse_bits(long x) \n{\n    long res = 0;\n    for (long i = 0; i <\
    \ x.popCount; i++) {\n        res <<= 1;\n        res |= x & 1;\n        x >>=\
    \ 1;\n    }\n    return res;\n}\n/*\nCheck if a number is multiple of 3.\n   \
    \ >>> is_multiple_of_3(8L)\n    false\n    >>> is_multiple_of_3(9L)\n    true\n\
    */\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpag9zhw6q.d(17): Error: found `out` when expecting `;` following
    statement

    /tmp/tmpag9zhw6q.d(17): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmpag9zhw6q.d(19): Error: found `out` instead of statement

    /tmp/tmpag9zhw6q.d(22): Error: expression expected, not `out`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpag9zhw6q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    while (x >= base) \n    {\n        result =  result ~ to!string(x\
    \ % base);\n        x /= base;\n    }\n    result = result ~ to!string(x);\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n   \
    \ assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\"\
    );\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz_5qk8_4.d(20): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpz_5qk8_4.d(23): Error: template instance `to!string` template `to` is
    not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz_5qk8_4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n  string result;\n\
    \  while (x != 0) {\n    result = to!string(x % base) ~ result;\n    x /= base;\n\
    \  }\n  return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n\
    \    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoua6nluh.d(19): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoua6nluh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    return x.toString(base);\n\
    }\n/*\n    calculate the absolute difference of two numbers.\n    >>> abs_diff(8L,\
    \ 2L)\n    6L\n    >>> abs_diff(8L, 7L)\n    1L\n    >>> abs_diff(8L, 8L)\n  \
    \  0L\n    \n*/\nlong abs_diff(long x, long y) \n{\n    return abs(x - y);\n}\n\
    /*\ncheck if the number is a palindrome.\n    return true if it is otherwise false.\n\
    \    >>> is_palindrome(0L)\n    true\n    >>> is_palindrome(1L)\n    true\n  \
    \  >>> is_palindrome(1221L)\n    true\n    >>> is_palindrome(1222L)\n    false\n\
    \    \n*/\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppf9smajx.d(17): Error: no property `toString` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppf9smajx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164229
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    enum bstr = \"\
    0123456789abcdefghijklmnopqrstuvwxyz\";\n    string ret = \"\";\n    while (x\
    \ > 0) \n    {\n        ret = bstr[x % base .. x % base + 1] ~ ret;\n        x\
    \ /= base;\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string res;\n\
    \    bool first = true;\n    if (x == 0) return \"0\";\n    for (; x != 0; x /=\
    \ base) {\n        if (first) {\n            res = to!string(x % base);\n    \
    \        first = false;\n        } else {\n            res = to!string(x % base)\
    \ ~ res;\n        }\n    }\n    return res;\n}\n/*\nConvert the input number x\
    \ to another base.\n    return the corresponding int number.\n    base numbers\
    \ are less than 10.\n    >>> convert_to_base(22L, 3L)\n    8\n    >>> convert_to_base(1000L,\
    \ 2L)\n    8\n    >>> convert_to_base(111L, 2L)\n    7\n*/\nlong convert_to_base(long\
    \ x, long base) \n{\n    long n = 0;\n    long counter = 0;\n    for (; x != 0;\
    \ x /= 10) {\n        n += (x % 10) * pow(base, counter);\n        counter++;\n\
    \    }\n    return n;\n}\n/*\nCheck if number x is palindrome or not.\n    >>>\
    \ is_palindrome(1112L)\n    false\n    >>> is_palindrome(12321L)\n    true\n \
    \   >>> is_palindrome(222L)\n    true\n*/\nunittest\n{\n    alias candidate =\
    \ change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnx8yd8ae.d(22): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpnx8yd8ae.d(25): Error: template instance `to!string` template `to` is
    not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnx8yd8ae.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string num_base\
    \ = \"0123456789\";\n    string result;\n    // if x == 0\n    if (x == 0) \n\
    \    {\n        return \"0\";\n    }\n    // loop until x == 0\n    while (x >\
    \ 0) \n    {\n        // divide x by base\n        // append num_base[x % base]\
    \ to result\n        // set x to x / base\n        result = num_base[x % base]\
    \ ~ result;\n        x /= base;\n    }\n    return result;\n}\n/*\nConvert input\
    \ number x to base string(type = char[]) representation.\n    >>> convert_to_str_by_base(\"\
    8L\", \"3L\")\n    \"22\"\n    >>> convert_to_str_by_base(\"8L\", \"2L\")\n  \
    \  \"1000\"\n    >>> convert_to_str_by_base(\"7L\", \"2L\")\n    \"111\"\n   \
    \ \n*/\nstring convert_to_str_by_base(string x, string base) \n{\n    return change_base(to!long(x),\
    \ to!long(base));\n}\n/*\nConvert number x to base string(type = char[]) representation.\n\
    \    >>> convert_to_str_by_base(8L, 3L)\n    \"22\"\n    >>> convert_to_str_by_base(8L,\
    \ 2L)\n    \"1000\"\n    >>> convert_to_str_by_base(7L, 2L)\n    \"111\"\n   \
    \ \n*/\nstring convert_to_str_by_base(long x, long base) \n{\n    return change_base(x,\
    \ base);\n}\n/*\nFind the biggest prime factor of number x.\n    return the biggest\
    \ prime factor.\n    >>> biggest_prime_factor(600851475143L)\n    6857L\n    >>>\
    \ biggest_prime_factor(6857L)\n    6857L\n    >>> biggest_prime_factor(2L)\n \
    \   2L\n    \n*/\nlong biggest_prime_factor(long x) \n{\n    // Find prime factors\
    \ of x\n    auto factors = primes(x);\n   \nunittest\n{\n    alias candidate =\
    \ change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2f4g04x2.d(79): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2f4g04x2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    return new string;\n}\nunittest\n\
    {\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\"\
    );\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L)\
    \ == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdwfxdoeu.d(27): Error: new can only create structs, dynamic arrays
    or class objects, not `string`''s

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdwfxdoeu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    assert(base <=\
    \ 10L);\n    assert(x >= 0L);\n    char[] result;\n    long n = x;\n    while\
    \ (n != 0L) {\n        result ~= \"0123456789\"[cast(size_t)(n % base)];\n   \
    \     n /= base;\n    }\n    if (result.length == 0L) {\n        result ~= \"\
    0\";\n    }\n    return result.reverse.idup;\n}\nunittest\n{\n    alias candidate\
    \ = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2rjjhx2r.d(28): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2rjjhx2r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    import std.array;\n\
    \    import std.conv;\n    import std.range;\n    import std.string;\n    return\
    \ join(to!(string[])([x / base, x % base] \n        .map!(to!string)(r =&gt; range(r).takeWhile!(d\
    \ =&gt; d))\n        .map!(to!string)(r =&gt; join(r))\n        .array), \"\"\
    );\n}\n</code>\nthis is my code. Is there any way to shorten this code? \n<code>\
    \    import std.array;\n    import std.conv;\n    import std.range;\n    import\
    \ std.string;\n    return join(to!(string[])([x / base, x % base] \n        .map!(to!string)(r\
    \ =&gt; range(r).takeWhile!(d =&gt; d))\n        .map!(to!string)(r =&gt; join(r))\n\
    \        .array), \"\");\n</code>\nAlso, is there any way to make this code work\
    \ with floating point numbers?\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc6levi08.d(22): Error: found `;` when expecting `,`

    /tmp/tmpc6levi08.d(22): Error: found `;` when expecting `)` following template
    argument list

    /tmp/tmpc6levi08.d(22): Error: found `d` when expecting `,`

    /tmp/tmpc6levi08.d(23): Error: found `;` when expecting `,`

    /tmp/tmpc6levi08.d(24): Error: found `)` when expecting `;` following `return`
    statement

    /tmp/tmpc6levi08.d(24): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmpc6levi08.d(26): Error: declaration expected, not `<`

    /tmp/tmpc6levi08.d(32): Error: declaration expected, not `return`

    /tmp/tmpc6levi08.d(33): Error: function declaration without return type. (Note
    that constructors are always named `this`)

    /tmp/tmpc6levi08.d(33): Error: no identifier for declarator `range(r)`

    /tmp/tmpc6levi08.d(33): Error: semicolon expected following function declaration

    /tmp/tmpc6levi08.d(33): Error: found `;` when expecting `)` following template
    argument list

    /tmp/tmpc6levi08.d(33): Error: semicolon expected, not `)`

    /tmp/tmpc6levi08.d(33): Error:'
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string s = to!string(x,\
    \ base);\n    return s;\n}\nunittest\n{\n    alias candidate = change_base;\n\n\
    \    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8lv43c71.d(17): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8lv43c71.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    // assume input\
    \ is a valid unsigned long.\n    // assume base is less than 10.\n    auto s =\
    \ \"\";\n    auto y = new long[0];\n    for (; x > 0; x = x / base) \n    {\n\
    \        y ~= x % base;\n    }\n    auto slen = y.length;\n    for (auto i = 0;\
    \ i < slen; i++) \n    {\n        s ~= y[slen - i - 1];\n    }\n    return s;\n\
    }\n/*\nget integer list representation of input string.\n    >>> get_str_int_list(\"\
    0\")\n    [0]\n    >>> get_str_int_list(\"10\")\n    [1, 0]\n    >>> get_str_int_list(\"\
    111\")\n    [1, 1, 1]\n*/\nunittest\n{\n    alias candidate = change_base;\n\n\
    \    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp70zcik8.d(28): Error: cannot append type `long` to type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp70zcik8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result;\n\
    \    while (x > 0) \n    {\n        result ~= (char)('0' + x % base);\n      \
    \  x /= base;\n    }\n    return result.reversed;\n}\nunittest\n{\n    alias candidate\
    \ = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvy93a41t.d(20): Error: C style cast illegal, use `cast(char)(''0''
    + x % base)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvy93a41t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    import std.conv\
    \ : text;\n    assert(base <= 10);\n    string result = \"\";\n    while (x !=\
    \ 0) \n    {\n        long a = x % base;\n        result = to!string(a) ~ result;\n\
    \        x /= base;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6nj50mte.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6nj50mte.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    import std.algorithm\
    \ : join;\n    assert(base > 1 && base < 10);\n    static immutable digitToString\
    \ = [\n        \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\"\n    ];\n    auto ret = \"\";\n    while (x > 0) \n    {\n        ret\
    \ ~= digitToString[x % base];\n        x /= base;\n    }\n    return ret.reverse;\n\
    }\n// change_base\n/*\n    generate prime numbers below n and store in an array.\n\
    \    >>> generate_prime(10L)\n    [2L, 3L, 5L, 7L]\n    >>> generate_prime(12L)\n\
    \    [2L, 3L, 5L, 7L, 11L]\n*/\nlong[] generate_prime(long n) \n{\n    long[]\
    \ ret;\n    foreach (i; 2..n) \n    {\n        if (i.isPrime) \n        {\n  \
    \          ret ~= i;\n        }\n    }\n    return ret;\n}\n// generate_prime\n\
    long[] generate_prime_factorization(long x) \n{\n    long[] ret;\n    if (x.isPrime)\
    \ \n    {\n        ret ~= x;\n        return ret;\n    }\n    foreach (prime;\
    \ generate_prime(x)) \n    {\n        while (x % prime == 0) \n        {\n   \
    \         ret ~= prime;\n            x /= prime;\n        }\n    }\n    return\
    \ ret;\n}\n// generate_prime_factorization\n/*\n    return prime numbers whose\
    \ exponents are generated randomly.\n    prime base numbers are less than or equal\
    \ to n.\n*/\nlong[] generate_non_trivial_prime_factorization(long x, long n) \n\
    {\n    import std.random;\n    long[] ret;\n    foreach (prime; generate_prime(n))\
    \ \n    {\n        while (x % prime == 0) \n        {\n            long exp =\
    \ uniform(0, 3);\n            while (exp > 0) \n            {\n              \
    \  ret ~= prime;\n               \nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpud27h16j.d(87): Error: found `unittest` instead of statement

    /tmp/tmpud27h16j.d(104): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpud27h16j.d(104): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpud27h16j.d(104): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpud27h16j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result;\n\
    \    while (x > 0) {\n        result ~= to!string(x % base);\n        x /= base;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprevfvkri.d(19): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprevfvkri.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    long m = x;\n\
    \    long b = base;\n    string s = \"\";\n    if (x < b)\n        return std.to!string(x);\n\
    \    else \n    {\n        return change_base(x/b, b)~std.to!string(x%b);\n  \
    \  }\n}\n/*\n \n*/\nstring change_base2(long x, long base) \n{\n    string s =\
    \ \"\";\n    while (x > 0) \n    {\n        s = std.to!string(x%base)~s;\n   \
    \     x /= base;\n    }\n    return s;\n}\nunittest\n{\n    alias candidate =\
    \ change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpknj1ywvn.d(21): Error: undefined identifier `to` in package `std`

    /tmp/tmpknj1ywvn.d(24): Error: undefined identifier `to` in package `std`

    /tmp/tmpknj1ywvn.d(35): Error: undefined identifier `to` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpknj1ywvn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string ret = \"\
    \";\n    auto y = x;\n    long e = 0;\n    long t = 1;\n    for (long i = 0; i\
    \ < long.digits; i++)\n    {\n        if (y == 0)\n            break;\n      \
    \  e = y % base;\n        y = y / base;\n        ret = std.to!string(e) ~ ret;\n\
    \    }\n    return ret;\n}\n/*\n    Return number of bits needed to store n binary\
    \ numbers.\n    >>> number_of_bits(8L)\n    6\n    >>> number_of_bits(7L)\n  \
    \  5\n    >>> number_of_bits(1L)\n    1\n*/\nlong number_of_bits(long n)\n{\n\
    \    if (n == 0)\n        return 0;\n    long i = 1;\n    while (n >>= 1)\n  \
    \      i++;\n    return i;\n}\n/*\n    Return the number of bits set to one in\
    \ an integer.\n    >>> number_of_ones(8L)\n    1\n    >>> number_of_ones(7L)\n\
    \    3\n    >>> number_of_ones(1L)\n    1\n*/\nlong number_of_ones(long x)\n{\n\
    \    long ret = 0;\n    long y = x;\n    for (long i = 0; i < long.digits; i++)\n\
    \    {\n        if (y == 0)\n            break;\n        if (y % 2 == 1)\n   \
    \         ret++;\n        y = y / 2;\n    }\n    return ret;\n}\n/*\n    Return\
    \ a tuple with (1L) the number of bits set to one in an integer\n    and (2L)\
    \ the number of bits set to zero in an integer.\n    >>> number_of_zeros_and_ones(8L)\n\
    \    (63, 1)\n    >>> number_of_zeros_and_ones(1L)\n    (63, 1)\n    >>> number_of_zeros_and_ones(0L)\n\
    \    (64, 0)\n*/\ntuple!(long, long) number_of_zeros_and_ones(long x)\n\nunittest\n\
    {\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\"\
    );\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L)\
    \ == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvjwz2ka4.d(84): Error: semicolon expected following function declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvjwz2ka4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string res;\n\
    \    enum temp = 0;\n    while (x != 0) \n    {\n        temp = x % base;\n  \
    \      res = format(\"%d\", temp) ~ res;\n        x /= base;\n    }\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv17fdxlp.d(21): Error: cannot modify constant `temp`

    /tmp/tmpv17fdxlp.d(22): Error: undefined identifier `format`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv17fdxlp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    assert(base >\
    \ 1L);\n    assert(base < 10L);\n    bool is_positive = (x >= 0L);\n    if(!is_positive)\
    \ \n    {\n        x = -x;\n    }\n    string res = \"\";\n    do \n    {\n  \
    \      res = to!string(x % base) ~ res;\n        x /= base;\n    }\n    while(x\
    \ > 0L);\n    if(!is_positive) \n    {\n        res = \"-\" ~ res;\n    }\n  \
    \  return res;\n}\n/*\nGet all divisors of n.\n    >>> divisors(10L)\n    [1L,\
    \ 2L, 5L, 10L]\n    >>> divisors(42L)\n    [1L, 2L, 3L, 6L, 7L, 14L, 21L, 42L]\n\
    */\nlong[] divisors(long n) \n{\n    assert(n > 0L);\n    if(n == 1L) \n    {\n\
    \        return [1L];\n    }\n    auto lst = appender!(long[])();\n    for(long\
    \ i = 1L; i <= n / 2L; i++) \n    {\n        if(n % i == 0L) \n        {\n   \
    \         lst.put(i);\n        }\n    }\n    lst.put(n);\n    return lst.data;\n\
    }\n/*\nGet all factorization of n.\n    >>> prime_factorization(100L)\n    [2L,\
    \ 2L, 5L, 5L]\n    >>> prime_factorization(99L)\n    [3L, 3L, 11L]\n*/\nlong[]\
    \ prime_factorization(long n) \n{\n    assert(n > 0L);\n    if(n == 1L) \n   \
    \ {\n        return [1L];\n    }\n    auto lst = appender!(long[])();\n    while(n\
    \ > 1L) \n    {\n        long p = smallest_prime_factor(n);\n        lst.put(p);\n\
    \        n /= p;\n    }\n    return l\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp745p4g9i.d(84): Error: found `unittest` when expecting `;` following
    `return` statement

    /tmp/tmp745p4g9i.d(101): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp745p4g9i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    auto ret = to!string(x);\n\
    \    foreach(; x > 0; x /= base)\n    {\n        ret = format(\"%c%s\", ('0' +\
    \ cast(char)(x % base)), ret);\n    }\n    return ret;\n}\nunittest\n{\n    alias\
    \ candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfbwasicy.d(18): Error: basic type expected, not `;`

    /tmp/tmpfbwasicy.d(18): Error: no identifier for declarator `_error_`

    /tmp/tmpfbwasicy.d(18): Error: found `;` when expecting `)`

    /tmp/tmpfbwasicy.d(18): Error: found `)` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfbwasicy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    static string[]\
    \ digits = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"\
    9\"];\n    string output = \"\";\n    while (x != 0) \n    {\n        output ~=\
    \ digits[x % base];\n        x /= base;\n    }\n    return output.idup.reverse;\n\
    }\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqrw708ty.d(24): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(string)`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqrw708ty.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    static string\
    \ digits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    static long ndigits\
    \ = digits.length;\n    if (base <= 0 || base > ndigits) {\n        return \"\"\
    ;\n    }\n    if (x == 0) {\n        return \"0\";\n    }\n    long n = 0;\n \
    \   long xn = x;\n    while (xn != 0) {\n        xn /= base;\n        n++;\n \
    \   }\n    string ret = \"\";\n    for (long i = 0; i < n; i++) {\n        auto\
    \ v = digits[x % base];\n        ret = to!string(v) ~ ret;\n        x /= base;\n\
    \    }\n    return ret;\n}\n/*\nConvert *any* integral number to string\n*/\n\
    string toString(long x) \n{\n    return change_base(x, 10);\n}\nunittest\n{\n\
    \    alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\"\
    );\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L)\
    \ == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphnjd6u11.d(18): Error: static variable `digits` cannot be read
    at compile time

    /tmp/tmphnjd6u11.d(34): Error: template instance `to!string` template `to` is
    not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphnjd6u11.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string str = \"\
    \";\n    long rem;\n    while (x != 0) \n    {\n        rem = x % base;\n    \
    \    str = to!string(rem) ~ str;\n        x /= base;\n    }\n    return str;\n\
    }\n/*\nThe factorial of a non-negative integer x, denoted by x!,\n    is the product\
    \ of all positive integers less than or equal to x.\n    For example,\nunittest\n\
    {\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\"\
    );\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L)\
    \ == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpctm2gg4b.d(27): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpctm2gg4b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    // assume that\
    \ the base number are less than 10\n    enum{ base_less_than_10 = true };\n  \
    \  assert(base > 1 && base_less_than_10);\n    string ret;\n    while (x != 0)\
    \ \n    {\n        ret ~= to!string(x % base);\n        x /= base;\n    }\n  \
    \  return ret.reverse;\n}\n/*\n    num is a string representation of decimal number\n\
    \    base is a base of a number\n    >>> string_to_int(\"12\", 10)\n    12\n \
    \   >>> string_to_int(\"101\", 2)\n    5\n    >>> string_to_int(\"101\", 3)\n\
    \    10\n    >>> string_to_int(\"210\", 3)\n    19\n    >>> string_to_int(\"1A\"\
    , 16)\n    26\n    >>> string_to_int(\"FF\", 16)\n    255\n*/\nlong string_to_int(string\
    \ num, long base) \n{\n    long ret = 0;\n    long power = 1;\n    foreach (c;\
    \ num.reverse) \n    {\n        ret += ((c >= '0' && c <= '9') ? (c - '0') : (c\
    \ - 'A' + 10)) * power;\n        power *= base;\n    }\n    return ret;\n}\n/*\n\
    \    num is a string representation of decimal number\n    base is a base of a\
    \ number\n    >>> string_to_int2(\"12\", 10)\n    12\n    >>> string_to_int2(\"\
    101\", 2)\n    5\n    >>> string_to_int2(\"101\", 3)\n    10\n    >>> string_to_int2(\"\
    210\", 3)\n    19\n    >>> string_to_int2(\"1A\", 16)\n    26\n    >>> string_to_int2(\"\
    FF\", 16)\n    255\n*/\nlong string_to_int2(string num, long base) \n{\n    long\
    \ ret = 0;\n    foreach (c; num) \n    {\n        ret *= base;\n        ret +=\
    \ ((c >= '0' && c <= '9') ? (c - '0') : (c - 'A\nunittest\n{\n    alias candidate\
    \ = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2qz0oe7h.d(18): Deprecation: use `{ }` for an empty statement,
    not `;`

    /tmp/tmp2qz0oe7h.d(77): Error: unterminated character constant

    /tmp/tmp2qz0oe7h.d(77): Error: found `unittest` when expecting `)`

    /tmp/tmp2qz0oe7h.d(77): Error: found `{` when expecting `)`

    /tmp/tmp2qz0oe7h.d(80): Error: found `alias` when expecting `;` following statement

    /tmp/tmp2qz0oe7h.d(95): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2qz0oe7h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164229
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    // You can use\
    \ shared static variables.\n    static string _change_base_cache = null;\n   \
    \ char[] dgt = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C',\
    \ 'D', 'E', 'F'];\n    if (_change_base_cache == null) \n    {\n        // Initialize\
    \ the cache.\n        _change_base_cache = \"\";\n    }\n    string s = \"\";\n\
    \    do \n    {\n        // This is necessary because modding by negative numbers\
    \ yields negative\n        // numbers in D.\n        s = dgt[cast(uint)((x % base\
    \ + base) % base)] ~ s;\n        x /= base;\n    } while (x != 0);\n    return\
    \ s;\n}\n/*\n>>> change_base(10L, 5L)\n\"20\"\n>>> change_base(2L, 5L)\n\"2\"\n\
    >>> change_base(2L, 16L)\n\"2\"\n>>> change_base(16L, 16L)\n\"10\"\n>>> change_base(20L,\
    \ 16L)\n\"14\"\n*/\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    import std.conv;\n\
    \    import std.string;\n    import std.algorithm;\n    import std.stdio;\n  \
    \  string result = \"\";\n    auto num = x;\n    auto c;\n    while (num > 0)\
    \ \n    {\n        c = num % base;\n        num = num / base;\n        result\
    \ = to!string(c) ~ result;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz9j04c2b.d(23): Error: no identifier for declarator `c`

    /tmp/tmpz9j04c2b.d(23): Deprecation: use `{ }` for an empty statement, not `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz9j04c2b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n\tstring ret;\n\t\
    long mod;\n\twhile (true)\n\t{\n\t\tmod = x % base;\n\t\tx = x / base;\n\t\tret\
    \ += std.string.fromUnsignedInteger(mod);\n\t\tif (x <= 0)\n\t\t\tbreak;\n\t}\n\
    \tstd.algorithm.reverse(ret);\n\treturn ret;\n}\nunittest\n{\n    alias candidate\
    \ = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0_6tdiw1.d(23): Error: undefined identifier `string` in package
    `std`

    /tmp/tmp0_6tdiw1.d(27): Error: undefined identifier `algorithm` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0_6tdiw1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string ret;\n\
    \    while (x > 0) \n    {\n        ret = to!string(x % base) ~ ret;\n       \
    \ x /= base;\n    }\n    return ret;\n}\n// Adds a new pair to the end of the\
    \ container.\nalias push_back = container.insert;\nunittest\n{\n    alias candidate\
    \ = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_fmrb3qv.d(26): Error: undefined identifier `container.insert`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_fmrb3qv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    if (x < base)\
    \ \n    {\n        return to!string(x);\n    }\n    else \n    {\n        return\
    \ change_base(x / base, base) ~ to!string(x % base);\n    }\n}\n/*\n    check\
    \ if a number is a palindrome or not in a specific base.\n    >>> is_palindrome(12L,\
    \ 10L)\n    false\n    >>> is_palindrome(121L, 10L)\n    true\n    >>> is_palindrome(11L,\
    \ 2L)\n    true\n*/\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdxwdu28c.d(19): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpdxwdu28c.d(23): Error: template instance `to!string` template `to` is
    not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdxwdu28c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    return x == 0L\
    \ ?\n    \t\"0\" :\n    \tformat!(\"%s\", change_base(x / base, base)) ~\n   \
    \ \tformat!(\"%s\", to!(string)((x % base) + '0'));\n}\nunittest\n{\n    alias\
    \ candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp7ptelr6.d(19): Error: template instance `format!("%s", change_base(x
    / base, base))` template `format` is not defined

    /tmp/tmpp7ptelr6.d(20): Error: template instance `format!("%s", to!string(x %
    base + ''0''))` template `format` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp7ptelr6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string converted_str\
    \ = \"\";\n    string temp_str = \"\";\n    int i;\n    long rest;\n    if (x\
    \ < 0L)\n    {\n        x = -x;\n        temp_str = \"-\";\n    }\n    i = 0;\n\
    \    do\n    {\n        rest = x % base;\n        if (rest > 9L)\n        {\n\
    \            temp_str = rest.to!string;\n            temp_str = temp_str[0..$-1];\n\
    \        }\n        else\n        {\n            temp_str = rest.to!string;\n\
    \        }\n        converted_str = temp_str ~ converted_str;\n        x = x /\
    \ base;\n        i = i + 1;\n    } while (x > 0L);\n    return converted_str;\n\
    }\n/*\nNext permutation.\n    if next permutation exist, return the next permutation.\n\
    \    if next permutation doesn't exist, return -1.\n    >>> next_permutation([1,2,3])\n\
    \    [1,3,2]\n    >>> next_permutation([1,3,2])\n    [2,1,3]\n    >>> next_permutation([3,2,1])\n\
    \    -1\n    \n*/\nauto next_permutation(T)(T src) \n{\n    import std.algorithm.iteration\
    \ : isSorted;\n    import std.algorithm.mutation : swap;\n    import std.conv\
    \ : to;\n    import std.range : take, drop;\n    import std.typecons : yes;\n\
    \    import std.traits : isIntegral;\n    static if (src.length == 0)\n    {\n\
    \        return -1;\n    }\n    else\n    {\n        static if (isIntegral!(typeof(src[0])))\n\
    \        {\n            static if (isSorted!(\"a < b\", src))\n            {\n\
    \                return -1;\n            }\n            else\n            {\n\
    \                auto it = src.length;\n                do\n                {\n\
    \                    it = it - 1;\n                } while (src[it - 1] >= src[it]);\n\
    \                if (it == 0)\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfhh27jcg.d(85): Error: found `unittest` instead of statement

    /tmp/tmpfhh27jcg.d(102): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpfhh27jcg.d(102): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpfhh27jcg.d(102): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfhh27jcg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    static long[]\
    \ tmp;\n    static long size;\n    static long index;\n    static long[] tmps;\n\
    \    static long sizes;\n    static long indexs;\n    long n;\n    n = x;\n  \
    \  index = 0;\n    size = 0;\n    while (n != 0) {\n        n = n / base;\n  \
    \      size = size + 1;\n    }\n    if (size == 0) {\n        return \"0\";\n\
    \    }\n    tmp = new long[];\n    tmp = std.array.array(0, size);\n    n = x;\n\
    \    while (n != 0) {\n        tmp[index] = n % base;\n        n = n / base;\n\
    \        index = index + 1;\n    }\n    indexs = 0;\n    sizes = 0;\n    while\
    \ (index > 0) {\n        sizes = sizes + 1;\n        index = index - 1;\n    }\n\
    \    tmps = new long[];\n    tmps = std.array.array(0, sizes);\n    index = 0;\n\
    \    while (index < sizes) {\n        tmps[indexs] = tmp[index];\n        index\
    \ = index + 1;\n        indexs = indexs + 1;\n    }\n    index = 0;\n    while\
    \ (index < sizes) {\n        tmps[index] = tmps[index] + 48;\n        index =\
    \ index + 1;\n    }\n    return cast(string)tmps;\n}\nunittest\n{\n    alias candidate\
    \ = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnstuzgae.d(34): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmpnstuzgae.d(35): Error: undefined identifier `array` in package `std`

    /tmp/tmpnstuzgae.d(48): Error: new can only create structs, dynamic arrays or
    class objects, not `long[]`''s

    /tmp/tmpnstuzgae.d(49): Error: undefined identifier `array` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnstuzgae.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    assert(base <=\
    \ 10);\n    string res = \"\";\n    while (x > 0) \n    {\n        res = std.string.to!string(x\
    \ % base) ~ res;\n        x /= base;\n    }\n    return res;\n}\nunittest\n{\n\
    \    alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\"\
    );\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L)\
    \ == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2dmb2e18.d(21): Error: undefined identifier `string` in package
    `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2dmb2e18.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    int len = (long)(log(x)\
    \ / log(base)) + 1;\n    long r;\n    int[] a = new int[len];\n    int i = 0;\n\
    \    while (x > 0) \n    {\n        r = x % base;\n        a[i] = r;\n       \
    \ x = x / base;\n        i++;\n    }\n    string result = \"\";\n    for (int\
    \ j = 0; j < len; j++) \n    {\n        result += a[j];\n    }\n    return result;\n\
    }\n/*\n    return true if input string is valid binary string, otherwise false.\n\
    \    >>> check_binary(\"011\")\n    true\n    >>> check_binary(\"123\")\n    false\n\
    */\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjha7ftyq.d(17): Error: C style cast illegal, use `cast(long)(log(x)
    / log(base))`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjha7ftyq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    // convert x from\
    \ base 10 to base 2\n    string binary = \"\";\n    while (x > 0) \n    {\n  \
    \      binary = to!string(x % base) ~ binary;\n        x /= base;\n    }\n   \
    \ return binary;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa7nh319c.d(21): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa7nh319c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    int length = (int)log(x,\
    \ base) + 1;\n    int[] digits = new int[length];\n    string result = \"\";\n\
    \    for (int i = 0; i < length; i++) \n    {\n        digits[i] = (int)(x % base);\n\
    \        x /= base;\n    }\n    for (int i = length - 1; i >= 0; i--) \n    {\n\
    \        result += digits[i];\n    }\n    return result;\n}\n/*\nCalculate the\
    \ weight of the given string w.\n    w is a binary string.\n    >>> ww(w)\n  \
    \  10\n    >>> ww(\"10101010\")\n    170\n    >>> ww(\"0111101\")\n    93\n  \
    \  >>> ww(\"00110101\")\n    53\n*/\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe6b6lldr.d(17): Error: C style cast illegal, use `cast(int)log(x,
    base)`

    /tmp/tmpe6b6lldr.d(22): Error: C style cast illegal, use `cast(int)(x % base)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe6b6lldr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string digit =\
    \ \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    string ret = \"\";\n    long\
    \ carry = 0L;\n    do \n    {\n        carry = x%base;\n        ret = digit[carry..carry+1]\
    \ ~ ret;\n        x = x/base;\n    } while (x>0L);\n    return ret;\n}\n/*\nConvert\
    \ integer x to roman numeral format.\n    >>> to_roman(20L)\n    \"XX\"\n    >>>\
    \ to_roman(12L)\n    \"XII\"\n    >>> to_roman(99L)\n    \"XCIX\"\n    >>> to_roman(15L)\n\
    \    \"XV\"\n    >>> to_roman(49L)\n    \"XLIX\"\n    >>> to_roman(3999L)\n  \
    \  \"MMMCMXCIX\"\n*/\nstring to_roman(long x)\n{\n    auto arr = typeof(arr)([[\"\
    \", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"],\
    \ \n    [\"\", \"X\", \"XX\", \"XXX\", \"XL\", \"L\", \"LX\", \"LXX\", \"LXXX\"\
    , \"XC\"], \n    [\"\", \"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\"\
    , \"DCCC\", \"CM\"], \n    [\"\", \"M\", \"MM\", \"MMM\"]]);\n    long base =\
    \ 10L;\n    long temp = x;\n    string ret = \"\";\n    while (temp>0L) \n   \
    \ {\n        ret = arr[cast(long)(log(base)/log(10L))][temp%base] ~ ret;\n   \
    \     temp = temp/base;\n    }\n    return ret;\n}\n/*\nDecode morse code to English,\
    \ input is a list of strings, \n    return the English sentence.\n    >>> morse_decode([\"\
    ....\", \".\", \".-..\", \".-..\", \"---\"])\n    \"HELLO\"\n    >>> morse_decode([\"\
    ..\", \"---\", \".\", \".-.\",\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv0kn87nf.d(59): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv0kn87nf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result;\n\
    \    while (x > 0) \n    {\n        result = result + x % base;\n        x = x\
    \ / base;\n    }\n    return result;\n}\n/*\n    problem : given integers a and\
    \ b, your task is to find the last digit of a^b.\n    >>> last_digit(2L, 2L)\n\
    \    4\n    >>> last_digit(9L, 7L)\n    9\n    >>> last_digit(3L, 3L)\n    7\n\
    */\nlong last_digit(long a, long b)\n{\n    long last_digits[] = [1L, 1L, 4L,\
    \ 4L, 2L, 1L, 1L, 4L, 4L, 2L];\n    long result = 1L;\n    string base_b = change_base(b,\
    \ 10L);\n    int i = base_b.length - 1;\n    int dig = 0;\n    while (i >= 0)\
    \ \n    {\n        dig = base_b[i] - '0';\n        result = result * last_digits[a\
    \ % 10L];\n        result = result * last_digits[dig];\n        a = a * a;\n \
    \       i--;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbj59w8iu.d(36): Deprecation: instead of C-style syntax, use D-style
    syntax `long[] last_digits`

    /tmp/tmpbj59w8iu.d(20): Error: incompatible types for `(result) + (x % base)`:
    `string` and `long`

    /tmp/tmpbj59w8iu.d(39): Error: cannot implicitly convert expression `base_b.length
    - 1LU` of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbj59w8iu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    import std.stdio\
    \ : format;\n    string result = \"\";\n    while (x >= base) \n    {\n      \
    \  result = format(\"%02s\", x % base) ~ result;\n        x /= base;\n    }\n\
    \    result = format(\"%02s\", x) ~ result;\n    return result;\n}\nunittest\n\
    {\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\"\
    );\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L)\
    \ == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp07586di8.d(17): Error: module `std.stdio` import `format` not found

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp07586di8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    import std.algorithm;\n\
    \    //int longest_string = log2(x) + 1;\n    string result = new string();\n\
    \    char temp;\n    if (x == 0)\n    {\n        result ~= \"0\";\n        return\
    \ result;\n    }\n    else\n    {\n        while (x > 0)\n        {\n        \
    \    //temp = x % base;\n            //temp = temp[0];\n            temp = \"\
    0123456789\"[x % base];\n            result ~= temp;\n            x /= base;\n\
    \        }\n        reverse(result);\n        return result;\n    }\n}\nunittest\n\
    {\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\"\
    );\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L)\
    \ == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp908hh4mi.d(19): Error: new can only create structs, dynamic arrays
    or class objects, not `string`''s

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/algorithm/mutation.d(2492):
    Error: template `std.algorithm.mutation.reverse` cannot deduce function from argument
    types `!()(immutable(ubyte)[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/algorithm/mutation.d(2464):        `std.algorithm.mutation.reverse(Range)(Range
    r) if (isBidirectionalRange!Range && (hasSwappableElements!Range || hasAssignableElements!Range
    && hasLength!Range && isRandomAccessRange!Range || isNarrowString!Range && isAssignable!(ElementType!Range)))`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/algorithm/mutation.d(2500):
    Error: template `std.algorithm.mutation.reverse` cannot deduce function from argument
    types `!()(immutable(ubyte)[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/algorithm/mutation.d(2464):        `std.algorithm.mutation.reverse(Range)(Range
    r) if (isBidirectionalRange!Range && (hasSwappableElements!Range || hasAssignableElements!Range
    && hasLength!Range && isRandomAccessRange!Range || isNarrowString!Range && isAssignable!(ElementType!Range)))`

    /tmp/tmp908hh4mi.d(36): Error: template instance `std.algorithm.mutation.reverse!string`
    error instantiating

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp908hh4mi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string l = \"\"\
    ;\n    int count = 0;\n    foreach(long i; 0 .. x/base)\n    {\n        long temp\
    \ = x % base;\n        count++;\n        x = x/base;\n        l = format(\"%s%s\"\
    , temp, l);\n    }\n    return format(\"%s%s\", x, l);\n}\n/*\nreturn list of\
    \ prime numbers less than x.\n    >>> get_primes(10L)\n    [2L, 3L, 5L, 7L]\n\
    \    >>> get_primes(20L)\n    [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]\n    >>> get_primes(5L)\n\
    \    [2L, 3L, 5L]\n*/\nlong[] get_primes(long x) \n{\n    long[] l = [];\n   \
    \ foreach(long i; 0 .. x)\n    {\n        if(is_prime(i))\n        {\n       \
    \     l ~= i;\n        }\n    }\n    return l;\n}\n/*\nreturn True if x is prime,\
    \ else False.\n    >>> is_prime(4L)\n    False\n    >>> is_prime(5L)\n    True\n\
    \    >>> is_prime(9L)\n    False\n*/\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplzbv9lpf.d(24): Error: undefined identifier `format`

    /tmp/tmplzbv9lpf.d(26): Error: undefined identifier `format`

    /tmp/tmplzbv9lpf.d(42): Error: undefined identifier `is_prime`

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string base_result;\n\
    \    /*\n    Invariant:\n    - x is the long number to change the base\n    -\
    \ base is the long number to be the base\n    - base_result is the string of the\
    \ base changed number\n    */\n    while (x != 0)\n    {\n        base_result\
    \ ~= (x % base).to!string;\n        x /= base;\n    }\n    return base_result.idup.reverse;\n\
    }\n/*\n    Return the greatest common divisor (GCD) of two numbers.\n    >>> find_gcd(40L,\
    \ 15L)\n    5L\n    >>> find_gcd(12L, 10L)\n    2L\n    >>> find_gcd(6L, 4L)\n\
    \    2L\n*/\nlong find_gcd(long a, long b)\n{\n    long temp;\n    if (a < b)\n\
    \    {\n        temp = a;\n        a = b;\n        b = temp;\n    }\n    if (b\
    \ == 0)\n    {\n        return a;\n    }\n    else\n    {\n        return find_gcd(b,\
    \ a % b);\n    }\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf0sqmqlt.d(26): Error: no property `to` for type `long`

    /tmp/tmpf0sqmqlt.d(29): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string)`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf0sqmqlt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string ret;\n\
    \    while (x > 0) {\n        long rem = x % base;\n        ret ~= to!string(rem);\n\
    \        x /= base;\n    }\n    return ret.idup.reverse;\n}\n/*\nCheck input number\
    \ is palindrome.\n    >>> is_palindrome(22)\n    true\n    >>> is_palindrome(4)\n\
    \    true\n    >>> is_palindrome(25)\n    false\n    >>> is_palindrome(234432)\n\
    \    true\n    \n*/\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8e3qjmqm.d(20): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmp8e3qjmqm.d(23): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string)`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8e3qjmqm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    long tmp = x;\n\
    \    string result = \"\";\n    while (x > 0) {\n        result = ($(x % base))\
    \ + result;\n        x = x / base;\n    }\n    return result;\n}\n/*\n2's complement\
    \ representation of long integers.\n    return string representation.\n    >>>\
    \ twos_comp_represent(2L)\n    \"00000000000000000000000000000010\"\n    >>> twos_comp_represent(3L)\n\
    \    \"00000000000000000000000000000011\"\n    >>> twos_comp_represent(4L)\n \
    \   \"00000000000000000000000000000100\"\n    >>> twos_comp_represent(5L)\n  \
    \  \"00000000000000000000000000000101\"\n    >>> twos_comp_represent(6L)\n   \
    \ \"00000000000000000000000000000110\"\n    >>> twos_comp_represent(7L)\n    \"\
    00000000000000000000000000000111\"\n    >>> twos_comp_represent(8L)\n    \"00000000000000000000000000001000\"\
    \n    >>> twos_comp_represent(9L)\n    \"00000000000000000000000000001001\"\n\
    \    >>> twos_comp_represent(10L)\n    \"00000000000000000000000000001010\"\n\
    \    >>> twos_comp_represent(11L)\n    \"00000000000000000000000000001011\"\n\
    \    >>> twos_comp_represent(12L)\n    \"00000000000000000000000000001100\"\n\
    \    >>> twos_comp_represent(13L)\n    \"00000000000000000000000000001101\"\n\
    \    >>> twos_comp_represent(14L)\n    \"00000000000000000000000000001110\"\n\
    \    >>> twos_comp_represent(15L)\n    \"00000000000000000000000000001111\"\n\
    \    >>> twos_comp_represent(16L)\n    \"00000000000000000000000000010000\"\n\
    \    >>> twos_comp_represent(17L)\n    \"00000000000000000000000000010001\"\n\
    \    >>> twos_comp_represent(18L)\n    \"00000000000000000000000000010010\"\n\
    \    >>> twos_comp_represent(19L)\n    \"00000000000000000000000000010011\"\n\
    \    >>> twos_comp_represent(20L)\n    \"00000000000000000000000000010100\"\n\
    \    >>> twos_comp_represent(21L)\n    \"00000000000000000000000000010101\"\n\
    \    >>> twos_comp_represent(\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcukb6yi9.d(20): Error: `$` is valid only inside [] of index or
    slice

    /tmp/tmpcukb6yi9.d(25): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcukb6yi9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    if (x < 0)\n    {\n        x = -x;\n        //result = result ~\
    \ \"-\";\n    }\n    else if (x == 0)\n    {\n        return \"0\";\n    }\n \
    \   long r;\n    while (x != 0)\n    {\n        r = x % base;\n        x = x /\
    \ base;\n        result = result ~ r.to!string;\n    }\n    return result.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.id\n\
    unittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L)\
    \ == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp206dze2n.d(35): Error: found `unittest` when expecting `;` following
    `return` statement

    /tmp/tmp206dze2n.d(52): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp206dze2n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    static string[]\
    \ number_list = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"\
    , \"9\"];\n    string result = \"\";\n    foreach(long i; 0..max(1, ceil(log(x)\
    \ / log(base)))) {\n        long base_x = pow(base, i);\n        long y = x /\
    \ base_x;\n        long x_remain = x % base_x;\n        result = format(\"%s%s\"\
    , number_list[y], result);\n        x = x_remain;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp338w4xc_.d(19): Error: undefined identifier `max`, did you mean
    function `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp338w4xc_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    assert(base <=\
    \ 10);\n    if (x == 0) return \"0\";\n    long sgn = sign(x);\n    x = abs(x);\n\
    \    string res = \"\";\n    while (x != 0) \n    {\n        res = to!string(x\
    \ % base) ~ res;\n        x /= base;\n    }\n    if (sgn == -1) res = \"-\" ~\
    \ res;\n    return res;\n}\nunittest\n{\n    alias candidate = change_base;\n\n\
    \    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp57134mih.d(19): Error: undefined identifier `sign`, did you mean
    template `sgn(F)(F x)`?

    /tmp/tmp57134mih.d(24): Error: template instance `to!string` template `to` is
    not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp57134mih.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string retval\
    \ = \"\";\n    long r;\n    while (x > 0) {\n        r = x % base;\n        retval\
    \ = std.string.format(\"%s%s\", r, retval);\n        x = x / base;\n    }\n  \
    \  return retval;\n}\n/*\nMake gray code string from input integer x.\n    Gray\
    \ code is a binary numeral system where two successive values differ in only one\
    \ bit.\n    return gray code string.\n    https://en.wikipedia.org/wiki/Gray_code\n\
    \    https://en.wikipedia.org/wiki/Anagrams\n    >>> make_gray_code(2L)\n    \"\
    01\"\n    >>> make_gray_code(3L)\n    \"011\"\n    >>> make_gray_code(4L)\n  \
    \  \"0111\"\n    >>> make_gray_code(5L)\n    \"01101\"\n*/\nstring make_gray_code(long\
    \ x) \n{\n    if (x == 0) {\n        return \"0\";\n    }\n    string retval =\
    \ \"0\";\n    long count = 1;\n    while (count < x) {\n        count *= 2;\n\
    \        retval = std.string.format(\"%s%s\", retval, retval);\n        string\
    \ diff_str = change_base(count / 2, 2);\n        if (diff_str.length() % 2 ==\
    \ 1) {\n            diff_str = std.string.format(\"0%s\", diff_str);\n       \
    \ }\n        foreach (i, c; retval[count / 2 .. $]) {\n            // Append \"\
    0\" if character is \"1\" and \"1\" if character is \"0\".\n            retval[i\
    \ + count / 2] = (c == '0') ? '1' : '0';\n        }\n    }\n    return retval;\n\
    }\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1b3p5rja.d(21): Error: undefined identifier `string` in package
    `std`

    /tmp/tmp1b3p5rja.d(50): Error: undefined identifier `string` in package `std`

    /tmp/tmp1b3p5rja.d(52): Error: no property `length` for type `string`

    /tmp/tmp1b3p5rja.d(53): Error: undefined identifier `string` in package `std`

    /tmp/tmp1b3p5rja.d(57): Error: cannot modify `immutable` expression `retval[i
    + cast(ulong)(count / 2L)]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1b3p5rja.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    const int EPSILON\
    \ = 0.000001;\n    const int TEN = 10;\n    const char* base_string = \"0123456789\"\
    ;\n    string result = \"\";\n    if (x < base)\n    {\n        result += base_string[x];\n\
    \        return result;\n    }\n    while (x >= base + EPSILON)\n    {\n     \
    \   result += base_string[x % base];\n        x /= base;\n    }\n    return result;\n\
    }\n/*\nCheck if input number x is palindrome or not.\n    return true if input\
    \ number is palindrome\n    return false if input number is not palindrome\n \
    \   >>> palindrome(121L)\n    True\n    >>> palindrome(123L)\n    False\n    >>>\
    \ palindrome(1221L)\n    True\n*/\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphaoifjz2.d(17): Error: cannot implicitly convert expression `1e-06`
    of type `double` to `const(int)`

    /tmp/tmphaoifjz2.d(23): Error: slice `result` is not mutable

    /tmp/tmphaoifjz2.d(28): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphaoifjz2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long quotient = x;\n    long remainder = 0;\n    tuple!(long, long)\
    \ quotient_remainder;\n    while (quotient != 0) \n    {\n        quotient_remainder\
    \ = div(quotient, base);\n        quotient = quotient_remainder[0];\n        remainder\
    \ = quotient_remainder[1];\n        result = remainder.to!string + result;\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3l6d94wg.d(20): Error: `tuple!(long, long)` is used as a type

    /tmp/tmp3l6d94wg.d(26): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3l6d94wg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    int digit = 0;\n\
    \    string res;\n    while (x >= base) \n    {\n        res += x % base;\n  \
    \      x /= base;\n    }\n    res += x;\n    return reverse(res);\n}\nunittest\n\
    {\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\"\
    );\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L)\
    \ == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxa_v4n7a.d(21): Error: incompatible types for `(res) += (x % base)`:
    `string` and `long`

    /tmp/tmpxa_v4n7a.d(24): Error: incompatible types for `(res) += (x)`: `string`
    and `long`

    /tmp/tmpxa_v4n7a.d(25): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string)`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxa_v4n7a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    long n = x;\n\
    \    string result = \"\";\n    while (n > 0) {\n        result = result ~ to!string(n\
    \ % base);\n        n /= base;\n    }\n    return result.dup.reverse;\n}\n/*\n\
    Check if number is palindrome.\n    >>> is_palindrome(1331L)\n    true\n    >>>\
    \ is_palindrome(12L)\n    false\n    \n*/\nunittest\n{\n    alias candidate =\
    \ change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbkdeu4o8.d(20): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpbkdeu4o8.d(23): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbkdeu4o8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    while (x > 0) {\n        result += \"0123456789\"[cast(int)x %\
    \ cast(int)base];\n        x /= base;\n    }\n    return result.reverse;\n}\n\
    //change to base 3 and store in a list\nlong[] digits(long x) {\n    return change_base(x,\
    \ 3).map!(ch => ch.to!long() - '0'.to!long()).array;\n}\nunittest\n{\n    alias\
    \ candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd06e38da.d(19): Error: slice `result` is not mutable

    /tmp/tmpd06e38da.d(22): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string)`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmpd06e38da.d(26): Error: no property `map` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd06e38da.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    auto result =\
    \ \"\";\n    while (x != 0) {\n        auto r = x % base;\n        x = x / base;\n\
    \        result = to!string(r) ~ result;\n    }\n    return result;\n}\n/*\nn\
    \ choose k.\n    >>> combination(6L, 2L)\n    15L\n    >>> combination(10L, 3L)\n\
    \    120L\n*/\nlong combination(long n, long k) \n{\n    if (k == 0) return 1;\n\
    \    if (n == 0) return 0;\n    if (n == k) return 1;\n    return combination(n\
    \ - 1, k - 1) + combination(n - 1, k);\n}\n/*\nConvert int x to string.\n    >>>\
    \ convert_int(123)\n    \"123\"\n    >>> convert_int(0)\n    \"0\"\n    >>> convert_int(-123)\n\
    \    \"-123\"\n    >>> convert_int(123456789123456789)\n    \"123456789123456789\"\
    \n*/\nstring convert_int(long x) \n{\n    auto is_negative = x < 0;\n    if (is_negative)\
    \ {\n        x = -x;\n    }\n    auto result = to!string(x);\n    if (is_negative)\
    \ {\n        result = \"-\" ~ result;\n    }\n    return result;\n}\n/*\nConvert\
    \ int x to string.\n    >>> convert_int(123)\n    \"123\"\n    >>> convert_int(0)\n\
    \    \"0\"\n    >>> convert_int(-123)\n    \"-123\"\n    >>> convert_int(123456789123456789)\n\
    \    \"123456789123456789\"\n*/\nstring convert_int(long x) \n{\n    auto is_negative\
    \ = x < 0;\n    if (is_negative) {\n        x = -x;\n    }\n    auto result =\
    \ to!string(x);\n    if (is_negative) {\n        result = \"-\" ~ result;\n  \
    \  }\n    return result;\n}\n/*\nConvert int x to string.\n    >>> convert_int(123)\n\
    unittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L)\
    \ == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3y_sskav.d(85): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3y_sskav.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string res;\n\
    \    while (x != 0) \n    {\n        res ~= to!string(x % base);\n        x /=\
    \ base;\n    }\n    return res.mirror;\n}\n/*\nCount the number of times 'base'\
    \ appears in representation of input number x in base.\n    return number of times\
    \ 'base' appears.\n    >>> count_base(15L, 3L)\n    0\n    >>> count_base(15L,\
    \ 2L)\n    3\n    >>> count_base(13L, 2L)\n    2\n    \n*/\nunittest\n{\n    alias\
    \ candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwdmang4h.d(20): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpwdmang4h.d(23): Error: no property `mirror` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwdmang4h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    while (x != 0) \n    {\n        append(result, to!string(x % base));\n\
    \        x /= base;\n    }\n    return result;\n}\n/*\nconvert long numbers to\
    \ string.\n    >>> long2string(10L)\n    \"10\"\n    >>> long2string(0L)\n   \
    \ \"0\"\n    >>> long2string(2315141242L)\n    \"2315141242\"\n*/\nstring long2string(long\
    \ x) \n{\n    return to!string(x);\n}\n/*\nConvert a number x to string.\n   \
    \ >>> int2string(10)\n    \"10\"\n    >>> int2string(0)\n    \"0\"\n    >>> int2string(2315141242)\n\
    \    \"2315141242\"\n*/\nstring int2string(int x) \n{\n    return to!string(x);\n\
    }\n/*\nConvert a number x to string.\n    >>> uint2string(10u)\n    \"10\"\n \
    \   >>> uint2string(0u)\n    \"0\"\n    >>> uint2string(2315141242u)\n    \"2315141242\"\
    \n*/\nstring uint2string(uint x) \n{\n    return to!string(x);\n}\n/*\nConvert\
    \ a number x to string.\n    >>> size_t2string(10u)\n    \"10\"\n    >>> size_t2string(0u)\n\
    \    \"0\"\n    >>> size_t2string(2315141242u)\n    \"2315141242\"\n*/\nstring\
    \ size_t2string(size_t x) \n{\n    return to!string(x);\n}\n/*\nLong to character.\n\
    \    >>> long2char(65L)\n    'A'\n    >>> long2char(122L)\n    'z'\n    >>> long2char(97L)\n\
    \    'a'\n*/\nchar long2char(long x) \n{\n    return to!char(x);\n}\n/*\nInteger\
    \ to character.\n    >>> int2char(65)\n    'A'\nunittest\n{\n    alias candidate\
    \ = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_ranygif.d(90): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_ranygif.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    \n     // if (x\
    \ < 0)\n      //    throw new Exception(\"Negative numbers are not accepted.\"\
    );\n    if (base < 2 || base > 10)\n        throw new Exception(\"This function\
    \ doesn't support base numbers less than 2 or greater than 10.\");\n    if (x\
    \ < base) \n    {\n        return to!string(x);\n    }\n    return change_base(x\
    \ / base, base) ~ to!string(x % base);\n}\n/*\nFind all the divisors of a number.\n\
    \    return tuple of all divisors.\n    >>> divisors(12L)\n    (1L, 2L, 3L, 4L,\
    \ 6L, 12L)\n    >>> divisors(9L)\n    (1L, 3L, 9L)\n*/\nTuple!(long) divisors(long\
    \ n) \n{\n    if (n <= 0)\n        throw new Exception(\"Negative numbers are\
    \ not accepted.\");\n    Tuple!(long) res;\n    if (n == 1) \n    {\n        res\
    \ ~= 1;\n        return res;\n    }\n    for (long i = 1; i <= sqrt(n); i++) \n\
    \    {\n        if (n % i == 0) \n        {\n            res ~= i;\n         \
    \   if (i != n / i)\n                res ~= n / i;\n        }\n    }\n    return\
    \ res;\n}\n/*\nFind all the divisors of a number.\n    return tuple of all divisors.\n\
    \    >>> divisors(12L)\n    (1L, 2L, 3L, 4L, 6L, 12L)\n    >>> divisors(9L)\n\
    \    (1L, 3L, 9L)\n*/\nTuple!(long) divisors(long n) \n{\n    if (n <= 0)\n  \
    \      throw new Exception(\"Negative numbers are not accepted.\");\n    Tuple!(long)\
    \ res;\n    if (n == 1) \n    {\n        res ~= 1;\n        return res;\n    }\n\
    \    for (long i = 1; i <= sqrt(n); i++)\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoviivw5v.d(76): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoviivw5v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string s = \"\"\
    ;\n    long n = x;\n    while (n != 0) \n    {\n        tuple(long,long) t = modf(n,\
    \ base);\n        s += to!string(t[0]);\n        n = t[1];\n    }\n    return\
    \ s;\n}\n/*\nReturns the list of primes up to x.\n    >>> primes(10L)\n    [2L,\
    \ 3L, 5L, 7L]\n*/\nlong[] primes(long x) \n{\n    long[] res = [];\n    for (long\
    \ i = 2; i <= x; i++) \n    {\n        bool is_prime = true;\n        for (long\
    \ k = 2; k < i; k++) \n        {\n            if (i % k == 0) \n            {\n\
    \                is_prime = false;\n                break;\n            }\n  \
    \      }\n        if (is_prime) \n        {\n            res ~= i;\n        }\n\
    \    }\n    return res;\n}\n/*\nFind the first number of repetend in the decimal\
    \ form of the given rational number.\n    >>> repetend(3L,4L)\n    1L\n    >>>\
    \ repetend(10L,3L)\n    3L\n    >>> repetend(2L,7L)\n    6L\n    >>> repetend(1234L,5678L)\n\
    \    0L\n*/\nlong repetend(long num, long den) \n{\n    long res = 0;\n    long\
    \ n = num;\n    long d = den;\n    long a = n / d;\n    n = n % d;\n    n *= 10;\n\
    \    long b = n / d;\n    n = n % d;\n    int k = 0;\n    while (true) \n    {\n\
    \        if (n == 0) \n        {\n            break;\n        }\n        k++;\n\
    \        tuple(long,long) t = modf(n, d);\n        n = t[1];\n        n *= 10;\n\
    \        if (n % d == 0) \n        {\n            break;\n        }\n        if\
    \ (n == 0) \n       \nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd_b3hm22.d(21): Error: found `,` when expecting `.` following long

    /tmp/tmpd_b3hm22.d(21): Error: found `long` when expecting identifier following
    `long`.

    /tmp/tmpd_b3hm22.d(21): Error: found `t` when expecting `;` following statement

    /tmp/tmpd_b3hm22.d(21): Error: found `=` instead of statement

    /tmp/tmpd_b3hm22.d(82): Error: found `,` when expecting `.` following long

    /tmp/tmpd_b3hm22.d(82): Error: found `long` when expecting identifier following
    `long`.

    /tmp/tmpd_b3hm22.d(82): Error: found `t` when expecting `;` following statement

    /tmp/tmpd_b3hm22.d(82): Error: found `=` instead of statement

    /tmp/tmpd_b3hm22.d(91): Error: found `unittest` instead of statement

    /tmp/tmpd_b3hm22.d(108): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd_b3hm22.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    import std.string;\n\
    \    string res = \"\";\n    int rem;\n    do \n    {\n        rem = x % base;\n\
    \        res = res ~ rem.to!string;\n        x /= base;\n    } while (x > 0);\n\
    \    return res;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpme4rppbo.d(22): Error: cannot implicitly convert expression `x
    % base` of type `long` to `int`

    /tmp/tmpme4rppbo.d(23): Error: no property `to` for type `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpme4rppbo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    import std.format;\n\
    \    import std.conv;\n    import std.string;\n    string result;\n    while (x\
    \ != 0) {\n        result = to!string(x % base) ~ result;\n        x /= base;\n\
    \    }\n    return result;\n}\n/*\ntest change_base()\n*/\nunittest\n{\n    alias\
    \ candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164232
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n\tenum long max_digit\
    \ = (1L << base);\n\tstatic int alphabet[] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'A',\
    \ 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q',\
    \ 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n\tassert(base <= max_digit &&\
    \ x > 0);\n\t\n\tstring ret = \"\";\n\twhile (x >= base) {\n\t\tret = ret ~ to!string(alphabet[x\
    \ % base]);\n\t\tx /= base;\n\t}\n\tret = ret ~ to!string(alphabet[x]);\n\t\n\t\
    return ret;\n}\n/*\nConvert each digit of digits string to number in given base.\n\
    \    >>> change_base_to_num(3L, \"22\")\n    8L\n    >>> change_base_to_num(2L,\
    \ \"111\")\n    7L\n    >>> change_base_to_num(2L, \"1000\")\n    8L\n    >>>\
    \ change_base_to_num(16L, \"AF\")\n    175L\n*/\nlong change_base_to_num(long\
    \ base, string digits)\n{\n\tassert(base > 0);\n\t\n\tlong ret = 0;\n\t\n\tforeach\
    \ (ch; digits) {\n\t\tlong digit = cast(long)ch;\n\t\tret = ret * base + digit;\n\
    \t}\n\t\n\treturn ret;\n}\n/*\nCalculate jacobi symbol of (a, n).\nunittest\n\
    {\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\"\
    );\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L)\
    \ == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp05834gmb.d(18): Deprecation: instead of C-style syntax, use D-style
    syntax `int[] alphabet`

    /tmp/tmp05834gmb.d(54): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp05834gmb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    long rem = 0L;\n\
    \    long quotient = x;\n    char[] stk = [];\n    //@assert(base < 10L);\n  \
    \  while (quotient != 0L) {\n        rem = quotient % base;\n        quotient\
    \ = quotient / base;\n        stk ~= rem + '0';\n    }\n    stk = stk.reverse();\n\
    \    string result = cast(string) stk;\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n\
    \    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L) ==\
    \ \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpshyh968f.d(24): Error: cannot append type `long` to type `char[]`

    /tmp/tmpshyh968f.d(26): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpshyh968f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n\tif (x == 0) \n\t\
    {\n\t\treturn \"0\";\n\t}\n\telse \n\t{\n\t\tbool is_neg = x < 0;\n\t\tx = abs(x);\n\
    \t\tstring ret;\n\t\twhile (x > 0) \n\t\t{\n\t\t\tret += '0' + (x % base);\n\t\
    \t\tx /= base;\n\t\t}\n\t\tif (is_neg) \n\t\t{\n\t\t\tret += '-';\n\t\t}\n\t\t\
    reverse(ret);\n\t\treturn ret;\n\t}\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm4yy09tt.d(28): Error: incompatible types for `(ret) += (48L +
    x % base)`: `string` and `long`

    /tmp/tmpm4yy09tt.d(33): Error: slice `ret` is not mutable

    /tmp/tmpm4yy09tt.d(35): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string)`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm4yy09tt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    // function change_base\n\
    \    // // split input number x to a sequence of base-powered parts.\n    // //\
    \ for example,\n    // // 8 -> [8], 8 -> [4,2], 8 -> [4,2,1]\n    // auto split\
    \ = [] (long x, long base) \n    // {\n    //     return unfold!(p => x > p.second\
    \ ? tuple(p.second, p.second * base) : null)(tuple(x, base));\n    // };\n   \
    \ // // fold the parts to single number.\n    // auto fold = [] (long[] part,\
    \ long base) \n    // {\n    //     return part.fold!(a => a.second * base + a.first)(0L);\n\
    \    // };\n    // // assert(fold(split(x, base), base) == x);\n    // // now,\
    \ change each part to string and join them.\n    // return split(x, base).map!(to!string).join(\"\
    \");\n    // // return change_base(x, base);\n    // // for example,\n    // //\
    \ [4,2,1] -> [\"4\", \"2\", \"1\"] -> \"421\"\n}\nunittest\n{\n    alias candidate\
    \ = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxp4z82xd.d(15): Error: function `tmpxp4z82xd.change_base` has no
    `return` statement, but is expected to return a value of type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxp4z82xd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string output\
    \ = \"\";\n    long quotient = x;\n    long remainder = 0;\n    int i = 0;\n \
    \   while (quotient != 0) \n    {\n        remainder = quotient % base;\n    \
    \    quotient = quotient / base;\n        output = format(\"%s%s\",remainder,\
    \ output);\n    }\n    return output;\n}\n// function to check if the number is\
    \ power of two\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyqpcjxig.d(25): Error: undefined identifier `format`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyqpcjxig.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    assert(base >\
    \ 1 && base < 10);\n    string s =\"\";\n    while (x >= base) \n    {\n     \
    \   s = ulong.to!string(x % base) ~ s;\n        x /= base;\n    }\n    s = ulong.to!string(x)\
    \ ~ s;\n    return s;\n}\nunittest\n{\n    alias candidate = change_base;\n\n\
    \    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9_f0vgti.d(21): Error: found `!` when expecting `;` following statement

    /tmp/tmp9_f0vgti.d(24): Error: found `!` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9_f0vgti.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    long i;\n    string\
    \ res = \"\";\n    while (x != 0) {\n        res = res + to!string(x % base);\n\
    \        x = x / base;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq0w5i4re.d(20): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq0w5i4re.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    import std.stdio;\n\
    \    string result = \"\";\n    long quotient = x;\n    long digit;\n    while\
    \ (quotient != 0) \n    {\n        digit = quotient % base;\n        result =\
    \ (char)(digit + '0') ~ result;\n        quotient /= base;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpesubi6n4.d(24): Error: C style cast illegal, use `cast(char)(digit
    + ''0'')`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpesubi6n4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string s = \"\"\
    ;\n    while (x > 0) \n    {\n        s = to!string(x % base) ~ s;\n        x\
    \ /= base;\n    }\n    return s;\n}\n/*\nChange numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are more than 10.\n    >>> change_base(8L, 16L)\n    \"8\"\n    >>>\
    \ change_base(12L, 16L)\n    \"C\"\n    >>> change_base(10L, 16L)\n    \"A\"\n\
    */\nstring change_base(long x, long base) \n{\n    string s = \"\";\n    while\
    \ (x > 0) \n    {\n        s = map(x % base, 10L, base, 'A') ~ s;\n        x /=\
    \ base;\n    }\n    return s;\n}\n/*\n  change numerical base of input number\
    \ x to base.\n  return string representation after the conversion.\n  base numbers\
    \ are more than 10.\n  >>> change_base(8L, 16L)\n  \"8\"\n  >>> change_base(12L,\
    \ 16L)\n  \"C\"\n  >>> change_base(10L, 16L)\n  \"A\"\n*/\nstring change_base(long\
    \ x, long base) \n{\n    string s = \"\";\n    while (x > 0) \n    {\n       \
    \ s = _map(x % base, 10L, base, 'A') ~ s;\n        x /= base;\n    }\n    return\
    \ s;\n}\n/*\n  change numerical base of input number x to base.\n  return string\
    \ representation after the conversion.\n  base numbers are more than 10.\n  >>>\
    \ change_base(8L, 16L)\n  \"8\"\n  >>> change_base(12L, 16L)\n  \"C\"\n  >>> change_base(10L,\
    \ 16L)\n  \"A\"\n*/\nstring change_base(long x, long base) \n{\n    string s =\
    \ \"\";\n    while (x > 0) \n    {\n        s = _map(x % base, 10L, base, '\n\
    unittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L)\
    \ == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpewgtl7mb.d(83): Error: unterminated character constant

    /tmp/tmpewgtl7mb.d(84): Error: found `unittest` when expecting `,`

    /tmp/tmpewgtl7mb.d(101): Error: found `void` when expecting `,`

    /tmp/tmpewgtl7mb.d(101): Error: found `{` when expecting `,`

    /tmp/tmpewgtl7mb.d(101): Error: expression expected, not `}`

    /tmp/tmpewgtl7mb.d(101): Error: found `End of File` when expecting `,`

    /tmp/tmpewgtl7mb.d(101): Error: found `End of File` when expecting `)`

    /tmp/tmpewgtl7mb.d(101): Error: found `End of File` when expecting `;` following
    statement

    /tmp/tmpewgtl7mb.d(101): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpewgtl7mb.d(101): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpewgtl7mb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result;\n\
    \    for (; x != 0; x /= base)\n    {\n        if (x % base == 10)\n         \
    \   result = \"A\" ~ result;\n        else if (x % base == 11)\n            result\
    \ = \"B\" ~ result;\n        else if (x % base == 12)\n            result = \"\
    C\" ~ result;\n        else if (x % base == 13)\n            result = \"D\" ~\
    \ result;\n        else if (x % base == 14)\n            result = \"E\" ~ result;\n\
    \        else if (x % base == 15)\n            result = \"F\" ~ result;\n    \
    \    else \n            result = to!string(x % base) ~ result;\n    }\n    return\
    \ result;\n}\n/*\n    char_to_int(char c)\n    Convert single char representation\
    \ to its integer value.\n    >>> char_to_int('A')\n    10\n    >>> char_to_int('1')\n\
    \    1\n*/\nlong char_to_int(char c)\n{\n    switch (c) \n    {\n        case\
    \ 'A': return 10;\n        case 'B': return 11;\n        case 'C': return 12;\n\
    \        case 'D': return 13;\n        case 'E': return 14;\n        case 'F':\
    \ return 15;\n        default: return cast(long)c - '0';\n    }\n}\n/*\n    to10(string\
    \ x, long base)\n    Convert input number x which is represented in base, to base-10.\n\
    \    >>> to10(\"9\", 10)\n    9\n    >>> to10(\"F\", 16)\n    15\n    >>> to10(\"\
    A\", 16)\n    10\n*/\nlong to10(string x, long base)\n{\n    long result = 0;\n\
    \    for (size_t i = 0; i < x.length; i++)\n    {\n        result = result * base\
    \ + char_to_int(x[i]);\n    }\n    return result;\n}\n/*\n    to_hex(long x)\n\
    \    Convert input number x to base-16.\n    >>> to_hex(255)\n    \"FF\"\n   \
    \ >>> to_hex(\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_1zmncid.d(77): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_1zmncid.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    \n    string result\
    \ = \"\";\n    long remainder;\n    int power = 0;\n    long remainder_quotient\
    \ = 0;\n    while (x > 0) {\n        \n        remainder = x % base;\n       \
    \ if (remainder > 0 && power == 0) {\n            power = 1;\n        }\n    \
    \    if (power > 0) {\n            remainder_quotient = x / base;\n          \
    \  x = remainder_quotient;\n        } else {\n            x = 0;\n        }\n\
    \        result = std.string.toString(remainder) + result;\n    }\n    return\
    \ result;\n}\n/*\nGiven a natural number x, return the value of x!\n    >>> factorial(5L)\n\
    \    120L\n    >>> factorial(3L)\n    6L\n*/\nlong factorial(long x) {\n    if\
    \ (x == 0) {\n        return 1;\n    }\n    long result = 1;\n    while (x > 0)\
    \ {\n        result = result * x;\n        x -= 1;\n    }\n    return result;\n\
    }\n/*\nGiven a string s, return a list of all its permutations.\n    >>> permutations(\"\
    a\")\n    [\"a\"]\n    >>> permutations(\"aa\")\n    [\"aa\"]\n    >>> permutations(\"\
    ab\")\n    [\"ab\", \"ba\"]\n    >>> permutations(\"ABC\")\n    [\"ABC\", \"ACB\"\
    , \"BAC\", \"BCA\", \"CAB\", \"CBA\"]\n*/\nList!(string) permutations(string s)\
    \ {\n    //If we only have one element in the string, return string.\n    if (s.length\
    \ == 1) {\n        return [s];\n    }\n    //If we have two elements in the string,\
    \ return a List of all possible cases.\n    if (s.length == 2) {\n        return\
    \ [s, s[1..$]~s[0..1]];\n    }\n    //If we have more than two elements in the\
    \ string,\n    //We have to permute all the characters in the string\n    //One\
    \ by one and generate all permutations of the rest of them.\n    string first_char\
    \ = s[0..\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4zrsz91m.d(80): Error: expression expected, not `unittest`

    /tmp/tmp4zrsz91m.d(81): Error: found `{` when expecting `,`

    /tmp/tmp4zrsz91m.d(82): Error: expression expected, not `alias`

    /tmp/tmp4zrsz91m.d(82): Error: found `candidate` when expecting `,`

    /tmp/tmp4zrsz91m.d(82): Error: expression expected, not `=`

    /tmp/tmp4zrsz91m.d(82): Error: found `change_base` when expecting `,`

    /tmp/tmp4zrsz91m.d(82): Error: expression expected, not `;`

    /tmp/tmp4zrsz91m.d(84): Error: found `assert` when expecting `,`

    /tmp/tmp4zrsz91m.d(84): Error: found `;` when expecting `,`

    /tmp/tmp4zrsz91m.d(85): Error: found `;` when expecting `,`

    /tmp/tmp4zrsz91m.d(86): Error: found `;` when expecting `,`

    /tmp/tmp4zrsz91m.d(87): Error: found `;` when expecting `,`

    /tmp/tmp4zrsz91m.d(88): Error: found `;` when expecting `,`

    /tmp/tmp4zrsz91m.d(89): Error: found `;` when expecting `,`

    /tmp/tmp4zrsz91m.d(90): Error: found `;` when expecting `,`

    /tmp/tmp4zrsz91m.d(91): Error: found `;` when expecting `,`

    /tmp/tmp4zrsz91m.d(92): Error:'
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n    if (base < 10) \n\
    \    {\n        string result;\n        for (; x != 0; x /= base) \n        {\n\
    \            static if (is(typeof(result) == typeof(Appender!(string)))) \n  \
    \          {\n                result.put(to!string(x % base));\n            }\
    \ \n            else \n            {\n                // As soon as we append\
    \ the first value, we'll have a dynamic\n                // array on our hands,\
    \ so we can switch over to using an\n                // appender in the next round.\n\
    \                result ~= to!string(x % base);\n            }\n        }\n  \
    \      return result;\n    }\n    else\n    {\n        return null;\n    }\nunittest\n\
    {\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\"\
    );\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L)\
    \ == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeidolf1u.d(16): Error: cannot use function constraints for non-template
    functions. Use `static if` instead

    /tmp/tmpeidolf1u.d(16): Error: declaration expected, not `if`

    /tmp/tmpeidolf1u.d(19): Error: declaration expected, not `for`

    /tmp/tmpeidolf1u.d(19): Error: no identifier for declarator `x`

    /tmp/tmpeidolf1u.d(19): Error: declaration expected, not `!=`

    /tmp/tmpeidolf1u.d(19): Error: no identifier for declarator `x`

    /tmp/tmpeidolf1u.d(19): Error: declaration expected, not `/=`

    /tmp/tmpeidolf1u.d(24): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeidolf1u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    auto change_base_helper\
    \ = function(long x, long base) \n    {\n        if (x == 0)\n            return\
    \ tuple(\"\", 0);\n        else \n        {\n            auto cur = x % base;\n\
    \            auto res = change_base_helper(x / base, base);\n            string\
    \ rest = res[0];\n            auto div = res[1];\n            return tuple(rest\
    \ ~ to!string(cur), div + 1);\n        }\n    };\n    auto tuple = change_base_helper(x,\
    \ base);\n    return tuple[0];\n}\n/*\n    Return a random number in the range\
    \ [0, 1).\n    return number, >= 0 and < 1.\n*/\nreal random() \n{\n    return\
    \ uniform(0, 1);\n}\n/*\nReturn a random integer in the range [a, b).\n    return\
    \ integer, >= a and < b.\n    >>> random_integer(1L, 10L)\n    1\n    >>> random_integer(1L,\
    \ 10L)\n    5\n    >>> random_integer(1L, 10L)\n    6\n    >>> random_integer(1L,\
    \ 10L)\n    8\n    >>> random_integer(1L, 10L)\n    10\n*/\nlong random_integer(long\
    \ a, long b) \n{\n    return a + long(random() * (b - a));\n}\n/*\n    Return\
    \ a random element from sequence\n    return an element from seq.\n    >>> random_element([1,\
    \ 2, 3, 4])\n    2\n    >>> random_element([1, 2, 3, 4])\n    4\n    >>> random_element([1,\
    \ 2, 3, 4])\n    3\n    >>> random_element([1, 2, 3, 4])\n    1\n    >>> random_element([1,\
    \ 2, 3, 4])\n    4\n*/\nT random_element(T)(T[] seq) \n{\n    return seq[random_integer(0,\
    \ seq.length)];\n}\n/*\nReturn a shuffled version of list.\n    return a list.\n\
    \    >>> shuffle([1, 2, 3, 4, 5])\n    [3, 5, 2, 1\nunittest\n{\n    alias candidate\
    \ = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptbfaryl6.d(77): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptbfaryl6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    //  It can be\
    \ written like the following.\n    //  immutable string alphabet = \"0123456789\"\
    ;\n    immutable string alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\
    \    string result;\n    assert(base <= alphabet.length);\n    while (x != 0)\
    \ {\n        long mod = x % base;\n        result = alphabet[mod .. mod + 1] ~\
    \ result;\n        x /= base;\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n\
    \    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L) ==\
    \ \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result;\n\
    \    do \n    {\n        int r = int(x % base);\n        result = string.of(r)\
    \ ~ result;\n        x /= base;\n    }\n    while (x);\n    return result;\n}\n\
    /*\nGet numbers in array which are dividable by d.\n    >>> get_divisible_by(3L,\
    \ [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L])\n    [3L, 6L, 9L]\n    >>> get_divisible_by(4L,\
    \ [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L])\n    [4L, 8L]\n    \n*/\nauto get_divisible_by(long\
    \ d, long[] nums) \n{\n    return nums.filter!(x => x % d == 0);\n}\n/*\nGenerate\
    \ primes under n.\n    >>> primes(20L)\n    [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]\n\
    \    >>> primes(100L)\n    [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L,\
    \ 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]\n    \n\
    */\nlong[] primes(long n) \n{\n    auto is_prime = new bool[];\n    foreach (i;\
    \ 0 .. n) \n    {\n        is_prime ~= true;\n    }\n    is_prime[0] = false;\n\
    \    is_prime[1] = false;\n    foreach (i; 2 .. n) \n    {\n        if (is_prime[i])\
    \ \n        {\n            for (long j = i * i; j < n; j += i) \n            {\n\
    \                is_prime[j] = false;\n            }\n        }\n    }\n    return\
    \ is\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvk7q1i1q.d(67): Error: `type identifier : specialization` expected
    following `is`

    /tmp/tmpvk7q1i1q.d(68): Error: found `{` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvk7q1i1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    import std.math;\n\
    \    import std.string;\n    import std.conv;\n    import std.algorithm;\n   \
    \ import std.range;\n    assert(base < 10, \"base must be less than 10\");\n \
    \   if (x == 0) return \"0\";\n    int minus_flag = 0;\n    string res = \"\"\
    ;\n    if (x < 0) \n    {\n        minus_flag = 1;\n        x = abs(x);\n    }\n\
    \    while (x != 0) \n    {\n        res ~= (to!string(x % base));\n        x\
    \ /= base;\n    }\n    if (minus_flag) res ~= \"-\";\n    return res.retro;\n\
    }\n/*\nCalculate the sum of a series\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo5okjcno.d(39): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo5okjcno.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    if (x == 0)\n\
    \        return \"0\";\n    \n    long a = x;\n    string res = \"\";\n    while\
    \ (a > 0)\n    {\n        res = to!string(a % base) ~ res;\n        a /= base;\n\
    \    }\n    return res;\n}\n/*\nReturns true if s is a palindrome and false otherwise.\n\
    \    >>> is_palindrome(\"racecar\")\n    true\n    >>> is_palindrome(\"race\"\
    )\n    false\n*/\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0e5903ux.d(24): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0e5903ux.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    assert(base <\
    \ 10);\n    static const char digit_chars[] = \"0123456789\";\n    string s;\n\
    \    while (x) \n    {\n        s ~= digit_chars[x % base];\n        x /= base;\n\
    \    }\n    return s.reverse;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp75wnbjv4.d(18): Deprecation: instead of C-style syntax, use D-style
    syntax `char[] digit_chars`

    /tmp/tmp75wnbjv4.d(25): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string)`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp75wnbjv4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    assert(base >\
    \ 1);\n    string result = \"\";\n    while (x != 0) \n    {\n        auto next_digit\
    \ = x % base;\n        result = to!string(next_digit) ~ result;\n        x /=\
    \ base;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq2xciefd.d(22): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq2xciefd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string str = \"\
    \";\n    while (x > 0) \n    {\n        str = cast(string) (x % base) + str;\n\
    \        x /= base;\n    }\n    return str;\n}\nunittest\n{\n    alias candidate\
    \ = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp40lqy4tz.d(20): Error: cannot cast expression `x % base` of type
    `long` to `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp40lqy4tz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string s = \"\"\
    ;\n    while (x > 0) {\n        auto n = (x % base);\n        s = char('0' + n)\
    \ ~ s;\n        x = (x - n) / base;\n    }\n    return s;\n}\nunittest\n{\n  \
    \  alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n\
    \    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L) ==\
    \ \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0h3bg1yc.d(20): Error: cannot implicitly convert expression `48L
    + n` of type `long` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0h3bg1yc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    // change the\
    \ base to string-integer\n    string ret = \"\";\n    for (long i = x; i != 0;\
    \ i /= base) \n    {\n        ret = (i % base).to!string() ~ ret;\n    }\n   \
    \ return ret;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm1trvu06.d(21): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm1trvu06.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    import std.conv\
    \ : to;\n    import std.array;\n    import std.algorithm;\n    import std.math;\n\
    \    import std.typecons;\n    string s;\n    auto f = [&](long x) {\n       \
    \ return to!string(x);\n    };\n    while (x > 0) \n    {\n        long k = x\
    \ % base;\n        s ~= f(k);\n        x /= base;\n    }\n    return s.reversed;\n\
    }\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8w3ghygh.d(23): Error: expression expected, not `]`

    /tmp/tmp8w3ghygh.d(23): Error: found `x` when expecting `.` following long

    /tmp/tmp8w3ghygh.d(23): Error: found `)` when expecting identifier following `long`.

    /tmp/tmp8w3ghygh.d(23): Error: found `{` when expecting `,`

    /tmp/tmp8w3ghygh.d(24): Error: expression expected, not `return`

    /tmp/tmp8w3ghygh.d(24): Error: found `to` when expecting `,`

    /tmp/tmp8w3ghygh.d(24): Error: found `;` when expecting `,`

    /tmp/tmp8w3ghygh.d(25): Error: expression expected, not `}`

    /tmp/tmp8w3ghygh.d(25): Error: found `;` when expecting `,`

    /tmp/tmp8w3ghygh.d(26): Error: expression expected, not `while`

    /tmp/tmp8w3ghygh.d(27): Error: found `{` when expecting `,`

    /tmp/tmp8w3ghygh.d(28): Error: found `k` when expecting `.` following long

    /tmp/tmp8w3ghygh.d(28): Error: found `=` when expecting identifier following `long`.

    /tmp/tmp8w3ghygh.d(28): Error: found `x` when expecting `,`

    /tmp/tmp8w3ghygh.d(28): Error: expression expected, not `%`

    /tmp/tmp8w3ghygh.d(28): Error: fou'
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    static import\
    \ std.string;\n    static import std.array;\n    static import std.format;\n \
    \   static import std.algorithm;\n    static import std.range;\n    static import\
    \ std.conv;\n    static import std.math;\n    static import std.range;\n    static\
    \ import std.typecons;\n    string conversion = to!string(x, base);\n    return\
    \ conversion;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp34gi9k_5.d(26): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp34gi9k_5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164231
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string res;\n\
    \    long rem;\n    bool negative;\n    if (x == 0) {\n        return \"0\";\n\
    \    }\n    if (x < 0) {\n        negative = true;\n        x = abs(x);\n    }\n\
    \    else {\n        negative = false;\n    }\n    while (x != 0) {\n        rem\
    \ = x % base;\n        x = x / base;\n        res ~= to!string(rem);\n    }\n\
    \    if (negative) {\n        res ~= \"-\";\n    }\n    return res.idup.reverse();\n\
    }\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx3y5yx5x.d(33): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpx3y5yx5x.d(38): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string)`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx3y5yx5x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    //error handling\n\
    \    enum\n    {\n        max_base = 9L,\n        min_base = 2L\n    };\n    if\
    \ (base > max_base || base < min_base)\n    {\n        throw new Exception(\"\
    base must be less than 10 and larger than 1\");\n    }\n    if (x < base)\n  \
    \  {\n        return to!string(x);\n    }\n    else\n    {\n        string str\
    \ = \"\";\n        while (x != 0)\n        {\n            auto tmp = x / base;\n\
    \            str ~= to!string(x - tmp * base);\n            x = tmp;\n       \
    \ }\n        return str.dup.reverse;\n    }\n}\n/*\n    Obtain the matrix representation\
    \ of the given word.\n    word should be only consisted of 'A' and 'B'\n    >>>\
    \ word_to_matrix(\"ABBABBA\")\n    [[0,1,0,0,0,0,0],[1,0,1,0,0,0,0],[0,1,0,1,0,0,0],[0,0,1,0,1,0,0],[0,0,0,1,0,1,0],[0,0,0,0,1,0,1],[0,0,0,0,0,1,0]]\n\
    */\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf6w_48pf.d(22): Deprecation: use `{ }` for an empty statement,
    not `;`

    /tmp/tmpf6w_48pf.d(29): Error: template instance `to!string` template `to` is
    not defined, did you mean No?

    /tmp/tmpf6w_48pf.d(37): Error: template instance `to!string` template `to` is
    not defined, did you mean No?

    /tmp/tmpf6w_48pf.d(40): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf6w_48pf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    while (x != 0) {\n        result = to!string(x % base) ~ result;\n\
    \        x /= base;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm6x_rgti.d(19): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm6x_rgti.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    static if (base\
    \ < 10)\n    {\n        enum change_base = join(\"\", map!(c =>\n            \
    \                                to!string(c - c.base / c.base + c.base % c.base),\n\
    \                                            unfold!(long)(c => c.base)(tuple(x,\
    \ base))));\n    }\n    else\n    {\n        enum change_base = \"Error\";\n \
    \   }\n    return change_base;\n}\n/*\n    Return the largest sum of non-adjacent\
    \ numbers.\n    >>> largest_non_adjacent([2, 4, 6, 2, 5])\n    13\n    >>> largest_non_adjacent([5,\
    \ 1, 1, 5])\n    10\n    >>> largest_non_adjacent([])\n    0\n*/\nunittest\n{\n\
    \    alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\"\
    );\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L)\
    \ == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjd1x5yob.d(17): Error: variable `base` cannot be read at compile
    time

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjd1x5yob.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string s = \"\"\
    ;\n    long r = 0L;\n    do \n    {\n        s = to!string(r) ~ s;\n        r\
    \ = x % base;\n        x = x / base;\n    } while (x > 0L);\n    return s;\n}\n\
    /*\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy0ik6ud3.d(27): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy0ik6ud3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    enum char[] table\
    \ = [ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n                    \
    \      'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J',\n                   \
    \       'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T',\n                  \
    \        'U', 'V', 'W', 'X', 'Y', 'Z' ];\n    static immutable char[] binary =\
    \ to!(char[])(table[0..1]);\n    static immutable char[] octal = to!(char[])(table[0..7]);\n\
    \    static immutable char[] hex = to!(char[])(table[0..15]);\n    static immutable\
    \ char[] base62 = to!(char[])(table[0..61]);\n    static immutable char[] base36\
    \ = to!(char[])(table[0..35]);\n    static immutable char[] base32 = to!(char[])(table[0..31]);\n\
    \    static immutable char[] base26 = to!(char[])(table[0..25]);\n    static immutable\
    \ char[] base22 = to!(char[])(table[0..21]);\n    static immutable char[] base20\
    \ = to!(char[])(table[0..19]);\n    static immutable char[] base16 = to!(char[])(table[0..15]);\n\
    \    static immutable char[] base12 = to!(char[])(table[0..11]);\n    static immutable\
    \ char[] base10 = to!(char[])(table[0..9]);\n    static immutable char[] base8\
    \ = to!(char[])(table[0..7]);\n    static immutable char[] base6 = to!(char[])(table[0..5]);\n\
    \    static immutable char[] base4 = to!(char[])(table[0..3]);\n    static immutable\
    \ char[] base2 = to!(char[])(table[0..1]);\n    static immutable char[] base1\
    \ = to!(char[])(table[0..0]);\n    static immutable char[][] tab = [ base62, base36,\
    \ base32, base26, base22,\n                                     \nunittest\n{\n\
    \    alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\"\
    );\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L)\
    \ == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpza3juj_d.d(40): Error: expression expected, not `unittest`

    /tmp/tmpza3juj_d.d(41): Error: comma expected separating array initializers, not
    `{`

    /tmp/tmpza3juj_d.d(57): Error: comma expected separating array initializers, not
    `void`

    /tmp/tmpza3juj_d.d(57): Error: semicolon expected, not `main`

    /tmp/tmpza3juj_d.d(57): Error: found `{` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpza3juj_d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    static import\
    \ numbers;\n    static import std.range;\n    return joiner(map!(numbers.to_string)(x.to!(long[])\
    \ base,iota(x.to!(long[]) base.digits)));\n}\n/*\n    >>> integer_order(8L, 3L)\n\
    \    3\n    >>> integer_order(3L, 8L)\n    1\n    >>> integer_order(2L, 8L)\n\
    \    0\n*/\nlong integer_order(long base, long x) \n{\n    static import std.math;\n\
    \    static import std.string;\n    static import std.stdio;\n    static import\
    \ std.algorithm;\n    static import std.range;\n    static import std.typecons;\n\
    \    static import std.array;\n    static import std.conv;\n    static import\
    \ std.meta;\n    static import std.bigint;\n    static import std.digest.sha;\n\
    \    static import std.getopt;\n    long[] y = new long[0];\n    long[] digits\
    \ = new long[0];\n    string[] new_digits = new string[0];\n    long digits_x\
    \ = 0;\n    long digits_base = 0;\n    long n = 0;\n    long i = 0;\n    long\
    \ k = 0;\n    long length = 0;\n    long length_base = 0;\n    long f = 0;\n \
    \   long d = 0;\n    long j = 0;\n    long quotient = 0;\n    long remainder =\
    \ 0;\n    long z = 0;\n    long e = 0;\n    long power = 0;\n    long sum = 0;\n\
    \    long s = 0;\n    //x = \"3454\";\n    //base = \"13\";\n    n = x.to!(long[])\
    \ base.digits;\n    //e = n.digits;\n    digits_x = x.to!(long[]) base;\n    digits_base\
    \ = base.to!(long[]) base;\n    //e = digits_x.digits;\n    //e = digits_base.digits;\n\
    \    new_digits = map!(numbers.to_string)(x\nunittest\n{\n    alias candidate\
    \ = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6q16x98u.d(19): Error: found `base` when expecting `,`

    /tmp/tmp6q16x98u.d(19): Error: expression expected, not `,`

    /tmp/tmp6q16x98u.d(19): Error: found `iota` when expecting `,`

    /tmp/tmp6q16x98u.d(19): Error: found `base` when expecting `)`

    /tmp/tmp6q16x98u.d(19): Error: found `)` when expecting `;` following `return`
    statement

    /tmp/tmp6q16x98u.d(19): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmp6q16x98u.d(65): Error: found `base` when expecting `;` following statement

    /tmp/tmp6q16x98u.d(67): Error: found `base` when expecting `;` following statement

    /tmp/tmp6q16x98u.d(67): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmp6q16x98u.d(68): Error: found `base` when expecting `;` following statement

    /tmp/tmp6q16x98u.d(68): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmp6q16x98u.d(72): Error: found `unittest` when expecting `,`

    /tmp/tmp6q16x98u.d(89): Error: found `void` when expecting `,`

    /tmp/tmp6q16x98u.d(89): Error: found `{` when expecting `,`

    /tmp/tmp6q'
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    assert(base >=\
    \ 2L);\n    assert(base <= 10L);\n    if (x == 0L)\n    {\n        return \"0\"\
    ;\n    }\n    enum bool is_neg = x < 0L;\n    if (is_neg)\n    {\n        x =\
    \ -x;\n    }\n    static immutable char digits[] = \"0123456789\";\n    uint buflen\
    \ = cast(uint)(long.sizeof * 8L / log(base));\n    immutable char[] buf = new\
    \ immutable char[](buflen);\n    auto i = $;\n    while (x > 0L)\n    {\n    \
    \    buf[i] = digits[x % base];\n        x /= base;\n        i++;\n    }\n   \
    \ if (is_neg)\n    {\n        buf[i] = '-';\n        i++;\n    }\n    return to!string(buf[i.ptr\
    \ .. $]);\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8lk8yagn.d(28): Deprecation: instead of C-style syntax, use D-style
    syntax `char[] digits`

    /tmp/tmp8lk8yagn.d(31): Error: `$` is valid only inside [] of index or slice

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8lk8yagn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    assert(base >\
    \ 1L && base < 10L);\n    string result = \"\";\n    do\n    {\n        result\
    \ = to!string(x % base) ~ result;\n        x /= base;\n    } while (x != 0L);\n\
    \    return result;\n}\n// the most popular way\n//unsigned binary = cast(unsigned)num;\n\
    //while (binary > 0)\n//{\n//    result = to!string(binary % 2) ~ result;\n//\
    \    binary /= 2;\n//}\nunittest\n{\n    alias candidate = change_base;\n\n  \
    \  assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\"\
    );\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdnivb2cp.d(21): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdnivb2cp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string ret = to!string(0L);\n\
    \    int i = 0;\n    while (x > 0) \n    {\n        i = x % base;\n        ret\
    \ ~= to!string(i);\n        x /= base;\n    }\n    ret = ret.chomp().dup.reverse;\n\
    \    return ret;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaqz4dkb5.d(17): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpaqz4dkb5.d(21): Error: cannot implicitly convert expression `x % base`
    of type `long` to `int`

    /tmp/tmpaqz4dkb5.d(22): Error: template instance `to!string` template `to` is
    not defined, did you mean No?

    /tmp/tmpaqz4dkb5.d(25): Error: no property `chomp` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaqz4dkb5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    static string\
    \ digits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    assert(base >= 2 &&\
    \ base <= 36);\n    string y;\n    while (x > 0) {\n        y += digits[x % base];\n\
    \        x /= base;\n    }\n    y.reverse();\n    return y;\n}\nunittest\n{\n\
    \    alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\"\
    );\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L)\
    \ == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoukf2y6q.d(21): Error: slice `y` is not mutable

    /tmp/tmpoukf2y6q.d(24): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string)`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoukf2y6q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string numstr\
    \ = \"\";\n    string ch;\n    long xc = x;\n    long quotient;\n    long rest;\n\
    \    do \n    {\n        quotient = xc / base;\n        rest = xc % base;\n  \
    \      ch = rest.to!string;\n        numstr ~= ch;\n        xc = quotient;\n \
    \   }\n    while (quotient > 0);\n    return numstr.reverse;\n}\nunittest\n{\n\
    \    alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\"\
    );\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L)\
    \ == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2qcba528.d(26): Error: no property `to` for type `long`

    /tmp/tmp2qcba528.d(31): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string)`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2qcba528.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    assert(base >\
    \ 1);\n    assert(base < 10);\n    string result;\n    while (x > 0) \n    {\n\
    \        result ~= to!string(x % base);\n        x /= base;\n    }\n    return\
    \ result.reverse;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprr86pikt.d(22): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmprr86pikt.d(25): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string)`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprr86pikt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    static const char\
    \ charmap[] = \"0123456789\";\n    static const auto bits_per_char = t.log(size_t(charmap[$\
    \ - 1]) + 1);\n    static const auto mask = size_t(charmap[$ - 1]);\n    assert(base\
    \ <= mask + 1);\n    string result = void;\n    while (x != 0) {\n        result\
    \ ~= charmap[x & mask];\n        x >>= bits_per_char;\n    }\n    return result;\n\
    }\n/*\nTakes long input and return long after removing trailing zeros.\n    >>>\
    \ zeroes_removal(800L)\n    8\n    >>> zeroes_removal(0L)\n    0\n    >>> zeroes_removal(10L)\n\
    \    1\n*/\nlong zeroes_removal(long x) \n{\n    while (x % 10 == 0) {\n     \
    \   x /= 10;\n    }\n    return x;\n}\n/*\nGives number of digits in a given number.\n\
    \    >>> digits_count(999L)\n    3\n    >>> digits_count(0L)\n    1\n    >>> digits_count(8L)\n\
    \    1\n*/\nlong digits_count(long x) \n{\n    return x == 0 ? 1 : (long)t.log10(x)\
    \ + 1;\n}\n/*\nGives number of permutations in string formed by concatenating\
    \ \n    two given strings.\n    >>> permutation_count(\"ab\", \"c\")\n    6\n\
    \    >>> permutation_count(\"a\", \"c\")\n    2\n    >>> permutation_count(\"\"\
    , \"\")\n    1\n*/\nlong permutation_count(string a, string b) \n{\n    if (a.length\
    \ == 0 || b.length == 0) {\n        return 1;\n    }\n    auto str = a ~ b;\n\
    \    static long fact[] = [1L, 1L, 2L, 6L, 24L, 120L, 720L, 5040L, 40320L, 362880L,\
    \ 3628800L, 39916800L, 479001600L, 6227020800L, 87\nunittest\n{\n    alias candidate\
    \ = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjub4i4ul.d(17): Deprecation: instead of C-style syntax, use D-style
    syntax `char[] charmap`

    /tmp/tmpjub4i4ul.d(55): Error: C style cast illegal, use `cast(long)t.log10(x)`

    /tmp/tmpjub4i4ul.d(73): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] fact`

    /tmp/tmpjub4i4ul.d(74): Error: comma expected separating array initializers, not
    `unittest`

    /tmp/tmpjub4i4ul.d(75): Error: semicolon expected, not `{`

    /tmp/tmpjub4i4ul.d(91): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjub4i4ul.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string res = \"\
    \";\n    while (x > 0) \n    {\n        res = cast(string) (x % base) + res;\n\
    \        x /= base;\n    }\n    return res;\n}\n/*\n    >>> is_palindrome(\"a\"\
    )\n    true\n    >>> is_palindrome(\"abcdcba\")\n    true\n    >>> is_palindrome(\"\
    racecar\")\n    true\n    >>> is_palindrome(\"abba\")\n    true\n    >>> is_palindrome(\"\
    12321\")\n    true\n    >>> is_palindrome(\"abcdefg\")\n    false\n    >>> is_palindrome(\"\
    1234\")\n    false\n    >>> is_palindrome(\"hello world\")\n    false\n    >>>\
    \ is_palindrome(\"ABCDDCBA\")\n    false\n*/\nunittest\n{\n    alias candidate\
    \ = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5dfmodkv.d(20): Error: cannot cast expression `x % base` of type
    `long` to `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5dfmodkv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    import std.typecons;\n\
    \    if (base < 10)\n    {\n        string result = \"\";\n        while (x >\
    \ 0)\n        {\n            result = format(\"%s%s\", (char)('0' + (cast(ulong)x\
    \ % base)), result);\n            x /= base;\n        }\n        return result;\n\
    \    }\n    else \n    {\n        string result = \"\";\n        while (x > 0)\n\
    \        {\n            result = format(\"%s%s\", (char)('A' + (cast(ulong)x %\
    \ base)), result);\n            x /= base;\n        }\n        return result;\n\
    \    }\n}\n/*\nConvert string base representation to base 10.\n    return base\
    \ 10 representation.\n    >>> to_base_10(\"1010\", 2L)\n    10L\n    >>> to_base_10(\"\
    22\", 3L)\n    8L\n    >>> to_base_10(\"111\", 2L)\n    7L\n    >>> to_base_10(\"\
    37\", 8L)\n    31L\n*/\nlong to_base_10(string s, long base) \n{\n    long result\
    \ = 0;\n    foreach (i, c; s)\n    {\n        result += (c - '0') * pow(base,\
    \ i);\n    }\n    return result;\n}\n/*\nConvert number x to have least bits.\n\
    \    return a converted number.\n    >>> to_least_bits(8L)\n    3L\n    >>> to_least_bits(9L)\n\
    \    4L\n    >>> to_least_bits(15L)\n    4L\n    >>> to_least_bits(16L)\n    5L\n\
    */\nlong to_least_bits(long x) \n{\n    long bits = 0;\n    while (x > 0)\n  \
    \  {\n        x /= 2;\n        bits++;\n    }\n    return bits;\n}\n/*\nConvert\
    \ all binary number to unsigned int.\n    return a converted number.\n    >>>\
    \ binary_to_unsigned_int(\"0\")\n    0L\n    >>> binary_to_unsigned_int(\"01\n\
    unittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L)\
    \ == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx68qchan.d(23): Error: C style cast illegal, use `cast(char)(''0''
    + cast(ulong)x % base)`

    /tmp/tmpx68qchan.d(33): Error: C style cast illegal, use `cast(char)(''A'' + cast(ulong)x
    % base)`

    /tmp/tmpx68qchan.d(82): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx68qchan.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    enum\n    {\n\
    \        MAX_DIGITS = (sizeof(long) * CHAR_BIT)/log(base) + 2\n    };\n    auto\
    \ y = x;\n    long digit = 0;\n    string s = \"\";\n    while (y > 0)\n    {\n\
    \        digit = y % base;\n        y = y / base;\n        s = to!string(digit)\
    \ ~ s;\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4v44i03d.d(19): Error: found `)` when expecting `.` following long

    /tmp/tmp4v44i03d.d(19): Error: found `*` when expecting identifier following `long`.

    /tmp/tmp4v44i03d.d(19): Error: found `CHAR_BIT` when expecting `,`

    /tmp/tmp4v44i03d.d(19): Error: found `}` when expecting `)`

    /tmp/tmp4v44i03d.d(20): Error: found `;` when expecting `,`

    /tmp/tmp4v44i03d.d(21): Error: basic type expected, not `auto`

    /tmp/tmp4v44i03d.d(21): Error: no identifier for declarator `_error_`

    /tmp/tmp4v44i03d.d(21): Error: if type, there must be an initializer

    /tmp/tmp4v44i03d.d(21): Error: found `auto` when expecting `,`

    /tmp/tmp4v44i03d.d(21): Error: found `;` when expecting `,`

    /tmp/tmp4v44i03d.d(22): Error: found `;` when expecting `,`

    /tmp/tmp4v44i03d.d(23): Error: found `;` when expecting `,`

    /tmp/tmp4v44i03d.d(24): Error: basic type expected, not `while`

    /tmp/tmp4v44i03d.d(24): Error: no identifier for declarator `_error_`

    /tmp/tmp4v44i03d.d(24): Error: if type, there must be an initializer

    /tmp/tmp4v44i03d.d(24): Error'
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result;\n\
    \    while (x > 0) {\n        result ~= (cast(string) x % base);\n        x /=\
    \ base;\n    }\n    return result.reverse;\n}\nunittest\n{\n    alias candidate\
    \ = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprizux9fr.d(19): Error: cannot cast expression `x` of type `long`
    to `string`

    /tmp/tmprizux9fr.d(22): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string)`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprizux9fr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    auto y = long.init;\n\
    \    y = x;\n    string restr = \"\";\n    while (y >= base) \n    {\n       \
    \ long rest = y % base;\n        y = y / base;\n        restr = to!string(rest)\
    \ ~ restr;\n    }\n    if (y == 0) \n    {\n        restr = \"0\" ~ restr;\n \
    \   }\n    else \n    {\n        restr = to!string(y) ~ restr;\n    }\n    return\
    \ restr;\n}\n/*\nConvert x to binary string representation.\n    >>> to_bin(3L)\n\
    \    \"11\"\n    >>> to_bin(10L)\n    \"1010\"\n    >>> to_bin(1L)\n    \"1\"\n\
    */\nstring to_bin(long x) \n{\n    return change_base(x, 2L);\n}\n/*\nConvert\
    \ x to hexadecimal string representation.\n    >>> to_hex(16L)\n    \"10\"\n \
    \   >>> to_hex(63L)\n    \"3f\"\n    >>> to_hex(15L)\n    \"f\"\n*/\nstring to_hex(long\
    \ x) \n{\n    return change_base(x, 16L);\n}\n/*\nConvert x to octal string representation.\n\
    \    >>> to_oct(10L)\n    \"12\"\n    >>> to_oct(5L)\n    \"5\"\n    >>> to_oct(77L)\n\
    \    \"115\"\n*/\nstring to_oct(long x) \n{\n    return change_base(x, 8L);\n\
    }\n/*\nConvert integer to tuple representation.\n    >>> int_to_tuple(10L)\n \
    \   (1, 0, 1, 0)\n    >>> int_to_tuple(7L)\n    (0, 1, 1, 1)\n    >>> int_to_tuple(0L)\n\
    \    (0, 0, 0, 0)\n*/\ntuple!(bool, \"a\", \"b\", \"c\", \"d\") int_to_tuple(long\
    \ x) \n{\n    string binstr =\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsqojoaci.d(87): Error: expression expected, not `unittest`

    /tmp/tmpsqojoaci.d(88): Error: semicolon expected, not `{`

    /tmp/tmpsqojoaci.d(104): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsqojoaci.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long quotient = 1L;\n    long remainder = 0L;\n    int i = 0;\n\
    \    long num = 0L;\n    long temp = 0L;\n    long divisor = 1L;\n    for (i =\
    \ 0; i < 1000; i++) \n    {\n        temp = quotient;\n        quotient = x /\
    \ base;\n        remainder = x % base;\n        num = (temp - quotient) * divisor\
    \ + remainder;\n        divisor *= 10L;\n        if (num != 0L) \n        {\n\
    \            result = result + to!string(num);\n        }\n        if (quotient\
    \ == 0L) \n        {\n            break;\n        }\n        x = quotient;\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp75t7b6cz.d(33): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp75t7b6cz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    long m = logBase(base,\
    \ x);\n    long n = pow(base, m);\n    string str_x = to!string(x);\n    string\
    \ ret = \"\";\n    int i = 0;\n    while (n != 0) {\n        ret ~= to!string(x\
    \ / n);\n        x = x % n;\n        n = n / base;\n    }\n    return ret;\n}\n\
    unittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L)\
    \ == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwtutmqo5.d(17): Error: undefined identifier `logBase`

    /tmp/tmpwtutmqo5.d(19): Error: template instance `to!string` template `to` is
    not defined, did you mean No?

    /tmp/tmpwtutmqo5.d(23): Error: template instance `to!string` template `to` is
    not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwtutmqo5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    // special case.\n\
    \    if (x == 0) return \"0\";\n    string result = \"\";\n    while (x != 0)\
    \ \n    {\n        // Use modulo operator here.\n        result = to!string(x\
    \ % base) ~ result;\n        x /= base;\n    }\n    return result;\n}\n/*\n  \
    \  Return true if the number x is prime.\n    >>> is_prime(0L)\n    False\n  \
    \  >>> is_prime(1L)\n    False\n    >>> is_prime(2L)\n    True\n    >>> is_prime(3L)\n\
    \    True\n    >>> is_prime(4L)\n    False\n    >>> is_prime(5L)\n    True\n \
    \   >>> is_prime(6L)\n    False\n    >>> is_prime(7L)\n    True\n    >>> is_prime(8L)\n\
    \    False\n    >>> is_prime(9L)\n    False\n    >>> is_prime(11L)\n    True\n\
    \    >>> is_prime(13L)\n    True\n    >>> is_prime(27L)\n    False\n    >>> is_prime(29L)\n\
    \    True\n    >>> is_prime(999983L)\n    True\n    >>> is_prime(9999991L)\n \
    \   True\n    >>> is_prime(99999967L)\n    True\n    >>> is_prime(9999999989L)\n\
    \    True\n    >>> is_prime(9999999991L)\n    True\n    >>> is_prime(99999999991L)\n\
    \    True\n    >>> is_prime(999999999967L)\n    True\n*/\nunittest\n{\n    alias\
    \ candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyzqpmud2.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyzqpmud2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    static string\
    \ dict = \"0123456789\";\n    string res = \"\";\n    for (; x > 0; x /= base)\
    \ \n    {\n        res = dict[cast(int)(x % base)] ~ res;\n    }\n    return res;\n\
    }\nstring change_base(long x, long base) \n{\n    string res = \"\";\n    for\
    \ (; x > 0; x /= base) \n    {\n        res = cast(string)(x % base) ~ res;\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = change_base;\n\n\
    \    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbrp7z2go.d(30): Error: cannot cast expression `x % base` of type
    `long` to `string`

    /tmp/tmpbrp7z2go.d(38): Error: `tmpbrp7z2go.change_base` called with argument
    types `(long, long)` matches both:

    /tmp/tmpbrp7z2go.d(15):     `tmpbrp7z2go.change_base(long x, long base)`

    and:

    /tmp/tmpbrp7z2go.d(25):     `tmpbrp7z2go.change_base(long x, long base)`

    /tmp/tmpbrp7z2go.d(39): Error: `tmpbrp7z2go.change_base` called with argument
    types `(long, long)` matches both:

    /tmp/tmpbrp7z2go.d(15):     `tmpbrp7z2go.change_base(long x, long base)`

    and:

    /tmp/tmpbrp7z2go.d(25):     `tmpbrp7z2go.change_base(long x, long base)`

    /tmp/tmpbrp7z2go.d(40): Error: `tmpbrp7z2go.change_base` called with argument
    types `(long, long)` matches both:

    /tmp/tmpbrp7z2go.d(15):     `tmpbrp7z2go.change_base(long x, long base)`

    and:

    /tmp/tmpbrp7z2go.d(25):     `tmpbrp7z2go.change_base(long x, long base)`

    /tmp/tmpbrp7z2go.d(41): Error: `tmpbrp7z2go.change_base` called with argument
    types `(long, long)` matches both:

    /tmp/tmpbrp7z2go.d(15):    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result;\n\
    \    long div;\n    if (x < 0) {\n        result = \"-\";\n        x = -x;\n \
    \   }\n    if (x == 0) {\n        return \"0\";\n    }\n    for (div = x / base;\
    \ div != 0; div /= base) {\n        result += std.string.fromCharCode(__dispatch(\"\
    i\", std.conv.to, '0' + x % base));\n        x = div;\n    }\n    result += std.string.fromCharCode(__dispatch(\"\
    i\", std.conv.to, '0' + x % base));\n    return std.string.reversed(result);\n\
    }\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl18y8gso.d(27): Error: undefined identifier `string` in package
    `std`

    /tmp/tmpl18y8gso.d(30): Error: undefined identifier `string` in package `std`

    /tmp/tmpl18y8gso.d(31): Error: undefined identifier `string` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl18y8gso.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    while (x > 0) {\n        result = to!string(x % base) ~ result;\n\
    \        x /= base;\n    }\n    return result;\n}\n/*\nConvert decimal number\
    \ to binary.\n    Create a binary representation of an input decimal number.\n\
    \    return the binary string\n    >>> decimal_to_binary(8L)\n    \"1000\"\n \
    \   >>> decimal_to_binary(5L)\n    \"101\"\n    >>> decimal_to_binary(2L)\n  \
    \  \"10\"\n    \n*/\nstring decimal_to_binary(long x) \n{\n    return change_base(x,\
    \ 2L);\n}\n/*\nConvert binary number to decimal.\n    Create a decimal representation\
    \ of an input binary number.\n    return the decimal value\n    >>> binary_to_decimal(\"\
    1000\")\n    8L\n    >>> binary_to_decimal(\"101\")\n    5L\n    >>> binary_to_decimal(\"\
    10\")\n    2L\n    \n*/\nlong binary_to_decimal(string binary) \n{\n    long result\
    \ = 0L;\n    foreach (i, b; binary) {\n        result += pow(2L, i) * to!long(b);\n\
    \    }\n    return result;\n}\n/*\nConvert decimal number to octal.\n    Create\
    \ a octal representation of an input decimal number.\n    return the octal string\n\
    \    >>> decimal_to_octal(8L)\n    \"10\"\n    >>> decimal_to_octal(5L)\n    \"\
    5\"\n    >>> decimal_to_octal(16L)\n    \"20\"\n    \n*/\nstring decimal_to_octal(long\
    \ x) \n{\n    return change_base(x, 8L);\n}\n/*\nConvert octal number to decimal.\n\
    \    Create a decimal representation of an input octal number.\n    return the\
    \ decimal value\n    >>> octal_to_decimal(\"10\")\n    8L\n    >>> octal_to_decimal(\"\
    5\")\n    5L\n    >>> octal_to_decimal(\"20\")\n    16L\n    \n*/\nlong octal_\n\
    unittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L)\
    \ == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdeowe44u.d(89): Error: semicolon expected, not `unittest`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdeowe44u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    if (x == 0) \n\
    \    {\n        return \"0\";\n    }\n    string res = \"\";\n    for (x = abs(x);\
    \ x > 0; x /= base) \n    {\n        res = format(\"%s%s\", x % base, res);\n\
    \    }\n    return res;\n}\n/*\nCheck if input is a prime number.\n    return\
    \ boolean value.\n    >>> is_prime(1L)\n    False\n    >>> is_prime(2L)\n    True\n\
    \    >>> is_prime(3L)\n    True\n    >>> is_prime(4L)\n    False\n*/\nunittest\n\
    {\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\"\
    );\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L)\
    \ == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpne5_ipe5.d(24): Error: undefined identifier `format`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpne5_ipe5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    \n    if (x <\
    \ base) \n    {\n        return to!string(x);\n    } \n    else \n    {\n    \
    \    auto result = change_base(x / base, base);\n        return result ~ change_base(x\
    \ % base, base);\n    }\n}\nunittest\n{\n    alias candidate = change_base;\n\n\
    \    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphc4r5vl5.d(20): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphc4r5vl5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    return base ==\
    \ 0 ? \"\" : change_base(x / base, base) ~ to!string(x % base);\n}\nunittest\n\
    {\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\"\
    );\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L)\
    \ == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdfhvcpvc.d(17): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdfhvcpvc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string res;\n\
    \    long temp = x;\n    while (temp != 0) {\n\t\tres = format(\"%d\", temp %\
    \ base) ~ res;\n\t\ttemp /= base;\n    }\n    return res;\n}\nunittest\n{\n  \
    \  alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n\
    \    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L) ==\
    \ \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppmn7tthu.d(20): Error: undefined identifier `format`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppmn7tthu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    long[] b_list\
    \ = new long[64];\n    long index = 0;\n    while (x > 0) \n    {\n        b_list[index]\
    \ = x % base;\n        x /= base;\n        index++;\n    }\n    string result\
    \ = \"\";\n    while (index > 0) \n    {\n        index--;\n        result +=\
    \ to!string(b_list[index]);\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpax7kfsol.d(29): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpax7kfsol.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    \n    if (x==0)\n\
    \        return \"0\";\n    import std.conv;\n    long[] digits;\n    while (x>0)\n\
    \    {\n        \n        digits ~= x%base;\n        x/=base;\n        \n    }\n\
    \    return digits.reverse.map!(x=>x.to!string).join(\"\");\n    \n    \n}\n/*\n\
    Find all divisors of input number x.\n    return sorted array of divisors.\n \
    \   >>> find_divisors(10L)\n    [1L, 2L, 5L, 10L]\n    >>> find_divisors(1L)\n\
    \    [1L]\n    >>> find_divisors(12L)\n    [1L, 2L, 3L, 4L, 6L, 12L]\n    >>>\
    \ find_divisors(28L)\n    [1L, 2L, 4L, 7L, 14L, 28L]\n    \n*/\nlong[] find_divisors(long\
    \ x) \n{\n    long[] res;\n    for (long i=1; i<=x; i++)\n    {\n        if (x%i==0)\n\
    \            res ~= i;\n    }\n    return res;\n}\n/*\nReturn true if input number\
    \ x is a prime number.\n    return false if x is not a prime number.\n    >>>\
    \ is_prime(2L)\n    true\n    >>> is_prime(3L)\n    true\n    >>> is_prime(4L)\n\
    \    false\n    >>> is_prime(5L)\n    true\n    >>> is_prime(9L)\n    false\n\
    \    \n*/\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmx010gi8.d(29): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(long[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmx010gi8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = null;\n    while (x > 0) \n    {\n        result ~= (x % base).to!string;\n\
    \        x /= base;\n    }\n    return std.algorithm.reverse(result);\n}\nunittest\n\
    {\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\"\
    );\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L)\
    \ == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptntuizg2.d(20): Error: no property `to` for type `long`

    /tmp/tmptntuizg2.d(23): Error: undefined identifier `algorithm` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptntuizg2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    for ( ; x != 0; x /= base)\n    {\n        result = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    [cast(int)(x % base)] ~ result;\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n\
    \    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L) ==\
    \ \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164231
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    import std.conv\
    \ : text;\n    import std.math : log;\n    if (x==0) \n        return \"0\";\n\
    \    long x_sign = (x<0) ? -1 : 1;\n    long base_sign = (base<0) ? -1 : 1;\n\
    \    long length = (long) log(abs(x), abs(base)) + 1;\n    string res = appender!string();\n\
    \    foreach(i; 0..length) \n    {\n        res.put( (char)(abs(x % base) + '0')\
    \ );\n        x /= base;\n    }\n    return res.data.reverse()[];\n}\nunittest\n\
    {\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\"\
    );\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L)\
    \ == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu65x2kmr.d(23): Error: C style cast illegal, use `cast(long)log(abs(x),
    abs(base))`

    /tmp/tmpu65x2kmr.d(27): Error: C style cast illegal, use `cast(char)(abs(x % base)
    + ''0'')`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu65x2kmr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string r = \"\"\
    ;\n    long x1 = x;\n    long rem;\n    while (x > 0) {\n        rem = x % base;\n\
    \        r = to!string(rem) ~ r;\n        x = x / base;\n    }\n    return r;\n\
    }\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo3d0aexx.d(22): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo3d0aexx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string digits\
    \ = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    string result = \"\";\n   \
    \ while (x > 0) {\n        long res = x % base;\n        result = (digits[res]).idup\
    \ ~ result;\n        x /= base;\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n\
    \    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L) ==\
    \ \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpammytsl0.d(21): Error: template `object.idup` cannot deduce function
    from argument types `!()(immutable(char))`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/druntime/import/object.d(4308):        `object.idup(T)(T[]
    a)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/druntime/import/object.d(4321):        `object.idup(T
    : void)(const(T)[] a)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpammytsl0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    while (x > 0) \n    {\n        auto y = x / base;\n        auto\
    \ r = x % base;\n        result = y.to!string + r.to!string + result;\n      \
    \  x = y;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmput83m2tw.d(22): Error: no property `to` for type `long`

    /tmp/tmput83m2tw.d(22): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmput83m2tw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string res = \"\
    \";\n    while (x) {\n\tres = x % base + res;\n\tx /= base;\n    }\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmsrddd6w.d(19): Error: incompatible types for `(x % base) + (res)`:
    `long` and `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmsrddd6w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string ans = \"\
    \";\n    long r;\n    while (x > 0) {\n        r = x % base;\n        x = x /\
    \ base;\n        ans = std.conv.to!string(r) ~ ans;\n    }\n    return ans;\n\
    }\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppy4b3wuv.d(22): Error: undefined identifier `conv` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppy4b3wuv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n\tstring result =\
    \ \"\";\n\tint remainder;\n\twhile (x >= base) {\n\t\tremainder = x % base;\n\t\
    \tresult = from(remainder) + result;\n\t\tx = x / base;\n\t}\n\tresult = from(x)\
    \ + result;\n\treturn result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp51eb824g.d(20): Error: cannot implicitly convert expression `x
    % base` of type `long` to `int`

    /tmp/tmp51eb824g.d(21): Error: undefined identifier `from`, did you mean function
    `fdim`?

    /tmp/tmp51eb824g.d(24): Error: undefined identifier `from`, did you mean function
    `fdim`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp51eb824g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    static int max_base\
    \ = 10;\n    static int[] charmap = [ '0', '1', '2', '3', '4', '5', '6', '7',\
    \ '8', '9' ];\n    string ret = \"\";\n    while (x != 0) \n    {\n        ret\
    \ = to!string(charmap[x % base]) ~ ret;\n        x /= base;\n    }\n    return\
    \ ret;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6025azk3.d(22): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6025azk3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    import std.string;\n\
    \    enum r ;\n    string result;\n    long div ,mod;\n    div = x/base;\n   \
    \ mod = x%base;\n    result = to!string(mod);\n    if (div == 0)\n    {\n    \
    \    return result;\n    }\n    else\n    {\n        r = change_base(div, base);\n\
    \        return r ~ result;\n    }\n}\n/* \nchanges base of the input number to\
    \ 2\n    returns string representation of the input number.\n    >>> bin(7L)\n\
    \    \"111\"\n    >>> bin(8L)\n    \"1000\"\n    >>> bin(3L)\n    \"11\"\n   \
    \ >>> bin(2L)\n    \"10\"\n    >>> bin(0L)\n    \"0\"\n    >>> bin(5L)\n    \"\
    101\"\n*/\nstring bin(long x) \n{\n    return change_base(x, 2L);\n}\nunittest\n\
    {\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\"\
    );\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L)\
    \ == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo028dw2x.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean tr(C1, C2, C3, C4 = immutable(char))(C1[] str, const(C2)[]
    from, const(C3)[] to, const(C4)[] modifiers = null)?

    /tmp/tmpo028dw2x.d(18): Error: enum `tmpo028dw2x.change_base.r` is forward referenced
    looking for base type

    /tmp/tmpo028dw2x.d(30): Error: `r` is not an lvalue and cannot be modified

    /tmp/tmpo028dw2x.d(18): Error: enum `tmpo028dw2x.change_base.r` is forward referenced
    looking for base type

    /tmp/tmpo028dw2x.d(18): Error: enum `tmpo028dw2x.change_base.r` is forward referenced
    looking for base type

    /tmp/tmpo028dw2x.d(18): Error: enum `tmpo028dw2x.change_base.r` is forward referenced
    looking for base type

    /tmp/tmpo028dw2x.d(18): Error: enum `tmpo028dw2x.change_base.r` is forward referenced
    looking for base type

    /tmp/tmpo028dw2x.d(31): Error: incompatible types for `(r) ~ (result)`: cannot
    use `~` with types

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo028dw2x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164231
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    return to!string(x,base);\n\
    }\nstring change_base(long x, long base,int width) \n{\n    return to!string(x,base,width);\n\
    }\n/*\n    >>> from_base(3L, \"22\")\n    8L\n    >>> from_base(2L, \"1000\")\n\
    \    8L\n    >>> from_base(2L, \"111\")\n    7L\n    \n*/\nlong from_base(long\
    \ base, string x) \n{\n    long ans;\n    if(parseInt(x,ans,base)) \n    {\n \
    \       return ans;\n    }\n    else \n    {\n        throw new Exception(\"parseInt()\
    \ failed.\");\n    }\n}\nunittest\n{\n    alias candidate = change_base;\n\n \
    \   assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\"\
    );\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmputi5y03r.d(17): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmputi5y03r.d(21): Error: template instance `to!string` template `to` is
    not defined, did you mean No?

    /tmp/tmputi5y03r.d(35): Error: undefined identifier `parseInt`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmputi5y03r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    static const string\
    \ char_table = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    long r, q;\n   \
    \ q = x / base;\n    r = x % base;\n    if (q == 0)\n        return char_table[r];\n\
    \    else\n        return change_base(q, base) ~ char_table[r];\n}\nunittest\n\
    {\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\"\
    );\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L)\
    \ == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdg44_9ei.d(22): Error: cannot implicitly convert expression `char_table[cast(ulong)r]`
    of type `immutable(char)` to `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdg44_9ei.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n  assert(base>0);\n\
    \  //TODO: Add your code here\n  string result;\n  //Using modulo operation and\
    \ div operator\n  while(x >= base) {\n    result.push_back(char(x%base+'0'));\n\
    \    x /= base;\n  }\n  result.push_back(char(x+'0'));\n  return result.reversed;\n\
    }\n/*\n    generate permutation for string s\n    return a sorted vector of strings\
    \ contains all permutations.\n    >>> generate_permutation(\"abc\")\n    [\"abc\"\
    , \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]\n    >>> generate_permutation(\"\
    aba\")\n    [\"aab\", \"aba\", \"baa\"]\n    >>> generate_permutation(\"\")\n\
    \    []\n*/\nvector[string] generate_permutation(string s) \n{\n  //TODO: Add\
    \ your code here\n  //NOTE: I am using the built-in function next_permutation.\
    \ If we want to do it manually, the following is the algorithm.\n  // 1. If there\
    \ is only one character, return a vector of one character. \n  // 2. If there\
    \ are n character, we know the nth character must be different from the n-1th\
    \ character. So we can fix the 1st character in {1,...,n} places, \n  //    then\
    \ recursively call the function for the remaining n-1 characters, and then we\
    \ can get n permutations.\n  if(s.length <= 1) return [s];\n  vector[string] tmp;\n\
    \  for(int i = 0; i < s.length; i++) {\n    string left = s.take(i);\n    string\
    \ right = s.drop(i+1);\n    tmp ~= left + right;\n  }\n  sort(tmp);\n  vector[string]\
    \ res;\n  do {\n    res ~= tmp;\n  } while(std.algorithm.next_permutation(tmp));\n\
    \  return res;\n}\n \n/*\n    calculate vector dot product of two vectors.\n \
    \   >>> dot_product([1,2,3],[2,3,4])\n    20\n    >>>\nunittest\n{\n    alias\
    \ candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9tts64e1.d(60): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9tts64e1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    long rem;\n  \
    \  string digits;\n    string reps = \"0123456789\";\n    while (x > 0) {\n  \
    \      rem = x % base;\n        x = x / base;\n        digits = reps[rem] + digits;\n\
    \    }\n    return digits;\n}\n/*\nInput is a string representing a decimal number.\n\
    Output is true if palindrome or false if not palindrome.\n    >>> is_palindrome(\"\
    10\")\n    False\n    >>> is_palindrome(\"0\")\n    True\n    >>> is_palindrome(\"\
    1\")\n    True\n*/\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptdetjz6o.d(23): Error: incompatible types for `(reps[cast(ulong)rem])
    + (digits)`: `immutable(char)` and `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptdetjz6o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string s = \"\"\
    ;\n    while (x > 0) \n    {\n        s = to!string(x % base) ~ s;\n        x\
    \ /= base;\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_zvpbwru.d(20): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_zvpbwru.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n    long quotient = x;\n\
    \    long rem;\n    string rez;\n    while (quotient != 0)\n    {\n        rem\
    \ = quotient % base;\n        quotient = quotient / base;\n        rez = to!string(rem)\
    \ ~ rez;\n    }\n    return rez;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvl4stzwi.d(16): Error: semicolon expected following function declaration

    /tmp/tmpvl4stzwi.d(19): Error: declaration expected, not `while`

    /tmp/tmpvl4stzwi.d(22): Error: no identifier for declarator `quotient`

    /tmp/tmpvl4stzwi.d(22): Error: declaration expected, not `=`

    /tmp/tmpvl4stzwi.d(23): Error: no identifier for declarator `rez`

    /tmp/tmpvl4stzwi.d(23): Error: declaration expected, not `=`

    /tmp/tmpvl4stzwi.d(24): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvl4stzwi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    if (base <= 10)\
    \ \n    {\n        import std.string;\n        char[] res = new char[64];\n  \
    \      immutable char c = '0';\n        int i = 63;\n        while (i != 0)\n\
    \        {\n            res[i] = c + x % base;\n            x /= base;\n     \
    \       --i;\n        }\n        return res[].dup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup\n\
    unittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L)\
    \ == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpckvt82st.d(30): Error: found `unittest` when expecting `;` following
    `return` statement

    /tmp/tmpckvt82st.d(47): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpckvt82st.d(47): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpckvt82st.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    if (x < 0) {\n\
    \        return \"-\" + change_base(-x, base);\n    }\n    else if (x >= base)\
    \ {\n        return change_base(x / base, base) + \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    [x % base];\n    }\n    else {\n        return \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    [x];\n    }\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx66r2vfd.d(18): Error: invalid array operation `"-" + change_base(-x,
    base)` (possible missing [])

    /tmp/tmpx66r2vfd.d(21): Error: incompatible types for `(change_base(x / base,
    base)) + ("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"[cast(ulong)(x % base)])`: `string`
    and `immutable(char)`

    /tmp/tmpx66r2vfd.d(24): Error: cannot implicitly convert expression `"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"[cast(ulong)x]`
    of type `immutable(char)` to `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx66r2vfd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164231
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    assert(base >\
    \ 1);\n    assert(base < 10);\n    long n = x;\n    auto s = appender!string();\n\
    \    s.put(\"\");\n    long r;\n    if (n > base)\n    {\n        r = n % base;\n\
    \        n = n / base;\n        s.put(r);\n    }\n    while (n > base)\n    {\n\
    \        r = n % base;\n        n = n / base;\n        s.put(r);\n    }\n    s.put(n);\n\
    \    return s.data;\n}\nunittest\n{\n    alias candidate = change_base;\n\n  \
    \  assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\"\
    );\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpru0f4tif.d(20): Error: template instance `appender!string` template
    `appender` is not defined

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string converted;\n\
    \    while (x > 0) {\n        converted = converted ~ (x % base);\n        x /=\
    \ base;\n    }\n    return converted;\n}\n/*\nChecks input number x is prime.\n\
    \    returns true or false.\n    >>> is_prime(2L)\n    true\n    >>> is_prime(3L)\n\
    \    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(5L)\n    true\n*/\n\
    unittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L)\
    \ == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2mukxyke.d(19): Error: incompatible types for `(converted) ~ (x
    % base)`: `string` and `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2mukxyke.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    long t;\n    string\
    \ s = \"\";\n    while (x != 0) \n    {\n        t = x % base;\n        x = x\
    \ / base;\n        if (t == 0) \n        {\n            s = \"0\" ~ s;\n     \
    \   }\n        else \n        {\n            s = \"1\" ~ s;\n        }\n    }\n\
    \    return s;\n}\n/*\nChange numerical base of input number x to base.\n    return\
    \ string representation after the conversion.\n    base numbers are greater than\
    \ 10.\n    >>> change_base(15L, 16L)\n    \"F\"\n    >>> change_base(15L, 8L)\n\
    \    \"17\"\n    >>> change_base(15L, 17L)\n    \"E\"\n    \n*/\nstring change_base_gt10(long\
    \ x, long base) \n{\n    long t;\n    string s = \"\";\n    while (x != 0) \n\
    \    {\n        t = x % base;\n        x = x / base;\n        if (t < 10) \n \
    \       {\n            s = t.to!string ~ s;\n        }\n        else \n      \
    \  {\n            s = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"[t - 10] ~ s;\n        }\n\
    \    }\n    return s;\n}\n/*\n    Change numerical base of input number x to base.\n\
    \    return string representation after the conversion.\n    >>> change_base_2(15L,\
    \ 16L)\n    \"F\"\n    >>> change_base_2(15L, 8L)\n    \"17\"\n    >>> change_base_2(15L,\
    \ 17L)\n    \"E\"\n    >>> change_base_2(8L, 3L)\n    \"22\"\n    >>> change_base_2(8L,\
    \ 2L)\n    \"1000\"\n    >>> change_base_2(7L, 2L)\n    \"111\"\n*/\nstring change_base_2(long\
    \ x, long base) \n{\n    if (base < 10) \n    {\n        return change_base(x,\
    \ base);\n    }\n    else \n\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzevzdybm.d(89): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzevzdybm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    long[] base_array;\n\
    \    long base_val;\n    string base_str;\n    long i;\n    base_array = new long[100L];\n\
    \    i = 0L;\n    base_val = x;\n    while (base_val > 0L)\n    {\n        base_array[i]\
    \ = base_val % base;\n        base_val = base_val / base;\n        i = i + 1L;\n\
    \    }\n    base_str = new string();\n    while (i > 0L)\n    {\n        i = i\
    \ - 1L;\n        base_str = base_str ~ to!string(base_array[i]);\n    }\n    return\
    \ base_str;\n}\n/*\n    Get a tuple of divisors for integer n.\n    >>> get_divisors(1L)\n\
    \    (1,)\n    >>> get_divisors(2L)\n    (1, 2)\n    >>> get_divisors(3L)\n  \
    \  (1, 3)\n    >>> get_divisors(6L)\n    (1, 2, 3, 6)\n*/\ntuple!(long) get_divisors(long\
    \ n) \n{\n    long i;\n    tuple!(long) divisors;\n    i = 1L;\n    divisors =\
    \ tuple!(long)();\n    while (i <= n)\n    {\n        if (n % i == 0L)\n     \
    \   {\n            divisors = divisors ~ tuple!(long)(i);\n        }\n       \
    \ i = i + 1L;\n    }\n    return divisors;\n}\n/*\n    Get sum of integers in\
    \ a tuple.\n    >>> sum_tuple((1L,))\n    1\n    >>> sum_tuple((1L, 2L))\n   \
    \ 3\n    >>> sum_tuple((1L, 2L, 3L))\n    6\n*/\nlong sum_tuple(tuple!(long) divisors)\
    \ \n{\n    long sum;\n    sum = 0L;\n    foreach (d; divisors)\n    {\n      \
    \  sum = sum + d;\n    }\n    return\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphr7nx94p.d(83): Error: expression expected, not `unittest`

    /tmp/tmphr7nx94p.d(84): Error: found `{` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphr7nx94p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    struct Pair \n\
    \    {\n        char key;\n        int value;\n    }\n    typedef;\n    import\
    \ std.typecons;\n    import std.string;\n    string digits = \"0123456789abcdefghijklmnopqrstuvwxyz\"\
    ;\n    Pair [] pairs = [ Pair('0', 0), Pair('1', 1), Pair('2', 2), Pair('3', 3),\
    \ Pair('4', 4), Pair('5', 5), Pair('6', 6), Pair('7', 7), Pair('8', 8), Pair('9',\
    \ 9), Pair('a', 10), Pair('b', 11), Pair('c', 12), Pair('d', 13), Pair('e', 14),\
    \ Pair('f', 15), Pair('g', 16), Pair('h', 17), Pair('i', 18), Pair('j', 19), Pair('k',\
    \ 20), Pair('l', 21), Pair('m', 22), Pair('n', 23), Pair('o', 24), Pair('p', 25),\
    \ Pair('q', 26), Pair('r', 27), Pair('s', 28), Pair('t', 29), Pair('u', 30), Pair('v',\
    \ 31), Pair('w', 32), Pair('x', 33), Pair('y', 34), Pair('z', 35) ];\n    string\
    \ result = \"\";\n    while (x != 0) \n    {\n        result = digits[x % base]\
    \ ~ result;\n        x /= base;\n    }\n    return result;\n}\n \nunittest\n{\n\
    \    alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\"\
    );\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L)\
    \ == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4al7cxp0.d(22): Error: undefined identifier `typedef`, did you
    mean struct `Typedef(T, T init = T.init, string cookie = null)`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4al7cxp0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164231
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result;\n\
    \    while (x > 0) {\n        result ~= char('0' + x % base);\n        x /= base;\n\
    \    }\n    return result.chomp();\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf7q10sip.d(19): Error: cannot implicitly convert expression `48L
    + x % base` of type `long` to `char`

    /tmp/tmpf7q10sip.d(22): Error: no property `chomp` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf7q10sip.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164231
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    long temp = x;\n\
    \    string result = \"\";\n    string str_base = to!string(base);\n    while\
    \ (temp != 0) \n    {\n        result = to!string(temp % base) ~ result;\n   \
    \     temp /= base;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzf2jaisi.d(19): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpzf2jaisi.d(22): Error: template instance `to!string` template `to` is
    not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzf2jaisi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164231
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n\tlong max = x / base;\n\
    \tstring s;\n\twhile (max != 0) \n\t{\n\t\ts = to!string(x % base) ~ s;\n\t\t\
    x = max;\n\t\tmax = x / base;\n\t}\n\ts = to!string(x % base) ~ s;\n\treturn s;\n\
    }\n/*\nCheck if number x is divisible by number y.\n    >>> is_divisible(10L,\
    \ 2L)\n    true\n    >>> is_divisible(10L, 3L)\n    false\n*/\nunittest\n{\n \
    \   alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n\
    \    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L) ==\
    \ \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfz8z1l50.d(21): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpfz8z1l50.d(25): Error: template instance `to!string` template `to` is
    not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfz8z1l50.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164231
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    while (x > 0) {\n        result = (to!string(x % base)) ~ result;\n\
    \        x /= base;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7qk3ljej.d(19): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7qk3ljej.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164231
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    static if (base\
    \ < 10)\n    {\n        string result = \"\";\n        while (x != 0) \n     \
    \   {\n            result = result ~ (to!string(x % base));\n            x /=\
    \ base;\n        }\n        return result;\n    }\n    else\n    {\n        string\
    \ result = \"\";\n        while (x != 0) \n        {\n            result = result\
    \ ~ (to!string(65 + x % base));\n            x /= base;\n        }\n        return\
    \ result;\n    }\n}\n/*\nI take input number and add one to it.\n    I check the\
    \ binary representation of the number.\n    I count the number of iterations of\
    \ 1's (ones).\n    >>> change_base(8L, 3L)\n    \"22\"\n    >>> change_base(8L,\
    \ 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"111\"\n    \n*/\nunittest\n\
    {\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\"\
    );\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L)\
    \ == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpntnvpde_.d(17): Error: variable `base` cannot be read at compile
    time

    /tmp/tmpntnvpde_.d(32): Error: template instance `to!string` template `to` is
    not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpntnvpde_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164231
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string s = \"\"\
    ;\n    foreach(i;0 .. x)\n    {\n        s ~= format(\"%d\", x % base);\n    \
    \    x /= base;\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdw8fnf8t.d(20): Error: undefined identifier `format`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdw8fnf8t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164231
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    long i = 0L;\n\
    \    long quotient = x;\n    long remainder = 0L;\n    long n = 2L;\n    long\
    \ base10 = 0L;\n    string base_string = \"\";\n    string temp = \"\";\n    string\
    \ exp_string = \"\";\n    string final_string = \"\";\n    //defining the length\
    \ of the string representation of the number in base.\n    while (n < x) \n  \
    \  {\n        n = pow(base, i);\n        i = i + 1L;\n    }\n    while (i > 0L)\
    \ \n    {\n        quotient = x / n;\n        remainder = x % n;\n        base10\
    \ = (base * remainder) + quotient;\n        x = remainder;\n        n = n / base;\n\
    \        i = i - 1L;\n        // Converting the base10 number to string representation.\n\
    \        temp = to!string(base10);\n        // Making length of the string representation\
    \ always 1.\n        if (temp.length == 0L) \n        {\n            temp = \"\
    0\";\n        }\n        base_string = base_string ~ temp;\n    }\n    // Exponent.\n\
    \    while (x > 0L) \n    {\n        remainder = x % base;\n        x = x / base;\n\
    \        temp = to!string(remainder);\n        // Making length of the string\
    \ representation always 1.\n        if (temp.length == 0L) \n        {\n     \
    \       temp = \"0\";\n        }\n        exp_string = exp_string ~ temp;\n  \
    \  }\n    final_string = base_string ~ \"e\" ~ exp_string;\n    return final_string;\n\
    }\n//------------------------------------------------------------------------\n\
    /*\nConvert unsigned number x to string representation.\n    return string representation\
    \ after the conversion.\n    >>> unsigned_to_string(8L)\n    \"1000\"\n    >>>\
    \ unsigned_to_string(7L)\n    \"111\"\n*/\nstring unsigned_to_string(long x) \n\
    {\n    long i = 0L;\n    long quotient = x;\n    long remainder = 0L;\n    long\
    \ n = 2L;\n    long base10 = 0L\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphaw7a8zd.d(81): Error: semicolon expected, not `unittest`

    /tmp/tmphaw7a8zd.d(81): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphaw7a8zd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string r = \"\"\
    ;\n    while (x > 0) \n    {\n        r = r ~ to!string(x % base);\n        x\
    \ /= base;\n    }\n    return r;\n}\n/*\ndouble up string.\n    >>> double_up(\"\
    ab\")\n    \"aabb\"\n    >>> double_up(\"abb\")\n    \"aabbbb\"\n*/\nstring double_up(string\
    \ s) \n{\n    string r = \"\";\n    foreach (const char c; s) \n    {\n      \
    \  r = r ~ c ~ c;\n    }\n    return r;\n}\n/*\nappend list elements to string.\n\
    \    >>> list_to_string([\"a\", \"bb\", \"ccc\"])\n    \"abbccc\"\n*/\nstring\
    \ list_to_string(l) \n{\n    string r = \"\";\n    foreach (const string s; l)\
    \ \n    {\n        r = r ~ s;\n    }\n    return r;\n}\n/*\nsplit string to list.\n\
    \    >>> split_string(\"abcc\")\n    [\"a\", \"b\", \"cc\"]\n*/\nl = split_string(string\
    \ s) \n{\n    l = [\"\"];\n    foreach (const char c; s) \n    {\n        if (c\
    \ == l.front[$ - 1]) \n        {\n            l.front ~= c;\n        }\n     \
    \   else \n        {\n            l ~= to!string(c);\n        }\n    }\n    return\
    \ l;\n}\n/*\nsort list l by size and if equal, by string\n    >>> sort_by_size([\"\
    a\", \"cc\", \"bb\", \"d\"])\n    [\"a\", \"d\", \"bb\", \"cc\"]\n*/\nl = sort_by_size(l)\
    \ \n{\n    l.sort!(\"(a, b) => a.length < b.length || (a.length == b.length &&\
    \ a > b)\");\n    return l;\n}\n/*\nReturn tuple contains number of ones,\n  \
    \  number of zeros, string representation\n    of number and sorted list representation.\n\
    \    >>> disasm_bstring(\"10\")\n\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvmt5ee0d.d(60): Error: no identifier for declarator `l`

    /tmp/tmpvmt5ee0d.d(60): Error: declaration expected, not `=`

    /tmp/tmpvmt5ee0d.d(63): Error: declaration expected, not `foreach`

    /tmp/tmpvmt5ee0d.d(63): Error: no identifier for declarator `s`

    /tmp/tmpvmt5ee0d.d(63): Error: declaration expected, not `)`

    /tmp/tmpvmt5ee0d.d(68): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvmt5ee0d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164231
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    assert(base <=\
    \ 10L);\n    string result = \"\";\n    while (x) {\n        result = to!string(x\
    \ % base) ~ result;\n        x /= base;\n    }\n    return result;\n}\n/*\nChange\
    \ numerical base of input number x to base.\n    return string representation\
    \ after the conversion.\n    base numbers are more than 10.\n    >>> change_base(17L,\
    \ 16L)\n    \"11\"\n    >>> change_base(16L, 16L)\n    \"10\"\n    >>> change_base(15L,\
    \ 16L)\n    \"F\"\n    \n*/\nstring change_base(long x, long base, long [] div_table)\
    \ \n{\n    assert(base > 10L);\n    long quotient;\n    long remainder;\n    string\
    \ result = \"\";\n    while (x) {\n        quotient = div_table[x];\n        remainder\
    \ = x - quotient * base;\n        if (remainder < 10L)\n            result = to!string(remainder)\
    \ ~ result;\n        else\n            result = (char(remainder + 55L)) ~ result;\n\
    \        x = quotient;\n    }\n    return result;\n}\n/*\nChange numerical base\
    \ of input number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are more than 10.\n    >>> change_base(17L, 16L)\n    \"11\"\
    \n    >>> change_base(16L, 16L)\n    \"10\"\n    >>> change_base(15L, 16L)\n \
    \   \"F\"\n    \n*/\nstring change_base(long x, long base) \n{\n    assert(base\
    \ > 10L);\n    return change_base(x, base, create_div_table(base));\n}\nunittest\n\
    {\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\"\
    );\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L)\
    \ == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf7xoznjy.d(20): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpf7xoznjy.d(47): Error: template instance `to!string` template `to` is
    not defined, did you mean No?

    /tmp/tmpf7xoznjy.d(49): Error: cannot implicitly convert expression `remainder
    + 55L` of type `long` to `char`

    /tmp/tmpf7xoznjy.d(69): Error: undefined identifier `create_div_table`

    /tmp/tmpf7xoznjy.d(75): Error: `tmpf7xoznjy.change_base` called with argument
    types `(long, long)` matches both:

    /tmp/tmpf7xoznjy.d(15):     `tmpf7xoznjy.change_base(long x, long base)`

    and:

    /tmp/tmpf7xoznjy.d(66):     `tmpf7xoznjy.change_base(long x, long base)`

    /tmp/tmpf7xoznjy.d(76): Error: `tmpf7xoznjy.change_base` called with argument
    types `(long, long)` matches both:

    /tmp/tmpf7xoznjy.d(15):     `tmpf7xoznjy.change_base(long x, long base)`

    and:

    /tmp/tmpf7xoznjy.d(66):     `tmpf7xoznjy.change_base(long x, long base)`

    /tmp/tmpf7xoznjy.d(77): Error: `tmpf7xoznjy.change_base` called with argument
    types `(long, long)`'
  stdout: ''
  timestamp: 1660164231
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n  struct St(T)\n \
    \ {\n    T[] val;\n    void put(T x) {\n      val ~= x;\n    }\n    T pop() {\n\
    \      auto x = val[$-1];\n      val = val[0..$-1];\n      return x;\n    }\n\
    \  }\n  St!(char) st;\n  while (x) {\n    st.put(cast(char)(x % base + '0'));\n\
    \    x /= base;\n  }\n  return st.val.reverse.array.idup;\n}\nunittest\n{\n  \
    \  alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n\
    \    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L) ==\
    \ \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz8ib_7pb.d(34): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz8ib_7pb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164231
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n  if (x == 0) \n \
    \ {\n    return \"0\";\n  }\n  string result = \"\";\n  while (x != 0) \n  {\n\
    \    result ~= cast(string)(x % base);\n    x /= base;\n  }\n  return std.algorithm.reverse(result);\n\
    }\n/*\nCalculate the n-th Fibonacci number.\n    >>> fibonacci(1L)\n    1L\n \
    \   >>> fibonacci(2L)\n    1L\n    >>> fibonacci(3L)\n    2L\n    >>> fibonacci(4L)\n\
    \    3L\n    >>> fibonacci(5L)\n    5L\n*/\nlong fibonacci(long n) \n{\n  if (n\
    \ == 1) \n  {\n    return 1;\n  }\n  long result = 1, prev = 1;\n  foreach (k;\
    \ 2 .. n) \n  {\n    result += prev;\n    prev = result - prev;\n  }\n  return\
    \ result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkqa9pu38.d(24): Error: cannot cast expression `x % base` of type
    `long` to `string`

    /tmp/tmpkqa9pu38.d(27): Error: undefined identifier `algorithm` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkqa9pu38.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164231
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    x = abs(x);\n    for (; x != 0; x /= base) \n    {\n        result\
    \ = string(char('0' + x % base)) ~ result;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\"\
    );\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L)\
    \ == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp19_ntae_.d(21): Error: cannot implicitly convert expression `48L
    + x % base` of type `long` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp19_ntae_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164231
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    import std.stdio;\n\
    \    import std.string;\n    import std.algorithm;\n    // special case when x\
    \ == 0\n    if (x == 0)\n        return \"0\";\n    \n    int sign = signbit(x);\n\
    \    if (sign)\n        x = abs(x);\n    \n    string res = \"\";\n    while (x\
    \ > 0)\n    {\n        res ~= x % base;\n        x /= base;\n    }\n    // To\
    \ reverse the result.\n    res = res.array(res.length).rev.join;\n    return res;\n\
    }\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(271):
    Error: no property `epsilon` for type `long`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(272):
    Error: no property `mant_dig` for type `long`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(292):
    Error: no property `mant_dig` for type `long`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(335):
    Error: no property `mant_dig` for type `long`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(353):
    Error: no property `mant_dig` for type `long`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(371):
    Error: no property `mant_dig` for type `long`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(6254):
    Error: template instance `std.math.floatTraits!long` error instantiating

    /tmp/tmpsxlm4_ia.d(24):        instantiated from here: `signbit!long`

    /tmp/tmpsxlm4_ia.d(31): Error: cannot append type `long` to type `string`

    /tmp/tmpsxlm4_ia.d(35): Error: no property `array` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsxlm4_ia.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164231
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    ulong ub;\n  \
    \  auto res = \"\";\n    if (x < 0) \n    {\n        res ~= \"-\";\n        ub\
    \ = abs(x);\n    } \n    else \n    {\n        ub = x;\n    }\n    if (ub < base)\
    \ \n    {\n        res ~= string(ub);\n    } \n    else \n    {\n        res ~=\
    \ change_base(ub / base, base) ~ string(ub % base);\n    }\n    return res;\n\
    }\n/*\nreturn the next gray code of n\n    >>> gray_code(2)\n    \"11\"\n    >>>\
    \ gray_code(3)\n    \"110\"\n    >>> gray_code(4)\n    \"1100\"\n    >>> gray_code(5)\n\
    \    \"11010\"\n*/\nstring gray_code(long n) \n{\n    if (n == 0) \n    {\n  \
    \      return \"\";\n    } \n    else if (n == 1) \n    {\n        return \"1\"\
    ;\n    } \n    else \n    {\n        return gray_code(n - 1) ~ gray_code(n - 1);\n\
    \    }\n}\n/*\n    Return the gray code from base b of number n\n    >>> gray_code_base(8L,\
    \ 2L)\n    \"111\"\n    >>> gray_code_base(7L, 2L)\n    \"110\"\n    >>> gray_code_base(6L,\
    \ 2L)\n    \"101\"\n    >>> gray_code_base(5L, 2L)\n    \"100\"\n    >>> gray_code_base(4L,\
    \ 2L)\n    \"011\"\n    >>> gray_code_base(3L, 2L)\n    \"010\"\n    >>> gray_code_base(2L,\
    \ 2L)\n    \"001\"\n    >>> gray_code_base(1L, 2L)\n    \"000\"\n*/\nstring gray_code_base(long\
    \ n, long b) \n{\n    if (n == 0) \n    {\n        return string(b - 1, '0');\n\
    \    } \n    else if (n == 1\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph9sp0h6i.d(90): Error: found `unittest` when expecting `)`

    /tmp/tmph9sp0h6i.d(107): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph9sp0h6i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164231
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    import std.stdio;\n\
    \    import std.typecons;\n    import std.bigint;\n    int[] remainder; //store\
    \ the rem of divide\n    BigInt dividend = BigInt(x);\n    BigInt divisor = BigInt(base);\n\
    \    while(true)\n    {\n        auto ret = dividend % divisor;\n        remainder\
    \ ~= ret.to!int;\n        if(dividend == ret)\n            break;\n        dividend\
    \ = dividend / divisor;\n    }\n    return remainder.reverse.join(\"\");\n}\n\
    /*\nreturn a tuple of a and b in the form of a^2 + b^2 = n\n    >>> solve_pythagoras(3L)\n\
    \    (2L, 1L)\n    >>> solve_pythagoras(5L)\n    (3L, 4L)\n*/\nauto solve_pythagoras(long\
    \ n)\n{\n    import std.math;\n    long c = (long)sqrt(n);\n    while(true)\n\
    \    {\n        long b = c;\n        while(true)\n        {\n            long\
    \ a = (long)sqrt(n - b*b);\n            if(a*a + b*b == n)\n                return\
    \ tuple(a, b);\n            else if(a == 0)\n                break;\n        \
    \    else\n                b -= 1;\n        }\n        c -= 1;\n    }\n}\n/*\n\
    return true if pd(a) is palindrome.\n    >>> is_palindrome(8088L)\n    true\n\
    \    >>> is_palindrome(123L)\n    false\n*/\nunittest\n{\n    alias candidate\
    \ = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3vdogeuu.d(43): Error: C style cast illegal, use `cast(long)sqrt(n)`

    /tmp/tmp3vdogeuu.d(49): Error: C style cast illegal, use `cast(long)sqrt(n - b
    * b)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3vdogeuu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164231
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n    if (base < 2L ||\
    \ base > 10L) \n    {\n        throw new Exception(\"base is out of range\");\n\
    \    }\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcyjfm3im.d(16): Error: cannot use function constraints for non-template
    functions. Use `static if` instead

    /tmp/tmpcyjfm3im.d(16): Error: declaration expected, not `if`

    /tmp/tmpcyjfm3im.d(19): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcyjfm3im.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164231
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n\tlong quotient;\n\
    \tstring out = \"\";\n\tif (base == 0L) {\n\t\treturn \"\";\n\t}\n\telse if (base\
    \ == 1L) {\n\t\treturn std.string.replicate(base);\n\t}\n\telse {\n\t\tquotient\
    \ = x / base;\n\t\twhile (quotient != 0L) {\n\t\t\tout += (x % base).to!string;\n\
    \t\t\tx = quotient;\n\t\t\tquotient = x / base;\n\t\t}\n\t\tout += (x % base).to!string;\n\
    \t\treturn std.string.reverse(out);\n\t}\n}\n/*\nCalculate the next permutation\
    \ of the input list.\n    return the next permutation of input list.\n    >>>\
    \ next_permutation([1, 2, 3])\n    [1, 3, 2]\n    >>> next_permutation([3, 2,\
    \ 1])\n    [1, 2, 3]\n    >>> next_permutation([1, 1, 5])\n    [1, 5, 1]\n*/\n\
    long[] next_permutation(long[] x) \n{\n\tlong i = x.length - 1L;\n\tlong j = x.length\
    \ - 1L;\n\tlong index = x.length - 1L;\n\tlong[] out = x.dup;\n\tlong temp;\n\t\
    for (; i > 0L; i--) {\n\t\tif (out[i - 1L] < out[i]) {\n\t\t\tindex = i - 1L;\n\
    \t\t\tbreak;\n\t\t}\n\t}\n\tfor (; j > index; j--) {\n\t\tif (out[j] > out[index])\
    \ {\n\t\t\ttemp = out[index];\n\t\t\tout[index] = out[j];\n\t\t\tout[j] = temp;\n\
    \t\t\tbreak;\n\t\t}\n\t}\n\tout[(index + 1L) .. x.length] = std.algorithm.sort(out[(index\
    \ + 1L) .. x.length]);\n\treturn out;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660164231
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    static import\
    \ std.algorithm.mutation : copy;\n    static import std.range : retro;\n    static\
    \ assert(base < 10);\n    static long[] mask = [ 1, 3, 7, 15, 31, 63, 127, 255,\
    \ 511 ];\n    auto result = new ubyte[64];\n    auto p = 0;\n    while (x != 0)\
    \ {\n        result[p++] = '0' + cast(char)(x & mask[base - 1]);\n        x >>=\
    \ base;\n    }\n    return std.array.array(result[0 .. p]).idup.copy.retro.joiner.idup;\n\
    }\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbh62c2zz.d(17): Error: static import `std` cannot have an import
    bind list

    /tmp/tmpbh62c2zz.d(18): Error: static import `std` cannot have an import bind
    list

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbh62c2zz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164231
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n  string result;\n\
    \  while (x != 0) \n  {\n    // using modulo operator to change base.\n    result\
    \ = to!string(x % base) ~ result;\n    x /= base;\n  }\n  return result;\n}\n\
    unittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L)\
    \ == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvsvh2dqs.d(21): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvsvh2dqs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164231
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    auto res = \"\"\
    ;\n    while (x > 0) \n    {\n        auto c = to!string(x % base);\n        res\
    \ = c ~ res;\n        x /= base;\n    }\n    return res;\n}\nunittest\n{\n   \
    \ alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n\
    \    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L) ==\
    \ \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_ej09zpd.d(20): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_ej09zpd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164231
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n    in (base >= 2 &&\
    \ base <= 10)\n{\n    string result;\n    long a;\n    while (x != 0)\n    {\n\
    \        a = x % base;\n        x = x / base;\n        result ~= to!string(a);\n\
    \    }\n    return result;\n}\n/*\nCheck if two given numbers are co-prime\n \
    \   (only has 1 as common factor).\n    return true if two given numbers are co-prime,\n\
    \    false otherwise.\n    >>> is_coprime(4L, 9L)\n    true\n    >>> is_coprime(6L,\
    \ 4L)\n    false\n*/\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmogzvbgs.d(24): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmogzvbgs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164231
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string ret = \"\
    \";\n    if (x==0)\n        return \"0\";\n    while (x!=0)\n    {\n        switch\
    \ (x%base)\n        {\n            case 10:\n                ret = \"A\" ~ ret;\n\
    \                break;\n            case 11:\n                ret = \"B\" ~ ret;\n\
    \                break;\n            case 12:\n                ret = \"C\" ~ ret;\n\
    \                break;\n            case 13:\n                ret = \"D\" ~ ret;\n\
    \                break;\n            case 14:\n                ret = \"E\" ~ ret;\n\
    \                break;\n            case 15:\n                ret = \"F\" ~ ret;\n\
    \                break;\n            default:\n                ret = to!string(x%base)\
    \ ~ ret;\n                break;\n        }\n        x /= base;\n    }\n    return\
    \ ret;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6iz5ywff.d(43): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6iz5ywff.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164231
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string ret = \"\
    \";\n    long r;\n    if (x == 0)\n    {\n        return \"0\";\n    }\n    while\
    \ (x > 0)\n    {\n        r = x % base;\n        ret = ret + to!string(r);\n \
    \       x = x / base;\n    }\n    return ret.reverse();\n}\nunittest\n{\n    alias\
    \ candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkajozzh9.d(26): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpkajozzh9.d(29): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string)`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkajozzh9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164231
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string ans = \"\
    \";\n    while (x > 0) {\n        ans = to!string(x % base) ~ ans;\n        x\
    \ /= base;\n    }\n    return ans;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm4c5o4d4.d(19): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm4c5o4d4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164231
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    static foreach (i; 0..256)\n    {\n        if (i < 10)\n      \
    \      result ~= i.to!string;\n        else\n            result ~= (to!string('a')[0]\
    \ + i - 10).to!string;\n    }\n    if (x == 0)\n        return \"0\";\n    string\
    \ ret = \"\";\n    while (x != 0) \n    {\n        ret ~= result[x % base];\n\
    \        x /= base;\n    }\n    return ret.reverse;\n}\nunittest\n{\n    alias\
    \ candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7ikghmlv.d(21): Error: no property `to` for type `int`

    /tmp/tmp7ikghmlv.d(23): Error: template instance `to!string` template `to` is
    not defined, did you mean No?

    /tmp/tmp7ikghmlv.d(21): Error: no property `to` for type `int`

    /tmp/tmp7ikghmlv.d(23): Error: template instance `to!string` template `to` is
    not defined, did you mean No?

    /tmp/tmp7ikghmlv.d(21): Error: no property `to` for type `int`

    /tmp/tmp7ikghmlv.d(23): Error: template instance `to!string` template `to` is
    not defined, did you mean No?

    /tmp/tmp7ikghmlv.d(21): Error: no property `to` for type `int`

    /tmp/tmp7ikghmlv.d(23): Error: template instance `to!string` template `to` is
    not defined, did you mean No?

    /tmp/tmp7ikghmlv.d(21): Error: no property `to` for type `int`

    /tmp/tmp7ikghmlv.d(23): Error: template instance `to!string` template `to` is
    not defined, did you mean No?

    /tmp/tmp7ikghmlv.d(21): Error: no property `to` for type `int`

    /tmp/tmp7ikghmlv.d(23): Error: template instance `to!string` template `to` is
    not defined, did you mean No'
  stdout: ''
  timestamp: 1660164231
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    int[] div_rem;\n\
    \    string s = \"\";\n    while (x > 0) \n    {\n        div_rem = std.math.divmod(x,\
    \ base);\n        s = std.string.to!string(div_rem[1]) ~ s;\n        x = div_rem[0];\n\
    \    }\n    return s;\n}\n/*\n    convert array of int to string.\n    >>> get_string([1,\
    \ 2, 3])\n    \"123\"\n    >>> get_string([3, 2, 1])\n    \"321\"\n*/\nstring\
    \ get_string(int[] ar) \n{\n    string s = \"\";\n    foreach (a; ar)\n      \
    \  s ~= std.string.to!string(a);\n    return s;\n}\n/*\n    return the length\
    \ of the string.\n    >>> string_length(\"abc\")\n    3\n    >>> string_length(\"\
    asdf\")\n    4\n*/\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0nlnulzb.d(21): Error: undefined identifier `divmod` in module
    `std.math`

    /tmp/tmp0nlnulzb.d(22): Error: undefined identifier `string` in package `std`

    /tmp/tmp0nlnulzb.d(38): Error: undefined identifier `string` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0nlnulzb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164231
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    return x == 0\
    \ ? \"\" : change_base(x / base, base) ~ (x % base);\n}\nunittest\n{\n    alias\
    \ candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz58cr77m.d(17): Error: incompatible types for `(change_base(x /
    base, base)) ~ (x % base)`: `string` and `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz58cr77m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164231
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    return (x / base\
    \ == 0) ? i2s(x % base) : change_base(x / base, base) + i2s(x % base);\n}\n/*\n\
    Check is prime number.\n    if number is prime, return true.\n    else return\
    \ false.\n    >>> check_prime(7L)\n    true\n    >>> check_prime(8L)\n    false\n\
    \    >>> check_prime(13L)\n    true\n*/\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplbq8jcmg.d(17): Error: undefined identifier `i2s`

    /tmp/tmplbq8jcmg.d(17): Error: undefined identifier `i2s`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplbq8jcmg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164231
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n  long n = x, r;\n\
    \  string i;\n  while (n > 0) \n  {\n    r = n % base;\n    n = n / base;\n  \
    \  i += (char)(r + 48);\n  }\n  return i.reverse();\n}\n/*\nTests whether number\
    \ x is a palindrome, i.e., reads the same from left to right as from right to\
    \ left.\n    return whether the number is a palindrome.\n    >>> is_palindrome(1L)\n\
    \    True\n    >>> is_palindrome(11L)\n    True\n    >>> is_palindrome(12L)\n\
    \    False\n    >>> is_palindrome(32L)\n    False\n*/\nunittest\n{\n    alias\
    \ candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmazghves.d(23): Error: C style cast illegal, use `cast(char)(r
    + 48)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmazghves.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164231
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    int res;\n   \
    \ string temp;\n    if (x == 0) \n    {\n        return \"0\";\n    }\n    while\
    \ (x > 0) \n    {\n        res = x % base;\n        x = x / base;\n        temp\
    \ = (to!string(res)) ~ temp;\n    }\n    return temp;\n}\nunittest\n{\n    alias\
    \ candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsboq9dfu.d(25): Error: cannot implicitly convert expression `x
    % base` of type `long` to `int`

    /tmp/tmpsboq9dfu.d(27): Error: template instance `to!string` template `to` is
    not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsboq9dfu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164231
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    assert(x > 0L);\n\
    \    assert(base > 0L);\n    return num_to_string(to!int(x)).format(\"%0*.*b\"\
    , (to!int(base)).digits, (to!int(base)).digits, x);\n}\nunittest\n{\n    alias\
    \ candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr4ycfr2k.d(19): Error: undefined identifier `num_to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr4ycfr2k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164231
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    import std.typecons\
    \ : Yes, No;\n    import std.range : Filter, TakeWhile, Join, cycle;\n    string\
    \ result = \"\";\n    while (x != 0) {\n        result ~= x % base;\n        x\
    \ /= base;\n    }\n    return result.reflect.reverse();\n}\n/*\n    test to see\
    \ whether an input number x is prime number or not.\n    return type is bool.\n\
    \    >>> is_prime(3L)\n    true\n    >>> is_prime(15L)\n    false\n    >>> is_prime(41L)\n\
    \    true\n    >>> is_prime(0L)\n    false\n*/\nunittest\n{\n    alias candidate\
    \ = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbncfinfe.d(18): Deprecation: Symbol `std.meta.Filter(alias pred,
    TList...)` is not visible from module `tmpbncfinfe` because it is privately imported
    in module `range`

    /tmp/tmpbncfinfe.d(18): Error: module `std.range` import `TakeWhile` not found

    /tmp/tmpbncfinfe.d(18): Error: module `std.range` import `Join` not found, did
    you mean template `std.array.join(RoR, R)(RoR ror, scope R sep) if (isInputRange!RoR
    && isInputRange!(Unqual!(ElementType!RoR)) && isInputRange!R && is(Unqual!(ElementType!(ElementType!RoR))
    == Unqual!(ElementType!R)))`?

    /tmp/tmpbncfinfe.d(21): Error: cannot append type `long` to type `string`

    /tmp/tmpbncfinfe.d(24): Error: no property `reflect` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbncfinfe.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164231
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    import std.array;\n\
    \    import std.conv;\n    import std.string;\n    import std.range;\n    import\
    \ std.algorithm;\n    import std.math;\n    import std.typecons;\n    string s;\n\
    \    int i = 0;\n    while (x>0) {\n        Tuple!(int,long) t = div(x, base);\n\
    \        int a = t[0];\n        x = t[1];\n        s ~= a.to!string;\n       \
    \ i++;\n    }\n    return s.retro;\n}\n// -----------------------------------------------------------------\n\
    unittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L)\
    \ == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7r3c6rww.d(27): Error: undefined identifier `div`

    /tmp/tmp7r3c6rww.d(33): Error: cannot implicitly convert expression `retro(s)`
    of type `Result!()` to `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7r3c6rww.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164232
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    return change_base(x,\
    \ base, 10);\n}\n/*\nChange numerical base of input number x to base.\n    return\
    \ string representation after the conversion.\n    base numbers are less than\
    \ 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n    >>> change_base(8L, 2L)\n\
    \    \"1000\"\n    >>> change_base(7L, 2L)\n    \"111\"\n    \n*/\nstring change_base(long\
    \ x, long base, long output_base) \n{\n    static const(string) table = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n    string result = \"\";\n    while (x >= base) {\n        auto rem = x %\
    \ base;\n        result = table[rem..to!string] ~ result;\n        x /= base;\n\
    \    }\n    result = table[x..to!string] ~ result;\n    if (output_base != 10)\
    \ {\n        result = change_base(to!long(result), output_base);\n    }\n    return\
    \ result;\n}\n/*\nConvert a list of n numbers to a base b number.\n    >>> base_to_num([2,\
    \ 1, 2], 5)\n    \"112\"\n    >>> base_to_num([5, 2, 3], 8)\n    \"523\"\n   \
    \ >>> base_to_num([2, 3, 2], 4)\n    \"232\"\n    >>> base_to_num([2, 3, 2], 3)\n\
    \    \"112\"\n*/\nstring base_to_num(inout(int) l, long b) \n{\n    long result\
    \ = 0;\n    foreach (i, e; l) {\n        result += e * pow(b, i);\n    }\n   \
    \ return change_base(result, b);\n}\n/*\nConvert a list of n numbers to a base\
    \ b number.\n    >>> base_to_num([2, 1, 2], 5)\n    \"112\"\n    >>> base_to_num([5,\
    \ 2, 3], 8)\n    \"523\"\n    >>> base_to_num([2, 3, 2], 4)\nunittest\n{\n   \
    \ alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n\
    \    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L) ==\
    \ \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx_146zpa.d(65): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx_146zpa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164231
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    bool is_negative;\n\
    \    string res;\n    is_negative = false;\n    if (x < 0L) {\n        is_negative\
    \ = true;\n        x = -x;\n    }\n    while (x > 0L) {\n        res = (x % base).to!string\
    \ ~ res;\n        x /= base;\n    }\n    if (is_negative) {\n        res = \"\
    -\" ~ res;\n    }\n    return res;\n}\n/*\n    Return result of Gauss elimination:\n\
    \    A is a NxN numpy ndarray.\n    b is a Nx1 numpy ndarray.\n    Raises LinAlgError\
    \ if Gaussian elimination fails\n    due to singular matrix.\n    Return None\
    \ if there is inf or nan in b.\n    >>> A = numpy.array([[1., 2., 3.],\n     \
    \                    [4., 5., 6.],\n                         [7., 8., 10.]])\n\
    \    >>> b = numpy.array([3., 3., 4.])\n    >>> gauss_jordan(A, b)\n    array([-1.,\
    \ 0., 1.])\n    >>> A = numpy.array([[1., 2., 3.],\n                         [4.,\
    \ 5., 6.],\n                         [7., 8., 9.]])\n    >>> b = numpy.array([3.,\
    \ 3., 4.])\n    >>> gauss_jordan(A, b)\n    Traceback (most recent call last):\n\
    \        ...\n    LinAlgError: Singular matrix\n*/\nreal[] gauss_jordan(real[][]\
    \ A, real[] b) \n{\n    //np.set_printoptions(precision=3, suppress=True)\n  \
    \  auto N = A.length;\n    //extended_A = np.zeros((N, N + 1), dtype=np.float64)\n\
    \    real[][] extended_A = new real[][](N, N + 1);\n    for (long i = 0L; i <\
    \ N; i++) {\n        for (long j = 0L; j < N; j++) {\n            extended_A[i][j]\
    \ = A[i][j];\n        }\n       \nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx_7tgfc0.d(66): Error: found `unittest` instead of statement

    /tmp/tmpx_7tgfc0.d(83): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx_7tgfc0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164231
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    return to!string(x,\
    \ base);\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp88rc0ner.d(17): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp88rc0ner.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164231
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    while (x > 0) \n    {\n        result = result ~ to!string(x %\
    \ base);\n        x /= base;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbu4d9v7a.d(20): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbu4d9v7a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164231
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    static char[]\
    \ nummap = \"0123456789abcdefghijklmnopqrstuvwxyz\";\n    assert(base <= nummap.length,\
    \ \"base must be less than \" ~ nummap.length.to!string);\n    if (x < base)\n\
    \        return nummap[x..x+1];\n    else\n        return change_base(x / base,\
    \ base) ~ nummap[x % base..x % base + 1];\n}\n/*\nReturn list of the binary digits\
    \ of x.\n    >>> bin_digits(7L)\n    [1, 1, 1]\n    >>> bin_digits(8L)\n    [1,\
    \ 0, 0, 0]\n*/\nauto bin_digits(long x)\n{\n    return change_base(x, 2L).map!(i\
    \ => i.to!long - '0'.to!long);\n}\n/*\nCalculate sum of the binary digits of x.\n\
    \    >>> binary_sum(7L)\n    3\n    >>> binary_sum(8L)\n    1\n*/\nlong binary_sum(long\
    \ x)\n{\n    return sum(bin_digits(x));\n}\n/*\nReturn the largest prime factor\
    \ of x.\n    >>> largest_prime_factor(2L)\n    2\n    >>> largest_prime_factor(3L)\n\
    \    3\n    >>> largest_prime_factor(6L)\n    3\n    >>> largest_prime_factor(9L)\n\
    \    3\n    >>> largest_prime_factor(28L)\n    7\n    >>> largest_prime_factor(600851475143L)\n\
    \    6857\n*/\nlong largest_prime_factor(long x)\n{\n    static long largest =\
    \ 0L;\n    static long sqrt = 0L;\n    static long prime = 0L;\n    static long[]\
    \ primes = [];\n    static long[] non_primes = [];\n    static long n = 0L;\n\
    \    static long y = 0L;\n    sqrt = (long)sqrt(x);\n    foreach (prime; primes)\n\
    \    {\n        if (prime > sqrt)\n            break;\n        if (x % prime ==\n\
    unittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L)\
    \ == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6dv51s4s.d(70): Error: C style cast illegal, use `cast(long)sqrt(x)`

    /tmp/tmp6dv51s4s.d(76): Error: expression expected, not `unittest`

    /tmp/tmp6dv51s4s.d(77): Error: found `{` when expecting `)`

    /tmp/tmp6dv51s4s.d(93): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6dv51s4s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164231
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    static const char[]\
    \ digits = \"0123456789\";\n    string buf;\n    while (x > 0) {\n        auto\
    \ rem = x % base;\n        x /= base;\n        buf ~= digits[rem];\n    }\n  \
    \  return buf.reverse;\n}\nunittest\n{\n    alias candidate = change_base;\n\n\
    \    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_7xcbr0v.d(24): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(string)`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_7xcbr0v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164231
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    while (x != 0) \n    {\n        if (x < 0)\n        {\n       \
    \     result = \"-\" + result;\n            x = abs(x);\n        }\n        result\
    \ = string(char(x % base + 48)) + result;\n        x /= base;\n    }\n    return\
    \ result;\n}\n/*\nReturns nth triangular number.\n    >>> nth_triangular_number(1L)\n\
    \    1L\n    >>> nth_triangular_number(2L)\n    3L\n    >>> nth_triangular_number(3L)\n\
    \    6L\n    >>> nth_triangular_number(4L)\n    10L\n    >>> nth_triangular_number(5L)\n\
    \    15L\n*/\nlong nth_triangular_number(long n)\n{\n    return n * (n + 1) /\
    \ 2;\n}\n/*\nReturns true if x is in the list and false otherwise.\n    >>> is_in_list([1L,\
    \ 2L, 4L, 5L], 4L)\n    true\n    >>> is_in_list([1L, 2L, 4L, 5L], 7L)\n    false\n\
    */\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn93rii0v.d(22): Error: invalid array operation `"-" + result` (possible
    missing [])

    /tmp/tmpn93rii0v.d(25): Error: cannot implicitly convert expression `x % base
    + 48L` of type `long` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn93rii0v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164231
