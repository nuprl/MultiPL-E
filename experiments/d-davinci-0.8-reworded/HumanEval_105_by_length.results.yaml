language: d
name: HumanEval_105_by_length
results:
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  /*\n\
    \  TODO: Write test cases to check your function\n  */\n  long[string] map = [\n\
    \      \"One\": 1L,\n      \"Two\": 2L,\n      \"Three\": 3L,\n      \"Four\"\
    : 4L,\n      \"Five\": 5L,\n      \"Six\": 6L,\n      \"Seven\": 7L,\n      \"\
    Eight\": 8L,\n      \"Nine\": 9L\n  ];\n  return arr.sort().filter!(a => a >=\
    \ 1 && a <= 9).reverse().map!(a => map.reversed[a]);\n}\n```\n### 4\n```\n/*\n\
    \    Given a non-empty array of integers, write a function that returns the longest\
    \ subarray with consecutive even integers.\n    An array is a sequence of elements\
    \ of the same type placed in contiguous memory locations that can be individually\
    \ referenced by adding an index to a unique identifier.\nunittest\n{\n    alias\
    \ candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L,\
    \ 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L,\
    \ 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppq8tjy6u.d(40): Error: declaration expected, not `""`

    /tmp/tmppq8tjy6u.d(43): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppq8tjy6u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  string[]\
    \ result;\n  foreach(i; arr)\n    if(i>0 && i<10)\n      result ~= to!string(i);\n\
    \  result.sort;\n  result.reverse;\n  foreach(i; result)\n    i = to!string(result[i]);\n\
    \  return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmper1qxh8x.d(27): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmper1qxh8x.d(28): Error: no property `sort` for type `string[]`

    /tmp/tmper1qxh8x.d(29): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmper1qxh8x.d(31): Error: template instance `to!string` template `to` is
    not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmper1qxh8x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] digits = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\"];\n    string[] numbers = cast(string[]) arr;\n\
    \    string[] filt_nums = filter!((x) => x <= 9)(numbers);\n    sort(filt_nums);\n\
    \    string[] rev_nums = reverse(filt_nums);\n    string[] out = map!((x) => digits[to!(int)(x\
    \ - 1)])(rev_nums);\n    return out;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpce4hn813.d(29): Error: found `out` when expecting `;` following
    statement

    /tmp/tmpce4hn813.d(29): Error: found `=` instead of statement

    /tmp/tmpce4hn813.d(30): Error: expression expected, not `out`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpce4hn813.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  auto a = arr.filter!(a => a >= 1 && a <= 9).array.sort().retro;\n    return\
    \ a.map!(a => a == 1 ? \"One\"\n                : a == 2 ? \"Two\"\n         \
    \       : a == 3 ? \"Three\"\n                : a == 4 ? \"Four\"\n          \
    \      : a == 5 ? \"Five\"\n                : a == 6 ? \"Six\"\n             \
    \   : a == 7 ? \"Seven\"\n                : a == 8 ? \"Eight\"\n             \
    \   : a == 9 ? \"Nine\"\n                : \"\").array;\n}\nunittest\n{\n    alias\
    \ candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L,\
    \ 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L,\
    \ 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplla5cqlw.d(24): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplla5cqlw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  auto size = arr.length;\n    string[] result = new string[size];\n    int[]\
    \ tmp = new int[size];\n    int i = 0;\n    foreach(l; arr)\n    {\n        if(l\
    \ > 0 && l < 10)\n        {\n            tmp[i] = cast(int)l;\n            i++;\n\
    \        }\n    }\n    sort(tmp[0..i]);\n    reverse(tmp[0..i]);\n    string[]\
    \ names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"];\n    foreach(l; tmp[0..i])\n    {\n        result ~= names[l-1];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7ti285vk.d(36): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmp7ti285vk.d(37): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(int[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7ti285vk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  //TODO - implement the function\n    return [];\n}\n \n</pre>\nunittest\n{\n\
    \    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpetjtandn.d(28): Error: declaration expected, not `<`

    /tmp/tmpetjtandn.d(33): Error: declaration expected, not `assert`

    /tmp/tmpetjtandn.d(34): Error: declaration expected, not `assert`

    /tmp/tmpetjtandn.d(35): Error: declaration expected, not `assert`

    /tmp/tmpetjtandn.d(36): Error: declaration expected, not `assert`

    /tmp/tmpetjtandn.d(37): Error: declaration expected, not `assert`

    /tmp/tmpetjtandn.d(38): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpetjtandn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    //return [];\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk2izmg69.d(22): Error: function `tmpk2izmg69.by_length` has no
    `return` statement, but is expected to return a value of type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk2izmg69.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{ \n \
    \   sort(arr);\n    auto res = appender!(string[])();\n    for (int i = arr.length\
    \ - 1; i >= 0; i--)\n    {\n        string str = \"\";\n        switch (arr[i])\n\
    \        {\n            case 1:\n                str = \"One\";\n            \
    \    break;\n            case 2:\n                str = \"Two\";\n           \
    \     break;\n            case 3:\n                str = \"Three\";\n        \
    \        break;\n            case 4:\n                str = \"Four\";\n      \
    \          break;\n            case 5:\n                str = \"Five\";\n    \
    \            break;\n            case 6:\n                str = \"Six\";\n   \
    \             break;\n            case 7:\n                str = \"Seven\";\n\
    \                break;\n            case 8:\n                str = \"Eight\"\
    ;\n                break;\n            case 9:\n                str = \"Nine\"\
    ;\n                break;\n            default:\n                break;\n    \
    \    }\n        if (str.length != 0)\n            res.put(str);\n    }\n    return\
    \ res.data;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprswwwxg4.d(24): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmprswwwxg4.d(25): Error: template instance `appender!(string[])` template
    `appender` is not defined

    /tmp/tmprswwwxg4.d(26): Error: cannot implicitly convert expression `arr.length
    - 1LU` of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprswwwxg4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  auto\
    \ result = new string[];\n  // write your code here\n  \n  return result;\n}\n\
    \ \n \n/*\n    Accepts a multidimensional array and returns a flattened version\
    \ of the array.\n    \n    For example:\n    >>> flatten([[1L, 2L], [3L, 4L],\
    \ [5L, 6L]])\n    [1L, 2L, 3L, 4L, 5L, 6L]\n    \n      The multidimensional array\
    \ will only be up to 2 dimensional:\n    >>> flatten([[[1L, 2L]], [[3L], [4L]],\
    \ [[5L, 6L]]])\n    [1L, 2L, 3L, 4L, 5L, 6L]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> flatten([])\n    []\n*/\nlong[] flatten(long[][]\
    \ arr) \n{\n  auto result = new long[];\n  // write your code here\n  \n  return\
    \ result;\n}\n \n/*\n    Accepts a range of integers and returns a tuple of the\
    \ number of odd numbers in the range,\n    the number of even numbers in the range,\
    \ and the number of zeros in the range.\n    \n    For example:\n    >>> count_odd_even_zeros(0..5)\n\
    \    (3, 2, 0)\n    \n      The range can be any length:\n    >>> count_odd_even_zeros(0..20)\n\
    \    (11, 9, 0)\n    \n      Negative integers count:\n    >>> count_odd_even_zeros(-3..1)\n\
    \    (3, 2, 0)\n    \n      Only count the number of zeros between -10 and 10:\n\
    \    >>> count_odd_even_zeros(-10..10)\n    (10, 10, 1)\n*/\nTuple!(ulong, ulong,\
    \ ulong) count_odd_even_zeros(Range)\n{\n  // write your code here\n  return tuple(0,\
    \ 0, 0);\n}\n \n/*\n    Accepts a map and returns a version of the map where the\
    \ keys and values have been swapped.\n    \n   \nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbd4s2v2u.d(80): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbd4s2v2u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  immutable number_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\",\
    \ \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    return\n        arr\n       \
    \ .filter!(x => x >= 1 && x <= 9)\n        .sort()\n        .reverse()\n     \
    \   .map!(x => number_names[x - 1])\n        .array;\n}\nunittest\n{\n    alias\
    \ candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L,\
    \ 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L,\
    \ 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdh33qkd_.d(27): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdh33qkd_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{ \n \
    \   import std.algorithm.sorting; \n    import std.range; \n    import std.stdio;\
    \ \n    immutable n = arr.filter!(a => 1L <= a && a <= 9L).sort.retro; \n    string[]\
    \ res = new string[n.length]; \n    size_t i = 0; \n    foreach (immutable x;\
    \ n) \n    { \n        switch (x) \n        { \n            case 1L: res[i] =\
    \ \"One\"; break; \n            case 2L: res[i] = \"Two\"; break; \n         \
    \   case 3L: res[i] = \"Three\"; break; \n            case 4L: res[i] = \"Four\"\
    ; break; \n            case 5L: res[i] = \"Five\"; break; \n            case 6L:\
    \ res[i] = \"Six\"; break; \n            case 7L: res[i] = \"Seven\"; break; \n\
    \            case 8L: res[i] = \"Eight\"; break; \n            case 9L: res[i]\
    \ = \"Nine\"; break; \n        } \n        i++; \n    } \n    return res; \n}\n\
    unittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L,\
    \ 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxh_b8yhm.d(27): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxh_b8yhm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  // create array of names\n    string[] names = [\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    // create\
    \ array of sorted numbers\n    long[] sorted_arr = sort(arr).by!((a, b) => a <\
    \ b && a <= 9 && b <= 9);\n    // create array of empty strings\n    string[]\
    \ output = repeat(\"\", sorted_arr.length);\n    // loop through strings and replace\
    \ with name\n    for (size_t i = 0; i < sorted_arr.length; i++)\n    {\n     \
    \   if (sorted_arr[i] <= 9)\n        {\n            output[i] = names[sorted_arr[i]\
    \ - 1];\n        }\n    }\n    // reverse output\n    reverse(output);\n    return\
    \ output;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplddw_xa1.d(27): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmplddw_xa1.d(29): Error: undefined identifier `repeat`

    /tmp/tmplddw_xa1.d(39): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplddw_xa1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  immutable int[] indexes = iota(arr.length);\n    indexes.sort!((a, b) => ((arr[a]\
    \ == arr[b]) ? 0 : ((arr[a] < arr[b]) ? -1 : 1)));\n    indexes.reverse;\n   \
    \ string[] ret = [null];\n    ret.length = arr.length;\n    foreach (i; indexes)\n\
    \    {\n        if (arr[i] <= 9 && arr[i] >= 1)\n        {\n            ret[i]\
    \ = arr[i].to!string;\n        }\n    }\n    return ret.filter!(a => a !is null).map!(a\
    \ => format(\"$(a[0].toUpper ~ a[1..$].toLower)\")).array;\n}\n \n/*\n \nfazit:\n\
    der erste versuch ist nicht schlecht, nur das hier ist doch schon k\xFCrzer und\
    \ was ist das hier denn:\nunittest\n{\n    alias candidate = by_length;\n\n  \
    \  assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv5z3gc0p.d(39): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv5z3gc0p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  long[] sort, rev;\n    long i;\n    string[] s;\n    sort = [ 1L, 2L, 3L, 4L,\
    \ 5L, 6L, 7L, 8L, 9L];\n    rev = [ 9L, 8L, 7L, 6L, 5L, 4L, 3L, 2L, 1L];\n   \
    \ i = 0L;\n    sort(arr);\n    s = new string[arr.length];\n    foreach(x;arr)\n\
    \    {\n        if(x >= 1L && x <= 9L)\n        {\n            s[i] = cast(string)x;\n\
    \            i++;\n        }\n    }\n    sort(s);\n    foreach(x;s)\n    {\n \
    \       if(x == \"1\")\n        {\n            x = \"One\";\n        }\n     \
    \   else if(x == \"2\")\n        {\n            x = \"Two\";\n        }\n    \
    \    else if(x == \"3\")\n        {\n            x = \"Three\";\n        }\n \
    \       else if(x == \"4\")\n        {\n            x = \"Four\";\n        }\n\
    \        else if(x == \"5\")\n        {\n            x = \"Five\";\n        }\n\
    \        else if(x == \"6\")\n        {\n            x = \"Six\";\n        }\n\
    \        else if(x == \"7\")\n        {\n            x = \"Seven\";\n        }\n\
    \        else if(x == \"8\")\n        {\n            x = \"Eight\";\n        }\n\
    \        else if(x == \"9\")\n        {\n            x = \"Nine\";\n        }\n\
    \    }\n    return s;\n}\nunittest\n{\n    alias candidate = by_length;\n\n  \
    \  assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyizj0qlj.d(30): Error: function expected before `()`, not `sort`
    of type `long[]`

    /tmp/tmpyizj0qlj.d(36): Error: cannot cast expression `x` of type `long` to `string`

    /tmp/tmpyizj0qlj.d(40): Error: function expected before `()`, not `sort` of type
    `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyizj0qlj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  int[] tmp = map!(val => val >= 1 && val <= 9 ? val : 0)(arr);\n    string[]\
    \ result = new string[tmp.length];\n    for (int i = 0; i < tmp.length; i++) \n\
    \    {\n        switch (tmp[i]) \n        {\n            case 1:\n           \
    \     result[i] = \"One\";\n                break;\n            case 2:\n    \
    \            result[i] = \"Two\";\n                break;\n            case 3:\n\
    \                result[i] = \"Three\";\n                break;\n            case\
    \ 4:\n                result[i] = \"Four\";\n                break;\n        \
    \    case 5:\n                result[i] = \"Five\";\n                break;\n\
    \            case 6:\n                result[i] = \"Six\";\n                break;\n\
    \            case 7:\n                result[i] = \"Seven\";\n               \
    \ break;\n            case 8:\n                result[i] = \"Eight\";\n      \
    \          break;\n            case 9:\n                result[i] = \"Nine\";\n\
    \                break;\n            default:\n                break;\n      \
    \  }\n    }\n    return result.array.sort().reverse().take(tmp.length).array;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph3xonwls.d(24): Error: template instance `map!((val) => val >=
    1 && (val <= 9) ? val : 0)` template `map` is not defined

    /tmp/tmph3xonwls.d(61): Error: no property `array` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph3xonwls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  import std.algorithm.sorting;\n    import std.algorithm.iteration;\n    import\
    \ std.traits;\n    import std.range;\n    import std.string;\n    import std.conv;\n\
    \    import std.array;\n    import std.algorithm;\n    import std.math;\n    import\
    \ std.typecons;\n    import std.container;\n    immutable arr2 = arr.filter!(a\
    \ => a <= 9 && a >= 1);\n    //arr2.sort!((a, b) => b < a);\n    arr2.sort!((a,\
    \ b) => a < b);\n    immutable arr3 = arr2.map!(a => to!string(a));\n    immutable\
    \ arr4 = arr3.map!(a => \"One Two Three Four Five Six Seven Eight Nine\".split('\
    \ ')[to!long(a)-1]);\n    return arr4;\n}\nunittest\n{\n    alias candidate =\
    \ by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpro_3urom.d(35): Error: cannot implicitly convert expression `filter(arr)`
    of type `FilterResult!(__lambda2, long[])` to `immutable(FilterResult!(__lambda2,
    long[]))`

    /tmp/tmpro_3urom.d(37): Error: template `std.algorithm.sorting.sort` cannot deduce
    function from argument types `!((a, b) => a < b)(immutable(FilterResult!(__lambda2,
    long[])))`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/algorithm/sorting.d(1847):        `std.algorithm.sorting.sort(alias
    less = "a < b", SwapStrategy ss = SwapStrategy.unstable, Range)(Range r) if ((ss
    == SwapStrategy.unstable && (hasSwappableElements!Range || hasAssignableElements!Range)
    || ss != SwapStrategy.unstable && hasAssignableElements!Range) && isRandomAccessRange!Range
    && hasSlicing!Range && hasLength!Range)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/algorithm/iteration.d(499):
    Error: constructor `tmpro_3urom.by_length.MapResult!(__lambda4, immutable(FilterResult!(__lambda2,
    long[]))).MapResult.this(FilterResult!(__lambda2, long[]) input)` is not callable
    using argument types `(immutable(FilterResult!(__lambda2, long[])))`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/algorithm/iteration.d(499):        cannot
    pass argument `r` of type `immutable(FilterResult!(__lambda2, long[]))` to parameter
    `FilterResult!(__lambda2, long[]) input`

    /tmp/tmpro_3urom.d(38): Error: template instance `tmpro_3urom.by_length.map!((a)
    => to!string(a)).map!(immutable(FilterResult!(__lambda2, long[])))` error instantiating

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpro_3urom.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  \n    // Sort the array\n    std.algorithm.sort(arr);\n    \n    // Get the\
    \ reverse of it\n    auto rev = arr.reverse;\n    \n    // Create the array to\
    \ be returned\n    string[] nums;\n    \n    // Iterate on the array, convert\
    \ each int to a string\n    // and append it to the array to be returned\n   \
    \ foreach(n; rev)\n    {\n        switch(n)\n        {\n            case 1:\n\
    \                nums ~= \"One\";\n                break;\n            case 2:\n\
    \                nums ~= \"Two\";\n                break;\n            case 3:\n\
    \                nums ~= \"Three\";\n                break;\n            case\
    \ 4:\n                nums ~= \"Four\";\n                break;\n            case\
    \ 5:\n                nums ~= \"Five\";\n                break;\n            case\
    \ 6:\n                nums ~= \"Six\";\n                break;\n            case\
    \ 7:\n                nums ~= \"Seven\";\n                break;\n           \
    \ case 8:\n                nums ~= \"Eight\";\n                break;\n      \
    \      case 9:\n                nums ~= \"Nine\";\n                break;\n  \
    \      }\n    }\n    \n    return nums;\n}\nunittest\n{\n    alias candidate =\
    \ by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxi5_czpm.d(26): Error: undefined identifier `algorithm` in package
    `std`

    /tmp/tmpxi5_czpm.d(29): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(long[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxi5_czpm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[long] map = [ 1 : \"One\",\n                         2 : \"Two\",\n\
    \                         3 : \"Three\",\n                         4 : \"Four\"\
    ,\n                         5 : \"Five\",\n                         6 : \"Six\"\
    ,\n                         7 : \"Seven\",\n                         8 : \"Eight\"\
    ,\n                         9 : \"Nine\" ];\n    auto sorted = arr.filter!(x =>\
    \ 1 <= x && x <= 9).sort.retro;\n    return sorted.map!(x => map[x]).array;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz1_n1hy8.d(33): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz1_n1hy8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  /* \n    \n    1. Sort the array in ascending order by the length of each element.\
    \ \n    2. Reverse the sorted array.\n    3. Replace each digit by its corresponding\
    \ name from \"One\", \"Two\", \"Three\", \n    \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\".\n    */\n    if (arr.length == 0)\n    {\n     \
    \   return [];\n    }\n    arr.sort;\n    arr.reverse;\n    string[] finalArray\
    \ = new string[arr.length];\n    foreach(i, ref value; arr)\n    {\n        switch(value)\n\
    \        {\n            case 1:\n                finalArray[i] = \"One\";\n  \
    \              break;\n            case 2:\n                finalArray[i] = \"\
    Two\";\n                break;\n            case 3:\n                finalArray[i]\
    \ = \"Three\";\n                break;\n            case 4:\n                finalArray[i]\
    \ = \"Four\";\n                break;\n            case 5:\n                finalArray[i]\
    \ = \"Five\";\n                break;\n            case 6:\n                finalArray[i]\
    \ = \"Six\";\n                break;\n            case 7:\n                finalArray[i]\
    \ = \"Seven\";\n                break;\n            case 8:\n                finalArray[i]\
    \ = \"Eight\";\n                break;\n            case 9:\n                finalArray[i]\
    \ = \"Nine\";\n                break;\n            default:\n                finalArray[i]\
    \ = \"\";\n                break;\n        }\n    }\n    return finalArray;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvkmpu1vo.d(35): Error: no property `sort` for type `long[]`

    /tmp/tmpvkmpu1vo.d(36): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(long[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvkmpu1vo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  import std.algorithm;\n    import std.range;\n    import std.array;\n    import\
    \ std.conv;\n    import std.string;\n    import std.stdio;\n    import std.digest.md;\n\
    \    import std.digest.crc;\n    import std.math;\n    import std.typecons;\n\
    \    import std.range;\n    import std.array;\n    import std.conv;\n    import\
    \ std.string;\n    import std.stdio;\n    import std.digest.md;\n    import std.digest.crc;\n\
    \    import std.math;\n    import std.typecons;\n    import std.range;\n    import\
    \ std.array;\n    import std.conv;\n    import std.string;\n    import std.stdio;\n\
    \    import std.digest.md;\n    import std.digest.crc;\n    import std.math;\n\
    \    import std.typecons;\n    import std.range;\n    import std.array;\n    import\
    \ std.conv;\n    import std.string;\n    import std.stdio;\n    import std.digest.md;\n\
    \    import std.digest.crc;\n    import std.math;\n    import std.typecons;\n\
    \    import std.range;\n    import std.array;\n    import std.conv;\n    import\
    \ std.string;\n    import std.stdio;\n    import std.digest.md;\n    import std.digest.crc;\n\
    \    import std.math;\n    import std.typecons;\n    import std.range;\n    import\
    \ std.array;\n    import std.conv;\n    import std.string;\n    import std.stdio;\n\
    \    import std.digest.md;\n    import std.digest.crc;\n    import std.math;\n\
    \    import std.typecons;\n    import std.range;\n    import std.array;\n    import\
    \ std.conv;\n    import std.string;\n    import std.stdio;\n    import std.digest.md;\n\
    \    import std.digest.crc;\n    import std.math;\n    import std.type\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoaqj2q9s.d(88): Error: `;` expected

    /tmp/tmpoaqj2q9s.d(98): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoaqj2q9s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  // Write your code here!\n    long[] newArr = arr.filter!(i => i >= 1 && i\
    \ <= 9);\n    newArr.sort!((a, b) => a > b);\n    newArr = newArr.reverse;\n \
    \   return newArr.map!(i => to!string(i)).map!(i => [\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][to!size_t(i)-1]);\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy6e3ac60.d(25): Error: no property `filter` for type `long[]`

    /tmp/tmpy6e3ac60.d(26): Error: no property `sort` for type `long[]`

    /tmp/tmpy6e3ac60.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(long[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmpy6e3ac60.d(28): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy6e3ac60.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n\t\
    string[] ret;\n\tint[] toSort;\n\tforeach(i; arr)\n\t{\n\t\tif(i>0 && i<10)\n\t\
    \t{\n\t\t\ttoSort ~= i;\n\t\t}\n\t}\n\tif(toSort.length==0)\n\t{\n\t\treturn ret;\n\
    \t}\n\tsort(toSort);\n\t\n\tforeach(i; toSort)\n\t{\n\t\tret ~= switch(i) {\n\t\
    \t\tcase 1: \"One\";\n\t\t\tcase 2: \"Two\";\n\t\t\tcase 3: \"Three\";\n\t\t\t\
    case 4: \"Four\";\n\t\t\tcase 5: \"Five\";\n\t\t\tcase 6: \"Six\";\n\t\t\tcase\
    \ 7: \"Seven\";\n\t\t\tcase 8: \"Eight\";\n\t\t\tcase 9: \"Nine\";\n\t\t\tdefault:\
    \ \"\";\n\t\t};\n\t}\n\treturn ret.reverse;\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplw08woqn.d(41): Error: expression expected, not `switch`

    /tmp/tmplw08woqn.d(41): Error: found `{` when expecting `;` following statement

    /tmp/tmplw08woqn.d(52): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmplw08woqn.d(54): Error: declaration expected, not `return`

    /tmp/tmplw08woqn.d(55): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplw08woqn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  // TODO: start here\n    return arr;\n}\n \n \n/*\n    Write a function `is_palindrome`\
    \ that checks whether a string is a palindrome.\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpecqiuiri.d(29): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpecqiuiri.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  if (arr.length == 0) return new string[0];\n    if (arr.length == 1) \n   \
    \ {\n        if (arr[0] < 1L || arr[0] > 9L) return new string[0];\n        else\
    \ return [arr[0].to!string];\n    }\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl05p32m0.d(30): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl05p32m0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  // your code goes here\n    import std.algorithm : filter, sort, filter!\"\
    a.length > 0\";\n    return arr.sort.filter!\"a > 0 && a < 10\".map!\"digits[a\
    \ - 1]\".reverse.array;\n}\nunittest\n{\n    alias candidate = by_length;\n\n\
    \    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0oxcu083.d(25): Error: `;` expected

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0oxcu083.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  auto result = new string[];\n    foreach(i; arr) {\n        if(i <= 9 && i\
    \ >= 1) {\n            result ~= to!string(i);\n        }\n    }\n    sort(result);\n\
    \    reverse(result);\n    string[] retval = new string[result.length];\n    foreach(i,\
    \ e; result) {\n        retval[i] = to!string(e);\n    }\n    return retval;\n\
    }\n/*\n    Given an array of integers, filter out odd numbers and return the even\
    \ numbers in the\n    order they occur. If the array is empty, return an empty\
    \ array.\n    \n    Example:\n    >>> only_even([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L,\
    \ 9L])\n    [2L, 4L, 6L, 8L]\n    \n    >>> only_even([])\n    []\n*/\nlong[]\
    \ only_even(long[] arr)\n{\n    if(arr.length == 0) {\n        return [];\n  \
    \  }\n    else {\n        return filter!(x => x % 2 == 0)(arr);\n    }\n}\n/*\n\
    \    Given an array of integers, filter out even numbers and return the odd numbers\
    \ in the\n    order they occur. If the array is empty, return an empty array.\n\
    \    \n    Example:\n    >>> only_odd([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L])\n\
    \    [1L, 3L, 5L, 7L, 9L]\n    \n    >>> only_odd([])\n    []\n*/\nlong[] only_odd(long[]\
    \ arr)\n{\n    if(arr.length == 0) {\n        return [];\n    }\n    else {\n\
    \        return filter!(x => x % 2 != 0)(arr);\n    }\n}\n/*\n    Given an array\
    \ of integers, return a tuple with two arrays of integers. The first array should\n\
    \    be only the even numbers in the order they occur and the second array should\
    \ be only the odd\n    numbers in the order they occur.\n    \n    Example:\n\
    \    >>> split_even_odd\nunittest\n{\n    alias candidate = by_length;\n\n   \
    \ assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp82tgd1an.d(78): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp82tgd1an.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  string[]\
    \ result;\n  foreach(long elem; arr)\n  {\n    if(elem >=1 && elem <= 9)\n   \
    \   result ~= \"One\";\n  }\n  return result;\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwtebg4xh.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x42924d]

    ??:? void tmpwtebg4xh.__unittest_L32_C1() [0x42809b]

    ??:? void tmpwtebg4xh.__modtest() [0x4284b4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42e73f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428fa6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42b3e5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42b474]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42b371]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f7d]

    ??:? runModuleUnitTests [0x42e515]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42969c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  arr = arr.filter!(a => 1 <= a && a <= 9)().sort!((a, b) => a > b)();\n    arr\
    \ = arr.reverse();\n    return arr.map!(a => [ \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\" ][a - 1])();\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpegt5_0th.d(24): Error: no property `filter` for type `long[]`

    /tmp/tmpegt5_0th.d(25): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(long[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmpegt5_0th.d(26): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpegt5_0th.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  // Convert to string array\n    string[] result = cast(string[]) arr;\n   \
    \ \n    // Sort the array\n    std.algorithm.sort(result);\n    \n    // Reverse\
    \ the array\n    result = result.reverse();\n    \n    // Replace 1, 2, ... with\
    \ \"One\", \"Two\", ...\n    int len = result.length;\n    for (int i = 0; i <\
    \ len; i++)\n    {\n        if (arr[i] == 1) {result[i] = \"One\";}\n        else\
    \ if (arr[i] == 2) {result[i] = \"Two\";}\n        else if (arr[i] == 3) {result[i]\
    \ = \"Three\";}\n        else if (arr[i] == 4) {result[i] = \"Four\";}\n     \
    \   else if (arr[i] == 5) {result[i] = \"Five\";}\n        else if (arr[i] ==\
    \ 6) {result[i] = \"Six\";}\n        else if (arr[i] == 7) {result[i] = \"Seven\"\
    ;}\n        else if (arr[i] == 8) {result[i] = \"Eight\";}\n        else if (arr[i]\
    \ == 9) {result[i] = \"Nine\";}\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp_7d1_4x.d(28): Error: undefined identifier `algorithm` in package
    `std`

    /tmp/tmpp_7d1_4x.d(31): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmpp_7d1_4x.d(34): Error: cannot implicitly convert expression `result.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp_7d1_4x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  long[] input = arr.filter!(a => a >= 1 && a <= 9).sort().reverse();\n    return\
    \ input.map!(a => \"One\" ~ \"Two\" ~ \"Three\" ~ \"Four\" ~ \"Five\" ~ \"Six\"\
    \ ~ \"Seven\" ~ \"Eight\" ~ \"Nine\"[a - 1 .. a]);\n}\nunittest\n{\n    alias\
    \ candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L,\
    \ 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L,\
    \ 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpidwi7toy.d(24): Error: no property `filter` for type `long[]`

    /tmp/tmpidwi7toy.d(25): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpidwi7toy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  long[] sortedNumbers = arr.filter!(a => a > 0 && a < 10).sort;\n    sortedNumbers\
    \ = sortedNumbers.reverse;\n    string[] result = new string[sortedNumbers.length];\n\
    \    for (long i = 0; i < sortedNumbers.length; i++)\n    {\n        auto numString\
    \ = sortedNumbers[i].to!string;\n        result[i] = to!string(to!long(numString[0]));\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppoeezqcy.d(24): Error: no property `filter` for type `long[]`

    /tmp/tmppoeezqcy.d(25): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(long[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmppoeezqcy.d(29): Error: no property `to` for type `long`

    /tmp/tmppoeezqcy.d(30): Error: template instance `to!string` template `to` is
    not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppoeezqcy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  assert( arr.length > 0 );\n    auto const numbers = [ \"One\", \"Two\", \"\
    Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\" ];\n    size_t\
    \ len = 0;\n    foreach( long elem; arr ) \n    {\n        if( (elem > 0) && (elem\
    \ < 10) ) \n        {\n            arr[len] = elem;\n            len++;\n    \
    \    }\n    }\n    if( len == 0 ) \n    {\n        return [];\n    }\n    auto\
    \ l = arr[0..len];\n    std.sort( l );\n    std.reverse( l );\n    string[] result\
    \ = new string[l.length];\n    foreach( long elem; l ) \n    {\n        size_t\
    \ i = elem - 1;\n        assert( i < numbers.length );\n        result ~= numbers[i];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8a3tmrqk.d(40): Error: undefined identifier `sort` in package `std`

    /tmp/tmp8a3tmrqk.d(41): Error: undefined identifier `reverse` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8a3tmrqk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] res;\n    res.length = arr.length;\n    int j = 0;\n    foreach(i;\
    \ arr) \n    {\n        if(1 <= i && i <= 9) \n        {\n            res[j] =\
    \ i.to!string;\n            j++;\n        }\n    }\n    sort(res);\n    res =\
    \ res.reversed;\n    return res;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdiybgmgv.d(31): Error: no property `to` for type `long`

    /tmp/tmpdiybgmgv.d(35): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmpdiybgmgv.d(36): Error: no property `reversed` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdiybgmgv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  long[] res = arr.filter!(a => a > 0 && a < 10).sort.map!(a => a).array;\n \
    \   return res.map!(a => \n    {\n        switch(a)\n        {\n            case\
    \ 1: return \"One\";\n            case 2: return \"Two\";\n            case 3:\
    \ return \"Three\";\n            case 4: return \"Four\";\n            case 5:\
    \ return \"Five\";\n            case 6: return \"Six\";\n            case 7: return\
    \ \"Seven\";\n            case 8: return \"Eight\";\n            case 9: return\
    \ \"Nine\";\n        }\n    }).array;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpohd0u3in.d(24): Error: no property `filter` for type `long[]`

    /tmp/tmpohd0u3in.d(25): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpohd0u3in.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  /*\n        There are a lot of ways to solve this.\n        Here is one way:\n\
    unittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L,\
    \ 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6u9l0b1e.d(24): Error: unterminated /* */ comment

    /tmp/tmp6u9l0b1e.d(37): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6u9l0b1e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  import std.algorithm;\n    string[] res = new string[];\n    foreach(e; arr)\n\
    \    {\n        if (e > 0 && e < 10)\n        {\n            e switch (0)\n  \
    \          {\n                case 1: res ~= \"One\"; break;\n               \
    \ case 2: res ~= \"Two\"; break;\n                case 3: res ~= \"Three\"; break;\n\
    \                case 4: res ~= \"Four\"; break;\n                case 5: res\
    \ ~= \"Five\"; break;\n                case 6: res ~= \"Six\"; break;\n      \
    \          case 7: res ~= \"Seven\"; break;\n                case 8: res ~= \"\
    Eight\"; break;\n                case 9: res ~= \"Nine\"; break;\n           \
    \ }\n        }\n    }\n    sort(res);\n    res = res.dup.reverse;\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxhvpvqt8.d(30): Error: found `switch` when expecting `;` following
    statement

    /tmp/tmpxhvpvqt8.d(30): Error: basic type expected, not `0`

    /tmp/tmpxhvpvqt8.d(30): Error: found `0` when expecting `)`

    /tmp/tmpxhvpvqt8.d(30): Error: missing `{ ... }` for function literal

    /tmp/tmpxhvpvqt8.d(30): Error: found `)` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxhvpvqt8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  \n    int[] a = arr.retro;\n    int[string] vals = [\n        1 : \"One\",\n\
    \        2 : \"Two\",\n        3 : \"Three\",\n        4 : \"Four\",\n       \
    \ 5 : \"Five\",\n        6 : \"Six\",\n        7 : \"Seven\",\n        8 : \"\
    Eight\",\n        9 : \"Nine\"\n    ];\n    return a.filter!(x => x > 0 && x <\
    \ 10).map!(x => vals[x]);\n}\nunittest\n{\n    alias candidate = by_length;\n\n\
    \    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpde2gn2we.d(25): Error: no property `retro` for type `long[]`

    /tmp/tmpde2gn2we.d(26): Error: cannot implicitly convert expression `[1:"One",
    2:"Two", 3:"Three", 4:"Four", 5:"Five", 6:"Six", 7:"Seven", 8:"Eight", 9:"Nine"]`
    of type `string[int]` to `int[string]`

    /tmp/tmpde2gn2we.d(37): Error: no property `filter` for type `int[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpde2gn2we.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] numbers = [ \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\" ];\n    int[] temp = arr.filter!(a => a > 0 &&\
    \ a < 10)().sort().reverse();\n    string[] output = temp.map!(a => numbers[a\
    \ - 1])();\n    return output;\n}\n \nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa180rmpr.d(25): Error: no property `filter` for type `long[]`

    /tmp/tmpa180rmpr.d(26): Error: no property `map` for type `int[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa180rmpr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] ret;\n    long[] sorted = arr.dup;\n    sorted.sort;\n    bool[long]\
    \ present = arr.dup.mangle!(x => x <= 9 && x >= 1);\n    for (long i = 1; i <=\
    \ 9; i++)\n    {\n        if (present[i])\n        {\n            sorted ~= i;\n\
    \        }\n    }\n    sorted.sort(std.algorithm.comparison!(\"a < b\"));\n  \
    \  ret = std.algorithm.map!(x => to!string(x)).array(sorted);\n    ret.reverse;\n\
    \    return ret;\n}\n/*\n    Assume that you have a function get_next_random()\
    \ that will give you\n    the next random number in a sequence. Implement a function\
    \ that\n    will return the kth random number in the sequence, where k is an integer.\n\
    \    Note that the sequence is unbounded.\n    \n      For example:\n    >>> get_kth_random(0)\n\
    \    4\n    >>> get_kth_random(1)\n    3\n    >>> get_kth_random(2)\n    2\n \
    \   >>> get_kth_random(3)\n    0\n    >>> get_kth_random(4)\n    8\n    >>> get_kth_random(5)\n\
    \    1\n    >>> get_kth_random(6)\n    5\n    >>> get_kth_random(7)\n    6\n \
    \   >>> get_kth_random(8)\n    7\n    >>> get_kth_random(9)\n    0\n    >>> get_kth_random(10)\n\
    \    8\n    >>> get_kth_random(11)\n    1\n    >>> get_kth_random(12)\n    5\n\
    \    >>> get_kth_random(13)\n    6\n    >>> get_kth_random(14)\n    7\n    >>>\
    \ get_kth_random(15)\n    0\n    >>> get_kth_random(16)\n    8\n    >>> get_kth_random(17)\n\
    \    1\n    >>> get_kth_random(18)\n    5\n    >>>\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi35504hw.d(40): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi35504hw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[int] dict = [1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"\
    Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"];\n    int[] temp\
    \ = [];\n    foreach(a; arr) \n    {\n        if(a >= 1 && a <= 9) \n        {\n\
    \            temp ~= a;\n        }\n    }\n    temp.sort();\n    temp.reverse();\n\
    \    string[] result = [];\n    foreach(t; temp) \n    {\n        result ~= dict[t];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp779x7c3b.d(30): Error: cannot append type `long` to type `int[]`

    /tmp/tmp779x7c3b.d(33): Error: no property `sort` for type `int[]`

    /tmp/tmp779x7c3b.d(34): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(int[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp779x7c3b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] res = [];\n    string[] nums = [ \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\" ];\n    //std.algorithm.sort(arr);\n\
    \    //std.algorithm.reverse(arr);\n    foreach(el; arr)\n    {\n        if (el\
    \ <= 9 && el >= 1)\n        {\n            res ~= nums[el - 1];\n        }\n \
    \   }\n    return res;\n}\nunittest\n{\n    alias candidate = by_length;\n\n \
    \   assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_xzepcvq.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x42936d]

    ??:? void tmp_xzepcvq.__unittest_L37_C1() [0x4281bb]

    ??:? void tmp_xzepcvq.__modtest() [0x4285d4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42e8d3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x4290c6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42b579]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42b608]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42b505]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42909d]

    ??:? runModuleUnitTests [0x42e6a9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429830]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  //TODO \n    string[] result = [];\n    long temp;\n    foreach(idx, elem;\
    \ arr)\n    {\n        if(elem == 1L)\n        {\n            temp = elem;\n \
    \           arr[idx] = elem;\n            result ~= \"One\";\n        }\n    \
    \    else if(elem == 2L)\n        {\n            temp = elem;\n            arr[idx]\
    \ = elem;\n            result ~= \"Two\";\n        }\n        else if(elem ==\
    \ 3L)\n        {\n            temp = elem;\n            arr[idx] = elem;\n   \
    \         result ~= \"Three\";\n        }\n        else if(elem == 4L)\n     \
    \   {\n            temp = elem;\n            arr[idx] = elem;\n            result\
    \ ~= \"Four\";\n        }\n        else if(elem == 5L)\n        {\n          \
    \  temp = elem;\n            arr[idx] = elem;\n            result ~= \"Five\"\
    ;\n        }\n        else if(elem == 6L)\n        {\n            temp = elem;\n\
    \            arr[idx] = elem;\n            result ~= \"Six\";\n        }\n   \
    \     else if(elem == 7L)\n        {\n            temp = elem;\n            arr[idx]\
    \ = elem;\n            result ~= \"Seven\";\n        }\n        else if(elem ==\
    \ 8L)\n        {\n            temp = elem;\n            arr[idx] = elem;\n   \
    \         result ~= \"Eight\";\n        }\n        else if(elem == 9L)\n     \
    \   {\n            temp = elem;\n            arr[idx] = elem;\n            result\
    \ ~= \"Nine\";\n        }\n        else\n        {\n            temp = elem;\n\
    \            arr[idx] = elem;\n        }\n    }\n    sort(arr);\n    reverse(result);\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9lx213fc.d(89): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmp9lx213fc.d(90): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9lx213fc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  enum\
    \ strs = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"];\n  int[] pos = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  uint index\
    \ = 0;\n  int[] newArr = arr.filter!(a => a > 0 && a < 10).sort.reverse;\n  string[]\
    \ strArr = new string[newArr.length];\n  foreach(num; newArr)\n  {\n    index\
    \ = num - 1;\n    strArr[$] = strs[index];\n  }\n  return strArr;\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdab412s8.d(27): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdab412s8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  string[]\
    \ result = [];\n  long[] sorted;\n  sorted = arr.array();\n  qsort(sorted);\n\
    \  foreach(int i; sorted)\n  {\n    switch(i)\n    {\n      case 1: result ~=\
    \ \"One\"; break;\n      case 2: result ~= \"Two\"; break;\n      case 3: result\
    \ ~= \"Three\"; break;\n      case 4: result ~= \"Four\"; break;\n      case 5:\
    \ result ~= \"Five\"; break;\n      case 6: result ~= \"Six\"; break;\n      case\
    \ 7: result ~= \"Seven\"; break;\n      case 8: result ~= \"Eight\"; break;\n\
    \      case 9: result ~= \"Nine\"; break;\n    }\n  }\n  reverse(result);\n  return\
    \ result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxlvptd1q.d(26): Error: no property `array` for type `long[]`

    /tmp/tmpxlvptd1q.d(27): Error: undefined identifier `qsort`

    /tmp/tmpxlvptd1q.d(28): Error: cannot implicitly convert expression `__r73[__key74]`
    of type `long` to `int`

    /tmp/tmpxlvptd1q.d(30): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    /tmp/tmpxlvptd1q.d(43): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxlvptd1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  long[] newArr = arr.filter!(x => x > 0 && x < 10).sort.map!(e => 9 - e);\n\
    \    return newArr.map!(x => \n    {\n        switch(x) \n        {\n        \
    \    case 0: return \"Nine\";\n            case 1: return \"Eight\";\n       \
    \     case 2: return \"Seven\";\n            case 3: return \"Six\";\n       \
    \     case 4: return \"Five\";\n            case 5: return \"Four\";\n       \
    \     case 6: return \"Three\";\n            case 7: return \"Two\";\n       \
    \     case 8: return \"One\";\n        }\n    }).array;\n}\nunittest\n{\n    alias\
    \ candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L,\
    \ 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L,\
    \ 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcivscadf.d(24): Error: no property `filter` for type `long[]`

    /tmp/tmpcivscadf.d(25): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcivscadf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  arr.sort;\n    auto toDigitName = [](long i) => i == 1 ? \"One\" : i == 2 ?\
    \ \"Two\" : i == 3 ? \"Three\" : i == 4 ? \"Four\" : i == 5 ? \"Five\" : i ==\
    \ 6 ? \"Six\" : i == 7 ? \"Seven\" : i == 8 ? \"Eight\" : i == 9 ? \"Nine\" :\
    \ \"\";\n    auto res = arr.map!(toDigitName).filter!(a => a != \"\").array();\n\
    \    res.reverse;\n    return res;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuhl1q5j3.d(25): Error: found `i` when expecting `.` following long

    /tmp/tmpuhl1q5j3.d(25): Error: found `)` when expecting identifier following `long`.

    /tmp/tmpuhl1q5j3.d(25): Error: found `=>` when expecting `,`

    /tmp/tmpuhl1q5j3.d(25): Error: found `;` when expecting `,`

    /tmp/tmpuhl1q5j3.d(26): Error: expression expected, not `auto`

    /tmp/tmpuhl1q5j3.d(26): Error: found `res` when expecting `,`

    /tmp/tmpuhl1q5j3.d(26): Error: expression expected, not `=`

    /tmp/tmpuhl1q5j3.d(26): Error: found `arr` when expecting `,`

    /tmp/tmpuhl1q5j3.d(26): Error: found `;` when expecting `,`

    /tmp/tmpuhl1q5j3.d(27): Error: found `;` when expecting `,`

    /tmp/tmpuhl1q5j3.d(28): Error: expression expected, not `return`

    /tmp/tmpuhl1q5j3.d(28): Error: found `res` when expecting `,`

    /tmp/tmpuhl1q5j3.d(28): Error: expression expected, not `;`

    /tmp/tmpuhl1q5j3.d(29): Error: found `}` when expecting `,`

    /tmp/tmpuhl1q5j3.d(30): Error: expression expected, not `unittest`

    /tmp/tmpuhl1q5j3.d(31): Error: found `{` when expecting `,`

    /t'
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result;\n    auto dgts = new int[](0);\n    foreach(d; arr)\n    {\n\
    \        if(d < 1 || d > 9)\n            continue;\n        dgts ~= d;\n    }\n\
    \    std.algorithm.sort(dgts);\n    std.algorithm.reverse(dgts);\n    result =\
    \ new string[](dgts.length);\n    foreach(i, d; dgts)\n    {\n        switch(d)\n\
    \        {\n            case 1:\n                result[i] = \"One\";\n      \
    \          break;\n            case 2:\n                result[i] = \"Two\";\n\
    \                break;\n            case 3:\n                result[i] = \"Three\"\
    ;\n                break;\n            case 4:\n                result[i] = \"\
    Four\";\n                break;\n            case 5:\n                result[i]\
    \ = \"Five\";\n                break;\n            case 6:\n                result[i]\
    \ = \"Six\";\n                break;\n            case 7:\n                result[i]\
    \ = \"Seven\";\n                break;\n            case 8:\n                result[i]\
    \ = \"Eight\";\n                break;\n            case 9:\n                result[i]\
    \ = \"Nine\";\n                break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxogdvh1d.d(30): Error: cannot append type `long` to type `int[]`

    /tmp/tmpxogdvh1d.d(32): Error: undefined identifier `algorithm` in package `std`

    /tmp/tmpxogdvh1d.d(33): Error: undefined identifier `algorithm` in package `std`

    /tmp/tmpxogdvh1d.d(37): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxogdvh1d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  if (arr.length == 0)\n    {\n        return [];\n    }\n    const strings =\
    \ [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"];\n    auto a = arr.filter!(x => x >= 1 && x <= 9).sort;\n    a = a.reverse;\n\
    \    return a.map!(x => strings[x - 1]).array;\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvhwdxxcc.d(29): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvhwdxxcc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  \n    long[] myArr = arr.filter!(x => x >= 1 && x <= 9).sort!((a, b) => a <\
    \ b);\n    // long[] myArr = arr.filter!(x => x >= 1 && x <= 9).sort!((a, b) =>\
    \ a > b);\n    return myArr.map!(x => to!string(x)).map!(x => x.toUpper);\n}\n\
    unittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L,\
    \ 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmzfzxgea.d(25): Error: no property `filter` for type `long[]`

    /tmp/tmpmzfzxgea.d(27): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmzfzxgea.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  enum Digits = \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\";\n    alias DigitsType = AliasSeq!Digits;\n    DigitsType[]\
    \ result;\n    foreach(i; arr)\n    {\n        if(i >= 1 && i <= 9)\n        {\n\
    \            result ~= Digits[i - 1];\n        }\n    }\n    return result.sort().reverse;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbqapg8bw.d(24): Error: identifier expected following comma

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbqapg8bw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n\t\
    /*\n\t\tConvert all the integers in the array to strings and\n\t\tstore them in\
    \ a new array. This is done in a for loop\n\t\twith a switch statement\n\t*/\n\
    \tstring[] string_arr = new string[arr.length];\n\tforeach(i, elem; arr)\n\t{\n\
    \t\tswitch(elem)\n\t\t{\n\t\t\tcase 1:\n\t\t\t\tstring_arr[i] = \"One\";\n\t\t\
    \t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tstring_arr[i] = \"Two\";\n\t\t\t\tbreak;\n\t\
    \t\tcase 3:\n\t\t\t\tstring_arr[i] = \"Three\";\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\
    \t\t\t\tstring_arr[i] = \"Four\";\n\t\t\t\tbreak;\n\t\t\tcase 5:\n\t\t\t\tstring_arr[i]\
    \ = \"Five\";\n\t\t\t\tbreak;\n\t\t\tcase 6:\n\t\t\t\tstring_arr[i] = \"Six\"\
    ;\n\t\t\t\tbreak;\n\t\t\tcase 7:\n\t\t\t\tstring_arr[i] = \"Seven\";\n\t\t\t\t\
    break;\n\t\t\tcase 8:\n\t\t\t\tstring_arr[i] = \"Eight\";\n\t\t\t\tbreak;\n\t\t\
    \tcase 9:\n\t\t\t\tstring_arr[i] = \"Nine\";\n\t\t\t\tbreak;\n\t\t\tdefault:\n\
    \t\t\t\tstring_arr[i] = \"\";\n\t\t\t\tbreak;\n\t\t}\n\t}\n\t\n\t/*\n\t\tNext\
    \ we will sort the resulting array of strings.\n\t\tWe will use the shellSort\
    \ algorithm with a gap\n\t\tsequence of gap = (gap * 10) / 13. This algorithm\n\
    \t\tis a variable gap sequence and is considered to be\n\t\tone of the best gap\
    \ sequences.\n\t*/\n\tsize_t gap = string_arr.length;\n\twhile(gap > 1)\n\t{\n\
    \t\tgap = (gap * 10) / 13;\n\t\tforeach(i; gap..string_arr.length)\n\t\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnsa3kua1.d(80): Error: found `unittest` instead of statement

    /tmp/tmpnsa3kua1.d(90): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnsa3kua1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  \n    string[] r = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\"];\n    string[] digit = new string[arr.length];\n\
    \    string[] out;\n    string s;\n    int i;\n    int j;\n    int k;\n    long\
    \ x;\n    long y;\n    int n;\n    n = 0;\n    /*\n    Check arr[]\n    */\n \
    \   foreach(x; arr)\n    {\n        if(x >= 1 && x <= 9)\n        {\n        \
    \    digit[n] = x.to!string;\n            n++;\n        }\n    }\n    if(n ==\
    \ 0) return [\"\"];\n    if(n == 1) return [r[n-1]];\n    out = new string[n];\n\
    \    /*\n    Sort arr[]\n    */\n    for(i = 0; i < n; i++)\n    {\n        for(j\
    \ = i+1; j < n; j++)\n        {\n            if(to!long(digit[i]) > to!long(digit[j]))\n\
    \            {\n                s = digit[i];\n                digit[i] = digit[j];\n\
    \                digit[j] = s;\n            }\n        }\n    }\n    /*\n    reverse\
    \ arr[]\n    */\n    for(i = 0; i < n/2; i++)\n    {\n        s = digit[i];\n\
    \        digit[i] = digit[n-i-1];\n        digit[n-i-1] = s;\n    }\n    /*\n\
    \    replace arr[]\n    */\n    for(i = 0; i < n; i++)\n    {\n        y = to!long(digit[i]);\n\
    \        out[i] = r[y-1];\n    }\n    return out;\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8jkbc06c.d(27): Error: found `out` when expecting `;` following
    statement

    /tmp/tmp8jkbc06c.d(27): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmp8jkbc06c.d(49): Error: found `out` instead of statement

    /tmp/tmp8jkbc06c.d(80): Error: found `out` instead of statement

    /tmp/tmp8jkbc06c.d(82): Error: expression expected, not `out`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8jkbc06c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  auto a = arr.filter!(x => x <= 9L && x >= 1L)().dup.sort.retro;\n    string[]\
    \ b = new string[a.length];\n    string[] nums = [\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    foreach(int\
    \ i, long v; a)\n    {\n        b[i] = nums[cast(int)v - 1];\n    }\n    return\
    \ b;\n}\n/*\n    Given a list of string, write a function that returns the longest\
    \ common prefix.\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmamhwigl.d(33): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmamhwigl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  auto sorted = std.algorithm.sort(arr.filter!(i => 0 < i && i < 10));\n    auto\
    \ reversed = std.algorithm.reverse(sorted);\n    return reversed.map!(i => [ \"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\" ] [i - 1]);\n}\nunittest\n{\n    alias candidate = by_length;\n\n \
    \   assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2bvhhgnc.d(24): Error: undefined identifier `algorithm` in package
    `std`

    /tmp/tmp2bvhhgnc.d(25): Error: undefined identifier `algorithm` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2bvhhgnc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  return [for (n; arr) if (1 <= n && n <= 9) n][$-].map!(toString);\n}\nunittest\n\
    {\n    assert(by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(by_length([])\
    \ == []);\n    assert(by_length([1L, -1L, 55L]) == [\"One\"]);\n}\n \n \n \n/*\n\
    \    Write a function that takes two long[]s and return a bool if they represent\
    \ the same set of numbers.\n    \n    For example:\n    >>> sameSet([1L, 2L, 3L],\
    \ [1L, 2L, 3L])\n    true\n    \n      Same numbers in different order:\n    >>>\
    \ sameSet([1L, 2L, 3L], [3L, 2L, 1L])\n    true\n    \n      Duplicates are ignored:\n\
    \    >>> sameSet([1L, 2L, 3L], [3L, 2L, 2L, 1L])\n    true\n    \n      Different\
    \ sizes should return false:\n    >>> sameSet([1L, 2L, 3L], [1L, 2L])\n    false\n\
    \    \n      Different numbers should return false:\n    >>> sameSet([1L, 2L,\
    \ 3L], [4L, 5L, 6L])\n    false\n*/\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeaz70gvw.d(24): Error: expression expected, not `for`

    /tmp/tmpeaz70gvw.d(24): Error: found `;` when expecting `,`

    /tmp/tmpeaz70gvw.d(24): Error: found `if` when expecting `,`

    /tmp/tmpeaz70gvw.d(24): Error: found `n` when expecting `,`

    /tmp/tmpeaz70gvw.d(24): Error: expression expected, not `]`

    /tmp/tmpeaz70gvw.d(24): Error: found `;` when expecting `,`

    /tmp/tmpeaz70gvw.d(25): Error: expression expected, not `}`

    /tmp/tmpeaz70gvw.d(26): Error: found `unittest` when expecting `,`

    /tmp/tmpeaz70gvw.d(58): Error: found `unittest` when expecting `,`

    /tmp/tmpeaz70gvw.d(68): Error: found `void` when expecting `,`

    /tmp/tmpeaz70gvw.d(68): Error: found `{` when expecting `,`

    /tmp/tmpeaz70gvw.d(68): Error: expression expected, not `}`

    /tmp/tmpeaz70gvw.d(68): Error: found `End of File` when expecting `,`

    /tmp/tmpeaz70gvw.d(68): Error: found `End of File` when expecting `]`

    /tmp/tmpeaz70gvw.d(68): Error: found `End of File` when expecting `;` following
    `return` statement

    /tmp/tmpeaz70gvw.d(68): Error: found `End of '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  const string[] dict = [\"Zero\", \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    auto filtered = arr.filter!(i\
    \ => 1 <= i && i <= 9);\n    std.algorithm.sort(filtered);\n    auto r = filtered.reverse;\n\
    \    return r.map!(n => dict[n]);\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzcln9kvb.d(25): Error: no property `filter` for type `long[]`

    /tmp/tmpzcln9kvb.d(26): Error: undefined identifier `algorithm` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzcln9kvb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  arr = arr.filter!(l => l >= 1 && l <= 9)().sort!(a => a)().reverse();\n   \
    \ auto result = new string[](arr.length);\n    foreach (n, i; arr)\n    {\n  \
    \      switch (n)\n        {\n            case 1: result[i] = \"One\"; break;\n\
    \            case 2: result[i] = \"Two\"; break;\n            case 3: result[i]\
    \ = \"Three\"; break;\n            case 4: result[i] = \"Four\"; break;\n    \
    \        case 5: result[i] = \"Five\"; break;\n            case 6: result[i] =\
    \ \"Six\"; break;\n            case 7: result[i] = \"Seven\"; break;\n       \
    \     case 8: result[i] = \"Eight\"; break;\n            case 9: result[i] = \"\
    Nine\"; break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L,\
    \ 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L,\
    \ 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdfxlgghh.d(24): Error: no property `filter` for type `long[]`

    /tmp/tmpdfxlgghh.d(28): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdfxlgghh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] digits = [ \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\" ];\n    long[] sortedArr = sort!(\"a < b\")(arr.filter!(a\
    \ => a > 0 && a < 10));\n    sortedArr = sortedArr.reverse;\n    return map!(a\
    \ => digits[a - 1])(sortedArr);\n}\n \n/*\n    Given a string, return an array\
    \ that contains the range of numbers that a\n    string contains. If the string\
    \ is empty or contains no numeric characters,\n    return an empty array.\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsvflpr6n.d(30): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsvflpr6n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  if (arr.length == 0) return new string[0];\n    if (arr.length == 1) return\
    \ [t[arr[0]]];\n    else\n    {\n        arr = arr.sort();\n        arr = arr.reverse();\n\
    \        string[] res = new string[arr.length];\n        foreach(long i, size_t\
    \ j; arr)\n        {\n            if (i <= 0 || i > 9) continue;\n           \
    \ else\n            {\n                res[j] = t[i];\n                j++;\n\
    \            }\n        }\n        return res;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L,\
    \ 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L,\
    \ 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy_65xj4x.d(25): Error: undefined identifier `t`

    /tmp/tmpy_65xj4x.d(28): Error: no property `sort` for type `long[]`

    /tmp/tmpy_65xj4x.d(29): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(long[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmpy_65xj4x.d(36): Error: undefined identifier `t`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy_65xj4x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  auto\
    \ str = arr.filter!(a => a >= 1 && a <= 9).sort!(a => a).map!(n => to!string(n)).reverse;\n\
    \  return str.map!(a => a.replace(\"1\", \"One\").replace(\"2\", \"Two\").replace(\"\
    3\", \"Three\").replace(\"4\", \"Four\").replace(\"5\", \"Five\").replace(\"6\"\
    , \"Six\").replace(\"7\", \"Seven\").replace(\"8\", \"Eight\").replace(\"9\",\
    \ \"Nine\"));\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphrnv1s9y.d(24): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphrnv1s9y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  int[] number = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    string[] names = [\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ];\n    string[] ret;\n    foreach(var a; arr)\n    {\n        if(a in number)\n\
    \        {\n            ret ~= names[a-1];\n        }\n    }\n    sort(ret);\n\
    \    reverse(ret);\n    return ret;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz0p_ifcm.d(27): Error: undefined identifier `var`

    /tmp/tmpz0p_ifcm.d(34): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmpz0p_ifcm.d(35): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz0p_ifcm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  static string[] names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\"];\n    return arr.filter!(x => x in 1 ..\
    \ 9).sort().reverse().map!(x => names[x - 1]).array;\n}\nunittest\n{\n    alias\
    \ candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L,\
    \ 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L,\
    \ 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuaxygj_c.d(25): Error: found `..` when expecting `)` following
    template argument list

    /tmp/tmpuaxygj_c.d(25): Error: found `9` when expecting `;` following `return`
    statement

    /tmp/tmpuaxygj_c.d(25): Error: found `)` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuaxygj_c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  int[] numbers = new int[arr.length];\n    int n = 0;\n    for (int i = 0; i\
    \ < arr.length; i++) {\n        if (arr[i] > 0 && arr[i] < 10) {\n           \
    \ numbers[n] = arr[i];\n            n++;\n        }\n    }\n    numbers.length\
    \ = n;\n    sort(numbers);\n    string[] result = new string[n];\n    for (int\
    \ i = 0; i < n; i++) {\n        switch (numbers[i]) {\n            case 1:\n \
    \               result[i] = \"One\";\n                break;\n            case\
    \ 2:\n                result[i] = \"Two\";\n                break;\n         \
    \   case 3:\n                result[i] = \"Three\";\n                break;\n\
    \            case 4:\n                result[i] = \"Four\";\n                break;\n\
    \            case 5:\n                result[i] = \"Five\";\n                break;\n\
    \            case 6:\n                result[i] = \"Six\";\n                break;\n\
    \            case 7:\n                result[i] = \"Seven\";\n               \
    \ break;\n            case 8:\n                result[i] = \"Eight\";\n      \
    \          break;\n            case 9:\n                result[i] = \"Nine\";\n\
    \                break;\n        }\n    }\n    reverse(result);\n    return result;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp31km7nh5.d(28): Error: cannot implicitly convert expression `arr[cast(ulong)i]`
    of type `long` to `int`

    /tmp/tmp31km7nh5.d(33): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmp31km7nh5.d(36): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    /tmp/tmp31km7nh5.d(66): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp31km7nh5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  // create an array of array of string\n    string[][] name = [\n        //\
    \ initialize array with empty array\n        // this is to make sure the index\
    \ is 1, 2, ..., 9\n        [\"\"]*10,\n        [\"One\"],\n        [\"Two\"],\n\
    \        [\"Three\"],\n        [\"Four\"],\n        [\"Five\"],\n        [\"Six\"\
    ],\n        [\"Seven\"],\n        [\"Eight\"],\n        [\"Nine\"]\n    ];\n \
    \   long[] sorted = arr.filter!(x => x >= 1 && x <= 9).sort();\n    return sorted.map!(x\
    \ => name[x]).array.reverse;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeaca8kwg.d(28): Error: incompatible types for `([""]) * (10)`:
    `string[]` and `int`

    /tmp/tmpeaca8kwg.d(39): Error: no property `filter` for type `long[]`

    /tmp/tmpeaca8kwg.d(40): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeaca8kwg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  auto s = arr.filter!(x => 1L <= x && x <= 9L).sort.reverse.map!(x => x.to!string).array;\n\
    \    return s.map!(x => x == \"1\" ? \"One\" : x == \"2\" ? \"Two\" : x == \"\
    3\" ? \"Three\" : x == \"4\" ? \"Four\" : x == \"5\" ? \"Five\" : x == \"6\" ?\
    \ \"Six\" : x == \"7\" ? \"Seven\" : x == \"8\" ? \"Eight\" : x == \"9\" ? \"\
    Nine\" : x).array;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz_vxo6td.d(24): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz_vxo6td.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  /*\n        1. sort the array\n        2. reverse the array\n        3. convert\
    \ each number to its corresponding name\n        4. return the array as string\
    \ array\n    */\n    arr.sort();\n    arr.reverse();\n    string[] result = new\
    \ string[arr.length];\n    for (int i = 0; i < arr.length; i++)\n    {\n     \
    \   auto item = arr[i];\n        switch (item)\n        {\n            case 1:\n\
    \                result[i] = \"One\";\n                break;\n            case\
    \ 2:\n                result[i] = \"Two\";\n                break;\n         \
    \   case 3:\n                result[i] = \"Three\";\n                break;\n\
    \            case 4:\n                result[i] = \"Four\";\n                break;\n\
    \            case 5:\n                result[i] = \"Five\";\n                break;\n\
    \            case 6:\n                result[i] = \"Six\";\n                break;\n\
    \            case 7:\n                result[i] = \"Seven\";\n               \
    \ break;\n            case 8:\n                result[i] = \"Eight\";\n      \
    \          break;\n            case 9:\n                result[i] = \"Nine\";\n\
    \                break;\n            default:\n                break;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdm7rc8xy.d(30): Error: no property `sort` for type `long[]`

    /tmp/tmpdm7rc8xy.d(31): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(long[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdm7rc8xy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] res;\n    import std.algorithm.sorting : sort;\n    immutable int\
    \ [string] nToS = [1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\"\
    , 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"];\n    foreach(e; arr)\n\
    \    {\n        if(e > 0 && e < 10)\n        {\n            res ~= nToS[e];\n\
    \        }\n    }\n    sort(res);\n    res = res.reverse;\n    return res;\n}\n\
    unittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L,\
    \ 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9c_snmp_.d(26): Error: cannot implicitly convert expression `[1:"One",
    2:"Two", 3:"Three", 4:"Four", 5:"Five", 6:"Six", 7:"Seven", 8:"Eight", 9:"Nine"]`
    of type `string[int]` to `immutable(int[string])`

    /tmp/tmp9c_snmp_.d(31): Error: cannot implicitly convert expression `e` of type
    `long` to `string`

    /tmp/tmp9c_snmp_.d(35): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9c_snmp_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n\t\
    string[] result = null;\n\timmutable digits = [\"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n\tif (arr.length\
    \ == 0)\n\t{\n\t\treturn [];\n\t}\n\telse\n\t{\n\t\treturn [];\n\t}\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqadqjg37.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x4293b5]

    ??:? void tmpqadqjg37.__unittest_L35_C1() [0x4281a7]

    ??:? void tmpqadqjg37.__modtest() [0x4285c0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42debb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42910e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ab61]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42abf0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42aaed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4290e5]

    ??:? runModuleUnitTests [0x42dc91]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429804]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  import std.algorithm;\n    import std.array;\n    import std.conv;\n    import\
    \ std.range;\n    import std.stdio;\n    import std.traits;\n    import std.typecons;\n\
    \    import std.typecons : tuple;\n    import std.typetuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9yyd5lex.d(77): Error: `;` expected

    /tmp/tmp9yyd5lex.d(87): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9yyd5lex.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  if (arr.length == 0) return new string[0];\n    return sort!(a => a)(filter!(v\
    \ => v >= 1 && v <= 9)(arr))\n             .array.map!(e => [\"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][e -\
    \ 1])\n             .array.reverse;\n}\n```\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf60g1sb7.d(29): Error: declaration expected, not `""`

    /tmp/tmpf60g1sb7.d(29): Error: unterminated string constant starting at /tmp/tmpf60g1sb7.d(29)

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf60g1sb7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  if (arr.length == 0) \n    {\n        return new string[0];\n    }\n    arr.sort;\n\
    \    arr.reverse;\n    string[] numbers = new string[arr.length];\n    foreach\
    \ (index, num; arr) \n    {\n        switch (num) \n        {\n            case\
    \ 1:\n                numbers[index] = \"One\";\n                break;\n    \
    \        case 2:\n                numbers[index] = \"Two\";\n                break;\n\
    \            case 3:\n                numbers[index] = \"Three\";\n          \
    \      break;\n            case 4:\n                numbers[index] = \"Four\"\
    ;\n                break;\n            case 5:\n                numbers[index]\
    \ = \"Five\";\n                break;\n            case 6:\n                numbers[index]\
    \ = \"Six\";\n                break;\n            case 7:\n                numbers[index]\
    \ = \"Seven\";\n                break;\n            case 8:\n                numbers[index]\
    \ = \"Eight\";\n                break;\n            case 9:\n                numbers[index]\
    \ = \"Nine\";\n                break;\n        }\n    }\n    return numbers;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsgkytmly.d(28): Error: no property `sort` for type `long[]`

    /tmp/tmpsgkytmly.d(29): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(long[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmpsgkytmly.d(33): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsgkytmly.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  \n    /*\n    Solution:\n    1. Filter the array for numbers between 1 and\
    \ 9 inclusive\n    2. Sort the array by the number (1-9) using sort!qsort\n  \
    \  3. Reverse the sorted array\n    4. Replace the numbers with the corresponding\
    \ names from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"\n    */\n    \n    //long[] arr = [2L, 1L, 1L, 4L, 5L, 8L,\
    \ 2L, 3L];\n    long[] arr2 = arr.filter!(a => (a > 0 && a < 10));\n    //Arrays\
    \ of type long[] or ulong[] are sorted by sort!qsort. \n    //The other primitive\
    \ types are sorted by sort!(\"a < b\").\n    sort!qsort(arr2);\n    //Reverse\
    \ array\n    arr2 = arr2.array.reverse();\n   \n    \n    //Map number to string\n\
    \    string[] result = arr2.map!(a => \n    (\n        a == 1 ? \"One\" : \n \
    \       a == 2 ? \"Two\" : \n        a == 3 ? \"Three\" : \n        a == 4 ? \"\
    Four\" : \n        a == 5 ? \"Five\" : \n        a == 6 ? \"Six\" : \n       \
    \ a == 7 ? \"Seven\" : \n        a == 8 ? \"Eight\" : \n        a == 9 ? \"Nine\"\
    \ : \n        \"error\"\n    )).array;\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl2vumxht.d(34): Error: no property `filter` for type `long[]`

    /tmp/tmpl2vumxht.d(37): Error: template instance `sort!qsort` template `sort`
    is not defined, did you mean sqrt?

    /tmp/tmpl2vumxht.d(39): Error: no property `array` for type `long[]`

    /tmp/tmpl2vumxht.d(43): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl2vumxht.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  if (arr.length == 0) return [];\n    arr = arr.sort.array.filter!(x => x >\
    \ 0 && x < 10).array.reverse.array;\n    return arr.map!(long x => [\"\", \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ][x]).array;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkx9d7ndl.d(26): Error: found `x` when expecting `.` following long

    /tmp/tmpkx9d7ndl.d(26): Error: found `=>` when expecting identifier following
    `long`.

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkx9d7ndl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  auto res = arr.filter!(a => 1 <= a && a <= 9).sort!(a => a).sort!(a => -a).map!(a\
    \ => [\n        \"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\"\n    ][a]);\n    return res;\n}\nunittest\n{\n\
    \    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfjw_1u38.d(24): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfjw_1u38.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  if (arr.length == 0)\n    {\n        return new string[0];\n    }\n    auto\
    \ num = arr.filter!(a => a > 0 && a < 10)().sort.map!(to!string).reverse;\n  \
    \  auto numToStr = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\",\
    \ \"Seven\", \"Eight\", \"Nine\"];\n    return num.map!(a => numToStr[to!int(a)\
    \ - 1]).array;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppmris946.d(28): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppmris946.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  arr = sort(filter!(a => a > 0 && a < 10)(arr))[];\n    arr = arr.reverse();\n\
    \    return map!(a => to!string(a))(arr);\n}\n/*\n  The following is a template\
    \ for the exercise.\n  You can use the following code to test your implementation.\n\
    \  To start with, you can just write your implementation into the template.\n\
    \  Once you are satisfied with your implementation, you can use the auto-tester.\n\
    \  You can find more info on this in the auto-tester tab.\n*/\nunittest\n{\n \
    \   alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph_y3k5id.d(24): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmph_y3k5id.d(25): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(long[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmph_y3k5id.d(26): Error: template instance `map!((a) => to!string(a))` template
    `map` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph_y3k5id.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  import std.typecons;\n    long[] nums = arr.filter!(i => i > 0 && i < 10)();\n\
    \    auto numMap = [\n      \"One\",\n      \"Two\",\n      \"Three\",\n     \
    \ \"Four\",\n      \"Five\",\n      \"Six\",\n      \"Seven\",\n      \"Eight\"\
    ,\n      \"Nine\"\n    ];\n    long[] sortedNums = nums.sort();\n    string[]\
    \ mapped = sortedNums.map!(i => numMap[i-1]);\n    return mapped.reverse();\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdr24w7fv.d(25): Error: no property `filter` for type `long[]`

    /tmp/tmpdr24w7fv.d(37): Error: no property `sort` for type `long[]`

    /tmp/tmpdr24w7fv.d(38): Error: no property `map` for type `long[]`

    /tmp/tmpdr24w7fv.d(39): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdr24w7fv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  return arr.array.sort.reverse.map!(a => a > 0 && a < 10 ? to!string(a) : \"\
    \");\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp46mv9qic.d(24): Error: no property `array` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp46mv9qic.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  auto len = arr.length;\n    if (len == 0)\n        return new string[0];\n\
    \    string[] res = new string[len];\n    arr.sort();\n    arr.reverse();\n  \
    \  auto index = 0;\n    foreach (item; arr) \n    {\n        if (item >= 1 &&\
    \ item <= 9) \n        {\n            switch (item) \n            {\n        \
    \        case 1:\n                    res[index] = \"One\";\n                \
    \    break;\n                case 2:\n                    res[index] = \"Two\"\
    ;\n                    break;\n                case 3:\n                    res[index]\
    \ = \"Three\";\n                    break;\n                case 4:\n        \
    \            res[index] = \"Four\";\n                    break;\n            \
    \    case 5:\n                    res[index] = \"Five\";\n                   \
    \ break;\n                case 6:\n                    res[index] = \"Six\";\n\
    \                    break;\n                case 7:\n                    res[index]\
    \ = \"Seven\";\n                    break;\n                case 8:\n        \
    \            res[index] = \"Eight\";\n                    break;\n           \
    \     case 9:\n                    res[index] = \"Nine\";\n                  \
    \  break;\n            }\n            index++;\n        }\n    }\n    return res[0..index];\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyww2oif3.d(28): Error: no property `sort` for type `long[]`

    /tmp/tmpyww2oif3.d(29): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(long[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmpyww2oif3.d(35): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyww2oif3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = new string[0];\n    if (arr.length == 0) \n    {\n      \
    \  return result;\n    }\n    long[] nums = new long[0];\n    foreach (n; arr)\
    \ \n    {\n        if (n > 0 && n < 10) \n        {\n            nums ~= n;\n\
    \        }\n    }\n    nums.sort;\n    nums.reverse;\n    foreach (i; nums) \n\
    \    {\n        switch (i) \n        {\n            case 1:\n                result\
    \ ~= \"One\";\n                break;\n            case 2:\n                result\
    \ ~= \"Two\";\n                break;\n            case 3:\n                result\
    \ ~= \"Three\";\n                break;\n            case 4:\n               \
    \ result ~= \"Four\";\n                break;\n            case 5:\n         \
    \       result ~= \"Five\";\n                break;\n            case 6:\n   \
    \             result ~= \"Six\";\n                break;\n            case 7:\n\
    \                result ~= \"Seven\";\n                break;\n            case\
    \ 8:\n                result ~= \"Eight\";\n                break;\n         \
    \   case 9:\n                result ~= \"Nine\";\n                break;\n   \
    \     }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgws1i0vj.d(37): Error: no property `sort` for type `long[]`

    /tmp/tmpgws1i0vj.d(38): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(long[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmpgws1i0vj.d(41): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgws1i0vj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  import std.algorithm.sorting : sort;\n    import std.algorithm.comparison :\
    \ equal;\n    import std.algorithm.iteration : find;\n    import std.array : reverse;\n\
    \    import std.conv : to;\n    import std.stdio : writeln;\n    string[] names\
    \ = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"];\n    auto digits = arr.filter!(a => 1 <= a && a <= 9);\n    digits.sort;\n\
    \    digits.reverse;\n    return digits.map!(d => names[d - 1]).array;\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp74l85l_9.d(26): Error: module `std.algorithm.iteration` import
    `find` not found, did you mean template `std.algorithm.iteration.fold(fun...)
    if (fun.length >= 1)`?

    /tmp/tmp74l85l_9.d(27): Error: module `std.array` import `reverse` not found,
    did you mean template `std.meta.Reverse(TList...)`?

    /tmp/tmp74l85l_9.d(31): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp74l85l_9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  // TODO: Write the implementation here\n    auto l1 = arr.filter!(a => a >=\
    \ 1 && a <= 9);\n    l1.sort;\n    l1.reverse;\n    auto l2 = l1.map!(b => \n\
    \        switch(b)\n        {\n            case 1: return \"One\";\n         \
    \   case 2: return \"Two\";\n            case 3: return \"Three\";\n         \
    \   case 4: return \"Four\";\n            case 5: return \"Five\";\n         \
    \   case 6: return \"Six\";\n            case 7: return \"Seven\";\n         \
    \   case 8: return \"Eight\";\n            case 9: return \"Nine\";\n        }\n\
    \    );\n    return l2;\n}\nunittest\n{\n    alias candidate = by_length;\n\n\
    \    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkc2co9os.d(29): Error: expression expected, not `switch`

    /tmp/tmpkc2co9os.d(30): Error: found `{` when expecting `)` following template
    argument list

    /tmp/tmpkc2co9os.d(31): Error: semicolon expected following auto declaration,
    not `case`

    /tmp/tmpkc2co9os.d(41): Error: declaration expected, not `)`

    /tmp/tmpkc2co9os.d(42): Error: declaration expected, not `return`

    /tmp/tmpkc2co9os.d(43): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkc2co9os.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  sort!((a, b) => a > b)(arr);\n    immutable map = [\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    string[]\
    \ res = [];\n    foreach(n; arr) {\n        if(n > 0 && n < 10)\n            res\
    \ ~= map[n-1];\n    }\n    return res;\n}\nunittest\n{\n    alias candidate =\
    \ by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbvblv51d.d(24): Error: template instance `sort!((a, b) => a > b)`
    template `sort` is not defined, did you mean sqrt?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbvblv51d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  arr = arr.filter!(x => x >= 1 && x <= 9).sort.retro;\n    string[] result =\
    \ new string[arr.length];\n    for (size_t i = 0; i < arr.length; i++) \n    {\n\
    \        string s = arr[i].to!string;\n        if (s == \"1\")\n            result[i]\
    \ = \"One\";\n        else if (s == \"2\")\n            result[i] = \"Two\";\n\
    \        else if (s == \"3\")\n            result[i] = \"Three\";\n        else\
    \ if (s == \"4\")\n            result[i] = \"Four\";\n        else if (s == \"\
    5\")\n            result[i] = \"Five\";\n        else if (s == \"6\")\n      \
    \      result[i] = \"Six\";\n        else if (s == \"7\")\n            result[i]\
    \ = \"Seven\";\n        else if (s == \"8\")\n            result[i] = \"Eight\"\
    ;\n        else if (s == \"9\")\n            result[i] = \"Nine\";\n    }\n  \
    \  return result;\n}\n// @exercises/4/4.4.4.4.d\n/*\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzy3_5jxh.d(51): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzy3_5jxh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  return appender()\n        .sort(arr.filter!(x => x > 0 && x < 10))\n     \
    \   .map!(x => to!string(x))\n        .map!(x => replace(x, \"1\", \"One\"))\n\
    \        .map!(x => replace(x, \"2\", \"Two\"))\n        .map!(x => replace(x,\
    \ \"3\", \"Three\"))\n        .map!(x => replace(x, \"4\", \"Four\"))\n      \
    \  .map!(x => replace(x, \"5\", \"Five\"))\n        .map!(x => replace(x, \"6\"\
    , \"Six\"))\n        .map!(x => replace(x, \"7\", \"Seven\"))\n        .map!(x\
    \ => replace(x, \"8\", \"Eight\"))\n        .map!(x => replace(x, \"9\", \"Nine\"\
    ))\n        .data;\n}\n/*\n    Takes a vector of strings v, and returns a vector\
    \ of strings containing\n    all the strings in v with uppercase characters converted\
    \ to lowercase.\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_ht16j4q.d(38): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_ht16j4q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] by_length(long[] arr) \n    {\n        int[] number_order = [1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9];\n        string[] number_names = [\"One\", \"Two\", \"\
    Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n     \
    \   string[] letters = new string[arr.length];\n        int letter_index = 0;\n\
    \        foreach(long el; arr)\n        {\n            foreach(int i; number_order)\n\
    \            {\n                if(el == i)\n                {\n             \
    \       letters[letter_index] = number_names[i - 1];\n                    letter_index++;\n\
    \                }\n            }\n        }\n        letters = letters.retro;\n\
    \        return letters;\n    }\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzj2_bn1a.d(41): Error: no property `retro` for type `string[]`

    /tmp/tmpzj2_bn1a.d(22): Error: function `tmpzj2_bn1a.by_length` has no `return`
    statement, but is expected to return a value of type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzj2_bn1a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  long[] arr1 = arr.filter!(a => a > 0 && a < 10).map!(a => 9 - a);\n    auto\
    \ arr2 = arr1.map!(a => to!string(a));\n    return arr2;\n}\nunittest\n{\n   \
    \ alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L,\
    \ 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphe7u3kjm.d(24): Error: no property `filter` for type `long[]`

    /tmp/tmphe7u3kjm.d(25): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphe7u3kjm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  size_t swapCount = 0;\n    for (size_t i = 0; i < arr.length; i++)\n    {\n\
    \        if (arr[i] > 0 && arr[i] < 10)\n        {\n            for (size_t j\
    \ = 0; j < arr.length; j++)\n            {\n                if (arr[j] > 0 &&\
    \ arr[j] < 10)\n                {\n                    if (arr[i] < arr[j])\n\
    \                    {\n                        swapCount++;\n               \
    \         long[] temp = arr;\n                        temp[i] = arr[j];\n    \
    \                    temp[j] = arr[i];\n                        arr = temp;\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   if (swapCount == 0) return [];\n    size_t num = arr.length;\n    size_t i\
    \ = 0;\n    string[] strArr = new string[];\n    foreach (long l; arr)\n    {\n\
    \        switch (l)\n        {\n            case 1:\n                strArr ~=\
    \ \"One\";\n                break;\n            case 2:\n                strArr\
    \ ~= \"Two\";\n                break;\n            case 3:\n                strArr\
    \ ~= \"Three\";\n                break;\n            case 4:\n               \
    \ strArr ~= \"Four\";\n                break;\n            case 5:\n         \
    \       strArr ~= \"Five\";\n                break;\n            case 6:\n   \
    \             strArr ~= \"Six\";\n                break;\n            case 7:\n\
    \                strArr ~= \"Seven\";\n                break;\n            case\
    \ 8:\n                strArr ~= \"Eight\";\n                break;\n         \
    \   case 9:\n                strArr ~= \"Nine\";\n                break;\n   \
    \     }\n    }\n    string[] reverseStrArr = new string[num];\n    foreach (string\
    \ s; strArr)\n    {\n        reverseStrArr[i] = s;\n        i++;\n    }\n    return\
    \ reverseStrArr;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwebhftub.d(48): Error: new can only create structs, dynamic arrays
    or class objects, not `string[]`''s

    /tmp/tmpwebhftub.d(51): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwebhftub.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  auto\
    \ func = (x)\n  {\n    switch(x)\n    {\n      case 1:\n        return \"One\"\
    ;\n      case 2:\n        return \"Two\";\n      case 3:\n        return \"Three\"\
    ;\n      case 4:\n        return \"Four\";\n      case 5:\n        return \"Five\"\
    ;\n      case 6:\n        return \"Six\";\n      case 7:\n        return \"Seven\"\
    ;\n      case 8:\n        return \"Eight\";\n      case 9:\n        return \"\
    Nine\";\n      default:\n        return \"\";\n    }\n  };\n  arr.retain!(a =>\
    \ a <= 9 && a >= 1);\n  arr.sort!(a => a);\n  arr.reverse();\n  return arr.map!(a\
    \ => func(a)).array;\n}\nunittest\n{\n    alias candidate = by_length;\n\n   \
    \ assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf7q0l8bv.d(24): Error: variable `tmpf7q0l8bv.by_length.func` type
    `void` is inferred from initializer `(x)

    {

    switch (x)

    {

    case 1:

    {

    return "One";

    }

    case 2:

    {

    return "Two";

    }

    case 3:

    {

    return "Three";

    }

    case 4:

    {

    return "Four";

    }

    case 5:

    {

    return "Five";

    }

    case 6:

    {

    return "Six";

    }

    case 7:

    {

    return "Seven";

    }

    case 8:

    {

    return "Eight";

    }

    case 9:

    {

    return "Nine";

    }

    default:

    {

    return "";

    }

    }

    }

    `, and variables cannot be of type `void`

    /tmp/tmpf7q0l8bv.d(24): Error: template lambda has no value

    /tmp/tmpf7q0l8bv.d(50): Error: no property `retain` for type `long[]`

    /tmp/tmpf7q0l8bv.d(51): Error: no property `sort` for type `long[]`

    /tmp/tmpf7q0l8bv.d(52): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(long[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmpf7q0l8bv.d(53): Error:'
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  auto m = map!(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\");\n    auto r = arr.filter!(x => (1 <= x && x <=\
    \ 9)).sort().reverse;\n    return r.map!(x => m[x]).array;\n}\nunittest\n{\n \
    \   alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsmgxteu4.d(24): Error: template instance `map!("One", "Two", "Three",
    "Four", "Five", "Six", "Seven", "Eight", "Nine")` template `map` is not defined

    /tmp/tmpsmgxteu4.d(25): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsmgxteu4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{ \n \
    \   auto sorted = arr.filter!(x => x>0 && x<10)();\n    sorted.sort;\n    sorted.reverse;\n\
    \    return sorted.map!(x => alias[] string = [\"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]; string[x-1])();\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6tj8fr_5.d(27): Error: expression expected, not `alias`

    /tmp/tmp6tj8fr_5.d(27): Error: found `string` when expecting `)` following template
    argument list

    /tmp/tmp6tj8fr_5.d(27): Error: found `)` when expecting `;` following statement

    /tmp/tmp6tj8fr_5.d(27): Error: expression expected, not `)`

    /tmp/tmp6tj8fr_5.d(27): Error: found `;` when expecting `)`

    /tmp/tmp6tj8fr_5.d(28): Error: found `}` when expecting `;` following statement

    /tmp/tmp6tj8fr_5.d(29): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6tj8fr_5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164430
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  string[]\
    \ res = new string[0];\n  long[] before = new long[0];\n  long[] after = new long[0];\n\
    \  foreach(l; arr)\n  {\n    if(1 <= l && l <= 9)\n    {\n      before ~= l;\n\
    \    }\n    else\n    {\n      after ~= l;\n    }\n  }\n  sort(before);\n  res\
    \ = before.map!(x => x.to!string);\n  res.reverse;\n  auto sub = new Subroutine;\n\
    \  sub.numbers = res;\n  sub.digits = after;\n  return sub;\n}\nunittest\n{\n\
    \    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu52h402k.d(38): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpu52h402k.d(39): Error: no property `map` for type `long[]`

    /tmp/tmpu52h402k.d(40): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmpu52h402k.d(41): Error: undefined identifier `Subroutine`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu52h402k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  int len = arr.length;\n    if (len == 0)\n    {\n        return [];\n    }\n\
    \    else\n    {\n        string[] res = [];\n        string[] tmp = [\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ];\n        foreach (e; arr)\n        {\n            if (e > 0 && e < 10)\n  \
    \          {\n                res ~= tmp[e - 1];\n            }\n        }\n \
    \       res.sort;\n        res.reverse;\n        return res;\n    }\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3ls9aqvg.d(24): Error: cannot implicitly convert expression `arr.length`
    of type `ulong` to `int`

    /tmp/tmp3ls9aqvg.d(40): Error: no property `sort` for type `string[]`

    /tmp/tmp3ls9aqvg.d(41): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3ls9aqvg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n \n\
    \  arr = arr.filter!(x => x > 0 && x < 10).array.sort.reverse;\n  string[] results\
    \ = new string[arr.length];\n  string[] numbers = [\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  foreach(n,\
    \ i; arr) results[i] = numbers[n - 1];\n  return results;\n}\nunittest\n{\n  \
    \  alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L,\
    \ 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvd_ewlh0.d(25): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvd_ewlh0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{ \n \
    \ arr = arr.filter!(a => a > 0 && a < 10)().sort().frontInsert(0L).reverse().array();\n\
    \  return arr.map!(a => [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\"][cast(size_t)a - 1]).array();\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdmn6mlh5.d(24): Error: no property `filter` for type `long[]`

    /tmp/tmpdmn6mlh5.d(25): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdmn6mlh5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  immutable int[] lengths = [3,5,4,4,4,3,5,5,4];\n    return arr.filter!(a =>\
    \ a > 0 && a < 10).sort.map!(a => lengths[a-1]).reverse.map!(a => lengths[a-1]).map!(\n\
    \        a => typeof(a) == int ? \"One\" :\n            a == \"Five\" ? \"Five\"\
    \ :\n            a == \"Four\" ? \"Four\" :\n            a == \"One\" ? \"One\"\
    \ :\n            a == \"Three\" ? \"Three\" :\n            a == \"Two\" ? \"Two\"\
    \ : \"Eight\"\n    );\n}\n```\n**[Execute Code](https://rextester.com/CQQG56784)**\n\
    unittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L,\
    \ 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3j4sscp1.d(26): Error: found `?` when expecting `.` following int

    /tmp/tmp3j4sscp1.d(26): Error: found `"One"` when expecting identifier following
    `int`.

    /tmp/tmp3j4sscp1.d(26): Error: found `:` when expecting `)` following template
    argument list

    /tmp/tmp3j4sscp1.d(27): Error: found `a` when expecting `;` following `return`
    statement

    /tmp/tmp3j4sscp1.d(27): Error: found `==` instead of statement

    /tmp/tmp3j4sscp1.d(34): Error: declaration expected, not `""`

    /tmp/tmp3j4sscp1.d(34): Error: unterminated string constant starting at /tmp/tmp3j4sscp1.d(34)

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3j4sscp1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  import std.algorithm.sorting : sort;\n    import std.algorithm.comparison :\
    \ unaryFun;\n    import std.typecons : tuple;\n    import std.array : array;\n\
    \    import std.range : take;\n    import std.range : chain;\n    import std.algorithm.iteration\
    \ : map;\n    import std.algorithm.searching : binarySearch;\n    import std.algorithm.mutation\
    \ : reverse;\n    import std.conv : to;\n    import std.conv : to;\n    import\
    \ std.algorithm.comparison : unaryFun;\n    import std.stdio : writeln;\n    int[string]\
    \ dict = [\"One\":1, \"Two\":2, \"Three\":3, \"Four\":4, \"Five\":5, \"Six\":6,\
    \ \"Seven\":7, \"Eight\":8, \"Nine\":9];\n    auto result = arr.filter!(a => a\
    \ > 0 && a < 10).sort(unaryFun!((a, b) => a < b)).reverse().map!((a) => dict.byKey(a.to!string)[0]);\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp467r_1zq.d(25): Deprecation: Symbol `std.functional.unaryFun(alias
    fun, string parmName = "a")` is not visible from module `tmp467r_1zq` because
    it is privately imported in module `comparison`

    /tmp/tmp467r_1zq.d(31): Error: module `std.algorithm.searching` import `binarySearch`
    not found

    /tmp/tmp467r_1zq.d(35): Deprecation: Symbol `std.functional.unaryFun(alias fun,
    string parmName = "a")` is not visible from module `tmp467r_1zq` because it is
    privately imported in module `comparison`

    /tmp/tmp467r_1zq.d(38): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp467r_1zq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  const string[] arrString = [\"Zero\", \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    long[] arrFilter =\
    \ arr.filter!(a => a >= 1 && a <= 9)();\n    arrFilter.sort!((a, b) => a > b)();\n\
    \    arrFilter.reverse();\n    return arrFilter.map!(a => arrString[a])();\n}\n\
    unittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L,\
    \ 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7bo1jyv3.d(25): Error: no property `filter` for type `long[]`

    /tmp/tmp7bo1jyv3.d(26): Error: no property `sort` for type `long[]`

    /tmp/tmp7bo1jyv3.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(long[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmp7bo1jyv3.d(28): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7bo1jyv3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  import std.algorithm.comparison : sort;\n    import std.functional : toLower;\n\
    \    import std.range : filter, map;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.string : replace;\n    import std.string\
    \ : replace;\n    auto ret = arr.filter!(a => a > 0 && a < 10).sort().map!(a =>\
    \ to!string(a)).map!(a => tuple(a, a.replace(\"1\", \"One\").replace(\"2\", \"\
    Two\").replace(\"3\", \"Three\").replace(\"4\", \"Four\").replace(\"5\", \"Five\"\
    ).replace(\"6\", \"Six\").replace(\"7\", \"Seven\").replace(\"8\", \"Eight\").replace(\"\
    9\", \"Nine\").toLower())).map!(a => a[1]).retro;\n    return ret;\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplw46i706.d(24): Error: module `std.algorithm.comparison` import
    `sort` not found

    /tmp/tmplw46i706.d(25): Error: module `std.functional` import `toLower` not found

    /tmp/tmplw46i706.d(26): Error: module `std.range` import `filter` not found, did
    you mean template `std.meta.Filter(alias pred, TList...)`?

    /tmp/tmplw46i706.d(26): Error: module `std.range` import `map` not found

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplw46i706.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  auto range = 1 .. 9;\n    string[] result = [];\n    auto it = arr.filter!(a\
    \ => range.any!(b => a == b));\n    it.sort();\n    it.reverse();\n    foreach(itn;\
    \ it) \n    {\n        switch(itn)\n        {\n            case 1: result ~= \"\
    One\"; break;\n            case 2: result ~= \"Two\"; break;\n            case\
    \ 3: result ~= \"Three\"; break;\n            case 4: result ~= \"Four\"; break;\n\
    \            case 5: result ~= \"Five\"; break;\n            case 6: result ~=\
    \ \"Six\"; break;\n            case 7: result ~= \"Seven\"; break;\n         \
    \   case 8: result ~= \"Eight\"; break;\n            case 9: result ~= \"Nine\"\
    ; break;\n        }\n    }\n    return result;\n}\n/*\nunittest\n{\n    alias\
    \ candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L,\
    \ 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L,\
    \ 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp278s3h31.d(24): Error: semicolon expected following auto declaration,
    not `..`

    /tmp/tmp278s3h31.d(24): Error: found `..` instead of statement

    /tmp/tmp278s3h31.d(46): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp278s3h31.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  if (arr.length == 0)\n    {\n        return [];\n    }\n    else\n    {\n \
    \       arr = arr.sort;\n        arr = arr.reverse;\n        string[] sarr = new\
    \ string[arr.length];\n        foreach(a; arr)\n        {\n            switch(a)\n\
    \            {\n                case 1:\n                    sarr ~= \"One\";\n\
    \                    break;\n                case 2:\n                    sarr\
    \ ~= \"Two\";\n                    break;\n                case 3:\n         \
    \           sarr ~= \"Three\";\n                    break;\n                case\
    \ 4:\n                    sarr ~= \"Four\";\n                    break;\n    \
    \            case 5:\n                    sarr ~= \"Five\";\n                \
    \    break;\n                case 6:\n                    sarr ~= \"Six\";\n \
    \                   break;\n                case 7:\n                    sarr\
    \ ~= \"Seven\";\n                    break;\n                case 8:\n       \
    \             sarr ~= \"Eight\";\n                    break;\n               \
    \ case 9:\n                    sarr ~= \"Nine\";\n                    break;\n\
    \            }\n        }\n        return sarr;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L,\
    \ 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L,\
    \ 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbxa9iuwp.d(30): Error: no property `sort` for type `long[]`

    /tmp/tmpbxa9iuwp.d(31): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(long[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmpbxa9iuwp.d(35): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbxa9iuwp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  auto by_length = new string[](arr.length);\n    auto sorted = new long[](arr.length);\n\
    \    int it = 0;\n    foreach(index, i; arr)\n    {\n        // if the number\
    \ is between 1-9\n        if (i > 0 && i < 10)\n        {\n            sorted[it]\
    \ = i;\n            it++;\n        }\n    }\n    sort(sorted);\n    for (int i\
    \ = 0; i < it; i++)\n    {\n        switch (sorted[i])\n        {\n          \
    \  case 1:\n                by_length[i] = \"One\";\n                break;\n\
    \            case 2:\n                by_length[i] = \"Two\";\n              \
    \  break;\n            case 3:\n                by_length[i] = \"Three\";\n  \
    \              break;\n            case 4:\n                by_length[i] = \"\
    Four\";\n                break;\n            case 5:\n                by_length[i]\
    \ = \"Five\";\n                break;\n            case 6:\n                by_length[i]\
    \ = \"Six\";\n                break;\n            case 7:\n                by_length[i]\
    \ = \"Seven\";\n                break;\n            case 8:\n                by_length[i]\
    \ = \"Eight\";\n                break;\n            case 9:\n                by_length[i]\
    \ = \"Nine\";\n                break;\n        }\n    }\n    reverse(by_length);\n\
    \    return by_length;\n}\nunittest\n{\n    alias candidate = by_length;\n\n \
    \   assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps3hs0tc1.d(36): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmps3hs0tc1.d(39): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    /tmp/tmps3hs0tc1.d(70): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps3hs0tc1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] ret;\n    string[] res;\n    int max = arr.length;\n    int counter\
    \ = 0;\n    int[] sorted_array;\n    sorted_array = new int[max];\n    foreach(int\
    \ item; arr)\n    {\n        if(item > 0 && item < 10)\n        {\n          \
    \  sorted_array[counter] = item;\n            counter++;\n        }\n    }\n \
    \   sort(sorted_array);\n    ret = new string[counter];\n    foreach(int item;\
    \ sorted_array)\n    {\n        auto z = cast(int)item;\n        ret[counter-1]\
    \ = z.to!string;\n        counter--;\n    }\n    string[] res;\n    auto map =\
    \ [1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\"\
    , 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"];\n    foreach(int item; ret)\n    {\n\
    \        int i = cast(int)item;\n        res ~= map[i];\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpigrlw4yw.d(26): Error: cannot implicitly convert expression `arr.length`
    of type `ulong` to `int`

    /tmp/tmpigrlw4yw.d(30): Error: cannot implicitly convert expression `__r73[__key74]`
    of type `long` to `int`

    /tmp/tmpigrlw4yw.d(38): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmpigrlw4yw.d(43): Error: no property `to` for type `int`

    /tmp/tmpigrlw4yw.d(46): Error: declaration `tmpigrlw4yw.by_length.res` is already
    defined

    /tmp/tmpigrlw4yw.d(48): Error: cannot implicitly convert expression `__r77[__key78]`
    of type `string` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpigrlw4yw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  auto res = new string[arr.length];\n    long[] num = new long[arr.length];\n\
    \    long[] num2 = new long[arr.length];\n    long num3;\n    long num4;\n   \
    \ foreach(i,value;arr)\n    {\n        if(value<10&&value>0)\n        {\n    \
    \        num[i] = value;\n        }\n    }\n    foreach(i,value;num)\n    {\n\
    \        if(value!=0)\n        {\n            num2[i] = value;\n        }\n  \
    \  }\n    num3 = num2.length;\n    num4 = num3;\n    foreach(i,value;num2)\n \
    \   {\n        if(value!=0)\n        {\n            num4--;\n            switch(value)\n\
    \            {\n                case 1:\n                    res[num4] = \"One\"\
    ;\n                    break;\n                case 2:\n                    res[num4]\
    \ = \"Two\";\n                    break;\n                case 3:\n          \
    \          res[num4] = \"Three\";\n                    break;\n              \
    \  case 4:\n                    res[num4] = \"Four\";\n                    break;\n\
    \                case 5:\n                    res[num4] = \"Five\";\n        \
    \            break;\n                case 6:\n                    res[num4] =\
    \ \"Six\";\n                    break;\n                case 7:\n            \
    \        res[num4] = \"Seven\";\n                    break;\n                case\
    \ 8:\n                    res[num4] = \"Eight\";\n                    break;\n\
    \                case 9:\n                    res[num4] = \"Nine\";\n        \
    \            break;\n            }\n        }\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjnqe43n6.d(50): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjnqe43n6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  //TODO\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi2c__3ly.d(22): Error: function `tmpi2c__3ly.by_length` has no
    `return` statement, but is expected to return a value of type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi2c__3ly.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{ \n \
    \   arr.sort;\n    arr.reverse;\n    string[] result;\n    foreach(long x; arr)\n\
    \    {\n        //If the array has any strange number ignore it\n        if(x\
    \ < 1 || x > 9)\n            continue;\n        //Get corresponding name from\
    \ array\n        string name = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\"][x - 1];\n        result ~= name;\n\
    \    }\n    return result;\n}\n \n/*\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzvqj7cth.d(39): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzvqj7cth.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  // Your code here\n    \n}\n \n \n \n/*\n    Sort the integer array given using\
    \ the bubble sort method\n    Don't use D's built-in sort()\nunittest\n{\n   \
    \ alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L,\
    \ 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6e_xnac8.d(30): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6e_xnac8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n\t\
    auto s_arr = arr.map!(x => format(\"%s\", x));\n\tsort!(\"a > b\", s_arr);\n\t\
    reverse(s_arr);\n\treturn s_arr.map!(x => x.stripSuffix(\"L\")).map!(x => x ==\
    \ \"1\" ? \"One\" :\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t x == \"2\" ? \"Two\" :\n\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t x == \"3\" ? \"Three\" :\n\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t x == \"4\" ? \"Four\" :\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t x == \"\
    5\" ? \"Five\" :\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t x == \"6\" ? \"Six\" :\n\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t x == \"7\" ? \"Seven\" :\n\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t x == \"8\" ? \"Eight\" :\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t x == \"9\"\
    \ ? \"Nine\" : x);\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_1c6vdfs.d(24): Error: no property `map` for type `long[]`

    /tmp/tmp_1c6vdfs.d(25): Error: template instance `sort!("a > b", s_arr)` template
    `sort` is not defined, did you mean sqrt?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_1c6vdfs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result;\n    long[] numbers = arr.filter!(a => a > 0 && a < 10).sort().reverse();\n\
    \    foreach(n; numbers)\n    {\n        switch(n)\n        {\n            case\
    \ 1:\n                result ~= \"One\";\n                break;\n           \
    \ case 2:\n                result ~= \"Two\";\n                break;\n      \
    \      case 3:\n                result ~= \"Three\";\n                break;\n\
    \            case 4:\n                result ~= \"Four\";\n                break;\n\
    \            case 5:\n                result ~= \"Five\";\n                break;\n\
    \            case 6:\n                result ~= \"Six\";\n                break;\n\
    \            case 7:\n                result ~= \"Seven\";\n                break;\n\
    \            case 8:\n                result ~= \"Eight\";\n                break;\n\
    \            case 9:\n                result ~= \"Nine\";\n                break;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfd2uxr8b.d(25): Error: no property `filter` for type `long[]`

    /tmp/tmpfd2uxr8b.d(28): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfd2uxr8b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  // solution code here\n    return arr;\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7ngca6xw.d(25): Error: cannot implicitly convert expression `arr`
    of type `long[]` to `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7ngca6xw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  if (arr.length == 0)\n        return [];\n    string[] result = new string[arr.length];\n\
    \    arr = arr.sort();\n    int i = 0;\n    int j = arr.length - 1;\n    while\
    \ (i <= j)\n    {\n        if (arr[i] < 1 || arr[i] > 9)\n        {\n        \
    \    i++;\n            continue;\n        }\n        if (arr[j] < 1 || arr[j]\
    \ > 9)\n        {\n            j--;\n            continue;\n        }\n      \
    \  switch (arr[i])\n        {\n            case 1:\n                result[i]\
    \ = \"One\";\n                break;\n            case 2:\n                result[i]\
    \ = \"Two\";\n                break;\n            case 3:\n                result[i]\
    \ = \"Three\";\n                break;\n            case 4:\n                result[i]\
    \ = \"Four\";\n                break;\n            case 5:\n                result[i]\
    \ = \"Five\";\n                break;\n            case 6:\n                result[i]\
    \ = \"Six\";\n                break;\n            case 7:\n                result[i]\
    \ = \"Seven\";\n                break;\n            case 8:\n                result[i]\
    \ = \"Eight\";\n                break;\n            case 9:\n                result[i]\
    \ = \"Nine\";\n                break;\n        }\n        switch (arr[j])\n  \
    \      {\n            case 1:\n                result[j] = \"One\";\n        \
    \        break;\n            case 2:\n                result[j] = \"Two\";\n \
    \               break;\n            case 3:\n                result[j] = \"Three\"\
    ;\n                break;\n            case 4:\n                result[j] = \"\
    Four\";\n                break;\n            case 5:\n                result[j]\
    \ = \"Five\";\n                break;\n            case 6:\n                result[j]\
    \ = \"Six\";\n                break;\n            case 7:\n                result[j]\
    \ = \"Seven\";\n                break;\n            case 8:\n                result[j]\
    \ = \"Eight\";\n                break;\n            case 9:\n                result[j]\
    \ = \"Nine\";\n                break;\n        }\n        i++;\n        j--;\n\
    \   \nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzi1r0mct.d(105): Error: found `unittest` instead of statement

    /tmp/tmpzi1r0mct.d(115): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzi1r0mct.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  long[] nums = arr.filter!(x => x > 0 && x < 10).sort().reverse;\n    string[]\
    \ names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"];\n    return nums.map!(x => names[x - 1]);\n}\n \n/*\n\
    \    Given a two dimensional array of strings,\n    return the lengths of each\
    \ string in the array.\n    \n    For example:\n    >>> by_length([[\"One\", \"\
    Two\", \"Three\"], [\"Four\", \"Five\", \"Six\"], [\"Seven\", \"Eight\", \"Nine\"\
    ]])\n    [[3, 3, 5], [4, 4, 3], [5, 5, 4]]\n    \n    Note: Don't forget to use\
    \ nested function calls.\n*/\nlong[][] by_length(string[][] arr) \n{\n    return\
    \ arr.map!(x => x.map!(y => y.length)).array;\n}\n \n/*\n    Given a two dimensional\
    \ array of strings,\n    return true if the 2D array has a column where all the\
    \ strings\n    have the same length and false otherwise.\n    \n    For example:\n\
    \    >>> by_length([[\"One\", \"Two\", \"Three\"], [\"Four\", \"Five\", \"Six\"\
    ], [\"Seven\", \"Eight\", \"Nine\"]])\n    true\n    \n    >>> by_length([[\"\
    One\", \"Two\", \"Three\"], [\"Four\", \"Five\", \"Six\"], [\"Seven\", \"Eight\"\
    , \"Nine\"], [\"Ten\", \"Eleven\", \"Twelve\"]])\n    false\n    \n    Note: Don't\
    \ forget to use nested function calls.\n*/\nunittest\n{\n    alias candidate =\
    \ by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3n_3igyq.d(24): Error: no property `filter` for type `long[]`

    /tmp/tmp3n_3igyq.d(26): Error: no property `map` for type `long[]`

    /tmp/tmp3n_3igyq.d(41): Error: no property `map` for type `string[][]`

    /tmp/tmp3n_3igyq.d(63): Error: `tmp3n_3igyq.by_length` called with argument types
    `(void[])` matches both:

    /tmp/tmp3n_3igyq.d(22):     `tmp3n_3igyq.by_length(long[] arr)`

    and:

    /tmp/tmp3n_3igyq.d(39):     `tmp3n_3igyq.by_length(string[][] arr)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3n_3igyq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result;\n    long[] not_in_arr = [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L,\
    \ 9L];\n    foreach(number; arr)\n    {\n        foreach(elem; not_in_arr)\n \
    \       {\n            if(number == elem)\n            {\n                result\
    \ ~= number.to!string;\n            }\n        }\n    }\n    if(result.length\
    \ != 0)\n    {\n        result.sort;\n        result.reverse;\n        long[]\
    \ from = [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L];\n        string[] to = [\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ];\n        result = result.replace(from, to);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L,\
    \ 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwwm86maz.d(32): Error: no property `to` for type `long`

    /tmp/tmpwwm86maz.d(38): Error: no property `sort` for type `string[]`

    /tmp/tmpwwm86maz.d(39): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmpwwm86maz.d(42): Error: no property `replace` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwwm86maz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  if (arr.length == 0)\n        return [];\n    string[] res = new string[];\n\
    \    foreach (x; arr)\n    {\n        if (x >= 1 && x <= 9)\n            res ~=\
    \ x.to!string;\n    }\n    res.sort!((a, b) => a.length < b.length);\n    res.reverse;\n\
    \    for (i, v; res)\n    {\n        switch (v)\n        {\n            case \"\
    1\":\n                res[i] = \"One\";\n                break;\n            case\
    \ \"2\":\n                res[i] = \"Two\";\n                break;\n        \
    \    case \"3\":\n                res[i] = \"Three\";\n                break;\n\
    \            case \"4\":\n                res[i] = \"Four\";\n               \
    \ break;\n            case \"5\":\n                res[i] = \"Five\";\n      \
    \          break;\n            case \"6\":\n                res[i] = \"Six\";\n\
    \                break;\n            case \"7\":\n                res[i] = \"\
    Seven\";\n                break;\n            case \"8\":\n                res[i]\
    \ = \"Eight\";\n                break;\n            case \"9\":\n            \
    \    res[i] = \"Nine\";\n                break;\n        }\n    }\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8tqhd88g.d(34): Error: found `)` when expecting `;` following `for`
    condition

    /tmp/tmp8tqhd88g.d(67): Error: found `return` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8tqhd88g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  static immutable string[] map = [ \"Zero\", \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\" ];\n    return map[10\
    \ - sort!((a, b) => a < b)(arr.filter!(e => e >= 1 && e <= 9))].retro;\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyvin947c.d(25): Error: template instance `sort!((a, b) => a < b)`
    template `sort` is not defined, did you mean sqrt?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyvin947c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  /*\n        Create a structure like this:\n        std.typecons.Tuple!(int,\
    \ string)(1, \"One\");\n        Create an array of this structure and fill with\
    \ data\n        Then sort by the first field and reverse the array\n        Then\
    \ create an string array of the second fields\n    */\n    int[] sort_arr = [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9];\n    string[] names = [\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    Tuple!(int,\
    \ string)[] new_arr;\n    new_arr.length = arr.length;\n    foreach(i, a; arr)\n\
    \    {\n        if(a > 0 && a < 10)\n        {\n            new_arr[i] = Tuple!(int,\
    \ string)(a, names[a - 1]);\n        }\n    }\n    sort!(\"a.field1 < b.field1\"\
    )(new_arr);\n    new_arr.reverse;\n    string[] result;\n    result.length = new_arr.length;\n\
    \    foreach(i, a; new_arr)\n    {\n        result[i] = a.field2;\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgv8vcfhl.d(39): Error: none of the overloads of `this` are callable
    using argument types `(long, string)`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(668):        `std.typecons.Tuple!(int,
    string).Tuple.this(int _param_0, string _param_1)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(689):        `std.typecons.Tuple!(int,
    string).Tuple.__ctor(U, ulong n)(U[n] values) if (n == Types.length && allSatisfy!(isBuildableFrom!U,
    Types))`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(715):        `std.typecons.Tuple!(int,
    string).Tuple.__ctor(U)(U another) if (areBuildCompatibleTuples!(typeof(this),
    U))`

    /tmp/tmpgv8vcfhl.d(42): Error: template instance `sort!"a.fiel'
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{ \n \
    \   auto a = arr.array.reversed.filter!(x => x >= 1 && x <= 9).sort!(a, b => a\
    \ < b).map!(x => to!string(x));\n    return a;\n}\n/*\n    Given an array of string\
    \ arrays, return only those arrays with all distinct elements.\n    For example:\n\
    \    >>> by_length([[], [\"One\"], [\"Two\", \"Two\"], [\"Three\", \"Three\",\
    \ \"Three\"], [\"Four\", \"Four\", \"Four\", \"Four\"]])\n    [[\"One\"], [\"\
    Two\", \"Two\"], [\"Three\", \"Three\", \"Three\"], [\"Four\", \"Four\", \"Four\"\
    , \"Four\"]]\n    \n*/\nstring[][] by_length(string[][] arr) \n{ \n    return\
    \ arr.filter!(a => a.length == a.array.sort.length).array;\n}\n/*\n    Given an\
    \ integer array, return an array of the same length, where each\n    element is\
    \ the sum of all the elements of the previous array. For example:\n    >>> by_length([1L,\
    \ 2L, 3L, 4L])\n    [1L, 3L, 6L, 10L]\n    \n*/\nlong[] by_length(long[] arr)\
    \ \n{ \n    long sum = 0;\n    return arr.map!(x => sum += x).array;\n}\n/*\n\
    \    Given a structure that has a string representing a color, return a tuple\
    \ of\n    a string (name of the color) and a boolean (whether it is a primary\
    \ color).\n    For example:\n    >>> by_length(Color(\"red\"))\n    (\"red\",\
    \ true)\n    >>> by_length(Color(\"blue\"))\n    (\"blue\", true)\n    >>> by_length(Color(\"\
    green\"))\n    (\"green\", true)\n    >>> by_length(Color(\"brown\"))\n    (\"\
    brown\", false)\n    >>> by_length(Color(\"orange\"))\n    (\"orange\", false)\n\
    \    \n*/\ntuple!(string, bool) by_length(Color color) \n{ \n    bool pri = (color.value\
    \ == \"red\" || color.value == \"blue\" || color.value == \"green\");\n    return\n\
    unittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L,\
    \ 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5ficrjig.d(70): Error: expression expected, not `unittest`

    /tmp/tmp5ficrjig.d(71): Error: found `{` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5ficrjig.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  if (arr.length == 0) return [];\n    auto sorted = arr.array.sort.filter!(x\
    \ => 1 <= x && x <= 9);\n    string[] digits = [\"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    return sorted.map!(x\
    \ => digits[x-1]).reverse;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsaptjq4i.d(25): Error: no property `array` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsaptjq4i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  //\
    \ return null;\n  // L\xF6sung:\n  /*\n    Verschachtelte Funktionen und\n   \
    \ Multiple return Werte\n  */\n  // sortieren und umkehren\n  auto sorted = arr.filter!(x\
    \ => x in 1..9).sort!((a, b) => a < b).reversed;\n  if (sorted.empty) return sorted;\n\
    \  // Ziffern abgleichen\n  auto mapping = [\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  return sorted.map!(x\
    \ => mapping[x - 1]).array;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8x61xasu.d(31): Error: found `..` when expecting `)` following
    template argument list

    /tmp/tmp8x61xasu.d(31): Error: semicolon expected following auto declaration,
    not `9`

    /tmp/tmp8x61xasu.d(31): Error: found `)` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8x61xasu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  import std.algorithm;\n    arr = arr.sort.filter!(i => i >= 1 && i <= 9).array;\n\
    \    return arr.map!(i => [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\"][i - 1]).array;\n}\nunittest\n{\n    alias\
    \ candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L,\
    \ 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L,\
    \ 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_tsdem28.d(25): Error: no property `array` for type `FilterResult!(__lambda2,
    SortedRange!(long[], "a < b"))`

    /tmp/tmp_tsdem28.d(26): Error: no property `array` for type `MapResult!(__lambda3,
    long[])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_tsdem28.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  int[] digits = arr.filter!(x => x >= 1 && x <= 9).sort.array;\n    digits.reverse;\n\
    \    return digits.map!(x => Numbers.stringOf(x)).array;\n}\nunittest\n{\n   \
    \ alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L,\
    \ 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbkfngyt5.d(24): Error: no property `filter` for type `long[]`

    /tmp/tmpbkfngyt5.d(25): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(int[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmpbkfngyt5.d(26): Error: no property `map` for type `int[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbkfngyt5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  arr = arr.filter!(x => x > 0 && x < 10)().sort().reverse();\n    return arr.map!(string)(x\
    \ => \"One Two Three Four Five Six Seven Eight Nine\".split(\" \")[x - 1]);\n\
    }\n \n/*\n    Given a string, write a function that finds the longest substring\
    \ of unique characters.\n    If there are multiple instances, return the first\
    \ one.\n    \n    For example:\n    >>> longest_unique_substring(\"abcabcbb\"\
    )\n    \"abc\"\n    \n      If the given string is empty, return an empty string:\n\
    \    >>> longest_unique_substring(\"\")\n    \"\"\n    \n      If the string is\
    \ only a single character, return that string:\n    >>> longest_unique_substring(\"\
    a\")\n    \"a\"\n*/\nstring longest_unique_substring(string str) \n{\n    size_t\
    \ longest = 0;\n    size_t longest_index = 0;\n    size_t current = 0;\n    size_t\
    \ current_index = 0;\n    string sub = \"\";\n    foreach (c; str) {\n       \
    \ auto index = sub.indexOf(c);\n        if (index == -1) {\n            sub ~=\
    \ c;\n            current++;\n        } else {\n            if (current > longest)\
    \ {\n                longest = current;\n                longest_index = current_index;\n\
    \            }\n            sub = sub[index + 1 .. $];\n            current_index\
    \ += index + 1;\n            current = sub.length;\n            sub ~= c;\n  \
    \          current++;\n        }\n    }\n    if (current > longest) {\n      \
    \  longest = current;\n        longest_index = current_index;\n    }\n    return\
    \ str[longest_index .. longest_index + longest];\n}\n \n/*\n    Given an array\
    \ of strings, find the longest string in the array.\n    If there are multiple\
    \ instances, return the first one.\n    \n    For example:\n    >>> longest_string([\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\"])\n    \"Five\"\n    \n      If\
    \ the given array is empty, return an empty string:\n    >>> longest_string([])\n\
    \   \nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp912g1oz4.d(75): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp912g1oz4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{ \n \
    \   if (arr.length == 0) return [];\n    immutable string[] words = [\"One\",\
    \ \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ];\n    int[] sorted = \n        arr.map!(a =>\n            a > 0 && a < 10 ?\
    \ a : -1\n        ).filter!(a => a != -1).sort;\n    return words[sorted.reverse.map!(a\
    \ => a - 1)];\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6e2iy5xu.d(27): Error: no property `map` for type `long[]`

    /tmp/tmp6e2iy5xu.d(30): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(int[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6e2iy5xu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  if (arr.length == 0) return [];\n    else \n    {\n        string[] res = [];\n\
    \        foreach (a; arr)\n        {\n            switch (a)\n            {\n\
    \                case 1: res ~= \"One\"; break;\n                case 2: res ~=\
    \ \"Two\"; break;\n                case 3: res ~= \"Three\"; break;\n        \
    \        case 4: res ~= \"Four\"; break;\n                case 5: res ~= \"Five\"\
    ; break;\n                case 6: res ~= \"Six\"; break;\n                case\
    \ 7: res ~= \"Seven\"; break;\n                case 8: res ~= \"Eight\"; break;\n\
    \                case 9: res ~= \"Nine\"; break;\n            }\n        }\n \
    \       return res.reverse;\n    }\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp08ox7hxl.d(30): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    /tmp/tmp08ox7hxl.d(43): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp08ox7hxl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n\t\
    return !arr.empty ? arr.filter!(i => i > 0 && i < 10).sort.reverse.map!(i => to!string(i)).array\
    \ : [];\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2ow5ws8j.d(24): Error: no property `empty` for type `long[]`

    /tmp/tmp2ow5ws8j.d(24): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2ow5ws8j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  return [];\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjtu4e_uz.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x4291a5]

    ??:? void tmpjtu4e_uz.__unittest_L26_C1() [0x427ff3]

    ??:? void tmpjtu4e_uz.__modtest() [0x42840c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dcab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428efe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a951]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42a9e0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a8dd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428ed5]

    ??:? runModuleUnitTests [0x42da81]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4295f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  version(all) {\n        int[string] names = [\"One\": 1, \"Two\": 2, \"Three\"\
    : 3, \"Four\": 4, \"Five\": 5, \"Six\": 6, \"Seven\": 7, \"Eight\": 8, \"Nine\"\
    : 9];\n        return names.byKey.values.array.idup.reverse;\n    }\n    else\
    \ {\n        return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\"].array.idup.reverse;\n    }\n}\nunittest\n{\n\
    \    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph7ha918_.d(26): Error: template `object.values` cannot deduce function
    from argument types `!()(Result)`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/druntime/import/object.d(3053):        `object.values(T
    : Value[Key], Value, Key)(T aa)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/druntime/import/object.d(3061):        `object.values(T
    : Value[Key], Value, Key)(T* aa)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph7ha918_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  long[]\
    \ temp = arr.filter!(a => a > 0 && a < 10)();\n  temp.sort();\n  temp.reverse();\n\
    \  return temp.map!(a => switch(a) { case 1: return \"One\"; case 2: return \"\
    Two\"; case 3: return \"Three\"; case 4: return \"Four\"; case 5: return \"Five\"\
    ; case 6: return \"Six\"; case 7: return \"Seven\"; case 8: return \"Eight\";\
    \ case 9: return \"Nine\"; })();\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1aqs2uhi.d(27): Error: expression expected, not `switch`

    /tmp/tmp1aqs2uhi.d(27): Error: found `{` when expecting `)` following template
    argument list

    /tmp/tmp1aqs2uhi.d(27): Error: found `case` when expecting `;` following `return`
    statement

    /tmp/tmp1aqs2uhi.d(27): Error: found `:` when expecting `;` following statement

    /tmp/tmp1aqs2uhi.d(27): Error: declaration expected, not `)`

    /tmp/tmp1aqs2uhi.d(28): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1aqs2uhi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  long[] numbers = arr.filter!(e => e >= 1 && e <= 9).sort.reverse;\n    string[]\
    \ result = new string[];\n    foreach(var i; numbers)\n    {\n        switch(i)\n\
    \        {\n            case 1: result ~= \"One\"; break;\n            case 2:\
    \ result ~= \"Two\"; break;\n            case 3: result ~= \"Three\"; break;\n\
    \            case 4: result ~= \"Four\"; break;\n            case 5: result ~=\
    \ \"Five\"; break;\n            case 6: result ~= \"Six\"; break;\n          \
    \  case 7: result ~= \"Seven\"; break;\n            case 8: result ~= \"Eight\"\
    ; break;\n            case 9: result ~= \"Nine\"; break;\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzvjv4qhj.d(24): Error: no property `filter` for type `long[]`

    /tmp/tmpzvjv4qhj.d(25): Error: new can only create structs, dynamic arrays or
    class objects, not `string[]`''s

    /tmp/tmpzvjv4qhj.d(26): Error: undefined identifier `var`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzvjv4qhj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] final_arr = [];\n    int[] num_arr = [];\n    for (int i = 0; i <\
    \ arr.length; i++)\n    {\n        if (arr[i] > 0 && arr[i] < 10)\n        {\n\
    \            num_arr ~= arr[i];\n        }\n    }\n    sort(num_arr);\n    num_arr\
    \ = num_arr.reversed;\n    for (int i = 0; i < num_arr.length; i++)\n    {\n \
    \       if (num_arr[i] == 1)\n        {\n            final_arr ~= \"One\";\n \
    \       }\n        else if (num_arr[i] == 2)\n        {\n            final_arr\
    \ ~= \"Two\";\n        }\n        else if (num_arr[i] == 3)\n        {\n     \
    \       final_arr ~= \"Three\";\n        }\n        else if (num_arr[i] == 4)\n\
    \        {\n            final_arr ~= \"Four\";\n        }\n        else if (num_arr[i]\
    \ == 5)\n        {\n            final_arr ~= \"Five\";\n        }\n        else\
    \ if (num_arr[i] == 6)\n        {\n            final_arr ~= \"Six\";\n       \
    \ }\n        else if (num_arr[i] == 7)\n        {\n            final_arr ~= \"\
    Seven\";\n        }\n        else if (num_arr[i] == 8)\n        {\n          \
    \  final_arr ~= \"Eight\";\n        }\n        else if (num_arr[i] == 9)\n   \
    \     {\n            final_arr ~= \"Nine\";\n        }\n    }\n    return final_arr;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptxi7l22a.d(30): Error: cannot append type `long` to type `int[]`

    /tmp/tmptxi7l22a.d(33): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmptxi7l22a.d(34): Error: no property `reversed` for type `int[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptxi7l22a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  if (arr.length == 0)\n        return new string[0];\n    bool[] filter = arr.map!(a\
    \ => a >= 1 && a <= 9).array;\n    arr = arr.filter!(a => a >= 1 && a <= 9).array;\n\
    \    sort(arr);\n    foreach (index, i; filter)\n    {\n        if (i)\n     \
    \       arr[index] = arr[index].to!string;\n        else\n            arr[index]\
    \ = \"\";\n    }\n    return arr.reverse.array;\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp35vmyrh5.d(26): Error: no property `map` for type `long[]`

    /tmp/tmp35vmyrh5.d(27): Error: no property `filter` for type `long[]`

    /tmp/tmp35vmyrh5.d(28): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmp35vmyrh5.d(32): Error: no property `to` for type `long`

    /tmp/tmp35vmyrh5.d(34): Error: cannot implicitly convert expression `""` of type
    `string` to `long`

    /tmp/tmp35vmyrh5.d(36): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(long[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp35vmyrh5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{ \n \
    \   int len = arr.length;\n    string[] a = new string[len];\n    int i = 0;\n\
    \    int[] arr1 = new int[len];\n    foreach(long element; arr)\n    {\n     \
    \   if(element == 1L)\n        {\n            a[i] = \"One\";\n            arr1[i]\
    \ = 1;\n            i = i + 1;\n        }\n        else if(element == 2L)\n  \
    \      {\n            a[i] = \"Two\";\n            arr1[i] = 2;\n            i\
    \ = i + 1;\n        }\n        else if(element == 3L)\n        {\n           \
    \ a[i] = \"Three\";\n            arr1[i] = 3;\n            i = i + 1;\n      \
    \  }\n        else if(element == 4L)\n        {\n            a[i] = \"Four\";\n\
    \            arr1[i] = 4;\n            i = i + 1;\n        }\n        else if(element\
    \ == 5L)\n        {\n            a[i] = \"Five\";\n            arr1[i] = 5;\n\
    \            i = i + 1;\n        }\n        else if(element == 6L)\n        {\n\
    \            a[i] = \"Six\";\n            arr1[i] = 6;\n            i = i + 1;\n\
    \        }\n        else if(element == 7L)\n        {\n            a[i] = \"Seven\"\
    ;\n            arr1[i] = 7;\n            i = i + 1;\n        }\n        else if(element\
    \ == 8L)\n        {\n            a[i] = \"Eight\";\n            arr1[i] = 8;\n\
    \            i = i + 1;\n        }\n        else if(element == 9L)\n        {\n\
    \            a[i] = \"Nine\";\n            arr1[i] = 9;\n            i = i + 1;\n\
    \        }\n    }\n    sort(arr1);\n    reverse(arr1);\n    return a;\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp16vcl__t.d(24): Error: cannot implicitly convert expression `arr.length`
    of type `ulong` to `int`

    /tmp/tmp16vcl__t.d(85): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmp16vcl__t.d(86): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(int[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp16vcl__t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  if (arr.length == 0) \n    {\n        return new string[0];\n    }\n    auto\
    \ res = arr.dup;\n    std.algorithm.sort(res);\n    // foreach (ref e; res) \n\
    \    // {\n    //     switch (e) \n    //     {\n    //         case 1:\n    //\
    \             e = \"One\";\n    //             break;\n    //         case 2:\n\
    \    //             e = \"Two\";\n    //             break;\n    //         case\
    \ 3:\n    //             e = \"Three\";\n    //             break;\n    //   \
    \      case 4:\n    //             e = \"Four\";\n    //             break;\n\
    \    //         case 5:\n    //             e = \"Five\";\n    //            \
    \ break;\n    //         case 6:\n    //             e = \"Six\";\n    //    \
    \         break;\n    //         case 7:\n    //             e = \"Seven\";\n\
    \    //             break;\n    //         case 8:\n    //             e = \"\
    Eight\";\n    //             break;\n    //         case 9:\n    //          \
    \   e = \"Nine\";\n    //             break;\n    //         default:\n    //\
    \             res.remove(e);\n    //             break;\n    //     }\n    //\
    \ }\n    std.algorithm.reverse(res);\n    return res;\n}\nunittest\n{\n    alias\
    \ candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L,\
    \ 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L,\
    \ 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqs7jwnni.d(29): Error: undefined identifier `algorithm` in package
    `std`

    /tmp/tmpqs7jwnni.d(66): Error: undefined identifier `algorithm` in package `std`

    /tmp/tmpqs7jwnni.d(67): Error: cannot implicitly convert expression `res` of type
    `long[]` to `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqs7jwnni.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{ \n \
    \   long[] v = arr.filter!(x => x >= 1 && x <= 9).sort.reverse;\n    return v.map!(x\
    \ => [null, \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"][cast(int)x]).array;\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9zm7j8nq.d(24): Error: no property `filter` for type `long[]`

    /tmp/tmp9zm7j8nq.d(25): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9zm7j8nq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  if (arr.length == 0)\n    {\n        return [];\n    }\n    return arr.filter!(a\
    \ => 1 <= a && a <= 9).map!(a => \"One Two Three Four Five Six Seven Eight Nine\"\
    .split(\" \")[a - 1]).\n        array.sort.array.reverse;\n}\nunittest\n{\n  \
    \  alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L,\
    \ 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfnoa06vn.d(28): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfnoa06vn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\"];\n    long[] sorted = arr.filter!(e => e >=\
    \ 1 && e <= 9).sort();\n    return sorted.map!(e => names[e - 1]).reverse();\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp15zs02jv.d(25): Error: no property `filter` for type `long[]`

    /tmp/tmp15zs02jv.d(26): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp15zs02jv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  auto\
    \ l = new string[0];\n  arr = arr.filter!(a => a >= 1 && a <= 9).sort().reversed;\n\
    \  foreach(i;arr)\n    l ~= \"One Two Three Four Five Six Seven Eight Nine\".split(\"\
    \ \")[i-1];\n  return l;\n}\nunittest\n{\n    alias candidate = by_length;\n\n\
    \    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmi0sc_x9.d(25): Error: no property `filter` for type `long[]`

    /tmp/tmpmi0sc_x9.d(27): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmi0sc_x9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  const char[] names = [\n            \"One\", \"Two\", \"Three\", \"Four\",\
    \ \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\n    ];\n    int[] sortedNums\
    \ = (arr.filter!(x => x > 0 && x < 10)).array;\n    std.algorithm.sort(sortedNums);\n\
    \    std.algorithm.reverse(sortedNums);\n    string[] reversedSortedNames = new\
    \ string[sortedNums.length];\n    foreach(i, num; sortedNums)\n    {\n       \
    \ reversedSortedNames[i] = names[num - 1];\n    }\n    return reversedSortedNames;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpseham6y2.d(24): Error: cannot implicitly convert expression `["One",
    "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine"]` of type `string[]`
    to `const(char[])`

    /tmp/tmpseham6y2.d(27): Error: template identifier `filter` is not a member of
    variable `tmpseham6y2.by_length.arr`

    /tmp/tmpseham6y2.d(28): Error: undefined identifier `algorithm` in package `std`

    /tmp/tmpseham6y2.d(29): Error: undefined identifier `algorithm` in package `std`

    /tmp/tmpseham6y2.d(33): Error: cannot implicitly convert expression `names[cast(ulong)(num
    - 1)]` of type `const(char)` to `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpseham6y2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = null;\n    int cnt = 0;\n    long[] original = new long[arr.length];\n\
    \    //double[] original_0 = new double[arr.length];\n    //double[] sorted =\
    \ new double[arr.length];\n    //long[] sorted_0 = new long[arr.length];\n   \
    \ //string[] sorted_1 = new string[arr.length];\n    //double[] original_0 = new\
    \ double[arr.length];\n    //double[] sorted = new double[arr.length];\n    string[]\
    \ sorted_1 = new string[arr.length];\n    for (int i = 0; i < arr.length; i++)\n\
    \    {\n        if (arr[i] > 0 && arr[i] < 10)\n        {\n            cnt++;\n\
    \            original[i] = arr[i];\n        }\n    }\n    if (cnt == 0)\n    {\n\
    \        return result;\n    }\n    else\n    {\n        result = new string[cnt];\n\
    \        for (int i = 0; i < cnt; i++)\n        {\n            //sorted[i] = arr[i];\n\
    \            //sorted_0[i] = arr[i];\n            //sorted_1[i] = arr[i];\n  \
    \          sorted_1[i] = to!string(arr[i]);\n        }\n        //sort(sorted_0);\n\
    \        //sort(sorted);\n        sort(sorted_1);\n        //sort(sorted_1);\n\
    \        //std.algorithm.reverse(sorted_0);\n        //std.algorithm.reverse(sorted);\n\
    \        std.algorithm.reverse(sorted_1);\n        //std.algorithm.reverse(sorted_1);\n\
    \        for (int i = 0; i < cnt; i++)\n        {\n            //if (sorted_0[i]\
    \ == 1)\n            //{\n            //    result[i] = \"One\";\n           \
    \ //}\n            //else if (sorted_0[i] == 2)\n            //{\n           \
    \ //    result[i] = \"Two\";\n            //}\n            //else if (sorted_\n\
    unittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L,\
    \ 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb9xzwrpu.d(75): Error: found `unittest` instead of statement

    /tmp/tmpb9xzwrpu.d(85): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpb9xzwrpu.d(85): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb9xzwrpu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{ \n \
    \   auto result = appender!(string[])();\n    foreach(num; arr)\n    {\n     \
    \   if(0 < num < 10)\n        {\n            import std.conv : to;\n         \
    \   result.put(to!string(num));\n        }\n    }\n    result.put(result.data.sort!q{a\
    \ > b});\n    return result.data;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvcaipgel.d(27): Error: found `<` when expecting `)`

    /tmp/tmpvcaipgel.d(27): Error: found `)` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvcaipgel.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  // write your code here\n    ulong[] my_list = \n        arr.map!(\n      \
    \  (x) => {\n            int num = cast(int)x;\n            if(num >= 1 && num\
    \ <= 9) {\n                return cast(ulong)num;\n            } else {\n    \
    \            return ulong.max;\n            }\n        }\n    ).filter!(\n   \
    \     (x) => x != ulong.max\n    ).array();\n    if(my_list.length == 0) {\n \
    \       return new string[0];\n    }\n    int[] sorted_list = my_list.array().sort().array();\n\
    \    Tuple!(string,string,string,string,string,string,string,string,string) numbers\
    \ = tuple(\"One\",\"Two\",\"Three\",\"Four\",\"Five\",\"Six\",\"Seven\",\"Eight\"\
    ,\"Nine\");\n    return sorted_list.map!(\n        (x) => numbers[x-1]\n    ).array().reverse();\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp10efmrp4.d(26): Error: no property `map` for type `long[]`

    /tmp/tmp10efmrp4.d(41): Error: no property `array` for type `ulong[]`

    /tmp/tmp10efmrp4.d(43): Error: no property `map` for type `int[]`

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  auto mapped = arr.filter!(a => a >= 1 && a <= 9).sort.map!(a => \"OneTwoThreeFourFiveSixSevenEightNine\"\
    [a-1..$]).array;\n    mapped.reverse;\n    return mapped;\n}\nunittest\n{\n  \
    \  alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L,\
    \ 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9osdhye7.d(24): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9osdhye7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  // use length to determine the order.\n    enum Name = tuple(int num, string\
    \ name);\n    Name[] names = [ tuple(1, \"One\"), tuple(2, \"Two\"), tuple(3,\
    \ \"Three\"), tuple(4, \"Four\"), tuple(5, \"Five\"), tuple(6, \"Six\"), tuple(7,\
    \ \"Seven\"), tuple(8, \"Eight\"), tuple(9, \"Nine\") ];\n    string[] result\
    \ = arr.filter!(a => (a >= 1 && a <= 9)).sort!(a => a).map!(a => names.filter!(n\
    \ => n.num == a)[0].name).reverse.array;\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa6uxbnbu.d(25): Error: found `num` when expecting `.` following
    int

    /tmp/tmpa6uxbnbu.d(25): Error: found `,` when expecting identifier following `int`.

    /tmp/tmpa6uxbnbu.d(25): Error: found `string` when expecting `,`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa6uxbnbu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{ \n \
    \   const string[] nums = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\"];\n    size_t i;\n    long[] arr2 = new\
    \ long[arr.length];\n    string[] result = new string[arr.length];\n    foreach(i,\
    \ e; arr) {\n        if (e > 0 && e < 10)\n            arr2 ~= e;\n    }\n   \
    \ //arr2 = sort(arr2);\n    arr2 = sort(arr2, (a, b) => b < a);\n    foreach(i,\
    \ e; arr2) {\n        result ~= nums[e - 1];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph078sdj0.d(28): Error: variable `i` is shadowing variable `tmph078sdj0.by_length.i`

    /tmp/tmph078sdj0.d(33): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmph078sdj0.d(34): Error: variable `i` is shadowing variable `tmph078sdj0.by_length.i`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph078sdj0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  // In this function, the number in arr\n    // will be replaced by its English\
    \ name\n    // <18L is the name of this function\n    // \"Eighteen\"\n    string\
    \ replace(long number) = \n    {\n        import std.string : toString;\n    \
    \    string num_str = toString(number);\n        auto fun = [\"Zero\", \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ];\n        foreach(ch; num_str)\n        {\n            if (ch < '0' || ch >\
    \ '9')\n                return \"\";\n            num_str = fun[ch - '0'] ~ num_str[1\
    \ .. $];\n        }\n        return num_str;\n    };\n    // If a number is invalid,\
    \ just ignore it\n    // I will use the filter function\n    // It will filter\
    \ the invalid number out\n    auto arr_clean = arr.filter!(e => e >= 1L && e <=\
    \ 9L);\n    // Don't forget to sort the array\n    // Because the question requires\n\
    \    arr_clean.sort!(a, b => a > b);\n    // Then reverse the array\n    arr_clean.reverse();\n\
    \    // Now we can apply the replace function\n    // to each element of the array\n\
    \    return arr_clean.map!replace.array;\n}\n/*\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbz9icj6m.d(54): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbz9icj6m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  long[] y = arr.filter!(a => a <= 9L && a >= 1L);\n    string[] result = new\
    \ string[y.length];\n    for (int i = 0; i < y.length; i++) \n    {\n        switch(y[i])\
    \ \n        {\n            case 1L:\n                result[i] = \"One\";\n  \
    \              break;\n            case 2L:\n                result[i] = \"Two\"\
    ;\n                break;\n            case 3L:\n                result[i] = \"\
    Three\";\n                break;\n            case 4L:\n                result[i]\
    \ = \"Four\";\n                break;\n            case 5L:\n                result[i]\
    \ = \"Five\";\n                break;\n            case 6L:\n                result[i]\
    \ = \"Six\";\n                break;\n            case 7L:\n                result[i]\
    \ = \"Seven\";\n                break;\n            case 8L:\n               \
    \ result[i] = \"Eight\";\n                break;\n            case 9L:\n     \
    \           result[i] = \"Nine\";\n                break;\n        }\n    }\n\
    \    return result.reverse;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5gerd0xa.d(24): Error: no property `filter` for type `long[]`

    /tmp/tmp5gerd0xa.d(28): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    /tmp/tmp5gerd0xa.d(59): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5gerd0xa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  import std.algorithm;\n    import std.range;\n    import std.string;\n    import\
    \ std.format;\n    import std.conv;\n    auto S = arr.filter!(a => (a > 0 && a\
    \ < 10)).map!(to!string).sort!((a, b) => a.length > b.length).reverse.map!(a =>\
    \ to!string(a.length));\n    return S;\n}\n/*\n    Given a two-dimensional array,\
    \ containing an x and y coordinate in each\n    sub-array, use the x and y coordinate\
    \ to calculate the distance between\n    the two points, and return an array containing\
    \ all points which have a\n    distance less than a given number \"dist\".\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplimkkrr8.d(32): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplimkkrr8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] answer = new string[];\n    foreach(elt; arr)\n    {\n        if(elt\
    \ >= 1 && elt <= 9)\n        {\n            switch(elt)\n            {\n     \
    \           case 1: answer ~= \"One\"; break;\n                case 2: answer\
    \ ~= \"Two\"; break;\n                case 3: answer ~= \"Three\"; break;\n  \
    \              case 4: answer ~= \"Four\"; break;\n                case 5: answer\
    \ ~= \"Five\"; break;\n                case 6: answer ~= \"Six\"; break;\n   \
    \             case 7: answer ~= \"Seven\"; break;\n                case 8: answer\
    \ ~= \"Eight\"; break;\n                case 9: answer ~= \"Nine\"; break;\n \
    \           }\n        }\n    }\n    answer.sort;\n    return answer;\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm3h7h0u9.d(24): Error: new can only create structs, dynamic arrays
    or class objects, not `string[]`''s

    /tmp/tmpm3h7h0u9.d(29): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    /tmp/tmpm3h7h0u9.d(43): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm3h7h0u9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  return arr.sort().reverse()\n        .map!((num) =>\n            num > 0 &&\
    \ num < 10 \n                ? num.to!string\n                : \"\")\n      \
    \  .array.array;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpctfgcugv.d(24): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpctfgcugv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] res;\n    foreach(x; arr) \n    {\n        if (x > 0 && x < 10) \n\
    \        {\n            res ~= x.stringof;\n        }\n    }\n    sort(res);\n\
    \    res = res.reverse;\n    foreach(i, x; res) \n    {\n        res[i] = [\n\
    \            \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"\n        ][to!long(x) - 1];\n    }\n    return res;\n}\n\
    unittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L,\
    \ 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2lzgmupa.d(32): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmp2lzgmupa.d(33): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmp2lzgmupa.d(38): Error: template instance `to!long` template `to` is not
    defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2lzgmupa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  assert (arr.length <= 10);\n    string[] res = new string[0];\n    long[] sorted\
    \ = std.algorithm.sorting.mergeSort(arr);\n    foreach(elem; sorted) \n    {\n\
    \        if (1 <= elem && elem <= 9) \n        {\n            res ~= to!string(elem);\n\
    \        }\n    }\n    res = res.reverse;\n    alias reversemap = Map!(string,\
    \ long, \"One\": 1L, \"Two\": 2L, \"Three\": 3L, \"Four\": 4L, \"Five\": 5L, \"\
    Six\": 6L, \"Seven\": 7L, \"Eight\": 8L, \"Nine\": 9L);\n    foreach(i, elem;\
    \ res) \n    {\n        res[i] = reversemap[elem];\n    }\n    return res;\n}\n\
    /*\n    Write a function that returns the power set of the input set. The power\
    \ set is the set of all subsets.\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn271gxqd.d(35): Error: found `:` when expecting `)` following template
    argument list

    /tmp/tmpn271gxqd.d(35): Error: semicolon expected to close `alias` declaration

    /tmp/tmpn271gxqd.d(35): Error: found `:` when expecting `;` following statement

    /tmp/tmpn271gxqd.d(35): Error: found `:` when expecting `;` following statement

    /tmp/tmpn271gxqd.d(35): Error: found `:` when expecting `;` following statement

    /tmp/tmpn271gxqd.d(35): Error: found `:` when expecting `;` following statement

    /tmp/tmpn271gxqd.d(35): Error: found `:` when expecting `;` following statement

    /tmp/tmpn271gxqd.d(35): Error: found `:` when expecting `;` following statement

    /tmp/tmpn271gxqd.d(35): Error: found `:` when expecting `;` following statement

    /tmp/tmpn271gxqd.d(35): Error: found `:` when expecting `;` following statement

    /tmp/tmpn271gxqd.d(35): Error: found `)` when expecting `;` following statement

    /tmp/tmpn271gxqd.d(35): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmpn271gxqd.d(42): Error: unterminated /* */ com'
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] res = [];\n    bool[] included = false;\n    foreach(a; arr) \n  \
    \  {\n        if(a >= 1 && a <= 9) \n        {\n            res ~= to!string(a);\n\
    \            included[a - 1] = true;\n        }\n    }\n    sort(res);\n    res.reverse;\n\
    \    replace(res, 1, \"One\");\n    replace(res, 2, \"Two\");\n    replace(res,\
    \ 3, \"Three\");\n    replace(res, 4, \"Four\");\n    replace(res, 5, \"Five\"\
    );\n    replace(res, 6, \"Six\");\n    replace(res, 7, \"Seven\");\n    replace(res,\
    \ 8, \"Eight\");\n    replace(res, 9, \"Nine\");\n    return res;\n}\n \n/*\n\
    \    You're given a string of the form \"X+Y=Z\".\n    Return a tuple that contains\
    \ X, Y, and Z, with appropriate types.\n    If the string is of the wrong form,\
    \ throw an exception.\n    \n    For example:\n    >>> parseSum(\"2+3=5\")\n \
    \   (2, 3, 5)\n    \n      If the string is of the wrong form, throw an exception:\n\
    \    >>> parseSum(\"2+3=5+7\")\n    Exception\n    >>> parseSum(\"2+3=7=8\")\n\
    \    Exception\n    >>> parseSum(\"2+3=7 \")\n    Exception\n    \n*/\ntuple!(long,\
    \ long, long) parseSum(string s) \n{\n    string[] xyz = split(s, \"+\");\n  \
    \  if(xyz.length != 2)\n        throw new Exception(\"Exception\");\n    string[]\
    \ zx = split(xyz[1], \"=\");\n    if(zx.length != 2)\n        throw new Exception(\"\
    Exception\");\n    return tuple(to!long(xyz[0]), to!long(zx[0]), to!long(zx[1]));\n\
    }\n \n/*\n    You're given a string of the form \"X+Y=Z\",\n    where X, Y, and\
    \ Z are either a single digit or the word \"Double\".\n    Return a tuple that\n\
    unittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L,\
    \ 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi4hjpyx7.d(77): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi4hjpyx7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  return arr.filter!(isInRange(1L, 9L)).sort.reverse.map!num2string;\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiddcoqid.d(24): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiddcoqid.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  int\
    \ number_names_index = 0;\n  string[] number_names = [\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  long[] arr_filtered;\n\
    \  string[] arr_reverse;\n  string[] arr_name = new string[arr.length];\n  long[]\
    \ new_arr;\n  long[] temp_arr;\n  long[] temp_arr2;\n  long[] temp_arr3;\n  int\
    \ i = 0;\n  int j = 0;\n  int k = 0;\n  int m = 0;\n  int i_filter = 0;\n  int\
    \ i_reverse = 0;\n  int i_name = 0;\n  long temp = 0;\n  long temp2 = 0;\n  long\
    \ temp3 = 0;\n  long temp4 = 0;\n  long temp5 = 0;\n  long temp6 = 0;\n  long\
    \ temp7 = 0;\n  long temp8 = 0;\n  long temp9 = 0;\n  long temp10 = 0;\n  long\
    \ temp11 = 0;\n  long temp12 = 0;\n  long temp13 = 0;\n  long temp14 = 0;\n  long\
    \ temp15 = 0;\n  long temp16 = 0;\n  long temp17 = 0;\n  long temp18 = 0;\n  long\
    \ temp19 = 0;\n  long temp20 = 0;\n  long temp21 = 0;\n  long temp22 = 0;\n  long\
    \ temp23 = 0;\n  long temp24 = 0;\n  long temp25 = 0;\n  long temp26 = 0;\n  long\
    \ temp27 = 0;\n  long temp28 = 0;\n  long temp29 = 0;\n  long temp30 = 0;\n  long\
    \ temp31 = 0;\n  long temp32 = 0;\n  long temp33 = 0;\n  long temp34 = 0;\n  long\
    \ temp35 = 0;\n  long temp36 = 0;\n  long temp37 = 0;\n  long temp38 = 0;\n  long\
    \ temp39 = 0;\n  long temp40 = 0;\n  long temp41 = 0;\n  long temp42 = 0;\n  long\
    \ temp43 = 0\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1veek771.d(83): Error: semicolon expected, not `unittest`

    /tmp/tmp1veek771.d(83): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1veek771.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  long[][] work = [arr.dup];\n    auto sorted = work[0].sort!((a, b) => (a <\
    \ b));\n    auto reversed = sorted.reverse;\n    string[] result = [];\n    foreach\
    \ (n; reversed)\n    {\n        result ~= n == 1 ? \"One\" :\n               \
    \  n == 2 ? \"Two\" :\n                 n == 3 ? \"Three\" :\n               \
    \  n == 4 ? \"Four\" :\n                 n == 5 ? \"Five\" :\n               \
    \  n == 6 ? \"Six\" :\n                 n == 7 ? \"Seven\" :\n               \
    \  n == 8 ? \"Eight\" :\n                 n == 9 ? \"Nine\" : \"\";\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp78ly23lp.d(25): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp78ly23lp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  // PUT YOUR CODE HERE\n    //    real[] arr2 = arr.map!(x => to!real(x)).filter!(x\
    \ => x > 0 && x < 10).sort.reverse;\n    //    return arr2.map!(x => to!string(x));\n\
    \    int[] arr2 = arr.filter!(x => x > 0 && x < 10).sort.reverse;\n    return\
    \ arr2.map!(x => to!string(x));\n    /*\n    return arr.filter!(x => x > 0 &&\
    \ x < 10).sort.reverse.map!(x => to!string(x));\n    */\n}\nunittest\n{\n    alias\
    \ candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L,\
    \ 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L,\
    \ 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpijdz9fy_.d(27): Error: no property `filter` for type `long[]`

    /tmp/tmpijdz9fy_.d(28): Error: no property `map` for type `int[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpijdz9fy_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[long] map = [\n    1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\"\
    , 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"\n    ];\n \
    \   long[] filter_arr = filter!(a => a > 0 && a < 10)(arr);\n    sort(filter_arr);\n\
    \    reverse(filter_arr);\n    return map.values(filter_arr);\n}\n \n/*\n    Given\
    \ a number, return a string in the following form:\n    \"number is odd\", if\
    \ the number is odd,\n    \"number is even\", if the number is even,\n    \"number\
    \ is prime\", if the number is prime,\n    \"number is composite\", if the number\
    \ is composite,\n    \"number is perfect\", if the number is perfect,\n    \"\
    number is deficient\", if the number is deficient.\n    \n    If the number is\
    \ not positive, return \"Input should be positive number\".\n    \n    For example:\n\
    \    >>> is_perfect(28L)\n    \"28 is perfect\"\n    \n      The 1 is neither\
    \ prime nor composite, but all the other options are true:\n    >>> is_perfect(1L)\n\
    \    \"1 is deficient\"\n    \n      Zero is not positive:\n    >>> is_perfect(0L)\n\
    \    \"Input should be positive number\"\n    \n      Negative numbers are not\
    \ positive:\n    >>> is_perfect(-28L)\n    \"Input should be positive number\"\
    \n*/\nstring is_perfect(long n) \n{\n    import std.algorithm.comparison : equal;\n\
    \    import std.math : isPrime, isPerfect;\n    if (n <= 0) \n    {\n        return\
    \ \"Input should be positive number\";\n    }\n    if (n.isEven) \n    {\n   \
    \     return format(\"%s is even\", n);\n    }\n    if (n.isOdd) \n    {\n   \
    \     return format(\"%s is odd\", n);\n    }\n    if (n.isPrime) \n    {\n  \
    \      return format(\"%s is prime\", n);\n    }\n    if (n.isPerfect) \n    {\n\
    \       \nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph99zwp2b.d(83): Error: found `unittest` instead of statement

    /tmp/tmph99zwp2b.d(93): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph99zwp2b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  assert(arr.length >= 0);\n    int len = 0;\n    foreach(e; arr)\n    {\n  \
    \      if (e >= 1 && e <= 9)\n            len++;\n    }\n    string[] ret = new\
    \ string[len];\n    int i = 0;\n    foreach(e; arr)\n    {\n        if (e >= 1\
    \ && e <= 9)\n        {\n            string s = to!string(e);\n            ret[i]\
    \ = s;\n            i++;\n        }\n    }\n    ret.sort();\n    reverse(ret);\n\
    \    return ret;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdvj61wuj.d(37): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpdvj61wuj.d(42): Error: no property `sort` for type `string[]`

    /tmp/tmpdvj61wuj.d(43): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdvj61wuj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  string[]\
    \ result;\n  foreach(l; arr)\n  {\n    if(l > 0 && l < 10)\n    {\n      switch(l)\n\
    \      {\n        case 1:\n          result ~= \"One\";\n          break;\n  \
    \      case 2:\n          result ~= \"Two\";\n          break;\n        case 3:\n\
    \          result ~= \"Three\";\n          break;\n        case 4:\n         \
    \ result ~= \"Four\";\n          break;\n        case 5:\n          result ~=\
    \ \"Five\";\n          break;\n        case 6:\n          result ~= \"Six\";\n\
    \          break;\n        case 7:\n          result ~= \"Seven\";\n         \
    \ break;\n        case 8:\n          result ~= \"Eight\";\n          break;\n\
    \        case 9:\n          result ~= \"Nine\";\n          break;\n      }\n \
    \   }\n  }\n  return result.reverse;\n}\n \nunittest\n{\n    alias candidate =\
    \ by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzr48vy0i.d(29): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    /tmp/tmpzr48vy0i.d(61): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzr48vy0i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  \n    bool[9] found = void;\n    foreach(e; arr)\n    {\n        if(e < 1 ||\
    \ e > 9) continue;\n        found[e - 1] = true;\n    }\n    \n    arr.sort(a,\
    \ b => a - b).reversed.map!(a => a.stringof);\n    string[] ret = found.map!(a\
    \ => a ? \"One\" : \"\").array;\n    return ret;\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppqqhiqzy.d(32): Error: no property `sort` for type `long[]`

    /tmp/tmppqqhiqzy.d(33): Error: no property `map` for type `bool[9]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppqqhiqzy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  if (arr.length == 0)\n    {\n        return arr;\n    }\n    else\n    {\n\
    \        int[] filtered = arr.filter!(x => x > 0 && x < 10).array;\n        int[]\
    \ reversed = filtered.reverse.array;\n        string[] output = new string[reversed.length];\n\
    \        foreach(i, item; reversed)\n        {\n            output[i] = to!string(item);\n\
    \        }\n        return output;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf544mqip.d(30): Error: no property `filter` for type `long[]`

    /tmp/tmpf544mqip.d(31): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(int[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmpf544mqip.d(35): Error: template instance `to!string` template `to` is
    not defined, did you mean No?

    /tmp/tmpf544mqip.d(26): Error: cannot implicitly convert expression `arr` of type
    `long[]` to `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf544mqip.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] r = new string[arr.length];\n    int i = 0;\n    foreach(immutable\
    \ long n;arr)\n    {\n        if(n<1||n>9) continue;\n        r[i++] = to!string(n);\n\
    \    }\n    std.algorithm.sort(r);\n    r = r.retro;\n    auto dic = [\"One\"\
    ,\"Two\",\"Three\",\"Four\",\"Five\",\"Six\",\"Seven\",\"Eight\",\"Nine\"];\n\
    \    foreach(i,ref s;r)\n    {\n        s = dic[to!int(s)-1];\n    }\n    return\
    \ r;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpirzr7zih.d(29): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpirzr7zih.d(31): Error: undefined identifier `algorithm` in package `std`

    /tmp/tmpirzr7zih.d(32): Error: no property `retro` for type `string[]`

    /tmp/tmpirzr7zih.d(34): Error: variable `i` is shadowing variable `tmpirzr7zih.by_length.i`

    /tmp/tmpirzr7zih.d(36): Error: template instance `to!int` template `to` is not
    defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpirzr7zih.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] r = [ \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\" ];\n    auto temp = arr.filter!(a => a > 0 && a <\
    \ 10)().sort();\n    temp = temp.array();\n    temp = temp.array();\n    temp\
    \ = temp.array();\n    temp = temp.array();\n    temp = temp.array();\n    temp\
    \ = temp.array();\n    temp = temp.array();\n    temp = temp.array();\n    temp\
    \ = temp.array();\n    temp = temp.array();\n    temp = temp.array();\n    temp\
    \ = temp.array();\n    temp = temp.array();\n    temp = temp.array();\n    temp\
    \ = temp.array();\n    temp = temp.array();\n    temp = temp.array();\n    temp\
    \ = temp.array();\n    temp = temp.array();\n    temp = temp.array();\n    temp\
    \ = temp.array();\n    temp = temp.array();\n    temp = temp.array();\n    temp\
    \ = temp.array();\n    temp = temp.array();\n    temp = temp.array();\n    temp\
    \ = temp.array();\n    temp = temp.array();\n    temp = temp.array();\n    temp\
    \ = temp.array();\n    temp = temp.array();\n    temp = temp.array();\n    temp\
    \ = temp.array();\n    temp = temp.array();\n    temp = temp.array();\n    temp\
    \ = temp.array();\n    temp = temp.array();\n    temp = temp.array();\n    temp\
    \ = temp.array();\n    temp = temp.array();\n    temp = temp.array();\n    temp\
    \ = temp.array();\n    temp = temp.array();\n    temp = temp.array();\n    temp\
    \ = temp.array();\n    temp = temp.array();\n    temp = temp.array();\n    temp\
    \ = temp.array();\n    temp = temp.array();\n    temp = temp.array();\n    temp\
    \ = temp.array();\n    temp = temp.array();\n    temp = temp.array();\n    temp\
    \ = temp.array();\n    temp = temp.array();\n    temp = temp.array();\n    temp\
    \ =\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdtwcr08v.d(83): Error: expression expected, not `unittest`

    /tmp/tmpdtwcr08v.d(84): Error: found `{` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdtwcr08v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  auto\
    \ unique = arr.filter!(x => x > 0 && x < 10).array.unique.sort;\n  unique = unique.reversed;\n\
    \  return unique.map!(a => [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\"][a - 1L]);\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkj6yxq8c.d(24): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkj6yxq8c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[string] hash = [\"One\": \"1\", \"Two\": \"2\", \"Three\": \"3\", \"\
    Four\": \"4\", \"Five\": \"5\", \"Six\": \"6\", \"Seven\": \"7\", \"Eight\": \"\
    8\", \"Nine\": \"9\"];\n    string[] nnumbers = [\"Nine\", \"Eight\", \"Seven\"\
    , \"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\"];\n    string[] result\
    \ = [];\n    result = arr.sort().map!((x) => hash[nnumbers[x - 1]]).array;\n \
    \   return result.sort.reverse;\n}\n```\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb25cnfi5.d(30): Error: declaration expected, not `""`

    /tmp/tmpb25cnfi5.d(30): Error: unterminated string constant starting at /tmp/tmpb25cnfi5.d(30)

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb25cnfi5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  long[] sorted = arr.dup.sort.array;\n    long[] nums = sorted.filter!(a =>\
    \ a.between(1L, 9L));\n    string[] numsString = nums.map!(x => \"OneTwoThreeFourFiveSixSevenEightNine\"\
    [x-1..x]).array;\n    return numsString.reverse.array;\n}\nunittest\n{\n    alias\
    \ candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L,\
    \ 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L,\
    \ 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp22xclahj.d(24): Error: no property `sort` for type `long[]`

    /tmp/tmp22xclahj.d(25): Error: no property `filter` for type `long[]`

    /tmp/tmp22xclahj.d(26): Error: no property `map` for type `long[]`

    /tmp/tmp22xclahj.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp22xclahj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  return arr.sort().reverse().filter!(a => a>0 && a<10).map!(a => \"One Two Three\
    \ Four Five Six Seven Eight Nine\"[(a-1)*5..(a*5-1)]).array;\n}\nunittest\n{\n\
    \    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppt8_30c8.d(24): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppt8_30c8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  // insert into ret[] the words for each 1,2,3,4,5,6,7,8,9 in this order\n \
    \   string[] ret = [];\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgwovnofe.d(26): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgwovnofe.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = [];\n    int[] arr_int = cast(int[]) arr;\n    arr_int =\
    \ arr_int.sort().reverse();\n    foreach(int i; arr_int)\n    {\n        switch(i)\n\
    \        {\n            case 1:\n                result ~= \"One\";\n        \
    \        break;\n            case 2:\n                result ~= \"Two\";\n   \
    \             break;\n            case 3:\n                result ~= \"Three\"\
    ;\n                break;\n            case 4:\n                result ~= \"Four\"\
    ;\n                break;\n            case 5:\n                result ~= \"Five\"\
    ;\n                break;\n            case 6:\n                result ~= \"Six\"\
    ;\n                break;\n            case 7:\n                result ~= \"Seven\"\
    ;\n                break;\n            case 8:\n                result ~= \"Eight\"\
    ;\n                break;\n            case 9:\n                result ~= \"Nine\"\
    ;\n                break;\n        }\n    }\n    return result;\n}\n \n/*\n  \
    \  Given an array of integers between 0 and 9 inclusive, add a random number between\
    \ 0 and 9 inclusive\n    to the end of the array.\n    If the array is empty,\
    \ add a single random number between 0 and 9 inclusive.\n    \n    For example:\n\
    \    >>> random_number([2L, 3L, 5L])\n    [2L, 3L, 5L, 4L]\n    >>> random_number([])\n\
    \    [8L]\n*/\nlong[] random_number(long[] arr)\n{\n    import std.random;\n \
    \   arr ~= uniform(0L, 9L);\n    return arr;\n}\n \n/*\n    You will be given\
    \ a string and a dictionary of words. \n    The dictionary will contain words\
    \ of different lengths. \n    You need to find the longest word in the dictionary\
    \ which can be made out of \n    the letters contained in the string. \n    If\
    \ no such word can be found, return an empty string. \n    The letters contained\
    \ in the word you return should be all lowercase.\n    If there are two or more\
    \ words of the same length, return the first word from the dictionary.\n    \n\
    \    For example:\n    >>> longest_word(\"abcdefg\", [\"abc\", \"\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxbmpzcpw.d(81): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxbmpzcpw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  auto arr2 = arr.filter!(e => (e > 0 && e < 10)).sort;\n    auto numbers = new\
    \ string[arr2.length];\n    int i = 0;\n    foreach(e; arr2)\n    {\n        numbers[i]\
    \ = e.to!string;\n        i++;\n    }\n    return numbers.reverse;\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6nf0s4j9.d(24): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6nf0s4j9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164432
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] copy = new string[10];\n    copy[1] = \"One\";\n    copy[2] = \"Two\"\
    ;\n    copy[3] = \"Three\";\n    copy[4] = \"Four\";\n    copy[5] = \"Five\";\n\
    \    copy[6] = \"Six\";\n    copy[7] = \"Seven\";\n    copy[8] = \"Eight\";\n\
    \    copy[9] = \"Nine\";\n    string[] ans = new string[arr.length];\n    sort(arr);\n\
    \    foreach(i; 0..arr.length)\n    {\n        foreach(key; 1..10)\n        {\n\
    \            if(arr[i] == key)\n            {\n                ans[i] = copy[key];\n\
    \            }\n        }\n    }\n    reverse(ans);\n    return ans;\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp912h5g9.d(35): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpp912h5g9.d(46): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp912h5g9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  auto integers = arr.filter!(a => a > 0 && a < 10).sort().reverse();\n    return\
    \ integers.map!(a => [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\"][a-1]);\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp45_ro20o.d(24): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp45_ro20o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164432
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  //\
    \ Check for empty array\n  if (arr.length == 0)\n    return arr;\n  \n  // Sort\
    \ numbers\n  arr.sort();\n  \n  // Convert numbers to corresponding words\n  string[]\
    \ res = new string[arr.length];\n  string[] words = [\"\", \"One\", \"Two\", \"\
    Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  foreach\
    \ (index, item; arr)\n  {\n    if (item >= 1 && item <= 9)\n      res[index] =\
    \ words[item];\n  }\n  \n  // Reverse words\n  res.reverse;\n  \n  return res;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd4dj_gs5.d(29): Error: no property `sort` for type `long[]`

    /tmp/tmpd4dj_gs5.d(41): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmpd4dj_gs5.d(26): Error: cannot implicitly convert expression `arr` of type
    `long[]` to `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd4dj_gs5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164432
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] nums = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\",\
    \ \"Seven\", \"Eight\", \"Nine\"};\n    auto arr_result = arr.filter!(a => a <\
    \ 10 && a > 0).array;\n    std.algorithm.sort(arr_result);\n    std.algorithm.reverse(arr_result);\n\
    \    return arr_result.map!(n => nums[n - 1]);\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuqcp2krv.d(24): Error: a struct is not a valid initializer for
    a `string[]`

    /tmp/tmpuqcp2krv.d(25): Error: no property `filter` for type `long[]`

    /tmp/tmpuqcp2krv.d(26): Error: undefined identifier `algorithm` in package `std`

    /tmp/tmpuqcp2krv.d(27): Error: undefined identifier `algorithm` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuqcp2krv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164432
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  import std.algorithm;\n    import std.array;\n    int[] nums = arr.filter!(\
    \ a => (a >= 1) && (a <= 9) ).sort!( \"a > b\" ).reverse.array;\n    return nums.map!(\
    \ a => [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"\
    Eight\", \"Nine\"][a - 1] ).array;\n}\n/*\n      If the array is empty, return\
    \ an empty array:\n    >>> by_length([])\n    []\n*/\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0zfe7y0u.d(26): Error: template `std.algorithm.sorting.sort` cannot
    deduce function from argument types `!("a > b")(FilterResult!(__lambda2, long[]))`,
    candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/algorithm/sorting.d(1847):        `std.algorithm.sorting.sort(alias
    less = "a < b", SwapStrategy ss = SwapStrategy.unstable, Range)(Range r) if ((ss
    == SwapStrategy.unstable && (hasSwappableElements!Range || hasAssignableElements!Range)
    || ss != SwapStrategy.unstable && hasAssignableElements!Range) && isRandomAccessRange!Range
    && hasSlicing!Range && hasLength!Range)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0zfe7y0u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164432
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  auto tmp = arr\n                .filter!(a => a>0 && a<10)\n              \
    \  .sort\n                .reverse;\n    return tmp.map!(toString);\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplaoyhtot.d(25): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplaoyhtot.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  arr.sort;\n    arr.reverse;\n    string[] result;\n    foreach(a; arr)\n  \
    \  {\n        if(a == 1)\n        {\n            result ~= \"One\";\n        }\n\
    \        else if(a == 2)\n        {\n            result ~= \"Two\";\n        }\n\
    \        else if(a == 3)\n        {\n            result ~= \"Three\";\n      \
    \  }\n        else if(a == 4)\n        {\n            result ~= \"Four\";\n  \
    \      }\n        else if(a == 5)\n        {\n            result ~= \"Five\";\n\
    \        }\n        else if(a == 6)\n        {\n            result ~= \"Six\"\
    ;\n        }\n        else if(a == 7)\n        {\n            result ~= \"Seven\"\
    ;\n        }\n        else if(a == 8)\n        {\n            result ~= \"Eight\"\
    ;\n        }\n        else if(a == 9)\n        {\n            result ~= \"Nine\"\
    ;\n        }\n        else\n        {\n            continue;\n        }\n    }\n\
    \    return result;\n}\n/*\nunittest\n{\n    alias candidate = by_length;\n\n\
    \    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9at_st1j.d(72): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9at_st1j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  // write your code here\n    return arr.filter!(i => i > 0 && i < 10).sort.reverse.map!(i\
    \ => [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"\
    Eight\", \"Nine\"][i - 1]).array;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmb973rqq.d(25): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmb973rqq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  return\
    \ arr.filter!(a => a > 0 && a < 10)\n    .sort!(a => a)\n    .reverse\n    .map!(a\
    \ => [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"\
    Eight\", \"Nine\"][a - 1]);\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0h6fvo9s.d(24): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0h6fvo9s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164432
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \   if (arr.length == 0)\n     {\n          return arr;\n     }\n     \n     auto\
    \ list =  arr.filter!(i => i > 0 && i < 10).sort().map!(i => (i, string(i))).sort!((a,\
    \ b) => a[0] > b[0]).map!(x => x[1]).array();\n     return list;\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpte6i9kvo.d(29): Error: no property `filter` for type `long[]`

    /tmp/tmpte6i9kvo.d(26): Error: cannot implicitly convert expression `arr` of type
    `long[]` to `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpte6i9kvo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  alias numbers = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\"];\n    alias numbers_tuple = tuple(numbers);\n\
    \    return arr.filter!(x => x > 0 && x < 10).sort.map!(x => numbers_tuple[x]).reverse;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkhw2r2bw.d(24): Error: basic type expected, not `[`

    /tmp/tmpkhw2r2bw.d(24): Error: found `,` when expecting `]`

    /tmp/tmpkhw2r2bw.d(24): Error: semicolon expected to close `alias` declaration

    /tmp/tmpkhw2r2bw.d(24): Error: found `]` when expecting `;` following statement

    /tmp/tmpkhw2r2bw.d(24): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmpkhw2r2bw.d(25): Error: function declaration without return type. (Note
    that constructors are always named `this`)

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkhw2r2bw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  return typeof(by_length).parameters;\n}\nunittest\n{\n    alias candidate =\
    \ by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt7suso9d.d(24): Error: no property `parameters` for type `string[](long[]
    arr)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt7suso9d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164432
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \ \n    string[] result;\n    string[] numbers = [\n        \"One\", \"Two\",\
    \ \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\n   \
    \ ];\n    if (arr.length != 0)\n    {\n        // sorts arr;\n        sort(arr);\n\
    \        // reverses arr\n        arr = arr.dup.reverse;\n        // removes any\
    \ out of range integer\n        for (int i = 0; i < arr.length; i++)\n       \
    \ {\n            if (arr[i] > 9 || arr[i] < 1)\n            {\n              \
    \  arr.remove(i);\n            }\n        }\n        result = new string[arr.length];\n\
    \        // replaces all integers with their respective names\n        for (int\
    \ i = 0; i < arr.length; i++)\n        {\n            result[i] = numbers[cast(int)arr[i]\
    \ - 1];\n        }\n    }\n    else\n    {\n        result = [];\n    }\n    return\
    \ result;\n}\n/*\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa8vbt96q.d(56): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa8vbt96q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  if (arr.length == 0)\n    {\n        return [];\n    }\n    auto sorted_arr\
    \ = arr.sort();\n    auto result = [];\n    foreach (val; sorted_arr)\n    {\n\
    \        if (val >= 1 && val <= 9)\n        {\n            int index = val - 1;\n\
    \            result ~= [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\"][index];\n        }\n    }\n    return result.reverse;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4odvvidv.d(28): Error: no property `sort` for type `long[]`

    /tmp/tmp4odvvidv.d(38): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(void[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4odvvidv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164432
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] to_return = null;\n    auto x = arr.filter!(a => a >= 1 && a <= 9);\n\
    \    x.sort();\n    to_return = x.map!(to_number).reverse.map!(to_name);\n   \
    \ return to_return;\n}\nlong to_number(long x) \n{\n    return x;\n}\nstring to_name(long\
    \ number) \n{\n    string to_return = \"\";\n    switch (number) \n    {\n   \
    \     case 1:\n            to_return = \"One\";\n            break;\n        case\
    \ 2:\n            to_return = \"Two\";\n            break;\n        case 3:\n\
    \            to_return = \"Three\";\n            break;\n        case 4:\n   \
    \         to_return = \"Four\";\n            break;\n        case 5:\n       \
    \     to_return = \"Five\";\n            break;\n        case 6:\n           \
    \ to_return = \"Six\";\n            break;\n        case 7:\n            to_return\
    \ = \"Seven\";\n            break;\n        case 8:\n            to_return = \"\
    Eight\";\n            break;\n        case 9:\n            to_return = \"Nine\"\
    ;\n            break;\n    }\n    return to_return;\n}\nstring[] by_length(long[]\
    \ arr)\n{\n    long[][] buckets = new long[9][];\n    foreach (idx, n; arr) {\n\
    \        if (n > 0 && n <= 9) {\n            buckets[n - 1].push(n);\n       \
    \ }\n    }\n    string[] result = [];\n    foreach (bucket; buckets) {\n     \
    \   result ~= bucket.map!(x => \"One Two Three Four Five Six Seven Eight Nine\"\
    [2 * x - 2 .. 2 * x]);\n    }\n    return result.join;\n}\nstring[] by_length(long[]\
    \ arr)\n{\n    import std.algorithm : count;\n    string[] result = [];\n    foreach\
    \ (n; 1 .. 10) {\n        auto c = arr.count(n);\n        if (c > 0) {\n     \
    \       result ~= repeat(\"One Two Three Four Five Six Seven Eight Nine\"[2 *\
    \ n -\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5go65d__.d(91): Error: expression expected, not `unittest`

    /tmp/tmp5go65d__.d(92): Error: found `{` when expecting `,`

    /tmp/tmp5go65d__.d(93): Error: expression expected, not `alias`

    /tmp/tmp5go65d__.d(93): Error: found `candidate` when expecting `,`

    /tmp/tmp5go65d__.d(93): Error: expression expected, not `=`

    /tmp/tmp5go65d__.d(93): Error: found `by_length` when expecting `,`

    /tmp/tmp5go65d__.d(93): Error: expression expected, not `;`

    /tmp/tmp5go65d__.d(95): Error: found `assert` when expecting `,`

    /tmp/tmp5go65d__.d(95): Error: found `;` when expecting `,`

    /tmp/tmp5go65d__.d(96): Error: found `;` when expecting `,`

    /tmp/tmp5go65d__.d(97): Error: found `;` when expecting `,`

    /tmp/tmp5go65d__.d(98): Error: found `;` when expecting `,`

    /tmp/tmp5go65d__.d(99): Error: found `;` when expecting `,`

    /tmp/tmp5go65d__.d(100): Error: expression expected, not `}`

    /tmp/tmp5go65d__.d(101): Error: found `void` when expecting `,`

    /tmp/tmp5go65d__.d(101): Error: found `{` when expecting `,`

    /tmp/tmp5go65d__.d(101): E'
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{ \n \
    \   long[][] res = new long[9][];\n    foreach(var i; arr)\n    {\n        if(i\
    \ > 0 && i < 10)\n        {\n            res[i-1] ~= i;\n        }\n    }\n  \
    \  foreach(i,e; res)\n    {\n        e.sort();\n    }\n    res.reverse();\n  \
    \  string[] temp = new string[0];\n    foreach(i,e; res)\n    {\n        foreach(var\
    \ k; e)\n        {\n            temp ~= to!string(i+1);\n        }\n    }\n  \
    \  return temp;\n}\n \n void main()\n {\n     writeln(by_length([2L, 1L, 1L, 4L,\
    \ 5L, 8L, 2L, 3L]));\n     writeln(by_length([]));\n     writeln(by_length([1L,\
    \ -1L, 55L]));\n }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp83_rn4b2.d(24): Error: new can only create structs, dynamic arrays
    or class objects, not `long[9][]`''s

    /tmp/tmp83_rn4b2.d(25): Error: undefined identifier `var`

    /tmp/tmp83_rn4b2.d(34): Error: no property `sort` for type `long[]`

    /tmp/tmp83_rn4b2.d(36): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(long[][])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmp83_rn4b2.d(40): Error: undefined identifier `var`

    /tmp/tmp83_rn4b2.d(42): Error: template instance `to!string` template `to` is
    not defined, did you mean No?

    /tmp/tmp83_rn4b2.d(50): Error: `writeln` is not defined, perhaps `import std.stdio;`
    is needed?

    /tmp/tmp83_rn4b2.d(51): Error: `writeln` is not defined, perhaps `import std.stdio;`
    is needed?

    /tmp/tmp83_rn4b2.d(52): Error: `writeln` is not defined, perhaps `import s'
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  //\n    // 1) Sort the array\n    // 2) Reverse the array\n    // 3) Convert\
    \ the array to a string array\n    // 4) Return the string array\n    //\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphwt8lb7z.d(30): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphwt8lb7z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  enum Digits = \"One Two Three Four Five Six Seven Eight Nine\";\n    auto result\
    \ = Digits.split;\n    result.sort!((a, b) => a.length > b.length);\n    result.reverse;\n\
    \    auto dict = result.assocArray;\n    return arr.retro.map!(e => (dict.byKey.get(e)\
    \ ?? \"\").idup).filter!(a => a.length).array;\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2vq_v7hf.d(29): Error: expression expected, not `?`

    /tmp/tmp2vq_v7hf.d(29): Error: found `""` when expecting `:`

    /tmp/tmp2vq_v7hf.d(29): Error: expression expected, not `)`

    /tmp/tmp2vq_v7hf.d(29): Error: found `;` when expecting `)` following template
    argument list

    /tmp/tmp2vq_v7hf.d(30): Error: found `}` when expecting `;` following `return`
    statement

    /tmp/tmp2vq_v7hf.d(31): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2vq_v7hf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164431
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  //\
    \ TODO: Implement\n  return array();\n}\n/*\n    Given an array of arrays of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphrafatoy.d(27): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphrafatoy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164432
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  return arr.filter!(a => 1 <= a && a <= 9).sort().reverse().map!(a => [\n  \
    \      \"One\",\n        \"Two\",\n        \"Three\",\n        \"Four\",\n   \
    \     \"Five\",\n        \"Six\",\n        \"Seven\",\n        \"Eight\",\n  \
    \      \"Nine\"\n    ][a - 1]);\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr2mzn6k7.d(24): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr2mzn6k7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164432
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  if (arr.length == 0) \n    {\n        return arr;\n    }\n    long[] nums =\
    \ arr.filter!(a => a > 0 && a < 10)();\n    immutable ints = [1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9];\n    immutable strings = [\"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    return nums.sort().reverse().map!(a\
    \ => strings[a - 1])();\n}\nunittest\n{\n    alias candidate = by_length;\n\n\
    \    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2hjaxgq0.d(28): Error: no property `filter` for type `long[]`

    /tmp/tmp2hjaxgq0.d(31): Error: no property `sort` for type `long[]`

    /tmp/tmp2hjaxgq0.d(26): Error: cannot implicitly convert expression `arr` of type
    `long[]` to `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2hjaxgq0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164432
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  return arr.\n        filter!(x => x > 0 && x < 10).\n        sort!(x => x).\n\
    \        reverse.\n        map!(to!string).\n        map!(x => [\"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][to!int(x)-1]).\n\
    \        array;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt97tvhiw.d(24): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt97tvhiw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164432
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  arr = arr.filter!(a => (1 <= a && a <= 9)).array;\n    string[] strings = new\
    \ string[arr.length];\n    int i = 0;\n    foreach(e; arr)\n    {\n        switch(e)\n\
    \        {\n            case 1: strings[i] = \"One\"; break;\n            case\
    \ 2: strings[i] = \"Two\"; break;\n            case 3: strings[i] = \"Three\"\
    ; break;\n            case 4: strings[i] = \"Four\"; break;\n            case\
    \ 5: strings[i] = \"Five\"; break;\n            case 6: strings[i] = \"Six\";\
    \ break;\n            case 7: strings[i] = \"Seven\"; break;\n            case\
    \ 8: strings[i] = \"Eight\"; break;\n            case 9: strings[i] = \"Nine\"\
    ; break;\n        }\n        i++;\n    }\n    return strings.reverse;\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl0pinfz0.d(24): Error: no property `filter` for type `long[]`

    /tmp/tmpl0pinfz0.d(29): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    /tmp/tmpl0pinfz0.d(43): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl0pinfz0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164432
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result;\n    long[] t = [];\n    int size = arr.length;\n    int i\
    \ = 0;\n    int j = 0;\n    while(i < size)\n    {\n        if(arr[i] >= 1 &&\
    \ arr[i] <= 9)\n        {\n            t ~= arr[i];\n        }\n        i++;\n\
    \    }\n    t.sort();\n    result = t.map!(a => to!string(a));\n    while(j <\
    \ result.length)\n    {\n        if(result[j] == \"1\")\n        {\n         \
    \   result[j] = \"One\";\n        }\n        else if(result[j] == \"2\")\n   \
    \     {\n            result[j] = \"Two\";\n        }\n        else if(result[j]\
    \ == \"3\")\n        {\n            result[j] = \"Three\";\n        }\n      \
    \  else if(result[j] == \"4\")\n        {\n            result[j] = \"Four\";\n\
    \        }\n        else if(result[j] == \"5\")\n        {\n            result[j]\
    \ = \"Five\";\n        }\n        else if(result[j] == \"6\")\n        {\n   \
    \         result[j] = \"Six\";\n        }\n        else if(result[j] == \"7\"\
    )\n        {\n            result[j] = \"Seven\";\n        }\n        else if(result[j]\
    \ == \"8\")\n        {\n            result[j] = \"Eight\";\n        }\n      \
    \  else if(result[j] == \"9\")\n        {\n            result[j] = \"Nine\";\n\
    \        }\n        j++;\n    }\n    result.reverse;\n    return result;\n}\n\
    unittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L,\
    \ 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeqr4lnk_.d(26): Error: cannot implicitly convert expression `arr.length`
    of type `ulong` to `int`

    /tmp/tmpeqr4lnk_.d(37): Error: no property `sort` for type `long[]`

    /tmp/tmpeqr4lnk_.d(38): Error: no property `map` for type `long[]`

    /tmp/tmpeqr4lnk_.d(79): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeqr4lnk_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164432
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  enum S = Tuple!(string);\n    auto lst = arr.map!(a => S(a > 0 && a < 10 ?\
    \ a.to!string : \"\").expand)\n        .sort!((a, b) => a[0] > b[0])\n       \
    \ .map!(a => a[0])\n        .array;\n    lst.reverse;\n    lst = lst.map!(a =>\
    \ a == \"1\" ? \"One\" : a == \"2\" ? \"Two\" : a == \"3\" ? \"Three\" :\n   \
    \ a == \"4\" ? \"Four\" : a == \"5\" ? \"Five\" : a == \"6\" ? \"Six\" : a ==\
    \ \"7\" ? \"Seven\" :\n    a == \"8\" ? \"Eight\" : a == \"9\" ? \"Nine\" : a);\n\
    \    return lst;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0ex_3jp0.d(24): Error: need `this` for `__expand_field_0` of type
    `string`

    /tmp/tmp0ex_3jp0.d(25): Error: no property `map` for type `long[]`

    '
  stdout: ''
  timestamp: 1660164432
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  auto init = [](int x) {\n        switch(x) {\n            case 1: return \"\
    One\";\n            case 2: return \"Two\";\n            case 3: return \"Three\"\
    ;\n            case 4: return \"Four\";\n            case 5: return \"Five\";\n\
    \            case 6: return \"Six\";\n            case 7: return \"Seven\";\n\
    \            case 8: return \"Eight\";\n            case 9: return \"Nine\";\n\
    \            default: return \"\";\n        }\n    };\n    auto is_valid = [&](long\
    \ x) {\n        if (x > 9) return false;\n        if (x < 1) return false;\n \
    \       return true;\n    };\n    arr.retain!is_valid;\n    std.algorithm.sort!((a,\
    \ b) => a > b)(arr);\n    arr.reverse;\n    return arr.map!init.array;\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_q5nh7ox.d(24): Error: found `x` when expecting `.` following int

    /tmp/tmp_q5nh7ox.d(24): Error: found `)` when expecting identifier following `int`.

    /tmp/tmp_q5nh7ox.d(24): Error: found `{` when expecting `,`

    /tmp/tmp_q5nh7ox.d(25): Error: expression expected, not `switch`

    /tmp/tmp_q5nh7ox.d(25): Error: found `{` when expecting `,`

    /tmp/tmp_q5nh7ox.d(26): Error: expression expected, not `case`

    /tmp/tmp_q5nh7ox.d(26): Error: found `1` when expecting `,`

    /tmp/tmp_q5nh7ox.d(26): Error: expression expected, not `:`

    /tmp/tmp_q5nh7ox.d(26): Error: found `return` when expecting `,`

    /tmp/tmp_q5nh7ox.d(26): Error: found `;` when expecting `,`

    /tmp/tmp_q5nh7ox.d(27): Error: expression expected, not `case`

    /tmp/tmp_q5nh7ox.d(27): Error: found `2` when expecting `,`

    /tmp/tmp_q5nh7ox.d(27): Error: expression expected, not `:`

    /tmp/tmp_q5nh7ox.d(27): Error: found `return` when expecting `,`

    /tmp/tmp_q5nh7ox.d(27): Error: found `;` when expecting `,`

    /tmp/tmp_q5nh7ox.d(28): Error: expression expected, not `case`

    /t'
  stdout: ''
  timestamp: 1660164432
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] res = arr.filter!(a => a > 0 && a < 10).sort.map!((a => to!string(a))).reverse.map!(a\
    \ => \n    {\n        import std.format;\n        string str = \"\";\n       \
    \ //writefln(\"%s\", a);\n        switch(a)\n        {\n            case \"1\"\
    :\n                str = \"One\";\n                break;\n            case \"\
    2\":\n                str = \"Two\";\n                break;\n            case\
    \ \"3\":\n                str = \"Three\";\n                break;\n         \
    \   case \"4\":\n                str = \"Four\";\n                break;\n   \
    \         case \"5\":\n                str = \"Five\";\n                break;\n\
    \            case \"6\":\n                str = \"Six\";\n                break;\n\
    \            case \"7\":\n                str = \"Seven\";\n                break;\n\
    \            case \"8\":\n                str = \"Eight\";\n                break;\n\
    \            case \"9\":\n                str = \"Nine\";\n                break;\n\
    \        }\n        return str;\n    });\n    return res;\n}\nunittest\n{\n  \
    \  alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L,\
    \ 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3_u0gz2t.d(24): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3_u0gz2t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164432
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  import std.algorithm;\n    import std.array;\n    import std.conv;\n    import\
    \ std.range;\n    import std.stdio;\n    import std.string;\n    import std.typecons;\n\
    \    import std.math;\n    auto names = [ \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\" ];\n    auto res = [];\n \
    \   string i;\n    foreach(num; arr)\n    {\n        if(num < 1 || num > 9)\n\
    \            continue;\n        i = to!string(num);\n        res ~= names[to!int(i)-1];\n\
    \    }\n    res = res.sort.array;\n    res = res.retro;\n    return res;\n}\n\
    unittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L,\
    \ 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv0wwz32q.d(40): Error: cannot append type `string` to type `void[]`

    /tmp/tmpv0wwz32q.d(42): Error: template `std.algorithm.sorting.sort` cannot deduce
    function from argument types `!()(void[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/algorithm/sorting.d(1847):        `std.algorithm.sorting.sort(alias
    less = "a < b", SwapStrategy ss = SwapStrategy.unstable, Range)(Range r) if ((ss
    == SwapStrategy.unstable && (hasSwappableElements!Range || hasAssignableElements!Range)
    || ss != SwapStrategy.unstable && hasAssignableElements!Range) && isRandomAccessRange!Range
    && hasSlicing!Range && hasLength!Range)`

    /tmp/tmpv0wwz32q.d(43): Error: template `std.range.retro` cannot deduce function
    from argument types `!()(void[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/range/package.d(256):        `std.range.retro(Range)(Range
    r) if (isBidirectionalRange!(Unqual!Range))`

    /tmp/tmpv0wwz32q.d(44): Error: cannot implicitly convert expression `res` of type
    `void[]` to `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv0wwz32q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164432
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  auto result = appender!(string[])();\n   \n    arr.sort!((a, b) => a < b);\n\
    \    arr.filter!(a => 1 <= a && a <= 9).array.reverse();\n    \n    foreach(elem;\
    \ arr)\n    {\n        switch(elem)\n        {\n            case 1: result.put(\"\
    One\"); break;\n            case 2: result.put(\"Two\"); break;\n            case\
    \ 3: result.put(\"Three\"); break;\n            case 4: result.put(\"Four\");\
    \ break;\n            case 5: result.put(\"Five\"); break;\n            case 6:\
    \ result.put(\"Six\"); break;\n            case 7: result.put(\"Seven\"); break;\n\
    \            case 8: result.put(\"Eight\"); break;\n            case 9: result.put(\"\
    Nine\"); break;\n        }\n    }\n    \n    return result.data;\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvd_3nkjs.d(24): Error: template instance `appender!(string[])`
    template `appender` is not defined

    /tmp/tmpvd_3nkjs.d(26): Error: no property `sort` for type `long[]`

    /tmp/tmpvd_3nkjs.d(27): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvd_3nkjs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164432
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  auto arrTemp = map!(to!string)(arr.filter!(isValid)(arr));\n    arrTemp.sort;\n\
    \    arrTemp.reverse;\n    return map!(toWord)(arrTemp);\n}\nunittest\n{\n   \
    \ alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L,\
    \ 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnyson2qv.d(24): Error: template instance `map!(to!string)` template
    `map` is not defined

    /tmp/tmpnyson2qv.d(27): Error: template instance `map!toWord` template `map` is
    not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnyson2qv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164432
