name: HumanEval_54_same_chars
language: d
results:
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    if (s0.length == s1.length) {\n  \
    \      bool[] bs = new bool[s0.length];\n        foreach (char ch; s0) {\n   \
    \         for (size_t i = 0; i < s1.length; i++) {\n                if (s1[i]\
    \ == ch && !bs[i]) {\n                    bs[i] = true;\n                    break;\n\
    \                }\n            }\n        }\n        return all(bs);\n    }\n\
    \    return false;\n}\n/*\nunittest\n{\n    alias candidate = same_chars;\n\n\
    \    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1f994j5n.d(36): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1f994j5n.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    ubyte[] arr0 = s0.dup.byCodeUnits;\n\
    \    ubyte[] arr1 = s1.dup.byCodeUnits;\n    arr0.sort;\n    arr1.sort;\n    return\
    \ arr0 == arr1;\n}\n/*\nunittest\n{\n    alias candidate = same_chars;\n\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp37g9szrb.d(28): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp37g9szrb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] count = new int[26];\n    for\
    \ (immutable int c : s0) \n    {\n        count[c - 'a']++;\n    }\n    for (immutable\
    \ int c : s1) \n    {\n        count[c - 'a']--;\n    }\n    foreach (i; count)\
    \ \n    {\n        if (i != 0) \n        {\n            return false;\n      \
    \  }\n    }\n    return true;\n}\n/*\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcjnpccr7.d(23): Error: semicolon expected, not `:`\\n/tmp/tmpcjnpccr7.d(23):\
    \ Error: expression expected, not `:`\\n/tmp/tmpcjnpccr7.d(23): Error: found `s0`\
    \ when expecting `;` following `for` condition\\n/tmp/tmpcjnpccr7.d(27): Error:\
    \ semicolon expected, not `:`\\n/tmp/tmpcjnpccr7.d(27): Error: expression expected,\
    \ not `:`\\n/tmp/tmpcjnpccr7.d(27): Error: found `s1` when expecting `;` following\
    \ `for` condition\\n/tmp/tmpcjnpccr7.d(40): Error: unterminated /* */ comment\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcjnpccr7.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) \n   \
    \ {\n        return false;\n    }\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd604bqd3.d(26): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd604bqd3.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    // count characters in s0\n    int[char]\
    \ c0 = count(s0);\n    // count characters in s1\n    int[char] c1 = count(s1);\n\
    \    // make sure c0 and c1 have the same contents\n    return c0.equal(c1);\n\
    }\n \n/*\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmq1zdc24.d(30): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmq1zdc24.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[26];\n    int[]\
    \ c1 = new int[26];\n    s0.toLower().each!(a => ++c0[a - 'a']);\n    s1.toLower().each!(a\
    \ => ++c1[a - 'a']);\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpidvrlxl0.d(24): Error: no property `toLower` for type `string`\\\
    n/tmp/tmpidvrlxl0.d(25): Error: no property `toLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpidvrlxl0.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countChar();\n    auto\
    \ c1 = s1.countChar();\n    foreach(ch; c0.keys)\n    {\n        if(c0[ch] !=\
    \ c1[ch])\n            return false;\n    }\n    return true;\n}\nassert(same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\"));\nassert(same_chars(\"abcd\", \"dddddddabc\"\
    ));\nassert(same_chars(\"dddddddabc\", \"abcd\"));\nassert(!same_chars(\"eabcd\"\
    , \"dddddddabc\"));\nassert(!same_chars(\"abcd\", \"dddddddabce\"));\nassert(!same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\"));\n/*\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfu9co3zg.d(31): Error: declaration expected, not `assert`\\n/tmp/tmpfu9co3zg.d(32):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpfu9co3zg.d(33): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpfu9co3zg.d(34): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpfu9co3zg.d(35): Error: declaration expected, not `assert`\\\
    n/tmp/tmpfu9co3zg.d(36): Error: declaration expected, not `assert`\\n/tmp/tmpfu9co3zg.d(37):\
    \ Error: unterminated /* */ comment\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpfu9co3zg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = makeCounter(s0);\n    auto\
    \ c1 = makeCounter(s1);\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8ri8m6zl.d(22): Error: undefined identifier `makeCounter`\\n/tmp/tmp8ri8m6zl.d(23):\
    \ Error: undefined identifier `makeCounter`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp8ri8m6zl.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = Counter!char(s0);\n    auto\
    \ c1 = Counter!char(s1);\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfmfh0n_l.d(22): Error: template instance `Counter!char` template\
    \ `Counter` is not defined\\n/tmp/tmpfmfh0n_l.d(23): Error: template instance\
    \ `Counter!char` template `Counter` is not defined\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpfmfh0n_l.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) \n   \
    \ {\n        return false;\n    }\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvxzch4je.d(26): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvxzch4je.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n    \
    \    return false;\n    int[char] dict;\n    foreach (ch; s0) \n    {\n      \
    \  if (dict.contains(ch))\n            dict[ch]++;\n        else\n           \
    \ dict[ch] = 1;\n    }\n    foreach (ch; s1) \n    {\n        if (dict.contains(ch))\n\
    \            dict[ch]--;\n        else\n            return false;\n    }\n   \
    \ foreach (ch, count; dict) \n    {\n        if (count != 0)\n            return\
    \ false;\n    }\n    return true;\n}\n/*\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkagy6rd9.d(46): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkagy6rd9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    uint[] table0 = new uint[256];\n \
    \   uint[] table1 = new uint[256];\n    foreach (c; s0) table0[c]++;\n    foreach\
    \ (c; s1) table1[c]++;\n    return table0 == table1;\n}\nunittest\n{\n    alias\
    \ candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpzt0y4_h6.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4285b5]\\n??:? void tmpzt0y4_h6.__unittest_L28_C1()\
    \ [0x42810d]\\n??:? void tmpzt0y4_h6.__modtest() [0x428338]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c477]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b30a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430595]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430a44]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430521]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b2e1]\\n??:? runModuleUnitTests [0x42c24d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428a78]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4289ff]\\n??:? _d_run_main [0x42896a]\\n??:? main [0x42834b]\\\
    n??:? __libc_start_main [0x21023554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] char_counts = new int[256];\n\
    \    for (int c : s0) \n    {\n        ++char_counts[c];\n    }\n    for (int\
    \ c : s1) \n    {\n        --char_counts[c];\n    }\n    foreach (n; char_counts)\
    \ \n    {\n        if (n != 0) \n        {\n            return false;\n      \
    \  }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsi1ej3e0.d(23): Error: semicolon expected, not `:`\\n/tmp/tmpsi1ej3e0.d(23):\
    \ Error: expression expected, not `:`\\n/tmp/tmpsi1ej3e0.d(23): Error: found `s0`\
    \ when expecting `;` following `for` condition\\n/tmp/tmpsi1ej3e0.d(27): Error:\
    \ semicolon expected, not `:`\\n/tmp/tmpsi1ej3e0.d(27): Error: expression expected,\
    \ not `:`\\n/tmp/tmpsi1ej3e0.d(27): Error: found `s1` when expecting `;` following\
    \ `for` condition\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsi1ej3e0.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) \n   \
    \ {\n        return false;\n    }\n    auto c0 = s0.dup;\n    sort(c0);\n    auto\
    \ c1 = s1.dup;\n    sort(c1);\n    return c0 == c1;\n}\nunittest\n{\n    alias\
    \ candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb4e7bg49.d(27): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\n/tmp/tmpb4e7bg49.d(29): Error: undefined identifier `sort`,\
    \ did you mean function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpb4e7bg49.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    /*\n    s0.length == s1.length\n \
    \   s0.chars.count == s1.chars.count\n    else false\n    */\n    auto size =\
    \ s0.length;\n    if (size != s1.length) return false;\n    auto c0 = s0.countMap;\n\
    \    auto c1 = s1.countMap;\n    foreach (c; c0.keys) {\n        if (c0[c] !=\
    \ c1[c]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp5hfuow0.d(29): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpp5hfuow0.d(30): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp5hfuow0.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto add(T)(inout long[T] counts,\
    \ T ch) {\n        counts[ch]++;\n    }\n    auto sub(T)(inout long[T] counts,\
    \ T ch) {\n        counts[ch]--;\n    }\n    auto is_count_zero(T)(inout long[T]\
    \ counts, T ch) {\n        return counts[ch] == 0;\n    }\n    long[char] counts0\
    \ = [], counts1 = [];\n    auto s0 = s0.dup;\n    auto s1 = s1.dup;\n    add(s0,\
    \ s0[0]);\n    sub(s1, s1[0]);\n    auto iter0 = s0.splitter;\n    auto iter1\
    \ = s1.splitter;\n    auto check_str(inout string s, inout string s0, inout string\
    \ s1, inout auto iter, inout long[char] counts) {\n        foreach (ch; s) {\n\
    \            if (is_count_zero(counts, ch)) {\n                if (iter.empty)\
    \ {\n                    return false;\n                }\n                s ~=\
    \ ch;\n                ch = iter.front;\n                iter.popFront;\n    \
    \            if (s == s0) {\n                    add(counts, ch);\n          \
    \      } else {\n                    sub(counts, ch);\n                }\n   \
    \         } else {\n                if (s == s0) {\n                    sub(counts,\
    \ ch);\n                } else {\n                    add(counts, ch);\n     \
    \           }\n            }\n        }\n        return true;\n    }\n    return\
    \ check_str(s0, s0, s1, iter0, counts0) \n        && check_str(s1, s0, s1, iter1,\
    \ counts1);\n}\n/*\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph_vs7pic.d(65): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph_vs7pic.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    const int8[256] dict0 = new int8[256](-1);\n\
    \    int32 count = 0;\n    foreach (i, ch; s0) {\n        dict0[ch]++;\n     \
    \   if (dict0[ch] == 0) {\n            count++;\n        }\n    }\n    const int8[256]\
    \ dict1 = new int8[256](-1);\n    foreach (i, ch; s1) {\n        dict1[ch]++;\n\
    \        if (dict1[ch] == 0) {\n            count--;\n        }\n    }\n    return\
    \ count == 0;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4o5nxvar.d(22): Error: undefined identifier `int8`\\n/tmp/tmp4o5nxvar.d(22):\
    \ Error: undefined identifier `int8`\\n/tmp/tmp4o5nxvar.d(22): Error: undefined\
    \ identifier `int8`\\n/tmp/tmp4o5nxvar.d(23): Error: undefined identifier `int32`\\\
    n/tmp/tmp4o5nxvar.d(30): Error: undefined identifier `int8`\\n/tmp/tmp4o5nxvar.d(30):\
    \ Error: undefined identifier `int8`\\n/tmp/tmp4o5nxvar.d(30): Error: undefined\
    \ identifier `int8`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4o5nxvar.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    bool[] bs = new bool[256];\n    foreach\
    \ (dchar x; s0) \n    {\n        bs[x] = true;\n    }\n    foreach (dchar x; s1)\
    \ \n    {\n        if (!bs[x]) \n        {\n            return false;\n      \
    \  }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpojrbnhjd.d(43): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42822d]\\n??:? void tmpojrbnhjd.__unittest_L36_C1()\
    \ [0x427ee1]\\n??:? void tmpojrbnhjd.__modtest() [0x427fb0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c3cf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b1ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4304ed]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43099c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430479]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b1a5]\\n??:? runModuleUnitTests [0x42c1a5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428780]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428707]\\n??:? _d_run_main [0x428672]\\n??:? main [0x427fc3]\\\
    n??:? __libc_start_main [0x8f5e7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    // https://stackoverflow.com/questions/15095909/how-to-check-if-two-strings-have-the-same-characters\n\
    \    bool result;\n    if (s0.length < s1.length) {\n        result = false;\n\
    \    } else {\n        auto d = std.typecons.makeDMap!(string, uint)();\n    \
    \    foreach (c; s0) {\n            if (d.contains(c)) {\n                d[c]\
    \ += 1;\n            } else {\n                d[c] = 1;\n            }\n    \
    \    }\n        foreach (c; s1) {\n            if (d.contains(c)) {\n        \
    \        d[c] -= 1;\n            } else {\n                result = false;\n \
    \               break;\n            }\n        }\n        if (d.empty) {\n   \
    \         result = true;\n        } else {\n            result = std.algorithm.any!(a\
    \ => a != 0)(d.values);\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb76et18z.d(27): Error: undefined identifier `makeDMap` in module\
    \ `std.typecons`\\n/tmp/tmpb76et18z.d(46): Error: undefined identifier `algorithm`\
    \ in package `std`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb76et18z.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[char] cmap;\n    foreach(c; s0)\
    \ \n    {\n        cmap[c]++;\n    }\n    foreach(c; s1) \n    {\n        cmap[c]--;\n\
    \    }\n    foreach(v; cmap) \n    {\n        if(v!=0) \n        {\n         \
    \   return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_190mol5.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428951]\\n??:? void tmp_190mol5.__unittest_L40_C1()\
    \ [0x427c5d]\\n??:? void tmp_190mol5.__modtest() [0x427df0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d8e7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x4287ae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42a7b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42a840]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42a73d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x428785]\\n??:? runModuleUnitTests [0x42d6bd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42945c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4293e3]\\n??:? _d_run_main [0x42934e]\\n??:? main [0x427e03]\\\
    n??:? __libc_start_main [0xcee2f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
